{"dependencies":[{"name":"./pad.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":12,"index":67},"end":{"line":4,"column":31,"index":86}},{"start":{"line":4,"column":12,"index":67},"end":{"line":4,"column":31,"index":86}}],"key":"4GbDzXoUB/lOrpWLAgFlBpGGiVU="}},{"name":"./is-cuid.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":15,"index":30},"end":{"line":3,"column":38,"index":53}}],"key":"vzo5e72uUr1T2c0VXAgLw3qx9mg="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  /**\n   * cuid.js\n   * Collision-resistant UID generator for browsers and node.\n   * Sequential for fast db lookups and recency sorting.\n   * Safe for element IDs and server-side lookups.\n   *\n   * Extracted from CLCTR\n   *\n   * Copyright (c) Eric Elliott 2012\n   * MIT License\n   */\n\n  function createCuid(fingerprint) {\n    var blockSize = 4,\n      base = 36,\n      discreteValues = Math.pow(base, blockSize);\n    var c = 0;\n    function randomBlock() {\n      return _$$_REQUIRE(_dependencyMap[0], \"./pad.js\")((Math.random() * discreteValues << 0).toString(base), blockSize);\n    }\n    function safeCounter() {\n      c = c < discreteValues ? c : 0;\n      c++; // this is not subliminal\n      return c - 1;\n    }\n    function cuid() {\n      // Starting with a lowercase letter makes\n      // it HTML element ID friendly.\n      var letter = 'c',\n        // hard-coded allows for sequential access\n\n        // timestamp\n        // warning: this exposes the exact date and time\n        // that the uid was created.\n        timestamp = new Date().getTime().toString(base),\n        // Prevent same-machine collisions.\n        counter = _$$_REQUIRE(_dependencyMap[0], \"./pad.js\")(safeCounter().toString(base), blockSize),\n        // A few chars to generate distinct ids for different\n        // clients (so different computers are far less\n        // likely to generate the same id)\n        print = fingerprint(),\n        // Grab some more chars from Math.random()\n        random = randomBlock() + randomBlock();\n      return letter + timestamp + counter + print + random;\n    }\n    cuid.fingerprint = fingerprint;\n    cuid.isCuid = _$$_REQUIRE(_dependencyMap[1], \"./is-cuid.js\");\n    return cuid;\n  }\n  module.exports = createCuid;\n});","lineCount":54,"map":[[2,2,1,0],[2,14,1,12],[4,2,6,0],[5,0,7,0],[6,0,8,0],[7,0,9,0],[8,0,10,0],[9,0,11,0],[10,0,12,0],[11,0,13,0],[12,0,14,0],[13,0,15,0],[14,0,16,0],[16,2,18,0],[16,11,18,9,"createCuid"],[16,21,18,19,"createCuid"],[16,22,18,21,"fingerprint"],[16,33,18,32],[16,35,18,34],[17,4,19,4],[17,8,19,10,"blockSize"],[17,17,19,19],[17,20,19,22],[17,21,19,23],[18,6,20,4,"base"],[18,10,20,8],[18,13,20,11],[18,15,20,13],[19,6,21,4,"discreteValues"],[19,20,21,18],[19,23,21,21,"Math"],[19,27,21,25],[19,28,21,26,"pow"],[19,31,21,29],[19,32,21,30,"base"],[19,36,21,34],[19,38,21,36,"blockSize"],[19,47,21,45],[19,48,21,46],[20,4,23,4],[20,8,23,8,"c"],[20,9,23,9],[20,12,23,12],[20,13,23,13],[21,4,25,4],[21,13,25,13,"randomBlock"],[21,24,25,24,"randomBlock"],[21,25,25,24],[21,27,25,28],[22,6,26,8],[22,13,26,15,"_$$_REQUIRE"],[22,24,26,15],[22,25,26,15,"_dependencyMap"],[22,39,26,15],[22,56,26,19],[22,57,26,20,"Math"],[22,61,26,24],[22,62,26,25,"random"],[22,68,26,31],[22,69,26,32],[22,70,26,33],[22,73,27,8,"discreteValues"],[22,87,27,22],[22,91,27,26],[22,92,27,27],[22,94,28,9,"toString"],[22,102,28,17],[22,103,28,18,"base"],[22,107,28,22],[22,108,28,23],[22,110,28,25,"blockSize"],[22,119,28,34],[22,120,28,35],[23,4,29,4],[24,4,31,4],[24,13,31,13,"safeCounter"],[24,24,31,24,"safeCounter"],[24,25,31,24],[24,27,31,28],[25,6,32,8,"c"],[25,7,32,9],[25,10,32,12,"c"],[25,11,32,13],[25,14,32,16,"discreteValues"],[25,28,32,30],[25,31,32,33,"c"],[25,32,32,34],[25,35,32,37],[25,36,32,38],[26,6,33,8,"c"],[26,7,33,9],[26,9,33,11],[26,10,33,12],[26,11,33,13],[27,6,34,8],[27,13,34,15,"c"],[27,14,34,16],[27,17,34,19],[27,18,34,20],[28,4,35,4],[29,4,37,4],[29,13,37,13,"cuid"],[29,17,37,17,"cuid"],[29,18,37,17],[29,20,37,21],[30,6,38,8],[31,6,39,8],[32,6,40,8],[32,10,40,12,"letter"],[32,16,40,18],[32,19,40,21],[32,22,40,24],[33,8,40,26],[35,8,42,8],[36,8,43,8],[37,8,44,8],[38,8,45,8,"timestamp"],[38,17,45,17],[38,20,45,20],[38,24,45,24,"Date"],[38,28,45,28],[38,29,45,29],[38,30,45,30],[38,31,45,31,"getTime"],[38,38,45,38],[38,39,45,39],[38,40,45,40],[38,41,45,41,"toString"],[38,49,45,49],[38,50,45,50,"base"],[38,54,45,54],[38,55,45,55],[39,8,47,8],[40,8,48,8,"counter"],[40,15,48,15],[40,18,48,18,"_$$_REQUIRE"],[40,29,48,18],[40,30,48,18,"_dependencyMap"],[40,44,48,18],[40,61,48,22,"safeCounter"],[40,72,48,33],[40,73,48,34],[40,74,48,35],[40,75,48,36,"toString"],[40,83,48,44],[40,84,48,45,"base"],[40,88,48,49],[40,89,48,50],[40,91,48,52,"blockSize"],[40,100,48,61],[40,101,48,62],[41,8,50,8],[42,8,51,8],[43,8,52,8],[44,8,53,8,"print"],[44,13,53,13],[44,16,53,16,"fingerprint"],[44,27,53,27],[44,28,53,28],[44,29,53,29],[45,8,55,8],[46,8,56,8,"random"],[46,14,56,14],[46,17,56,17,"randomBlock"],[46,28,56,28],[46,29,56,29],[46,30,56,30],[46,33,56,33,"randomBlock"],[46,44,56,44],[46,45,56,45],[46,46,56,46],[47,6,58,8],[47,13,58,15,"letter"],[47,19,58,21],[47,22,58,24,"timestamp"],[47,31,58,33],[47,34,58,36,"counter"],[47,41,58,43],[47,44,58,46,"print"],[47,49,58,51],[47,52,58,54,"random"],[47,58,58,60],[48,4,59,4],[49,4,61,4,"cuid"],[49,8,61,8],[49,9,61,9,"fingerprint"],[49,20,61,20],[49,23,61,23,"fingerprint"],[49,34,61,34],[50,4,62,4,"cuid"],[50,8,62,8],[50,9,62,9,"isCuid"],[50,15,62,15],[50,18,62,15,"_$$_REQUIRE"],[50,29,62,15],[50,30,62,15,"_dependencyMap"],[50,44,62,15],[50,64,62,24],[51,4,64,4],[51,11,64,11,"cuid"],[51,15,64,15],[52,2,65,0],[53,2,67,0,"module"],[53,8,67,6],[53,9,67,7,"exports"],[53,16,67,14],[53,19,67,17,"createCuid"],[53,29,67,27],[54,0,67,28],[54,3]],"functionMap":{"names":["<global>","createCuid","randomBlock","safeCounter","cuid"],"mappings":"AAA;ACiB;ICO;KDI;IEE;KFI;IGE;KHsB;CDM"}},"type":"js/module"}]}