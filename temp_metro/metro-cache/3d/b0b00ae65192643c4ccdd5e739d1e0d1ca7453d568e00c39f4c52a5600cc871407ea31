{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":107,"column":43,"index":4714}}],"key":"5y7e5+zC7teYEEC6niD9f5zII1M="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":107,"column":43,"index":4714}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":107,"column":43,"index":4714}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"assert","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":33,"index":287},"end":{"line":7,"column":50,"index":304}}],"key":"Umsy3wQQm6DbjafRIeuw3teOkUU="}},{"name":"./cbor","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":15,"index":410},"end":{"line":10,"column":32,"index":427}},{"start":{"line":10,"column":15,"index":410},"end":{"line":10,"column":32,"index":427}}],"key":"/rURijBD4pLijTAo+sqlTJOwfcE="}},{"name":"./utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":16,"index":323},"end":{"line":8,"column":34,"index":341}},{"start":{"line":8,"column":16,"index":323},"end":{"line":8,"column":34,"index":341}},{"start":{"line":8,"column":16,"index":323},"end":{"line":8,"column":34,"index":341}},{"start":{"line":8,"column":16,"index":323},"end":{"line":8,"column":34,"index":341}},{"start":{"line":8,"column":16,"index":323},"end":{"line":8,"column":34,"index":341}}],"key":"Arg6QRuIuy5D/jfcnxX1qJiHjX8="}},{"name":"./fountainUtils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":24,"index":367},"end":{"line":9,"column":50,"index":393}}],"key":"MM4T9KPS6t3kff0JmAdPdrFfz+8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\");\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.FountainEncoderPart = void 0;\n  var assert_1 = __importDefault(_$$_REQUIRE(_dependencyMap[3], \"assert\"));\n  var FountainEncoderPart = /*#__PURE__*/function () {\n    function FountainEncoderPart(_seqNum, _seqLength, _messageLength, _checksum, _fragment) {\n      _classCallCheck(this, FountainEncoderPart);\n      this._seqNum = _seqNum;\n      this._seqLength = _seqLength;\n      this._messageLength = _messageLength;\n      this._checksum = _checksum;\n      this._fragment = _fragment;\n    }\n    return _createClass(FountainEncoderPart, [{\n      key: \"messageLength\",\n      get: function get() {\n        return this._messageLength;\n      }\n    }, {\n      key: \"fragment\",\n      get: function get() {\n        return this._fragment;\n      }\n    }, {\n      key: \"seqNum\",\n      get: function get() {\n        return this._seqNum;\n      }\n    }, {\n      key: \"seqLength\",\n      get: function get() {\n        return this._seqLength;\n      }\n    }, {\n      key: \"checksum\",\n      get: function get() {\n        return this._checksum;\n      }\n    }, {\n      key: \"cbor\",\n      value: function cbor() {\n        var result = _$$_REQUIRE(_dependencyMap[4], \"./cbor\").cborEncode([this._seqNum, this._seqLength, this._messageLength, this._checksum, this._fragment]);\n        return Buffer.from(result);\n      }\n    }, {\n      key: \"description\",\n      value: function description() {\n        return `seqNum:${this._seqNum}, seqLen:${this._seqLength}, messageLen:${this._messageLength}, checksum:${this._checksum}, data:${this._fragment.toString('hex')}`;\n      }\n    }], [{\n      key: \"fromCBOR\",\n      value: function fromCBOR(cborPayload) {\n        var _cbor_1$cborDecode = _$$_REQUIRE(_dependencyMap[4], \"./cbor\").cborDecode(cborPayload),\n          _cbor_1$cborDecode2 = _slicedToArray(_cbor_1$cborDecode, 5),\n          seqNum = _cbor_1$cborDecode2[0],\n          seqLength = _cbor_1$cborDecode2[1],\n          messageLength = _cbor_1$cborDecode2[2],\n          checksum = _cbor_1$cborDecode2[3],\n          fragment = _cbor_1$cborDecode2[4];\n        assert_1.default(typeof seqNum === 'number');\n        assert_1.default(typeof seqLength === 'number');\n        assert_1.default(typeof messageLength === 'number');\n        assert_1.default(typeof checksum === 'number');\n        assert_1.default(Buffer.isBuffer(fragment) && fragment.length > 0);\n        return new FountainEncoderPart(seqNum, seqLength, messageLength, checksum, Buffer.from(fragment));\n      }\n    }]);\n  }();\n  exports.FountainEncoderPart = FountainEncoderPart;\n  var FountainEncoder = /*#__PURE__*/function () {\n    function FountainEncoder(message) {\n      var maxFragmentLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n      var firstSeqNum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var minFragmentLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n      _classCallCheck(this, FountainEncoder);\n      var fragmentLength = FountainEncoder.findNominalFragmentLength(message.length, minFragmentLength, maxFragmentLength);\n      this._messageLength = message.length;\n      this._fragments = FountainEncoder.partitionMessage(message, fragmentLength);\n      this.fragmentLength = fragmentLength;\n      this.seqNum = _$$_REQUIRE(_dependencyMap[5], \"./utils\").toUint32(firstSeqNum);\n      this.checksum = _$$_REQUIRE(_dependencyMap[5], \"./utils\").getCRC(message);\n    }\n    return _createClass(FountainEncoder, [{\n      key: \"fragmentsLength\",\n      get: function get() {\n        return this._fragments.length;\n      }\n    }, {\n      key: \"fragments\",\n      get: function get() {\n        return this._fragments;\n      }\n    }, {\n      key: \"messageLength\",\n      get: function get() {\n        return this._messageLength;\n      }\n    }, {\n      key: \"isComplete\",\n      value: function isComplete() {\n        return this.seqNum >= this._fragments.length;\n      }\n    }, {\n      key: \"isSinglePart\",\n      value: function isSinglePart() {\n        return this._fragments.length === 1;\n      }\n    }, {\n      key: \"seqLength\",\n      value: function seqLength() {\n        return this._fragments.length;\n      }\n    }, {\n      key: \"mix\",\n      value: function mix(indexes) {\n        var _this = this;\n        return indexes.reduce(function (result, index) {\n          return _$$_REQUIRE(_dependencyMap[5], \"./utils\").bufferXOR(_this._fragments[index], result);\n        }, Buffer.alloc(this.fragmentLength, 0));\n      }\n    }, {\n      key: \"nextPart\",\n      value: function nextPart() {\n        this.seqNum = _$$_REQUIRE(_dependencyMap[5], \"./utils\").toUint32(this.seqNum + 1);\n        var indexes = _$$_REQUIRE(_dependencyMap[6], \"./fountainUtils\").chooseFragments(this.seqNum, this._fragments.length, this.checksum);\n        var mixed = this.mix(indexes);\n        return new FountainEncoderPart(this.seqNum, this._fragments.length, this._messageLength, this.checksum, mixed);\n      }\n    }], [{\n      key: \"findNominalFragmentLength\",\n      value: function findNominalFragmentLength(messageLength, minFragmentLength, maxFragmentLength) {\n        assert_1.default(messageLength > 0);\n        assert_1.default(minFragmentLength > 0);\n        assert_1.default(maxFragmentLength >= minFragmentLength);\n        var maxFragmentCount = Math.ceil(messageLength / minFragmentLength);\n        var fragmentLength = 0;\n        for (var fragmentCount = 1; fragmentCount <= maxFragmentCount; fragmentCount++) {\n          fragmentLength = Math.ceil(messageLength / fragmentCount);\n          if (fragmentLength <= maxFragmentLength) {\n            break;\n          }\n        }\n        return fragmentLength;\n      }\n    }, {\n      key: \"partitionMessage\",\n      value: function partitionMessage(message, fragmentLength) {\n        var remaining = Buffer.from(message);\n        var fragment;\n        var _fragments = [];\n        while (remaining.length > 0) {\n          var _utils_1$split = _$$_REQUIRE(_dependencyMap[5], \"./utils\").split(remaining, -fragmentLength);\n          var _utils_1$split2 = _slicedToArray(_utils_1$split, 2);\n          fragment = _utils_1$split2[0];\n          remaining = _utils_1$split2[1];\n          fragment = Buffer.alloc(fragmentLength, 0) // initialize with 0's to achieve the padding\n          .fill(fragment, 0, fragment.length);\n          _fragments.push(fragment);\n        }\n        return _fragments;\n      }\n    }]);\n  }();\n  exports.default = FountainEncoder;\n});","lineCount":177,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"_$$_REQUIRE"],[4,34,1,13],[4,35,1,13,"_dependencyMap"],[4,49,1,13],[5,2,1,13],[5,6,1,13,"_classCallCheck"],[5,21,1,13],[5,24,1,13,"_$$_REQUIRE"],[5,35,1,13],[5,36,1,13,"_dependencyMap"],[5,50,1,13],[6,2,1,13],[6,6,1,13,"_createClass"],[6,18,1,13],[6,21,1,13,"_$$_REQUIRE"],[6,32,1,13],[6,33,1,13,"_dependencyMap"],[6,47,1,13],[7,2,2,0],[7,6,2,4,"__importDefault"],[7,21,2,19],[7,24,2,23],[7,28,2,27],[7,32,2,31],[7,36,2,35],[7,37,2,36,"__importDefault"],[7,52,2,51],[7,56,2,56],[7,66,2,66,"mod"],[7,69,2,69],[7,71,2,71],[8,4,3,4],[8,11,3,12,"mod"],[8,14,3,15],[8,18,3,19,"mod"],[8,21,3,22],[8,22,3,23,"__esModule"],[8,32,3,33],[8,35,3,37,"mod"],[8,38,3,40],[8,41,3,43],[9,6,3,45],[9,15,3,54],[9,17,3,56,"mod"],[10,4,3,60],[10,5,3,61],[11,2,4,0],[11,3,4,1],[12,2,5,0,"Object"],[12,8,5,6],[12,9,5,7,"defineProperty"],[12,23,5,21],[12,24,5,22,"exports"],[12,31,5,29],[12,33,5,31],[12,45,5,43],[12,47,5,45],[13,4,5,47,"value"],[13,9,5,52],[13,11,5,54],[14,2,5,59],[14,3,5,60],[14,4,5,61],[15,2,6,0,"exports"],[15,9,6,7],[15,10,6,8,"FountainEncoderPart"],[15,29,6,27],[15,32,6,30],[15,37,6,35],[15,38,6,36],[16,2,7,0],[16,6,7,6,"assert_1"],[16,14,7,14],[16,17,7,17,"__importDefault"],[16,32,7,32],[16,33,7,33,"require"],[16,44,7,40],[16,45,7,40,"_dependencyMap"],[16,59,7,40],[16,72,7,49],[16,73,7,50],[16,74,7,51],[17,2,7,52],[17,6,11,6,"FountainEncoderPart"],[17,25,11,25],[18,4,12,4],[18,13,12,4,"FountainEncoderPart"],[18,33,12,16,"_seqNum"],[18,40,12,23],[18,42,12,25,"_seqLength"],[18,52,12,35],[18,54,12,37,"_messageLength"],[18,68,12,51],[18,70,12,53,"_checksum"],[18,79,12,62],[18,81,12,64,"_fragment"],[18,90,12,73],[18,92,12,75],[19,6,12,75,"_classCallCheck"],[19,21,12,75],[19,28,12,75,"FountainEncoderPart"],[19,47,12,75],[20,6,13,8],[20,10,13,12],[20,11,13,13,"_seqNum"],[20,18,13,20],[20,21,13,23,"_seqNum"],[20,28,13,30],[21,6,14,8],[21,10,14,12],[21,11,14,13,"_seqLength"],[21,21,14,23],[21,24,14,26,"_seqLength"],[21,34,14,36],[22,6,15,8],[22,10,15,12],[22,11,15,13,"_messageLength"],[22,25,15,27],[22,28,15,30,"_messageLength"],[22,42,15,44],[23,6,16,8],[23,10,16,12],[23,11,16,13,"_checksum"],[23,20,16,22],[23,23,16,25,"_checksum"],[23,32,16,34],[24,6,17,8],[24,10,17,12],[24,11,17,13,"_fragment"],[24,20,17,22],[24,23,17,25,"_fragment"],[24,32,17,34],[25,4,18,4],[26,4,18,5],[26,11,18,5,"_createClass"],[26,23,18,5],[26,24,18,5,"FountainEncoderPart"],[26,43,18,5],[27,6,18,5,"key"],[27,9,18,5],[28,6,18,5,"get"],[28,9,18,5],[28,11,19,4],[28,20,19,4,"get"],[28,24,19,4],[28,26,19,24],[29,8,19,26],[29,15,19,33],[29,19,19,37],[29,20,19,38,"_messageLength"],[29,34,19,52],[30,6,19,54],[31,4,19,55],[32,6,19,55,"key"],[32,9,19,55],[33,6,19,55,"get"],[33,9,19,55],[33,11,20,4],[33,20,20,4,"get"],[33,24,20,4],[33,26,20,19],[34,8,20,21],[34,15,20,28],[34,19,20,32],[34,20,20,33,"_fragment"],[34,29,20,42],[35,6,20,44],[36,4,20,45],[37,6,20,45,"key"],[37,9,20,45],[38,6,20,45,"get"],[38,9,20,45],[38,11,21,4],[38,20,21,4,"get"],[38,24,21,4],[38,26,21,17],[39,8,21,19],[39,15,21,26],[39,19,21,30],[39,20,21,31,"_seqNum"],[39,27,21,38],[40,6,21,40],[41,4,21,41],[42,6,21,41,"key"],[42,9,21,41],[43,6,21,41,"get"],[43,9,21,41],[43,11,22,4],[43,20,22,4,"get"],[43,24,22,4],[43,26,22,20],[44,8,22,22],[44,15,22,29],[44,19,22,33],[44,20,22,34,"_seqLength"],[44,30,22,44],[45,6,22,46],[46,4,22,47],[47,6,22,47,"key"],[47,9,22,47],[48,6,22,47,"get"],[48,9,22,47],[48,11,23,4],[48,20,23,4,"get"],[48,24,23,4],[48,26,23,19],[49,8,23,21],[49,15,23,28],[49,19,23,32],[49,20,23,33,"_checksum"],[49,29,23,42],[50,6,23,44],[51,4,23,45],[52,6,23,45,"key"],[52,9,23,45],[53,6,23,45,"value"],[53,11,23,45],[53,13,24,4],[53,22,24,4,"cbor"],[53,26,24,8,"cbor"],[53,27,24,8],[53,29,24,11],[54,8,25,8],[54,12,25,14,"result"],[54,18,25,20],[54,21,25,23,"_$$_REQUIRE"],[54,32,25,23],[54,33,25,23,"_dependencyMap"],[54,47,25,23],[54,62,25,30,"cborEncode"],[54,72,25,40],[54,73,25,41],[54,74,26,12],[54,78,26,16],[54,79,26,17,"_seqNum"],[54,86,26,24],[54,88,27,12],[54,92,27,16],[54,93,27,17,"_seqLength"],[54,103,27,27],[54,105,28,12],[54,109,28,16],[54,110,28,17,"_messageLength"],[54,124,28,31],[54,126,29,12],[54,130,29,16],[54,131,29,17,"_checksum"],[54,140,29,26],[54,142,30,12],[54,146,30,16],[54,147,30,17,"_fragment"],[54,156,30,26],[54,157,31,9],[54,158,31,10],[55,8,32,8],[55,15,32,15,"Buffer"],[55,21,32,21],[55,22,32,22,"from"],[55,26,32,26],[55,27,32,27,"result"],[55,33,32,33],[55,34,32,34],[56,6,33,4],[57,4,33,5],[58,6,33,5,"key"],[58,9,33,5],[59,6,33,5,"value"],[59,11,33,5],[59,13,34,4],[59,22,34,4,"description"],[59,33,34,15,"description"],[59,34,34,15],[59,36,34,18],[60,8,35,8],[60,15,35,15],[60,25,35,25],[60,29,35,29],[60,30,35,30,"_seqNum"],[60,37,35,37],[60,49,35,49],[60,53,35,53],[60,54,35,54,"_seqLength"],[60,64,35,64],[60,80,35,80],[60,84,35,84],[60,85,35,85,"_messageLength"],[60,99,35,99],[60,113,35,113],[60,117,35,117],[60,118,35,118,"_checksum"],[60,127,35,127],[60,137,35,137],[60,141,35,141],[60,142,35,142,"_fragment"],[60,151,35,151],[60,152,35,152,"toString"],[60,160,35,160],[60,161,35,161],[60,166,35,166],[60,167,35,167],[60,169,35,169],[61,6,36,4],[62,4,36,5],[63,6,36,5,"key"],[63,9,36,5],[64,6,36,5,"value"],[64,11,36,5],[64,13,37,4],[64,22,37,11,"fromCBOR"],[64,30,37,19,"fromCBOR"],[64,31,37,20,"cborPayload"],[64,42,37,31],[64,44,37,33],[65,8,38,8],[65,12,38,8,"_cbor_1$cborDecode"],[65,30,38,8],[65,33,38,72,"_$$_REQUIRE"],[65,44,38,72],[65,45,38,72,"_dependencyMap"],[65,59,38,72],[65,74,38,79,"cborDecode"],[65,84,38,89],[65,85,38,90,"cborPayload"],[65,96,38,101],[65,97,38,102],[66,10,38,102,"_cbor_1$cborDecode2"],[66,29,38,102],[66,32,38,102,"_slicedToArray"],[66,46,38,102],[66,47,38,102,"_cbor_1$cborDecode"],[66,65,38,102],[67,10,38,15,"seqNum"],[67,16,38,21],[67,19,38,21,"_cbor_1$cborDecode2"],[67,38,38,21],[68,10,38,23,"seqLength"],[68,19,38,32],[68,22,38,32,"_cbor_1$cborDecode2"],[68,41,38,32],[69,10,38,34,"messageLength"],[69,23,38,47],[69,26,38,47,"_cbor_1$cborDecode2"],[69,45,38,47],[70,10,38,49,"checksum"],[70,18,38,57],[70,21,38,57,"_cbor_1$cborDecode2"],[70,40,38,57],[71,10,38,59,"fragment"],[71,18,38,67],[71,21,38,67,"_cbor_1$cborDecode2"],[71,40,38,67],[72,8,39,8,"assert_1"],[72,16,39,16],[72,17,39,17,"default"],[72,24,39,24],[72,25,39,25],[72,32,39,32,"seqNum"],[72,38,39,38],[72,43,39,43],[72,51,39,51],[72,52,39,52],[73,8,40,8,"assert_1"],[73,16,40,16],[73,17,40,17,"default"],[73,24,40,24],[73,25,40,25],[73,32,40,32,"seqLength"],[73,41,40,41],[73,46,40,46],[73,54,40,54],[73,55,40,55],[74,8,41,8,"assert_1"],[74,16,41,16],[74,17,41,17,"default"],[74,24,41,24],[74,25,41,25],[74,32,41,32,"messageLength"],[74,45,41,45],[74,50,41,50],[74,58,41,58],[74,59,41,59],[75,8,42,8,"assert_1"],[75,16,42,16],[75,17,42,17,"default"],[75,24,42,24],[75,25,42,25],[75,32,42,32,"checksum"],[75,40,42,40],[75,45,42,45],[75,53,42,53],[75,54,42,54],[76,8,43,8,"assert_1"],[76,16,43,16],[76,17,43,17,"default"],[76,24,43,24],[76,25,43,25,"Buffer"],[76,31,43,31],[76,32,43,32,"isBuffer"],[76,40,43,40],[76,41,43,41,"fragment"],[76,49,43,49],[76,50,43,50],[76,54,43,54,"fragment"],[76,62,43,62],[76,63,43,63,"length"],[76,69,43,69],[76,72,43,72],[76,73,43,73],[76,74,43,74],[77,8,44,8],[77,15,44,15],[77,19,44,19,"FountainEncoderPart"],[77,38,44,38],[77,39,44,39,"seqNum"],[77,45,44,45],[77,47,44,47,"seqLength"],[77,56,44,56],[77,58,44,58,"messageLength"],[77,71,44,71],[77,73,44,73,"checksum"],[77,81,44,81],[77,83,44,83,"Buffer"],[77,89,44,89],[77,90,44,90,"from"],[77,94,44,94],[77,95,44,95,"fragment"],[77,103,44,103],[77,104,44,104],[77,105,44,105],[78,6,45,4],[79,4,45,5],[80,2,45,5],[81,2,47,0,"exports"],[81,9,47,7],[81,10,47,8,"FountainEncoderPart"],[81,29,47,27],[81,32,47,30,"FountainEncoderPart"],[81,51,47,49],[82,2,47,50],[82,6,48,6,"FountainEncoder"],[82,21,48,21],[83,4,49,4],[83,13,49,4,"FountainEncoder"],[83,29,49,16,"message"],[83,36,49,23],[83,38,49,91],[84,6,49,91],[84,10,49,25,"maxFragmentLength"],[84,27,49,42],[84,30,49,42,"arguments"],[84,39,49,42],[84,40,49,42,"length"],[84,46,49,42],[84,54,49,42,"arguments"],[84,63,49,42],[84,71,49,42,"undefined"],[84,80,49,42],[84,83,49,42,"arguments"],[84,92,49,42],[84,98,49,45],[84,101,49,48],[85,6,49,48],[85,10,49,50,"firstSeqNum"],[85,21,49,61],[85,24,49,61,"arguments"],[85,33,49,61],[85,34,49,61,"length"],[85,40,49,61],[85,48,49,61,"arguments"],[85,57,49,61],[85,65,49,61,"undefined"],[85,74,49,61],[85,77,49,61,"arguments"],[85,86,49,61],[85,92,49,64],[85,93,49,65],[86,6,49,65],[86,10,49,67,"minFragmentLength"],[86,27,49,84],[86,30,49,84,"arguments"],[86,39,49,84],[86,40,49,84,"length"],[86,46,49,84],[86,54,49,84,"arguments"],[86,63,49,84],[86,71,49,84,"undefined"],[86,80,49,84],[86,83,49,84,"arguments"],[86,92,49,84],[86,98,49,87],[86,100,49,89],[87,6,49,89,"_classCallCheck"],[87,21,49,89],[87,28,49,89,"FountainEncoder"],[87,43,49,89],[88,6,50,8],[88,10,50,14,"fragmentLength"],[88,24,50,28],[88,27,50,31,"FountainEncoder"],[88,42,50,46],[88,43,50,47,"findNominalFragmentLength"],[88,68,50,72],[88,69,50,73,"message"],[88,76,50,80],[88,77,50,81,"length"],[88,83,50,87],[88,85,50,89,"minFragmentLength"],[88,102,50,106],[88,104,50,108,"maxFragmentLength"],[88,121,50,125],[88,122,50,126],[89,6,51,8],[89,10,51,12],[89,11,51,13,"_messageLength"],[89,25,51,27],[89,28,51,30,"message"],[89,35,51,37],[89,36,51,38,"length"],[89,42,51,44],[90,6,52,8],[90,10,52,12],[90,11,52,13,"_fragments"],[90,21,52,23],[90,24,52,26,"FountainEncoder"],[90,39,52,41],[90,40,52,42,"partitionMessage"],[90,56,52,58],[90,57,52,59,"message"],[90,64,52,66],[90,66,52,68,"fragmentLength"],[90,80,52,82],[90,81,52,83],[91,6,53,8],[91,10,53,12],[91,11,53,13,"fragmentLength"],[91,25,53,27],[91,28,53,30,"fragmentLength"],[91,42,53,44],[92,6,54,8],[92,10,54,12],[92,11,54,13,"seqNum"],[92,17,54,19],[92,20,54,22,"_$$_REQUIRE"],[92,31,54,22],[92,32,54,22,"_dependencyMap"],[92,46,54,22],[92,62,54,30,"toUint32"],[92,70,54,38],[92,71,54,39,"firstSeqNum"],[92,82,54,50],[92,83,54,51],[93,6,55,8],[93,10,55,12],[93,11,55,13,"checksum"],[93,19,55,21],[93,22,55,24,"_$$_REQUIRE"],[93,33,55,24],[93,34,55,24,"_dependencyMap"],[93,48,55,24],[93,64,55,32,"getCRC"],[93,70,55,38],[93,71,55,39,"message"],[93,78,55,46],[93,79,55,47],[94,4,56,4],[95,4,56,5],[95,11,56,5,"_createClass"],[95,23,56,5],[95,24,56,5,"FountainEncoder"],[95,39,56,5],[96,6,56,5,"key"],[96,9,56,5],[97,6,56,5,"get"],[97,9,56,5],[97,11,57,4],[97,20,57,4,"get"],[97,24,57,4],[97,26,57,26],[98,8,57,28],[98,15,57,35],[98,19,57,39],[98,20,57,40,"_fragments"],[98,30,57,50],[98,31,57,51,"length"],[98,37,57,57],[99,6,57,59],[100,4,57,60],[101,6,57,60,"key"],[101,9,57,60],[102,6,57,60,"get"],[102,9,57,60],[102,11,58,4],[102,20,58,4,"get"],[102,24,58,4],[102,26,58,20],[103,8,58,22],[103,15,58,29],[103,19,58,33],[103,20,58,34,"_fragments"],[103,30,58,44],[104,6,58,46],[105,4,58,47],[106,6,58,47,"key"],[106,9,58,47],[107,6,58,47,"get"],[107,9,58,47],[107,11,59,4],[107,20,59,4,"get"],[107,24,59,4],[107,26,59,24],[108,8,59,26],[108,15,59,33],[108,19,59,37],[108,20,59,38,"_messageLength"],[108,34,59,52],[109,6,59,54],[110,4,59,55],[111,6,59,55,"key"],[111,9,59,55],[112,6,59,55,"value"],[112,11,59,55],[112,13,60,4],[112,22,60,4,"isComplete"],[112,32,60,14,"isComplete"],[112,33,60,14],[112,35,60,17],[113,8,61,8],[113,15,61,15],[113,19,61,19],[113,20,61,20,"seqNum"],[113,26,61,26],[113,30,61,30],[113,34,61,34],[113,35,61,35,"_fragments"],[113,45,61,45],[113,46,61,46,"length"],[113,52,61,52],[114,6,62,4],[115,4,62,5],[116,6,62,5,"key"],[116,9,62,5],[117,6,62,5,"value"],[117,11,62,5],[117,13,63,4],[117,22,63,4,"isSinglePart"],[117,34,63,16,"isSinglePart"],[117,35,63,16],[117,37,63,19],[118,8,64,8],[118,15,64,15],[118,19,64,19],[118,20,64,20,"_fragments"],[118,30,64,30],[118,31,64,31,"length"],[118,37,64,37],[118,42,64,42],[118,43,64,43],[119,6,65,4],[120,4,65,5],[121,6,65,5,"key"],[121,9,65,5],[122,6,65,5,"value"],[122,11,65,5],[122,13,66,4],[122,22,66,4,"seqLength"],[122,31,66,13,"seqLength"],[122,32,66,13],[122,34,66,16],[123,8,67,8],[123,15,67,15],[123,19,67,19],[123,20,67,20,"_fragments"],[123,30,67,30],[123,31,67,31,"length"],[123,37,67,37],[124,6,68,4],[125,4,68,5],[126,6,68,5,"key"],[126,9,68,5],[127,6,68,5,"value"],[127,11,68,5],[127,13,69,4],[127,22,69,4,"mix"],[127,25,69,7,"mix"],[127,26,69,8,"indexes"],[127,33,69,15],[127,35,69,17],[128,8,69,17],[128,12,69,17,"_this"],[128,17,69,17],[129,8,70,8],[129,15,70,15,"indexes"],[129,22,70,22],[129,23,70,23,"reduce"],[129,29,70,29],[129,30,70,30],[129,40,70,31,"result"],[129,46,70,37],[129,48,70,39,"index"],[129,53,70,44],[130,10,70,44],[130,17,70,49,"_$$_REQUIRE"],[130,28,70,49],[130,29,70,49,"_dependencyMap"],[130,43,70,49],[130,59,70,57,"bufferXOR"],[130,68,70,66],[130,69,70,67,"_this"],[130,74,70,71],[130,75,70,72,"_fragments"],[130,85,70,82],[130,86,70,83,"index"],[130,91,70,88],[130,92,70,89],[130,94,70,91,"result"],[130,100,70,97],[130,101,70,98],[131,8,70,98],[131,11,70,100,"Buffer"],[131,17,70,106],[131,18,70,107,"alloc"],[131,23,70,112],[131,24,70,113],[131,28,70,117],[131,29,70,118,"fragmentLength"],[131,43,70,132],[131,45,70,134],[131,46,70,135],[131,47,70,136],[131,48,70,137],[132,6,71,4],[133,4,71,5],[134,6,71,5,"key"],[134,9,71,5],[135,6,71,5,"value"],[135,11,71,5],[135,13,72,4],[135,22,72,4,"nextPart"],[135,30,72,12,"nextPart"],[135,31,72,12],[135,33,72,15],[136,8,73,8],[136,12,73,12],[136,13,73,13,"seqNum"],[136,19,73,19],[136,22,73,22,"_$$_REQUIRE"],[136,33,73,22],[136,34,73,22,"_dependencyMap"],[136,48,73,22],[136,64,73,30,"toUint32"],[136,72,73,38],[136,73,73,39],[136,77,73,43],[136,78,73,44,"seqNum"],[136,84,73,50],[136,87,73,53],[136,88,73,54],[136,89,73,55],[137,8,74,8],[137,12,74,14,"indexes"],[137,19,74,21],[137,22,74,24,"_$$_REQUIRE"],[137,33,74,24],[137,34,74,24,"_dependencyMap"],[137,48,74,24],[137,72,74,40,"chooseFragments"],[137,87,74,55],[137,88,74,56],[137,92,74,60],[137,93,74,61,"seqNum"],[137,99,74,67],[137,101,74,69],[137,105,74,73],[137,106,74,74,"_fragments"],[137,116,74,84],[137,117,74,85,"length"],[137,123,74,91],[137,125,74,93],[137,129,74,97],[137,130,74,98,"checksum"],[137,138,74,106],[137,139,74,107],[138,8,75,8],[138,12,75,14,"mixed"],[138,17,75,19],[138,20,75,22],[138,24,75,26],[138,25,75,27,"mix"],[138,28,75,30],[138,29,75,31,"indexes"],[138,36,75,38],[138,37,75,39],[139,8,76,8],[139,15,76,15],[139,19,76,19,"FountainEncoderPart"],[139,38,76,38],[139,39,76,39],[139,43,76,43],[139,44,76,44,"seqNum"],[139,50,76,50],[139,52,76,52],[139,56,76,56],[139,57,76,57,"_fragments"],[139,67,76,67],[139,68,76,68,"length"],[139,74,76,74],[139,76,76,76],[139,80,76,80],[139,81,76,81,"_messageLength"],[139,95,76,95],[139,97,76,97],[139,101,76,101],[139,102,76,102,"checksum"],[139,110,76,110],[139,112,76,112,"mixed"],[139,117,76,117],[139,118,76,118],[140,6,77,4],[141,4,77,5],[142,6,77,5,"key"],[142,9,77,5],[143,6,77,5,"value"],[143,11,77,5],[143,13,78,4],[143,22,78,11,"findNominalFragmentLength"],[143,47,78,36,"findNominalFragmentLength"],[143,48,78,37,"messageLength"],[143,61,78,50],[143,63,78,52,"minFragmentLength"],[143,80,78,69],[143,82,78,71,"maxFragmentLength"],[143,99,78,88],[143,101,78,90],[144,8,79,8,"assert_1"],[144,16,79,16],[144,17,79,17,"default"],[144,24,79,24],[144,25,79,25,"messageLength"],[144,38,79,38],[144,41,79,41],[144,42,79,42],[144,43,79,43],[145,8,80,8,"assert_1"],[145,16,80,16],[145,17,80,17,"default"],[145,24,80,24],[145,25,80,25,"minFragmentLength"],[145,42,80,42],[145,45,80,45],[145,46,80,46],[145,47,80,47],[146,8,81,8,"assert_1"],[146,16,81,16],[146,17,81,17,"default"],[146,24,81,24],[146,25,81,25,"maxFragmentLength"],[146,42,81,42],[146,46,81,46,"minFragmentLength"],[146,63,81,63],[146,64,81,64],[147,8,82,8],[147,12,82,14,"maxFragmentCount"],[147,28,82,30],[147,31,82,33,"Math"],[147,35,82,37],[147,36,82,38,"ceil"],[147,40,82,42],[147,41,82,43,"messageLength"],[147,54,82,56],[147,57,82,59,"minFragmentLength"],[147,74,82,76],[147,75,82,77],[148,8,83,8],[148,12,83,12,"fragmentLength"],[148,26,83,26],[148,29,83,29],[148,30,83,30],[149,8,84,8],[149,13,84,13],[149,17,84,17,"fragmentCount"],[149,30,84,30],[149,33,84,33],[149,34,84,34],[149,36,84,36,"fragmentCount"],[149,49,84,49],[149,53,84,53,"maxFragmentCount"],[149,69,84,69],[149,71,84,71,"fragmentCount"],[149,84,84,84],[149,86,84,86],[149,88,84,88],[150,10,85,12,"fragmentLength"],[150,24,85,26],[150,27,85,29,"Math"],[150,31,85,33],[150,32,85,34,"ceil"],[150,36,85,38],[150,37,85,39,"messageLength"],[150,50,85,52],[150,53,85,55,"fragmentCount"],[150,66,85,68],[150,67,85,69],[151,10,86,12],[151,14,86,16,"fragmentLength"],[151,28,86,30],[151,32,86,34,"maxFragmentLength"],[151,49,86,51],[151,51,86,53],[152,12,87,16],[153,10,88,12],[154,8,89,8],[155,8,90,8],[155,15,90,15,"fragmentLength"],[155,29,90,29],[156,6,91,4],[157,4,91,5],[158,6,91,5,"key"],[158,9,91,5],[159,6,91,5,"value"],[159,11,91,5],[159,13,92,4],[159,22,92,11,"partitionMessage"],[159,38,92,27,"partitionMessage"],[159,39,92,28,"message"],[159,46,92,35],[159,48,92,37,"fragmentLength"],[159,62,92,51],[159,64,92,53],[160,8,93,8],[160,12,93,12,"remaining"],[160,21,93,21],[160,24,93,24,"Buffer"],[160,30,93,30],[160,31,93,31,"from"],[160,35,93,35],[160,36,93,36,"message"],[160,43,93,43],[160,44,93,44],[161,8,94,8],[161,12,94,12,"fragment"],[161,20,94,20],[162,8,95,8],[162,12,95,12,"_fragments"],[162,22,95,22],[162,25,95,25],[162,27,95,27],[163,8,96,8],[163,15,96,15,"remaining"],[163,24,96,24],[163,25,96,25,"length"],[163,31,96,31],[163,34,96,34],[163,35,96,35],[163,37,96,37],[164,10,96,37],[164,14,96,37,"_utils_1$split"],[164,28,96,37],[164,31,97,36,"_$$_REQUIRE"],[164,42,97,36],[164,43,97,36,"_dependencyMap"],[164,57,97,36],[164,73,97,44,"split"],[164,78,97,49],[164,79,97,50,"remaining"],[164,88,97,59],[164,90,97,61],[164,91,97,62,"fragmentLength"],[164,105,97,76],[164,106,97,77],[165,10,97,77],[165,14,97,77,"_utils_1$split2"],[165,29,97,77],[165,32,97,77,"_slicedToArray"],[165,46,97,77],[165,47,97,77,"_utils_1$split"],[165,61,97,77],[166,10,97,13,"fragment"],[166,18,97,21],[166,21,97,21,"_utils_1$split2"],[166,36,97,21],[167,10,97,23,"remaining"],[167,19,97,32],[167,22,97,32,"_utils_1$split2"],[167,37,97,32],[168,10,98,12,"fragment"],[168,18,98,20],[168,21,98,23,"Buffer"],[168,27,98,29],[168,28,99,17,"alloc"],[168,33,99,22],[168,34,99,23,"fragmentLength"],[168,48,99,37],[168,50,99,39],[168,51,99,40],[168,52,99,41],[168,53,99,42],[169,10,99,42],[169,11,100,17,"fill"],[169,15,100,21],[169,16,100,22,"fragment"],[169,24,100,30],[169,26,100,32],[169,27,100,33],[169,29,100,35,"fragment"],[169,37,100,43],[169,38,100,44,"length"],[169,44,100,50],[169,45,100,51],[170,10,101,12,"_fragments"],[170,20,101,22],[170,21,101,23,"push"],[170,25,101,27],[170,26,101,28,"fragment"],[170,34,101,36],[170,35,101,37],[171,8,102,8],[172,8,103,8],[172,15,103,15,"_fragments"],[172,25,103,25],[173,6,104,4],[174,4,104,5],[175,2,104,5],[176,2,106,0,"exports"],[176,9,106,7],[176,10,106,8,"default"],[176,17,106,15],[176,20,106,18,"FountainEncoder"],[176,35,106,33],[177,0,106,34],[177,3]],"functionMap":{"names":["<global>","<anonymous>","FountainEncoderPart","FountainEncoderPart#constructor","FountainEncoderPart#get__messageLength","FountainEncoderPart#get__fragment","FountainEncoderPart#get__seqNum","FountainEncoderPart#get__seqLength","FountainEncoderPart#get__checksum","FountainEncoderPart#cbor","FountainEncoderPart#description","FountainEncoderPart.fromCBOR","FountainEncoder","FountainEncoder#constructor","FountainEncoder#get__fragmentsLength","FountainEncoder#get__fragments","FountainEncoder#get__messageLength","FountainEncoder#isComplete","FountainEncoder#isSinglePart","FountainEncoder#seqLength","FountainEncoder#mix","indexes.reduce$argument_0","FountainEncoder#nextPart","FountainEncoder.findNominalFragmentLength","FountainEncoder.partitionMessage"],"mappings":"AAA;wDCC;CDE;AEO;ICC;KDM;IEC,mDF;IGC,yCH;IIC,qCJ;IKC,2CL;IMC,yCN;IOC;KPS;IQC;KRE;ISC;KTQ;CFC;AYE;ICC;KDO;IEC,wDF;IGC,2CH;IIC,mDJ;IKC;KLE;IMC;KNE;IOC;KPE;IQC;8BCC,oED;KRC;IUC;KVK;IWC;KXa;IYC;KZY;CZC"}},"type":"js/module"}]}