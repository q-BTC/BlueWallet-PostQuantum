{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.decodeSimpleCBOR = exports.encodeSimpleCBOR = exports.composeHeader = void 0;\n  /*\n      this an simple cbor implementation which is just using\n      on BCR-05\n  */\n  exports.composeHeader = function (length) {\n    var header;\n    if (length > 0 && length <= 23) {\n      header = Buffer.from([0x40 + length]);\n    }\n    if (length >= 24 && length <= 255) {\n      var headerLength = Buffer.alloc(1);\n      headerLength.writeUInt8(length);\n      header = Buffer.concat([Buffer.from([0x58]), headerLength]);\n    }\n    if (length >= 256 && length <= 65535) {\n      var headerLength = Buffer.alloc(2);\n      headerLength.writeUInt16BE(length);\n      header = Buffer.concat([Buffer.from([0x59]), headerLength]);\n    }\n    if (length >= 65536 && length <= Math.pow(2, 32) - 1) {\n      var headerLength = Buffer.alloc(4);\n      headerLength.writeUInt32BE(length);\n      header = Buffer.concat([Buffer.from([0x60]), headerLength]);\n    }\n    return header;\n  };\n  exports.encodeSimpleCBOR = function (data) {\n    var bufferData = Buffer.from(data, 'hex');\n    if (bufferData.length <= 0 || bufferData.length >= Math.pow(2, 32)) {\n      throw new Error('data is too large');\n    }\n    var header = exports.composeHeader(bufferData.length);\n    var endcoded = Buffer.concat([header, bufferData]);\n    return endcoded.toString('hex');\n  };\n  exports.decodeSimpleCBOR = function (data) {\n    var dataBuffer = Buffer.from(data, 'hex');\n    if (dataBuffer.length <= 0) {\n      throw new Error('input data is not valid');\n    }\n    var header = dataBuffer[0];\n    if (header < 0x58) {\n      var dataLength = header - 0x40;\n      return dataBuffer.slice(1, 1 + dataLength).toString('hex');\n    }\n    if (header == 0x58) {\n      var dataLength = dataBuffer.slice(1, 2).readUInt8();\n      return dataBuffer.slice(2, 2 + dataLength).toString('hex');\n    }\n    if (header == 0x59) {\n      var dataLength = dataBuffer.slice(1, 3).readUInt16BE();\n      return dataBuffer.slice(3, 3 + dataLength).toString('hex');\n    }\n    if (header == 0x60) {\n      var dataLength = dataBuffer.slice(1, 5).readUInt32BE();\n      return dataBuffer.slice(5, 5 + dataLength).toString('hex');\n    }\n  };\n});","lineCount":66,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"decodeSimpleCBOR"],[7,26,3,24],[7,29,3,27,"exports"],[7,36,3,34],[7,37,3,35,"encodeSimpleCBOR"],[7,53,3,51],[7,56,3,54,"exports"],[7,63,3,61],[7,64,3,62,"composeHeader"],[7,77,3,75],[7,80,3,78],[7,85,3,83],[7,86,3,84],[8,2,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,2,8,0,"exports"],[12,9,8,7],[12,10,8,8,"composeHeader"],[12,23,8,21],[12,26,8,24],[12,36,8,34,"length"],[12,42,8,40],[12,44,8,42],[13,4,9,4],[13,8,9,8,"header"],[13,14,9,14],[14,4,10,4],[14,8,10,8,"length"],[14,14,10,14],[14,17,10,17],[14,18,10,18],[14,22,10,22,"length"],[14,28,10,28],[14,32,10,32],[14,34,10,34],[14,36,10,36],[15,6,11,8,"header"],[15,12,11,14],[15,15,11,17,"Buffer"],[15,21,11,23],[15,22,11,24,"from"],[15,26,11,28],[15,27,11,29],[15,28,11,30],[15,32,11,34],[15,35,11,37,"length"],[15,41,11,43],[15,42,11,44],[15,43,11,45],[16,4,12,4],[17,4,13,4],[17,8,13,8,"length"],[17,14,13,14],[17,18,13,18],[17,20,13,20],[17,24,13,24,"length"],[17,30,13,30],[17,34,13,34],[17,37,13,37],[17,39,13,39],[18,6,14,8],[18,10,14,12,"headerLength"],[18,22,14,24],[18,25,14,27,"Buffer"],[18,31,14,33],[18,32,14,34,"alloc"],[18,37,14,39],[18,38,14,40],[18,39,14,41],[18,40,14,42],[19,6,15,8,"headerLength"],[19,18,15,20],[19,19,15,21,"writeUInt8"],[19,29,15,31],[19,30,15,32,"length"],[19,36,15,38],[19,37,15,39],[20,6,16,8,"header"],[20,12,16,14],[20,15,16,17,"Buffer"],[20,21,16,23],[20,22,16,24,"concat"],[20,28,16,30],[20,29,16,31],[20,30,16,32,"Buffer"],[20,36,16,38],[20,37,16,39,"from"],[20,41,16,43],[20,42,16,44],[20,43,16,45],[20,47,16,49],[20,48,16,50],[20,49,16,51],[20,51,16,53,"headerLength"],[20,63,16,65],[20,64,16,66],[20,65,16,67],[21,4,17,4],[22,4,18,4],[22,8,18,8,"length"],[22,14,18,14],[22,18,18,18],[22,21,18,21],[22,25,18,25,"length"],[22,31,18,31],[22,35,18,35],[22,40,18,40],[22,42,18,42],[23,6,19,8],[23,10,19,12,"headerLength"],[23,22,19,24],[23,25,19,27,"Buffer"],[23,31,19,33],[23,32,19,34,"alloc"],[23,37,19,39],[23,38,19,40],[23,39,19,41],[23,40,19,42],[24,6,20,8,"headerLength"],[24,18,20,20],[24,19,20,21,"writeUInt16BE"],[24,32,20,34],[24,33,20,35,"length"],[24,39,20,41],[24,40,20,42],[25,6,21,8,"header"],[25,12,21,14],[25,15,21,17,"Buffer"],[25,21,21,23],[25,22,21,24,"concat"],[25,28,21,30],[25,29,21,31],[25,30,21,32,"Buffer"],[25,36,21,38],[25,37,21,39,"from"],[25,41,21,43],[25,42,21,44],[25,43,21,45],[25,47,21,49],[25,48,21,50],[25,49,21,51],[25,51,21,53,"headerLength"],[25,63,21,65],[25,64,21,66],[25,65,21,67],[26,4,22,4],[27,4,23,4],[27,8,23,8,"length"],[27,14,23,14],[27,18,23,18],[27,23,23,23],[27,27,23,27,"length"],[27,33,23,33],[27,37,23,37,"Math"],[27,41,23,41],[27,42,23,42,"pow"],[27,45,23,45],[27,46,23,46],[27,47,23,47],[27,49,23,49],[27,51,23,51],[27,52,23,52],[27,55,23,55],[27,56,23,56],[27,58,23,58],[28,6,24,8],[28,10,24,12,"headerLength"],[28,22,24,24],[28,25,24,27,"Buffer"],[28,31,24,33],[28,32,24,34,"alloc"],[28,37,24,39],[28,38,24,40],[28,39,24,41],[28,40,24,42],[29,6,25,8,"headerLength"],[29,18,25,20],[29,19,25,21,"writeUInt32BE"],[29,32,25,34],[29,33,25,35,"length"],[29,39,25,41],[29,40,25,42],[30,6,26,8,"header"],[30,12,26,14],[30,15,26,17,"Buffer"],[30,21,26,23],[30,22,26,24,"concat"],[30,28,26,30],[30,29,26,31],[30,30,26,32,"Buffer"],[30,36,26,38],[30,37,26,39,"from"],[30,41,26,43],[30,42,26,44],[30,43,26,45],[30,47,26,49],[30,48,26,50],[30,49,26,51],[30,51,26,53,"headerLength"],[30,63,26,65],[30,64,26,66],[30,65,26,67],[31,4,27,4],[32,4,28,4],[32,11,28,11,"header"],[32,17,28,17],[33,2,29,0],[33,3,29,1],[34,2,30,0,"exports"],[34,9,30,7],[34,10,30,8,"encodeSimpleCBOR"],[34,26,30,24],[34,29,30,27],[34,39,30,37,"data"],[34,43,30,41],[34,45,30,43],[35,4,31,4],[35,8,31,8,"bufferData"],[35,18,31,18],[35,21,31,21,"Buffer"],[35,27,31,27],[35,28,31,28,"from"],[35,32,31,32],[35,33,31,33,"data"],[35,37,31,37],[35,39,31,39],[35,44,31,44],[35,45,31,45],[36,4,32,4],[36,8,32,8,"bufferData"],[36,18,32,18],[36,19,32,19,"length"],[36,25,32,25],[36,29,32,29],[36,30,32,30],[36,34,32,34,"bufferData"],[36,44,32,44],[36,45,32,45,"length"],[36,51,32,51],[36,55,32,55,"Math"],[36,59,32,59],[36,60,32,60,"pow"],[36,63,32,63],[36,64,32,64],[36,65,32,65],[36,67,32,67],[36,69,32,69],[36,70,32,70],[36,72,32,72],[37,6,33,8],[37,12,33,14],[37,16,33,18,"Error"],[37,21,33,23],[37,22,33,24],[37,41,33,43],[37,42,33,44],[38,4,34,4],[39,4,35,4],[39,8,35,8,"header"],[39,14,35,14],[39,17,35,17,"exports"],[39,24,35,24],[39,25,35,25,"composeHeader"],[39,38,35,38],[39,39,35,39,"bufferData"],[39,49,35,49],[39,50,35,50,"length"],[39,56,35,56],[39,57,35,57],[40,4,36,4],[40,8,36,8,"endcoded"],[40,16,36,16],[40,19,36,19,"Buffer"],[40,25,36,25],[40,26,36,26,"concat"],[40,32,36,32],[40,33,36,33],[40,34,36,34,"header"],[40,40,36,40],[40,42,36,42,"bufferData"],[40,52,36,52],[40,53,36,53],[40,54,36,54],[41,4,37,4],[41,11,37,11,"endcoded"],[41,19,37,19],[41,20,37,20,"toString"],[41,28,37,28],[41,29,37,29],[41,34,37,34],[41,35,37,35],[42,2,38,0],[42,3,38,1],[43,2,39,0,"exports"],[43,9,39,7],[43,10,39,8,"decodeSimpleCBOR"],[43,26,39,24],[43,29,39,27],[43,39,39,37,"data"],[43,43,39,41],[43,45,39,43],[44,4,40,4],[44,8,40,8,"dataBuffer"],[44,18,40,18],[44,21,40,21,"Buffer"],[44,27,40,27],[44,28,40,28,"from"],[44,32,40,32],[44,33,40,33,"data"],[44,37,40,37],[44,39,40,39],[44,44,40,44],[44,45,40,45],[45,4,41,4],[45,8,41,8,"dataBuffer"],[45,18,41,18],[45,19,41,19,"length"],[45,25,41,25],[45,29,41,29],[45,30,41,30],[45,32,41,32],[46,6,42,8],[46,12,42,14],[46,16,42,18,"Error"],[46,21,42,23],[46,22,42,24],[46,47,42,49],[46,48,42,50],[47,4,43,4],[48,4,44,4],[48,8,44,8,"header"],[48,14,44,14],[48,17,44,17,"dataBuffer"],[48,27,44,27],[48,28,44,28],[48,29,44,29],[48,30,44,30],[49,4,45,4],[49,8,45,8,"header"],[49,14,45,14],[49,17,45,17],[49,21,45,21],[49,23,45,23],[50,6,46,8],[50,10,46,12,"dataLength"],[50,20,46,22],[50,23,46,25,"header"],[50,29,46,31],[50,32,46,34],[50,36,46,38],[51,6,47,8],[51,13,47,15,"dataBuffer"],[51,23,47,25],[51,24,47,26,"slice"],[51,29,47,31],[51,30,47,32],[51,31,47,33],[51,33,47,35],[51,34,47,36],[51,37,47,39,"dataLength"],[51,47,47,49],[51,48,47,50],[51,49,47,51,"toString"],[51,57,47,59],[51,58,47,60],[51,63,47,65],[51,64,47,66],[52,4,48,4],[53,4,49,4],[53,8,49,8,"header"],[53,14,49,14],[53,18,49,18],[53,22,49,22],[53,24,49,24],[54,6,50,8],[54,10,50,12,"dataLength"],[54,20,50,22],[54,23,50,25,"dataBuffer"],[54,33,50,35],[54,34,50,36,"slice"],[54,39,50,41],[54,40,50,42],[54,41,50,43],[54,43,50,45],[54,44,50,46],[54,45,50,47],[54,46,50,48,"readUInt8"],[54,55,50,57],[54,56,50,58],[54,57,50,59],[55,6,51,8],[55,13,51,15,"dataBuffer"],[55,23,51,25],[55,24,51,26,"slice"],[55,29,51,31],[55,30,51,32],[55,31,51,33],[55,33,51,35],[55,34,51,36],[55,37,51,39,"dataLength"],[55,47,51,49],[55,48,51,50],[55,49,51,51,"toString"],[55,57,51,59],[55,58,51,60],[55,63,51,65],[55,64,51,66],[56,4,52,4],[57,4,53,4],[57,8,53,8,"header"],[57,14,53,14],[57,18,53,18],[57,22,53,22],[57,24,53,24],[58,6,54,8],[58,10,54,12,"dataLength"],[58,20,54,22],[58,23,54,25,"dataBuffer"],[58,33,54,35],[58,34,54,36,"slice"],[58,39,54,41],[58,40,54,42],[58,41,54,43],[58,43,54,45],[58,44,54,46],[58,45,54,47],[58,46,54,48,"readUInt16BE"],[58,58,54,60],[58,59,54,61],[58,60,54,62],[59,6,55,8],[59,13,55,15,"dataBuffer"],[59,23,55,25],[59,24,55,26,"slice"],[59,29,55,31],[59,30,55,32],[59,31,55,33],[59,33,55,35],[59,34,55,36],[59,37,55,39,"dataLength"],[59,47,55,49],[59,48,55,50],[59,49,55,51,"toString"],[59,57,55,59],[59,58,55,60],[59,63,55,65],[59,64,55,66],[60,4,56,4],[61,4,57,4],[61,8,57,8,"header"],[61,14,57,14],[61,18,57,18],[61,22,57,22],[61,24,57,24],[62,6,58,8],[62,10,58,12,"dataLength"],[62,20,58,22],[62,23,58,25,"dataBuffer"],[62,33,58,35],[62,34,58,36,"slice"],[62,39,58,41],[62,40,58,42],[62,41,58,43],[62,43,58,45],[62,44,58,46],[62,45,58,47],[62,46,58,48,"readUInt32BE"],[62,58,58,60],[62,59,58,61],[62,60,58,62],[63,6,59,8],[63,13,59,15,"dataBuffer"],[63,23,59,25],[63,24,59,26,"slice"],[63,29,59,31],[63,30,59,32],[63,31,59,33],[63,33,59,35],[63,34,59,36],[63,37,59,39,"dataLength"],[63,47,59,49],[63,48,59,50],[63,49,59,51,"toString"],[63,57,59,59],[63,58,59,60],[63,63,59,65],[63,64,59,66],[64,4,60,4],[65,2,61,0],[65,3,61,1],[66,0,61,2],[66,3]],"functionMap":{"names":["<global>","exports.composeHeader","exports.encodeSimpleCBOR","exports.decodeSimpleCBOR"],"mappings":"AAA;wBCO;CDqB;2BEC;CFQ;2BGC;CHsB"}},"type":"js/module"}]}