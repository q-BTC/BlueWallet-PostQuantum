{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array';\n\n  // For convenience, let people hash a string, not just a Uint8Array\n  function normalizeInput(input) {\n    var ret;\n    if (input instanceof Uint8Array) {\n      ret = input;\n    } else if (typeof input === 'string') {\n      var encoder = new TextEncoder();\n      ret = encoder.encode(input);\n    } else {\n      throw new Error(ERROR_MSG_INPUT);\n    }\n    return ret;\n  }\n\n  // Converts a Uint8Array to a hexadecimal string\n  // For example, toHex([255, 0, 255]) returns \"ff00ff\"\n  function toHex(bytes) {\n    return Array.prototype.map.call(bytes, function (n) {\n      return (n < 16 ? '0' : '') + n.toString(16);\n    }).join('');\n  }\n\n  // Converts any value in [0...2^32-1] to an 8-character hex string\n  function uint32ToHex(val) {\n    return (0x100000000 + val).toString(16).substring(1);\n  }\n\n  // For debugging: prints out hash state in the same format as the RFC\n  // sample computation exactly, so that you can diff\n  function debugPrint(label, arr, size) {\n    var msg = '\\n' + label + ' = ';\n    for (var i = 0; i < arr.length; i += 2) {\n      if (size === 32) {\n        msg += uint32ToHex(arr[i]).toUpperCase();\n        msg += ' ';\n        msg += uint32ToHex(arr[i + 1]).toUpperCase();\n      } else if (size === 64) {\n        msg += uint32ToHex(arr[i + 1]).toUpperCase();\n        msg += uint32ToHex(arr[i]).toUpperCase();\n      } else throw new Error('Invalid size ' + size);\n      if (i % 6 === 4) {\n        msg += '\\n' + new Array(label.length + 4).join(' ');\n      } else if (i < arr.length - 2) {\n        msg += ' ';\n      }\n    }\n    console.log(msg);\n  }\n\n  // For performance testing: generates N bytes of input, hashes M times\n  // Measures and prints MB/second hash performance each time\n  function testSpeed(hashFn, N, M) {\n    var startMs = new Date().getTime();\n    var input = new Uint8Array(N);\n    for (var i = 0; i < N; i++) {\n      input[i] = i % 256;\n    }\n    var genMs = new Date().getTime();\n    console.log('Generated random input in ' + (genMs - startMs) + 'ms');\n    startMs = genMs;\n    for (var _i = 0; _i < M; _i++) {\n      var hashHex = hashFn(input);\n      var hashMs = new Date().getTime();\n      var ms = hashMs - startMs;\n      startMs = hashMs;\n      console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...');\n      console.log(Math.round(N / (1 << 20) / (ms / 1000) * 100) / 100 + ' MB PER SECOND');\n    }\n  }\n  module.exports = {\n    normalizeInput: normalizeInput,\n    toHex: toHex,\n    debugPrint: debugPrint,\n    testSpeed: testSpeed\n  };\n});","lineCount":79,"map":[[2,2,1,0],[2,6,1,6,"ERROR_MSG_INPUT"],[2,21,1,21],[2,24,1,24],[2,71,1,71],[4,2,3,0],[5,2,4,0],[5,11,4,9,"normalizeInput"],[5,25,4,23,"normalizeInput"],[5,26,4,25,"input"],[5,31,4,30],[5,33,4,32],[6,4,5,2],[6,8,5,6,"ret"],[6,11,5,9],[7,4,6,2],[7,8,6,6,"input"],[7,13,6,11],[7,25,6,23,"Uint8Array"],[7,35,6,33],[7,37,6,35],[8,6,7,4,"ret"],[8,9,7,7],[8,12,7,10,"input"],[8,17,7,15],[9,4,8,2],[9,5,8,3],[9,11,8,9],[9,15,8,13],[9,22,8,20,"input"],[9,27,8,25],[9,32,8,30],[9,40,8,38],[9,42,8,40],[10,6,9,4],[10,10,9,10,"encoder"],[10,17,9,17],[10,20,9,20],[10,24,9,24,"TextEncoder"],[10,35,9,35],[10,36,9,36],[10,37,9,37],[11,6,10,4,"ret"],[11,9,10,7],[11,12,10,10,"encoder"],[11,19,10,17],[11,20,10,18,"encode"],[11,26,10,24],[11,27,10,25,"input"],[11,32,10,30],[11,33,10,31],[12,4,11,2],[12,5,11,3],[12,11,11,9],[13,6,12,4],[13,12,12,10],[13,16,12,14,"Error"],[13,21,12,19],[13,22,12,20,"ERROR_MSG_INPUT"],[13,37,12,35],[13,38,12,36],[14,4,13,2],[15,4,14,2],[15,11,14,9,"ret"],[15,14,14,12],[16,2,15,0],[18,2,17,0],[19,2,18,0],[20,2,19,0],[20,11,19,9,"toHex"],[20,16,19,14,"toHex"],[20,17,19,16,"bytes"],[20,22,19,21],[20,24,19,23],[21,4,20,2],[21,11,20,9,"Array"],[21,16,20,14],[21,17,20,15,"prototype"],[21,26,20,24],[21,27,20,25,"map"],[21,30,20,28],[21,31,21,5,"call"],[21,35,21,9],[21,36,21,10,"bytes"],[21,41,21,15],[21,43,21,17],[21,53,21,27,"n"],[21,54,21,28],[21,56,21,30],[22,6,22,6],[22,13,22,13],[22,14,22,14,"n"],[22,15,22,15],[22,18,22,18],[22,20,22,20],[22,23,22,23],[22,26,22,26],[22,29,22,29],[22,31,22,31],[22,35,22,35,"n"],[22,36,22,36],[22,37,22,37,"toString"],[22,45,22,45],[22,46,22,46],[22,48,22,48],[22,49,22,49],[23,4,23,4],[23,5,23,5],[23,6,23,6],[23,7,24,5,"join"],[23,11,24,9],[23,12,24,10],[23,14,24,12],[23,15,24,13],[24,2,25,0],[26,2,27,0],[27,2,28,0],[27,11,28,9,"uint32ToHex"],[27,22,28,20,"uint32ToHex"],[27,23,28,22,"val"],[27,26,28,25],[27,28,28,27],[28,4,29,2],[28,11,29,9],[28,12,29,10],[28,23,29,21],[28,26,29,24,"val"],[28,29,29,27],[28,31,29,29,"toString"],[28,39,29,37],[28,40,29,38],[28,42,29,40],[28,43,29,41],[28,44,29,42,"substring"],[28,53,29,51],[28,54,29,52],[28,55,29,53],[28,56,29,54],[29,2,30,0],[31,2,32,0],[32,2,33,0],[33,2,34,0],[33,11,34,9,"debugPrint"],[33,21,34,19,"debugPrint"],[33,22,34,21,"label"],[33,27,34,26],[33,29,34,28,"arr"],[33,32,34,31],[33,34,34,33,"size"],[33,38,34,37],[33,40,34,39],[34,4,35,2],[34,8,35,6,"msg"],[34,11,35,9],[34,14,35,12],[34,18,35,16],[34,21,35,19,"label"],[34,26,35,24],[34,29,35,27],[34,34,35,32],[35,4,36,2],[35,9,36,7],[35,13,36,11,"i"],[35,14,36,12],[35,17,36,15],[35,18,36,16],[35,20,36,18,"i"],[35,21,36,19],[35,24,36,22,"arr"],[35,27,36,25],[35,28,36,26,"length"],[35,34,36,32],[35,36,36,34,"i"],[35,37,36,35],[35,41,36,39],[35,42,36,40],[35,44,36,42],[36,6,37,4],[36,10,37,8,"size"],[36,14,37,12],[36,19,37,17],[36,21,37,19],[36,23,37,21],[37,8,38,6,"msg"],[37,11,38,9],[37,15,38,13,"uint32ToHex"],[37,26,38,24],[37,27,38,25,"arr"],[37,30,38,28],[37,31,38,29,"i"],[37,32,38,30],[37,33,38,31],[37,34,38,32],[37,35,38,33,"toUpperCase"],[37,46,38,44],[37,47,38,45],[37,48,38,46],[38,8,39,6,"msg"],[38,11,39,9],[38,15,39,13],[38,18,39,16],[39,8,40,6,"msg"],[39,11,40,9],[39,15,40,13,"uint32ToHex"],[39,26,40,24],[39,27,40,25,"arr"],[39,30,40,28],[39,31,40,29,"i"],[39,32,40,30],[39,35,40,33],[39,36,40,34],[39,37,40,35],[39,38,40,36],[39,39,40,37,"toUpperCase"],[39,50,40,48],[39,51,40,49],[39,52,40,50],[40,6,41,4],[40,7,41,5],[40,13,41,11],[40,17,41,15,"size"],[40,21,41,19],[40,26,41,24],[40,28,41,26],[40,30,41,28],[41,8,42,6,"msg"],[41,11,42,9],[41,15,42,13,"uint32ToHex"],[41,26,42,24],[41,27,42,25,"arr"],[41,30,42,28],[41,31,42,29,"i"],[41,32,42,30],[41,35,42,33],[41,36,42,34],[41,37,42,35],[41,38,42,36],[41,39,42,37,"toUpperCase"],[41,50,42,48],[41,51,42,49],[41,52,42,50],[42,8,43,6,"msg"],[42,11,43,9],[42,15,43,13,"uint32ToHex"],[42,26,43,24],[42,27,43,25,"arr"],[42,30,43,28],[42,31,43,29,"i"],[42,32,43,30],[42,33,43,31],[42,34,43,32],[42,35,43,33,"toUpperCase"],[42,46,43,44],[42,47,43,45],[42,48,43,46],[43,6,44,4],[43,7,44,5],[43,13,44,11],[43,19,44,17],[43,23,44,21,"Error"],[43,28,44,26],[43,29,44,27],[43,44,44,42],[43,47,44,45,"size"],[43,51,44,49],[43,52,44,50],[44,6,45,4],[44,10,45,8,"i"],[44,11,45,9],[44,14,45,12],[44,15,45,13],[44,20,45,18],[44,21,45,19],[44,23,45,21],[45,8,46,6,"msg"],[45,11,46,9],[45,15,46,13],[45,19,46,17],[45,22,46,20],[45,26,46,24,"Array"],[45,31,46,29],[45,32,46,30,"label"],[45,37,46,35],[45,38,46,36,"length"],[45,44,46,42],[45,47,46,45],[45,48,46,46],[45,49,46,47],[45,50,46,48,"join"],[45,54,46,52],[45,55,46,53],[45,58,46,56],[45,59,46,57],[46,6,47,4],[46,7,47,5],[46,13,47,11],[46,17,47,15,"i"],[46,18,47,16],[46,21,47,19,"arr"],[46,24,47,22],[46,25,47,23,"length"],[46,31,47,29],[46,34,47,32],[46,35,47,33],[46,37,47,35],[47,8,48,6,"msg"],[47,11,48,9],[47,15,48,13],[47,18,48,16],[48,6,49,4],[49,4,50,2],[50,4,51,2,"console"],[50,11,51,9],[50,12,51,10,"log"],[50,15,51,13],[50,16,51,14,"msg"],[50,19,51,17],[50,20,51,18],[51,2,52,0],[53,2,54,0],[54,2,55,0],[55,2,56,0],[55,11,56,9,"testSpeed"],[55,20,56,18,"testSpeed"],[55,21,56,20,"hashFn"],[55,27,56,26],[55,29,56,28,"N"],[55,30,56,29],[55,32,56,31,"M"],[55,33,56,32],[55,35,56,34],[56,4,57,2],[56,8,57,6,"startMs"],[56,15,57,13],[56,18,57,16],[56,22,57,20,"Date"],[56,26,57,24],[56,27,57,25],[56,28,57,26],[56,29,57,27,"getTime"],[56,36,57,34],[56,37,57,35],[56,38,57,36],[57,4,59,2],[57,8,59,8,"input"],[57,13,59,13],[57,16,59,16],[57,20,59,20,"Uint8Array"],[57,30,59,30],[57,31,59,31,"N"],[57,32,59,32],[57,33,59,33],[58,4,60,2],[58,9,60,7],[58,13,60,11,"i"],[58,14,60,12],[58,17,60,15],[58,18,60,16],[58,20,60,18,"i"],[58,21,60,19],[58,24,60,22,"N"],[58,25,60,23],[58,27,60,25,"i"],[58,28,60,26],[58,30,60,28],[58,32,60,30],[59,6,61,4,"input"],[59,11,61,9],[59,12,61,10,"i"],[59,13,61,11],[59,14,61,12],[59,17,61,15,"i"],[59,18,61,16],[59,21,61,19],[59,24,61,22],[60,4,62,2],[61,4,63,2],[61,8,63,8,"genMs"],[61,13,63,13],[61,16,63,16],[61,20,63,20,"Date"],[61,24,63,24],[61,25,63,25],[61,26,63,26],[61,27,63,27,"getTime"],[61,34,63,34],[61,35,63,35],[61,36,63,36],[62,4,64,2,"console"],[62,11,64,9],[62,12,64,10,"log"],[62,15,64,13],[62,16,64,14],[62,44,64,42],[62,48,64,46,"genMs"],[62,53,64,51],[62,56,64,54,"startMs"],[62,63,64,61],[62,64,64,62],[62,67,64,65],[62,71,64,69],[62,72,64,70],[63,4,65,2,"startMs"],[63,11,65,9],[63,14,65,12,"genMs"],[63,19,65,17],[64,4,67,2],[64,9,67,7],[64,13,67,11,"i"],[64,15,67,12],[64,18,67,15],[64,19,67,16],[64,21,67,18,"i"],[64,23,67,19],[64,26,67,22,"M"],[64,27,67,23],[64,29,67,25,"i"],[64,31,67,26],[64,33,67,28],[64,35,67,30],[65,6,68,4],[65,10,68,10,"hashHex"],[65,17,68,17],[65,20,68,20,"hashFn"],[65,26,68,26],[65,27,68,27,"input"],[65,32,68,32],[65,33,68,33],[66,6,69,4],[66,10,69,10,"hashMs"],[66,16,69,16],[66,19,69,19],[66,23,69,23,"Date"],[66,27,69,27],[66,28,69,28],[66,29,69,29],[66,30,69,30,"getTime"],[66,37,69,37],[66,38,69,38],[66,39,69,39],[67,6,70,4],[67,10,70,10,"ms"],[67,12,70,12],[67,15,70,15,"hashMs"],[67,21,70,21],[67,24,70,24,"startMs"],[67,31,70,31],[68,6,71,4,"startMs"],[68,13,71,11],[68,16,71,14,"hashMs"],[68,22,71,20],[69,6,72,4,"console"],[69,13,72,11],[69,14,72,12,"log"],[69,17,72,15],[69,18,72,16],[69,30,72,28],[69,33,72,31,"ms"],[69,35,72,33],[69,38,72,36],[69,44,72,42],[69,47,72,45,"hashHex"],[69,54,72,52],[69,55,72,53,"substring"],[69,64,72,62],[69,65,72,63],[69,66,72,64],[69,68,72,66],[69,70,72,68],[69,71,72,69],[69,74,72,72],[69,79,72,77],[69,80,72,78],[70,6,73,4,"console"],[70,13,73,11],[70,14,73,12,"log"],[70,17,73,15],[70,18,74,6,"Math"],[70,22,74,10],[70,23,74,11,"round"],[70,28,74,16],[70,29,74,18,"N"],[70,30,74,19],[70,34,74,23],[70,35,74,24],[70,39,74,28],[70,41,74,30],[70,42,74,31],[70,46,74,35,"ms"],[70,48,74,37],[70,51,74,40],[70,55,74,44],[70,56,74,45],[70,59,74,49],[70,62,74,52],[70,63,74,53],[70,66,74,56],[70,69,74,59],[70,72,74,62],[70,88,75,4],[70,89,75,5],[71,4,76,2],[72,2,77,0],[73,2,79,0,"module"],[73,8,79,6],[73,9,79,7,"exports"],[73,16,79,14],[73,19,79,17],[74,4,80,2,"normalizeInput"],[74,18,80,16],[74,20,80,18,"normalizeInput"],[74,34,80,32],[75,4,81,2,"toHex"],[75,9,81,7],[75,11,81,9,"toHex"],[75,16,81,14],[76,4,82,2,"debugPrint"],[76,14,82,12],[76,16,82,14,"debugPrint"],[76,26,82,24],[77,4,83,2,"testSpeed"],[77,13,83,11],[77,15,83,13,"testSpeed"],[78,2,84,0],[78,3,84,1],[79,0,84,1],[79,3]],"functionMap":{"names":["<global>","normalizeInput","toHex","Array.prototype.map.call$argument_1","uint32ToHex","debugPrint","testSpeed"],"mappings":"AAA;ACG;CDW;AEI;iBCE;KDE;CFE;AIG;CJE;AKI;CLkB;AMI;CNqB"}},"type":"js/module"}]}