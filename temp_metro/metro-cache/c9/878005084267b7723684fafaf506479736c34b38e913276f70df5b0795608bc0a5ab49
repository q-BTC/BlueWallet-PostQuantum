{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":676,"column":1,"index":18692}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":676,"column":1,"index":18692}}],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo="}},{"name":"@babel/runtime/helpers/objectDestructuringEmpty","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":676,"column":1,"index":18692}}],"key":"JWgwp1AYM3rN4k6Vft1eP0TCU4I="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":676,"column":1,"index":18692}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":676,"column":1,"index":18692}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":676,"column":1,"index":18692}}],"key":"aU3Lrys8xTVpYSDJal2nhppojC8="}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":676,"column":1,"index":18692}}],"key":"4DwyfFXBA53CJWVTVj5w3kH1PUg="}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":676,"column":1,"index":18692}}],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA="}},{"name":"create-hash","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"S+LTcEsr9DE4tXbLBAdDMJflQ0A="}},{"name":"bs58","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":226},"end":{"line":6,"column":26,"index":252}}],"key":"Vy7QVdYc+KXhVejNP9CKcoHm3Nw="}},{"name":"bignumber.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":253},"end":{"line":7,"column":37,"index":290}}],"key":"+tJwKP0N5JISX+Ssl/Xk2Ffv6xc="}},{"name":"axios","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":291},"end":{"line":8,"column":26,"index":317}}],"key":"e45rENb5cSu0Yeh6oC1uWb7lEp4="}},{"name":"js-sha3","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":38},"end":{"line":2,"column":35,"index":73}},{"start":{"line":2,"column":0,"index":38},"end":{"line":2,"column":35,"index":73}}],"key":"rrPzthjaiZIKeMnU7hcrPd5LjTk="}},{"name":"../rng","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":318},"end":{"line":9,"column":37,"index":355}}],"key":"m0IKNn9EGKw2Q1bQbchJk2wql64=","isOptional":true}},{"name":"@noble/post-quantum/ml-dsa","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":74},"end":{"line":3,"column":54,"index":128}},{"start":{"line":3,"column":0,"index":74},"end":{"line":3,"column":54,"index":128}},{"start":{"line":3,"column":0,"index":74},"end":{"line":3,"column":54,"index":128}}],"key":"7rAVi/cfcjwJcmwLQsBgFVtD4SE=","isOptional":true}},{"name":"./abstract-wallet","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":129},"end":{"line":4,"column":51,"index":180}}],"key":"yL6u2DFArR3ds5hEn0EkXJ5tiW4="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.QBTCWallet = void 0;\n  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _objectDestructuringEmpty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/objectDestructuringEmpty\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/createClass\"));\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/getPrototypeOf\"));\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"@babel/runtime/helpers/inherits\"));\n  var _createHash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"create-hash\"));\n  var _bs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9], \"bs58\"));\n  var _bignumber = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10], \"bignumber.js\"));\n  var _axios = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11], \"axios\"));\n  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\n  // qBTC constants\n  var QBTC_VERSION = 0x00;\n  var QBTC_ADDRESS_PREFIX = 'bqs';\n  var CHECKSUM_LEN = 4;\n  var PQ_ALG = 'ML-DSA-87';\n  var CHAIN_ID = 1; // Default qBTC chain ID\n  var QBTCWallet = exports.QBTCWallet = /*#__PURE__*/function (_AbstractWallet) {\n    function QBTCWallet() {\n      var _this;\n      (0, _classCallCheck2.default)(this, QBTCWallet);\n      _this = _callSuper(this, QBTCWallet);\n      _this.type = QBTCWallet.type;\n      _this.typeReadable = QBTCWallet.typeReadable;\n      // Store keys as Uint8Array\n      _this._privateKey = null;\n      _this._publicKey = null;\n      _this._qbtcNodeUrl = 'http://localhost:8000';\n      // Default qBTC node\n      _this._chainId = CHAIN_ID;\n      _this._txs = [];\n      _this._nodeAvailable = false;\n      _this.chain = 'QBTC'; // qBTC chain identifier\n      return _this;\n    }\n\n    /**\n     * Override to identify this as a qBTC wallet\n     */\n    (0, _inherits2.default)(QBTCWallet, _AbstractWallet);\n    return (0, _createClass2.default)(QBTCWallet, [{\n      key: \"getChain\",\n      value: function getChain() {\n        return 'QBTC';\n      }\n\n      /**\n       * Check if this wallet uses Bitcoin infrastructure\n       */\n    }, {\n      key: \"usesBitcoinInfrastructure\",\n      value: function usesBitcoinInfrastructure() {\n        return false;\n      }\n\n      /**\n       * Override address validation for qBTC\n       */\n    }, {\n      key: \"isAddressValid\",\n      value: function isAddressValid(address) {\n        // qBTC addresses start with 'bqs' prefix\n        return address.startsWith('bqs') && address.length > 10;\n      }\n\n      /**\n       * Set the qBTC node URL\n       */\n    }, {\n      key: \"setNodeUrl\",\n      value: function setNodeUrl(url) {\n        this._qbtcNodeUrl = url;\n      }\n\n      /**\n       * Set the chain ID\n       */\n    }, {\n      key: \"setChainId\",\n      value: function setChainId(chainId) {\n        this._chainId = chainId;\n      }\n\n      /**\n       * Derives qBTC address from public key using SHA3-256\n       * Matches qBTC-core's derive_qsafe_address function\n       */\n    }, {\n      key: \"deriveAddress\",\n      value: function deriveAddress(publicKey) {\n        // SHA3-256 hash of the public key\n        var sha3HashHex = (0, _$$_REQUIRE(_dependencyMap[12], \"js-sha3\").sha3_256)(publicKey);\n        var sha3Hash = Buffer.from(sha3HashHex, 'hex');\n\n        // Version prefix (0x00) + first 20 bytes of hash\n        var versionedHash = Buffer.concat([Buffer.from([QBTC_VERSION]), sha3Hash.slice(0, 20)]);\n\n        // Checksum: first 4 bytes of SHA3-256(versionedHash)\n        var checksumHex = (0, _$$_REQUIRE(_dependencyMap[12], \"js-sha3\").sha3_256)(versionedHash);\n        var checksum = Buffer.from(checksumHex, 'hex').slice(0, CHECKSUM_LEN);\n\n        // Concatenate versionedHash + checksum\n        var addressBytes = Buffer.concat([versionedHash, checksum]);\n\n        // Base58 encode and prefix with \"bqs\"\n        return QBTC_ADDRESS_PREFIX + _bs.default.encode(addressBytes);\n      }\n\n      /**\n       * Convert Uint8Array to hex string\n       */\n    }, {\n      key: \"toHex\",\n      value: function toHex(bytes) {\n        return Buffer.from(bytes).toString('hex');\n      }\n\n      /**\n       * Convert hex string to Uint8Array\n       */\n    }, {\n      key: \"fromHex\",\n      value: function fromHex(hex) {\n        return new Uint8Array(Buffer.from(hex, 'hex'));\n      }\n\n      /**\n       * Calculate SHA256d hash (double SHA256)\n       */\n    }, {\n      key: \"sha256d\",\n      value: function sha256d(data) {\n        var hash1 = (0, _createHash.default)('sha256').update(data).digest();\n        return (0, _createHash.default)('sha256').update(hash1).digest();\n      }\n\n      /**\n       * Serialize transaction to qBTC format\n       * Matches qBTC-core's serialize_transaction function\n       */\n    }, {\n      key: \"serializeTransaction\",\n      value: function serializeTransaction(tx) {\n        // Create a clean copy without txid field for consistent serialization\n        var txClean = Object.assign({}, tx);\n        if ('txid' in txClean) {\n          delete txClean.txid;\n        }\n\n        // Remove txid from outputs if present\n        if (txClean.outputs) {\n          txClean.outputs = txClean.outputs.map(function (output) {\n            var cleanOutput = Object.assign({}, ((0, _objectDestructuringEmpty2.default)(output), output));\n            return cleanOutput;\n          });\n        }\n        var txData = JSON.stringify(txClean, Object.keys(txClean).sort());\n        return Buffer.from(txData).toString('hex');\n      }\n\n      /**\n       * Calculate transaction ID\n       * Matches qBTC-core's txid calculation\n       */\n    }, {\n      key: \"calculateTxid\",\n      value: function calculateTxid(tx) {\n        var serialized = this.serializeTransaction(tx);\n        var hash = this.sha256d(Buffer.from(serialized, 'hex'));\n        // Reverse bytes for txid (little-endian)\n        return hash.reverse().toString('hex');\n      }\n\n      /**\n       * Generate a new qBTC wallet using ML-DSA-87\n       */\n    }, {\n      key: \"generate\",\n      value: (function () {\n        var _generate = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            console.log('qBTC generate: Starting...');\n\n            // Generate ML-DSA-87 keypair with random seed\n            console.log('qBTC generate: Generating random seed...');\n            var seedBuffer = yield (0, _$$_REQUIRE(_dependencyMap[13], \"../rng\").randomBytes)(32);\n            var seed = new Uint8Array(seedBuffer.buffer, seedBuffer.byteOffset, seedBuffer.length);\n            console.log('qBTC generate: Seed generated, length:', seed.length);\n            console.log('qBTC generate: Generating ML-DSA-87 keypair...');\n            var _ml_dsa87$keygen = _$$_REQUIRE(_dependencyMap[14], \"@noble/post-quantum/ml-dsa\").ml_dsa87.keygen(seed),\n              publicKey = _ml_dsa87$keygen.publicKey,\n              secretKey = _ml_dsa87$keygen.secretKey;\n            console.log('qBTC generate: Keypair generated, publicKey length:', publicKey.length, 'secretKey length:', secretKey.length);\n            this._privateKey = secretKey;\n            this._publicKey = publicKey;\n            console.log('qBTC generate: Keys stored in instance');\n\n            // Store private key as hex in secret field\n            this.secret = this.toHex(secretKey);\n            console.log('qBTC generate: Secret hex stored');\n\n            // Derive address\n            console.log('qBTC generate: Deriving address...');\n            this._address = this.deriveAddress(publicKey);\n            console.log('qBTC generate: Address derived:', this._address);\n            console.log('qBTC generate: Complete!');\n          } catch (error) {\n            console.error('Error generating qBTC wallet:', error);\n            console.error('Error stack:', error.stack);\n            throw new Error(`Failed to generate qBTC wallet: ${error.message}`);\n          }\n        });\n        function generate() {\n          return _generate.apply(this, arguments);\n        }\n        return generate;\n      }()\n      /**\n       * Import wallet from both private and public keys\n       */\n      )\n    }, {\n      key: \"importKeys\",\n      value: function importKeys(privateKeyHex, publicKeyHex) {\n        this._privateKey = this.fromHex(privateKeyHex);\n        this._publicKey = this.fromHex(publicKeyHex);\n        this.secret = privateKeyHex;\n        this._address = this.deriveAddress(this._publicKey);\n      }\n    }, {\n      key: \"getAddress\",\n      value: function getAddress() {\n        return this._address || false;\n      }\n    }, {\n      key: \"getAllExternalAddresses\",\n      value: function getAllExternalAddresses() {\n        return this._address ? [this._address] : [];\n      }\n    }, {\n      key: \"getPublicKey\",\n      value: function getPublicKey() {\n        return this._publicKey ? this.toHex(this._publicKey) : '';\n      }\n    }, {\n      key: \"getPrivateKey\",\n      value: function getPrivateKey() {\n        return this._privateKey ? this.toHex(this._privateKey) : '';\n      }\n\n      /**\n       * Sign a message using ML-DSA-87\n       * Matches qBTC-core's sign_transaction function\n       */\n    }, {\n      key: \"signMessage\",\n      value: function signMessage(message) {\n        if (!this._privateKey) {\n          throw new Error('No private key available');\n        }\n        try {\n          // Convert message to bytes\n          var messageBytes = new TextEncoder().encode(message);\n\n          // Sign using ML-DSA-87\n          var signature = _$$_REQUIRE(_dependencyMap[14], \"@noble/post-quantum/ml-dsa\").ml_dsa87.sign(this._privateKey, messageBytes);\n\n          // Return hex-encoded signature\n          return this.toHex(signature);\n        } catch (error) {\n          console.error('Failed to sign message:', error);\n          throw new Error('Failed to sign transaction');\n        }\n      }\n\n      /**\n       * Verify a signature using ML-DSA-87\n       * Matches qBTC-core's verify_transaction function\n       */\n    }, {\n      key: \"verifySignature\",\n      value: function verifySignature(message, signatureHex, publicKeyHex) {\n        try {\n          var messageBytes = new TextEncoder().encode(message);\n          var signature = this.fromHex(signatureHex);\n          var publicKey = this.fromHex(publicKeyHex);\n          return _$$_REQUIRE(_dependencyMap[14], \"@noble/post-quantum/ml-dsa\").ml_dsa87.verify(publicKey, messageBytes, signature);\n        } catch (error) {\n          console.error('Failed to verify signature:', error);\n          return false;\n        }\n      }\n\n      /**\n       * Fetch UTXOs from qBTC node\n       */\n    }, {\n      key: \"fetchUtxos\",\n      value: (function () {\n        var _fetchUtxos = (0, _asyncToGenerator2.default)(function* () {\n          if (!this._address) return [];\n          try {\n            var response = yield _axios.default.get(`${this._qbtcNodeUrl}/utxos/${this._address}`);\n            return response.data.utxos || [];\n          } catch (error) {\n            console.error('Error fetching UTXOs:', error);\n            return [];\n          }\n        });\n        function fetchUtxos() {\n          return _fetchUtxos.apply(this, arguments);\n        }\n        return fetchUtxos;\n      }()\n      /**\n       * Create a qBTC transaction\n       */\n      )\n    }, {\n      key: \"createTransaction\",\n      value: (function () {\n        var _createTransaction = (0, _asyncToGenerator2.default)(function* (targets, feeRate, changeAddress) {\n          if (!this._publicKey || !this._address) {\n            throw new Error('Wallet not initialized');\n          }\n\n          // Fetch UTXOs\n          var utxos = yield this.fetchUtxos();\n          if (utxos.length === 0) {\n            throw new Error('No UTXOs available');\n          }\n\n          // Calculate total amount needed\n          var totalNeeded = targets.reduce(function (sum, target) {\n            return sum.plus(target.value);\n          }, new _bignumber.default(0));\n          var minerFee = totalNeeded.multipliedBy(0.001).decimalPlaces(8); // 0.1% fee\n          var totalRequired = totalNeeded.plus(minerFee);\n\n          // Select inputs\n          var inputs = [];\n          var totalAvailable = new _bignumber.default(0);\n          for (var utxo of utxos) {\n            if (!utxo.spent) {\n              inputs.push({\n                txid: utxo.txid,\n                utxo_index: utxo.utxo_index,\n                sender: utxo.sender,\n                receiver: utxo.receiver,\n                amount: utxo.amount,\n                spent: false\n              });\n              totalAvailable = totalAvailable.plus(utxo.amount);\n              if (totalAvailable.isGreaterThanOrEqualTo(totalRequired)) {\n                break;\n              }\n            }\n          }\n          if (totalAvailable.isLessThan(totalRequired)) {\n            throw new Error(`Insufficient funds: have ${totalAvailable}, need ${totalRequired}`);\n          }\n\n          // Create outputs\n          var outputs = [];\n          var outputIndex = 0;\n\n          // Add target outputs\n          for (var target of targets) {\n            outputs.push({\n              utxo_index: outputIndex++,\n              sender: this._address,\n              receiver: target.address,\n              amount: new _bignumber.default(target.value).toFixed(8),\n              spent: false\n            });\n          }\n\n          // Add change output if needed\n          var change = totalAvailable.minus(totalRequired);\n          if (change.isGreaterThan(0)) {\n            outputs.push({\n              utxo_index: outputIndex++,\n              sender: this._address,\n              receiver: changeAddress || this._address,\n              amount: change.toFixed(8),\n              spent: false\n            });\n          }\n\n          // Create message for signing\n          var timestamp = Date.now();\n          var msgParts = [this._address, targets[0].address,\n          // Primary recipient\n          targets[0].value.toString(), timestamp.toString(), this._chainId.toString()];\n          var messageStr = msgParts.join(':');\n\n          // Create transaction\n          var tx = {\n            type: 'transaction',\n            inputs: inputs,\n            outputs: outputs,\n            body: {\n              msg_str: messageStr,\n              pubkey: this.toHex(this._publicKey),\n              signature: ''\n            },\n            timestamp: timestamp\n          };\n\n          // Sign the message (not the full transaction)\n          tx.body.signature = this.signMessage(messageStr);\n\n          // Calculate txid\n          tx.txid = this.calculateTxid(tx);\n          return tx;\n        });\n        function createTransaction(_x, _x2, _x3) {\n          return _createTransaction.apply(this, arguments);\n        }\n        return createTransaction;\n      }()\n      /**\n       * Broadcast transaction to qBTC network\n       */\n      )\n    }, {\n      key: \"broadcastTx\",\n      value: (function () {\n        var _broadcastTx = (0, _asyncToGenerator2.default)(function* (transaction) {\n          try {\n            // If transaction is already serialized, parse it\n            var tx = typeof transaction === 'string' ? JSON.parse(transaction) : transaction;\n\n            // Prepare the broadcast_tx request\n            var messageBytes = Buffer.from(tx.body.msg_str);\n            var signatureBytes = Buffer.from(tx.body.signature, 'hex');\n            var pubkeyBytes = Buffer.from(tx.body.pubkey, 'hex');\n            var payload = {\n              request_type: 'broadcast_tx',\n              message: messageBytes.toString('base64'),\n              signature: signatureBytes.toString('base64'),\n              pubkey: pubkeyBytes.toString('base64')\n            };\n\n            // Send to qBTC node /worker endpoint\n            var response = yield _axios.default.post(`${this._qbtcNodeUrl}/worker`, payload);\n            if (response.data.status === 'success' && response.data.txid) {\n              return response.data.txid;\n            } else {\n              console.error('Broadcast failed:', response.data);\n              return false;\n            }\n          } catch (error) {\n            console.error('Error broadcasting transaction:', error);\n            return false;\n          }\n        });\n        function broadcastTx(_x4) {\n          return _broadcastTx.apply(this, arguments);\n        }\n        return broadcastTx;\n      }()\n      /**\n       * Fetch transactions from qBTC node\n       * IMPORTANT: This method should NEVER call BlueElectrum for qBTC wallets\n       */\n      )\n    }, {\n      key: \"fetchTransactions\",\n      value: (function () {\n        var _fetchTransactions = (0, _asyncToGenerator2.default)(function* () {\n          if (!this._address) return;\n\n          // Double-check wallet type to prevent Bitcoin calls\n          if (this.type !== 'qbtc') {\n            console.error('fetchTransactions called on qBTC wallet with wrong type:', this.type);\n            return;\n          }\n          try {\n            var response = yield _axios.default.get(`${this._qbtcNodeUrl}/transactions/${this._address}`);\n            var txs = response.data.transactions || [];\n\n            // Convert qBTC transactions to BlueWallet format\n            this._txs = txs.map(function (tx) {\n              return {\n                txid: tx.txid,\n                confirmations: tx.confirmations || 0,\n                value: parseInt(tx.amount),\n                fee: parseInt(tx.fee || '0'),\n                time: Math.floor(tx.timestamp / 1000),\n                // Convert ms to seconds\n                inputs: tx.inputs || [],\n                outputs: tx.outputs || []\n              };\n            });\n            this._lastTxFetch = Date.now();\n          } catch (error) {\n            console.warn('qBTC node not available, no transactions to fetch');\n            this._txs = [];\n            this._lastTxFetch = Date.now();\n            // Don't throw error - just set empty transactions list\n          }\n        });\n        function fetchTransactions() {\n          return _fetchTransactions.apply(this, arguments);\n        }\n        return fetchTransactions;\n      }())\n    }, {\n      key: \"getUtxo\",\n      value: function getUtxo() {\n        return this._utxo;\n      }\n\n      /**\n       * Simple function which says that we haven't tried to fetch balance\n       * for a long time\n       * @return {boolean}\n       */\n    }, {\n      key: \"timeToRefreshBalance\",\n      value: function timeToRefreshBalance() {\n        if (+new Date() - this._lastBalanceFetch >= 5 * 60 * 1000) {\n          return true;\n        }\n        return false;\n      }\n\n      /**\n       * Simple function which says that we haven't tried to fetch transactions\n       * for a long time\n       * @return {boolean}\n       */\n    }, {\n      key: \"timeToRefreshTransaction\",\n      value: function timeToRefreshTransaction() {\n        if (+new Date() - this._lastTxFetch >= 5 * 60 * 1000) {\n          return true;\n        }\n        return false;\n      }\n\n      // Required abstract methods\n    }, {\n      key: \"getTransactions\",\n      value: function getTransactions() {\n        return this._txs || [];\n      }\n    }, {\n      key: \"allowOnchainAddress\",\n      value: function () {\n        var _allowOnchainAddress = (0, _asyncToGenerator2.default)(function* () {\n          return true;\n        });\n        function allowOnchainAddress() {\n          return _allowOnchainAddress.apply(this, arguments);\n        }\n        return allowOnchainAddress;\n      }()\n    }, {\n      key: \"allowSend\",\n      value: function allowSend() {\n        return true;\n      }\n    }, {\n      key: \"allowReceive\",\n      value: function allowReceive() {\n        return true;\n      }\n    }, {\n      key: \"weOwnAddress\",\n      value: function weOwnAddress(address) {\n        return address === this._address;\n      }\n    }, {\n      key: \"weOwnTransaction\",\n      value: function weOwnTransaction(txid) {\n        var txs = this.getTransactions();\n        return txs.some(function (tx) {\n          return tx.txid === txid;\n        });\n      }\n    }, {\n      key: \"isInvoiceGeneratedByWallet\",\n      value: function isInvoiceGeneratedByWallet(invoice) {\n        return false; // qBTC doesn't use invoices\n      }\n    }, {\n      key: \"allowSignVerifyMessage\",\n      value: function allowSignVerifyMessage() {\n        return true;\n      }\n\n      /**\n       * Override to prevent Bitcoin Electrum calls\n       * IMPORTANT: This method should NEVER call BlueElectrum for qBTC wallets\n       */\n    }, {\n      key: \"fetchBalance\",\n      value: (function () {\n        var _fetchBalance = (0, _asyncToGenerator2.default)(function* () {\n          if (!this._address) return;\n\n          // Double-check wallet type to prevent Bitcoin calls\n          if (this.type !== 'qbtc') {\n            console.error('fetchBalance called on qBTC wallet with wrong type:', this.type);\n            return;\n          }\n          try {\n            var response = yield _axios.default.get(`${this._qbtcNodeUrl}/balance/${this._address}`);\n            var balanceStr = response.data.balance || '0';\n\n            // Convert to satoshis (qBTC uses 8 decimal places like Bitcoin)\n            this.balance = new _bignumber.default(balanceStr).multipliedBy(1e8).toNumber();\n            this.unconfirmed_balance = 0; // qBTC doesn't have unconfirmed balance concept\n            this._nodeAvailable = true;\n            this._lastBalanceFetch = Date.now();\n          } catch (error) {\n            console.warn('qBTC node not available, setting balance to 0');\n            this.balance = 0;\n            this.unconfirmed_balance = 0;\n            this._nodeAvailable = false;\n            this._lastBalanceFetch = Date.now();\n          }\n        });\n        function fetchBalance() {\n          return _fetchBalance.apply(this, arguments);\n        }\n        return fetchBalance;\n      }()\n      /**\n       * Override to prevent Bitcoin Electrum calls\n       */\n      )\n    }, {\n      key: \"wasEverUsed\",\n      value: (function () {\n        var _wasEverUsed = (0, _asyncToGenerator2.default)(function* () {\n          // For qBTC, we consider a wallet \"used\" if it has any transactions\n          try {\n            yield this.fetchTransactions();\n            return this._txs.length > 0;\n          } catch (error) {\n            console.error('Error checking if qBTC wallet was used:', error);\n            return false;\n          }\n        });\n        function wasEverUsed() {\n          return _wasEverUsed.apply(this, arguments);\n        }\n        return wasEverUsed;\n      }()\n      /**\n       * Override to skip Bitcoin UTXO fetching\n       */\n      )\n    }, {\n      key: \"fetchUtxo\",\n      value: (function () {\n        var _fetchUtxo = (0, _asyncToGenerator2.default)(function* () {\n          if (!this._address) return;\n          try {\n            var utxos = yield this.fetchUtxos();\n\n            // Convert to BlueWallet UTXO format\n            this._utxo = utxos.filter(function (u) {\n              return !u.spent;\n            }).map(function (u) {\n              return {\n                txid: u.txid,\n                vout: u.utxo_index,\n                value: new _bignumber.default(u.amount).multipliedBy(1e8).toNumber(),\n                // Convert to satoshis\n                address: u.receiver,\n                confirmations: 1 // qBTC doesn't track confirmations in the same way\n              };\n            });\n          } catch (error) {\n            console.error('Error fetching qBTC UTXOs:', error);\n            this._utxo = [];\n          }\n        });\n        function fetchUtxo() {\n          return _fetchUtxo.apply(this, arguments);\n        }\n        return fetchUtxo;\n      }())\n    }, {\n      key: \"getID\",\n      value: function getID() {\n        // Use SHA256 of public key as wallet ID\n        if (!this._publicKey) return '';\n        var hash = (0, _createHash.default)('sha256').update(this._publicKey).digest();\n        return hash.toString('hex');\n      }\n    }, {\n      key: \"getSecret\",\n      value: function getSecret() {\n        return this.secret;\n      }\n    }, {\n      key: \"setSecret\",\n      value: function setSecret(secret) {\n        this.secret = secret;\n        this._privateKey = this.fromHex(secret);\n      }\n\n      /**\n       * Export wallet data for backup\n       */\n    }, {\n      key: \"exportWallet\",\n      value: function exportWallet() {\n        return {\n          type: this.type,\n          publicKey: this.getPublicKey(),\n          privateKey: this.getPrivateKey(),\n          // Should be encrypted in production\n          address: this.getAddress(),\n          nodeUrl: this._qbtcNodeUrl,\n          chainId: this._chainId\n        };\n      }\n\n      /**\n       * Import wallet from export data\n       */\n    }], [{\n      key: \"fromExport\",\n      value: function fromExport(data) {\n        var wallet = new QBTCWallet();\n        if (data.privateKey && data.publicKey) {\n          wallet.importKeys(data.privateKey, data.publicKey);\n        }\n        if (data.nodeUrl) {\n          wallet.setNodeUrl(data.nodeUrl);\n        }\n        if (data.chainId) {\n          wallet.setChainId(data.chainId);\n        }\n        return wallet;\n      }\n    }]);\n  }(_$$_REQUIRE(_dependencyMap[15], \"./abstract-wallet\").AbstractWallet);\n  QBTCWallet.type = 'qbtc';\n  QBTCWallet.typeReadable = 'qBTC Quantum-Safe';\n});","lineCount":755,"map":[[14,2,1,0],[14,6,1,0,"_createHash"],[14,17,1,0],[14,20,1,0,"_interopRequireDefault"],[14,42,1,0],[14,43,1,0,"_$$_REQUIRE"],[14,54,1,0],[14,55,1,0,"_dependencyMap"],[14,69,1,0],[15,2,6,0],[15,6,6,0,"_bs"],[15,9,6,0],[15,12,6,0,"_interopRequireDefault"],[15,34,6,0],[15,35,6,0,"_$$_REQUIRE"],[15,46,6,0],[15,47,6,0,"_dependencyMap"],[15,61,6,0],[16,2,7,0],[16,6,7,0,"_bignumber"],[16,16,7,0],[16,19,7,0,"_interopRequireDefault"],[16,41,7,0],[16,42,7,0,"_$$_REQUIRE"],[16,53,7,0],[16,54,7,0,"_dependencyMap"],[16,68,7,0],[17,2,8,0],[17,6,8,0,"_axios"],[17,12,8,0],[17,15,8,0,"_interopRequireDefault"],[17,37,8,0],[17,38,8,0,"_$$_REQUIRE"],[17,49,8,0],[17,50,8,0,"_dependencyMap"],[17,64,8,0],[18,2,8,26],[18,11,8,26,"_callSuper"],[18,22,8,26,"t"],[18,23,8,26],[18,25,8,26,"o"],[18,26,8,26],[18,28,8,26,"e"],[18,29,8,26],[18,40,8,26,"o"],[18,41,8,26],[18,48,8,26,"_getPrototypeOf2"],[18,64,8,26],[18,65,8,26,"default"],[18,72,8,26],[18,74,8,26,"o"],[18,75,8,26],[18,82,8,26,"_possibleConstructorReturn2"],[18,109,8,26],[18,110,8,26,"default"],[18,117,8,26],[18,119,8,26,"t"],[18,120,8,26],[18,122,8,26,"_isNativeReflectConstruct"],[18,147,8,26],[18,152,8,26,"Reflect"],[18,159,8,26],[18,160,8,26,"construct"],[18,169,8,26],[18,170,8,26,"o"],[18,171,8,26],[18,173,8,26,"e"],[18,174,8,26],[18,186,8,26,"_getPrototypeOf2"],[18,202,8,26],[18,203,8,26,"default"],[18,210,8,26],[18,212,8,26,"t"],[18,213,8,26],[18,215,8,26,"constructor"],[18,226,8,26],[18,230,8,26,"o"],[18,231,8,26],[18,232,8,26,"apply"],[18,237,8,26],[18,238,8,26,"t"],[18,239,8,26],[18,241,8,26,"e"],[18,242,8,26],[19,2,8,26],[19,11,8,26,"_isNativeReflectConstruct"],[19,37,8,26],[19,51,8,26,"t"],[19,52,8,26],[19,56,8,26,"Boolean"],[19,63,8,26],[19,64,8,26,"prototype"],[19,73,8,26],[19,74,8,26,"valueOf"],[19,81,8,26],[19,82,8,26,"call"],[19,86,8,26],[19,87,8,26,"Reflect"],[19,94,8,26],[19,95,8,26,"construct"],[19,104,8,26],[19,105,8,26,"Boolean"],[19,112,8,26],[19,145,8,26,"t"],[19,146,8,26],[19,159,8,26,"_isNativeReflectConstruct"],[19,184,8,26],[19,196,8,26,"_isNativeReflectConstruct"],[19,222,8,26],[19,235,8,26,"t"],[19,236,8,26],[20,2,11,0],[21,2,12,0],[21,6,12,6,"QBTC_VERSION"],[21,18,12,18],[21,21,12,21],[21,25,12,25],[22,2,13,0],[22,6,13,6,"QBTC_ADDRESS_PREFIX"],[22,25,13,25],[22,28,13,28],[22,33,13,33],[23,2,14,0],[23,6,14,6,"CHECKSUM_LEN"],[23,18,14,18],[23,21,14,21],[23,22,14,22],[24,2,15,0],[24,6,15,6,"PQ_ALG"],[24,12,15,12],[24,15,15,15],[24,26,15,26],[25,2,16,0],[25,6,16,6,"CHAIN_ID"],[25,14,16,14],[25,17,16,17],[25,18,16,18],[25,19,16,19],[25,20,16,20],[26,2,16,20],[26,6,58,13,"QBTCWallet"],[26,16,58,23],[26,19,58,23,"exports"],[26,26,58,23],[26,27,58,23,"QBTCWallet"],[26,37,58,23],[26,63,58,23,"_AbstractWallet"],[26,78,58,23],[27,4,72,2],[27,13,72,2,"QBTCWallet"],[27,24,72,2],[27,26,72,16],[28,6,72,16],[28,10,72,16,"_this"],[28,15,72,16],[29,6,72,16],[29,10,72,16,"_classCallCheck2"],[29,26,72,16],[29,27,72,16,"default"],[29,34,72,16],[29,42,72,16,"QBTCWallet"],[29,52,72,16],[30,6,73,4,"_this"],[30,11,73,4],[30,14,73,4,"_callSuper"],[30,24,73,4],[30,31,73,4,"QBTCWallet"],[30,41,73,4],[31,6,73,12,"_this"],[31,11,73,12],[31,12,61,18,"type"],[31,16,61,22],[31,19,61,25,"QBTCWallet"],[31,29,61,35],[31,30,61,36,"type"],[31,34,61,40],[32,6,61,40,"_this"],[32,11,61,40],[32,12,62,18,"typeReadable"],[32,24,62,30],[32,27,62,33,"QBTCWallet"],[32,37,62,43],[32,38,62,44,"typeReadable"],[32,50,62,56],[33,6,64,2],[34,6,64,2,"_this"],[34,11,64,2],[34,12,65,10,"_privateKey"],[34,23,65,21],[34,26,65,43],[34,30,65,47],[35,6,65,47,"_this"],[35,11,65,47],[35,12,66,10,"_publicKey"],[35,22,66,20],[35,25,66,42],[35,29,66,46],[36,6,66,46,"_this"],[36,11,66,46],[36,12,67,10,"_qbtcNodeUrl"],[36,24,67,22],[36,27,67,33],[36,50,67,56],[37,6,67,58],[38,6,67,58,"_this"],[38,11,67,58],[38,12,68,10,"_chainId"],[38,20,68,18],[38,23,68,29,"CHAIN_ID"],[38,31,68,37],[39,6,68,37,"_this"],[39,11,68,37],[39,12,69,10,"_txs"],[39,16,69,14],[39,19,69,36],[39,21,69,38],[40,6,69,38,"_this"],[40,11,69,38],[40,12,70,10,"_nodeAvailable"],[40,26,70,24],[40,29,70,36],[40,34,70,41],[41,6,74,4,"_this"],[41,11,74,4],[41,12,74,9,"chain"],[41,17,74,14],[41,20,74,17],[41,26,74,30],[41,27,74,31],[41,28,74,32],[42,6,74,32],[42,13,74,32,"_this"],[42,18,74,32],[43,4,75,2],[45,4,77,2],[46,0,78,0],[47,0,79,0],[48,4,77,2],[48,8,77,2,"_inherits2"],[48,18,77,2],[48,19,77,2,"default"],[48,26,77,2],[48,28,77,2,"QBTCWallet"],[48,38,77,2],[48,40,77,2,"_AbstractWallet"],[48,55,77,2],[49,4,77,2],[49,15,77,2,"_createClass2"],[49,28,77,2],[49,29,77,2,"default"],[49,36,77,2],[49,38,77,2,"QBTCWallet"],[49,48,77,2],[50,6,77,2,"key"],[50,9,77,2],[51,6,77,2,"value"],[51,11,77,2],[51,13,80,2],[51,22,80,2,"getChain"],[51,30,80,10,"getChain"],[51,31,80,10],[51,33,80,21],[52,8,81,4],[52,15,81,11],[52,21,81,17],[53,6,82,2],[55,6,84,2],[56,0,85,0],[57,0,86,0],[58,4,84,2],[59,6,84,2,"key"],[59,9,84,2],[60,6,84,2,"value"],[60,11,84,2],[60,13,87,2],[60,22,87,2,"usesBitcoinInfrastructure"],[60,47,87,27,"usesBitcoinInfrastructure"],[60,48,87,27],[60,50,87,39],[61,8,88,4],[61,15,88,11],[61,20,88,16],[62,6,89,2],[64,6,91,2],[65,0,92,0],[66,0,93,0],[67,4,91,2],[68,6,91,2,"key"],[68,9,91,2],[69,6,91,2,"value"],[69,11,91,2],[69,13,94,2],[69,22,94,2,"isAddressValid"],[69,36,94,16,"isAddressValid"],[69,37,94,17,"address"],[69,44,94,32],[69,46,94,43],[70,8,95,4],[71,8,96,4],[71,15,96,11,"address"],[71,22,96,18],[71,23,96,19,"startsWith"],[71,33,96,29],[71,34,96,30],[71,39,96,35],[71,40,96,36],[71,44,96,40,"address"],[71,51,96,47],[71,52,96,48,"length"],[71,58,96,54],[71,61,96,57],[71,63,96,59],[72,6,97,2],[74,6,99,2],[75,0,100,0],[76,0,101,0],[77,4,99,2],[78,6,99,2,"key"],[78,9,99,2],[79,6,99,2,"value"],[79,11,99,2],[79,13,102,2],[79,22,102,2,"setNodeUrl"],[79,32,102,12,"setNodeUrl"],[79,33,102,13,"url"],[79,36,102,24],[79,38,102,32],[80,8,103,4],[80,12,103,8],[80,13,103,9,"_qbtcNodeUrl"],[80,25,103,21],[80,28,103,24,"url"],[80,31,103,27],[81,6,104,2],[83,6,106,2],[84,0,107,0],[85,0,108,0],[86,4,106,2],[87,6,106,2,"key"],[87,9,106,2],[88,6,106,2,"value"],[88,11,106,2],[88,13,109,2],[88,22,109,2,"setChainId"],[88,32,109,12,"setChainId"],[88,33,109,13,"chainId"],[88,40,109,28],[88,42,109,36],[89,8,110,4],[89,12,110,8],[89,13,110,9,"_chainId"],[89,21,110,17],[89,24,110,20,"chainId"],[89,31,110,27],[90,6,111,2],[92,6,113,2],[93,0,114,0],[94,0,115,0],[95,0,116,0],[96,4,113,2],[97,6,113,2,"key"],[97,9,113,2],[98,6,113,2,"value"],[98,11,113,2],[98,13,117,2],[98,22,117,10,"deriveAddress"],[98,35,117,23,"deriveAddress"],[98,36,117,24,"publicKey"],[98,45,117,45],[98,47,117,55],[99,8,118,4],[100,8,119,4],[100,12,119,10,"sha3HashHex"],[100,23,119,21],[100,26,119,24],[100,30,119,24,"sha3_256"],[100,61,119,24],[100,62,119,24,"sha3_256"],[100,81,119,32],[100,83,119,33,"publicKey"],[100,92,119,42],[100,93,119,43],[101,8,120,4],[101,12,120,10,"sha3Hash"],[101,20,120,18],[101,23,120,21,"Buffer"],[101,29,120,27],[101,30,120,28,"from"],[101,34,120,32],[101,35,120,33,"sha3HashHex"],[101,46,120,44],[101,48,120,46],[101,53,120,51],[101,54,120,52],[103,8,122,4],[104,8,123,4],[104,12,123,10,"versionedHash"],[104,25,123,23],[104,28,123,26,"Buffer"],[104,34,123,32],[104,35,123,33,"concat"],[104,41,123,39],[104,42,123,40],[104,43,123,41,"Buffer"],[104,49,123,47],[104,50,123,48,"from"],[104,54,123,52],[104,55,123,53],[104,56,123,54,"QBTC_VERSION"],[104,68,123,66],[104,69,123,67],[104,70,123,68],[104,72,123,70,"sha3Hash"],[104,80,123,78],[104,81,123,79,"slice"],[104,86,123,84],[104,87,123,85],[104,88,123,86],[104,90,123,88],[104,92,123,90],[104,93,123,91],[104,94,123,92],[104,95,123,93],[106,8,125,4],[107,8,126,4],[107,12,126,10,"checksumHex"],[107,23,126,21],[107,26,126,24],[107,30,126,24,"sha3_256"],[107,61,126,24],[107,62,126,24,"sha3_256"],[107,81,126,32],[107,83,126,33,"versionedHash"],[107,96,126,46],[107,97,126,47],[108,8,127,4],[108,12,127,10,"checksum"],[108,20,127,18],[108,23,127,21,"Buffer"],[108,29,127,27],[108,30,127,28,"from"],[108,34,127,32],[108,35,127,33,"checksumHex"],[108,46,127,44],[108,48,127,46],[108,53,127,51],[108,54,127,52],[108,55,127,53,"slice"],[108,60,127,58],[108,61,127,59],[108,62,127,60],[108,64,127,62,"CHECKSUM_LEN"],[108,76,127,74],[108,77,127,75],[110,8,129,4],[111,8,130,4],[111,12,130,10,"addressBytes"],[111,24,130,22],[111,27,130,25,"Buffer"],[111,33,130,31],[111,34,130,32,"concat"],[111,40,130,38],[111,41,130,39],[111,42,130,40,"versionedHash"],[111,55,130,53],[111,57,130,55,"checksum"],[111,65,130,63],[111,66,130,64],[111,67,130,65],[113,8,132,4],[114,8,133,4],[114,15,133,11,"QBTC_ADDRESS_PREFIX"],[114,34,133,30],[114,37,133,33,"base58"],[114,48,133,39],[114,49,133,40,"encode"],[114,55,133,46],[114,56,133,47,"addressBytes"],[114,68,133,59],[114,69,133,60],[115,6,134,2],[117,6,136,2],[118,0,137,0],[119,0,138,0],[120,4,136,2],[121,6,136,2,"key"],[121,9,136,2],[122,6,136,2,"value"],[122,11,136,2],[122,13,139,2],[122,22,139,10,"toHex"],[122,27,139,15,"toHex"],[122,28,139,16,"bytes"],[122,33,139,33],[122,35,139,43],[123,8,140,4],[123,15,140,11,"Buffer"],[123,21,140,17],[123,22,140,18,"from"],[123,26,140,22],[123,27,140,23,"bytes"],[123,32,140,28],[123,33,140,29],[123,34,140,30,"toString"],[123,42,140,38],[123,43,140,39],[123,48,140,44],[123,49,140,45],[124,6,141,2],[126,6,143,2],[127,0,144,0],[128,0,145,0],[129,4,143,2],[130,6,143,2,"key"],[130,9,143,2],[131,6,143,2,"value"],[131,11,143,2],[131,13,146,2],[131,22,146,10,"fromHex"],[131,29,146,17,"fromHex"],[131,30,146,18,"hex"],[131,33,146,29],[131,35,146,43],[132,8,147,4],[132,15,147,11],[132,19,147,15,"Uint8Array"],[132,29,147,25],[132,30,147,26,"Buffer"],[132,36,147,32],[132,37,147,33,"from"],[132,41,147,37],[132,42,147,38,"hex"],[132,45,147,41],[132,47,147,43],[132,52,147,48],[132,53,147,49],[132,54,147,50],[133,6,148,2],[135,6,150,2],[136,0,151,0],[137,0,152,0],[138,4,150,2],[139,6,150,2,"key"],[139,9,150,2],[140,6,150,2,"value"],[140,11,150,2],[140,13,153,2],[140,22,153,10,"sha256d"],[140,29,153,17,"sha256d"],[140,30,153,18,"data"],[140,34,153,30],[140,36,153,40],[141,8,154,4],[141,12,154,10,"hash1"],[141,17,154,15],[141,20,154,18],[141,24,154,18,"createHash"],[141,43,154,28],[141,45,154,29],[141,53,154,37],[141,54,154,38],[141,55,154,39,"update"],[141,61,154,45],[141,62,154,46,"data"],[141,66,154,50],[141,67,154,51],[141,68,154,52,"digest"],[141,74,154,58],[141,75,154,59],[141,76,154,60],[142,8,155,4],[142,15,155,11],[142,19,155,11,"createHash"],[142,38,155,21],[142,40,155,22],[142,48,155,30],[142,49,155,31],[142,50,155,32,"update"],[142,56,155,38],[142,57,155,39,"hash1"],[142,62,155,44],[142,63,155,45],[142,64,155,46,"digest"],[142,70,155,52],[142,71,155,53],[142,72,155,54],[143,6,156,2],[145,6,158,2],[146,0,159,0],[147,0,160,0],[148,0,161,0],[149,4,158,2],[150,6,158,2,"key"],[150,9,158,2],[151,6,158,2,"value"],[151,11,158,2],[151,13,162,2],[151,22,162,10,"serializeTransaction"],[151,42,162,30,"serializeTransaction"],[151,43,162,31,"tx"],[151,45,162,50],[151,47,162,60],[152,8,163,4],[153,8,164,4],[153,12,164,10,"txClean"],[153,19,164,17],[153,22,164,17,"Object"],[153,28,164,17],[153,29,164,17,"assign"],[153,35,164,17],[153,40,164,25,"tx"],[153,42,164,27],[153,43,164,29],[154,8,165,4],[154,12,165,8],[154,18,165,14],[154,22,165,18,"txClean"],[154,29,165,25],[154,31,165,27],[155,10,166,6],[155,17,166,13,"txClean"],[155,24,166,20],[155,25,166,21,"txid"],[155,29,166,25],[156,8,167,4],[158,8,169,4],[159,8,170,4],[159,12,170,8,"txClean"],[159,19,170,15],[159,20,170,16,"outputs"],[159,27,170,23],[159,29,170,25],[160,10,171,6,"txClean"],[160,17,171,13],[160,18,171,14,"outputs"],[160,25,171,21],[160,28,171,24,"txClean"],[160,35,171,31],[160,36,171,32,"outputs"],[160,43,171,39],[160,44,171,40,"map"],[160,47,171,43],[160,48,171,44],[160,58,171,45,"output"],[160,64,171,51],[160,66,171,56],[161,12,172,8],[161,16,172,19,"cleanOutput"],[161,27,172,30],[161,30,172,30,"Object"],[161,36,172,30],[161,37,172,30,"assign"],[161,43,172,30],[161,53,172,30,"_objectDestructuringEmpty2"],[161,79,172,30],[161,80,172,30,"default"],[161,87,172,30],[161,89,172,35,"output"],[161,95,172,41],[161,98,172,35,"output"],[161,104,172,41],[162,12,173,8],[162,19,173,15,"cleanOutput"],[162,30,173,26],[163,10,174,6],[163,11,174,7],[163,12,174,8],[164,8,175,4],[165,8,177,4],[165,12,177,10,"txData"],[165,18,177,16],[165,21,177,19,"JSON"],[165,25,177,23],[165,26,177,24,"stringify"],[165,35,177,33],[165,36,177,34,"txClean"],[165,43,177,41],[165,45,177,43,"Object"],[165,51,177,49],[165,52,177,50,"keys"],[165,56,177,54],[165,57,177,55,"txClean"],[165,64,177,62],[165,65,177,63],[165,66,177,64,"sort"],[165,70,177,68],[165,71,177,69],[165,72,177,70],[165,73,177,71],[166,8,178,4],[166,15,178,11,"Buffer"],[166,21,178,17],[166,22,178,18,"from"],[166,26,178,22],[166,27,178,23,"txData"],[166,33,178,29],[166,34,178,30],[166,35,178,31,"toString"],[166,43,178,39],[166,44,178,40],[166,49,178,45],[166,50,178,46],[167,6,179,2],[169,6,181,2],[170,0,182,0],[171,0,183,0],[172,0,184,0],[173,4,181,2],[174,6,181,2,"key"],[174,9,181,2],[175,6,181,2,"value"],[175,11,181,2],[175,13,185,2],[175,22,185,10,"calculateTxid"],[175,35,185,23,"calculateTxid"],[175,36,185,24,"tx"],[175,38,185,43],[175,40,185,53],[176,8,186,4],[176,12,186,10,"serialized"],[176,22,186,20],[176,25,186,23],[176,29,186,27],[176,30,186,28,"serializeTransaction"],[176,50,186,48],[176,51,186,49,"tx"],[176,53,186,51],[176,54,186,52],[177,8,187,4],[177,12,187,10,"hash"],[177,16,187,14],[177,19,187,17],[177,23,187,21],[177,24,187,22,"sha256d"],[177,31,187,29],[177,32,187,30,"Buffer"],[177,38,187,36],[177,39,187,37,"from"],[177,43,187,41],[177,44,187,42,"serialized"],[177,54,187,52],[177,56,187,54],[177,61,187,59],[177,62,187,60],[177,63,187,61],[178,8,188,4],[179,8,189,4],[179,15,189,11,"hash"],[179,19,189,15],[179,20,189,16,"reverse"],[179,27,189,23],[179,28,189,24],[179,29,189,25],[179,30,189,26,"toString"],[179,38,189,34],[179,39,189,35],[179,44,189,40],[179,45,189,41],[180,6,190,2],[182,6,192,2],[183,0,193,0],[184,0,194,0],[185,4,192,2],[186,6,192,2,"key"],[186,9,192,2],[187,6,192,2,"value"],[187,11,192,2],[188,8,192,2],[188,12,192,2,"_generate"],[188,21,192,2],[188,28,192,2,"_asyncToGenerator2"],[188,46,192,2],[188,47,192,2,"default"],[188,54,192,2],[188,56,195,2],[188,69,195,34],[189,10,196,4],[189,14,196,8],[190,12,197,6,"console"],[190,19,197,13],[190,20,197,14,"log"],[190,23,197,17],[190,24,197,18],[190,52,197,46],[190,53,197,47],[192,12,199,6],[193,12,200,6,"console"],[193,19,200,13],[193,20,200,14,"log"],[193,23,200,17],[193,24,200,18],[193,66,200,60],[193,67,200,61],[194,12,201,6],[194,16,201,12,"seedBuffer"],[194,26,201,22],[194,35,201,31],[194,39,201,31,"randomBytes"],[194,70,201,31],[194,71,201,31,"randomBytes"],[194,92,201,42],[194,94,201,43],[194,96,201,45],[194,97,201,46],[195,12,202,6],[195,16,202,12,"seed"],[195,20,202,16],[195,23,202,19],[195,27,202,23,"Uint8Array"],[195,37,202,33],[195,38,202,34,"seedBuffer"],[195,48,202,44],[195,49,202,45,"buffer"],[195,55,202,51],[195,57,202,53,"seedBuffer"],[195,67,202,63],[195,68,202,64,"byteOffset"],[195,78,202,74],[195,80,202,76,"seedBuffer"],[195,90,202,86],[195,91,202,87,"length"],[195,97,202,93],[195,98,202,94],[196,12,203,6,"console"],[196,19,203,13],[196,20,203,14,"log"],[196,23,203,17],[196,24,203,18],[196,64,203,58],[196,66,203,60,"seed"],[196,70,203,64],[196,71,203,65,"length"],[196,77,203,71],[196,78,203,72],[197,12,205,6,"console"],[197,19,205,13],[197,20,205,14,"log"],[197,23,205,17],[197,24,205,18],[197,72,205,66],[197,73,205,67],[198,12,206,6],[198,16,206,6,"_ml_dsa87$keygen"],[198,32,206,6],[198,35,206,39,"ml_dsa87"],[198,66,206,39],[198,67,206,39,"ml_dsa87"],[198,105,206,47],[198,106,206,48,"keygen"],[198,112,206,54],[198,113,206,55,"seed"],[198,117,206,59],[198,118,206,60],[199,14,206,14,"publicKey"],[199,23,206,23],[199,26,206,23,"_ml_dsa87$keygen"],[199,42,206,23],[199,43,206,14,"publicKey"],[199,52,206,23],[200,14,206,25,"secretKey"],[200,23,206,34],[200,26,206,34,"_ml_dsa87$keygen"],[200,42,206,34],[200,43,206,25,"secretKey"],[200,52,206,34],[201,12,207,6,"console"],[201,19,207,13],[201,20,207,14,"log"],[201,23,207,17],[201,24,207,18],[201,77,207,71],[201,79,207,73,"publicKey"],[201,88,207,82],[201,89,207,83,"length"],[201,95,207,89],[201,97,207,91],[201,116,207,110],[201,118,207,112,"secretKey"],[201,127,207,121],[201,128,207,122,"length"],[201,134,207,128],[201,135,207,129],[202,12,209,6],[202,16,209,10],[202,17,209,11,"_privateKey"],[202,28,209,22],[202,31,209,25,"secretKey"],[202,40,209,34],[203,12,210,6],[203,16,210,10],[203,17,210,11,"_publicKey"],[203,27,210,21],[203,30,210,24,"publicKey"],[203,39,210,33],[204,12,211,6,"console"],[204,19,211,13],[204,20,211,14,"log"],[204,23,211,17],[204,24,211,18],[204,64,211,58],[204,65,211,59],[206,12,213,6],[207,12,214,6],[207,16,214,10],[207,17,214,11,"secret"],[207,23,214,17],[207,26,214,20],[207,30,214,24],[207,31,214,25,"toHex"],[207,36,214,30],[207,37,214,31,"secretKey"],[207,46,214,40],[207,47,214,41],[208,12,215,6,"console"],[208,19,215,13],[208,20,215,14,"log"],[208,23,215,17],[208,24,215,18],[208,58,215,52],[208,59,215,53],[210,12,217,6],[211,12,218,6,"console"],[211,19,218,13],[211,20,218,14,"log"],[211,23,218,17],[211,24,218,18],[211,60,218,54],[211,61,218,55],[212,12,219,6],[212,16,219,10],[212,17,219,11,"_address"],[212,25,219,19],[212,28,219,22],[212,32,219,26],[212,33,219,27,"deriveAddress"],[212,46,219,40],[212,47,219,41,"publicKey"],[212,56,219,50],[212,57,219,51],[213,12,220,6,"console"],[213,19,220,13],[213,20,220,14,"log"],[213,23,220,17],[213,24,220,18],[213,57,220,51],[213,59,220,53],[213,63,220,57],[213,64,220,58,"_address"],[213,72,220,66],[213,73,220,67],[214,12,222,6,"console"],[214,19,222,13],[214,20,222,14,"log"],[214,23,222,17],[214,24,222,18],[214,50,222,44],[214,51,222,45],[215,10,223,4],[215,11,223,5],[215,12,223,6],[215,19,223,13,"error"],[215,24,223,18],[215,26,223,20],[216,12,224,6,"console"],[216,19,224,13],[216,20,224,14,"error"],[216,25,224,19],[216,26,224,20],[216,57,224,51],[216,59,224,53,"error"],[216,64,224,58],[216,65,224,59],[217,12,225,6,"console"],[217,19,225,13],[217,20,225,14,"error"],[217,25,225,19],[217,26,225,20],[217,40,225,34],[217,42,225,36,"error"],[217,47,225,41],[217,48,225,42,"stack"],[217,53,225,47],[217,54,225,48],[218,12,226,6],[218,18,226,12],[218,22,226,16,"Error"],[218,27,226,21],[218,28,226,22],[218,63,226,57,"error"],[218,68,226,62],[218,69,226,63,"message"],[218,76,226,70],[218,78,226,72],[218,79,226,73],[219,10,227,4],[220,8,228,2],[220,9,228,3],[221,8,228,3],[221,17,195,8,"generate"],[221,25,195,16,"generate"],[221,26,195,16],[222,10,195,16],[222,17,195,16,"_generate"],[222,26,195,16],[222,27,195,16,"apply"],[222,32,195,16],[222,39,195,16,"arguments"],[222,48,195,16],[223,8,195,16],[224,8,195,16],[224,15,195,8,"generate"],[224,23,195,16],[225,6,195,16],[226,6,230,2],[227,0,231,0],[228,0,232,0],[229,6,230,2],[230,4,230,2],[231,6,230,2,"key"],[231,9,230,2],[232,6,230,2,"value"],[232,11,230,2],[232,13,233,2],[232,22,233,2,"importKeys"],[232,32,233,12,"importKeys"],[232,33,233,13,"privateKeyHex"],[232,46,233,34],[232,48,233,36,"publicKeyHex"],[232,60,233,56],[232,62,233,64],[233,8,234,4],[233,12,234,8],[233,13,234,9,"_privateKey"],[233,24,234,20],[233,27,234,23],[233,31,234,27],[233,32,234,28,"fromHex"],[233,39,234,35],[233,40,234,36,"privateKeyHex"],[233,53,234,49],[233,54,234,50],[234,8,235,4],[234,12,235,8],[234,13,235,9,"_publicKey"],[234,23,235,19],[234,26,235,22],[234,30,235,26],[234,31,235,27,"fromHex"],[234,38,235,34],[234,39,235,35,"publicKeyHex"],[234,51,235,47],[234,52,235,48],[235,8,236,4],[235,12,236,8],[235,13,236,9,"secret"],[235,19,236,15],[235,22,236,18,"privateKeyHex"],[235,35,236,31],[236,8,237,4],[236,12,237,8],[236,13,237,9,"_address"],[236,21,237,17],[236,24,237,20],[236,28,237,24],[236,29,237,25,"deriveAddress"],[236,42,237,38],[236,43,237,39],[236,47,237,43],[236,48,237,44,"_publicKey"],[236,58,237,54],[236,59,237,55],[237,6,238,2],[238,4,238,3],[239,6,238,3,"key"],[239,9,238,3],[240,6,238,3,"value"],[240,11,238,3],[240,13,240,2],[240,22,240,2,"getAddress"],[240,32,240,12,"getAddress"],[240,33,240,12],[240,35,240,31],[241,8,241,4],[241,15,241,11],[241,19,241,15],[241,20,241,16,"_address"],[241,28,241,24],[241,32,241,28],[241,37,241,33],[242,6,242,2],[243,4,242,3],[244,6,242,3,"key"],[244,9,242,3],[245,6,242,3,"value"],[245,11,242,3],[245,13,244,2],[245,22,244,2,"getAllExternalAddresses"],[245,45,244,25,"getAllExternalAddresses"],[245,46,244,25],[245,48,244,38],[246,8,245,4],[246,15,245,11],[246,19,245,15],[246,20,245,16,"_address"],[246,28,245,24],[246,31,245,27],[246,32,245,28],[246,36,245,32],[246,37,245,33,"_address"],[246,45,245,41],[246,46,245,42],[246,49,245,45],[246,51,245,47],[247,6,246,2],[248,4,246,3],[249,6,246,3,"key"],[249,9,246,3],[250,6,246,3,"value"],[250,11,246,3],[250,13,248,2],[250,22,248,2,"getPublicKey"],[250,34,248,14,"getPublicKey"],[250,35,248,14],[250,37,248,25],[251,8,249,4],[251,15,249,11],[251,19,249,15],[251,20,249,16,"_publicKey"],[251,30,249,26],[251,33,249,29],[251,37,249,33],[251,38,249,34,"toHex"],[251,43,249,39],[251,44,249,40],[251,48,249,44],[251,49,249,45,"_publicKey"],[251,59,249,55],[251,60,249,56],[251,63,249,59],[251,65,249,61],[252,6,250,2],[253,4,250,3],[254,6,250,3,"key"],[254,9,250,3],[255,6,250,3,"value"],[255,11,250,3],[255,13,252,2],[255,22,252,2,"getPrivateKey"],[255,35,252,15,"getPrivateKey"],[255,36,252,15],[255,38,252,26],[256,8,253,4],[256,15,253,11],[256,19,253,15],[256,20,253,16,"_privateKey"],[256,31,253,27],[256,34,253,30],[256,38,253,34],[256,39,253,35,"toHex"],[256,44,253,40],[256,45,253,41],[256,49,253,45],[256,50,253,46,"_privateKey"],[256,61,253,57],[256,62,253,58],[256,65,253,61],[256,67,253,63],[257,6,254,2],[259,6,256,2],[260,0,257,0],[261,0,258,0],[262,0,259,0],[263,4,256,2],[264,6,256,2,"key"],[264,9,256,2],[265,6,256,2,"value"],[265,11,256,2],[265,13,260,2],[265,22,260,2,"signMessage"],[265,33,260,13,"signMessage"],[265,34,260,14,"message"],[265,41,260,29],[265,43,260,39],[266,8,261,4],[266,12,261,8],[266,13,261,9],[266,17,261,13],[266,18,261,14,"_privateKey"],[266,29,261,25],[266,31,261,27],[267,10,262,6],[267,16,262,12],[267,20,262,16,"Error"],[267,25,262,21],[267,26,262,22],[267,52,262,48],[267,53,262,49],[268,8,263,4],[269,8,265,4],[269,12,265,8],[270,10,266,6],[271,10,267,6],[271,14,267,12,"messageBytes"],[271,26,267,24],[271,29,267,27],[271,33,267,31,"TextEncoder"],[271,44,267,42],[271,45,267,43],[271,46,267,44],[271,47,267,45,"encode"],[271,53,267,51],[271,54,267,52,"message"],[271,61,267,59],[271,62,267,60],[273,10,269,6],[274,10,270,6],[274,14,270,12,"signature"],[274,23,270,21],[274,26,270,24,"ml_dsa87"],[274,57,270,24],[274,58,270,24,"ml_dsa87"],[274,96,270,32],[274,97,270,33,"sign"],[274,101,270,37],[274,102,270,38],[274,106,270,42],[274,107,270,43,"_privateKey"],[274,118,270,54],[274,120,270,56,"messageBytes"],[274,132,270,68],[274,133,270,69],[276,10,272,6],[277,10,273,6],[277,17,273,13],[277,21,273,17],[277,22,273,18,"toHex"],[277,27,273,23],[277,28,273,24,"signature"],[277,37,273,33],[277,38,273,34],[278,8,274,4],[278,9,274,5],[278,10,274,6],[278,17,274,13,"error"],[278,22,274,18],[278,24,274,20],[279,10,275,6,"console"],[279,17,275,13],[279,18,275,14,"error"],[279,23,275,19],[279,24,275,20],[279,49,275,45],[279,51,275,47,"error"],[279,56,275,52],[279,57,275,53],[280,10,276,6],[280,16,276,12],[280,20,276,16,"Error"],[280,25,276,21],[280,26,276,22],[280,54,276,50],[280,55,276,51],[281,8,277,4],[282,6,278,2],[284,6,280,2],[285,0,281,0],[286,0,282,0],[287,0,283,0],[288,4,280,2],[289,6,280,2,"key"],[289,9,280,2],[290,6,280,2,"value"],[290,11,280,2],[290,13,284,2],[290,22,284,2,"verifySignature"],[290,37,284,17,"verifySignature"],[290,38,284,18,"message"],[290,45,284,33],[290,47,284,35,"signatureHex"],[290,59,284,55],[290,61,284,57,"publicKeyHex"],[290,73,284,77],[290,75,284,88],[291,8,285,4],[291,12,285,8],[292,10,286,6],[292,14,286,12,"messageBytes"],[292,26,286,24],[292,29,286,27],[292,33,286,31,"TextEncoder"],[292,44,286,42],[292,45,286,43],[292,46,286,44],[292,47,286,45,"encode"],[292,53,286,51],[292,54,286,52,"message"],[292,61,286,59],[292,62,286,60],[293,10,287,6],[293,14,287,12,"signature"],[293,23,287,21],[293,26,287,24],[293,30,287,28],[293,31,287,29,"fromHex"],[293,38,287,36],[293,39,287,37,"signatureHex"],[293,51,287,49],[293,52,287,50],[294,10,288,6],[294,14,288,12,"publicKey"],[294,23,288,21],[294,26,288,24],[294,30,288,28],[294,31,288,29,"fromHex"],[294,38,288,36],[294,39,288,37,"publicKeyHex"],[294,51,288,49],[294,52,288,50],[295,10,290,6],[295,17,290,13,"ml_dsa87"],[295,48,290,13],[295,49,290,13,"ml_dsa87"],[295,87,290,21],[295,88,290,22,"verify"],[295,94,290,28],[295,95,290,29,"publicKey"],[295,104,290,38],[295,106,290,40,"messageBytes"],[295,118,290,52],[295,120,290,54,"signature"],[295,129,290,63],[295,130,290,64],[296,8,291,4],[296,9,291,5],[296,10,291,6],[296,17,291,13,"error"],[296,22,291,18],[296,24,291,20],[297,10,292,6,"console"],[297,17,292,13],[297,18,292,14,"error"],[297,23,292,19],[297,24,292,20],[297,53,292,49],[297,55,292,51,"error"],[297,60,292,56],[297,61,292,57],[298,10,293,6],[298,17,293,13],[298,22,293,18],[299,8,294,4],[300,6,295,2],[302,6,297,2],[303,0,298,0],[304,0,299,0],[305,4,297,2],[306,6,297,2,"key"],[306,9,297,2],[307,6,297,2,"value"],[307,11,297,2],[308,8,297,2],[308,12,297,2,"_fetchUtxos"],[308,23,297,2],[308,30,297,2,"_asyncToGenerator2"],[308,48,297,2],[308,49,297,2,"default"],[308,56,297,2],[308,58,300,2],[308,71,300,50],[309,10,301,4],[309,14,301,8],[309,15,301,9],[309,19,301,13],[309,20,301,14,"_address"],[309,28,301,22],[309,30,301,24],[309,37,301,31],[309,39,301,33],[310,10,303,4],[310,14,303,8],[311,12,304,6],[311,16,304,12,"response"],[311,24,304,20],[311,33,304,29,"axios"],[311,47,304,34],[311,48,304,35,"get"],[311,51,304,38],[311,52,304,39],[311,55,304,42],[311,59,304,46],[311,60,304,47,"_qbtcNodeUrl"],[311,72,304,59],[311,82,304,69],[311,86,304,73],[311,87,304,74,"_address"],[311,95,304,82],[311,97,304,84],[311,98,304,85],[312,12,305,6],[312,19,305,13,"response"],[312,27,305,21],[312,28,305,22,"data"],[312,32,305,26],[312,33,305,27,"utxos"],[312,38,305,32],[312,42,305,36],[312,44,305,38],[313,10,306,4],[313,11,306,5],[313,12,306,6],[313,19,306,13,"error"],[313,24,306,18],[313,26,306,20],[314,12,307,6,"console"],[314,19,307,13],[314,20,307,14,"error"],[314,25,307,19],[314,26,307,20],[314,49,307,43],[314,51,307,45,"error"],[314,56,307,50],[314,57,307,51],[315,12,308,6],[315,19,308,13],[315,21,308,15],[316,10,309,4],[317,8,310,2],[317,9,310,3],[318,8,310,3],[318,17,300,16,"fetchUtxos"],[318,27,300,26,"fetchUtxos"],[318,28,300,26],[319,10,300,26],[319,17,300,26,"_fetchUtxos"],[319,28,300,26],[319,29,300,26,"apply"],[319,34,300,26],[319,41,300,26,"arguments"],[319,50,300,26],[320,8,300,26],[321,8,300,26],[321,15,300,16,"fetchUtxos"],[321,25,300,26],[322,6,300,26],[323,6,312,2],[324,0,313,0],[325,0,314,0],[326,6,312,2],[327,4,312,2],[328,6,312,2,"key"],[328,9,312,2],[329,6,312,2,"value"],[329,11,312,2],[330,8,312,2],[330,12,312,2,"_createTransaction"],[330,30,312,2],[330,37,312,2,"_asyncToGenerator2"],[330,55,312,2],[330,56,312,2,"default"],[330,63,312,2],[330,65,315,2],[330,76,316,4,"targets"],[330,83,316,54],[330,85,317,4,"feeRate"],[330,92,317,19],[330,94,318,4,"changeAddress"],[330,107,318,26],[330,109,319,30],[331,10,320,4],[331,14,320,8],[331,15,320,9],[331,19,320,13],[331,20,320,14,"_publicKey"],[331,30,320,24],[331,34,320,28],[331,35,320,29],[331,39,320,33],[331,40,320,34,"_address"],[331,48,320,42],[331,50,320,44],[332,12,321,6],[332,18,321,12],[332,22,321,16,"Error"],[332,27,321,21],[332,28,321,22],[332,52,321,46],[332,53,321,47],[333,10,322,4],[335,10,324,4],[336,10,325,4],[336,14,325,10,"utxos"],[336,19,325,15],[336,28,325,24],[336,32,325,28],[336,33,325,29,"fetchUtxos"],[336,43,325,39],[336,44,325,40],[336,45,325,41],[337,10,326,4],[337,14,326,8,"utxos"],[337,19,326,13],[337,20,326,14,"length"],[337,26,326,20],[337,31,326,25],[337,32,326,26],[337,34,326,28],[338,12,327,6],[338,18,327,12],[338,22,327,16,"Error"],[338,27,327,21],[338,28,327,22],[338,48,327,42],[338,49,327,43],[339,10,328,4],[341,10,330,4],[342,10,331,4],[342,14,331,10,"totalNeeded"],[342,25,331,21],[342,28,331,24,"targets"],[342,35,331,31],[342,36,331,32,"reduce"],[342,42,331,38],[342,43,331,39],[342,53,331,40,"sum"],[342,56,331,43],[342,58,331,45,"target"],[342,64,331,51],[343,12,331,51],[343,19,331,56,"sum"],[343,22,331,59],[343,23,331,60,"plus"],[343,27,331,64],[343,28,331,65,"target"],[343,34,331,71],[343,35,331,72,"value"],[343,40,331,77],[343,41,331,78],[344,10,331,78],[344,13,331,80],[344,17,331,84,"BigNumber"],[344,35,331,93],[344,36,331,94],[344,37,331,95],[344,38,331,96],[344,39,331,97],[345,10,332,4],[345,14,332,10,"minerFee"],[345,22,332,18],[345,25,332,21,"totalNeeded"],[345,36,332,32],[345,37,332,33,"multipliedBy"],[345,49,332,45],[345,50,332,46],[345,55,332,51],[345,56,332,52],[345,57,332,53,"decimalPlaces"],[345,70,332,66],[345,71,332,67],[345,72,332,68],[345,73,332,69],[345,74,332,70],[345,75,332,71],[346,10,333,4],[346,14,333,10,"totalRequired"],[346,27,333,23],[346,30,333,26,"totalNeeded"],[346,41,333,37],[346,42,333,38,"plus"],[346,46,333,42],[346,47,333,43,"minerFee"],[346,55,333,51],[346,56,333,52],[348,10,335,4],[349,10,336,4],[349,14,336,10,"inputs"],[349,20,336,29],[349,23,336,32],[349,25,336,34],[350,10,337,4],[350,14,337,8,"totalAvailable"],[350,28,337,22],[350,31,337,25],[350,35,337,29,"BigNumber"],[350,53,337,38],[350,54,337,39],[350,55,337,40],[350,56,337,41],[351,10,339,4],[351,15,339,9],[351,19,339,15,"utxo"],[351,23,339,19],[351,27,339,23,"utxos"],[351,32,339,28],[351,34,339,30],[352,12,340,6],[352,16,340,10],[352,17,340,11,"utxo"],[352,21,340,15],[352,22,340,16,"spent"],[352,27,340,21],[352,29,340,23],[353,14,341,8,"inputs"],[353,20,341,14],[353,21,341,15,"push"],[353,25,341,19],[353,26,341,20],[354,16,342,10,"txid"],[354,20,342,14],[354,22,342,16,"utxo"],[354,26,342,20],[354,27,342,21,"txid"],[354,31,342,25],[355,16,343,10,"utxo_index"],[355,26,343,20],[355,28,343,22,"utxo"],[355,32,343,26],[355,33,343,27,"utxo_index"],[355,43,343,37],[356,16,344,10,"sender"],[356,22,344,16],[356,24,344,18,"utxo"],[356,28,344,22],[356,29,344,23,"sender"],[356,35,344,29],[357,16,345,10,"receiver"],[357,24,345,18],[357,26,345,20,"utxo"],[357,30,345,24],[357,31,345,25,"receiver"],[357,39,345,33],[358,16,346,10,"amount"],[358,22,346,16],[358,24,346,18,"utxo"],[358,28,346,22],[358,29,346,23,"amount"],[358,35,346,29],[359,16,347,10,"spent"],[359,21,347,15],[359,23,347,17],[360,14,348,8],[360,15,348,9],[360,16,348,10],[361,14,349,8,"totalAvailable"],[361,28,349,22],[361,31,349,25,"totalAvailable"],[361,45,349,39],[361,46,349,40,"plus"],[361,50,349,44],[361,51,349,45,"utxo"],[361,55,349,49],[361,56,349,50,"amount"],[361,62,349,56],[361,63,349,57],[362,14,351,8],[362,18,351,12,"totalAvailable"],[362,32,351,26],[362,33,351,27,"isGreaterThanOrEqualTo"],[362,55,351,49],[362,56,351,50,"totalRequired"],[362,69,351,63],[362,70,351,64],[362,72,351,66],[363,16,352,10],[364,14,353,8],[365,12,354,6],[366,10,355,4],[367,10,357,4],[367,14,357,8,"totalAvailable"],[367,28,357,22],[367,29,357,23,"isLessThan"],[367,39,357,33],[367,40,357,34,"totalRequired"],[367,53,357,47],[367,54,357,48],[367,56,357,50],[368,12,358,6],[368,18,358,12],[368,22,358,16,"Error"],[368,27,358,21],[368,28,358,22],[368,56,358,50,"totalAvailable"],[368,70,358,64],[368,80,358,74,"totalRequired"],[368,93,358,87],[368,95,358,89],[368,96,358,90],[369,10,359,4],[371,10,361,4],[372,10,362,4],[372,14,362,10,"outputs"],[372,21,362,31],[372,24,362,34],[372,26,362,36],[373,10,363,4],[373,14,363,8,"outputIndex"],[373,25,363,19],[373,28,363,22],[373,29,363,23],[375,10,365,4],[376,10,366,4],[376,15,366,9],[376,19,366,15,"target"],[376,25,366,21],[376,29,366,25,"targets"],[376,36,366,32],[376,38,366,34],[377,12,367,6,"outputs"],[377,19,367,13],[377,20,367,14,"push"],[377,24,367,18],[377,25,367,19],[378,14,368,8,"utxo_index"],[378,24,368,18],[378,26,368,20,"outputIndex"],[378,37,368,31],[378,39,368,33],[379,14,369,8,"sender"],[379,20,369,14],[379,22,369,16],[379,26,369,20],[379,27,369,21,"_address"],[379,35,369,29],[380,14,370,8,"receiver"],[380,22,370,16],[380,24,370,18,"target"],[380,30,370,24],[380,31,370,25,"address"],[380,38,370,32],[381,14,371,8,"amount"],[381,20,371,14],[381,22,371,16],[381,26,371,20,"BigNumber"],[381,44,371,29],[381,45,371,30,"target"],[381,51,371,36],[381,52,371,37,"value"],[381,57,371,42],[381,58,371,43],[381,59,371,44,"toFixed"],[381,66,371,51],[381,67,371,52],[381,68,371,53],[381,69,371,54],[382,14,372,8,"spent"],[382,19,372,13],[382,21,372,15],[383,12,373,6],[383,13,373,7],[383,14,373,8],[384,10,374,4],[386,10,376,4],[387,10,377,4],[387,14,377,10,"change"],[387,20,377,16],[387,23,377,19,"totalAvailable"],[387,37,377,33],[387,38,377,34,"minus"],[387,43,377,39],[387,44,377,40,"totalRequired"],[387,57,377,53],[387,58,377,54],[388,10,378,4],[388,14,378,8,"change"],[388,20,378,14],[388,21,378,15,"isGreaterThan"],[388,34,378,28],[388,35,378,29],[388,36,378,30],[388,37,378,31],[388,39,378,33],[389,12,379,6,"outputs"],[389,19,379,13],[389,20,379,14,"push"],[389,24,379,18],[389,25,379,19],[390,14,380,8,"utxo_index"],[390,24,380,18],[390,26,380,20,"outputIndex"],[390,37,380,31],[390,39,380,33],[391,14,381,8,"sender"],[391,20,381,14],[391,22,381,16],[391,26,381,20],[391,27,381,21,"_address"],[391,35,381,29],[392,14,382,8,"receiver"],[392,22,382,16],[392,24,382,18,"changeAddress"],[392,37,382,31],[392,41,382,35],[392,45,382,39],[392,46,382,40,"_address"],[392,54,382,48],[393,14,383,8,"amount"],[393,20,383,14],[393,22,383,16,"change"],[393,28,383,22],[393,29,383,23,"toFixed"],[393,36,383,30],[393,37,383,31],[393,38,383,32],[393,39,383,33],[394,14,384,8,"spent"],[394,19,384,13],[394,21,384,15],[395,12,385,6],[395,13,385,7],[395,14,385,8],[396,10,386,4],[398,10,388,4],[399,10,389,4],[399,14,389,10,"timestamp"],[399,23,389,19],[399,26,389,22,"Date"],[399,30,389,26],[399,31,389,27,"now"],[399,34,389,30],[399,35,389,31],[399,36,389,32],[400,10,390,4],[400,14,390,10,"msgParts"],[400,22,390,18],[400,25,390,21],[400,26,391,6],[400,30,391,10],[400,31,391,11,"_address"],[400,39,391,19],[400,41,392,6,"targets"],[400,48,392,13],[400,49,392,14],[400,50,392,15],[400,51,392,16],[400,52,392,17,"address"],[400,59,392,24],[401,10,392,26],[402,10,393,6,"targets"],[402,17,393,13],[402,18,393,14],[402,19,393,15],[402,20,393,16],[402,21,393,17,"value"],[402,26,393,22],[402,27,393,23,"toString"],[402,35,393,31],[402,36,393,32],[402,37,393,33],[402,39,394,6,"timestamp"],[402,48,394,15],[402,49,394,16,"toString"],[402,57,394,24],[402,58,394,25],[402,59,394,26],[402,61,395,6],[402,65,395,10],[402,66,395,11,"_chainId"],[402,74,395,19],[402,75,395,20,"toString"],[402,83,395,28],[402,84,395,29],[402,85,395,30],[402,86,396,5],[403,10,397,4],[403,14,397,10,"messageStr"],[403,24,397,20],[403,27,397,23,"msgParts"],[403,35,397,31],[403,36,397,32,"join"],[403,40,397,36],[403,41,397,37],[403,44,397,40],[403,45,397,41],[405,10,399,4],[406,10,400,4],[406,14,400,10,"tx"],[406,16,400,29],[406,19,400,32],[407,12,401,6,"type"],[407,16,401,10],[407,18,401,12],[407,31,401,25],[408,12,402,6,"inputs"],[408,18,402,12],[408,20,402,14,"inputs"],[408,26,402,20],[409,12,403,6,"outputs"],[409,19,403,13],[409,21,403,15,"outputs"],[409,28,403,22],[410,12,404,6,"body"],[410,16,404,10],[410,18,404,12],[411,14,405,8,"msg_str"],[411,21,405,15],[411,23,405,17,"messageStr"],[411,33,405,27],[412,14,406,8,"pubkey"],[412,20,406,14],[412,22,406,16],[412,26,406,20],[412,27,406,21,"toHex"],[412,32,406,26],[412,33,406,27],[412,37,406,31],[412,38,406,32,"_publicKey"],[412,48,406,42],[412,49,406,43],[413,14,407,8,"signature"],[413,23,407,17],[413,25,407,19],[414,12,408,6],[414,13,408,7],[415,12,409,6,"timestamp"],[415,21,409,15],[415,23,409,17,"timestamp"],[416,10,410,4],[416,11,410,5],[418,10,412,4],[419,10,413,4,"tx"],[419,12,413,6],[419,13,413,7,"body"],[419,17,413,11],[419,18,413,12,"signature"],[419,27,413,21],[419,30,413,24],[419,34,413,28],[419,35,413,29,"signMessage"],[419,46,413,40],[419,47,413,41,"messageStr"],[419,57,413,51],[419,58,413,52],[421,10,415,4],[422,10,416,4,"tx"],[422,12,416,6],[422,13,416,7,"txid"],[422,17,416,11],[422,20,416,14],[422,24,416,18],[422,25,416,19,"calculateTxid"],[422,38,416,32],[422,39,416,33,"tx"],[422,41,416,35],[422,42,416,36],[423,10,418,4],[423,17,418,11,"tx"],[423,19,418,13],[424,8,419,2],[424,9,419,3],[425,8,419,3],[425,17,315,8,"createTransaction"],[425,34,315,25,"createTransaction"],[425,35,315,25,"_x"],[425,37,315,25],[425,39,315,25,"_x2"],[425,42,315,25],[425,44,315,25,"_x3"],[425,47,315,25],[426,10,315,25],[426,17,315,25,"_createTransaction"],[426,35,315,25],[426,36,315,25,"apply"],[426,41,315,25],[426,48,315,25,"arguments"],[426,57,315,25],[427,8,315,25],[428,8,315,25],[428,15,315,8,"createTransaction"],[428,32,315,25],[429,6,315,25],[430,6,421,2],[431,0,422,0],[432,0,423,0],[433,6,421,2],[434,4,421,2],[435,6,421,2,"key"],[435,9,421,2],[436,6,421,2,"value"],[436,11,421,2],[437,8,421,2],[437,12,421,2,"_broadcastTx"],[437,24,421,2],[437,31,421,2,"_asyncToGenerator2"],[437,49,421,2],[437,50,421,2,"default"],[437,57,421,2],[437,59,424,2],[437,70,424,20,"transaction"],[437,81,424,57],[437,83,424,84],[438,10,425,4],[438,14,425,8],[439,12,426,6],[440,12,427,6],[440,16,427,12,"tx"],[440,18,427,14],[440,21,427,17],[440,28,427,24,"transaction"],[440,39,427,35],[440,44,427,40],[440,52,427,48],[440,55,427,51,"JSON"],[440,59,427,55],[440,60,427,56,"parse"],[440,65,427,61],[440,66,427,62,"transaction"],[440,77,427,73],[440,78,427,74],[440,81,427,77,"transaction"],[440,92,427,88],[442,12,429,6],[443,12,430,6],[443,16,430,12,"messageBytes"],[443,28,430,24],[443,31,430,27,"Buffer"],[443,37,430,33],[443,38,430,34,"from"],[443,42,430,38],[443,43,430,39,"tx"],[443,45,430,41],[443,46,430,42,"body"],[443,50,430,46],[443,51,430,47,"msg_str"],[443,58,430,54],[443,59,430,55],[444,12,431,6],[444,16,431,12,"signatureBytes"],[444,30,431,26],[444,33,431,29,"Buffer"],[444,39,431,35],[444,40,431,36,"from"],[444,44,431,40],[444,45,431,41,"tx"],[444,47,431,43],[444,48,431,44,"body"],[444,52,431,48],[444,53,431,49,"signature"],[444,62,431,58],[444,64,431,60],[444,69,431,65],[444,70,431,66],[445,12,432,6],[445,16,432,12,"pubkeyBytes"],[445,27,432,23],[445,30,432,26,"Buffer"],[445,36,432,32],[445,37,432,33,"from"],[445,41,432,37],[445,42,432,38,"tx"],[445,44,432,40],[445,45,432,41,"body"],[445,49,432,45],[445,50,432,46,"pubkey"],[445,56,432,52],[445,58,432,54],[445,63,432,59],[445,64,432,60],[446,12,434,6],[446,16,434,12,"payload"],[446,23,434,19],[446,26,434,22],[447,14,435,8,"request_type"],[447,26,435,20],[447,28,435,22],[447,42,435,36],[448,14,436,8,"message"],[448,21,436,15],[448,23,436,17,"messageBytes"],[448,35,436,29],[448,36,436,30,"toString"],[448,44,436,38],[448,45,436,39],[448,53,436,47],[448,54,436,48],[449,14,437,8,"signature"],[449,23,437,17],[449,25,437,19,"signatureBytes"],[449,39,437,33],[449,40,437,34,"toString"],[449,48,437,42],[449,49,437,43],[449,57,437,51],[449,58,437,52],[450,14,438,8,"pubkey"],[450,20,438,14],[450,22,438,16,"pubkeyBytes"],[450,33,438,27],[450,34,438,28,"toString"],[450,42,438,36],[450,43,438,37],[450,51,438,45],[451,12,439,6],[451,13,439,7],[453,12,441,6],[454,12,442,6],[454,16,442,12,"response"],[454,24,442,20],[454,33,442,29,"axios"],[454,47,442,34],[454,48,442,35,"post"],[454,52,442,39],[454,53,442,40],[454,56,442,43],[454,60,442,47],[454,61,442,48,"_qbtcNodeUrl"],[454,73,442,60],[454,82,442,69],[454,84,442,71,"payload"],[454,91,442,78],[454,92,442,79],[455,12,444,6],[455,16,444,10,"response"],[455,24,444,18],[455,25,444,19,"data"],[455,29,444,23],[455,30,444,24,"status"],[455,36,444,30],[455,41,444,35],[455,50,444,44],[455,54,444,48,"response"],[455,62,444,56],[455,63,444,57,"data"],[455,67,444,61],[455,68,444,62,"txid"],[455,72,444,66],[455,74,444,68],[456,14,445,8],[456,21,445,15,"response"],[456,29,445,23],[456,30,445,24,"data"],[456,34,445,28],[456,35,445,29,"txid"],[456,39,445,33],[457,12,446,6],[457,13,446,7],[457,19,446,13],[458,14,447,8,"console"],[458,21,447,15],[458,22,447,16,"error"],[458,27,447,21],[458,28,447,22],[458,47,447,41],[458,49,447,43,"response"],[458,57,447,51],[458,58,447,52,"data"],[458,62,447,56],[458,63,447,57],[459,14,448,8],[459,21,448,15],[459,26,448,20],[460,12,449,6],[461,10,450,4],[461,11,450,5],[461,12,450,6],[461,19,450,13,"error"],[461,24,450,18],[461,26,450,20],[462,12,451,6,"console"],[462,19,451,13],[462,20,451,14,"error"],[462,25,451,19],[462,26,451,20],[462,59,451,53],[462,61,451,55,"error"],[462,66,451,60],[462,67,451,61],[463,12,452,6],[463,19,452,13],[463,24,452,18],[464,10,453,4],[465,8,454,2],[465,9,454,3],[466,8,454,3],[466,17,424,8,"broadcastTx"],[466,28,424,19,"broadcastTx"],[466,29,424,19,"_x4"],[466,32,424,19],[467,10,424,19],[467,17,424,19,"_broadcastTx"],[467,29,424,19],[467,30,424,19,"apply"],[467,35,424,19],[467,42,424,19,"arguments"],[467,51,424,19],[468,8,424,19],[469,8,424,19],[469,15,424,8,"broadcastTx"],[469,26,424,19],[470,6,424,19],[471,6,456,2],[472,0,457,0],[473,0,458,0],[474,0,459,0],[475,6,456,2],[476,4,456,2],[477,6,456,2,"key"],[477,9,456,2],[478,6,456,2,"value"],[478,11,456,2],[479,8,456,2],[479,12,456,2,"_fetchTransactions"],[479,30,456,2],[479,37,456,2,"_asyncToGenerator2"],[479,55,456,2],[479,56,456,2,"default"],[479,63,456,2],[479,65,460,2],[479,78,460,43],[480,10,461,4],[480,14,461,8],[480,15,461,9],[480,19,461,13],[480,20,461,14,"_address"],[480,28,461,22],[480,30,461,24],[482,10,463,4],[483,10,464,4],[483,14,464,8],[483,18,464,12],[483,19,464,13,"type"],[483,23,464,17],[483,28,464,22],[483,34,464,28],[483,36,464,30],[484,12,465,6,"console"],[484,19,465,13],[484,20,465,14,"error"],[484,25,465,19],[484,26,465,20],[484,84,465,78],[484,86,465,80],[484,90,465,84],[484,91,465,85,"type"],[484,95,465,89],[484,96,465,90],[485,12,466,6],[486,10,467,4],[487,10,469,4],[487,14,469,8],[488,12,470,6],[488,16,470,12,"response"],[488,24,470,20],[488,33,470,29,"axios"],[488,47,470,34],[488,48,470,35,"get"],[488,51,470,38],[488,52,470,39],[488,55,470,42],[488,59,470,46],[488,60,470,47,"_qbtcNodeUrl"],[488,72,470,59],[488,89,470,76],[488,93,470,80],[488,94,470,81,"_address"],[488,102,470,89],[488,104,470,91],[488,105,470,92],[489,12,471,6],[489,16,471,12,"txs"],[489,19,471,15],[489,22,471,18,"response"],[489,30,471,26],[489,31,471,27,"data"],[489,35,471,31],[489,36,471,32,"transactions"],[489,48,471,44],[489,52,471,48],[489,54,471,50],[491,12,473,6],[492,12,474,6],[492,16,474,10],[492,17,474,11,"_txs"],[492,21,474,15],[492,24,474,18,"txs"],[492,27,474,21],[492,28,474,22,"map"],[492,31,474,25],[492,32,474,26],[492,42,474,27,"tx"],[492,44,474,34],[493,14,474,34],[493,21,474,40],[494,16,475,8,"txid"],[494,20,475,12],[494,22,475,14,"tx"],[494,24,475,16],[494,25,475,17,"txid"],[494,29,475,21],[495,16,476,8,"confirmations"],[495,29,476,21],[495,31,476,23,"tx"],[495,33,476,25],[495,34,476,26,"confirmations"],[495,47,476,39],[495,51,476,43],[495,52,476,44],[496,16,477,8,"value"],[496,21,477,13],[496,23,477,15,"parseInt"],[496,31,477,23],[496,32,477,24,"tx"],[496,34,477,26],[496,35,477,27,"amount"],[496,41,477,33],[496,42,477,34],[497,16,478,8,"fee"],[497,19,478,11],[497,21,478,13,"parseInt"],[497,29,478,21],[497,30,478,22,"tx"],[497,32,478,24],[497,33,478,25,"fee"],[497,36,478,28],[497,40,478,32],[497,43,478,35],[497,44,478,36],[498,16,479,8,"time"],[498,20,479,12],[498,22,479,14,"Math"],[498,26,479,18],[498,27,479,19,"floor"],[498,32,479,24],[498,33,479,25,"tx"],[498,35,479,27],[498,36,479,28,"timestamp"],[498,45,479,37],[498,48,479,40],[498,52,479,44],[498,53,479,45],[499,16,479,47],[500,16,480,8,"inputs"],[500,22,480,14],[500,24,480,16,"tx"],[500,26,480,18],[500,27,480,19,"inputs"],[500,33,480,25],[500,37,480,29],[500,39,480,31],[501,16,481,8,"outputs"],[501,23,481,15],[501,25,481,17,"tx"],[501,27,481,19],[501,28,481,20,"outputs"],[501,35,481,27],[501,39,481,31],[502,14,482,6],[502,15,482,7],[503,12,482,7],[503,13,482,8],[503,14,482,9],[504,12,484,6],[504,16,484,10],[504,17,484,11,"_lastTxFetch"],[504,29,484,23],[504,32,484,26,"Date"],[504,36,484,30],[504,37,484,31,"now"],[504,40,484,34],[504,41,484,35],[504,42,484,36],[505,10,485,4],[505,11,485,5],[505,12,485,6],[505,19,485,13,"error"],[505,24,485,18],[505,26,485,20],[506,12,486,6,"console"],[506,19,486,13],[506,20,486,14,"warn"],[506,24,486,18],[506,25,486,19],[506,76,486,70],[506,77,486,71],[507,12,487,6],[507,16,487,10],[507,17,487,11,"_txs"],[507,21,487,15],[507,24,487,18],[507,26,487,20],[508,12,488,6],[508,16,488,10],[508,17,488,11,"_lastTxFetch"],[508,29,488,23],[508,32,488,26,"Date"],[508,36,488,30],[508,37,488,31,"now"],[508,40,488,34],[508,41,488,35],[508,42,488,36],[509,12,489,6],[510,10,490,4],[511,8,491,2],[511,9,491,3],[512,8,491,3],[512,17,460,8,"fetchTransactions"],[512,34,460,25,"fetchTransactions"],[512,35,460,25],[513,10,460,25],[513,17,460,25,"_fetchTransactions"],[513,35,460,25],[513,36,460,25,"apply"],[513,41,460,25],[513,48,460,25,"arguments"],[513,57,460,25],[514,8,460,25],[515,8,460,25],[515,15,460,8,"fetchTransactions"],[515,32,460,25],[516,6,460,25],[517,4,460,25],[518,6,460,25,"key"],[518,9,460,25],[519,6,460,25,"value"],[519,11,460,25],[519,13,495,2],[519,22,495,2,"getUtxo"],[519,29,495,9,"getUtxo"],[519,30,495,9],[519,32,495,20],[520,8,496,4],[520,15,496,11],[520,19,496,15],[520,20,496,16,"_utxo"],[520,25,496,21],[521,6,497,2],[523,6,499,2],[524,0,500,0],[525,0,501,0],[526,0,502,0],[527,0,503,0],[528,4,499,2],[529,6,499,2,"key"],[529,9,499,2],[530,6,499,2,"value"],[530,11,499,2],[530,13,504,2],[530,22,504,2,"timeToRefreshBalance"],[530,42,504,22,"timeToRefreshBalance"],[530,43,504,22],[530,45,504,34],[531,8,505,4],[531,12,505,8],[531,13,505,9],[531,17,505,13,"Date"],[531,21,505,17],[531,22,505,18],[531,23,505,19],[531,26,505,22],[531,30,505,26],[531,31,505,27,"_lastBalanceFetch"],[531,48,505,44],[531,52,505,48],[531,53,505,49],[531,56,505,52],[531,58,505,54],[531,61,505,57],[531,65,505,61],[531,67,505,63],[532,10,506,6],[532,17,506,13],[532,21,506,17],[533,8,507,4],[534,8,508,4],[534,15,508,11],[534,20,508,16],[535,6,509,2],[537,6,511,2],[538,0,512,0],[539,0,513,0],[540,0,514,0],[541,0,515,0],[542,4,511,2],[543,6,511,2,"key"],[543,9,511,2],[544,6,511,2,"value"],[544,11,511,2],[544,13,516,2],[544,22,516,2,"timeToRefreshTransaction"],[544,46,516,26,"timeToRefreshTransaction"],[544,47,516,26],[544,49,516,38],[545,8,517,4],[545,12,517,8],[545,13,517,9],[545,17,517,13,"Date"],[545,21,517,17],[545,22,517,18],[545,23,517,19],[545,26,517,22],[545,30,517,26],[545,31,517,27,"_lastTxFetch"],[545,43,517,39],[545,47,517,43],[545,48,517,44],[545,51,517,47],[545,53,517,49],[545,56,517,52],[545,60,517,56],[545,62,517,58],[546,10,518,6],[546,17,518,13],[546,21,518,17],[547,8,519,4],[548,8,520,4],[548,15,520,11],[548,20,520,16],[549,6,521,2],[551,6,523,2],[552,4,523,2],[553,6,523,2,"key"],[553,9,523,2],[554,6,523,2,"value"],[554,11,523,2],[554,13,524,2],[554,22,524,2,"getTransactions"],[554,37,524,17,"getTransactions"],[554,38,524,17],[554,40,524,35],[555,8,525,4],[555,15,525,11],[555,19,525,15],[555,20,525,16,"_txs"],[555,24,525,20],[555,28,525,24],[555,30,525,26],[556,6,526,2],[557,4,526,3],[558,6,526,3,"key"],[558,9,526,3],[559,6,526,3,"value"],[559,11,526,3],[560,8,526,3],[560,12,526,3,"_allowOnchainAddress"],[560,32,526,3],[560,39,526,3,"_asyncToGenerator2"],[560,57,526,3],[560,58,526,3,"default"],[560,65,526,3],[560,67,528,2],[560,80,528,48],[561,10,529,4],[561,17,529,11],[561,21,529,15],[562,8,530,2],[562,9,530,3],[563,8,530,3],[563,17,528,8,"allowOnchainAddress"],[563,36,528,27,"allowOnchainAddress"],[563,37,528,27],[564,10,528,27],[564,17,528,27,"_allowOnchainAddress"],[564,37,528,27],[564,38,528,27,"apply"],[564,43,528,27],[564,50,528,27,"arguments"],[564,59,528,27],[565,8,528,27],[566,8,528,27],[566,15,528,8,"allowOnchainAddress"],[566,34,528,27],[567,6,528,27],[568,4,528,27],[569,6,528,27,"key"],[569,9,528,27],[570,6,528,27,"value"],[570,11,528,27],[570,13,532,2],[570,22,532,2,"allowSend"],[570,31,532,11,"allowSend"],[570,32,532,11],[570,34,532,23],[571,8,533,4],[571,15,533,11],[571,19,533,15],[572,6,534,2],[573,4,534,3],[574,6,534,3,"key"],[574,9,534,3],[575,6,534,3,"value"],[575,11,534,3],[575,13,536,2],[575,22,536,2,"allowReceive"],[575,34,536,14,"allowReceive"],[575,35,536,14],[575,37,536,26],[576,8,537,4],[576,15,537,11],[576,19,537,15],[577,6,538,2],[578,4,538,3],[579,6,538,3,"key"],[579,9,538,3],[580,6,538,3,"value"],[580,11,538,3],[580,13,540,2],[580,22,540,2,"weOwnAddress"],[580,34,540,14,"weOwnAddress"],[580,35,540,15,"address"],[580,42,540,30],[580,44,540,41],[581,8,541,4],[581,15,541,11,"address"],[581,22,541,18],[581,27,541,23],[581,31,541,27],[581,32,541,28,"_address"],[581,40,541,36],[582,6,542,2],[583,4,542,3],[584,6,542,3,"key"],[584,9,542,3],[585,6,542,3,"value"],[585,11,542,3],[585,13,544,2],[585,22,544,2,"weOwnTransaction"],[585,38,544,18,"weOwnTransaction"],[585,39,544,19,"txid"],[585,43,544,31],[585,45,544,42],[586,8,545,4],[586,12,545,10,"txs"],[586,15,545,13],[586,18,545,16],[586,22,545,20],[586,23,545,21,"getTransactions"],[586,38,545,36],[586,39,545,37],[586,40,545,38],[587,8,546,4],[587,15,546,11,"txs"],[587,18,546,14],[587,19,546,15,"some"],[587,23,546,19],[587,24,546,20],[587,34,546,20,"tx"],[587,36,546,22],[588,10,546,22],[588,17,546,26,"tx"],[588,19,546,28],[588,20,546,29,"txid"],[588,24,546,33],[588,29,546,38,"txid"],[588,33,546,42],[589,8,546,42],[589,10,546,43],[590,6,547,2],[591,4,547,3],[592,6,547,3,"key"],[592,9,547,3],[593,6,547,3,"value"],[593,11,547,3],[593,13,549,2],[593,22,549,2,"isInvoiceGeneratedByWallet"],[593,48,549,28,"isInvoiceGeneratedByWallet"],[593,49,549,29,"invoice"],[593,56,549,44],[593,58,549,55],[594,8,550,4],[594,15,550,11],[594,20,550,16],[594,21,550,17],[594,22,550,18],[595,6,551,2],[596,4,551,3],[597,6,551,3,"key"],[597,9,551,3],[598,6,551,3,"value"],[598,11,551,3],[598,13,553,2],[598,22,553,2,"allowSignVerifyMessage"],[598,44,553,24,"allowSignVerifyMessage"],[598,45,553,24],[598,47,553,36],[599,8,554,4],[599,15,554,11],[599,19,554,15],[600,6,555,2],[602,6,557,2],[603,0,558,0],[604,0,559,0],[605,0,560,0],[606,4,557,2],[607,6,557,2,"key"],[607,9,557,2],[608,6,557,2,"value"],[608,11,557,2],[609,8,557,2],[609,12,557,2,"_fetchBalance"],[609,25,557,2],[609,32,557,2,"_asyncToGenerator2"],[609,50,557,2],[609,51,557,2,"default"],[609,58,557,2],[609,60,561,2],[609,73,561,38],[610,10,562,4],[610,14,562,8],[610,15,562,9],[610,19,562,13],[610,20,562,14,"_address"],[610,28,562,22],[610,30,562,24],[612,10,564,4],[613,10,565,4],[613,14,565,8],[613,18,565,12],[613,19,565,13,"type"],[613,23,565,17],[613,28,565,22],[613,34,565,28],[613,36,565,30],[614,12,566,6,"console"],[614,19,566,13],[614,20,566,14,"error"],[614,25,566,19],[614,26,566,20],[614,79,566,73],[614,81,566,75],[614,85,566,79],[614,86,566,80,"type"],[614,90,566,84],[614,91,566,85],[615,12,567,6],[616,10,568,4],[617,10,570,4],[617,14,570,8],[618,12,571,6],[618,16,571,12,"response"],[618,24,571,20],[618,33,571,29,"axios"],[618,47,571,34],[618,48,571,35,"get"],[618,51,571,38],[618,52,571,39],[618,55,571,42],[618,59,571,46],[618,60,571,47,"_qbtcNodeUrl"],[618,72,571,59],[618,84,571,71],[618,88,571,75],[618,89,571,76,"_address"],[618,97,571,84],[618,99,571,86],[618,100,571,87],[619,12,572,6],[619,16,572,12,"balanceStr"],[619,26,572,22],[619,29,572,25,"response"],[619,37,572,33],[619,38,572,34,"data"],[619,42,572,38],[619,43,572,39,"balance"],[619,50,572,46],[619,54,572,50],[619,57,572,53],[621,12,574,6],[622,12,575,6],[622,16,575,10],[622,17,575,11,"balance"],[622,24,575,18],[622,27,575,21],[622,31,575,25,"BigNumber"],[622,49,575,34],[622,50,575,35,"balanceStr"],[622,60,575,45],[622,61,575,46],[622,62,575,47,"multipliedBy"],[622,74,575,59],[622,75,575,60],[622,78,575,63],[622,79,575,64],[622,80,575,65,"toNumber"],[622,88,575,73],[622,89,575,74],[622,90,575,75],[623,12,576,6],[623,16,576,10],[623,17,576,11,"unconfirmed_balance"],[623,36,576,30],[623,39,576,33],[623,40,576,34],[623,41,576,35],[623,42,576,36],[624,12,577,6],[624,16,577,10],[624,17,577,11,"_nodeAvailable"],[624,31,577,25],[624,34,577,28],[624,38,577,32],[625,12,579,6],[625,16,579,10],[625,17,579,11,"_lastBalanceFetch"],[625,34,579,28],[625,37,579,31,"Date"],[625,41,579,35],[625,42,579,36,"now"],[625,45,579,39],[625,46,579,40],[625,47,579,41],[626,10,580,4],[626,11,580,5],[626,12,580,6],[626,19,580,13,"error"],[626,24,580,18],[626,26,580,20],[627,12,581,6,"console"],[627,19,581,13],[627,20,581,14,"warn"],[627,24,581,18],[627,25,581,19],[627,72,581,66],[627,73,581,67],[628,12,582,6],[628,16,582,10],[628,17,582,11,"balance"],[628,24,582,18],[628,27,582,21],[628,28,582,22],[629,12,583,6],[629,16,583,10],[629,17,583,11,"unconfirmed_balance"],[629,36,583,30],[629,39,583,33],[629,40,583,34],[630,12,584,6],[630,16,584,10],[630,17,584,11,"_nodeAvailable"],[630,31,584,25],[630,34,584,28],[630,39,584,33],[631,12,585,6],[631,16,585,10],[631,17,585,11,"_lastBalanceFetch"],[631,34,585,28],[631,37,585,31,"Date"],[631,41,585,35],[631,42,585,36,"now"],[631,45,585,39],[631,46,585,40],[631,47,585,41],[632,10,586,4],[633,8,587,2],[633,9,587,3],[634,8,587,3],[634,17,561,8,"fetchBalance"],[634,29,561,20,"fetchBalance"],[634,30,561,20],[635,10,561,20],[635,17,561,20,"_fetchBalance"],[635,30,561,20],[635,31,561,20,"apply"],[635,36,561,20],[635,43,561,20,"arguments"],[635,52,561,20],[636,8,561,20],[637,8,561,20],[637,15,561,8,"fetchBalance"],[637,27,561,20],[638,6,561,20],[639,6,589,2],[640,0,590,0],[641,0,591,0],[642,6,589,2],[643,4,589,2],[644,6,589,2,"key"],[644,9,589,2],[645,6,589,2,"value"],[645,11,589,2],[646,8,589,2],[646,12,589,2,"_wasEverUsed"],[646,24,589,2],[646,31,589,2,"_asyncToGenerator2"],[646,49,589,2],[646,50,589,2,"default"],[646,57,589,2],[646,59,592,2],[646,72,592,40],[647,10,593,4],[648,10,594,4],[648,14,594,8],[649,12,595,6],[649,18,595,12],[649,22,595,16],[649,23,595,17,"fetchTransactions"],[649,40,595,34],[649,41,595,35],[649,42,595,36],[650,12,596,6],[650,19,596,13],[650,23,596,17],[650,24,596,18,"_txs"],[650,28,596,22],[650,29,596,23,"length"],[650,35,596,29],[650,38,596,32],[650,39,596,33],[651,10,597,4],[651,11,597,5],[651,12,597,6],[651,19,597,13,"error"],[651,24,597,18],[651,26,597,20],[652,12,598,6,"console"],[652,19,598,13],[652,20,598,14,"error"],[652,25,598,19],[652,26,598,20],[652,67,598,61],[652,69,598,63,"error"],[652,74,598,68],[652,75,598,69],[653,12,599,6],[653,19,599,13],[653,24,599,18],[654,10,600,4],[655,8,601,2],[655,9,601,3],[656,8,601,3],[656,17,592,8,"wasEverUsed"],[656,28,592,19,"wasEverUsed"],[656,29,592,19],[657,10,592,19],[657,17,592,19,"_wasEverUsed"],[657,29,592,19],[657,30,592,19,"apply"],[657,35,592,19],[657,42,592,19,"arguments"],[657,51,592,19],[658,8,592,19],[659,8,592,19],[659,15,592,8,"wasEverUsed"],[659,26,592,19],[660,6,592,19],[661,6,603,2],[662,0,604,0],[663,0,605,0],[664,6,603,2],[665,4,603,2],[666,6,603,2,"key"],[666,9,603,2],[667,6,603,2,"value"],[667,11,603,2],[668,8,603,2],[668,12,603,2,"_fetchUtxo"],[668,22,603,2],[668,29,603,2,"_asyncToGenerator2"],[668,47,603,2],[668,48,603,2,"default"],[668,55,603,2],[668,57,606,2],[668,70,606,35],[669,10,607,4],[669,14,607,8],[669,15,607,9],[669,19,607,13],[669,20,607,14,"_address"],[669,28,607,22],[669,30,607,24],[670,10,609,4],[670,14,609,8],[671,12,610,6],[671,16,610,12,"utxos"],[671,21,610,17],[671,30,610,26],[671,34,610,30],[671,35,610,31,"fetchUtxos"],[671,45,610,41],[671,46,610,42],[671,47,610,43],[673,12,612,6],[674,12,613,6],[674,16,613,10],[674,17,613,11,"_utxo"],[674,22,613,16],[674,25,613,19,"utxos"],[674,30,613,24],[674,31,613,25,"filter"],[674,37,613,31],[674,38,613,32],[674,48,613,32,"u"],[674,49,613,33],[675,14,613,33],[675,21,613,37],[675,22,613,38,"u"],[675,23,613,39],[675,24,613,40,"spent"],[675,29,613,45],[676,12,613,45],[676,14,613,46],[676,15,613,47,"map"],[676,18,613,50],[676,19,613,51],[676,29,613,51,"u"],[676,30,613,52],[677,14,613,52],[677,21,613,57],[678,16,614,8,"txid"],[678,20,614,12],[678,22,614,14,"u"],[678,23,614,15],[678,24,614,16,"txid"],[678,28,614,20],[679,16,615,8,"vout"],[679,20,615,12],[679,22,615,14,"u"],[679,23,615,15],[679,24,615,16,"utxo_index"],[679,34,615,26],[680,16,616,8,"value"],[680,21,616,13],[680,23,616,15],[680,27,616,19,"BigNumber"],[680,45,616,28],[680,46,616,29,"u"],[680,47,616,30],[680,48,616,31,"amount"],[680,54,616,37],[680,55,616,38],[680,56,616,39,"multipliedBy"],[680,68,616,51],[680,69,616,52],[680,72,616,55],[680,73,616,56],[680,74,616,57,"toNumber"],[680,82,616,65],[680,83,616,66],[680,84,616,67],[681,16,616,69],[682,16,617,8,"address"],[682,23,617,15],[682,25,617,17,"u"],[682,26,617,18],[682,27,617,19,"receiver"],[682,35,617,27],[683,16,618,8,"confirmations"],[683,29,618,21],[683,31,618,23],[683,32,618,24],[683,33,618,26],[684,14,619,6],[684,15,619,7],[685,12,619,7],[685,13,619,8],[685,14,619,9],[686,10,620,4],[686,11,620,5],[686,12,620,6],[686,19,620,13,"error"],[686,24,620,18],[686,26,620,20],[687,12,621,6,"console"],[687,19,621,13],[687,20,621,14,"error"],[687,25,621,19],[687,26,621,20],[687,54,621,48],[687,56,621,50,"error"],[687,61,621,55],[687,62,621,56],[688,12,622,6],[688,16,622,10],[688,17,622,11,"_utxo"],[688,22,622,16],[688,25,622,19],[688,27,622,21],[689,10,623,4],[690,8,624,2],[690,9,624,3],[691,8,624,3],[691,17,606,8,"fetchUtxo"],[691,26,606,17,"fetchUtxo"],[691,27,606,17],[692,10,606,17],[692,17,606,17,"_fetchUtxo"],[692,27,606,17],[692,28,606,17,"apply"],[692,33,606,17],[692,40,606,17,"arguments"],[692,49,606,17],[693,8,606,17],[694,8,606,17],[694,15,606,8,"fetchUtxo"],[694,24,606,17],[695,6,606,17],[696,4,606,17],[697,6,606,17,"key"],[697,9,606,17],[698,6,606,17,"value"],[698,11,606,17],[698,13,626,2],[698,22,626,2,"getID"],[698,27,626,7,"getID"],[698,28,626,7],[698,30,626,18],[699,8,627,4],[700,8,628,4],[700,12,628,8],[700,13,628,9],[700,17,628,13],[700,18,628,14,"_publicKey"],[700,28,628,24],[700,30,628,26],[700,37,628,33],[700,39,628,35],[701,8,629,4],[701,12,629,10,"hash"],[701,16,629,14],[701,19,629,17],[701,23,629,17,"createHash"],[701,42,629,27],[701,44,629,28],[701,52,629,36],[701,53,629,37],[701,54,629,38,"update"],[701,60,629,44],[701,61,629,45],[701,65,629,49],[701,66,629,50,"_publicKey"],[701,76,629,60],[701,77,629,61],[701,78,629,62,"digest"],[701,84,629,68],[701,85,629,69],[701,86,629,70],[702,8,630,4],[702,15,630,11,"hash"],[702,19,630,15],[702,20,630,16,"toString"],[702,28,630,24],[702,29,630,25],[702,34,630,30],[702,35,630,31],[703,6,631,2],[704,4,631,3],[705,6,631,3,"key"],[705,9,631,3],[706,6,631,3,"value"],[706,11,631,3],[706,13,633,2],[706,22,633,2,"getSecret"],[706,31,633,11,"getSecret"],[706,32,633,11],[706,34,633,22],[707,8,634,4],[707,15,634,11],[707,19,634,15],[707,20,634,16,"secret"],[707,26,634,22],[708,6,635,2],[709,4,635,3],[710,6,635,3,"key"],[710,9,635,3],[711,6,635,3,"value"],[711,11,635,3],[711,13,637,2],[711,22,637,2,"setSecret"],[711,31,637,11,"setSecret"],[711,32,637,12,"secret"],[711,38,637,26],[711,40,637,34],[712,8,638,4],[712,12,638,8],[712,13,638,9,"secret"],[712,19,638,15],[712,22,638,18,"secret"],[712,28,638,24],[713,8,639,4],[713,12,639,8],[713,13,639,9,"_privateKey"],[713,24,639,20],[713,27,639,23],[713,31,639,27],[713,32,639,28,"fromHex"],[713,39,639,35],[713,40,639,36,"secret"],[713,46,639,42],[713,47,639,43],[714,6,640,2],[716,6,642,2],[717,0,643,0],[718,0,644,0],[719,4,642,2],[720,6,642,2,"key"],[720,9,642,2],[721,6,642,2,"value"],[721,11,642,2],[721,13,645,2],[721,22,645,2,"exportWallet"],[721,34,645,14,"exportWallet"],[721,35,645,14],[721,37,645,25],[722,8,646,4],[722,15,646,11],[723,10,647,6,"type"],[723,14,647,10],[723,16,647,12],[723,20,647,16],[723,21,647,17,"type"],[723,25,647,21],[724,10,648,6,"publicKey"],[724,19,648,15],[724,21,648,17],[724,25,648,21],[724,26,648,22,"getPublicKey"],[724,38,648,34],[724,39,648,35],[724,40,648,36],[725,10,649,6,"privateKey"],[725,20,649,16],[725,22,649,18],[725,26,649,22],[725,27,649,23,"getPrivateKey"],[725,40,649,36],[725,41,649,37],[725,42,649,38],[726,10,649,40],[727,10,650,6,"address"],[727,17,650,13],[727,19,650,15],[727,23,650,19],[727,24,650,20,"getAddress"],[727,34,650,30],[727,35,650,31],[727,36,650,32],[728,10,651,6,"nodeUrl"],[728,17,651,13],[728,19,651,15],[728,23,651,19],[728,24,651,20,"_qbtcNodeUrl"],[728,36,651,32],[729,10,652,6,"chainId"],[729,17,652,13],[729,19,652,15],[729,23,652,19],[729,24,652,20,"_chainId"],[730,8,653,4],[730,9,653,5],[731,6,654,2],[733,6,656,2],[734,0,657,0],[735,0,658,0],[736,4,656,2],[737,6,656,2,"key"],[737,9,656,2],[738,6,656,2,"value"],[738,11,656,2],[738,13,659,2],[738,22,659,9,"fromExport"],[738,32,659,19,"fromExport"],[738,33,659,20,"data"],[738,37,659,29],[738,39,659,43],[739,8,660,4],[739,12,660,10,"wallet"],[739,18,660,16],[739,21,660,19],[739,25,660,23,"QBTCWallet"],[739,35,660,33],[739,36,660,34],[739,37,660,35],[740,8,662,4],[740,12,662,8,"data"],[740,16,662,12],[740,17,662,13,"privateKey"],[740,27,662,23],[740,31,662,27,"data"],[740,35,662,31],[740,36,662,32,"publicKey"],[740,45,662,41],[740,47,662,43],[741,10,663,6,"wallet"],[741,16,663,12],[741,17,663,13,"importKeys"],[741,27,663,23],[741,28,663,24,"data"],[741,32,663,28],[741,33,663,29,"privateKey"],[741,43,663,39],[741,45,663,41,"data"],[741,49,663,45],[741,50,663,46,"publicKey"],[741,59,663,55],[741,60,663,56],[742,8,664,4],[743,8,666,4],[743,12,666,8,"data"],[743,16,666,12],[743,17,666,13,"nodeUrl"],[743,24,666,20],[743,26,666,22],[744,10,667,6,"wallet"],[744,16,667,12],[744,17,667,13,"setNodeUrl"],[744,27,667,23],[744,28,667,24,"data"],[744,32,667,28],[744,33,667,29,"nodeUrl"],[744,40,667,36],[744,41,667,37],[745,8,668,4],[746,8,670,4],[746,12,670,8,"data"],[746,16,670,12],[746,17,670,13,"chainId"],[746,24,670,20],[746,26,670,22],[747,10,671,6,"wallet"],[747,16,671,12],[747,17,671,13,"setChainId"],[747,27,671,23],[747,28,671,24,"data"],[747,32,671,28],[747,33,671,29,"chainId"],[747,40,671,36],[747,41,671,37],[748,8,672,4],[749,8,674,4],[749,15,674,11,"wallet"],[749,21,674,17],[750,6,675,2],[751,4,675,3],[752,2,675,3],[752,4,58,32,"AbstractWallet"],[752,35,58,32],[752,36,58,32,"AbstractWallet"],[752,71,58,46],[753,2,58,13,"QBTCWallet"],[753,12,58,23],[753,13,59,18,"type"],[753,17,59,22],[753,20,59,25],[753,26,59,31],[754,2,58,13,"QBTCWallet"],[754,12,58,23],[754,13,60,18,"typeReadable"],[754,25,60,30],[754,28,60,33],[754,47,60,52],[755,0,60,52],[755,3]],"functionMap":{"names":["<global>","QBTCWallet","QBTCWallet#constructor","QBTCWallet#getChain","QBTCWallet#usesBitcoinInfrastructure","QBTCWallet#isAddressValid","QBTCWallet#setNodeUrl","QBTCWallet#setChainId","QBTCWallet#deriveAddress","QBTCWallet#toHex","QBTCWallet#fromHex","QBTCWallet#sha256d","QBTCWallet#serializeTransaction","txClean.outputs.map$argument_0","QBTCWallet#calculateTxid","QBTCWallet#generate","QBTCWallet#importKeys","QBTCWallet#getAddress","QBTCWallet#getAllExternalAddresses","QBTCWallet#getPublicKey","QBTCWallet#getPrivateKey","QBTCWallet#signMessage","QBTCWallet#verifySignature","QBTCWallet#fetchUtxos","QBTCWallet#createTransaction","targets.reduce$argument_0","QBTCWallet#broadcastTx","QBTCWallet#fetchTransactions","txs.map$argument_0","QBTCWallet#getUtxo","QBTCWallet#timeToRefreshBalance","QBTCWallet#timeToRefreshTransaction","QBTCWallet#getTransactions","QBTCWallet#allowOnchainAddress","QBTCWallet#allowSend","QBTCWallet#allowReceive","QBTCWallet#weOwnAddress","QBTCWallet#weOwnTransaction","txs.some$argument_0","QBTCWallet#isInvoiceGeneratedByWallet","QBTCWallet#allowSignVerifyMessage","QBTCWallet#fetchBalance","QBTCWallet#wasEverUsed","QBTCWallet#fetchUtxo","utxos.filter$argument_0","utxos.filter.map$argument_0","QBTCWallet#getID","QBTCWallet#getSecret","QBTCWallet#setSecret","QBTCWallet#exportWallet","QBTCWallet.fromExport"],"mappings":"AAA;OCyD;ECc;GDG;EEK;GFE;EGK;GHE;EIK;GJG;EKK;GLE;EMK;GNE;EOM;GPiB;EQK;GRE;ESK;GTE;EUK;GVG;EWM;4CCS;ODG;GXK;EaM;GbK;EcK;GdiC;EeK;GfK;EgBE;GhBE;EiBE;GjBE;EkBE;GlBE;EmBE;GnBE;EoBM;GpBkB;EqBM;GrBW;EsBK;GtBU;EuBK;uCCgB,uCD;GvBwF;EyBK;GzB8B;E0BM;0BCc;QDQ;G1BS;E4BI;G5BE;E6BO;G7BK;E8BO;G9BK;E+BG;G/BE;EgCE;GhCE;EiCE;GjCE;EkCE;GlCE;EmCE;GnCE;EoCE;oBCE,sBD;GpCC;EsCE;GtCE;EuCE;GvCE;EwCM;GxC0B;EyCK;GzCS;E0CK;gCCO,aD,ME;QFM;G1CK;E6CE;G7CK;E8CE;G9CE;E+CE;G/CG;EgDK;GhDS;EiDK;GjDgB"}},"type":"js/module"}]}