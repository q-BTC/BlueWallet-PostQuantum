{"dependencies":[{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":42,"index":42}},{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":42,"index":42}},{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":42,"index":42}},{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":42,"index":42}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function encryptByte(self, byteParam, decrypt) {\n    var pad;\n    var i = -1;\n    var len = 8;\n    var out = 0;\n    var bit, value;\n    while (++i < len) {\n      pad = self._cipher.encryptBlock(self._prev);\n      bit = byteParam & 1 << 7 - i ? 0x80 : 0;\n      value = pad[0] ^ bit;\n      out += (value & 0x80) >> i % 8;\n      self._prev = shiftIn(self._prev, decrypt ? bit : value);\n    }\n    return out;\n  }\n  function shiftIn(buffer, value) {\n    var len = buffer.length;\n    var i = -1;\n    var out = _$$_REQUIRE(_dependencyMap[0], \"safe-buffer\").Buffer.allocUnsafe(buffer.length);\n    buffer = _$$_REQUIRE(_dependencyMap[0], \"safe-buffer\").Buffer.concat([buffer, _$$_REQUIRE(_dependencyMap[0], \"safe-buffer\").Buffer.from([value])]);\n    while (++i < len) {\n      out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;\n    }\n    return out;\n  }\n  exports.encrypt = function (self, chunk, decrypt) {\n    var len = chunk.length;\n    var out = _$$_REQUIRE(_dependencyMap[0], \"safe-buffer\").Buffer.allocUnsafe(len);\n    var i = -1;\n    while (++i < len) {\n      out[i] = encryptByte(self, chunk[i], decrypt);\n    }\n    return out;\n  };\n});","lineCount":36,"map":[[2,2,3,0],[2,11,3,9,"encryptByte"],[2,22,3,20,"encryptByte"],[2,23,3,22,"self"],[2,27,3,26],[2,29,3,28,"byteParam"],[2,38,3,37],[2,40,3,39,"decrypt"],[2,47,3,46],[2,49,3,48],[3,4,4,2],[3,8,4,6,"pad"],[3,11,4,9],[4,4,5,2],[4,8,5,6,"i"],[4,9,5,7],[4,12,5,10],[4,13,5,11],[4,14,5,12],[5,4,6,2],[5,8,6,6,"len"],[5,11,6,9],[5,14,6,12],[5,15,6,13],[6,4,7,2],[6,8,7,6,"out"],[6,11,7,9],[6,14,7,12],[6,15,7,13],[7,4,8,2],[7,8,8,6,"bit"],[7,11,8,9],[7,13,8,11,"value"],[7,18,8,16],[8,4,9,2],[8,11,9,9],[8,13,9,11,"i"],[8,14,9,12],[8,17,9,15,"len"],[8,20,9,18],[8,22,9,20],[9,6,10,4,"pad"],[9,9,10,7],[9,12,10,10,"self"],[9,16,10,14],[9,17,10,15,"_cipher"],[9,24,10,22],[9,25,10,23,"encryptBlock"],[9,37,10,35],[9,38,10,36,"self"],[9,42,10,40],[9,43,10,41,"_prev"],[9,48,10,46],[9,49,10,47],[10,6,11,4,"bit"],[10,9,11,7],[10,12,11,11,"byteParam"],[10,21,11,20],[10,24,11,24],[10,25,11,25],[10,29,11,30],[10,30,11,31],[10,33,11,34,"i"],[10,34,11,37],[10,37,11,41],[10,41,11,45],[10,44,11,48],[10,45,11,49],[11,6,12,4,"value"],[11,11,12,9],[11,14,12,12,"pad"],[11,17,12,15],[11,18,12,16],[11,19,12,17],[11,20,12,18],[11,23,12,21,"bit"],[11,26,12,24],[12,6,13,4,"out"],[12,9,13,7],[12,13,13,12],[12,14,13,13,"value"],[12,19,13,18],[12,22,13,21],[12,26,13,25],[12,31,13,31,"i"],[12,32,13,32],[12,35,13,35],[12,36,13,38],[13,6,14,4,"self"],[13,10,14,8],[13,11,14,9,"_prev"],[13,16,14,14],[13,19,14,17,"shiftIn"],[13,26,14,24],[13,27,14,25,"self"],[13,31,14,29],[13,32,14,30,"_prev"],[13,37,14,35],[13,39,14,37,"decrypt"],[13,46,14,44],[13,49,14,47,"bit"],[13,52,14,50],[13,55,14,53,"value"],[13,60,14,58],[13,61,14,59],[14,4,15,2],[15,4,16,2],[15,11,16,9,"out"],[15,14,16,12],[16,2,17,0],[17,2,19,0],[17,11,19,9,"shiftIn"],[17,18,19,16,"shiftIn"],[17,19,19,18,"buffer"],[17,25,19,24],[17,27,19,26,"value"],[17,32,19,31],[17,34,19,33],[18,4,20,2],[18,8,20,6,"len"],[18,11,20,9],[18,14,20,12,"buffer"],[18,20,20,18],[18,21,20,19,"length"],[18,27,20,25],[19,4,21,2],[19,8,21,6,"i"],[19,9,21,7],[19,12,21,10],[19,13,21,11],[19,14,21,12],[20,4,22,2],[20,8,22,6,"out"],[20,11,22,9],[20,14,22,12,"_$$_REQUIRE"],[20,25,22,12],[20,26,22,12,"_dependencyMap"],[20,40,22,12],[20,60,22,12,"Buffer"],[20,66,22,12],[20,67,22,19,"allocUnsafe"],[20,78,22,30],[20,79,22,31,"buffer"],[20,85,22,37],[20,86,22,38,"length"],[20,92,22,44],[20,93,22,45],[21,4,23,2,"buffer"],[21,10,23,8],[21,13,23,11,"_$$_REQUIRE"],[21,24,23,11],[21,25,23,11,"_dependencyMap"],[21,39,23,11],[21,59,23,11,"Buffer"],[21,65,23,11],[21,66,23,18,"concat"],[21,72,23,24],[21,73,23,25],[21,74,23,26,"buffer"],[21,80,23,32],[21,82,23,34,"_$$_REQUIRE"],[21,93,23,34],[21,94,23,34,"_dependencyMap"],[21,108,23,34],[21,128,23,34,"Buffer"],[21,134,23,34],[21,135,23,41,"from"],[21,139,23,45],[21,140,23,46],[21,141,23,47,"value"],[21,146,23,52],[21,147,23,53],[21,148,23,54],[21,149,23,55],[21,150,23,56],[22,4,25,2],[22,11,25,9],[22,13,25,11,"i"],[22,14,25,12],[22,17,25,15,"len"],[22,20,25,18],[22,22,25,20],[23,6,26,4,"out"],[23,9,26,7],[23,10,26,8,"i"],[23,11,26,9],[23,12,26,10],[23,15,26,13,"buffer"],[23,21,26,19],[23,22,26,20,"i"],[23,23,26,21],[23,24,26,22],[23,28,26,26],[23,29,26,27],[23,32,26,30,"buffer"],[23,38,26,36],[23,39,26,37,"i"],[23,40,26,38],[23,43,26,41],[23,44,26,42],[23,45,26,43],[23,49,26,48],[23,50,26,50],[24,4,27,2],[25,4,29,2],[25,11,29,9,"out"],[25,14,29,12],[26,2,30,0],[27,2,32,0,"exports"],[27,9,32,7],[27,10,32,8,"encrypt"],[27,17,32,15],[27,20,32,18],[27,30,32,28,"self"],[27,34,32,32],[27,36,32,34,"chunk"],[27,41,32,39],[27,43,32,41,"decrypt"],[27,50,32,48],[27,52,32,50],[28,4,33,2],[28,8,33,6,"len"],[28,11,33,9],[28,14,33,12,"chunk"],[28,19,33,17],[28,20,33,18,"length"],[28,26,33,24],[29,4,34,2],[29,8,34,6,"out"],[29,11,34,9],[29,14,34,12,"_$$_REQUIRE"],[29,25,34,12],[29,26,34,12,"_dependencyMap"],[29,40,34,12],[29,60,34,12,"Buffer"],[29,66,34,12],[29,67,34,19,"allocUnsafe"],[29,78,34,30],[29,79,34,31,"len"],[29,82,34,34],[29,83,34,35],[30,4,35,2],[30,8,35,6,"i"],[30,9,35,7],[30,12,35,10],[30,13,35,11],[30,14,35,12],[31,4,37,2],[31,11,37,9],[31,13,37,11,"i"],[31,14,37,12],[31,17,37,15,"len"],[31,20,37,18],[31,22,37,20],[32,6,38,4,"out"],[32,9,38,7],[32,10,38,8,"i"],[32,11,38,9],[32,12,38,10],[32,15,38,13,"encryptByte"],[32,26,38,24],[32,27,38,25,"self"],[32,31,38,29],[32,33,38,31,"chunk"],[32,38,38,36],[32,39,38,37,"i"],[32,40,38,38],[32,41,38,39],[32,43,38,41,"decrypt"],[32,50,38,48],[32,51,38,49],[33,4,39,2],[34,4,41,2],[34,11,41,9,"out"],[34,14,41,12],[35,2,42,0],[35,3,42,1],[36,0,42,1],[36,3]],"functionMap":{"names":["<global>","encryptByte","shiftIn","exports.encrypt"],"mappings":"AAA;ACE;CDc;AEE;CFW;kBGE;CHU"}},"type":"js/module"}]}