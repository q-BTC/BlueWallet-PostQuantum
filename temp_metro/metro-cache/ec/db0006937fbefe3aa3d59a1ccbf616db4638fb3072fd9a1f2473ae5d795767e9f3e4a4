{"dependencies":[{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":13,"index":26},"end":{"line":2,"column":42,"index":55}},{"start":{"line":2,"column":13,"index":26},"end":{"line":2,"column":42,"index":55}},{"start":{"line":2,"column":13,"index":26},"end":{"line":2,"column":42,"index":55}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  // Number.MAX_SAFE_INTEGER\n  var MAX_SAFE_INTEGER = 9007199254740991;\n  function checkUInt53(n) {\n    if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0) throw new RangeError('value out of range');\n  }\n  function encode(number, buffer, offset) {\n    checkUInt53(number);\n    if (!buffer) buffer = _$$_REQUIRE(_dependencyMap[0], \"safe-buffer\").Buffer.allocUnsafe(encodingLength(number));\n    if (!_$$_REQUIRE(_dependencyMap[0], \"safe-buffer\").Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance');\n    if (!offset) offset = 0;\n\n    // 8 bit\n    if (number < 0xfd) {\n      buffer.writeUInt8(number, offset);\n      encode.bytes = 1;\n\n      // 16 bit\n    } else if (number <= 0xffff) {\n      buffer.writeUInt8(0xfd, offset);\n      buffer.writeUInt16LE(number, offset + 1);\n      encode.bytes = 3;\n\n      // 32 bit\n    } else if (number <= 0xffffffff) {\n      buffer.writeUInt8(0xfe, offset);\n      buffer.writeUInt32LE(number, offset + 1);\n      encode.bytes = 5;\n\n      // 64 bit\n    } else {\n      buffer.writeUInt8(0xff, offset);\n      buffer.writeUInt32LE(number >>> 0, offset + 1);\n      buffer.writeUInt32LE(number / 0x100000000 | 0, offset + 5);\n      encode.bytes = 9;\n    }\n    return buffer;\n  }\n  function decode(buffer, offset) {\n    if (!_$$_REQUIRE(_dependencyMap[0], \"safe-buffer\").Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance');\n    if (!offset) offset = 0;\n    var first = buffer.readUInt8(offset);\n\n    // 8 bit\n    if (first < 0xfd) {\n      decode.bytes = 1;\n      return first;\n\n      // 16 bit\n    } else if (first === 0xfd) {\n      decode.bytes = 3;\n      return buffer.readUInt16LE(offset + 1);\n\n      // 32 bit\n    } else if (first === 0xfe) {\n      decode.bytes = 5;\n      return buffer.readUInt32LE(offset + 1);\n\n      // 64 bit\n    } else {\n      decode.bytes = 9;\n      var lo = buffer.readUInt32LE(offset + 1);\n      var hi = buffer.readUInt32LE(offset + 5);\n      var number = hi * 0x0100000000 + lo;\n      checkUInt53(number);\n      return number;\n    }\n  }\n  function encodingLength(number) {\n    checkUInt53(number);\n    return number < 0xfd ? 1 : number <= 0xffff ? 3 : number <= 0xffffffff ? 5 : 9;\n  }\n  module.exports = {\n    encode: encode,\n    decode: decode,\n    encodingLength: encodingLength\n  };\n});","lineCount":80,"map":[[2,2,1,0],[2,14,1,12],[4,2,4,0],[5,2,5,0],[5,6,5,4,"MAX_SAFE_INTEGER"],[5,22,5,20],[5,25,5,23],[5,41,5,39],[6,2,7,0],[6,11,7,9,"checkUInt53"],[6,22,7,20,"checkUInt53"],[6,23,7,22,"n"],[6,24,7,23],[6,26,7,25],[7,4,8,2],[7,8,8,6,"n"],[7,9,8,7],[7,12,8,10],[7,13,8,11],[7,17,8,15,"n"],[7,18,8,16],[7,21,8,19,"MAX_SAFE_INTEGER"],[7,37,8,35],[7,41,8,39,"n"],[7,42,8,40],[7,45,8,43],[7,46,8,44],[7,51,8,49],[7,52,8,50],[7,54,8,52],[7,60,8,58],[7,64,8,62,"RangeError"],[7,74,8,72],[7,75,8,73],[7,95,8,93],[7,96,8,94],[8,2,9,0],[9,2,11,0],[9,11,11,9,"encode"],[9,17,11,15,"encode"],[9,18,11,17,"number"],[9,24,11,23],[9,26,11,25,"buffer"],[9,32,11,31],[9,34,11,33,"offset"],[9,40,11,39],[9,42,11,41],[10,4,12,2,"checkUInt53"],[10,15,12,13],[10,16,12,14,"number"],[10,22,12,20],[10,23,12,21],[11,4,14,2],[11,8,14,6],[11,9,14,7,"buffer"],[11,15,14,13],[11,17,14,15,"buffer"],[11,23,14,21],[11,26,14,24,"_$$_REQUIRE"],[11,37,14,24],[11,38,14,24,"_dependencyMap"],[11,52,14,24],[11,72,14,24,"Buffer"],[11,78,14,24],[11,79,14,31,"allocUnsafe"],[11,90,14,42],[11,91,14,43,"encodingLength"],[11,105,14,57],[11,106,14,58,"number"],[11,112,14,64],[11,113,14,65],[11,114,14,66],[12,4,15,2],[12,8,15,6],[12,9,15,7,"_$$_REQUIRE"],[12,20,15,7],[12,21,15,7,"_dependencyMap"],[12,35,15,7],[12,55,15,7,"Buffer"],[12,61,15,7],[12,62,15,14,"isBuffer"],[12,70,15,22],[12,71,15,23,"buffer"],[12,77,15,29],[12,78,15,30],[12,80,15,32],[12,86,15,38],[12,90,15,42,"TypeError"],[12,99,15,51],[12,100,15,52],[12,134,15,86],[12,135,15,87],[13,4,16,2],[13,8,16,6],[13,9,16,7,"offset"],[13,15,16,13],[13,17,16,15,"offset"],[13,23,16,21],[13,26,16,24],[13,27,16,25],[15,4,18,2],[16,4,19,2],[16,8,19,6,"number"],[16,14,19,12],[16,17,19,15],[16,21,19,19],[16,23,19,21],[17,6,20,4,"buffer"],[17,12,20,10],[17,13,20,11,"writeUInt8"],[17,23,20,21],[17,24,20,22,"number"],[17,30,20,28],[17,32,20,30,"offset"],[17,38,20,36],[17,39,20,37],[18,6,21,4,"encode"],[18,12,21,10],[18,13,21,11,"bytes"],[18,18,21,16],[18,21,21,19],[18,22,21,20],[20,6,23,2],[21,4,24,2],[21,5,24,3],[21,11,24,9],[21,15,24,13,"number"],[21,21,24,19],[21,25,24,23],[21,31,24,29],[21,33,24,31],[22,6,25,4,"buffer"],[22,12,25,10],[22,13,25,11,"writeUInt8"],[22,23,25,21],[22,24,25,22],[22,28,25,26],[22,30,25,28,"offset"],[22,36,25,34],[22,37,25,35],[23,6,26,4,"buffer"],[23,12,26,10],[23,13,26,11,"writeUInt16LE"],[23,26,26,24],[23,27,26,25,"number"],[23,33,26,31],[23,35,26,33,"offset"],[23,41,26,39],[23,44,26,42],[23,45,26,43],[23,46,26,44],[24,6,27,4,"encode"],[24,12,27,10],[24,13,27,11,"bytes"],[24,18,27,16],[24,21,27,19],[24,22,27,20],[26,6,29,2],[27,4,30,2],[27,5,30,3],[27,11,30,9],[27,15,30,13,"number"],[27,21,30,19],[27,25,30,23],[27,35,30,33],[27,37,30,35],[28,6,31,4,"buffer"],[28,12,31,10],[28,13,31,11,"writeUInt8"],[28,23,31,21],[28,24,31,22],[28,28,31,26],[28,30,31,28,"offset"],[28,36,31,34],[28,37,31,35],[29,6,32,4,"buffer"],[29,12,32,10],[29,13,32,11,"writeUInt32LE"],[29,26,32,24],[29,27,32,25,"number"],[29,33,32,31],[29,35,32,33,"offset"],[29,41,32,39],[29,44,32,42],[29,45,32,43],[29,46,32,44],[30,6,33,4,"encode"],[30,12,33,10],[30,13,33,11,"bytes"],[30,18,33,16],[30,21,33,19],[30,22,33,20],[32,6,35,2],[33,4,36,2],[33,5,36,3],[33,11,36,9],[34,6,37,4,"buffer"],[34,12,37,10],[34,13,37,11,"writeUInt8"],[34,23,37,21],[34,24,37,22],[34,28,37,26],[34,30,37,28,"offset"],[34,36,37,34],[34,37,37,35],[35,6,38,4,"buffer"],[35,12,38,10],[35,13,38,11,"writeUInt32LE"],[35,26,38,24],[35,27,38,25,"number"],[35,33,38,31],[35,38,38,36],[35,39,38,37],[35,41,38,39,"offset"],[35,47,38,45],[35,50,38,48],[35,51,38,49],[35,52,38,50],[36,6,39,4,"buffer"],[36,12,39,10],[36,13,39,11,"writeUInt32LE"],[36,26,39,24],[36,27,39,26,"number"],[36,33,39,32],[36,36,39,35],[36,47,39,46],[36,50,39,50],[36,51,39,51],[36,53,39,53,"offset"],[36,59,39,59],[36,62,39,62],[36,63,39,63],[36,64,39,64],[37,6,40,4,"encode"],[37,12,40,10],[37,13,40,11,"bytes"],[37,18,40,16],[37,21,40,19],[37,22,40,20],[38,4,41,2],[39,4,43,2],[39,11,43,9,"buffer"],[39,17,43,15],[40,2,44,0],[41,2,46,0],[41,11,46,9,"decode"],[41,17,46,15,"decode"],[41,18,46,17,"buffer"],[41,24,46,23],[41,26,46,25,"offset"],[41,32,46,31],[41,34,46,33],[42,4,47,2],[42,8,47,6],[42,9,47,7,"_$$_REQUIRE"],[42,20,47,7],[42,21,47,7,"_dependencyMap"],[42,35,47,7],[42,55,47,7,"Buffer"],[42,61,47,7],[42,62,47,14,"isBuffer"],[42,70,47,22],[42,71,47,23,"buffer"],[42,77,47,29],[42,78,47,30],[42,80,47,32],[42,86,47,38],[42,90,47,42,"TypeError"],[42,99,47,51],[42,100,47,52],[42,134,47,86],[42,135,47,87],[43,4,48,2],[43,8,48,6],[43,9,48,7,"offset"],[43,15,48,13],[43,17,48,15,"offset"],[43,23,48,21],[43,26,48,24],[43,27,48,25],[44,4,50,2],[44,8,50,6,"first"],[44,13,50,11],[44,16,50,14,"buffer"],[44,22,50,20],[44,23,50,21,"readUInt8"],[44,32,50,30],[44,33,50,31,"offset"],[44,39,50,37],[44,40,50,38],[46,4,52,2],[47,4,53,2],[47,8,53,6,"first"],[47,13,53,11],[47,16,53,14],[47,20,53,18],[47,22,53,20],[48,6,54,4,"decode"],[48,12,54,10],[48,13,54,11,"bytes"],[48,18,54,16],[48,21,54,19],[48,22,54,20],[49,6,55,4],[49,13,55,11,"first"],[49,18,55,16],[51,6,57,2],[52,4,58,2],[52,5,58,3],[52,11,58,9],[52,15,58,13,"first"],[52,20,58,18],[52,25,58,23],[52,29,58,27],[52,31,58,29],[53,6,59,4,"decode"],[53,12,59,10],[53,13,59,11,"bytes"],[53,18,59,16],[53,21,59,19],[53,22,59,20],[54,6,60,4],[54,13,60,11,"buffer"],[54,19,60,17],[54,20,60,18,"readUInt16LE"],[54,32,60,30],[54,33,60,31,"offset"],[54,39,60,37],[54,42,60,40],[54,43,60,41],[54,44,60,42],[56,6,62,2],[57,4,63,2],[57,5,63,3],[57,11,63,9],[57,15,63,13,"first"],[57,20,63,18],[57,25,63,23],[57,29,63,27],[57,31,63,29],[58,6,64,4,"decode"],[58,12,64,10],[58,13,64,11,"bytes"],[58,18,64,16],[58,21,64,19],[58,22,64,20],[59,6,65,4],[59,13,65,11,"buffer"],[59,19,65,17],[59,20,65,18,"readUInt32LE"],[59,32,65,30],[59,33,65,31,"offset"],[59,39,65,37],[59,42,65,40],[59,43,65,41],[59,44,65,42],[61,6,67,2],[62,4,68,2],[62,5,68,3],[62,11,68,9],[63,6,69,4,"decode"],[63,12,69,10],[63,13,69,11,"bytes"],[63,18,69,16],[63,21,69,19],[63,22,69,20],[64,6,70,4],[64,10,70,8,"lo"],[64,12,70,10],[64,15,70,13,"buffer"],[64,21,70,19],[64,22,70,20,"readUInt32LE"],[64,34,70,32],[64,35,70,33,"offset"],[64,41,70,39],[64,44,70,42],[64,45,70,43],[64,46,70,44],[65,6,71,4],[65,10,71,8,"hi"],[65,12,71,10],[65,15,71,13,"buffer"],[65,21,71,19],[65,22,71,20,"readUInt32LE"],[65,34,71,32],[65,35,71,33,"offset"],[65,41,71,39],[65,44,71,42],[65,45,71,43],[65,46,71,44],[66,6,72,4],[66,10,72,8,"number"],[66,16,72,14],[66,19,72,17,"hi"],[66,21,72,19],[66,24,72,22],[66,36,72,34],[66,39,72,37,"lo"],[66,41,72,39],[67,6,73,4,"checkUInt53"],[67,17,73,15],[67,18,73,16,"number"],[67,24,73,22],[67,25,73,23],[68,6,75,4],[68,13,75,11,"number"],[68,19,75,17],[69,4,76,2],[70,2,77,0],[71,2,79,0],[71,11,79,9,"encodingLength"],[71,25,79,23,"encodingLength"],[71,26,79,25,"number"],[71,32,79,31],[71,34,79,33],[72,4,80,2,"checkUInt53"],[72,15,80,13],[72,16,80,14,"number"],[72,22,80,20],[72,23,80,21],[73,4,82,2],[73,11,83,4,"number"],[73,17,83,10],[73,20,83,13],[73,24,83,17],[73,27,83,20],[73,28,83,21],[73,31,84,8,"number"],[73,37,84,14],[73,41,84,18],[73,47,84,24],[73,50,84,27],[73,51,84,28],[73,54,85,10,"number"],[73,60,85,16],[73,64,85,20],[73,74,85,30],[73,77,85,33],[73,78,85,34],[73,81,86,12],[73,82,86,13],[74,2,88,0],[75,2,90,0,"module"],[75,8,90,6],[75,9,90,7,"exports"],[75,16,90,14],[75,19,90,17],[76,4,90,19,"encode"],[76,10,90,25],[76,12,90,27,"encode"],[76,18,90,33],[77,4,90,35,"decode"],[77,10,90,41],[77,12,90,43,"decode"],[77,18,90,49],[78,4,90,51,"encodingLength"],[78,18,90,65],[78,20,90,67,"encodingLength"],[79,2,90,82],[79,3,90,83],[80,0,90,83],[80,3]],"functionMap":{"names":["<global>","checkUInt53","encode","decode","encodingLength"],"mappings":"AAA;ACM;CDE;AEE;CFiC;AGE;CH+B;AIE;CJS"}},"type":"js/module"}]}