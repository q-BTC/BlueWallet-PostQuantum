{"dependencies":[{"name":"css-what","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":17,"index":124},"end":{"line":4,"column":36,"index":143}},{"start":{"line":4,"column":17,"index":124},"end":{"line":4,"column":36,"index":143}},{"start":{"line":4,"column":17,"index":124},"end":{"line":4,"column":36,"index":143}},{"start":{"line":4,"column":17,"index":124},"end":{"line":4,"column":36,"index":143}},{"start":{"line":4,"column":17,"index":124},"end":{"line":4,"column":36,"index":143}},{"start":{"line":4,"column":17,"index":124},"end":{"line":4,"column":36,"index":143}},{"start":{"line":4,"column":17,"index":124},"end":{"line":4,"column":36,"index":143}},{"start":{"line":4,"column":17,"index":124},"end":{"line":4,"column":36,"index":143}},{"start":{"line":4,"column":17,"index":124},"end":{"line":4,"column":36,"index":143}},{"start":{"line":4,"column":17,"index":124},"end":{"line":4,"column":36,"index":143}},{"start":{"line":4,"column":17,"index":124},"end":{"line":4,"column":36,"index":143}},{"start":{"line":4,"column":17,"index":124},"end":{"line":4,"column":36,"index":143}},{"start":{"line":4,"column":17,"index":124},"end":{"line":4,"column":36,"index":143}}],"key":"bQfAmQeFJ9O0Wdw6KYJ+ahojAvw="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.isTraversal = void 0;\n  var procedure = new Map([[_$$_REQUIRE(_dependencyMap[0], \"css-what\").SelectorType.Universal, 50], [_$$_REQUIRE(_dependencyMap[0], \"css-what\").SelectorType.Tag, 30], [_$$_REQUIRE(_dependencyMap[0], \"css-what\").SelectorType.Attribute, 1], [_$$_REQUIRE(_dependencyMap[0], \"css-what\").SelectorType.Pseudo, 0]]);\n  function isTraversal(token) {\n    return !procedure.has(token.type);\n  }\n  exports.isTraversal = isTraversal;\n  var attributes = new Map([[_$$_REQUIRE(_dependencyMap[0], \"css-what\").AttributeAction.Exists, 10], [_$$_REQUIRE(_dependencyMap[0], \"css-what\").AttributeAction.Equals, 8], [_$$_REQUIRE(_dependencyMap[0], \"css-what\").AttributeAction.Not, 7], [_$$_REQUIRE(_dependencyMap[0], \"css-what\").AttributeAction.Start, 6], [_$$_REQUIRE(_dependencyMap[0], \"css-what\").AttributeAction.End, 6], [_$$_REQUIRE(_dependencyMap[0], \"css-what\").AttributeAction.Any, 5]]);\n  /**\n   * Sort the parts of the passed selector,\n   * as there is potential for optimization\n   * (some types of selectors are faster than others)\n   *\n   * @param arr Selector to sort\n   */\n  function sortByProcedure(arr) {\n    var procs = arr.map(getProcedure);\n    for (var i = 1; i < arr.length; i++) {\n      var procNew = procs[i];\n      if (procNew < 0) continue;\n      for (var j = i - 1; j >= 0 && procNew < procs[j]; j--) {\n        var token = arr[j + 1];\n        arr[j + 1] = arr[j];\n        arr[j] = token;\n        procs[j + 1] = procs[j];\n        procs[j] = procNew;\n      }\n    }\n  }\n  exports.default = sortByProcedure;\n  function getProcedure(token) {\n    var _a, _b;\n    var proc = (_a = procedure.get(token.type)) !== null && _a !== void 0 ? _a : -1;\n    if (token.type === _$$_REQUIRE(_dependencyMap[0], \"css-what\").SelectorType.Attribute) {\n      proc = (_b = attributes.get(token.action)) !== null && _b !== void 0 ? _b : 4;\n      if (token.action === _$$_REQUIRE(_dependencyMap[0], \"css-what\").AttributeAction.Equals && token.name === \"id\") {\n        // Prefer ID selectors (eg. #ID)\n        proc = 9;\n      }\n      if (token.ignoreCase) {\n        /*\n         * IgnoreCase adds some overhead, prefer \"normal\" token\n         * this is a binary operation, to ensure it's still an int\n         */\n        proc >>= 1;\n      }\n    } else if (token.type === _$$_REQUIRE(_dependencyMap[0], \"css-what\").SelectorType.Pseudo) {\n      if (!token.data) {\n        proc = 3;\n      } else if (token.name === \"has\" || token.name === \"contains\") {\n        proc = 0; // Expensive in any case\n      } else if (Array.isArray(token.data)) {\n        // Eg. :matches, :not\n        proc = Math.min.apply(Math, token.data.map(function (d) {\n          return Math.min.apply(Math, d.map(getProcedure));\n        }));\n        // If we have traversals, try to avoid executing this selector\n        if (proc < 0) {\n          proc = 0;\n        }\n      } else {\n        proc = 2;\n      }\n    }\n    return proc;\n  }\n});","lineCount":72,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"isTraversal"],[7,21,3,19],[7,24,3,22],[7,29,3,27],[7,30,3,28],[8,2,5,0],[8,6,5,4,"procedure"],[8,15,5,13],[8,18,5,16],[8,22,5,20,"Map"],[8,25,5,23],[8,26,5,24],[8,27,6,4],[8,28,6,5,"_$$_REQUIRE"],[8,39,6,5],[8,40,6,5,"_dependencyMap"],[8,54,6,5],[8,71,6,16,"SelectorType"],[8,83,6,28],[8,84,6,29,"Universal"],[8,93,6,38],[8,95,6,40],[8,97,6,42],[8,98,6,43],[8,100,7,4],[8,101,7,5,"_$$_REQUIRE"],[8,112,7,5],[8,113,7,5,"_dependencyMap"],[8,127,7,5],[8,144,7,16,"SelectorType"],[8,156,7,28],[8,157,7,29,"Tag"],[8,160,7,32],[8,162,7,34],[8,164,7,36],[8,165,7,37],[8,167,8,4],[8,168,8,5,"_$$_REQUIRE"],[8,179,8,5],[8,180,8,5,"_dependencyMap"],[8,194,8,5],[8,211,8,16,"SelectorType"],[8,223,8,28],[8,224,8,29,"Attribute"],[8,233,8,38],[8,235,8,40],[8,236,8,41],[8,237,8,42],[8,239,9,4],[8,240,9,5,"_$$_REQUIRE"],[8,251,9,5],[8,252,9,5,"_dependencyMap"],[8,266,9,5],[8,283,9,16,"SelectorType"],[8,295,9,28],[8,296,9,29,"Pseudo"],[8,302,9,35],[8,304,9,37],[8,305,9,38],[8,306,9,39],[8,307,10,1],[8,308,10,2],[9,2,11,0],[9,11,11,9,"isTraversal"],[9,22,11,20,"isTraversal"],[9,23,11,21,"token"],[9,28,11,26],[9,30,11,28],[10,4,12,4],[10,11,12,11],[10,12,12,12,"procedure"],[10,21,12,21],[10,22,12,22,"has"],[10,25,12,25],[10,26,12,26,"token"],[10,31,12,31],[10,32,12,32,"type"],[10,36,12,36],[10,37,12,37],[11,2,13,0],[12,2,14,0,"exports"],[12,9,14,7],[12,10,14,8,"isTraversal"],[12,21,14,19],[12,24,14,22,"isTraversal"],[12,35,14,33],[13,2,15,0],[13,6,15,4,"attributes"],[13,16,15,14],[13,19,15,17],[13,23,15,21,"Map"],[13,26,15,24],[13,27,15,25],[13,28,16,4],[13,29,16,5,"_$$_REQUIRE"],[13,40,16,5],[13,41,16,5,"_dependencyMap"],[13,55,16,5],[13,72,16,16,"AttributeAction"],[13,87,16,31],[13,88,16,32,"Exists"],[13,94,16,38],[13,96,16,40],[13,98,16,42],[13,99,16,43],[13,101,17,4],[13,102,17,5,"_$$_REQUIRE"],[13,113,17,5],[13,114,17,5,"_dependencyMap"],[13,128,17,5],[13,145,17,16,"AttributeAction"],[13,160,17,31],[13,161,17,32,"Equals"],[13,167,17,38],[13,169,17,40],[13,170,17,41],[13,171,17,42],[13,173,18,4],[13,174,18,5,"_$$_REQUIRE"],[13,185,18,5],[13,186,18,5,"_dependencyMap"],[13,200,18,5],[13,217,18,16,"AttributeAction"],[13,232,18,31],[13,233,18,32,"Not"],[13,236,18,35],[13,238,18,37],[13,239,18,38],[13,240,18,39],[13,242,19,4],[13,243,19,5,"_$$_REQUIRE"],[13,254,19,5],[13,255,19,5,"_dependencyMap"],[13,269,19,5],[13,286,19,16,"AttributeAction"],[13,301,19,31],[13,302,19,32,"Start"],[13,307,19,37],[13,309,19,39],[13,310,19,40],[13,311,19,41],[13,313,20,4],[13,314,20,5,"_$$_REQUIRE"],[13,325,20,5],[13,326,20,5,"_dependencyMap"],[13,340,20,5],[13,357,20,16,"AttributeAction"],[13,372,20,31],[13,373,20,32,"End"],[13,376,20,35],[13,378,20,37],[13,379,20,38],[13,380,20,39],[13,382,21,4],[13,383,21,5,"_$$_REQUIRE"],[13,394,21,5],[13,395,21,5,"_dependencyMap"],[13,409,21,5],[13,426,21,16,"AttributeAction"],[13,441,21,31],[13,442,21,32,"Any"],[13,445,21,35],[13,447,21,37],[13,448,21,38],[13,449,21,39],[13,450,22,1],[13,451,22,2],[14,2,23,0],[15,0,24,0],[16,0,25,0],[17,0,26,0],[18,0,27,0],[19,0,28,0],[20,0,29,0],[21,2,30,0],[21,11,30,9,"sortByProcedure"],[21,26,30,24,"sortByProcedure"],[21,27,30,25,"arr"],[21,30,30,28],[21,32,30,30],[22,4,31,4],[22,8,31,8,"procs"],[22,13,31,13],[22,16,31,16,"arr"],[22,19,31,19],[22,20,31,20,"map"],[22,23,31,23],[22,24,31,24,"getProcedure"],[22,36,31,36],[22,37,31,37],[23,4,32,4],[23,9,32,9],[23,13,32,13,"i"],[23,14,32,14],[23,17,32,17],[23,18,32,18],[23,20,32,20,"i"],[23,21,32,21],[23,24,32,24,"arr"],[23,27,32,27],[23,28,32,28,"length"],[23,34,32,34],[23,36,32,36,"i"],[23,37,32,37],[23,39,32,39],[23,41,32,41],[24,6,33,8],[24,10,33,12,"procNew"],[24,17,33,19],[24,20,33,22,"procs"],[24,25,33,27],[24,26,33,28,"i"],[24,27,33,29],[24,28,33,30],[25,6,34,8],[25,10,34,12,"procNew"],[25,17,34,19],[25,20,34,22],[25,21,34,23],[25,23,35,12],[26,6,36,8],[26,11,36,13],[26,15,36,17,"j"],[26,16,36,18],[26,19,36,21,"i"],[26,20,36,22],[26,23,36,25],[26,24,36,26],[26,26,36,28,"j"],[26,27,36,29],[26,31,36,33],[26,32,36,34],[26,36,36,38,"procNew"],[26,43,36,45],[26,46,36,48,"procs"],[26,51,36,53],[26,52,36,54,"j"],[26,53,36,55],[26,54,36,56],[26,56,36,58,"j"],[26,57,36,59],[26,59,36,61],[26,61,36,63],[27,8,37,12],[27,12,37,16,"token"],[27,17,37,21],[27,20,37,24,"arr"],[27,23,37,27],[27,24,37,28,"j"],[27,25,37,29],[27,28,37,32],[27,29,37,33],[27,30,37,34],[28,8,38,12,"arr"],[28,11,38,15],[28,12,38,16,"j"],[28,13,38,17],[28,16,38,20],[28,17,38,21],[28,18,38,22],[28,21,38,25,"arr"],[28,24,38,28],[28,25,38,29,"j"],[28,26,38,30],[28,27,38,31],[29,8,39,12,"arr"],[29,11,39,15],[29,12,39,16,"j"],[29,13,39,17],[29,14,39,18],[29,17,39,21,"token"],[29,22,39,26],[30,8,40,12,"procs"],[30,13,40,17],[30,14,40,18,"j"],[30,15,40,19],[30,18,40,22],[30,19,40,23],[30,20,40,24],[30,23,40,27,"procs"],[30,28,40,32],[30,29,40,33,"j"],[30,30,40,34],[30,31,40,35],[31,8,41,12,"procs"],[31,13,41,17],[31,14,41,18,"j"],[31,15,41,19],[31,16,41,20],[31,19,41,23,"procNew"],[31,26,41,30],[32,6,42,8],[33,4,43,4],[34,2,44,0],[35,2,45,0,"exports"],[35,9,45,7],[35,10,45,8,"default"],[35,17,45,15],[35,20,45,18,"sortByProcedure"],[35,35,45,33],[36,2,46,0],[36,11,46,9,"getProcedure"],[36,23,46,21,"getProcedure"],[36,24,46,22,"token"],[36,29,46,27],[36,31,46,29],[37,4,47,4],[37,8,47,8,"_a"],[37,10,47,10],[37,12,47,12,"_b"],[37,14,47,14],[38,4,48,4],[38,8,48,8,"proc"],[38,12,48,12],[38,15,48,15],[38,16,48,16,"_a"],[38,18,48,18],[38,21,48,21,"procedure"],[38,30,48,30],[38,31,48,31,"get"],[38,34,48,34],[38,35,48,35,"token"],[38,40,48,40],[38,41,48,41,"type"],[38,45,48,45],[38,46,48,46],[38,52,48,52],[38,56,48,56],[38,60,48,60,"_a"],[38,62,48,62],[38,67,48,67],[38,72,48,72],[38,73,48,73],[38,76,48,76,"_a"],[38,78,48,78],[38,81,48,81],[38,82,48,82],[38,83,48,83],[39,4,49,4],[39,8,49,8,"token"],[39,13,49,13],[39,14,49,14,"type"],[39,18,49,18],[39,23,49,23,"_$$_REQUIRE"],[39,34,49,23],[39,35,49,23,"_dependencyMap"],[39,49,49,23],[39,66,49,34,"SelectorType"],[39,78,49,46],[39,79,49,47,"Attribute"],[39,88,49,56],[39,90,49,58],[40,6,50,8,"proc"],[40,10,50,12],[40,13,50,15],[40,14,50,16,"_b"],[40,16,50,18],[40,19,50,21,"attributes"],[40,29,50,31],[40,30,50,32,"get"],[40,33,50,35],[40,34,50,36,"token"],[40,39,50,41],[40,40,50,42,"action"],[40,46,50,48],[40,47,50,49],[40,53,50,55],[40,57,50,59],[40,61,50,63,"_b"],[40,63,50,65],[40,68,50,70],[40,73,50,75],[40,74,50,76],[40,77,50,79,"_b"],[40,79,50,81],[40,82,50,84],[40,83,50,85],[41,6,51,8],[41,10,51,12,"token"],[41,15,51,17],[41,16,51,18,"action"],[41,22,51,24],[41,27,51,29,"_$$_REQUIRE"],[41,38,51,29],[41,39,51,29,"_dependencyMap"],[41,53,51,29],[41,70,51,40,"AttributeAction"],[41,85,51,55],[41,86,51,56,"Equals"],[41,92,51,62],[41,96,51,66,"token"],[41,101,51,71],[41,102,51,72,"name"],[41,106,51,76],[41,111,51,81],[41,115,51,85],[41,117,51,87],[42,8,52,12],[43,8,53,12,"proc"],[43,12,53,16],[43,15,53,19],[43,16,53,20],[44,6,54,8],[45,6,55,8],[45,10,55,12,"token"],[45,15,55,17],[45,16,55,18,"ignoreCase"],[45,26,55,28],[45,28,55,30],[46,8,56,12],[47,0,57,0],[48,0,58,0],[49,0,59,0],[50,8,60,12,"proc"],[50,12,60,16],[50,17,60,21],[50,18,60,22],[51,6,61,8],[52,4,62,4],[52,5,62,5],[52,11,63,9],[52,15,63,13,"token"],[52,20,63,18],[52,21,63,19,"type"],[52,25,63,23],[52,30,63,28,"_$$_REQUIRE"],[52,41,63,28],[52,42,63,28,"_dependencyMap"],[52,56,63,28],[52,73,63,39,"SelectorType"],[52,85,63,51],[52,86,63,52,"Pseudo"],[52,92,63,58],[52,94,63,60],[53,6,64,8],[53,10,64,12],[53,11,64,13,"token"],[53,16,64,18],[53,17,64,19,"data"],[53,21,64,23],[53,23,64,25],[54,8,65,12,"proc"],[54,12,65,16],[54,15,65,19],[54,16,65,20],[55,6,66,8],[55,7,66,9],[55,13,67,13],[55,17,67,17,"token"],[55,22,67,22],[55,23,67,23,"name"],[55,27,67,27],[55,32,67,32],[55,37,67,37],[55,41,67,41,"token"],[55,46,67,46],[55,47,67,47,"name"],[55,51,67,51],[55,56,67,56],[55,66,67,66],[55,68,67,68],[56,8,68,12,"proc"],[56,12,68,16],[56,15,68,19],[56,16,68,20],[56,17,68,21],[56,18,68,22],[57,6,69,8],[57,7,69,9],[57,13,70,13],[57,17,70,17,"Array"],[57,22,70,22],[57,23,70,23,"isArray"],[57,30,70,30],[57,31,70,31,"token"],[57,36,70,36],[57,37,70,37,"data"],[57,41,70,41],[57,42,70,42],[57,44,70,44],[58,8,71,12],[59,8,72,12,"proc"],[59,12,72,16],[59,15,72,19,"Math"],[59,19,72,23],[59,20,72,24,"min"],[59,23,72,27],[59,24,72,28,"apply"],[59,29,72,33],[59,30,72,34,"Math"],[59,34,72,38],[59,36,72,40,"token"],[59,41,72,45],[59,42,72,46,"data"],[59,46,72,50],[59,47,72,51,"map"],[59,50,72,54],[59,51,72,55],[59,61,72,65,"d"],[59,62,72,66],[59,64,72,68],[60,10,72,70],[60,17,72,77,"Math"],[60,21,72,81],[60,22,72,82,"min"],[60,25,72,85],[60,26,72,86,"apply"],[60,31,72,91],[60,32,72,92,"Math"],[60,36,72,96],[60,38,72,98,"d"],[60,39,72,99],[60,40,72,100,"map"],[60,43,72,103],[60,44,72,104,"getProcedure"],[60,56,72,116],[60,57,72,117],[60,58,72,118],[61,8,72,120],[61,9,72,121],[61,10,72,122],[61,11,72,123],[62,8,73,12],[63,8,74,12],[63,12,74,16,"proc"],[63,16,74,20],[63,19,74,23],[63,20,74,24],[63,22,74,26],[64,10,75,16,"proc"],[64,14,75,20],[64,17,75,23],[64,18,75,24],[65,8,76,12],[66,6,77,8],[66,7,77,9],[66,13,78,13],[67,8,79,12,"proc"],[67,12,79,16],[67,15,79,19],[67,16,79,20],[68,6,80,8],[69,4,81,4],[70,4,82,4],[70,11,82,11,"proc"],[70,15,82,15],[71,2,83,0],[72,0,83,1],[72,3]],"functionMap":{"names":["<global>","isTraversal","sortByProcedure","getProcedure","token.data.map$argument_0"],"mappings":"AAA;ACU;CDE;AEiB;CFc;AGE;uDC0B,kED;CHW"}},"type":"js/module"}]}