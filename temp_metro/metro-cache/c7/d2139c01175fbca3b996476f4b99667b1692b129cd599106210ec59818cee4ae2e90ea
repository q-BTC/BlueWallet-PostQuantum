{"dependencies":[{"name":"./utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":22,"index":425},"end":{"line":11,"column":54,"index":457}}],"key":"Arg6QRuIuy5D/jfcnxX1qJiHjX8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Alignment pattern are fixed reference pattern in defined positions\n   * in a matrix symbology, which enables the decode software to re-synchronise\n   * the coordinate mapping of the image modules in the event of moderate amounts\n   * of distortion of the image.\n   *\n   * Alignment patterns are present only in QR Code symbols of version 2 or larger\n   * and their number depends on the symbol version.\n   */\n\n  /**\n   * Calculate the row/column coordinates of the center module of each alignment pattern\n   * for the specified QR Code version.\n   *\n   * The alignment patterns are positioned symmetrically on either side of the diagonal\n   * running from the top left corner of the symbol to the bottom right corner.\n   *\n   * Since positions are simmetrical only half of the coordinates are returned.\n   * Each item of the array will represent in turn the x and y coordinate.\n   * @see {@link getPositions}\n   *\n   * @param  {Number} version QR Code version\n   * @return {Array}          Array of coordinate\n   */\n  exports.getRowColCoords = function getRowColCoords(version) {\n    if (version === 1) return [];\n    var posCount = Math.floor(version / 7) + 2;\n    var size = _$$_REQUIRE(_dependencyMap[0], \"./utils\").getSymbolSize(version);\n    var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;\n    var positions = [size - 7]; // Last coord is always (size - 7)\n\n    for (var i = 1; i < posCount - 1; i++) {\n      positions[i] = positions[i - 1] - intervals;\n    }\n    positions.push(6); // First coord is always 6\n\n    return positions.reverse();\n  };\n\n  /**\n   * Returns an array containing the positions of each alignment pattern.\n   * Each array's element represent the center point of the pattern as (x, y) coordinates\n   *\n   * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}\n   * and filtering out the items that overlaps with finder pattern\n   *\n   * @example\n   * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.\n   * The alignment patterns, therefore, are to be centered on (row, column)\n   * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).\n   * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns\n   * and are not therefore used for alignment patterns.\n   *\n   * let pos = getPositions(7)\n   * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]\n   *\n   * @param  {Number} version QR Code version\n   * @return {Array}          Array of coordinates\n   */\n  exports.getPositions = function getPositions(version) {\n    var coords = [];\n    var pos = exports.getRowColCoords(version);\n    var posLength = pos.length;\n    for (var i = 0; i < posLength; i++) {\n      for (var j = 0; j < posLength; j++) {\n        // Skip if position is occupied by finder patterns\n        if (i === 0 && j === 0 ||\n        // top-left\n        i === 0 && j === posLength - 1 ||\n        // bottom-left\n        i === posLength - 1 && j === 0) {\n          // top-right\n          continue;\n        }\n        coords.push([pos[i], pos[j]]);\n      }\n    }\n    return coords;\n  };\n});","lineCount":81,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,13,0],[13,0,14,0],[14,0,15,0],[15,0,16,0],[16,0,17,0],[17,0,18,0],[18,0,19,0],[19,0,20,0],[20,0,21,0],[21,0,22,0],[22,0,23,0],[23,0,24,0],[24,0,25,0],[25,0,26,0],[26,2,27,0,"exports"],[26,9,27,7],[26,10,27,8,"getRowColCoords"],[26,25,27,23],[26,28,27,26],[26,37,27,35,"getRowColCoords"],[26,52,27,50,"getRowColCoords"],[26,53,27,52,"version"],[26,60,27,59],[26,62,27,61],[27,4,28,2],[27,8,28,6,"version"],[27,15,28,13],[27,20,28,18],[27,21,28,19],[27,23,28,21],[27,30,28,28],[27,32,28,30],[28,4,30,2],[28,8,30,8,"posCount"],[28,16,30,16],[28,19,30,19,"Math"],[28,23,30,23],[28,24,30,24,"floor"],[28,29,30,29],[28,30,30,30,"version"],[28,37,30,37],[28,40,30,40],[28,41,30,41],[28,42,30,42],[28,45,30,45],[28,46,30,46],[29,4,31,2],[29,8,31,8,"size"],[29,12,31,12],[29,15,31,15,"_$$_REQUIRE"],[29,26,31,15],[29,27,31,15,"_dependencyMap"],[29,41,31,15],[29,57,31,15,"getSymbolSize"],[29,70,31,15],[29,71,31,29,"version"],[29,78,31,36],[29,79,31,37],[30,4,32,2],[30,8,32,8,"intervals"],[30,17,32,17],[30,20,32,20,"size"],[30,24,32,24],[30,29,32,29],[30,32,32,32],[30,35,32,35],[30,37,32,37],[30,40,32,40,"Math"],[30,44,32,44],[30,45,32,45,"ceil"],[30,49,32,49],[30,50,32,50],[30,51,32,51,"size"],[30,55,32,55],[30,58,32,58],[30,60,32,60],[30,65,32,65],[30,66,32,66],[30,69,32,69,"posCount"],[30,77,32,77],[30,80,32,80],[30,81,32,81],[30,82,32,82],[30,83,32,83],[30,86,32,86],[30,87,32,87],[31,4,33,2],[31,8,33,8,"positions"],[31,17,33,17],[31,20,33,20],[31,21,33,21,"size"],[31,25,33,25],[31,28,33,28],[31,29,33,29],[31,30,33,30],[31,32,33,31],[33,4,35,2],[33,9,35,7],[33,13,35,11,"i"],[33,14,35,12],[33,17,35,15],[33,18,35,16],[33,20,35,18,"i"],[33,21,35,19],[33,24,35,22,"posCount"],[33,32,35,30],[33,35,35,33],[33,36,35,34],[33,38,35,36,"i"],[33,39,35,37],[33,41,35,39],[33,43,35,41],[34,6,36,4,"positions"],[34,15,36,13],[34,16,36,14,"i"],[34,17,36,15],[34,18,36,16],[34,21,36,19,"positions"],[34,30,36,28],[34,31,36,29,"i"],[34,32,36,30],[34,35,36,33],[34,36,36,34],[34,37,36,35],[34,40,36,38,"intervals"],[34,49,36,47],[35,4,37,2],[36,4,39,2,"positions"],[36,13,39,11],[36,14,39,12,"push"],[36,18,39,16],[36,19,39,17],[36,20,39,18],[36,21,39,19],[36,23,39,20],[38,4,41,2],[38,11,41,9,"positions"],[38,20,41,18],[38,21,41,19,"reverse"],[38,28,41,26],[38,29,41,27],[38,30,41,28],[39,2,42,0],[39,3,42,1],[41,2,44,0],[42,0,45,0],[43,0,46,0],[44,0,47,0],[45,0,48,0],[46,0,49,0],[47,0,50,0],[48,0,51,0],[49,0,52,0],[50,0,53,0],[51,0,54,0],[52,0,55,0],[53,0,56,0],[54,0,57,0],[55,0,58,0],[56,0,59,0],[57,0,60,0],[58,0,61,0],[59,0,62,0],[60,0,63,0],[61,2,64,0,"exports"],[61,9,64,7],[61,10,64,8,"getPositions"],[61,22,64,20],[61,25,64,23],[61,34,64,32,"getPositions"],[61,46,64,44,"getPositions"],[61,47,64,46,"version"],[61,54,64,53],[61,56,64,55],[62,4,65,2],[62,8,65,8,"coords"],[62,14,65,14],[62,17,65,17],[62,19,65,19],[63,4,66,2],[63,8,66,8,"pos"],[63,11,66,11],[63,14,66,14,"exports"],[63,21,66,21],[63,22,66,22,"getRowColCoords"],[63,37,66,37],[63,38,66,38,"version"],[63,45,66,45],[63,46,66,46],[64,4,67,2],[64,8,67,8,"posLength"],[64,17,67,17],[64,20,67,20,"pos"],[64,23,67,23],[64,24,67,24,"length"],[64,30,67,30],[65,4,69,2],[65,9,69,7],[65,13,69,11,"i"],[65,14,69,12],[65,17,69,15],[65,18,69,16],[65,20,69,18,"i"],[65,21,69,19],[65,24,69,22,"posLength"],[65,33,69,31],[65,35,69,33,"i"],[65,36,69,34],[65,38,69,36],[65,40,69,38],[66,6,70,4],[66,11,70,9],[66,15,70,13,"j"],[66,16,70,14],[66,19,70,17],[66,20,70,18],[66,22,70,20,"j"],[66,23,70,21],[66,26,70,24,"posLength"],[66,35,70,33],[66,37,70,35,"j"],[66,38,70,36],[66,40,70,38],[66,42,70,40],[67,8,71,6],[68,8,72,6],[68,12,72,11,"i"],[68,13,72,12],[68,18,72,17],[68,19,72,18],[68,23,72,22,"j"],[68,24,72,23],[68,29,72,28],[68,30,72,29],[69,8,72,34],[70,8,73,11,"i"],[70,9,73,12],[70,14,73,17],[70,15,73,18],[70,19,73,22,"j"],[70,20,73,23],[70,25,73,28,"posLength"],[70,34,73,37],[70,37,73,40],[70,38,73,42],[71,8,73,46],[72,8,74,11,"i"],[72,9,74,12],[72,14,74,17,"posLength"],[72,23,74,26],[72,26,74,29],[72,27,74,30],[72,31,74,34,"j"],[72,32,74,35],[72,37,74,40],[72,38,74,42],[72,40,74,44],[73,10,74,46],[74,10,75,8],[75,8,76,6],[76,8,78,6,"coords"],[76,14,78,12],[76,15,78,13,"push"],[76,19,78,17],[76,20,78,18],[76,21,78,19,"pos"],[76,24,78,22],[76,25,78,23,"i"],[76,26,78,24],[76,27,78,25],[76,29,78,27,"pos"],[76,32,78,30],[76,33,78,31,"j"],[76,34,78,32],[76,35,78,33],[76,36,78,34],[76,37,78,35],[77,6,79,4],[78,4,80,2],[79,4,82,2],[79,11,82,9,"coords"],[79,17,82,15],[80,2,83,0],[80,3,83,1],[81,0,83,1],[81,3]],"functionMap":{"names":["<global>","getRowColCoords","getPositions"],"mappings":"AAA;0BC0B;CDe;uBEsB;CFmB"}},"type":"js/module"}]}