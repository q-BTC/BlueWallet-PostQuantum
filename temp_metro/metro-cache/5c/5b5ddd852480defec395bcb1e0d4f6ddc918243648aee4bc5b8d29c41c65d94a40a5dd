{"dependencies":[{"name":"create-hash","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":19,"index":137},"end":{"line":4,"column":41,"index":159}},{"start":{"line":4,"column":19,"index":137},"end":{"line":4,"column":41,"index":159}}],"key":"7Wxhpesb6O8KtkMXbqnF6GdF3fo="}},{"name":"varuint-bitcoin","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":16,"index":215},"end":{"line":6,"column":42,"index":241}},{"start":{"line":6,"column":16,"index":215},"end":{"line":6,"column":42,"index":241}}],"key":"d/MLbboLwipJSIgxTfEgzKAp95s="}},{"name":"secp256k1","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":18,"index":178},"end":{"line":5,"column":38,"index":198}},{"start":{"line":5,"column":18,"index":178},"end":{"line":5,"column":38,"index":198}},{"start":{"line":5,"column":18,"index":178},"end":{"line":5,"column":38,"index":198}}],"key":"NgEpSq2GdmBi4a5dIwplK90Jy68="}},{"name":"bech32","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":15,"index":54},"end":{"line":2,"column":32,"index":71}},{"start":{"line":2,"column":15,"index":54},"end":{"line":2,"column":32,"index":71}}],"key":"ugm55roL35z1WKOi63WbzCYR5fI="}},{"name":"bs58check","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":18,"index":18},"end":{"line":1,"column":38,"index":38}},{"start":{"line":1,"column":18,"index":18},"end":{"line":1,"column":38,"index":38}},{"start":{"line":1,"column":18,"index":18},"end":{"line":1,"column":38,"index":38}}],"key":"4OUKwPALIMTasKbVl6WljOsf4WA="}},{"name":"buffer-equals","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":21,"index":93},"end":{"line":3,"column":45,"index":117}},{"start":{"line":3,"column":21,"index":93},"end":{"line":3,"column":45,"index":117}},{"start":{"line":3,"column":21,"index":93},"end":{"line":3,"column":45,"index":117}},{"start":{"line":3,"column":21,"index":93},"end":{"line":3,"column":45,"index":117}}],"key":"25Wu25731vCnJr/HlmChMPQwQF0=","isOptional":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var SEGWIT_TYPES = {\n    P2WPKH: 'p2wpkh',\n    P2SH_P2WPKH: 'p2sh(p2wpkh)'\n  };\n  function sha256(b) {\n    return _$$_REQUIRE(_dependencyMap[0], \"create-hash\")('sha256').update(b).digest();\n  }\n  function hash256(buffer) {\n    return sha256(sha256(buffer));\n  }\n  function hash160(buffer) {\n    return _$$_REQUIRE(_dependencyMap[0], \"create-hash\")('ripemd160').update(sha256(buffer)).digest();\n  }\n  function encodeSignature(signature, recovery, compressed, segwitType) {\n    if (segwitType !== undefined) {\n      recovery += 8;\n      if (segwitType === SEGWIT_TYPES.P2WPKH) recovery += 4;\n    } else {\n      if (compressed) recovery += 4;\n    }\n    return Buffer.concat([Buffer.alloc(1, recovery + 27), signature]);\n  }\n  function decodeSignature(buffer) {\n    if (buffer.length !== 65) throw new Error('Invalid signature length');\n    var flagByte = buffer.readUInt8(0) - 27;\n    if (flagByte > 15 || flagByte < 0) {\n      throw new Error('Invalid signature parameter');\n    }\n    return {\n      compressed: !!(flagByte & 12),\n      segwitType: !(flagByte & 8) ? null : !(flagByte & 4) ? SEGWIT_TYPES.P2SH_P2WPKH : SEGWIT_TYPES.P2WPKH,\n      recovery: flagByte & 3,\n      signature: buffer.slice(1)\n    };\n  }\n  function magicHash(message, messagePrefix) {\n    messagePrefix = messagePrefix || \"\\x18Bitcoin Signed Message:\\n\";\n    if (!Buffer.isBuffer(messagePrefix)) {\n      messagePrefix = Buffer.from(messagePrefix, 'utf8');\n    }\n    if (!Buffer.isBuffer(message)) {\n      message = Buffer.from(message, 'utf8');\n    }\n    var messageVISize = _$$_REQUIRE(_dependencyMap[1], \"varuint-bitcoin\").encodingLength(message.length);\n    var buffer = Buffer.allocUnsafe(messagePrefix.length + messageVISize + message.length);\n    messagePrefix.copy(buffer, 0);\n    _$$_REQUIRE(_dependencyMap[1], \"varuint-bitcoin\").encode(message.length, buffer, messagePrefix.length);\n    message.copy(buffer, messagePrefix.length + messageVISize);\n    return hash256(buffer);\n  }\n  function prepareSign(messagePrefixArg, sigOptions) {\n    if (typeof messagePrefixArg === 'object' && sigOptions === undefined) {\n      sigOptions = messagePrefixArg;\n      messagePrefixArg = undefined;\n    }\n    var _ref = sigOptions || {},\n      segwitType = _ref.segwitType,\n      extraEntropy = _ref.extraEntropy;\n    if (segwitType && (typeof segwitType === 'string' || segwitType instanceof String)) {\n      segwitType = segwitType.toLowerCase();\n    }\n    if (segwitType && segwitType !== SEGWIT_TYPES.P2SH_P2WPKH && segwitType !== SEGWIT_TYPES.P2WPKH) {\n      throw new Error('Unrecognized segwitType: use \"' + SEGWIT_TYPES.P2SH_P2WPKH + '\" or \"' + SEGWIT_TYPES.P2WPKH + '\"');\n    }\n    return {\n      messagePrefixArg: messagePrefixArg,\n      segwitType: segwitType,\n      extraEntropy: extraEntropy\n    };\n  }\n  function isSigner(obj) {\n    return obj && typeof obj.sign === 'function';\n  }\n  function sign(message, privateKey, compressed, messagePrefix, sigOptions) {\n    var _prepareSign = prepareSign(messagePrefix, sigOptions),\n      messagePrefixArg = _prepareSign.messagePrefixArg,\n      segwitType = _prepareSign.segwitType,\n      extraEntropy = _prepareSign.extraEntropy;\n    var hash = magicHash(message, messagePrefixArg);\n    var sigObj = isSigner(privateKey) ? privateKey.sign(hash, extraEntropy) : _$$_REQUIRE(_dependencyMap[2], \"secp256k1\").sign(hash, privateKey, {\n      data: extraEntropy\n    });\n    return encodeSignature(sigObj.signature, sigObj.recovery, compressed, segwitType);\n  }\n  function signAsync(message, privateKey, compressed, messagePrefix, sigOptions) {\n    var messagePrefixArg, segwitType, extraEntropy;\n    return Promise.resolve().then(function () {\n      var _prepareSign2 = prepareSign(messagePrefix, sigOptions);\n      messagePrefixArg = _prepareSign2.messagePrefixArg;\n      segwitType = _prepareSign2.segwitType;\n      extraEntropy = _prepareSign2.extraEntropy;\n      var hash = magicHash(message, messagePrefixArg);\n      return isSigner(privateKey) ? privateKey.sign(hash, extraEntropy) : _$$_REQUIRE(_dependencyMap[2], \"secp256k1\").sign(hash, privateKey, {\n        data: extraEntropy\n      });\n    }).then(function (sigObj) {\n      return encodeSignature(sigObj.signature, sigObj.recovery, compressed, segwitType);\n    });\n  }\n  function segwitRedeemHash(publicKeyHash) {\n    var redeemScript = Buffer.concat([Buffer.from('0014', 'hex'), publicKeyHash]);\n    return hash160(redeemScript);\n  }\n  function decodeBech32(address) {\n    var result = _$$_REQUIRE(_dependencyMap[3], \"bech32\").decode(address);\n    var data = _$$_REQUIRE(_dependencyMap[3], \"bech32\").fromWords(result.words.slice(1));\n    return Buffer.from(data);\n  }\n  function verify(message, address, signature, messagePrefix, checkSegwitAlways) {\n    if (!Buffer.isBuffer(signature)) signature = Buffer.from(signature, 'base64');\n    var parsed = decodeSignature(signature);\n    if (checkSegwitAlways && !parsed.compressed) {\n      throw new Error('checkSegwitAlways can only be used with a compressed pubkey signature flagbyte');\n    }\n    var hash = magicHash(message, messagePrefix);\n    var publicKey = _$$_REQUIRE(_dependencyMap[2], \"secp256k1\").recover(hash, parsed.signature, parsed.recovery, parsed.compressed);\n    var publicKeyHash = hash160(publicKey);\n    var actual, expected;\n    if (parsed.segwitType) {\n      if (parsed.segwitType === SEGWIT_TYPES.P2SH_P2WPKH) {\n        actual = segwitRedeemHash(publicKeyHash);\n        expected = _$$_REQUIRE(_dependencyMap[4], \"bs58check\").decode(address).slice(1);\n      } else {\n        // parsed.segwitType === SEGWIT_TYPES.P2WPKH\n        // must be true since we only return null, P2SH_P2WPKH, or P2WPKH\n        // from the decodeSignature function.\n        actual = publicKeyHash;\n        expected = decodeBech32(address);\n      }\n    } else {\n      if (checkSegwitAlways) {\n        try {\n          expected = decodeBech32(address);\n          // if address is bech32 it is not p2sh\n          return _$$_REQUIRE(_dependencyMap[5], \"buffer-equals\")(publicKeyHash, expected);\n        } catch (e) {\n          var redeemHash = segwitRedeemHash(publicKeyHash);\n          expected = _$$_REQUIRE(_dependencyMap[4], \"bs58check\").decode(address).slice(1);\n          // base58 can be p2pkh or p2sh-p2wpkh\n          return _$$_REQUIRE(_dependencyMap[5], \"buffer-equals\")(publicKeyHash, expected) || _$$_REQUIRE(_dependencyMap[5], \"buffer-equals\")(redeemHash, expected);\n        }\n      } else {\n        actual = publicKeyHash;\n        expected = _$$_REQUIRE(_dependencyMap[4], \"bs58check\").decode(address).slice(1);\n      }\n    }\n    return _$$_REQUIRE(_dependencyMap[5], \"buffer-equals\")(actual, expected);\n  }\n  module.exports = {\n    magicHash: magicHash,\n    sign: sign,\n    signAsync: signAsync,\n    verify: verify\n  };\n});","lineCount":156,"map":[[2,2,8,0],[2,6,8,6,"SEGWIT_TYPES"],[2,18,8,18],[2,21,8,21],[3,4,9,2,"P2WPKH"],[3,10,9,8],[3,12,9,10],[3,20,9,18],[4,4,10,2,"P2SH_P2WPKH"],[4,15,10,13],[4,17,10,15],[5,2,11,0],[5,3,11,1],[6,2,13,0],[6,11,13,9,"sha256"],[6,17,13,15,"sha256"],[6,18,13,17,"b"],[6,19,13,18],[6,21,13,20],[7,4,14,2],[7,11,14,9,"_$$_REQUIRE"],[7,22,14,9],[7,23,14,9,"_dependencyMap"],[7,37,14,9],[7,57,14,20],[7,65,14,28],[7,66,14,29],[7,67,15,5,"update"],[7,73,15,11],[7,74,15,12,"b"],[7,75,15,13],[7,76,15,14],[7,77,16,5,"digest"],[7,83,16,11],[7,84,16,12],[7,85,16,13],[8,2,17,0],[9,2,18,0],[9,11,18,9,"hash256"],[9,18,18,16,"hash256"],[9,19,18,18,"buffer"],[9,25,18,24],[9,27,18,26],[10,4,19,2],[10,11,19,9,"sha256"],[10,17,19,15],[10,18,19,16,"sha256"],[10,24,19,22],[10,25,19,23,"buffer"],[10,31,19,29],[10,32,19,30],[10,33,19,31],[11,2,20,0],[12,2,21,0],[12,11,21,9,"hash160"],[12,18,21,16,"hash160"],[12,19,21,18,"buffer"],[12,25,21,24],[12,27,21,26],[13,4,22,2],[13,11,22,9,"_$$_REQUIRE"],[13,22,22,9],[13,23,22,9,"_dependencyMap"],[13,37,22,9],[13,57,22,20],[13,68,22,31],[13,69,22,32],[13,70,23,5,"update"],[13,76,23,11],[13,77,23,12,"sha256"],[13,83,23,18],[13,84,23,19,"buffer"],[13,90,23,25],[13,91,23,26],[13,92,23,27],[13,93,24,5,"digest"],[13,99,24,11],[13,100,24,12],[13,101,24,13],[14,2,25,0],[15,2,27,0],[15,11,27,9,"encodeSignature"],[15,26,27,24,"encodeSignature"],[15,27,27,26,"signature"],[15,36,27,35],[15,38,27,37,"recovery"],[15,46,27,45],[15,48,27,47,"compressed"],[15,58,27,57],[15,60,27,59,"segwitType"],[15,70,27,69],[15,72,27,71],[16,4,28,2],[16,8,28,6,"segwitType"],[16,18,28,16],[16,23,28,21,"undefined"],[16,32,28,30],[16,34,28,32],[17,6,29,4,"recovery"],[17,14,29,12],[17,18,29,16],[17,19,29,17],[18,6,30,4],[18,10,30,8,"segwitType"],[18,20,30,18],[18,25,30,23,"SEGWIT_TYPES"],[18,37,30,35],[18,38,30,36,"P2WPKH"],[18,44,30,42],[18,46,30,44,"recovery"],[18,54,30,52],[18,58,30,56],[18,59,30,57],[19,4,31,2],[19,5,31,3],[19,11,31,9],[20,6,32,4],[20,10,32,8,"compressed"],[20,20,32,18],[20,22,32,20,"recovery"],[20,30,32,28],[20,34,32,32],[20,35,32,33],[21,4,33,2],[22,4,34,2],[22,11,34,9,"Buffer"],[22,17,34,15],[22,18,34,16,"concat"],[22,24,34,22],[22,25,34,23],[22,26,34,24,"Buffer"],[22,32,34,30],[22,33,34,31,"alloc"],[22,38,34,36],[22,39,34,37],[22,40,34,38],[22,42,34,40,"recovery"],[22,50,34,48],[22,53,34,51],[22,55,34,53],[22,56,34,54],[22,58,34,56,"signature"],[22,67,34,65],[22,68,34,66],[22,69,34,67],[23,2,35,0],[24,2,37,0],[24,11,37,9,"decodeSignature"],[24,26,37,24,"decodeSignature"],[24,27,37,26,"buffer"],[24,33,37,32],[24,35,37,34],[25,4,38,2],[25,8,38,6,"buffer"],[25,14,38,12],[25,15,38,13,"length"],[25,21,38,19],[25,26,38,24],[25,28,38,26],[25,30,38,28],[25,36,38,34],[25,40,38,38,"Error"],[25,45,38,43],[25,46,38,44],[25,72,38,70],[25,73,38,71],[26,4,40,2],[26,8,40,8,"flagByte"],[26,16,40,16],[26,19,40,19,"buffer"],[26,25,40,25],[26,26,40,26,"readUInt8"],[26,35,40,35],[26,36,40,36],[26,37,40,37],[26,38,40,38],[26,41,40,41],[26,43,40,43],[27,4,41,2],[27,8,41,6,"flagByte"],[27,16,41,14],[27,19,41,17],[27,21,41,19],[27,25,41,23,"flagByte"],[27,33,41,31],[27,36,41,34],[27,37,41,35],[27,39,41,37],[28,6,42,4],[28,12,42,10],[28,16,42,14,"Error"],[28,21,42,19],[28,22,42,20],[28,51,42,49],[28,52,42,50],[29,4,43,2],[30,4,45,2],[30,11,45,9],[31,6,46,4,"compressed"],[31,16,46,14],[31,18,46,16],[31,19,46,17],[31,21,46,19,"flagByte"],[31,29,46,27],[31,32,46,30],[31,34,46,32],[31,35,46,33],[32,6,47,4,"segwitType"],[32,16,47,14],[32,18,47,16],[32,20,47,18,"flagByte"],[32,28,47,26],[32,31,47,29],[32,32,47,30],[32,33,47,31],[32,36,48,8],[32,40,48,12],[32,43,49,8],[32,45,49,10,"flagByte"],[32,53,49,18],[32,56,49,21],[32,57,49,22],[32,58,49,23],[32,61,50,10,"SEGWIT_TYPES"],[32,73,50,22],[32,74,50,23,"P2SH_P2WPKH"],[32,85,50,34],[32,88,51,10,"SEGWIT_TYPES"],[32,100,51,22],[32,101,51,23,"P2WPKH"],[32,107,51,29],[33,6,52,4,"recovery"],[33,14,52,12],[33,16,52,14,"flagByte"],[33,24,52,22],[33,27,52,25],[33,28,52,26],[34,6,53,4,"signature"],[34,15,53,13],[34,17,53,15,"buffer"],[34,23,53,21],[34,24,53,22,"slice"],[34,29,53,27],[34,30,53,28],[34,31,53,29],[35,4,54,2],[35,5,54,3],[36,2,55,0],[37,2,57,0],[37,11,57,9,"magicHash"],[37,20,57,18,"magicHash"],[37,21,57,20,"message"],[37,28,57,27],[37,30,57,29,"messagePrefix"],[37,43,57,42],[37,45,57,44],[38,4,58,2,"messagePrefix"],[38,17,58,15],[38,20,58,18,"messagePrefix"],[38,33,58,31],[38,37,58,35],[38,68,58,68],[39,4,59,2],[39,8,59,6],[39,9,59,7,"Buffer"],[39,15,59,13],[39,16,59,14,"isBuffer"],[39,24,59,22],[39,25,59,23,"messagePrefix"],[39,38,59,36],[39,39,59,37],[39,41,59,39],[40,6,60,4,"messagePrefix"],[40,19,60,17],[40,22,60,20,"Buffer"],[40,28,60,26],[40,29,60,27,"from"],[40,33,60,31],[40,34,60,32,"messagePrefix"],[40,47,60,45],[40,49,60,47],[40,55,60,53],[40,56,60,54],[41,4,61,2],[42,4,62,2],[42,8,62,6],[42,9,62,7,"Buffer"],[42,15,62,13],[42,16,62,14,"isBuffer"],[42,24,62,22],[42,25,62,23,"message"],[42,32,62,30],[42,33,62,31],[42,35,62,33],[43,6,63,4,"message"],[43,13,63,11],[43,16,63,14,"Buffer"],[43,22,63,20],[43,23,63,21,"from"],[43,27,63,25],[43,28,63,26,"message"],[43,35,63,33],[43,37,63,35],[43,43,63,41],[43,44,63,42],[44,4,64,2],[45,4,65,2],[45,8,65,8,"messageVISize"],[45,21,65,21],[45,24,65,24,"_$$_REQUIRE"],[45,35,65,24],[45,36,65,24,"_dependencyMap"],[45,50,65,24],[45,74,65,32,"encodingLength"],[45,88,65,46],[45,89,65,47,"message"],[45,96,65,54],[45,97,65,55,"length"],[45,103,65,61],[45,104,65,62],[46,4,66,2],[46,8,66,8,"buffer"],[46,14,66,14],[46,17,66,17,"Buffer"],[46,23,66,23],[46,24,66,24,"allocUnsafe"],[46,35,66,35],[46,36,67,4,"messagePrefix"],[46,49,67,17],[46,50,67,18,"length"],[46,56,67,24],[46,59,67,27,"messageVISize"],[46,72,67,40],[46,75,67,43,"message"],[46,82,67,50],[46,83,67,51,"length"],[46,89,68,2],[46,90,68,3],[47,4,69,2,"messagePrefix"],[47,17,69,15],[47,18,69,16,"copy"],[47,22,69,20],[47,23,69,21,"buffer"],[47,29,69,27],[47,31,69,29],[47,32,69,30],[47,33,69,31],[48,4,70,2,"_$$_REQUIRE"],[48,15,70,2],[48,16,70,2,"_dependencyMap"],[48,30,70,2],[48,54,70,10,"encode"],[48,60,70,16],[48,61,70,17,"message"],[48,68,70,24],[48,69,70,25,"length"],[48,75,70,31],[48,77,70,33,"buffer"],[48,83,70,39],[48,85,70,41,"messagePrefix"],[48,98,70,54],[48,99,70,55,"length"],[48,105,70,61],[48,106,70,62],[49,4,71,2,"message"],[49,11,71,9],[49,12,71,10,"copy"],[49,16,71,14],[49,17,71,15,"buffer"],[49,23,71,21],[49,25,71,23,"messagePrefix"],[49,38,71,36],[49,39,71,37,"length"],[49,45,71,43],[49,48,71,46,"messageVISize"],[49,61,71,59],[49,62,71,60],[50,4,72,2],[50,11,72,9,"hash256"],[50,18,72,16],[50,19,72,17,"buffer"],[50,25,72,23],[50,26,72,24],[51,2,73,0],[52,2,75,0],[52,11,75,9,"prepareSign"],[52,22,75,20,"prepareSign"],[52,23,76,2,"messagePrefixArg"],[52,39,76,18],[52,41,77,2,"sigOptions"],[52,51,77,12],[52,53,78,2],[53,4,79,2],[53,8,79,6],[53,15,79,13,"messagePrefixArg"],[53,31,79,29],[53,36,79,34],[53,44,79,42],[53,48,79,46,"sigOptions"],[53,58,79,56],[53,63,79,61,"undefined"],[53,72,79,70],[53,74,79,72],[54,6,80,4,"sigOptions"],[54,16,80,14],[54,19,80,17,"messagePrefixArg"],[54,35,80,33],[55,6,81,4,"messagePrefixArg"],[55,22,81,20],[55,25,81,23,"undefined"],[55,34,81,32],[56,4,82,2],[57,4,83,2],[57,8,83,2,"_ref"],[57,12,83,2],[57,15,83,37,"sigOptions"],[57,25,83,47],[57,29,83,51],[57,30,83,52],[57,31,83,53],[58,6,83,8,"segwitType"],[58,16,83,18],[58,19,83,18,"_ref"],[58,23,83,18],[58,24,83,8,"segwitType"],[58,34,83,18],[59,6,83,20,"extraEntropy"],[59,18,83,32],[59,21,83,32,"_ref"],[59,25,83,32],[59,26,83,20,"extraEntropy"],[59,38,83,32],[60,4,84,2],[60,8,85,4,"segwitType"],[60,18,85,14],[60,23,86,5],[60,30,86,12,"segwitType"],[60,40,86,22],[60,45,86,27],[60,53,86,35],[60,57,86,39,"segwitType"],[60,67,86,49],[60,79,86,61,"String"],[60,85,86,67],[60,86,86,68],[60,88,87,4],[61,6,88,4,"segwitType"],[61,16,88,14],[61,19,88,17,"segwitType"],[61,29,88,27],[61,30,88,28,"toLowerCase"],[61,41,88,39],[61,42,88,40],[61,43,88,41],[62,4,89,2],[63,4,90,2],[63,8,91,4,"segwitType"],[63,18,91,14],[63,22,92,4,"segwitType"],[63,32,92,14],[63,37,92,19,"SEGWIT_TYPES"],[63,49,92,31],[63,50,92,32,"P2SH_P2WPKH"],[63,61,92,43],[63,65,93,4,"segwitType"],[63,75,93,14],[63,80,93,19,"SEGWIT_TYPES"],[63,92,93,31],[63,93,93,32,"P2WPKH"],[63,99,93,38],[63,101,94,4],[64,6,95,4],[64,12,95,10],[64,16,95,14,"Error"],[64,21,95,19],[64,22,96,6],[64,54,96,38],[64,57,97,8,"SEGWIT_TYPES"],[64,69,97,20],[64,70,97,21,"P2SH_P2WPKH"],[64,81,97,32],[64,84,98,8],[64,92,98,16],[64,95,99,8,"SEGWIT_TYPES"],[64,107,99,20],[64,108,99,21,"P2WPKH"],[64,114,99,27],[64,117,100,8],[64,120,101,4],[64,121,101,5],[65,4,102,2],[66,4,104,2],[66,11,104,9],[67,6,105,4,"messagePrefixArg"],[67,22,105,20],[67,24,105,4,"messagePrefixArg"],[67,40,105,20],[68,6,106,4,"segwitType"],[68,16,106,14],[68,18,106,4,"segwitType"],[68,28,106,14],[69,6,107,4,"extraEntropy"],[69,18,107,16],[69,20,107,4,"extraEntropy"],[70,4,108,2],[70,5,108,3],[71,2,109,0],[72,2,111,0],[72,11,111,9,"isSigner"],[72,19,111,17,"isSigner"],[72,20,111,19,"obj"],[72,23,111,22],[72,25,111,24],[73,4,112,2],[73,11,112,9,"obj"],[73,14,112,12],[73,18,112,16],[73,25,112,23,"obj"],[73,28,112,26],[73,29,112,27,"sign"],[73,33,112,31],[73,38,112,36],[73,48,112,46],[74,2,113,0],[75,2,115,0],[75,11,115,9,"sign"],[75,15,115,13,"sign"],[75,16,116,2,"message"],[75,23,116,9],[75,25,117,2,"privateKey"],[75,35,117,12],[75,37,118,2,"compressed"],[75,47,118,12],[75,49,119,2,"messagePrefix"],[75,62,119,15],[75,64,120,2,"sigOptions"],[75,74,120,12],[75,76,121,2],[76,4,122,2],[76,8,122,2,"_prepareSign"],[76,20,122,2],[76,23,126,6,"prepareSign"],[76,34,126,17],[76,35,126,18,"messagePrefix"],[76,48,126,31],[76,50,126,33,"sigOptions"],[76,60,126,43],[76,61,126,44],[77,6,123,4,"messagePrefixArg"],[77,22,123,20],[77,25,123,20,"_prepareSign"],[77,37,123,20],[77,38,123,4,"messagePrefixArg"],[77,54,123,20],[78,6,124,4,"segwitType"],[78,16,124,14],[78,19,124,14,"_prepareSign"],[78,31,124,14],[78,32,124,4,"segwitType"],[78,42,124,14],[79,6,125,4,"extraEntropy"],[79,18,125,16],[79,21,125,16,"_prepareSign"],[79,33,125,16],[79,34,125,4,"extraEntropy"],[79,46,125,16],[80,4,127,2],[80,8,127,8,"hash"],[80,12,127,12],[80,15,127,15,"magicHash"],[80,24,127,24],[80,25,127,25,"message"],[80,32,127,32],[80,34,127,34,"messagePrefixArg"],[80,50,127,50],[80,51,127,51],[81,4,128,2],[81,8,128,8,"sigObj"],[81,14,128,14],[81,17,128,17,"isSigner"],[81,25,128,25],[81,26,128,26,"privateKey"],[81,36,128,36],[81,37,128,37],[81,40,129,6,"privateKey"],[81,50,129,16],[81,51,129,17,"sign"],[81,55,129,21],[81,56,129,22,"hash"],[81,60,129,26],[81,62,129,28,"extraEntropy"],[81,74,129,40],[81,75,129,41],[81,78,130,6,"_$$_REQUIRE"],[81,89,130,6],[81,90,130,6,"_dependencyMap"],[81,104,130,6],[81,122,130,16,"sign"],[81,126,130,20],[81,127,130,21,"hash"],[81,131,130,25],[81,133,130,27,"privateKey"],[81,143,130,37],[81,145,130,39],[82,6,130,41,"data"],[82,10,130,45],[82,12,130,47,"extraEntropy"],[83,4,130,60],[83,5,130,61],[83,6,130,62],[84,4,131,2],[84,11,131,9,"encodeSignature"],[84,26,131,24],[84,27,132,4,"sigObj"],[84,33,132,10],[84,34,132,11,"signature"],[84,43,132,20],[84,45,133,4,"sigObj"],[84,51,133,10],[84,52,133,11,"recovery"],[84,60,133,19],[84,62,134,4,"compressed"],[84,72,134,14],[84,74,135,4,"segwitType"],[84,84,136,2],[84,85,136,3],[85,2,137,0],[86,2,139,0],[86,11,139,9,"signAsync"],[86,20,139,18,"signAsync"],[86,21,140,2,"message"],[86,28,140,9],[86,30,141,2,"privateKey"],[86,40,141,12],[86,42,142,2,"compressed"],[86,52,142,12],[86,54,143,2,"messagePrefix"],[86,67,143,15],[86,69,144,2,"sigOptions"],[86,79,144,12],[86,81,145,2],[87,4,146,2],[87,8,146,6,"messagePrefixArg"],[87,24,146,22],[87,26,146,24,"segwitType"],[87,36,146,34],[87,38,146,36,"extraEntropy"],[87,50,146,48],[88,4,147,2],[88,11,147,9,"Promise"],[88,18,147,16],[88,19,147,17,"resolve"],[88,26,147,24],[88,27,147,25],[88,28,147,26],[88,29,147,27,"then"],[88,33,147,31],[88,34,147,32],[88,46,147,38],[89,6,147,38],[89,10,147,38,"_prepareSign2"],[89,23,147,38],[89,26,152,8,"prepareSign"],[89,37,152,19],[89,38,152,20,"messagePrefix"],[89,51,152,33],[89,53,152,35,"sigOptions"],[89,63,152,45],[89,64,152,46],[90,6,149,6,"messagePrefixArg"],[90,22,149,22],[90,25,149,22,"_prepareSign2"],[90,38,149,22],[90,39,149,6,"messagePrefixArg"],[90,55,149,22],[91,6,150,6,"segwitType"],[91,16,150,16],[91,19,150,16,"_prepareSign2"],[91,32,150,16],[91,33,150,6,"segwitType"],[91,43,150,16],[92,6,151,6,"extraEntropy"],[92,18,151,18],[92,21,151,18,"_prepareSign2"],[92,34,151,18],[92,35,151,6,"extraEntropy"],[92,47,151,18],[93,6,153,4],[93,10,153,10,"hash"],[93,14,153,14],[93,17,153,17,"magicHash"],[93,26,153,26],[93,27,153,27,"message"],[93,34,153,34],[93,36,153,36,"messagePrefixArg"],[93,52,153,52],[93,53,153,53],[94,6,154,4],[94,13,154,11,"isSigner"],[94,21,154,19],[94,22,154,20,"privateKey"],[94,32,154,30],[94,33,154,31],[94,36,155,8,"privateKey"],[94,46,155,18],[94,47,155,19,"sign"],[94,51,155,23],[94,52,155,24,"hash"],[94,56,155,28],[94,58,155,30,"extraEntropy"],[94,70,155,42],[94,71,155,43],[94,74,156,8,"_$$_REQUIRE"],[94,85,156,8],[94,86,156,8,"_dependencyMap"],[94,100,156,8],[94,118,156,18,"sign"],[94,122,156,22],[94,123,156,23,"hash"],[94,127,156,27],[94,129,156,29,"privateKey"],[94,139,156,39],[94,141,156,41],[95,8,156,43,"data"],[95,12,156,47],[95,14,156,49,"extraEntropy"],[96,6,156,62],[96,7,156,63],[96,8,156,64],[97,4,157,2],[97,5,157,3],[97,6,157,4],[97,7,157,5,"then"],[97,11,157,9],[97,12,157,10],[97,22,157,11,"sigObj"],[97,28,157,17],[97,30,157,22],[98,6,158,4],[98,13,158,11,"encodeSignature"],[98,28,158,26],[98,29,159,6,"sigObj"],[98,35,159,12],[98,36,159,13,"signature"],[98,45,159,22],[98,47,160,6,"sigObj"],[98,53,160,12],[98,54,160,13,"recovery"],[98,62,160,21],[98,64,161,6,"compressed"],[98,74,161,16],[98,76,162,6,"segwitType"],[98,86,163,4],[98,87,163,5],[99,4,164,2],[99,5,164,3],[99,6,164,4],[100,2,165,0],[101,2,167,0],[101,11,167,9,"segwitRedeemHash"],[101,27,167,25,"segwitRedeemHash"],[101,28,167,27,"publicKeyHash"],[101,41,167,40],[101,43,167,42],[102,4,168,2],[102,8,168,8,"redeemScript"],[102,20,168,20],[102,23,168,23,"Buffer"],[102,29,168,29],[102,30,168,30,"concat"],[102,36,168,36],[102,37,168,37],[102,38,169,4,"Buffer"],[102,44,169,10],[102,45,169,11,"from"],[102,49,169,15],[102,50,169,16],[102,56,169,22],[102,58,169,24],[102,63,169,29],[102,64,169,30],[102,66,170,4,"publicKeyHash"],[102,79,170,17],[102,80,171,3],[102,81,171,4],[103,4,172,2],[103,11,172,9,"hash160"],[103,18,172,16],[103,19,172,17,"redeemScript"],[103,31,172,29],[103,32,172,30],[104,2,173,0],[105,2,175,0],[105,11,175,9,"decodeBech32"],[105,23,175,21,"decodeBech32"],[105,24,175,23,"address"],[105,31,175,30],[105,33,175,32],[106,4,176,2],[106,8,176,8,"result"],[106,14,176,14],[106,17,176,17,"_$$_REQUIRE"],[106,28,176,17],[106,29,176,17,"_dependencyMap"],[106,43,176,17],[106,58,176,24,"decode"],[106,64,176,30],[106,65,176,31,"address"],[106,72,176,38],[106,73,176,39],[107,4,177,2],[107,8,177,8,"data"],[107,12,177,12],[107,15,177,15,"_$$_REQUIRE"],[107,26,177,15],[107,27,177,15,"_dependencyMap"],[107,41,177,15],[107,56,177,22,"fromWords"],[107,65,177,31],[107,66,177,32,"result"],[107,72,177,38],[107,73,177,39,"words"],[107,78,177,44],[107,79,177,45,"slice"],[107,84,177,50],[107,85,177,51],[107,86,177,52],[107,87,177,53],[107,88,177,54],[108,4,178,2],[108,11,178,9,"Buffer"],[108,17,178,15],[108,18,178,16,"from"],[108,22,178,20],[108,23,178,21,"data"],[108,27,178,25],[108,28,178,26],[109,2,179,0],[110,2,181,0],[110,11,181,9,"verify"],[110,17,181,15,"verify"],[110,18,181,17,"message"],[110,25,181,24],[110,27,181,26,"address"],[110,34,181,33],[110,36,181,35,"signature"],[110,45,181,44],[110,47,181,46,"messagePrefix"],[110,60,181,59],[110,62,181,61,"checkSegwitAlways"],[110,79,181,78],[110,81,181,80],[111,4,182,2],[111,8,182,6],[111,9,182,7,"Buffer"],[111,15,182,13],[111,16,182,14,"isBuffer"],[111,24,182,22],[111,25,182,23,"signature"],[111,34,182,32],[111,35,182,33],[111,37,182,35,"signature"],[111,46,182,44],[111,49,182,47,"Buffer"],[111,55,182,53],[111,56,182,54,"from"],[111,60,182,58],[111,61,182,59,"signature"],[111,70,182,68],[111,72,182,70],[111,80,182,78],[111,81,182,79],[112,4,184,2],[112,8,184,8,"parsed"],[112,14,184,14],[112,17,184,17,"decodeSignature"],[112,32,184,32],[112,33,184,33,"signature"],[112,42,184,42],[112,43,184,43],[113,4,186,2],[113,8,186,6,"checkSegwitAlways"],[113,25,186,23],[113,29,186,27],[113,30,186,28,"parsed"],[113,36,186,34],[113,37,186,35,"compressed"],[113,47,186,45],[113,49,186,47],[114,6,187,4],[114,12,187,10],[114,16,187,14,"Error"],[114,21,187,19],[114,22,187,20],[114,102,187,100],[114,103,187,101],[115,4,188,2],[116,4,190,2],[116,8,190,8,"hash"],[116,12,190,12],[116,15,190,15,"magicHash"],[116,24,190,24],[116,25,190,25,"message"],[116,32,190,32],[116,34,190,34,"messagePrefix"],[116,47,190,47],[116,48,190,48],[117,4,191,2],[117,8,191,8,"publicKey"],[117,17,191,17],[117,20,191,20,"_$$_REQUIRE"],[117,31,191,20],[117,32,191,20,"_dependencyMap"],[117,46,191,20],[117,64,191,30,"recover"],[117,71,191,37],[117,72,192,4,"hash"],[117,76,192,8],[117,78,193,4,"parsed"],[117,84,193,10],[117,85,193,11,"signature"],[117,94,193,20],[117,96,194,4,"parsed"],[117,102,194,10],[117,103,194,11,"recovery"],[117,111,194,19],[117,113,195,4,"parsed"],[117,119,195,10],[117,120,195,11,"compressed"],[117,130,196,2],[117,131,196,3],[118,4,197,2],[118,8,197,8,"publicKeyHash"],[118,21,197,21],[118,24,197,24,"hash160"],[118,31,197,31],[118,32,197,32,"publicKey"],[118,41,197,41],[118,42,197,42],[119,4,198,2],[119,8,198,6,"actual"],[119,14,198,12],[119,16,198,14,"expected"],[119,24,198,22],[120,4,200,2],[120,8,200,6,"parsed"],[120,14,200,12],[120,15,200,13,"segwitType"],[120,25,200,23],[120,27,200,25],[121,6,201,4],[121,10,201,8,"parsed"],[121,16,201,14],[121,17,201,15,"segwitType"],[121,27,201,25],[121,32,201,30,"SEGWIT_TYPES"],[121,44,201,42],[121,45,201,43,"P2SH_P2WPKH"],[121,56,201,54],[121,58,201,56],[122,8,202,6,"actual"],[122,14,202,12],[122,17,202,15,"segwitRedeemHash"],[122,33,202,31],[122,34,202,32,"publicKeyHash"],[122,47,202,45],[122,48,202,46],[123,8,203,6,"expected"],[123,16,203,14],[123,19,203,17,"_$$_REQUIRE"],[123,30,203,17],[123,31,203,17,"_dependencyMap"],[123,45,203,17],[123,63,203,27,"decode"],[123,69,203,33],[123,70,203,34,"address"],[123,77,203,41],[123,78,203,42],[123,79,203,43,"slice"],[123,84,203,48],[123,85,203,49],[123,86,203,50],[123,87,203,51],[124,6,204,4],[124,7,204,5],[124,13,204,11],[125,8,205,6],[126,8,206,6],[127,8,207,6],[128,8,208,6,"actual"],[128,14,208,12],[128,17,208,15,"publicKeyHash"],[128,30,208,28],[129,8,209,6,"expected"],[129,16,209,14],[129,19,209,17,"decodeBech32"],[129,31,209,29],[129,32,209,30,"address"],[129,39,209,37],[129,40,209,38],[130,6,210,4],[131,4,211,2],[131,5,211,3],[131,11,211,9],[132,6,212,4],[132,10,212,8,"checkSegwitAlways"],[132,27,212,25],[132,29,212,27],[133,8,213,6],[133,12,213,10],[134,10,214,8,"expected"],[134,18,214,16],[134,21,214,19,"decodeBech32"],[134,33,214,31],[134,34,214,32,"address"],[134,41,214,39],[134,42,214,40],[135,10,215,8],[136,10,216,8],[136,17,216,15,"_$$_REQUIRE"],[136,28,216,15],[136,29,216,15,"_dependencyMap"],[136,43,216,15],[136,65,216,28,"publicKeyHash"],[136,78,216,41],[136,80,216,43,"expected"],[136,88,216,51],[136,89,216,52],[137,8,217,6],[137,9,217,7],[137,10,217,8],[137,17,217,15,"e"],[137,18,217,16],[137,20,217,18],[138,10,218,8],[138,14,218,14,"redeemHash"],[138,24,218,24],[138,27,218,27,"segwitRedeemHash"],[138,43,218,43],[138,44,218,44,"publicKeyHash"],[138,57,218,57],[138,58,218,58],[139,10,219,8,"expected"],[139,18,219,16],[139,21,219,19,"_$$_REQUIRE"],[139,32,219,19],[139,33,219,19,"_dependencyMap"],[139,47,219,19],[139,65,219,29,"decode"],[139,71,219,35],[139,72,219,36,"address"],[139,79,219,43],[139,80,219,44],[139,81,219,45,"slice"],[139,86,219,50],[139,87,219,51],[139,88,219,52],[139,89,219,53],[140,10,220,8],[141,10,221,8],[141,17,222,10,"_$$_REQUIRE"],[141,28,222,10],[141,29,222,10,"_dependencyMap"],[141,43,222,10],[141,65,222,23,"publicKeyHash"],[141,78,222,36],[141,80,222,38,"expected"],[141,88,222,46],[141,89,222,47],[141,93,223,10,"_$$_REQUIRE"],[141,104,223,10],[141,105,223,10,"_dependencyMap"],[141,119,223,10],[141,141,223,23,"redeemHash"],[141,151,223,33],[141,153,223,35,"expected"],[141,161,223,43],[141,162,223,44],[142,8,225,6],[143,6,226,4],[143,7,226,5],[143,13,226,11],[144,8,227,6,"actual"],[144,14,227,12],[144,17,227,15,"publicKeyHash"],[144,30,227,28],[145,8,228,6,"expected"],[145,16,228,14],[145,19,228,17,"_$$_REQUIRE"],[145,30,228,17],[145,31,228,17,"_dependencyMap"],[145,45,228,17],[145,63,228,27,"decode"],[145,69,228,33],[145,70,228,34,"address"],[145,77,228,41],[145,78,228,42],[145,79,228,43,"slice"],[145,84,228,48],[145,85,228,49],[145,86,228,50],[145,87,228,51],[146,6,229,4],[147,4,230,2],[148,4,232,2],[148,11,232,9,"_$$_REQUIRE"],[148,22,232,9],[148,23,232,9,"_dependencyMap"],[148,37,232,9],[148,59,232,22,"actual"],[148,65,232,28],[148,67,232,30,"expected"],[148,75,232,38],[148,76,232,39],[149,2,233,0],[150,2,235,0,"module"],[150,8,235,6],[150,9,235,7,"exports"],[150,16,235,14],[150,19,235,17],[151,4,236,2,"magicHash"],[151,13,236,11],[151,15,236,13,"magicHash"],[151,24,236,22],[152,4,237,2,"sign"],[152,8,237,6],[152,10,237,8,"sign"],[152,14,237,12],[153,4,238,2,"signAsync"],[153,13,238,11],[153,15,238,13,"signAsync"],[153,24,238,22],[154,4,239,2,"verify"],[154,10,239,8],[154,12,239,10,"verify"],[155,2,240,0],[155,3,240,1],[156,0,240,1],[156,3]],"functionMap":{"names":["<global>","sha256","hash256","hash160","encodeSignature","decodeSignature","magicHash","prepareSign","isSigner","sign","signAsync","Promise.resolve.then$argument_0","Promise.resolve.then.then$argument_0","segwitRedeemHash","decodeBech32","verify"],"mappings":"AAA;ACY;CDI;AEC;CFE;AGC;CHI;AIE;CJQ;AKE;CLkB;AME;CNgB;AOE;CPkC;AQE;CRE;ASE;CTsB;AUE;gCCQ;GDU,OE;GFO;CVC;AaE;CbM;AcE;CdI;AeE;CfoD"}},"type":"js/module"}]}