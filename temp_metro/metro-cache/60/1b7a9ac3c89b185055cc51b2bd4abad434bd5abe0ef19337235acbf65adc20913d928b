{"dependencies":[{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":66,"column":0,"index":1820}}],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE="}},{"name":"../../typeFields","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":21,"index":98},"end":{"line":3,"column":48,"index":125}},{"start":{"line":3,"column":21,"index":98},"end":{"line":3,"column":48,"index":125}}],"key":"JA6Y4U+9BJNyHBqSRMPAJW1YgVo="}},{"name":"../varint","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":16,"index":143},"end":{"line":4,"column":36,"index":163}},{"start":{"line":4,"column":16,"index":143},"end":{"line":4,"column":36,"index":163}},{"start":{"line":4,"column":16,"index":143},"end":{"line":4,"column":36,"index":163}}],"key":"1bBJazE+W4YcbkQUTfZHqYfl454="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/toConsumableArray\");\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function decode(keyVal) {\n    if (keyVal.key[0] !== _$$_REQUIRE(_dependencyMap[1], \"../../typeFields\").OutputTypes.TAP_TREE || keyVal.key.length !== 1) {\n      throw new Error('Decode Error: could not decode tapTree with key 0x' + keyVal.key.toString('hex'));\n    }\n    var _offset = 0;\n    var data = [];\n    while (_offset < keyVal.value.length) {\n      var depth = keyVal.value[_offset++];\n      var leafVersion = keyVal.value[_offset++];\n      var scriptLen = _$$_REQUIRE(_dependencyMap[2], \"../varint\").decode(keyVal.value, _offset);\n      _offset += _$$_REQUIRE(_dependencyMap[2], \"../varint\").encodingLength(scriptLen);\n      data.push({\n        depth: depth,\n        leafVersion: leafVersion,\n        script: keyVal.value.slice(_offset, _offset + scriptLen)\n      });\n      _offset += scriptLen;\n    }\n    return {\n      leaves: data\n    };\n  }\n  exports.decode = decode;\n  function encode(tree) {\n    var _ref;\n    var key = Buffer.from([_$$_REQUIRE(_dependencyMap[1], \"../../typeFields\").OutputTypes.TAP_TREE]);\n    var bufs = (_ref = []).concat.apply(_ref, _toConsumableArray(tree.leaves.map(function (tapLeaf) {\n      return [Buffer.of(tapLeaf.depth, tapLeaf.leafVersion), _$$_REQUIRE(_dependencyMap[2], \"../varint\").encode(tapLeaf.script.length), tapLeaf.script];\n    })));\n    return {\n      key: key,\n      value: Buffer.concat(bufs)\n    };\n  }\n  exports.encode = encode;\n  exports.expected = '{ leaves: [{ depth: number; leafVersion: number, script: Buffer; }] }';\n  function check(data) {\n    return Array.isArray(data.leaves) && data.leaves.every(function (tapLeaf) {\n      return tapLeaf.depth >= 0 && tapLeaf.depth <= 128 && (tapLeaf.leafVersion & 0xfe) === tapLeaf.leafVersion && Buffer.isBuffer(tapLeaf.script);\n    });\n  }\n  exports.check = check;\n  function canAdd(currentData, newData) {\n    return !!currentData && !!newData && currentData.tapTree === undefined;\n  }\n  exports.canAdd = canAdd;\n});","lineCount":54,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_toConsumableArray"],[4,24,1,13],[4,27,1,13,"_$$_REQUIRE"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,2,0,"Object"],[5,8,2,6],[5,9,2,7,"defineProperty"],[5,23,2,21],[5,24,2,22,"exports"],[5,31,2,29],[5,33,2,31],[5,45,2,43],[5,47,2,45],[6,4,2,47,"value"],[6,9,2,52],[6,11,2,54],[7,2,2,59],[7,3,2,60],[7,4,2,61],[8,2,5,0],[8,11,5,9,"decode"],[8,17,5,15,"decode"],[8,18,5,16,"keyVal"],[8,24,5,22],[8,26,5,24],[9,4,6,2],[9,8,7,4,"keyVal"],[9,14,7,10],[9,15,7,11,"key"],[9,18,7,14],[9,19,7,15],[9,20,7,16],[9,21,7,17],[9,26,7,22,"_$$_REQUIRE"],[9,37,7,22],[9,38,7,22,"_dependencyMap"],[9,52,7,22],[9,77,7,35,"OutputTypes"],[9,88,7,46],[9,89,7,47,"TAP_TREE"],[9,97,7,55],[9,101,8,4,"keyVal"],[9,107,8,10],[9,108,8,11,"key"],[9,111,8,14],[9,112,8,15,"length"],[9,118,8,21],[9,123,8,26],[9,124,8,27],[9,126,9,4],[10,6,10,4],[10,12,10,10],[10,16,10,14,"Error"],[10,21,10,19],[10,22,11,6],[10,74,11,58],[10,77,12,8,"keyVal"],[10,83,12,14],[10,84,12,15,"key"],[10,87,12,18],[10,88,12,19,"toString"],[10,96,12,27],[10,97,12,28],[10,102,12,33],[10,103,13,4],[10,104,13,5],[11,4,14,2],[12,4,15,2],[12,8,15,6,"_offset"],[12,15,15,13],[12,18,15,16],[12,19,15,17],[13,4,16,2],[13,8,16,8,"data"],[13,12,16,12],[13,15,16,15],[13,17,16,17],[14,4,17,2],[14,11,17,9,"_offset"],[14,18,17,16],[14,21,17,19,"keyVal"],[14,27,17,25],[14,28,17,26,"value"],[14,33,17,31],[14,34,17,32,"length"],[14,40,17,38],[14,42,17,40],[15,6,18,4],[15,10,18,10,"depth"],[15,15,18,15],[15,18,18,18,"keyVal"],[15,24,18,24],[15,25,18,25,"value"],[15,30,18,30],[15,31,18,31,"_offset"],[15,38,18,38],[15,40,18,40],[15,41,18,41],[16,6,19,4],[16,10,19,10,"leafVersion"],[16,21,19,21],[16,24,19,24,"keyVal"],[16,30,19,30],[16,31,19,31,"value"],[16,36,19,36],[16,37,19,37,"_offset"],[16,44,19,44],[16,46,19,46],[16,47,19,47],[17,6,20,4],[17,10,20,10,"scriptLen"],[17,19,20,19],[17,22,20,22,"_$$_REQUIRE"],[17,33,20,22],[17,34,20,22,"_dependencyMap"],[17,48,20,22],[17,66,20,30,"decode"],[17,72,20,36],[17,73,20,37,"keyVal"],[17,79,20,43],[17,80,20,44,"value"],[17,85,20,49],[17,87,20,51,"_offset"],[17,94,20,58],[17,95,20,59],[18,6,21,4,"_offset"],[18,13,21,11],[18,17,21,15,"_$$_REQUIRE"],[18,28,21,15],[18,29,21,15,"_dependencyMap"],[18,43,21,15],[18,61,21,23,"encodingLength"],[18,75,21,37],[18,76,21,38,"scriptLen"],[18,85,21,47],[18,86,21,48],[19,6,22,4,"data"],[19,10,22,8],[19,11,22,9,"push"],[19,15,22,13],[19,16,22,14],[20,8,23,6,"depth"],[20,13,23,11],[20,15,23,6,"depth"],[20,20,23,11],[21,8,24,6,"leafVersion"],[21,19,24,17],[21,21,24,6,"leafVersion"],[21,32,24,17],[22,8,25,6,"script"],[22,14,25,12],[22,16,25,14,"keyVal"],[22,22,25,20],[22,23,25,21,"value"],[22,28,25,26],[22,29,25,27,"slice"],[22,34,25,32],[22,35,25,33,"_offset"],[22,42,25,40],[22,44,25,42,"_offset"],[22,51,25,49],[22,54,25,52,"scriptLen"],[22,63,25,61],[23,6,26,4],[23,7,26,5],[23,8,26,6],[24,6,27,4,"_offset"],[24,13,27,11],[24,17,27,15,"scriptLen"],[24,26,27,24],[25,4,28,2],[26,4,29,2],[26,11,29,9],[27,6,29,11,"leaves"],[27,12,29,17],[27,14,29,19,"data"],[28,4,29,24],[28,5,29,25],[29,2,30,0],[30,2,31,0,"exports"],[30,9,31,7],[30,10,31,8,"decode"],[30,16,31,14],[30,19,31,17,"decode"],[30,25,31,23],[31,2,32,0],[31,11,32,9,"encode"],[31,17,32,15,"encode"],[31,18,32,16,"tree"],[31,22,32,20],[31,24,32,22],[32,4,32,22],[32,8,32,22,"_ref"],[32,12,32,22],[33,4,33,2],[33,8,33,8,"key"],[33,11,33,11],[33,14,33,14,"Buffer"],[33,20,33,20],[33,21,33,21,"from"],[33,25,33,25],[33,26,33,26],[33,27,33,27,"_$$_REQUIRE"],[33,38,33,27],[33,39,33,27,"_dependencyMap"],[33,53,33,27],[33,78,33,40,"OutputTypes"],[33,89,33,51],[33,90,33,52,"TAP_TREE"],[33,98,33,60],[33,99,33,61],[33,100,33,62],[34,4,34,2],[34,8,34,8,"bufs"],[34,12,34,12],[34,15,34,15],[34,16,34,15,"_ref"],[34,20,34,15],[34,25,34,17],[34,27,34,18,"concat"],[34,33,34,24],[34,34,34,24,"apply"],[34,39,34,24],[34,40,34,24,"_ref"],[34,44,34,24],[34,46,34,24,"_toConsumableArray"],[34,64,34,24],[34,65,35,7,"tree"],[34,69,35,11],[34,70,35,12,"leaves"],[34,76,35,18],[34,77,35,19,"map"],[34,80,35,22],[34,81,35,23],[34,91,35,23,"tapLeaf"],[34,98,35,30],[35,6,35,30],[35,13,35,34],[35,14,36,6,"Buffer"],[35,20,36,12],[35,21,36,13,"of"],[35,23,36,15],[35,24,36,16,"tapLeaf"],[35,31,36,23],[35,32,36,24,"depth"],[35,37,36,29],[35,39,36,31,"tapLeaf"],[35,46,36,38],[35,47,36,39,"leafVersion"],[35,58,36,50],[35,59,36,51],[35,61,37,6,"_$$_REQUIRE"],[35,72,37,6],[35,73,37,6,"_dependencyMap"],[35,87,37,6],[35,105,37,14,"encode"],[35,111,37,20],[35,112,37,21,"tapLeaf"],[35,119,37,28],[35,120,37,29,"script"],[35,126,37,35],[35,127,37,36,"length"],[35,133,37,42],[35,134,37,43],[35,136,38,6,"tapLeaf"],[35,143,38,13],[35,144,38,14,"script"],[35,150,38,20],[35,151,39,5],[36,4,39,5],[36,6,39,6],[36,7,40,2],[36,8,40,3],[37,4,41,2],[37,11,41,9],[38,6,42,4,"key"],[38,9,42,7],[38,11,42,4,"key"],[38,14,42,7],[39,6,43,4,"value"],[39,11,43,9],[39,13,43,11,"Buffer"],[39,19,43,17],[39,20,43,18,"concat"],[39,26,43,24],[39,27,43,25,"bufs"],[39,31,43,29],[40,4,44,2],[40,5,44,3],[41,2,45,0],[42,2,46,0,"exports"],[42,9,46,7],[42,10,46,8,"encode"],[42,16,46,14],[42,19,46,17,"encode"],[42,25,46,23],[43,2,47,0,"exports"],[43,9,47,7],[43,10,47,8,"expected"],[43,18,47,16],[43,21,48,2],[43,92,48,73],[44,2,49,0],[44,11,49,9,"check"],[44,16,49,14,"check"],[44,17,49,15,"data"],[44,21,49,19],[44,23,49,21],[45,4,50,2],[45,11,51,4,"Array"],[45,16,51,9],[45,17,51,10,"isArray"],[45,24,51,17],[45,25,51,18,"data"],[45,29,51,22],[45,30,51,23,"leaves"],[45,36,51,29],[45,37,51,30],[45,41,52,4,"data"],[45,45,52,8],[45,46,52,9,"leaves"],[45,52,52,15],[45,53,52,16,"every"],[45,58,52,21],[45,59,53,6],[45,69,53,6,"tapLeaf"],[45,76,53,13],[46,6,53,13],[46,13,54,8,"tapLeaf"],[46,20,54,15],[46,21,54,16,"depth"],[46,26,54,21],[46,30,54,25],[46,31,54,26],[46,35,55,8,"tapLeaf"],[46,42,55,15],[46,43,55,16,"depth"],[46,48,55,21],[46,52,55,25],[46,55,55,28],[46,59,56,8],[46,60,56,9,"tapLeaf"],[46,67,56,16],[46,68,56,17,"leafVersion"],[46,79,56,28],[46,82,56,31],[46,86,56,35],[46,92,56,41,"tapLeaf"],[46,99,56,48],[46,100,56,49,"leafVersion"],[46,111,56,60],[46,115,57,8,"Buffer"],[46,121,57,14],[46,122,57,15,"isBuffer"],[46,130,57,23],[46,131,57,24,"tapLeaf"],[46,138,57,31],[46,139,57,32,"script"],[46,145,57,38],[46,146,57,39],[47,4,57,39],[47,5,58,4],[47,6,58,5],[48,2,60,0],[49,2,61,0,"exports"],[49,9,61,7],[49,10,61,8,"check"],[49,15,61,13],[49,18,61,16,"check"],[49,23,61,21],[50,2,62,0],[50,11,62,9,"canAdd"],[50,17,62,15,"canAdd"],[50,18,62,16,"currentData"],[50,29,62,27],[50,31,62,29,"newData"],[50,38,62,36],[50,40,62,38],[51,4,63,2],[51,11,63,9],[51,12,63,10],[51,13,63,11,"currentData"],[51,24,63,22],[51,28,63,26],[51,29,63,27],[51,30,63,28,"newData"],[51,37,63,35],[51,41,63,39,"currentData"],[51,52,63,50],[51,53,63,51,"tapTree"],[51,60,63,58],[51,65,63,63,"undefined"],[51,74,63,72],[52,2,64,0],[53,2,65,0,"exports"],[53,9,65,7],[53,10,65,8,"canAdd"],[53,16,65,14],[53,19,65,17,"canAdd"],[53,25,65,23],[54,0,65,24],[54,3]],"functionMap":{"names":["<global>","decode","encode","tree.leaves.map$argument_0","check","data.leaves.every$argument_0","canAdd"],"mappings":"AAA;ACI;CDyB;AEE;uBCG;KDI;CFM;AII;MCI;uCDI;CJG;AME;CNE"}},"type":"js/module"}]}