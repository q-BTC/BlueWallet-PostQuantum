{"dependencies":[{"name":"./mode","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":30,"index":30}}],"key":"kP3UoMWYBHY2j1qDa+F4rCzyVl0="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function NumericData(data) {\n    this.mode = _$$_REQUIRE(_dependencyMap[0], \"./mode\").NUMERIC;\n    this.data = data.toString();\n  }\n  NumericData.getBitsLength = function getBitsLength(length) {\n    return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);\n  };\n  NumericData.prototype.getLength = function getLength() {\n    return this.data.length;\n  };\n  NumericData.prototype.getBitsLength = function getBitsLength() {\n    return NumericData.getBitsLength(this.data.length);\n  };\n  NumericData.prototype.write = function write(bitBuffer) {\n    var i, group, value;\n\n    // The input data string is divided into groups of three digits,\n    // and each group is converted to its 10-bit binary equivalent.\n    for (i = 0; i + 3 <= this.data.length; i += 3) {\n      group = this.data.substr(i, 3);\n      value = parseInt(group, 10);\n      bitBuffer.put(value, 10);\n    }\n\n    // If the number of input digits is not an exact multiple of three,\n    // the final one or two digits are converted to 4 or 7 bits respectively.\n    var remainingNum = this.data.length - i;\n    if (remainingNum > 0) {\n      group = this.data.substr(i);\n      value = parseInt(group, 10);\n      bitBuffer.put(value, remainingNum * 3 + 1);\n    }\n  };\n  module.exports = NumericData;\n});","lineCount":36,"map":[[2,2,3,0],[2,11,3,9,"NumericData"],[2,22,3,20,"NumericData"],[2,23,3,22,"data"],[2,27,3,26],[2,29,3,28],[3,4,4,2],[3,8,4,6],[3,9,4,7,"mode"],[3,13,4,11],[3,16,4,14,"_$$_REQUIRE"],[3,27,4,14],[3,28,4,14,"_dependencyMap"],[3,42,4,14],[3,57,4,19,"NUMERIC"],[3,64,4,26],[4,4,5,2],[4,8,5,6],[4,9,5,7,"data"],[4,13,5,11],[4,16,5,14,"data"],[4,20,5,18],[4,21,5,19,"toString"],[4,29,5,27],[4,30,5,28],[4,31,5,29],[5,2,6,0],[6,2,8,0,"NumericData"],[6,13,8,11],[6,14,8,12,"getBitsLength"],[6,27,8,25],[6,30,8,28],[6,39,8,37,"getBitsLength"],[6,52,8,50,"getBitsLength"],[6,53,8,52,"length"],[6,59,8,58],[6,61,8,60],[7,4,9,2],[7,11,9,9],[7,13,9,11],[7,16,9,14,"Math"],[7,20,9,18],[7,21,9,19,"floor"],[7,26,9,24],[7,27,9,25,"length"],[7,33,9,31],[7,36,9,34],[7,37,9,35],[7,38,9,36],[7,42,9,41,"length"],[7,48,9,47],[7,51,9,50],[7,52,9,51],[7,55,9,57,"length"],[7,61,9,63],[7,64,9,66],[7,65,9,67],[7,68,9,71],[7,69,9,72],[7,72,9,75],[7,73,9,76],[7,76,9,80],[7,77,9,81],[7,78,9,82],[8,2,10,0],[8,3,10,1],[9,2,12,0,"NumericData"],[9,13,12,11],[9,14,12,12,"prototype"],[9,23,12,21],[9,24,12,22,"getLength"],[9,33,12,31],[9,36,12,34],[9,45,12,43,"getLength"],[9,54,12,52,"getLength"],[9,55,12,52],[9,57,12,56],[10,4,13,2],[10,11,13,9],[10,15,13,13],[10,16,13,14,"data"],[10,20,13,18],[10,21,13,19,"length"],[10,27,13,25],[11,2,14,0],[11,3,14,1],[12,2,16,0,"NumericData"],[12,13,16,11],[12,14,16,12,"prototype"],[12,23,16,21],[12,24,16,22,"getBitsLength"],[12,37,16,35],[12,40,16,38],[12,49,16,47,"getBitsLength"],[12,62,16,60,"getBitsLength"],[12,63,16,60],[12,65,16,64],[13,4,17,2],[13,11,17,9,"NumericData"],[13,22,17,20],[13,23,17,21,"getBitsLength"],[13,36,17,34],[13,37,17,35],[13,41,17,39],[13,42,17,40,"data"],[13,46,17,44],[13,47,17,45,"length"],[13,53,17,51],[13,54,17,52],[14,2,18,0],[14,3,18,1],[15,2,20,0,"NumericData"],[15,13,20,11],[15,14,20,12,"prototype"],[15,23,20,21],[15,24,20,22,"write"],[15,29,20,27],[15,32,20,30],[15,41,20,39,"write"],[15,46,20,44,"write"],[15,47,20,46,"bitBuffer"],[15,56,20,55],[15,58,20,57],[16,4,21,2],[16,8,21,6,"i"],[16,9,21,7],[16,11,21,9,"group"],[16,16,21,14],[16,18,21,16,"value"],[16,23,21,21],[18,4,23,2],[19,4,24,2],[20,4,25,2],[20,9,25,7,"i"],[20,10,25,8],[20,13,25,11],[20,14,25,12],[20,16,25,14,"i"],[20,17,25,15],[20,20,25,18],[20,21,25,19],[20,25,25,23],[20,29,25,27],[20,30,25,28,"data"],[20,34,25,32],[20,35,25,33,"length"],[20,41,25,39],[20,43,25,41,"i"],[20,44,25,42],[20,48,25,46],[20,49,25,47],[20,51,25,49],[21,6,26,4,"group"],[21,11,26,9],[21,14,26,12],[21,18,26,16],[21,19,26,17,"data"],[21,23,26,21],[21,24,26,22,"substr"],[21,30,26,28],[21,31,26,29,"i"],[21,32,26,30],[21,34,26,32],[21,35,26,33],[21,36,26,34],[22,6,27,4,"value"],[22,11,27,9],[22,14,27,12,"parseInt"],[22,22,27,20],[22,23,27,21,"group"],[22,28,27,26],[22,30,27,28],[22,32,27,30],[22,33,27,31],[23,6,29,4,"bitBuffer"],[23,15,29,13],[23,16,29,14,"put"],[23,19,29,17],[23,20,29,18,"value"],[23,25,29,23],[23,27,29,25],[23,29,29,27],[23,30,29,28],[24,4,30,2],[26,4,32,2],[27,4,33,2],[28,4,34,2],[28,8,34,8,"remainingNum"],[28,20,34,20],[28,23,34,23],[28,27,34,27],[28,28,34,28,"data"],[28,32,34,32],[28,33,34,33,"length"],[28,39,34,39],[28,42,34,42,"i"],[28,43,34,43],[29,4,35,2],[29,8,35,6,"remainingNum"],[29,20,35,18],[29,23,35,21],[29,24,35,22],[29,26,35,24],[30,6,36,4,"group"],[30,11,36,9],[30,14,36,12],[30,18,36,16],[30,19,36,17,"data"],[30,23,36,21],[30,24,36,22,"substr"],[30,30,36,28],[30,31,36,29,"i"],[30,32,36,30],[30,33,36,31],[31,6,37,4,"value"],[31,11,37,9],[31,14,37,12,"parseInt"],[31,22,37,20],[31,23,37,21,"group"],[31,28,37,26],[31,30,37,28],[31,32,37,30],[31,33,37,31],[32,6,39,4,"bitBuffer"],[32,15,39,13],[32,16,39,14,"put"],[32,19,39,17],[32,20,39,18,"value"],[32,25,39,23],[32,27,39,25,"remainingNum"],[32,39,39,37],[32,42,39,40],[32,43,39,41],[32,46,39,44],[32,47,39,45],[32,48,39,46],[33,4,40,2],[34,2,41,0],[34,3,41,1],[35,2,43,0,"module"],[35,8,43,6],[35,9,43,7,"exports"],[35,16,43,14],[35,19,43,17,"NumericData"],[35,30,43,28],[36,0,43,28],[36,3]],"functionMap":{"names":["<global>","NumericData","getBitsLength","getLength","write"],"mappings":"AAA;ACE;CDG;4BEE;CFE;kCGE;CHE;sCEE;CFE;8BIE;CJqB"}},"type":"js/module"}]}