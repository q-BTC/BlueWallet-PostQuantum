{"dependencies":[{"name":"./utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":14,"index":14},"end":{"line":1,"column":32,"index":32}},{"start":{"line":1,"column":14,"index":14},"end":{"line":1,"column":32,"index":32}},{"start":{"line":1,"column":14,"index":14},"end":{"line":1,"column":32,"index":32}}],"key":"Arg6QRuIuy5D/jfcnxX1qJiHjX8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;\n  var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;\n  var G15_BCH = _$$_REQUIRE(_dependencyMap[0], \"./utils\").getBCHDigit(G15);\n\n  /**\n   * Returns format information with relative error correction bits\n   *\n   * The format information is a 15-bit sequence containing 5 data bits,\n   * with 10 error correction bits calculated using the (15, 5) BCH code.\n   *\n   * @param  {Number} errorCorrectionLevel Error correction level\n   * @param  {Number} mask                 Mask pattern\n   * @return {Number}                      Encoded format information bits\n   */\n  exports.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {\n    var data = errorCorrectionLevel.bit << 3 | mask;\n    var d = data << 10;\n    while (_$$_REQUIRE(_dependencyMap[0], \"./utils\").getBCHDigit(d) - G15_BCH >= 0) {\n      d ^= G15 << _$$_REQUIRE(_dependencyMap[0], \"./utils\").getBCHDigit(d) - G15_BCH;\n    }\n\n    // xor final data with mask pattern in order to ensure that\n    // no combination of Error Correction Level and data mask pattern\n    // will result in an all-zero data string\n    return (data << 10 | d) ^ G15_MASK;\n  };\n});","lineCount":28,"map":[[2,2,3,0],[2,6,3,6,"G15"],[2,9,3,9],[2,12,3,13],[2,13,3,14],[2,17,3,18],[2,19,3,20],[2,22,3,25],[2,23,3,26],[2,27,3,30],[2,28,3,32],[2,31,3,36],[2,32,3,37],[2,36,3,41],[2,37,3,43],[2,40,3,47],[2,41,3,48],[2,45,3,52],[2,46,3,54],[2,49,3,58],[2,50,3,59],[2,54,3,63],[2,55,3,65],[2,58,3,69],[2,59,3,70],[2,63,3,74],[2,64,3,76],[2,67,3,80],[2,68,3,81],[2,72,3,85],[2,73,3,87],[3,2,4,0],[3,6,4,6,"G15_MASK"],[3,14,4,14],[3,17,4,18],[3,18,4,19],[3,22,4,23],[3,24,4,25],[3,27,4,30],[3,28,4,31],[3,32,4,35],[3,34,4,38],[3,37,4,42],[3,38,4,43],[3,42,4,47],[3,44,4,50],[3,47,4,54],[3,48,4,55],[3,52,4,59],[3,53,4,61],[3,56,4,65],[3,57,4,66],[3,61,4,70],[3,62,4,72],[4,2,5,0],[4,6,5,6,"G15_BCH"],[4,13,5,13],[4,16,5,16,"_$$_REQUIRE"],[4,27,5,16],[4,28,5,16,"_dependencyMap"],[4,42,5,16],[4,58,5,22,"getBCHDigit"],[4,69,5,33],[4,70,5,34,"G15"],[4,73,5,37],[4,74,5,38],[6,2,7,0],[7,0,8,0],[8,0,9,0],[9,0,10,0],[10,0,11,0],[11,0,12,0],[12,0,13,0],[13,0,14,0],[14,0,15,0],[15,0,16,0],[16,2,17,0,"exports"],[16,9,17,7],[16,10,17,8,"getEncodedBits"],[16,24,17,22],[16,27,17,25],[16,36,17,34,"getEncodedBits"],[16,50,17,48,"getEncodedBits"],[16,51,17,50,"errorCorrectionLevel"],[16,71,17,70],[16,73,17,72,"mask"],[16,77,17,76],[16,79,17,78],[17,4,18,2],[17,8,18,8,"data"],[17,12,18,12],[17,15,18,17,"errorCorrectionLevel"],[17,35,18,37],[17,36,18,38,"bit"],[17,39,18,41],[17,43,18,45],[17,44,18,46],[17,47,18,50,"mask"],[17,51,18,55],[18,4,19,2],[18,8,19,6,"d"],[18,9,19,7],[18,12,19,10,"data"],[18,16,19,14],[18,20,19,18],[18,22,19,20],[19,4,21,2],[19,11,21,9,"_$$_REQUIRE"],[19,22,21,9],[19,23,21,9,"_dependencyMap"],[19,37,21,9],[19,53,21,15,"getBCHDigit"],[19,64,21,26],[19,65,21,27,"d"],[19,66,21,28],[19,67,21,29],[19,70,21,32,"G15_BCH"],[19,77,21,39],[19,81,21,43],[19,82,21,44],[19,84,21,46],[20,6,22,4,"d"],[20,7,22,5],[20,11,22,10,"G15"],[20,14,22,13],[20,18,22,18,"_$$_REQUIRE"],[20,29,22,18],[20,30,22,18,"_dependencyMap"],[20,44,22,18],[20,60,22,24,"getBCHDigit"],[20,71,22,35],[20,72,22,36,"d"],[20,73,22,37],[20,74,22,38],[20,77,22,41,"G15_BCH"],[20,84,22,50],[21,4,23,2],[23,4,25,2],[24,4,26,2],[25,4,27,2],[26,4,28,2],[26,11,28,9],[26,12,28,11,"data"],[26,16,28,15],[26,20,28,19],[26,22,28,21],[26,25,28,25,"d"],[26,26,28,26],[26,30,28,30,"G15_MASK"],[26,38,28,38],[27,2,29,0],[27,3,29,1],[28,0,29,1],[28,3]],"functionMap":{"names":["<global>","getEncodedBits"],"mappings":"AAA;yBCgB;CDY"}},"type":"js/module"}]}