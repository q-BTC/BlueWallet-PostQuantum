{"dependencies":[{"name":"../utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":13,"index":127},"end":{"line":6,"column":25,"index":139}},{"start":{"line":7,"column":17,"index":158},"end":{"line":7,"column":33,"index":174}},{"start":{"line":7,"column":17,"index":158},"end":{"line":7,"column":33,"index":174}},{"start":{"line":5,"column":12,"index":93},"end":{"line":5,"column":31,"index":112}},{"start":{"line":5,"column":12,"index":93},"end":{"line":5,"column":31,"index":112}},{"start":{"line":5,"column":12,"index":93},"end":{"line":5,"column":31,"index":112}},{"start":{"line":5,"column":12,"index":93},"end":{"line":5,"column":31,"index":112}}],"key":"RFGtgFE/Tu4zdfnbMKbFHDM/T4I="}},{"name":"../curves","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":13,"index":59},"end":{"line":4,"column":33,"index":79}}],"key":"THepG+iSmaA7+l1asK/DPPTMaH4="}},{"name":"hash.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":11,"index":26},"end":{"line":3,"column":29,"index":44}}],"key":"wgL2kNc06mq/tMLGadAVxXPgynA="}},{"name":"./key","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":14,"index":190},"end":{"line":8,"column":30,"index":206}},{"start":{"line":8,"column":14,"index":190},"end":{"line":8,"column":30,"index":206}}],"key":"c2icHT5wjuk5iYUuCG2NMGWD6xE="}},{"name":"./signature","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":16,"index":224},"end":{"line":9,"column":38,"index":246}},{"start":{"line":9,"column":16,"index":224},"end":{"line":9,"column":38,"index":246}}],"key":"MNBHEq71uolxlMEMq/nRow+dvKY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  function EDDSA(curve) {\n    _$$_REQUIRE(_dependencyMap[0], \"../utils\").assert(curve === 'ed25519', 'only tested with ed25519 so far');\n    if (!(this instanceof EDDSA)) return new EDDSA(curve);\n    curve = _$$_REQUIRE(_dependencyMap[1], \"../curves\")[curve].curve;\n    this.curve = curve;\n    this.g = curve.g;\n    this.g.precompute(curve.n.bitLength() + 1);\n    this.pointClass = curve.point().constructor;\n    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n    this.hash = _$$_REQUIRE(_dependencyMap[2], \"hash.js\").sha512;\n  }\n  module.exports = EDDSA;\n\n  /**\n  * @param {Array|String} message - message bytes\n  * @param {Array|String|KeyPair} secret - secret bytes or a keypair\n  * @returns {Signature} - signature\n  */\n  EDDSA.prototype.sign = function sign(message, secret) {\n    message = _$$_REQUIRE(_dependencyMap[0], \"../utils\").parseBytes(message);\n    var key = this.keyFromSecret(secret);\n    var r = this.hashInt(key.messagePrefix(), message);\n    var R = this.g.mul(r);\n    var Rencoded = this.encodePoint(R);\n    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());\n    var S = r.add(s_).umod(this.curve.n);\n    return this.makeSignature({\n      R: R,\n      S: S,\n      Rencoded: Rencoded\n    });\n  };\n\n  /**\n  * @param {Array} message - message bytes\n  * @param {Array|String|Signature} sig - sig bytes\n  * @param {Array|String|Point|KeyPair} pub - public key\n  * @returns {Boolean} - true if public key matches sig of message\n  */\n  EDDSA.prototype.verify = function verify(message, sig, pub) {\n    message = _$$_REQUIRE(_dependencyMap[0], \"../utils\").parseBytes(message);\n    sig = this.makeSignature(sig);\n    if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {\n      return false;\n    }\n    var key = this.keyFromPublic(pub);\n    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n    var SG = this.g.mul(sig.S());\n    var RplusAh = sig.R().add(key.pub().mul(h));\n    return RplusAh.eq(SG);\n  };\n  EDDSA.prototype.hashInt = function hashInt() {\n    var hash = this.hash();\n    for (var i = 0; i < arguments.length; i++) hash.update(arguments[i]);\n    return _$$_REQUIRE(_dependencyMap[0], \"../utils\").intFromLE(hash.digest()).umod(this.curve.n);\n  };\n  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n    return _$$_REQUIRE(_dependencyMap[3], \"./key\").fromPublic(this, pub);\n  };\n  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n    return _$$_REQUIRE(_dependencyMap[3], \"./key\").fromSecret(this, secret);\n  };\n  EDDSA.prototype.makeSignature = function makeSignature(sig) {\n    if (sig instanceof _$$_REQUIRE(_dependencyMap[4], \"./signature\")) return sig;\n    return new (_$$_REQUIRE(_dependencyMap[4], \"./signature\"))(this, sig);\n  };\n\n  /**\n  * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n  *\n  * EDDSA defines methods for encoding and decoding points and integers. These are\n  * helper convenience methods, that pass along to utility functions implied\n  * parameters.\n  *\n  */\n  EDDSA.prototype.encodePoint = function encodePoint(point) {\n    var enc = point.getY().toArray('le', this.encodingLength);\n    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n    return enc;\n  };\n  EDDSA.prototype.decodePoint = function decodePoint(bytes) {\n    bytes = _$$_REQUIRE(_dependencyMap[0], \"../utils\").parseBytes(bytes);\n    var lastIx = bytes.length - 1;\n    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n    var y = _$$_REQUIRE(_dependencyMap[0], \"../utils\").intFromLE(normed);\n    return this.curve.pointFromY(y, xIsOdd);\n  };\n  EDDSA.prototype.encodeInt = function encodeInt(num) {\n    return num.toArray('le', this.encodingLength);\n  };\n  EDDSA.prototype.decodeInt = function decodeInt(bytes) {\n    return _$$_REQUIRE(_dependencyMap[0], \"../utils\").intFromLE(bytes);\n  };\n  EDDSA.prototype.isPoint = function isPoint(val) {\n    return val instanceof this.pointClass;\n  };\n});","lineCount":101,"map":[[2,2,1,0],[2,14,1,12],[4,2,11,0],[4,11,11,9,"EDDSA"],[4,16,11,14,"EDDSA"],[4,17,11,15,"curve"],[4,22,11,20],[4,24,11,22],[5,4,12,2,"_$$_REQUIRE"],[5,15,12,2],[5,16,12,2,"_dependencyMap"],[5,30,12,2],[5,47,12,2,"assert"],[5,53,12,2],[5,54,12,9,"curve"],[5,59,12,14],[5,64,12,19],[5,73,12,28],[5,75,12,30],[5,108,12,63],[5,109,12,64],[6,4,14,2],[6,8,14,6],[6,10,14,8],[6,14,14,12],[6,26,14,24,"EDDSA"],[6,31,14,29],[6,32,14,30],[6,34,15,4],[6,41,15,11],[6,45,15,15,"EDDSA"],[6,50,15,20],[6,51,15,21,"curve"],[6,56,15,26],[6,57,15,27],[7,4,17,2,"curve"],[7,9,17,7],[7,12,17,10,"_$$_REQUIRE"],[7,23,17,10],[7,24,17,10,"_dependencyMap"],[7,38,17,10],[7,56,17,17,"curve"],[7,61,17,22],[7,62,17,23],[7,63,17,24,"curve"],[7,68,17,29],[8,4,18,2],[8,8,18,6],[8,9,18,7,"curve"],[8,14,18,12],[8,17,18,15,"curve"],[8,22,18,20],[9,4,19,2],[9,8,19,6],[9,9,19,7,"g"],[9,10,19,8],[9,13,19,11,"curve"],[9,18,19,16],[9,19,19,17,"g"],[9,20,19,18],[10,4,20,2],[10,8,20,6],[10,9,20,7,"g"],[10,10,20,8],[10,11,20,9,"precompute"],[10,21,20,19],[10,22,20,20,"curve"],[10,27,20,25],[10,28,20,26,"n"],[10,29,20,27],[10,30,20,28,"bitLength"],[10,39,20,37],[10,40,20,38],[10,41,20,39],[10,44,20,42],[10,45,20,43],[10,46,20,44],[11,4,22,2],[11,8,22,6],[11,9,22,7,"pointClass"],[11,19,22,17],[11,22,22,20,"curve"],[11,27,22,25],[11,28,22,26,"point"],[11,33,22,31],[11,34,22,32],[11,35,22,33],[11,36,22,34,"constructor"],[11,47,22,45],[12,4,23,2],[12,8,23,6],[12,9,23,7,"encodingLength"],[12,23,23,21],[12,26,23,24,"Math"],[12,30,23,28],[12,31,23,29,"ceil"],[12,35,23,33],[12,36,23,34,"curve"],[12,41,23,39],[12,42,23,40,"n"],[12,43,23,41],[12,44,23,42,"bitLength"],[12,53,23,51],[12,54,23,52],[12,55,23,53],[12,58,23,56],[12,59,23,57],[12,60,23,58],[13,4,24,2],[13,8,24,6],[13,9,24,7,"hash"],[13,13,24,11],[13,16,24,14,"_$$_REQUIRE"],[13,27,24,14],[13,28,24,14,"_dependencyMap"],[13,42,24,14],[13,58,24,19,"sha512"],[13,64,24,25],[14,2,25,0],[15,2,27,0,"module"],[15,8,27,6],[15,9,27,7,"exports"],[15,16,27,14],[15,19,27,17,"EDDSA"],[15,24,27,22],[17,2,29,0],[18,0,30,0],[19,0,31,0],[20,0,32,0],[21,0,33,0],[22,2,34,0,"EDDSA"],[22,7,34,5],[22,8,34,6,"prototype"],[22,17,34,15],[22,18,34,16,"sign"],[22,22,34,20],[22,25,34,23],[22,34,34,32,"sign"],[22,38,34,36,"sign"],[22,39,34,37,"message"],[22,46,34,44],[22,48,34,46,"secret"],[22,54,34,52],[22,56,34,54],[23,4,35,2,"message"],[23,11,35,9],[23,14,35,12,"_$$_REQUIRE"],[23,25,35,12],[23,26,35,12,"_dependencyMap"],[23,40,35,12],[23,57,35,12,"parseBytes"],[23,67,35,12],[23,68,35,23,"message"],[23,75,35,30],[23,76,35,31],[24,4,36,2],[24,8,36,6,"key"],[24,11,36,9],[24,14,36,12],[24,18,36,16],[24,19,36,17,"keyFromSecret"],[24,32,36,30],[24,33,36,31,"secret"],[24,39,36,37],[24,40,36,38],[25,4,37,2],[25,8,37,6,"r"],[25,9,37,7],[25,12,37,10],[25,16,37,14],[25,17,37,15,"hashInt"],[25,24,37,22],[25,25,37,23,"key"],[25,28,37,26],[25,29,37,27,"messagePrefix"],[25,42,37,40],[25,43,37,41],[25,44,37,42],[25,46,37,44,"message"],[25,53,37,51],[25,54,37,52],[26,4,38,2],[26,8,38,6,"R"],[26,9,38,7],[26,12,38,10],[26,16,38,14],[26,17,38,15,"g"],[26,18,38,16],[26,19,38,17,"mul"],[26,22,38,20],[26,23,38,21,"r"],[26,24,38,22],[26,25,38,23],[27,4,39,2],[27,8,39,6,"Rencoded"],[27,16,39,14],[27,19,39,17],[27,23,39,21],[27,24,39,22,"encodePoint"],[27,35,39,33],[27,36,39,34,"R"],[27,37,39,35],[27,38,39,36],[28,4,40,2],[28,8,40,6,"s_"],[28,10,40,8],[28,13,40,11],[28,17,40,15],[28,18,40,16,"hashInt"],[28,25,40,23],[28,26,40,24,"Rencoded"],[28,34,40,32],[28,36,40,34,"key"],[28,39,40,37],[28,40,40,38,"pubBytes"],[28,48,40,46],[28,49,40,47],[28,50,40,48],[28,52,40,50,"message"],[28,59,40,57],[28,60,40,58],[28,61,41,5,"mul"],[28,64,41,8],[28,65,41,9,"key"],[28,68,41,12],[28,69,41,13,"priv"],[28,73,41,17],[28,74,41,18],[28,75,41,19],[28,76,41,20],[29,4,42,2],[29,8,42,6,"S"],[29,9,42,7],[29,12,42,10,"r"],[29,13,42,11],[29,14,42,12,"add"],[29,17,42,15],[29,18,42,16,"s_"],[29,20,42,18],[29,21,42,19],[29,22,42,20,"umod"],[29,26,42,24],[29,27,42,25],[29,31,42,29],[29,32,42,30,"curve"],[29,37,42,35],[29,38,42,36,"n"],[29,39,42,37],[29,40,42,38],[30,4,43,2],[30,11,43,9],[30,15,43,13],[30,16,43,14,"makeSignature"],[30,29,43,27],[30,30,43,28],[31,6,43,30,"R"],[31,7,43,31],[31,9,43,33,"R"],[31,10,43,34],[32,6,43,36,"S"],[32,7,43,37],[32,9,43,39,"S"],[32,10,43,40],[33,6,43,42,"Rencoded"],[33,14,43,50],[33,16,43,52,"Rencoded"],[34,4,43,61],[34,5,43,62],[34,6,43,63],[35,2,44,0],[35,3,44,1],[37,2,46,0],[38,0,47,0],[39,0,48,0],[40,0,49,0],[41,0,50,0],[42,0,51,0],[43,2,52,0,"EDDSA"],[43,7,52,5],[43,8,52,6,"prototype"],[43,17,52,15],[43,18,52,16,"verify"],[43,24,52,22],[43,27,52,25],[43,36,52,34,"verify"],[43,42,52,40,"verify"],[43,43,52,41,"message"],[43,50,52,48],[43,52,52,50,"sig"],[43,55,52,53],[43,57,52,55,"pub"],[43,60,52,58],[43,62,52,60],[44,4,53,2,"message"],[44,11,53,9],[44,14,53,12,"_$$_REQUIRE"],[44,25,53,12],[44,26,53,12,"_dependencyMap"],[44,40,53,12],[44,57,53,12,"parseBytes"],[44,67,53,12],[44,68,53,23,"message"],[44,75,53,30],[44,76,53,31],[45,4,54,2,"sig"],[45,7,54,5],[45,10,54,8],[45,14,54,12],[45,15,54,13,"makeSignature"],[45,28,54,26],[45,29,54,27,"sig"],[45,32,54,30],[45,33,54,31],[46,4,55,2],[46,8,55,6,"sig"],[46,11,55,9],[46,12,55,10,"S"],[46,13,55,11],[46,14,55,12],[46,15,55,13],[46,16,55,14,"gte"],[46,19,55,17],[46,20,55,18,"sig"],[46,23,55,21],[46,24,55,22,"eddsa"],[46,29,55,27],[46,30,55,28,"curve"],[46,35,55,33],[46,36,55,34,"n"],[46,37,55,35],[46,38,55,36],[46,42,55,40,"sig"],[46,45,55,43],[46,46,55,44,"S"],[46,47,55,45],[46,48,55,46],[46,49,55,47],[46,50,55,48,"isNeg"],[46,55,55,53],[46,56,55,54],[46,57,55,55],[46,59,55,57],[47,6,56,4],[47,13,56,11],[47,18,56,16],[48,4,57,2],[49,4,58,2],[49,8,58,6,"key"],[49,11,58,9],[49,14,58,12],[49,18,58,16],[49,19,58,17,"keyFromPublic"],[49,32,58,30],[49,33,58,31,"pub"],[49,36,58,34],[49,37,58,35],[50,4,59,2],[50,8,59,6,"h"],[50,9,59,7],[50,12,59,10],[50,16,59,14],[50,17,59,15,"hashInt"],[50,24,59,22],[50,25,59,23,"sig"],[50,28,59,26],[50,29,59,27,"Rencoded"],[50,37,59,35],[50,38,59,36],[50,39,59,37],[50,41,59,39,"key"],[50,44,59,42],[50,45,59,43,"pubBytes"],[50,53,59,51],[50,54,59,52],[50,55,59,53],[50,57,59,55,"message"],[50,64,59,62],[50,65,59,63],[51,4,60,2],[51,8,60,6,"SG"],[51,10,60,8],[51,13,60,11],[51,17,60,15],[51,18,60,16,"g"],[51,19,60,17],[51,20,60,18,"mul"],[51,23,60,21],[51,24,60,22,"sig"],[51,27,60,25],[51,28,60,26,"S"],[51,29,60,27],[51,30,60,28],[51,31,60,29],[51,32,60,30],[52,4,61,2],[52,8,61,6,"RplusAh"],[52,15,61,13],[52,18,61,16,"sig"],[52,21,61,19],[52,22,61,20,"R"],[52,23,61,21],[52,24,61,22],[52,25,61,23],[52,26,61,24,"add"],[52,29,61,27],[52,30,61,28,"key"],[52,33,61,31],[52,34,61,32,"pub"],[52,37,61,35],[52,38,61,36],[52,39,61,37],[52,40,61,38,"mul"],[52,43,61,41],[52,44,61,42,"h"],[52,45,61,43],[52,46,61,44],[52,47,61,45],[53,4,62,2],[53,11,62,9,"RplusAh"],[53,18,62,16],[53,19,62,17,"eq"],[53,21,62,19],[53,22,62,20,"SG"],[53,24,62,22],[53,25,62,23],[54,2,63,0],[54,3,63,1],[55,2,65,0,"EDDSA"],[55,7,65,5],[55,8,65,6,"prototype"],[55,17,65,15],[55,18,65,16,"hashInt"],[55,25,65,23],[55,28,65,26],[55,37,65,35,"hashInt"],[55,44,65,42,"hashInt"],[55,45,65,42],[55,47,65,45],[56,4,66,2],[56,8,66,6,"hash"],[56,12,66,10],[56,15,66,13],[56,19,66,17],[56,20,66,18,"hash"],[56,24,66,22],[56,25,66,23],[56,26,66,24],[57,4,67,2],[57,9,67,7],[57,13,67,11,"i"],[57,14,67,12],[57,17,67,15],[57,18,67,16],[57,20,67,18,"i"],[57,21,67,19],[57,24,67,22,"arguments"],[57,33,67,31],[57,34,67,32,"length"],[57,40,67,38],[57,42,67,40,"i"],[57,43,67,41],[57,45,67,43],[57,47,68,4,"hash"],[57,51,68,8],[57,52,68,9,"update"],[57,58,68,15],[57,59,68,16,"arguments"],[57,68,68,25],[57,69,68,26,"i"],[57,70,68,27],[57,71,68,28],[57,72,68,29],[58,4,69,2],[58,11,69,9,"_$$_REQUIRE"],[58,22,69,9],[58,23,69,9,"_dependencyMap"],[58,37,69,9],[58,54,69,15,"intFromLE"],[58,63,69,24],[58,64,69,25,"hash"],[58,68,69,29],[58,69,69,30,"digest"],[58,75,69,36],[58,76,69,37],[58,77,69,38],[58,78,69,39],[58,79,69,40,"umod"],[58,83,69,44],[58,84,69,45],[58,88,69,49],[58,89,69,50,"curve"],[58,94,69,55],[58,95,69,56,"n"],[58,96,69,57],[58,97,69,58],[59,2,70,0],[59,3,70,1],[60,2,72,0,"EDDSA"],[60,7,72,5],[60,8,72,6,"prototype"],[60,17,72,15],[60,18,72,16,"keyFromPublic"],[60,31,72,29],[60,34,72,32],[60,43,72,41,"keyFromPublic"],[60,56,72,54,"keyFromPublic"],[60,57,72,55,"pub"],[60,60,72,58],[60,62,72,60],[61,4,73,2],[61,11,73,9,"_$$_REQUIRE"],[61,22,73,9],[61,23,73,9,"_dependencyMap"],[61,37,73,9],[61,51,73,17,"fromPublic"],[61,61,73,27],[61,62,73,28],[61,66,73,32],[61,68,73,34,"pub"],[61,71,73,37],[61,72,73,38],[62,2,74,0],[62,3,74,1],[63,2,76,0,"EDDSA"],[63,7,76,5],[63,8,76,6,"prototype"],[63,17,76,15],[63,18,76,16,"keyFromSecret"],[63,31,76,29],[63,34,76,32],[63,43,76,41,"keyFromSecret"],[63,56,76,54,"keyFromSecret"],[63,57,76,55,"secret"],[63,63,76,61],[63,65,76,63],[64,4,77,2],[64,11,77,9,"_$$_REQUIRE"],[64,22,77,9],[64,23,77,9,"_dependencyMap"],[64,37,77,9],[64,51,77,17,"fromSecret"],[64,61,77,27],[64,62,77,28],[64,66,77,32],[64,68,77,34,"secret"],[64,74,77,40],[64,75,77,41],[65,2,78,0],[65,3,78,1],[66,2,80,0,"EDDSA"],[66,7,80,5],[66,8,80,6,"prototype"],[66,17,80,15],[66,18,80,16,"makeSignature"],[66,31,80,29],[66,34,80,32],[66,43,80,41,"makeSignature"],[66,56,80,54,"makeSignature"],[66,57,80,55,"sig"],[66,60,80,58],[66,62,80,60],[67,4,81,2],[67,8,81,6,"sig"],[67,11,81,9],[67,23,81,9,"_$$_REQUIRE"],[67,34,81,9],[67,35,81,9,"_dependencyMap"],[67,49,81,9],[67,68,81,30],[67,70,82,4],[67,77,82,11,"sig"],[67,80,82,14],[68,4,83,2],[68,11,83,9],[68,16,83,9,"_$$_REQUIRE"],[68,27,83,9],[68,28,83,9,"_dependencyMap"],[68,42,83,9],[68,63,83,23],[68,67,83,27],[68,69,83,29,"sig"],[68,72,83,32],[68,73,83,33],[69,2,84,0],[69,3,84,1],[71,2,86,0],[72,0,87,0],[73,0,88,0],[74,0,89,0],[75,0,90,0],[76,0,91,0],[77,0,92,0],[78,0,93,0],[79,2,94,0,"EDDSA"],[79,7,94,5],[79,8,94,6,"prototype"],[79,17,94,15],[79,18,94,16,"encodePoint"],[79,29,94,27],[79,32,94,30],[79,41,94,39,"encodePoint"],[79,52,94,50,"encodePoint"],[79,53,94,51,"point"],[79,58,94,56],[79,60,94,58],[80,4,95,2],[80,8,95,6,"enc"],[80,11,95,9],[80,14,95,12,"point"],[80,19,95,17],[80,20,95,18,"getY"],[80,24,95,22],[80,25,95,23],[80,26,95,24],[80,27,95,25,"toArray"],[80,34,95,32],[80,35,95,33],[80,39,95,37],[80,41,95,39],[80,45,95,43],[80,46,95,44,"encodingLength"],[80,60,95,58],[80,61,95,59],[81,4,96,2,"enc"],[81,7,96,5],[81,8,96,6],[81,12,96,10],[81,13,96,11,"encodingLength"],[81,27,96,25],[81,30,96,28],[81,31,96,29],[81,32,96,30],[81,36,96,34,"point"],[81,41,96,39],[81,42,96,40,"getX"],[81,46,96,44],[81,47,96,45],[81,48,96,46],[81,49,96,47,"isOdd"],[81,54,96,52],[81,55,96,53],[81,56,96,54],[81,59,96,57],[81,63,96,61],[81,66,96,64],[81,67,96,65],[82,4,97,2],[82,11,97,9,"enc"],[82,14,97,12],[83,2,98,0],[83,3,98,1],[84,2,100,0,"EDDSA"],[84,7,100,5],[84,8,100,6,"prototype"],[84,17,100,15],[84,18,100,16,"decodePoint"],[84,29,100,27],[84,32,100,30],[84,41,100,39,"decodePoint"],[84,52,100,50,"decodePoint"],[84,53,100,51,"bytes"],[84,58,100,56],[84,60,100,58],[85,4,101,2,"bytes"],[85,9,101,7],[85,12,101,10,"_$$_REQUIRE"],[85,23,101,10],[85,24,101,10,"_dependencyMap"],[85,38,101,10],[85,55,101,16,"parseBytes"],[85,65,101,26],[85,66,101,27,"bytes"],[85,71,101,32],[85,72,101,33],[86,4,103,2],[86,8,103,6,"lastIx"],[86,14,103,12],[86,17,103,15,"bytes"],[86,22,103,20],[86,23,103,21,"length"],[86,29,103,27],[86,32,103,30],[86,33,103,31],[87,4,104,2],[87,8,104,6,"normed"],[87,14,104,12],[87,17,104,15,"bytes"],[87,22,104,20],[87,23,104,21,"slice"],[87,28,104,26],[87,29,104,27],[87,30,104,28],[87,32,104,30,"lastIx"],[87,38,104,36],[87,39,104,37],[87,40,104,38,"concat"],[87,46,104,44],[87,47,104,45,"bytes"],[87,52,104,50],[87,53,104,51,"lastIx"],[87,59,104,57],[87,60,104,58],[87,63,104,61],[87,64,104,62],[87,68,104,66],[87,69,104,67],[88,4,105,2],[88,8,105,6,"xIsOdd"],[88,14,105,12],[88,17,105,15],[88,18,105,16,"bytes"],[88,23,105,21],[88,24,105,22,"lastIx"],[88,30,105,28],[88,31,105,29],[88,34,105,32],[88,38,105,36],[88,44,105,42],[88,45,105,43],[89,4,107,2],[89,8,107,6,"y"],[89,9,107,7],[89,12,107,10,"_$$_REQUIRE"],[89,23,107,10],[89,24,107,10,"_dependencyMap"],[89,38,107,10],[89,55,107,16,"intFromLE"],[89,64,107,25],[89,65,107,26,"normed"],[89,71,107,32],[89,72,107,33],[90,4,108,2],[90,11,108,9],[90,15,108,13],[90,16,108,14,"curve"],[90,21,108,19],[90,22,108,20,"pointFromY"],[90,32,108,30],[90,33,108,31,"y"],[90,34,108,32],[90,36,108,34,"xIsOdd"],[90,42,108,40],[90,43,108,41],[91,2,109,0],[91,3,109,1],[92,2,111,0,"EDDSA"],[92,7,111,5],[92,8,111,6,"prototype"],[92,17,111,15],[92,18,111,16,"encodeInt"],[92,27,111,25],[92,30,111,28],[92,39,111,37,"encodeInt"],[92,48,111,46,"encodeInt"],[92,49,111,47,"num"],[92,52,111,50],[92,54,111,52],[93,4,112,2],[93,11,112,9,"num"],[93,14,112,12],[93,15,112,13,"toArray"],[93,22,112,20],[93,23,112,21],[93,27,112,25],[93,29,112,27],[93,33,112,31],[93,34,112,32,"encodingLength"],[93,48,112,46],[93,49,112,47],[94,2,113,0],[94,3,113,1],[95,2,115,0,"EDDSA"],[95,7,115,5],[95,8,115,6,"prototype"],[95,17,115,15],[95,18,115,16,"decodeInt"],[95,27,115,25],[95,30,115,28],[95,39,115,37,"decodeInt"],[95,48,115,46,"decodeInt"],[95,49,115,47,"bytes"],[95,54,115,52],[95,56,115,54],[96,4,116,2],[96,11,116,9,"_$$_REQUIRE"],[96,22,116,9],[96,23,116,9,"_dependencyMap"],[96,37,116,9],[96,54,116,15,"intFromLE"],[96,63,116,24],[96,64,116,25,"bytes"],[96,69,116,30],[96,70,116,31],[97,2,117,0],[97,3,117,1],[98,2,119,0,"EDDSA"],[98,7,119,5],[98,8,119,6,"prototype"],[98,17,119,15],[98,18,119,16,"isPoint"],[98,25,119,23],[98,28,119,26],[98,37,119,35,"isPoint"],[98,44,119,42,"isPoint"],[98,45,119,43,"val"],[98,48,119,46],[98,50,119,48],[99,4,120,2],[99,11,120,9,"val"],[99,14,120,12],[99,26,120,24],[99,30,120,28],[99,31,120,29,"pointClass"],[99,41,120,39],[100,2,121,0],[100,3,121,1],[101,0,121,2],[101,3]],"functionMap":{"names":["<global>","EDDSA","sign","verify","hashInt","keyFromPublic","keyFromSecret","makeSignature","encodePoint","decodePoint","encodeInt","decodeInt","isPoint"],"mappings":"AAA;ACU;CDc;uBES;CFU;yBGQ;CHW;0BIE;CJK;gCKE;CLE;gCME;CNE;gCOE;CPI;8BQU;CRI;8BSE;CTS;4BUE;CVE;4BWE;CXE;0BYE;CZE"}},"type":"js/module"}]}