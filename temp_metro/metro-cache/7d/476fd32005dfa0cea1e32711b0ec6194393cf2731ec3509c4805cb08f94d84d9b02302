{"dependencies":[{"name":"./point","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":12,"index":77},"end":{"line":4,"column":30,"index":95}},{"start":{"line":4,"column":12,"index":77},"end":{"line":4,"column":30,"index":95}},{"start":{"line":4,"column":12,"index":77},"end":{"line":4,"column":30,"index":95}}],"key":"WNzoKDXmYiXXfuDH0Yp0aCwFhfI="}},{"name":"bigi","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":17,"index":48},"end":{"line":2,"column":32,"index":63}},{"start":{"line":2,"column":17,"index":48},"end":{"line":2,"column":32,"index":63}}],"key":"q6QfkLyqHnq7dS8FK7xihddCqiE="}},{"name":"assert","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":30,"index":30}},{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":30,"index":30}},{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":30,"index":30}}],"key":"Umsy3wQQm6DbjafRIeuw3teOkUU="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function Curve(p, a, b, Gx, Gy, n, h) {\n    this.p = p;\n    this.a = a;\n    this.b = b;\n    this.G = _$$_REQUIRE(_dependencyMap[0], \"./point\").fromAffine(this, Gx, Gy);\n    this.n = n;\n    this.h = h;\n    this.infinity = new (_$$_REQUIRE(_dependencyMap[0], \"./point\"))(this, null, null, _$$_REQUIRE(_dependencyMap[1], \"bigi\").ZERO);\n\n    // result caching\n    this.pOverFour = p.add(_$$_REQUIRE(_dependencyMap[1], \"bigi\").ONE).shiftRight(2);\n\n    // determine size of p in bytes\n    this.pLength = Math.floor((this.p.bitLength() + 7) / 8);\n  }\n  Curve.prototype.pointFromX = function (isOdd, x) {\n    var alpha = x.pow(3).add(this.a.multiply(x)).add(this.b).mod(this.p);\n    var beta = alpha.modPow(this.pOverFour, this.p); // XXX: not compatible with all curves\n\n    var y = beta;\n    if (beta.isEven() ^ !isOdd) {\n      y = this.p.subtract(y); // -y % p\n    }\n    return _$$_REQUIRE(_dependencyMap[0], \"./point\").fromAffine(this, x, y);\n  };\n  Curve.prototype.isInfinity = function (Q) {\n    if (Q === this.infinity) return true;\n    return Q.z.signum() === 0 && Q.y.signum() !== 0;\n  };\n  Curve.prototype.isOnCurve = function (Q) {\n    if (this.isInfinity(Q)) return true;\n    var x = Q.affineX;\n    var y = Q.affineY;\n    var a = this.a;\n    var b = this.b;\n    var p = this.p;\n\n    // Check that xQ and yQ are integers in the interval [0, p - 1]\n    if (x.signum() < 0 || x.compareTo(p) >= 0) return false;\n    if (y.signum() < 0 || y.compareTo(p) >= 0) return false;\n\n    // and check that y^2 = x^3 + ax + b (mod p)\n    var lhs = y.square().mod(p);\n    var rhs = x.pow(3).add(a.multiply(x)).add(b).mod(p);\n    return lhs.equals(rhs);\n  };\n\n  /**\n   * Validate an elliptic curve point.\n   *\n   * See SEC 1, section 3.2.2.1: Elliptic Curve Public Key Validation Primitive\n   */\n  Curve.prototype.validate = function (Q) {\n    // Check Q != O\n    _$$_REQUIRE(_dependencyMap[2], \"assert\")(!this.isInfinity(Q), 'Point is at infinity');\n    _$$_REQUIRE(_dependencyMap[2], \"assert\")(this.isOnCurve(Q), 'Point is not on the curve');\n\n    // Check nQ = O (where Q is a scalar multiple of G)\n    var nQ = Q.multiply(this.n);\n    _$$_REQUIRE(_dependencyMap[2], \"assert\")(this.isInfinity(nQ), 'Point is not a scalar multiple of G');\n    return true;\n  };\n  module.exports = Curve;\n});","lineCount":65,"map":[[2,2,6,0],[2,11,6,9,"Curve"],[2,16,6,14,"Curve"],[2,17,6,16,"p"],[2,18,6,17],[2,20,6,19,"a"],[2,21,6,20],[2,23,6,22,"b"],[2,24,6,23],[2,26,6,25,"Gx"],[2,28,6,27],[2,30,6,29,"Gy"],[2,32,6,31],[2,34,6,33,"n"],[2,35,6,34],[2,37,6,36,"h"],[2,38,6,37],[2,40,6,39],[3,4,7,2],[3,8,7,6],[3,9,7,7,"p"],[3,10,7,8],[3,13,7,11,"p"],[3,14,7,12],[4,4,8,2],[4,8,8,6],[4,9,8,7,"a"],[4,10,8,8],[4,13,8,11,"a"],[4,14,8,12],[5,4,9,2],[5,8,9,6],[5,9,9,7,"b"],[5,10,9,8],[5,13,9,11,"b"],[5,14,9,12],[6,4,10,2],[6,8,10,6],[6,9,10,7,"G"],[6,10,10,8],[6,13,10,11,"_$$_REQUIRE"],[6,24,10,11],[6,25,10,11,"_dependencyMap"],[6,39,10,11],[6,55,10,17,"fromAffine"],[6,65,10,27],[6,66,10,28],[6,70,10,32],[6,72,10,34,"Gx"],[6,74,10,36],[6,76,10,38,"Gy"],[6,78,10,40],[6,79,10,41],[7,4,11,2],[7,8,11,6],[7,9,11,7,"n"],[7,10,11,8],[7,13,11,11,"n"],[7,14,11,12],[8,4,12,2],[8,8,12,6],[8,9,12,7,"h"],[8,10,12,8],[8,13,12,11,"h"],[8,14,12,12],[9,4,14,2],[9,8,14,6],[9,9,14,7,"infinity"],[9,17,14,15],[9,20,14,18],[9,25,14,18,"_$$_REQUIRE"],[9,36,14,18],[9,37,14,18,"_dependencyMap"],[9,51,14,18],[9,68,14,28],[9,72,14,32],[9,74,14,34],[9,78,14,38],[9,80,14,40],[9,84,14,44],[9,86,14,46,"_$$_REQUIRE"],[9,97,14,46],[9,98,14,46,"_dependencyMap"],[9,112,14,46],[9,125,14,57,"ZERO"],[9,129,14,61],[9,130,14,62],[11,4,16,2],[12,4,17,2],[12,8,17,6],[12,9,17,7,"pOverFour"],[12,18,17,16],[12,21,17,19,"p"],[12,22,17,20],[12,23,17,21,"add"],[12,26,17,24],[12,27,17,25,"_$$_REQUIRE"],[12,38,17,25],[12,39,17,25,"_dependencyMap"],[12,53,17,25],[12,66,17,36,"ONE"],[12,69,17,39],[12,70,17,40],[12,71,17,41,"shiftRight"],[12,81,17,51],[12,82,17,52],[12,83,17,53],[12,84,17,54],[14,4,19,2],[15,4,20,2],[15,8,20,6],[15,9,20,7,"pLength"],[15,16,20,14],[15,19,20,17,"Math"],[15,23,20,21],[15,24,20,22,"floor"],[15,29,20,27],[15,30,20,28],[15,31,20,29],[15,35,20,33],[15,36,20,34,"p"],[15,37,20,35],[15,38,20,36,"bitLength"],[15,47,20,45],[15,48,20,46],[15,49,20,47],[15,52,20,50],[15,53,20,51],[15,57,20,55],[15,58,20,56],[15,59,20,57],[16,2,21,0],[17,2,23,0,"Curve"],[17,7,23,5],[17,8,23,6,"prototype"],[17,17,23,15],[17,18,23,16,"pointFromX"],[17,28,23,26],[17,31,23,29],[17,41,23,39,"isOdd"],[17,46,23,44],[17,48,23,46,"x"],[17,49,23,47],[17,51,23,49],[18,4,24,2],[18,8,24,6,"alpha"],[18,13,24,11],[18,16,24,14,"x"],[18,17,24,15],[18,18,24,16,"pow"],[18,21,24,19],[18,22,24,20],[18,23,24,21],[18,24,24,22],[18,25,24,23,"add"],[18,28,24,26],[18,29,24,27],[18,33,24,31],[18,34,24,32,"a"],[18,35,24,33],[18,36,24,34,"multiply"],[18,44,24,42],[18,45,24,43,"x"],[18,46,24,44],[18,47,24,45],[18,48,24,46],[18,49,24,47,"add"],[18,52,24,50],[18,53,24,51],[18,57,24,55],[18,58,24,56,"b"],[18,59,24,57],[18,60,24,58],[18,61,24,59,"mod"],[18,64,24,62],[18,65,24,63],[18,69,24,67],[18,70,24,68,"p"],[18,71,24,69],[18,72,24,70],[19,4,25,2],[19,8,25,6,"beta"],[19,12,25,10],[19,15,25,13,"alpha"],[19,20,25,18],[19,21,25,19,"modPow"],[19,27,25,25],[19,28,25,26],[19,32,25,30],[19,33,25,31,"pOverFour"],[19,42,25,40],[19,44,25,42],[19,48,25,46],[19,49,25,47,"p"],[19,50,25,48],[19,51,25,49],[19,53,25,50],[21,4,27,2],[21,8,27,6,"y"],[21,9,27,7],[21,12,27,10,"beta"],[21,16,27,14],[22,4,28,2],[22,8,28,6,"beta"],[22,12,28,10],[22,13,28,11,"isEven"],[22,19,28,17],[22,20,28,18],[22,21,28,19],[22,24,28,22],[22,25,28,23,"isOdd"],[22,30,28,28],[22,32,28,30],[23,6,29,4,"y"],[23,7,29,5],[23,10,29,8],[23,14,29,12],[23,15,29,13,"p"],[23,16,29,14],[23,17,29,15,"subtract"],[23,25,29,23],[23,26,29,24,"y"],[23,27,29,25],[23,28,29,26],[23,30,29,27],[24,4,30,2],[25,4,32,2],[25,11,32,9,"_$$_REQUIRE"],[25,22,32,9],[25,23,32,9,"_dependencyMap"],[25,37,32,9],[25,53,32,15,"fromAffine"],[25,63,32,25],[25,64,32,26],[25,68,32,30],[25,70,32,32,"x"],[25,71,32,33],[25,73,32,35,"y"],[25,74,32,36],[25,75,32,37],[26,2,33,0],[26,3,33,1],[27,2,35,0,"Curve"],[27,7,35,5],[27,8,35,6,"prototype"],[27,17,35,15],[27,18,35,16,"isInfinity"],[27,28,35,26],[27,31,35,29],[27,41,35,39,"Q"],[27,42,35,40],[27,44,35,42],[28,4,36,2],[28,8,36,6,"Q"],[28,9,36,7],[28,14,36,12],[28,18,36,16],[28,19,36,17,"infinity"],[28,27,36,25],[28,29,36,27],[28,36,36,34],[28,40,36,38],[29,4,38,2],[29,11,38,9,"Q"],[29,12,38,10],[29,13,38,11,"z"],[29,14,38,12],[29,15,38,13,"signum"],[29,21,38,19],[29,22,38,20],[29,23,38,21],[29,28,38,26],[29,29,38,27],[29,33,38,31,"Q"],[29,34,38,32],[29,35,38,33,"y"],[29,36,38,34],[29,37,38,35,"signum"],[29,43,38,41],[29,44,38,42],[29,45,38,43],[29,50,38,48],[29,51,38,49],[30,2,39,0],[30,3,39,1],[31,2,41,0,"Curve"],[31,7,41,5],[31,8,41,6,"prototype"],[31,17,41,15],[31,18,41,16,"isOnCurve"],[31,27,41,25],[31,30,41,28],[31,40,41,38,"Q"],[31,41,41,39],[31,43,41,41],[32,4,42,2],[32,8,42,6],[32,12,42,10],[32,13,42,11,"isInfinity"],[32,23,42,21],[32,24,42,22,"Q"],[32,25,42,23],[32,26,42,24],[32,28,42,26],[32,35,42,33],[32,39,42,37],[33,4,44,2],[33,8,44,6,"x"],[33,9,44,7],[33,12,44,10,"Q"],[33,13,44,11],[33,14,44,12,"affineX"],[33,21,44,19],[34,4,45,2],[34,8,45,6,"y"],[34,9,45,7],[34,12,45,10,"Q"],[34,13,45,11],[34,14,45,12,"affineY"],[34,21,45,19],[35,4,46,2],[35,8,46,6,"a"],[35,9,46,7],[35,12,46,10],[35,16,46,14],[35,17,46,15,"a"],[35,18,46,16],[36,4,47,2],[36,8,47,6,"b"],[36,9,47,7],[36,12,47,10],[36,16,47,14],[36,17,47,15,"b"],[36,18,47,16],[37,4,48,2],[37,8,48,6,"p"],[37,9,48,7],[37,12,48,10],[37,16,48,14],[37,17,48,15,"p"],[37,18,48,16],[39,4,50,2],[40,4,51,2],[40,8,51,6,"x"],[40,9,51,7],[40,10,51,8,"signum"],[40,16,51,14],[40,17,51,15],[40,18,51,16],[40,21,51,19],[40,22,51,20],[40,26,51,24,"x"],[40,27,51,25],[40,28,51,26,"compareTo"],[40,37,51,35],[40,38,51,36,"p"],[40,39,51,37],[40,40,51,38],[40,44,51,42],[40,45,51,43],[40,47,51,45],[40,54,51,52],[40,59,51,57],[41,4,52,2],[41,8,52,6,"y"],[41,9,52,7],[41,10,52,8,"signum"],[41,16,52,14],[41,17,52,15],[41,18,52,16],[41,21,52,19],[41,22,52,20],[41,26,52,24,"y"],[41,27,52,25],[41,28,52,26,"compareTo"],[41,37,52,35],[41,38,52,36,"p"],[41,39,52,37],[41,40,52,38],[41,44,52,42],[41,45,52,43],[41,47,52,45],[41,54,52,52],[41,59,52,57],[43,4,54,2],[44,4,55,2],[44,8,55,6,"lhs"],[44,11,55,9],[44,14,55,12,"y"],[44,15,55,13],[44,16,55,14,"square"],[44,22,55,20],[44,23,55,21],[44,24,55,22],[44,25,55,23,"mod"],[44,28,55,26],[44,29,55,27,"p"],[44,30,55,28],[44,31,55,29],[45,4,56,2],[45,8,56,6,"rhs"],[45,11,56,9],[45,14,56,12,"x"],[45,15,56,13],[45,16,56,14,"pow"],[45,19,56,17],[45,20,56,18],[45,21,56,19],[45,22,56,20],[45,23,56,21,"add"],[45,26,56,24],[45,27,56,25,"a"],[45,28,56,26],[45,29,56,27,"multiply"],[45,37,56,35],[45,38,56,36,"x"],[45,39,56,37],[45,40,56,38],[45,41,56,39],[45,42,56,40,"add"],[45,45,56,43],[45,46,56,44,"b"],[45,47,56,45],[45,48,56,46],[45,49,56,47,"mod"],[45,52,56,50],[45,53,56,51,"p"],[45,54,56,52],[45,55,56,53],[46,4,57,2],[46,11,57,9,"lhs"],[46,14,57,12],[46,15,57,13,"equals"],[46,21,57,19],[46,22,57,20,"rhs"],[46,25,57,23],[46,26,57,24],[47,2,58,0],[47,3,58,1],[49,2,60,0],[50,0,61,0],[51,0,62,0],[52,0,63,0],[53,0,64,0],[54,2,65,0,"Curve"],[54,7,65,5],[54,8,65,6,"prototype"],[54,17,65,15],[54,18,65,16,"validate"],[54,26,65,24],[54,29,65,27],[54,39,65,37,"Q"],[54,40,65,38],[54,42,65,40],[55,4,66,2],[56,4,67,2,"_$$_REQUIRE"],[56,15,67,2],[56,16,67,2,"_dependencyMap"],[56,30,67,2],[56,45,67,9],[56,46,67,10],[56,50,67,14],[56,51,67,15,"isInfinity"],[56,61,67,25],[56,62,67,26,"Q"],[56,63,67,27],[56,64,67,28],[56,66,67,30],[56,88,67,52],[56,89,67,53],[57,4,68,2,"_$$_REQUIRE"],[57,15,68,2],[57,16,68,2,"_dependencyMap"],[57,30,68,2],[57,45,68,9],[57,49,68,13],[57,50,68,14,"isOnCurve"],[57,59,68,23],[57,60,68,24,"Q"],[57,61,68,25],[57,62,68,26],[57,64,68,28],[57,91,68,55],[57,92,68,56],[59,4,70,2],[60,4,71,2],[60,8,71,6,"nQ"],[60,10,71,8],[60,13,71,11,"Q"],[60,14,71,12],[60,15,71,13,"multiply"],[60,23,71,21],[60,24,71,22],[60,28,71,26],[60,29,71,27,"n"],[60,30,71,28],[60,31,71,29],[61,4,72,2,"_$$_REQUIRE"],[61,15,72,2],[61,16,72,2,"_dependencyMap"],[61,30,72,2],[61,45,72,9],[61,49,72,13],[61,50,72,14,"isInfinity"],[61,60,72,24],[61,61,72,25,"nQ"],[61,63,72,27],[61,64,72,28],[61,66,72,30],[61,103,72,67],[61,104,72,68],[62,4,74,2],[62,11,74,9],[62,15,74,13],[63,2,75,0],[63,3,75,1],[64,2,77,0,"module"],[64,8,77,6],[64,9,77,7,"exports"],[64,16,77,14],[64,19,77,17,"Curve"],[64,24,77,22],[65,0,77,22],[65,3]],"functionMap":{"names":["<global>","Curve","Curve.prototype.pointFromX","Curve.prototype.isInfinity","Curve.prototype.isOnCurve","Curve.prototype.validate"],"mappings":"AAA;ACK;CDe;6BEE;CFU;6BGE;CHI;4BIE;CJiB;2BKO;CLU"}},"type":"js/module"}]}