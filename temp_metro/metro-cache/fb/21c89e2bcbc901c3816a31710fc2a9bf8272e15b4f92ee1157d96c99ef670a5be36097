{"dependencies":[{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":42,"index":42}},{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":42,"index":42}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // prototype class for hash functions\n  function Hash(blockSize, finalSize) {\n    this._block = _$$_REQUIRE(_dependencyMap[0], \"safe-buffer\").Buffer.alloc(blockSize);\n    this._finalSize = finalSize;\n    this._blockSize = blockSize;\n    this._len = 0;\n  }\n  Hash.prototype.update = function (data, enc) {\n    if (typeof data === 'string') {\n      enc = enc || 'utf8';\n      data = _$$_REQUIRE(_dependencyMap[0], \"safe-buffer\").Buffer.from(data, enc);\n    }\n    var block = this._block;\n    var blockSize = this._blockSize;\n    var length = data.length;\n    var accum = this._len;\n    for (var offset = 0; offset < length;) {\n      var assigned = accum % blockSize;\n      var remainder = Math.min(length - offset, blockSize - assigned);\n      for (var i = 0; i < remainder; i++) {\n        block[assigned + i] = data[offset + i];\n      }\n      accum += remainder;\n      offset += remainder;\n      if (accum % blockSize === 0) {\n        this._update(block);\n      }\n    }\n    this._len += length;\n    return this;\n  };\n  Hash.prototype.digest = function (enc) {\n    var rem = this._len % this._blockSize;\n    this._block[rem] = 0x80;\n\n    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n    this._block.fill(0, rem + 1);\n    if (rem >= this._finalSize) {\n      this._update(this._block);\n      this._block.fill(0);\n    }\n    var bits = this._len * 8;\n\n    // uint32\n    if (bits <= 0xffffffff) {\n      this._block.writeUInt32BE(bits, this._blockSize - 4);\n\n      // uint64\n    } else {\n      var lowBits = (bits & 0xffffffff) >>> 0;\n      var highBits = (bits - lowBits) / 0x100000000;\n      this._block.writeUInt32BE(highBits, this._blockSize - 8);\n      this._block.writeUInt32BE(lowBits, this._blockSize - 4);\n    }\n    this._update(this._block);\n    var hash = this._hash();\n    return enc ? hash.toString(enc) : hash;\n  };\n  Hash.prototype._update = function () {\n    throw new Error('_update must be implemented by subclass');\n  };\n  module.exports = Hash;\n});","lineCount":65,"map":[[2,2,3,0],[3,2,4,0],[3,11,4,9,"Hash"],[3,15,4,13,"Hash"],[3,16,4,15,"blockSize"],[3,25,4,24],[3,27,4,26,"finalSize"],[3,36,4,35],[3,38,4,37],[4,4,5,2],[4,8,5,6],[4,9,5,7,"_block"],[4,15,5,13],[4,18,5,16,"_$$_REQUIRE"],[4,29,5,16],[4,30,5,16,"_dependencyMap"],[4,44,5,16],[4,64,5,16,"Buffer"],[4,70,5,16],[4,71,5,23,"alloc"],[4,76,5,28],[4,77,5,29,"blockSize"],[4,86,5,38],[4,87,5,39],[5,4,6,2],[5,8,6,6],[5,9,6,7,"_finalSize"],[5,19,6,17],[5,22,6,20,"finalSize"],[5,31,6,29],[6,4,7,2],[6,8,7,6],[6,9,7,7,"_blockSize"],[6,19,7,17],[6,22,7,20,"blockSize"],[6,31,7,29],[7,4,8,2],[7,8,8,6],[7,9,8,7,"_len"],[7,13,8,11],[7,16,8,14],[7,17,8,15],[8,2,9,0],[9,2,11,0,"Hash"],[9,6,11,4],[9,7,11,5,"prototype"],[9,16,11,14],[9,17,11,15,"update"],[9,23,11,21],[9,26,11,24],[9,36,11,34,"data"],[9,40,11,38],[9,42,11,40,"enc"],[9,45,11,43],[9,47,11,45],[10,4,12,2],[10,8,12,6],[10,15,12,13,"data"],[10,19,12,17],[10,24,12,22],[10,32,12,30],[10,34,12,32],[11,6,13,4,"enc"],[11,9,13,7],[11,12,13,10,"enc"],[11,15,13,13],[11,19,13,17],[11,25,13,23],[12,6,14,4,"data"],[12,10,14,8],[12,13,14,11,"_$$_REQUIRE"],[12,24,14,11],[12,25,14,11,"_dependencyMap"],[12,39,14,11],[12,59,14,11,"Buffer"],[12,65,14,11],[12,66,14,18,"from"],[12,70,14,22],[12,71,14,23,"data"],[12,75,14,27],[12,77,14,29,"enc"],[12,80,14,32],[12,81,14,33],[13,4,15,2],[14,4,17,2],[14,8,17,6,"block"],[14,13,17,11],[14,16,17,14],[14,20,17,18],[14,21,17,19,"_block"],[14,27,17,25],[15,4,18,2],[15,8,18,6,"blockSize"],[15,17,18,15],[15,20,18,18],[15,24,18,22],[15,25,18,23,"_blockSize"],[15,35,18,33],[16,4,19,2],[16,8,19,6,"length"],[16,14,19,12],[16,17,19,15,"data"],[16,21,19,19],[16,22,19,20,"length"],[16,28,19,26],[17,4,20,2],[17,8,20,6,"accum"],[17,13,20,11],[17,16,20,14],[17,20,20,18],[17,21,20,19,"_len"],[17,25,20,23],[18,4,22,2],[18,9,22,7],[18,13,22,11,"offset"],[18,19,22,17],[18,22,22,20],[18,23,22,21],[18,25,22,23,"offset"],[18,31,22,29],[18,34,22,32,"length"],[18,40,22,38],[18,43,22,41],[19,6,23,4],[19,10,23,8,"assigned"],[19,18,23,16],[19,21,23,19,"accum"],[19,26,23,24],[19,29,23,27,"blockSize"],[19,38,23,36],[20,6,24,4],[20,10,24,8,"remainder"],[20,19,24,17],[20,22,24,20,"Math"],[20,26,24,24],[20,27,24,25,"min"],[20,30,24,28],[20,31,24,29,"length"],[20,37,24,35],[20,40,24,38,"offset"],[20,46,24,44],[20,48,24,46,"blockSize"],[20,57,24,55],[20,60,24,58,"assigned"],[20,68,24,66],[20,69,24,67],[21,6,26,4],[21,11,26,9],[21,15,26,13,"i"],[21,16,26,14],[21,19,26,17],[21,20,26,18],[21,22,26,20,"i"],[21,23,26,21],[21,26,26,24,"remainder"],[21,35,26,33],[21,37,26,35,"i"],[21,38,26,36],[21,40,26,38],[21,42,26,40],[22,8,27,6,"block"],[22,13,27,11],[22,14,27,12,"assigned"],[22,22,27,20],[22,25,27,23,"i"],[22,26,27,24],[22,27,27,25],[22,30,27,28,"data"],[22,34,27,32],[22,35,27,33,"offset"],[22,41,27,39],[22,44,27,42,"i"],[22,45,27,43],[22,46,27,44],[23,6,28,4],[24,6,30,4,"accum"],[24,11,30,9],[24,15,30,13,"remainder"],[24,24,30,22],[25,6,31,4,"offset"],[25,12,31,10],[25,16,31,14,"remainder"],[25,25,31,23],[26,6,33,4],[26,10,33,9,"accum"],[26,15,33,14],[26,18,33,17,"blockSize"],[26,27,33,26],[26,32,33,32],[26,33,33,33],[26,35,33,35],[27,8,34,6],[27,12,34,10],[27,13,34,11,"_update"],[27,20,34,18],[27,21,34,19,"block"],[27,26,34,24],[27,27,34,25],[28,6,35,4],[29,4,36,2],[30,4,38,2],[30,8,38,6],[30,9,38,7,"_len"],[30,13,38,11],[30,17,38,15,"length"],[30,23,38,21],[31,4,39,2],[31,11,39,9],[31,15,39,13],[32,2,40,0],[32,3,40,1],[33,2,42,0,"Hash"],[33,6,42,4],[33,7,42,5,"prototype"],[33,16,42,14],[33,17,42,15,"digest"],[33,23,42,21],[33,26,42,24],[33,36,42,34,"enc"],[33,39,42,37],[33,41,42,39],[34,4,43,2],[34,8,43,6,"rem"],[34,11,43,9],[34,14,43,12],[34,18,43,16],[34,19,43,17,"_len"],[34,23,43,21],[34,26,43,24],[34,30,43,28],[34,31,43,29,"_blockSize"],[34,41,43,39],[35,4,45,2],[35,8,45,6],[35,9,45,7,"_block"],[35,15,45,13],[35,16,45,14,"rem"],[35,19,45,17],[35,20,45,18],[35,23,45,21],[35,27,45,25],[37,4,47,2],[38,4,48,2],[39,4,49,2],[39,8,49,6],[39,9,49,7,"_block"],[39,15,49,13],[39,16,49,14,"fill"],[39,20,49,18],[39,21,49,19],[39,22,49,20],[39,24,49,22,"rem"],[39,27,49,25],[39,30,49,28],[39,31,49,29],[39,32,49,30],[40,4,51,2],[40,8,51,6,"rem"],[40,11,51,9],[40,15,51,13],[40,19,51,17],[40,20,51,18,"_finalSize"],[40,30,51,28],[40,32,51,30],[41,6,52,4],[41,10,52,8],[41,11,52,9,"_update"],[41,18,52,16],[41,19,52,17],[41,23,52,21],[41,24,52,22,"_block"],[41,30,52,28],[41,31,52,29],[42,6,53,4],[42,10,53,8],[42,11,53,9,"_block"],[42,17,53,15],[42,18,53,16,"fill"],[42,22,53,20],[42,23,53,21],[42,24,53,22],[42,25,53,23],[43,4,54,2],[44,4,56,2],[44,8,56,6,"bits"],[44,12,56,10],[44,15,56,13],[44,19,56,17],[44,20,56,18,"_len"],[44,24,56,22],[44,27,56,25],[44,28,56,26],[46,4,58,2],[47,4,59,2],[47,8,59,6,"bits"],[47,12,59,10],[47,16,59,14],[47,26,59,24],[47,28,59,26],[48,6,60,4],[48,10,60,8],[48,11,60,9,"_block"],[48,17,60,15],[48,18,60,16,"writeUInt32BE"],[48,31,60,29],[48,32,60,30,"bits"],[48,36,60,34],[48,38,60,36],[48,42,60,40],[48,43,60,41,"_blockSize"],[48,53,60,51],[48,56,60,54],[48,57,60,55],[48,58,60,56],[50,6,62,2],[51,4,63,2],[51,5,63,3],[51,11,63,9],[52,6,64,4],[52,10,64,8,"lowBits"],[52,17,64,15],[52,20,64,18],[52,21,64,19,"bits"],[52,25,64,23],[52,28,64,26],[52,38,64,36],[52,44,64,42],[52,45,64,43],[53,6,65,4],[53,10,65,8,"highBits"],[53,18,65,16],[53,21,65,19],[53,22,65,20,"bits"],[53,26,65,24],[53,29,65,27,"lowBits"],[53,36,65,34],[53,40,65,38],[53,51,65,49],[54,6,67,4],[54,10,67,8],[54,11,67,9,"_block"],[54,17,67,15],[54,18,67,16,"writeUInt32BE"],[54,31,67,29],[54,32,67,30,"highBits"],[54,40,67,38],[54,42,67,40],[54,46,67,44],[54,47,67,45,"_blockSize"],[54,57,67,55],[54,60,67,58],[54,61,67,59],[54,62,67,60],[55,6,68,4],[55,10,68,8],[55,11,68,9,"_block"],[55,17,68,15],[55,18,68,16,"writeUInt32BE"],[55,31,68,29],[55,32,68,30,"lowBits"],[55,39,68,37],[55,41,68,39],[55,45,68,43],[55,46,68,44,"_blockSize"],[55,56,68,54],[55,59,68,57],[55,60,68,58],[55,61,68,59],[56,4,69,2],[57,4,71,2],[57,8,71,6],[57,9,71,7,"_update"],[57,16,71,14],[57,17,71,15],[57,21,71,19],[57,22,71,20,"_block"],[57,28,71,26],[57,29,71,27],[58,4,72,2],[58,8,72,6,"hash"],[58,12,72,10],[58,15,72,13],[58,19,72,17],[58,20,72,18,"_hash"],[58,25,72,23],[58,26,72,24],[58,27,72,25],[59,4,74,2],[59,11,74,9,"enc"],[59,14,74,12],[59,17,74,15,"hash"],[59,21,74,19],[59,22,74,20,"toString"],[59,30,74,28],[59,31,74,29,"enc"],[59,34,74,32],[59,35,74,33],[59,38,74,36,"hash"],[59,42,74,40],[60,2,75,0],[60,3,75,1],[61,2,77,0,"Hash"],[61,6,77,4],[61,7,77,5,"prototype"],[61,16,77,14],[61,17,77,15,"_update"],[61,24,77,22],[61,27,77,25],[61,39,77,37],[62,4,78,2],[62,10,78,8],[62,14,78,12,"Error"],[62,19,78,17],[62,20,78,18],[62,61,78,59],[62,62,78,60],[63,2,79,0],[63,3,79,1],[64,2,81,0,"module"],[64,8,81,6],[64,9,81,7,"exports"],[64,16,81,14],[64,19,81,17,"Hash"],[64,23,81,21],[65,0,81,21],[65,3]],"functionMap":{"names":["<global>","Hash","Hash.prototype.update","Hash.prototype.digest","Hash.prototype._update"],"mappings":"AAA;ACG;CDK;wBEE;CF6B;wBGE;CHiC;yBIE;CJE"}},"type":"js/module"}]}