{"dependencies":[{"name":"./utils.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":19,"index":359},"end":{"line":10,"column":40,"index":380}},{"start":{"line":10,"column":19,"index":359},"end":{"line":10,"column":40,"index":380}}],"key":"v6h+l9IeOWbEcXdtKQqd2f4now4="}},{"name":"@noble/hashes/sha3","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":15,"index":309},"end":{"line":9,"column":44,"index":338}},{"start":{"line":9,"column":15,"index":309},"end":{"line":9,"column":44,"index":338}}],"key":"+237C0LNKygmKqhAo3hP36n/EnY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.XOF256 = exports.XOF128 = exports.genCrystals = void 0;\n  /**\n   * Internal methods for lattice-based ML-KEM and ML-DSA.\n   * @module\n   */\n  /*! noble-post-quantum - MIT License (c) 2024 Paul Miller (paulmillr.com) */\n\n  // TODO: benchmark\n  function bitReversal(n) {\n    var bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n    var padded = n.toString(2).padStart(8, '0');\n    var sliced = padded.slice(-bits).padStart(7, '0');\n    var revrsd = sliced.split('').reverse().join('');\n    return Number.parseInt(revrsd, 2);\n  }\n  var genCrystals = function genCrystals(opts) {\n    // isKyber: true means Kyber, false means Dilithium\n    var newPoly = opts.newPoly,\n      N = opts.N,\n      Q = opts.Q,\n      F = opts.F,\n      ROOT_OF_UNITY = opts.ROOT_OF_UNITY,\n      brvBits = opts.brvBits,\n      isKyber = opts.isKyber;\n    var mod = function mod(a) {\n      var modulo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Q;\n      var result = a % modulo | 0;\n      return (result >= 0 ? result | 0 : modulo + result | 0) | 0;\n    };\n    // -(Q-1)/2 < a <= (Q-1)/2\n    var smod = function smod(a) {\n      var modulo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Q;\n      var r = mod(a, modulo) | 0;\n      return (r > modulo >> 1 ? r - modulo | 0 : r) | 0;\n    };\n    // Generate zettas\n    function getZettas() {\n      var out = newPoly(N);\n      for (var i = 0; i < N; i++) {\n        var b = bitReversal(i, brvBits);\n        var p = BigInt(ROOT_OF_UNITY) ** BigInt(b) % BigInt(Q);\n        out[i] = Number(p) | 0;\n      }\n      return out;\n    }\n    var nttZetas = getZettas();\n    // Number-Theoretic Transform\n    // Explained: https://electricdusk.com/ntt.html\n    // Kyber has slightly different params, since there is no 512th primitive root of unity mod q,\n    // only 256th primitive root of unity mod. Which also complicates MultiplyNTT.\n    // TODO: there should be less ugly way to define this.\n    var LEN1 = isKyber ? 128 : N;\n    var LEN2 = isKyber ? 1 : 0;\n    var NTT = {\n      encode: function encode(r) {\n        for (var k = 1, len = 128; len > LEN2; len >>= 1) {\n          for (var start = 0; start < N; start += 2 * len) {\n            var zeta = nttZetas[k++];\n            for (var j = start; j < start + len; j++) {\n              var t = mod(zeta * r[j + len]);\n              r[j + len] = mod(r[j] - t) | 0;\n              r[j] = mod(r[j] + t) | 0;\n            }\n          }\n        }\n        return r;\n      },\n      decode: function decode(r) {\n        for (var k = LEN1 - 1, len = 1 + LEN2; len < LEN1 + LEN2; len <<= 1) {\n          for (var start = 0; start < N; start += 2 * len) {\n            var zeta = nttZetas[k--];\n            for (var j = start; j < start + len; j++) {\n              var t = r[j];\n              r[j] = mod(t + r[j + len]);\n              r[j + len] = mod(zeta * (r[j + len] - t));\n            }\n          }\n        }\n        for (var i = 0; i < r.length; i++) r[i] = mod(F * r[i]);\n        return r;\n      }\n    };\n    // Encode polynominal as bits\n    var bitsCoder = function bitsCoder(d, c) {\n      var mask = (0, _$$_REQUIRE(_dependencyMap[0], \"./utils.js\").getMask)(d);\n      var bytesLen = d * (N / 8);\n      return {\n        bytesLen: bytesLen,\n        encode: function encode(poly) {\n          var r = new Uint8Array(bytesLen);\n          for (var i = 0, buf = 0, bufLen = 0, pos = 0; i < poly.length; i++) {\n            buf |= (c.encode(poly[i]) & mask) << bufLen;\n            bufLen += d;\n            for (; bufLen >= 8; bufLen -= 8, buf >>= 8) r[pos++] = buf & (0, _$$_REQUIRE(_dependencyMap[0], \"./utils.js\").getMask)(bufLen);\n          }\n          return r;\n        },\n        decode: function decode(bytes) {\n          var r = newPoly(N);\n          for (var i = 0, buf = 0, bufLen = 0, pos = 0; i < bytes.length; i++) {\n            buf |= bytes[i] << bufLen;\n            bufLen += 8;\n            for (; bufLen >= d; bufLen -= d, buf >>= d) r[pos++] = c.decode(buf & mask);\n          }\n          return r;\n        }\n      };\n    };\n    return {\n      mod: mod,\n      smod: smod,\n      nttZetas: nttZetas,\n      NTT: NTT,\n      bitsCoder: bitsCoder\n    };\n  };\n  exports.genCrystals = genCrystals;\n  var createXofShake = function createXofShake(shake) {\n    return function (seed, blockLen) {\n      if (!blockLen) blockLen = shake.blockLen;\n      // Optimizations that won't mater:\n      // - cached seed update (two .update(), on start and on the end)\n      // - another cache which cloned into working copy\n      // Faster than multiple updates, since seed less than blockLen\n      var _seed = new Uint8Array(seed.length + 2);\n      _seed.set(seed);\n      var seedLen = seed.length;\n      var buf = new Uint8Array(blockLen); // == shake128.blockLen\n      var h = shake.create({});\n      var calls = 0;\n      var xofs = 0;\n      return {\n        stats: function stats() {\n          return {\n            calls: calls,\n            xofs: xofs\n          };\n        },\n        get: function get(x, y) {\n          _seed[seedLen + 0] = x;\n          _seed[seedLen + 1] = y;\n          h.destroy();\n          h = shake.create({}).update(_seed);\n          calls++;\n          return function () {\n            xofs++;\n            return h.xofInto(buf);\n          };\n        },\n        clean: function clean() {\n          h.destroy();\n          buf.fill(0);\n          _seed.fill(0);\n        }\n      };\n    };\n  };\n  exports.XOF128 = createXofShake(_$$_REQUIRE(_dependencyMap[1], \"@noble/hashes/sha3\").shake128);\n  exports.XOF256 = createXofShake(_$$_REQUIRE(_dependencyMap[1], \"@noble/hashes/sha3\").shake256);\n});","lineCount":166,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"XOF256"],[7,16,3,14],[7,19,3,17,"exports"],[7,26,3,24],[7,27,3,25,"XOF128"],[7,33,3,31],[7,36,3,34,"exports"],[7,43,3,41],[7,44,3,42,"genCrystals"],[7,55,3,53],[7,58,3,56],[7,63,3,61],[7,64,3,62],[8,2,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,2,8,0],[14,2,11,0],[15,2,12,0],[15,11,12,9,"bitReversal"],[15,22,12,20,"bitReversal"],[15,23,12,21,"n"],[15,24,12,22],[15,26,12,34],[16,4,12,34],[16,8,12,24,"bits"],[16,12,12,28],[16,15,12,28,"arguments"],[16,24,12,28],[16,25,12,28,"length"],[16,31,12,28],[16,39,12,28,"arguments"],[16,48,12,28],[16,56,12,28,"undefined"],[16,65,12,28],[16,68,12,28,"arguments"],[16,77,12,28],[16,83,12,31],[16,84,12,32],[17,4,13,4],[17,8,13,10,"padded"],[17,14,13,16],[17,17,13,19,"n"],[17,18,13,20],[17,19,13,21,"toString"],[17,27,13,29],[17,28,13,30],[17,29,13,31],[17,30,13,32],[17,31,13,33,"padStart"],[17,39,13,41],[17,40,13,42],[17,41,13,43],[17,43,13,45],[17,46,13,48],[17,47,13,49],[18,4,14,4],[18,8,14,10,"sliced"],[18,14,14,16],[18,17,14,19,"padded"],[18,23,14,25],[18,24,14,26,"slice"],[18,29,14,31],[18,30,14,32],[18,31,14,33,"bits"],[18,35,14,37],[18,36,14,38],[18,37,14,39,"padStart"],[18,45,14,47],[18,46,14,48],[18,47,14,49],[18,49,14,51],[18,52,14,54],[18,53,14,55],[19,4,15,4],[19,8,15,10,"revrsd"],[19,14,15,16],[19,17,15,19,"sliced"],[19,23,15,25],[19,24,15,26,"split"],[19,29,15,31],[19,30,15,32],[19,32,15,34],[19,33,15,35],[19,34,15,36,"reverse"],[19,41,15,43],[19,42,15,44],[19,43,15,45],[19,44,15,46,"join"],[19,48,15,50],[19,49,15,51],[19,51,15,53],[19,52,15,54],[20,4,16,4],[20,11,16,11,"Number"],[20,17,16,17],[20,18,16,18,"parseInt"],[20,26,16,26],[20,27,16,27,"revrsd"],[20,33,16,33],[20,35,16,35],[20,36,16,36],[20,37,16,37],[21,2,17,0],[22,2,18,0],[22,6,18,6,"genCrystals"],[22,17,18,17],[22,20,18,20],[22,29,18,6,"genCrystals"],[22,40,18,17,"genCrystals"],[22,41,18,21,"opts"],[22,45,18,25],[22,47,18,30],[23,4,19,4],[24,4,20,4],[24,8,20,12,"newPoly"],[24,15,20,19],[24,18,20,66,"opts"],[24,22,20,70],[24,23,20,12,"newPoly"],[24,30,20,19],[25,6,20,21,"N"],[25,7,20,22],[25,10,20,66,"opts"],[25,14,20,70],[25,15,20,21,"N"],[25,16,20,22],[26,6,20,24,"Q"],[26,7,20,25],[26,10,20,66,"opts"],[26,14,20,70],[26,15,20,24,"Q"],[26,16,20,25],[27,6,20,27,"F"],[27,7,20,28],[27,10,20,66,"opts"],[27,14,20,70],[27,15,20,27,"F"],[27,16,20,28],[28,6,20,30,"ROOT_OF_UNITY"],[28,19,20,43],[28,22,20,66,"opts"],[28,26,20,70],[28,27,20,30,"ROOT_OF_UNITY"],[28,40,20,43],[29,6,20,45,"brvBits"],[29,13,20,52],[29,16,20,66,"opts"],[29,20,20,70],[29,21,20,45,"brvBits"],[29,28,20,52],[30,6,20,54,"isKyber"],[30,13,20,61],[30,16,20,66,"opts"],[30,20,20,70],[30,21,20,54,"isKyber"],[30,28,20,61],[31,4,21,4],[31,8,21,10,"mod"],[31,11,21,13],[31,14,21,16],[31,23,21,10,"mod"],[31,26,21,13,"mod"],[31,27,21,17,"a"],[31,28,21,18],[31,30,21,35],[32,6,21,35],[32,10,21,20,"modulo"],[32,16,21,26],[32,19,21,26,"arguments"],[32,28,21,26],[32,29,21,26,"length"],[32,35,21,26],[32,43,21,26,"arguments"],[32,52,21,26],[32,60,21,26,"undefined"],[32,69,21,26],[32,72,21,26,"arguments"],[32,81,21,26],[32,87,21,29,"Q"],[32,88,21,30],[33,6,22,8],[33,10,22,14,"result"],[33,16,22,20],[33,19,22,23,"a"],[33,20,22,24],[33,23,22,27,"modulo"],[33,29,22,33],[33,32,22,36],[33,33,22,37],[34,6,23,8],[34,13,23,15],[34,14,23,16,"result"],[34,20,23,22],[34,24,23,26],[34,25,23,27],[34,28,23,30,"result"],[34,34,23,36],[34,37,23,39],[34,38,23,40],[34,41,23,44,"modulo"],[34,47,23,50],[34,50,23,53,"result"],[34,56,23,59],[34,59,23,63],[34,60,23,64],[34,64,23,68],[34,65,23,69],[35,4,24,4],[35,5,24,5],[36,4,25,4],[37,4,26,4],[37,8,26,10,"smod"],[37,12,26,14],[37,15,26,17],[37,24,26,10,"smod"],[37,28,26,14,"smod"],[37,29,26,18,"a"],[37,30,26,19],[37,32,26,36],[38,6,26,36],[38,10,26,21,"modulo"],[38,16,26,27],[38,19,26,27,"arguments"],[38,28,26,27],[38,29,26,27,"length"],[38,35,26,27],[38,43,26,27,"arguments"],[38,52,26,27],[38,60,26,27,"undefined"],[38,69,26,27],[38,72,26,27,"arguments"],[38,81,26,27],[38,87,26,30,"Q"],[38,88,26,31],[39,6,27,8],[39,10,27,14,"r"],[39,11,27,15],[39,14,27,18,"mod"],[39,17,27,21],[39,18,27,22,"a"],[39,19,27,23],[39,21,27,25,"modulo"],[39,27,27,31],[39,28,27,32],[39,31,27,35],[39,32,27,36],[40,6,28,8],[40,13,28,15],[40,14,28,16,"r"],[40,15,28,17],[40,18,28,20,"modulo"],[40,24,28,26],[40,28,28,30],[40,29,28,31],[40,32,28,35,"r"],[40,33,28,36],[40,36,28,39,"modulo"],[40,42,28,45],[40,45,28,49],[40,46,28,50],[40,49,28,53,"r"],[40,50,28,54],[40,54,28,58],[40,55,28,59],[41,4,29,4],[41,5,29,5],[42,4,30,4],[43,4,31,4],[43,13,31,13,"getZettas"],[43,22,31,22,"getZettas"],[43,23,31,22],[43,25,31,25],[44,6,32,8],[44,10,32,14,"out"],[44,13,32,17],[44,16,32,20,"newPoly"],[44,23,32,27],[44,24,32,28,"N"],[44,25,32,29],[44,26,32,30],[45,6,33,8],[45,11,33,13],[45,15,33,17,"i"],[45,16,33,18],[45,19,33,21],[45,20,33,22],[45,22,33,24,"i"],[45,23,33,25],[45,26,33,28,"N"],[45,27,33,29],[45,29,33,31,"i"],[45,30,33,32],[45,32,33,34],[45,34,33,36],[46,8,34,12],[46,12,34,18,"b"],[46,13,34,19],[46,16,34,22,"bitReversal"],[46,27,34,33],[46,28,34,34,"i"],[46,29,34,35],[46,31,34,37,"brvBits"],[46,38,34,44],[46,39,34,45],[47,8,35,12],[47,12,35,18,"p"],[47,13,35,19],[47,16,35,22,"BigInt"],[47,22,35,28],[47,23,35,29,"ROOT_OF_UNITY"],[47,36,35,42],[47,37,35,43],[47,41,35,47,"BigInt"],[47,47,35,53],[47,48,35,54,"b"],[47,49,35,55],[47,50,35,56],[47,53,35,59,"BigInt"],[47,59,35,65],[47,60,35,66,"Q"],[47,61,35,67],[47,62,35,68],[48,8,36,12,"out"],[48,11,36,15],[48,12,36,16,"i"],[48,13,36,17],[48,14,36,18],[48,17,36,21,"Number"],[48,23,36,27],[48,24,36,28,"p"],[48,25,36,29],[48,26,36,30],[48,29,36,33],[48,30,36,34],[49,6,37,8],[50,6,38,8],[50,13,38,15,"out"],[50,16,38,18],[51,4,39,4],[52,4,40,4],[52,8,40,10,"nttZetas"],[52,16,40,18],[52,19,40,21,"getZettas"],[52,28,40,30],[52,29,40,31],[52,30,40,32],[53,4,41,4],[54,4,42,4],[55,4,43,4],[56,4,44,4],[57,4,45,4],[58,4,46,4],[58,8,46,10,"LEN1"],[58,12,46,14],[58,15,46,17,"isKyber"],[58,22,46,24],[58,25,46,27],[58,28,46,30],[58,31,46,33,"N"],[58,32,46,34],[59,4,47,4],[59,8,47,10,"LEN2"],[59,12,47,14],[59,15,47,17,"isKyber"],[59,22,47,24],[59,25,47,27],[59,26,47,28],[59,29,47,31],[59,30,47,32],[60,4,48,4],[60,8,48,10,"NTT"],[60,11,48,13],[60,14,48,16],[61,6,49,8,"encode"],[61,12,49,14],[61,14,49,16],[61,23,49,8,"encode"],[61,29,49,14,"encode"],[61,30,49,17,"r"],[61,31,49,18],[61,33,49,23],[62,8,50,12],[62,13,50,17],[62,17,50,21,"k"],[62,18,50,22],[62,21,50,25],[62,22,50,26],[62,24,50,28,"len"],[62,27,50,31],[62,30,50,34],[62,33,50,37],[62,35,50,39,"len"],[62,38,50,42],[62,41,50,45,"LEN2"],[62,45,50,49],[62,47,50,51,"len"],[62,50,50,54],[62,55,50,59],[62,56,50,60],[62,58,50,62],[63,10,51,16],[63,15,51,21],[63,19,51,25,"start"],[63,24,51,30],[63,27,51,33],[63,28,51,34],[63,30,51,36,"start"],[63,35,51,41],[63,38,51,44,"N"],[63,39,51,45],[63,41,51,47,"start"],[63,46,51,52],[63,50,51,56],[63,51,51,57],[63,54,51,60,"len"],[63,57,51,63],[63,59,51,65],[64,12,52,20],[64,16,52,26,"zeta"],[64,20,52,30],[64,23,52,33,"nttZetas"],[64,31,52,41],[64,32,52,42,"k"],[64,33,52,43],[64,35,52,45],[64,36,52,46],[65,12,53,20],[65,17,53,25],[65,21,53,29,"j"],[65,22,53,30],[65,25,53,33,"start"],[65,30,53,38],[65,32,53,40,"j"],[65,33,53,41],[65,36,53,44,"start"],[65,41,53,49],[65,44,53,52,"len"],[65,47,53,55],[65,49,53,57,"j"],[65,50,53,58],[65,52,53,60],[65,54,53,62],[66,14,54,24],[66,18,54,30,"t"],[66,19,54,31],[66,22,54,34,"mod"],[66,25,54,37],[66,26,54,38,"zeta"],[66,30,54,42],[66,33,54,45,"r"],[66,34,54,46],[66,35,54,47,"j"],[66,36,54,48],[66,39,54,51,"len"],[66,42,54,54],[66,43,54,55],[66,44,54,56],[67,14,55,24,"r"],[67,15,55,25],[67,16,55,26,"j"],[67,17,55,27],[67,20,55,30,"len"],[67,23,55,33],[67,24,55,34],[67,27,55,37,"mod"],[67,30,55,40],[67,31,55,41,"r"],[67,32,55,42],[67,33,55,43,"j"],[67,34,55,44],[67,35,55,45],[67,38,55,48,"t"],[67,39,55,49],[67,40,55,50],[67,43,55,53],[67,44,55,54],[68,14,56,24,"r"],[68,15,56,25],[68,16,56,26,"j"],[68,17,56,27],[68,18,56,28],[68,21,56,31,"mod"],[68,24,56,34],[68,25,56,35,"r"],[68,26,56,36],[68,27,56,37,"j"],[68,28,56,38],[68,29,56,39],[68,32,56,42,"t"],[68,33,56,43],[68,34,56,44],[68,37,56,47],[68,38,56,48],[69,12,57,20],[70,10,58,16],[71,8,59,12],[72,8,60,12],[72,15,60,19,"r"],[72,16,60,20],[73,6,61,8],[73,7,61,9],[74,6,62,8,"decode"],[74,12,62,14],[74,14,62,16],[74,23,62,8,"decode"],[74,29,62,14,"decode"],[74,30,62,17,"r"],[74,31,62,18],[74,33,62,23],[75,8,63,12],[75,13,63,17],[75,17,63,21,"k"],[75,18,63,22],[75,21,63,25,"LEN1"],[75,25,63,29],[75,28,63,32],[75,29,63,33],[75,31,63,35,"len"],[75,34,63,38],[75,37,63,41],[75,38,63,42],[75,41,63,45,"LEN2"],[75,45,63,49],[75,47,63,51,"len"],[75,50,63,54],[75,53,63,57,"LEN1"],[75,57,63,61],[75,60,63,64,"LEN2"],[75,64,63,68],[75,66,63,70,"len"],[75,69,63,73],[75,74,63,78],[75,75,63,79],[75,77,63,81],[76,10,64,16],[76,15,64,21],[76,19,64,25,"start"],[76,24,64,30],[76,27,64,33],[76,28,64,34],[76,30,64,36,"start"],[76,35,64,41],[76,38,64,44,"N"],[76,39,64,45],[76,41,64,47,"start"],[76,46,64,52],[76,50,64,56],[76,51,64,57],[76,54,64,60,"len"],[76,57,64,63],[76,59,64,65],[77,12,65,20],[77,16,65,26,"zeta"],[77,20,65,30],[77,23,65,33,"nttZetas"],[77,31,65,41],[77,32,65,42,"k"],[77,33,65,43],[77,35,65,45],[77,36,65,46],[78,12,66,20],[78,17,66,25],[78,21,66,29,"j"],[78,22,66,30],[78,25,66,33,"start"],[78,30,66,38],[78,32,66,40,"j"],[78,33,66,41],[78,36,66,44,"start"],[78,41,66,49],[78,44,66,52,"len"],[78,47,66,55],[78,49,66,57,"j"],[78,50,66,58],[78,52,66,60],[78,54,66,62],[79,14,67,24],[79,18,67,30,"t"],[79,19,67,31],[79,22,67,34,"r"],[79,23,67,35],[79,24,67,36,"j"],[79,25,67,37],[79,26,67,38],[80,14,68,24,"r"],[80,15,68,25],[80,16,68,26,"j"],[80,17,68,27],[80,18,68,28],[80,21,68,31,"mod"],[80,24,68,34],[80,25,68,35,"t"],[80,26,68,36],[80,29,68,39,"r"],[80,30,68,40],[80,31,68,41,"j"],[80,32,68,42],[80,35,68,45,"len"],[80,38,68,48],[80,39,68,49],[80,40,68,50],[81,14,69,24,"r"],[81,15,69,25],[81,16,69,26,"j"],[81,17,69,27],[81,20,69,30,"len"],[81,23,69,33],[81,24,69,34],[81,27,69,37,"mod"],[81,30,69,40],[81,31,69,41,"zeta"],[81,35,69,45],[81,39,69,49,"r"],[81,40,69,50],[81,41,69,51,"j"],[81,42,69,52],[81,45,69,55,"len"],[81,48,69,58],[81,49,69,59],[81,52,69,62,"t"],[81,53,69,63],[81,54,69,64],[81,55,69,65],[82,12,70,20],[83,10,71,16],[84,8,72,12],[85,8,73,12],[85,13,73,17],[85,17,73,21,"i"],[85,18,73,22],[85,21,73,25],[85,22,73,26],[85,24,73,28,"i"],[85,25,73,29],[85,28,73,32,"r"],[85,29,73,33],[85,30,73,34,"length"],[85,36,73,40],[85,38,73,42,"i"],[85,39,73,43],[85,41,73,45],[85,43,74,16,"r"],[85,44,74,17],[85,45,74,18,"i"],[85,46,74,19],[85,47,74,20],[85,50,74,23,"mod"],[85,53,74,26],[85,54,74,27,"F"],[85,55,74,28],[85,58,74,31,"r"],[85,59,74,32],[85,60,74,33,"i"],[85,61,74,34],[85,62,74,35],[85,63,74,36],[86,8,75,12],[86,15,75,19,"r"],[86,16,75,20],[87,6,76,8],[88,4,77,4],[88,5,77,5],[89,4,78,4],[90,4,79,4],[90,8,79,10,"bitsCoder"],[90,17,79,19],[90,20,79,22],[90,29,79,10,"bitsCoder"],[90,38,79,19,"bitsCoder"],[90,39,79,23,"d"],[90,40,79,24],[90,42,79,26,"c"],[90,43,79,27],[90,45,79,32],[91,6,80,8],[91,10,80,14,"mask"],[91,14,80,18],[91,17,80,21],[91,18,80,22],[91,19,80,23],[91,21,80,25,"_$$_REQUIRE"],[91,32,80,25],[91,33,80,25,"_dependencyMap"],[91,47,80,25],[91,66,80,36,"getMask"],[91,73,80,43],[91,75,80,45,"d"],[91,76,80,46],[91,77,80,47],[92,6,81,8],[92,10,81,14,"bytesLen"],[92,18,81,22],[92,21,81,25,"d"],[92,22,81,26],[92,26,81,30,"N"],[92,27,81,31],[92,30,81,34],[92,31,81,35],[92,32,81,36],[93,6,82,8],[93,13,82,15],[94,8,83,12,"bytesLen"],[94,16,83,20],[94,18,83,12,"bytesLen"],[94,26,83,20],[95,8,84,12,"encode"],[95,14,84,18],[95,16,84,20],[95,25,84,12,"encode"],[95,31,84,18,"encode"],[95,32,84,21,"poly"],[95,36,84,25],[95,38,84,30],[96,10,85,16],[96,14,85,22,"r"],[96,15,85,23],[96,18,85,26],[96,22,85,30,"Uint8Array"],[96,32,85,40],[96,33,85,41,"bytesLen"],[96,41,85,49],[96,42,85,50],[97,10,86,16],[97,15,86,21],[97,19,86,25,"i"],[97,20,86,26],[97,23,86,29],[97,24,86,30],[97,26,86,32,"buf"],[97,29,86,35],[97,32,86,38],[97,33,86,39],[97,35,86,41,"bufLen"],[97,41,86,47],[97,44,86,50],[97,45,86,51],[97,47,86,53,"pos"],[97,50,86,56],[97,53,86,59],[97,54,86,60],[97,56,86,62,"i"],[97,57,86,63],[97,60,86,66,"poly"],[97,64,86,70],[97,65,86,71,"length"],[97,71,86,77],[97,73,86,79,"i"],[97,74,86,80],[97,76,86,82],[97,78,86,84],[98,12,87,20,"buf"],[98,15,87,23],[98,19,87,27],[98,20,87,28,"c"],[98,21,87,29],[98,22,87,30,"encode"],[98,28,87,36],[98,29,87,37,"poly"],[98,33,87,41],[98,34,87,42,"i"],[98,35,87,43],[98,36,87,44],[98,37,87,45],[98,40,87,48,"mask"],[98,44,87,52],[98,49,87,57,"bufLen"],[98,55,87,63],[99,12,88,20,"bufLen"],[99,18,88,26],[99,22,88,30,"d"],[99,23,88,31],[100,12,89,20],[100,19,89,27,"bufLen"],[100,25,89,33],[100,29,89,37],[100,30,89,38],[100,32,89,40,"bufLen"],[100,38,89,46],[100,42,89,50],[100,43,89,51],[100,45,89,53,"buf"],[100,48,89,56],[100,53,89,61],[100,54,89,62],[100,56,90,24,"r"],[100,57,90,25],[100,58,90,26,"pos"],[100,61,90,29],[100,63,90,31],[100,64,90,32],[100,67,90,35,"buf"],[100,70,90,38],[100,73,90,41],[100,74,90,42],[100,75,90,43],[100,77,90,45,"_$$_REQUIRE"],[100,88,90,45],[100,89,90,45,"_dependencyMap"],[100,103,90,45],[100,122,90,56,"getMask"],[100,129,90,63],[100,131,90,65,"bufLen"],[100,137,90,71],[100,138,90,72],[101,10,91,16],[102,10,92,16],[102,17,92,23,"r"],[102,18,92,24],[103,8,93,12],[103,9,93,13],[104,8,94,12,"decode"],[104,14,94,18],[104,16,94,20],[104,25,94,12,"decode"],[104,31,94,18,"decode"],[104,32,94,21,"bytes"],[104,37,94,26],[104,39,94,31],[105,10,95,16],[105,14,95,22,"r"],[105,15,95,23],[105,18,95,26,"newPoly"],[105,25,95,33],[105,26,95,34,"N"],[105,27,95,35],[105,28,95,36],[106,10,96,16],[106,15,96,21],[106,19,96,25,"i"],[106,20,96,26],[106,23,96,29],[106,24,96,30],[106,26,96,32,"buf"],[106,29,96,35],[106,32,96,38],[106,33,96,39],[106,35,96,41,"bufLen"],[106,41,96,47],[106,44,96,50],[106,45,96,51],[106,47,96,53,"pos"],[106,50,96,56],[106,53,96,59],[106,54,96,60],[106,56,96,62,"i"],[106,57,96,63],[106,60,96,66,"bytes"],[106,65,96,71],[106,66,96,72,"length"],[106,72,96,78],[106,74,96,80,"i"],[106,75,96,81],[106,77,96,83],[106,79,96,85],[107,12,97,20,"buf"],[107,15,97,23],[107,19,97,27,"bytes"],[107,24,97,32],[107,25,97,33,"i"],[107,26,97,34],[107,27,97,35],[107,31,97,39,"bufLen"],[107,37,97,45],[108,12,98,20,"bufLen"],[108,18,98,26],[108,22,98,30],[108,23,98,31],[109,12,99,20],[109,19,99,27,"bufLen"],[109,25,99,33],[109,29,99,37,"d"],[109,30,99,38],[109,32,99,40,"bufLen"],[109,38,99,46],[109,42,99,50,"d"],[109,43,99,51],[109,45,99,53,"buf"],[109,48,99,56],[109,53,99,61,"d"],[109,54,99,62],[109,56,100,24,"r"],[109,57,100,25],[109,58,100,26,"pos"],[109,61,100,29],[109,63,100,31],[109,64,100,32],[109,67,100,35,"c"],[109,68,100,36],[109,69,100,37,"decode"],[109,75,100,43],[109,76,100,44,"buf"],[109,79,100,47],[109,82,100,50,"mask"],[109,86,100,54],[109,87,100,55],[110,10,101,16],[111,10,102,16],[111,17,102,23,"r"],[111,18,102,24],[112,8,103,12],[113,6,104,8],[113,7,104,9],[114,4,105,4],[114,5,105,5],[115,4,106,4],[115,11,106,11],[116,6,106,13,"mod"],[116,9,106,16],[116,11,106,13,"mod"],[116,14,106,16],[117,6,106,18,"smod"],[117,10,106,22],[117,12,106,18,"smod"],[117,16,106,22],[118,6,106,24,"nttZetas"],[118,14,106,32],[118,16,106,24,"nttZetas"],[118,24,106,32],[119,6,106,34,"NTT"],[119,9,106,37],[119,11,106,34,"NTT"],[119,14,106,37],[120,6,106,39,"bitsCoder"],[120,15,106,48],[120,17,106,39,"bitsCoder"],[121,4,106,49],[121,5,106,50],[122,2,107,0],[122,3,107,1],[123,2,108,0,"exports"],[123,9,108,7],[123,10,108,8,"genCrystals"],[123,21,108,19],[123,24,108,22,"genCrystals"],[123,35,108,33],[124,2,109,0],[124,6,109,6,"createXofShake"],[124,20,109,20],[124,23,109,23],[124,32,109,6,"createXofShake"],[124,46,109,20,"createXofShake"],[124,47,109,24,"shake"],[124,52,109,29],[125,4,109,29],[125,11,109,34],[125,21,109,35,"seed"],[125,25,109,39],[125,27,109,41,"blockLen"],[125,35,109,49],[125,37,109,54],[126,6,110,4],[126,10,110,8],[126,11,110,9,"blockLen"],[126,19,110,17],[126,21,111,8,"blockLen"],[126,29,111,16],[126,32,111,19,"shake"],[126,37,111,24],[126,38,111,25,"blockLen"],[126,46,111,33],[127,6,112,4],[128,6,113,4],[129,6,114,4],[130,6,115,4],[131,6,116,4],[131,10,116,10,"_seed"],[131,15,116,15],[131,18,116,18],[131,22,116,22,"Uint8Array"],[131,32,116,32],[131,33,116,33,"seed"],[131,37,116,37],[131,38,116,38,"length"],[131,44,116,44],[131,47,116,47],[131,48,116,48],[131,49,116,49],[132,6,117,4,"_seed"],[132,11,117,9],[132,12,117,10,"set"],[132,15,117,13],[132,16,117,14,"seed"],[132,20,117,18],[132,21,117,19],[133,6,118,4],[133,10,118,10,"seedLen"],[133,17,118,17],[133,20,118,20,"seed"],[133,24,118,24],[133,25,118,25,"length"],[133,31,118,31],[134,6,119,4],[134,10,119,10,"buf"],[134,13,119,13],[134,16,119,16],[134,20,119,20,"Uint8Array"],[134,30,119,30],[134,31,119,31,"blockLen"],[134,39,119,39],[134,40,119,40],[134,41,119,41],[134,42,119,42],[135,6,120,4],[135,10,120,8,"h"],[135,11,120,9],[135,14,120,12,"shake"],[135,19,120,17],[135,20,120,18,"create"],[135,26,120,24],[135,27,120,25],[135,28,120,26],[135,29,120,27],[135,30,120,28],[136,6,121,4],[136,10,121,8,"calls"],[136,15,121,13],[136,18,121,16],[136,19,121,17],[137,6,122,4],[137,10,122,8,"xofs"],[137,14,122,12],[137,17,122,15],[137,18,122,16],[138,6,123,4],[138,13,123,11],[139,8,124,8,"stats"],[139,13,124,13],[139,15,124,15],[139,24,124,8,"stats"],[139,29,124,13,"stats"],[139,30,124,13],[140,10,124,13],[140,17,124,22],[141,12,124,24,"calls"],[141,17,124,29],[141,19,124,24,"calls"],[141,24,124,29],[142,12,124,31,"xofs"],[142,16,124,35],[142,18,124,31,"xofs"],[143,10,124,36],[143,11,124,37],[144,8,124,37],[144,9,124,38],[145,8,125,8,"get"],[145,11,125,11],[145,13,125,13],[145,22,125,8,"get"],[145,25,125,11,"get"],[145,26,125,14,"x"],[145,27,125,15],[145,29,125,17,"y"],[145,30,125,18],[145,32,125,23],[146,10,126,12,"_seed"],[146,15,126,17],[146,16,126,18,"seedLen"],[146,23,126,25],[146,26,126,28],[146,27,126,29],[146,28,126,30],[146,31,126,33,"x"],[146,32,126,34],[147,10,127,12,"_seed"],[147,15,127,17],[147,16,127,18,"seedLen"],[147,23,127,25],[147,26,127,28],[147,27,127,29],[147,28,127,30],[147,31,127,33,"y"],[147,32,127,34],[148,10,128,12,"h"],[148,11,128,13],[148,12,128,14,"destroy"],[148,19,128,21],[148,20,128,22],[148,21,128,23],[149,10,129,12,"h"],[149,11,129,13],[149,14,129,16,"shake"],[149,19,129,21],[149,20,129,22,"create"],[149,26,129,28],[149,27,129,29],[149,28,129,30],[149,29,129,31],[149,30,129,32],[149,31,129,33,"update"],[149,37,129,39],[149,38,129,40,"_seed"],[149,43,129,45],[149,44,129,46],[150,10,130,12,"calls"],[150,15,130,17],[150,17,130,19],[151,10,131,12],[151,17,131,19],[151,29,131,25],[152,12,132,16,"xofs"],[152,16,132,20],[152,18,132,22],[153,12,133,16],[153,19,133,23,"h"],[153,20,133,24],[153,21,133,25,"xofInto"],[153,28,133,32],[153,29,133,33,"buf"],[153,32,133,36],[153,33,133,37],[154,10,134,12],[154,11,134,13],[155,8,135,8],[155,9,135,9],[156,8,136,8,"clean"],[156,13,136,13],[156,15,136,15],[156,24,136,8,"clean"],[156,29,136,13,"clean"],[156,30,136,13],[156,32,136,21],[157,10,137,12,"h"],[157,11,137,13],[157,12,137,14,"destroy"],[157,19,137,21],[157,20,137,22],[157,21,137,23],[158,10,138,12,"buf"],[158,13,138,15],[158,14,138,16,"fill"],[158,18,138,20],[158,19,138,21],[158,20,138,22],[158,21,138,23],[159,10,139,12,"_seed"],[159,15,139,17],[159,16,139,18,"fill"],[159,20,139,22],[159,21,139,23],[159,22,139,24],[159,23,139,25],[160,8,140,8],[161,6,141,4],[161,7,141,5],[162,4,142,0],[162,5,142,1],[163,2,142,1],[164,2,143,0,"exports"],[164,9,143,7],[164,10,143,8,"XOF128"],[164,16,143,14],[164,19,143,17,"createXofShake"],[164,33,143,31],[164,34,143,32,"_$$_REQUIRE"],[164,45,143,32],[164,46,143,32,"_dependencyMap"],[164,60,143,32],[164,87,143,39,"shake128"],[164,95,143,47],[164,96,143,48],[165,2,144,0,"exports"],[165,9,144,7],[165,10,144,8,"XOF256"],[165,16,144,14],[165,19,144,17,"createXofShake"],[165,33,144,31],[165,34,144,32,"_$$_REQUIRE"],[165,45,144,32],[165,46,144,32,"_dependencyMap"],[165,60,144,32],[165,87,144,39,"shake256"],[165,95,144,47],[165,96,144,48],[166,0,144,49],[166,3]],"functionMap":{"names":["<global>","bitReversal","genCrystals","mod","smod","getZettas","NTT.encode","NTT.decode","bitsCoder","encode","decode","createXofShake","<anonymous>","stats","get","clean"],"mappings":"AAA;ACW;CDK;oBEC;gBCG;KDG;iBEE;KFG;IGE;KHQ;gBIU;SJY;gBKC;SLc;sBMG;oBCK;aDS;oBEC;aFS;KNE;CFE;uBWE,WC;eCe,uBD;aEC;mBFM;aEG;SFC;eGC;SHI;CZE"}},"type":"js/module"}]}