{"dependencies":[{"name":"../converter/index.cjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":14,"column":29,"index":407},"end":{"line":14,"column":62,"index":440}}],"key":"Ag3zzNw9xV7orXnP3jkMq3Ra6IU="}},{"name":"varuint-bitcoin","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":29,"index":526},"end":{"line":16,"column":55,"index":552}}],"key":"d/MLbboLwipJSIgxTfEgzKAp95s="}},{"name":"uint8array-tools","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":17,"column":27,"index":582},"end":{"line":17,"column":54,"index":609}}],"key":"d9z2uhLIsbEZR4MIqnLfYd/zTK8="}},{"name":"../typeFields.cjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}},{"start":{"line":18,"column":24,"index":636},"end":{"line":18,"column":52,"index":664}}],"key":"sSJEIkdJmOYEcBXjcVArEGPUZjc="}},{"name":"../converter/tools.cjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":15,"column":19,"index":462},"end":{"line":15,"column":52,"index":495}},{"start":{"line":15,"column":19,"index":462},"end":{"line":15,"column":52,"index":495}},{"start":{"line":15,"column":19,"index":462},"end":{"line":15,"column":52,"index":495}},{"start":{"line":15,"column":19,"index":462},"end":{"line":15,"column":52,"index":495}}],"key":"SR887O+XGMYFT3fgXENi3rfreLc="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var __importStar = this && this.__importStar || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result['default'] = mod;\n    return result;\n  };\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  var convert = __importStar(_$$_REQUIRE(_dependencyMap[0], \"../converter/index.cjs\"));\n  var varuint = __importStar(_$$_REQUIRE(_dependencyMap[1], \"varuint-bitcoin\"));\n  var tools = __importStar(_$$_REQUIRE(_dependencyMap[2], \"uint8array-tools\"));\n  function psbtFromBuffer(buffer, txGetter) {\n    var offset = 0;\n    function varSlice() {\n      var _varuint$decode = varuint.decode(buffer, offset),\n        keyLen = _varuint$decode.numberValue,\n        bytes = _varuint$decode.bytes;\n      offset += bytes;\n      var key = buffer.slice(offset, offset + Number(keyLen));\n      offset += Number(keyLen);\n      return key;\n    }\n    function readUInt32BE() {\n      var num = tools.readUInt32(buffer, offset, 'BE');\n      offset += 4;\n      return num;\n    }\n    function readUInt8() {\n      var num = tools.readUInt8(buffer, offset);\n      offset += 1;\n      return num;\n    }\n    function getKeyValue() {\n      var key = varSlice();\n      var value = varSlice();\n      return {\n        key: key,\n        value: value\n      };\n    }\n    function checkEndOfKeyValPairs() {\n      if (offset >= buffer.length) {\n        throw new Error('Format Error: Unexpected End of PSBT');\n      }\n      var isEnd = tools.readUInt8(buffer, offset) === 0;\n      if (isEnd) {\n        offset++;\n      }\n      return isEnd;\n    }\n    if (readUInt32BE() !== 0x70736274) {\n      throw new Error('Format Error: Invalid Magic Number');\n    }\n    if (readUInt8() !== 0xff) {\n      throw new Error('Format Error: Magic Number must be followed by 0xff separator');\n    }\n    var globalMapKeyVals = [];\n    var globalKeyIndex = {};\n    while (!checkEndOfKeyValPairs()) {\n      var keyVal = getKeyValue();\n      var hexKey = tools.toHex(keyVal.key);\n      if (globalKeyIndex[hexKey]) {\n        throw new Error('Format Error: Keys must be unique for global keymap: key ' + hexKey);\n      }\n      globalKeyIndex[hexKey] = 1;\n      globalMapKeyVals.push(keyVal);\n    }\n    var unsignedTxMaps = globalMapKeyVals.filter(function (keyVal) {\n      return keyVal.key[0] === _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").GlobalTypes.UNSIGNED_TX;\n    });\n    if (unsignedTxMaps.length !== 1) {\n      throw new Error('Format Error: Only one UNSIGNED_TX allowed');\n    }\n    var unsignedTx = txGetter(unsignedTxMaps[0].value);\n    // Get input and output counts to loop the respective fields\n    var _unsignedTx$getInputO = unsignedTx.getInputOutputCounts(),\n      inputCount = _unsignedTx$getInputO.inputCount,\n      outputCount = _unsignedTx$getInputO.outputCount;\n    var inputKeyVals = [];\n    var outputKeyVals = [];\n    // Get input fields\n    for (var index of _$$_REQUIRE(_dependencyMap[4], \"../converter/tools.cjs\").range(inputCount)) {\n      var inputKeyIndex = {};\n      var input = [];\n      while (!checkEndOfKeyValPairs()) {\n        var _keyVal = getKeyValue();\n        var _hexKey = tools.toHex(_keyVal.key);\n        if (inputKeyIndex[_hexKey]) {\n          throw new Error('Format Error: Keys must be unique for each input: ' + 'input index ' + index + ' key ' + _hexKey);\n        }\n        inputKeyIndex[_hexKey] = 1;\n        input.push(_keyVal);\n      }\n      inputKeyVals.push(input);\n    }\n    for (var _index of _$$_REQUIRE(_dependencyMap[4], \"../converter/tools.cjs\").range(outputCount)) {\n      var outputKeyIndex = {};\n      var output = [];\n      while (!checkEndOfKeyValPairs()) {\n        var _keyVal2 = getKeyValue();\n        var _hexKey2 = tools.toHex(_keyVal2.key);\n        if (outputKeyIndex[_hexKey2]) {\n          throw new Error('Format Error: Keys must be unique for each output: ' + 'output index ' + _index + ' key ' + _hexKey2);\n        }\n        outputKeyIndex[_hexKey2] = 1;\n        output.push(_keyVal2);\n      }\n      outputKeyVals.push(output);\n    }\n    return psbtFromKeyVals(unsignedTx, {\n      globalMapKeyVals: globalMapKeyVals,\n      inputKeyVals: inputKeyVals,\n      outputKeyVals: outputKeyVals\n    });\n  }\n  exports.psbtFromBuffer = psbtFromBuffer;\n  function checkKeyBuffer(type, keyBuf, keyNum) {\n    if (tools.compare(keyBuf, Uint8Array.from([keyNum]))) {\n      throw new Error(\n      // `Format Error: Invalid ${type} key: ${keyBuf.toString('hex')}`,\n      `Format Error: Invalid ${type} key: ${tools.toHex(keyBuf)}`);\n    }\n  }\n  exports.checkKeyBuffer = checkKeyBuffer;\n  function psbtFromKeyVals(unsignedTx, _ref) {\n    var globalMapKeyVals = _ref.globalMapKeyVals,\n      inputKeyVals = _ref.inputKeyVals,\n      outputKeyVals = _ref.outputKeyVals;\n    // That was easy :-)\n    var globalMap = {\n      unsignedTx: unsignedTx\n    };\n    var txCount = 0;\n    for (var keyVal of globalMapKeyVals) {\n      // If a globalMap item needs pubkey, uncomment\n      // const pubkey = convert.globals.checkPubkey(keyVal);\n      switch (keyVal.key[0]) {\n        case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").GlobalTypes.UNSIGNED_TX:\n          checkKeyBuffer('global', keyVal.key, _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").GlobalTypes.UNSIGNED_TX);\n          if (txCount > 0) {\n            throw new Error('Format Error: GlobalMap has multiple UNSIGNED_TX');\n          }\n          txCount++;\n          break;\n        case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").GlobalTypes.GLOBAL_XPUB:\n          if (globalMap.globalXpub === undefined) {\n            globalMap.globalXpub = [];\n          }\n          globalMap.globalXpub.push(convert.globals.globalXpub.decode(keyVal));\n          break;\n        default:\n          // This will allow inclusion during serialization.\n          if (!globalMap.unknownKeyVals) globalMap.unknownKeyVals = [];\n          globalMap.unknownKeyVals.push(keyVal);\n      }\n    }\n    // Get input and output counts to loop the respective fields\n    var inputCount = inputKeyVals.length;\n    var outputCount = outputKeyVals.length;\n    var inputs = [];\n    var outputs = [];\n    // Get input fields\n    for (var index of _$$_REQUIRE(_dependencyMap[4], \"../converter/tools.cjs\").range(inputCount)) {\n      var input = {};\n      for (var _keyVal3 of inputKeyVals[index]) {\n        convert.inputs.checkPubkey(_keyVal3);\n        switch (_keyVal3.key[0]) {\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.NON_WITNESS_UTXO:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.NON_WITNESS_UTXO);\n            if (input.nonWitnessUtxo !== undefined) {\n              throw new Error('Format Error: Input has multiple NON_WITNESS_UTXO');\n            }\n            input.nonWitnessUtxo = convert.inputs.nonWitnessUtxo.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.WITNESS_UTXO:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.WITNESS_UTXO);\n            if (input.witnessUtxo !== undefined) {\n              throw new Error('Format Error: Input has multiple WITNESS_UTXO');\n            }\n            input.witnessUtxo = convert.inputs.witnessUtxo.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.PARTIAL_SIG:\n            if (input.partialSig === undefined) {\n              input.partialSig = [];\n            }\n            input.partialSig.push(convert.inputs.partialSig.decode(_keyVal3));\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.SIGHASH_TYPE:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.SIGHASH_TYPE);\n            if (input.sighashType !== undefined) {\n              throw new Error('Format Error: Input has multiple SIGHASH_TYPE');\n            }\n            input.sighashType = convert.inputs.sighashType.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.REDEEM_SCRIPT:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.REDEEM_SCRIPT);\n            if (input.redeemScript !== undefined) {\n              throw new Error('Format Error: Input has multiple REDEEM_SCRIPT');\n            }\n            input.redeemScript = convert.inputs.redeemScript.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.WITNESS_SCRIPT:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.WITNESS_SCRIPT);\n            if (input.witnessScript !== undefined) {\n              throw new Error('Format Error: Input has multiple WITNESS_SCRIPT');\n            }\n            input.witnessScript = convert.inputs.witnessScript.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.BIP32_DERIVATION:\n            if (input.bip32Derivation === undefined) {\n              input.bip32Derivation = [];\n            }\n            input.bip32Derivation.push(convert.inputs.bip32Derivation.decode(_keyVal3));\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.FINAL_SCRIPTSIG:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.FINAL_SCRIPTSIG);\n            input.finalScriptSig = convert.inputs.finalScriptSig.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.FINAL_SCRIPTWITNESS:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.FINAL_SCRIPTWITNESS);\n            input.finalScriptWitness = convert.inputs.finalScriptWitness.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.POR_COMMITMENT:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.POR_COMMITMENT);\n            input.porCommitment = convert.inputs.porCommitment.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.TAP_KEY_SIG:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.TAP_KEY_SIG);\n            input.tapKeySig = convert.inputs.tapKeySig.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.TAP_SCRIPT_SIG:\n            if (input.tapScriptSig === undefined) {\n              input.tapScriptSig = [];\n            }\n            input.tapScriptSig.push(convert.inputs.tapScriptSig.decode(_keyVal3));\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.TAP_LEAF_SCRIPT:\n            if (input.tapLeafScript === undefined) {\n              input.tapLeafScript = [];\n            }\n            input.tapLeafScript.push(convert.inputs.tapLeafScript.decode(_keyVal3));\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.TAP_BIP32_DERIVATION:\n            if (input.tapBip32Derivation === undefined) {\n              input.tapBip32Derivation = [];\n            }\n            input.tapBip32Derivation.push(convert.inputs.tapBip32Derivation.decode(_keyVal3));\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.TAP_INTERNAL_KEY:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.TAP_INTERNAL_KEY);\n            input.tapInternalKey = convert.inputs.tapInternalKey.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.TAP_MERKLE_ROOT:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").InputTypes.TAP_MERKLE_ROOT);\n            input.tapMerkleRoot = convert.inputs.tapMerkleRoot.decode(_keyVal3);\n            break;\n          default:\n            // This will allow inclusion during serialization.\n            if (!input.unknownKeyVals) input.unknownKeyVals = [];\n            input.unknownKeyVals.push(_keyVal3);\n        }\n      }\n      inputs.push(input);\n    }\n    for (var _index2 of _$$_REQUIRE(_dependencyMap[4], \"../converter/tools.cjs\").range(outputCount)) {\n      var output = {};\n      for (var _keyVal4 of outputKeyVals[_index2]) {\n        convert.outputs.checkPubkey(_keyVal4);\n        switch (_keyVal4.key[0]) {\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").OutputTypes.REDEEM_SCRIPT:\n            checkKeyBuffer('output', _keyVal4.key, _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").OutputTypes.REDEEM_SCRIPT);\n            if (output.redeemScript !== undefined) {\n              throw new Error('Format Error: Output has multiple REDEEM_SCRIPT');\n            }\n            output.redeemScript = convert.outputs.redeemScript.decode(_keyVal4);\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").OutputTypes.WITNESS_SCRIPT:\n            checkKeyBuffer('output', _keyVal4.key, _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").OutputTypes.WITNESS_SCRIPT);\n            if (output.witnessScript !== undefined) {\n              throw new Error('Format Error: Output has multiple WITNESS_SCRIPT');\n            }\n            output.witnessScript = convert.outputs.witnessScript.decode(_keyVal4);\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").OutputTypes.BIP32_DERIVATION:\n            if (output.bip32Derivation === undefined) {\n              output.bip32Derivation = [];\n            }\n            output.bip32Derivation.push(convert.outputs.bip32Derivation.decode(_keyVal4));\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").OutputTypes.TAP_INTERNAL_KEY:\n            checkKeyBuffer('output', _keyVal4.key, _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").OutputTypes.TAP_INTERNAL_KEY);\n            output.tapInternalKey = convert.outputs.tapInternalKey.decode(_keyVal4);\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").OutputTypes.TAP_TREE:\n            checkKeyBuffer('output', _keyVal4.key, _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").OutputTypes.TAP_TREE);\n            output.tapTree = convert.outputs.tapTree.decode(_keyVal4);\n            break;\n          case _$$_REQUIRE(_dependencyMap[3], \"../typeFields.cjs\").OutputTypes.TAP_BIP32_DERIVATION:\n            if (output.tapBip32Derivation === undefined) {\n              output.tapBip32Derivation = [];\n            }\n            output.tapBip32Derivation.push(convert.outputs.tapBip32Derivation.decode(_keyVal4));\n            break;\n          default:\n            if (!output.unknownKeyVals) output.unknownKeyVals = [];\n            output.unknownKeyVals.push(_keyVal4);\n        }\n      }\n      outputs.push(output);\n    }\n    return {\n      globalMap: globalMap,\n      inputs: inputs,\n      outputs: outputs\n    };\n  }\n  exports.psbtFromKeyVals = psbtFromKeyVals;\n});","lineCount":323,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__importStar"],[4,18,2,16],[4,21,3,3],[4,25,3,7],[4,29,3,11],[4,33,3,15],[4,34,3,16,"__importStar"],[4,46,3,28],[4,50,4,2],[4,60,4,11,"mod"],[4,63,4,14],[4,65,4,16],[5,4,5,4],[5,8,5,8,"mod"],[5,11,5,11],[5,15,5,15,"mod"],[5,18,5,18],[5,19,5,19,"__esModule"],[5,29,5,29],[5,31,5,31],[5,38,5,38,"mod"],[5,41,5,41],[6,4,6,4],[6,8,6,8,"result"],[6,14,6,14],[6,17,6,17],[6,18,6,18],[6,19,6,19],[7,4,7,4],[7,8,7,8,"mod"],[7,11,7,11],[7,15,7,15],[7,19,7,19],[7,21,8,6],[7,26,8,11],[7,30,8,15,"k"],[7,31,8,16],[7,35,8,20,"mod"],[7,38,8,23],[7,40,9,8],[7,44,9,12,"Object"],[7,50,9,18],[7,51,9,19,"hasOwnProperty"],[7,65,9,33],[7,66,9,34,"call"],[7,70,9,38],[7,71,9,39,"mod"],[7,74,9,42],[7,76,9,44,"k"],[7,77,9,45],[7,78,9,46],[7,80,9,48,"result"],[7,86,9,54],[7,87,9,55,"k"],[7,88,9,56],[7,89,9,57],[7,92,9,60,"mod"],[7,95,9,63],[7,96,9,64,"k"],[7,97,9,65],[7,98,9,66],[8,4,10,4,"result"],[8,10,10,10],[8,11,10,11],[8,20,10,20],[8,21,10,21],[8,24,10,24,"mod"],[8,27,10,27],[9,4,11,4],[9,11,11,11,"result"],[9,17,11,17],[10,2,12,2],[10,3,12,3],[11,2,13,0,"Object"],[11,8,13,6],[11,9,13,7,"defineProperty"],[11,23,13,21],[11,24,13,22,"exports"],[11,31,13,29],[11,33,13,31],[11,45,13,43],[11,47,13,45],[12,4,13,47,"value"],[12,9,13,52],[12,11,13,54],[13,2,13,59],[13,3,13,60],[13,4,13,61],[14,2,14,0],[14,6,14,6,"convert"],[14,13,14,13],[14,16,14,16,"__importStar"],[14,28,14,28],[14,29,14,29,"require"],[14,40,14,36],[14,41,14,36,"_dependencyMap"],[14,55,14,36],[14,84,14,61],[14,85,14,62],[14,86,14,63],[15,2,16,0],[15,6,16,6,"varuint"],[15,13,16,13],[15,16,16,16,"__importStar"],[15,28,16,28],[15,29,16,29,"require"],[15,40,16,36],[15,41,16,36,"_dependencyMap"],[15,55,16,36],[15,77,16,54],[15,78,16,55],[15,79,16,56],[16,2,17,0],[16,6,17,6,"tools"],[16,11,17,11],[16,14,17,14,"__importStar"],[16,26,17,26],[16,27,17,27,"require"],[16,38,17,34],[16,39,17,34,"_dependencyMap"],[16,53,17,34],[16,76,17,53],[16,77,17,54],[16,78,17,55],[17,2,19,0],[17,11,19,9,"psbtFromBuffer"],[17,25,19,23,"psbtFromBuffer"],[17,26,19,24,"buffer"],[17,32,19,30],[17,34,19,32,"txGetter"],[17,42,19,40],[17,44,19,42],[18,4,20,2],[18,8,20,6,"offset"],[18,14,20,12],[18,17,20,15],[18,18,20,16],[19,4,21,2],[19,13,21,11,"varSlice"],[19,21,21,19,"varSlice"],[19,22,21,19],[19,24,21,22],[20,6,22,4],[20,10,22,4,"_varuint$decode"],[20,25,22,4],[20,28,22,43,"varuint"],[20,35,22,50],[20,36,22,51,"decode"],[20,42,22,57],[20,43,22,58,"buffer"],[20,49,22,64],[20,51,22,66,"offset"],[20,57,22,72],[20,58,22,73],[21,8,22,25,"keyLen"],[21,14,22,31],[21,17,22,31,"_varuint$decode"],[21,32,22,31],[21,33,22,12,"numberValue"],[21,44,22,23],[22,8,22,33,"bytes"],[22,13,22,38],[22,16,22,38,"_varuint$decode"],[22,31,22,38],[22,32,22,33,"bytes"],[22,37,22,38],[23,6,23,4,"offset"],[23,12,23,10],[23,16,23,14,"bytes"],[23,21,23,19],[24,6,24,4],[24,10,24,10,"key"],[24,13,24,13],[24,16,24,16,"buffer"],[24,22,24,22],[24,23,24,23,"slice"],[24,28,24,28],[24,29,24,29,"offset"],[24,35,24,35],[24,37,24,37,"offset"],[24,43,24,43],[24,46,24,46,"Number"],[24,52,24,52],[24,53,24,53,"keyLen"],[24,59,24,59],[24,60,24,60],[24,61,24,61],[25,6,25,4,"offset"],[25,12,25,10],[25,16,25,14,"Number"],[25,22,25,20],[25,23,25,21,"keyLen"],[25,29,25,27],[25,30,25,28],[26,6,26,4],[26,13,26,11,"key"],[26,16,26,14],[27,4,27,2],[28,4,28,2],[28,13,28,11,"readUInt32BE"],[28,25,28,23,"readUInt32BE"],[28,26,28,23],[28,28,28,26],[29,6,29,4],[29,10,29,10,"num"],[29,13,29,13],[29,16,29,16,"tools"],[29,21,29,21],[29,22,29,22,"readUInt32"],[29,32,29,32],[29,33,29,33,"buffer"],[29,39,29,39],[29,41,29,41,"offset"],[29,47,29,47],[29,49,29,49],[29,53,29,53],[29,54,29,54],[30,6,30,4,"offset"],[30,12,30,10],[30,16,30,14],[30,17,30,15],[31,6,31,4],[31,13,31,11,"num"],[31,16,31,14],[32,4,32,2],[33,4,33,2],[33,13,33,11,"readUInt8"],[33,22,33,20,"readUInt8"],[33,23,33,20],[33,25,33,23],[34,6,34,4],[34,10,34,10,"num"],[34,13,34,13],[34,16,34,16,"tools"],[34,21,34,21],[34,22,34,22,"readUInt8"],[34,31,34,31],[34,32,34,32,"buffer"],[34,38,34,38],[34,40,34,40,"offset"],[34,46,34,46],[34,47,34,47],[35,6,35,4,"offset"],[35,12,35,10],[35,16,35,14],[35,17,35,15],[36,6,36,4],[36,13,36,11,"num"],[36,16,36,14],[37,4,37,2],[38,4,38,2],[38,13,38,11,"getKeyValue"],[38,24,38,22,"getKeyValue"],[38,25,38,22],[38,27,38,25],[39,6,39,4],[39,10,39,10,"key"],[39,13,39,13],[39,16,39,16,"varSlice"],[39,24,39,24],[39,25,39,25],[39,26,39,26],[40,6,40,4],[40,10,40,10,"value"],[40,15,40,15],[40,18,40,18,"varSlice"],[40,26,40,26],[40,27,40,27],[40,28,40,28],[41,6,41,4],[41,13,41,11],[42,8,42,6,"key"],[42,11,42,9],[42,13,42,6,"key"],[42,16,42,9],[43,8,43,6,"value"],[43,13,43,11],[43,15,43,6,"value"],[44,6,44,4],[44,7,44,5],[45,4,45,2],[46,4,46,2],[46,13,46,11,"checkEndOfKeyValPairs"],[46,34,46,32,"checkEndOfKeyValPairs"],[46,35,46,32],[46,37,46,35],[47,6,47,4],[47,10,47,8,"offset"],[47,16,47,14],[47,20,47,18,"buffer"],[47,26,47,24],[47,27,47,25,"length"],[47,33,47,31],[47,35,47,33],[48,8,48,6],[48,14,48,12],[48,18,48,16,"Error"],[48,23,48,21],[48,24,48,22],[48,62,48,60],[48,63,48,61],[49,6,49,4],[50,6,50,4],[50,10,50,10,"isEnd"],[50,15,50,15],[50,18,50,18,"tools"],[50,23,50,23],[50,24,50,24,"readUInt8"],[50,33,50,33],[50,34,50,34,"buffer"],[50,40,50,40],[50,42,50,42,"offset"],[50,48,50,48],[50,49,50,49],[50,54,50,54],[50,55,50,55],[51,6,51,4],[51,10,51,8,"isEnd"],[51,15,51,13],[51,17,51,15],[52,8,52,6,"offset"],[52,14,52,12],[52,16,52,14],[53,6,53,4],[54,6,54,4],[54,13,54,11,"isEnd"],[54,18,54,16],[55,4,55,2],[56,4,56,2],[56,8,56,6,"readUInt32BE"],[56,20,56,18],[56,21,56,19],[56,22,56,20],[56,27,56,25],[56,37,56,35],[56,39,56,37],[57,6,57,4],[57,12,57,10],[57,16,57,14,"Error"],[57,21,57,19],[57,22,57,20],[57,58,57,56],[57,59,57,57],[58,4,58,2],[59,4,59,2],[59,8,59,6,"readUInt8"],[59,17,59,15],[59,18,59,16],[59,19,59,17],[59,24,59,22],[59,28,59,26],[59,30,59,28],[60,6,60,4],[60,12,60,10],[60,16,60,14,"Error"],[60,21,60,19],[60,22,61,6],[60,85,62,4],[60,86,62,5],[61,4,63,2],[62,4,64,2],[62,8,64,8,"globalMapKeyVals"],[62,24,64,24],[62,27,64,27],[62,29,64,29],[63,4,65,2],[63,8,65,8,"globalKeyIndex"],[63,22,65,22],[63,25,65,25],[63,26,65,26],[63,27,65,27],[64,4,66,2],[64,11,66,9],[64,12,66,10,"checkEndOfKeyValPairs"],[64,33,66,31],[64,34,66,32],[64,35,66,33],[64,37,66,35],[65,6,67,4],[65,10,67,10,"keyVal"],[65,16,67,16],[65,19,67,19,"getKeyValue"],[65,30,67,30],[65,31,67,31],[65,32,67,32],[66,6,68,4],[66,10,68,10,"hexKey"],[66,16,68,16],[66,19,68,19,"tools"],[66,24,68,24],[66,25,68,25,"toHex"],[66,30,68,30],[66,31,68,31,"keyVal"],[66,37,68,37],[66,38,68,38,"key"],[66,41,68,41],[66,42,68,42],[67,6,69,4],[67,10,69,8,"globalKeyIndex"],[67,24,69,22],[67,25,69,23,"hexKey"],[67,31,69,29],[67,32,69,30],[67,34,69,32],[68,8,70,6],[68,14,70,12],[68,18,70,16,"Error"],[68,23,70,21],[68,24,71,8],[68,83,71,67],[68,86,71,70,"hexKey"],[68,92,72,6],[68,93,72,7],[69,6,73,4],[70,6,74,4,"globalKeyIndex"],[70,20,74,18],[70,21,74,19,"hexKey"],[70,27,74,25],[70,28,74,26],[70,31,74,29],[70,32,74,30],[71,6,75,4,"globalMapKeyVals"],[71,22,75,20],[71,23,75,21,"push"],[71,27,75,25],[71,28,75,26,"keyVal"],[71,34,75,32],[71,35,75,33],[72,4,76,2],[73,4,77,2],[73,8,77,8,"unsignedTxMaps"],[73,22,77,22],[73,25,77,25,"globalMapKeyVals"],[73,41,77,41],[73,42,77,42,"filter"],[73,48,77,48],[73,49,78,4],[73,59,78,4,"keyVal"],[73,65,78,10],[74,6,78,10],[74,13,78,14,"keyVal"],[74,19,78,20],[74,20,78,21,"key"],[74,23,78,24],[74,24,78,25],[74,25,78,26],[74,26,78,27],[74,31,78,32,"_$$_REQUIRE"],[74,42,78,32],[74,43,78,32,"_dependencyMap"],[74,57,78,32],[74,83,78,48,"GlobalTypes"],[74,94,78,59],[74,95,78,60,"UNSIGNED_TX"],[74,106,78,71],[75,4,78,71],[75,5,79,2],[75,6,79,3],[76,4,80,2],[76,8,80,6,"unsignedTxMaps"],[76,22,80,20],[76,23,80,21,"length"],[76,29,80,27],[76,34,80,32],[76,35,80,33],[76,37,80,35],[77,6,81,4],[77,12,81,10],[77,16,81,14,"Error"],[77,21,81,19],[77,22,81,20],[77,66,81,64],[77,67,81,65],[78,4,82,2],[79,4,83,2],[79,8,83,8,"unsignedTx"],[79,18,83,18],[79,21,83,21,"txGetter"],[79,29,83,29],[79,30,83,30,"unsignedTxMaps"],[79,44,83,44],[79,45,83,45],[79,46,83,46],[79,47,83,47],[79,48,83,48,"value"],[79,53,83,53],[79,54,83,54],[80,4,84,2],[81,4,85,2],[81,8,85,2,"_unsignedTx$getInputO"],[81,29,85,2],[81,32,85,38,"unsignedTx"],[81,42,85,48],[81,43,85,49,"getInputOutputCounts"],[81,63,85,69],[81,64,85,70],[81,65,85,71],[82,6,85,10,"inputCount"],[82,16,85,20],[82,19,85,20,"_unsignedTx$getInputO"],[82,40,85,20],[82,41,85,10,"inputCount"],[82,51,85,20],[83,6,85,22,"outputCount"],[83,17,85,33],[83,20,85,33,"_unsignedTx$getInputO"],[83,41,85,33],[83,42,85,22,"outputCount"],[83,53,85,33],[84,4,86,2],[84,8,86,8,"inputKeyVals"],[84,20,86,20],[84,23,86,23],[84,25,86,25],[85,4,87,2],[85,8,87,8,"outputKeyVals"],[85,21,87,21],[85,24,87,24],[85,26,87,26],[86,4,88,2],[87,4,89,2],[87,9,89,7],[87,13,89,13,"index"],[87,18,89,18],[87,22,89,22,"_$$_REQUIRE"],[87,33,89,22],[87,34,89,22,"_dependencyMap"],[87,48,89,22],[87,79,89,33,"range"],[87,84,89,38],[87,85,89,39,"inputCount"],[87,95,89,49],[87,96,89,50],[87,98,89,52],[88,6,90,4],[88,10,90,10,"inputKeyIndex"],[88,23,90,23],[88,26,90,26],[88,27,90,27],[88,28,90,28],[89,6,91,4],[89,10,91,10,"input"],[89,15,91,15],[89,18,91,18],[89,20,91,20],[90,6,92,4],[90,13,92,11],[90,14,92,12,"checkEndOfKeyValPairs"],[90,35,92,33],[90,36,92,34],[90,37,92,35],[90,39,92,37],[91,8,93,6],[91,12,93,12,"keyVal"],[91,19,93,18],[91,22,93,21,"getKeyValue"],[91,33,93,32],[91,34,93,33],[91,35,93,34],[92,8,94,6],[92,12,94,12,"hexKey"],[92,19,94,18],[92,22,94,21,"tools"],[92,27,94,26],[92,28,94,27,"toHex"],[92,33,94,32],[92,34,94,33,"keyVal"],[92,41,94,39],[92,42,94,40,"key"],[92,45,94,43],[92,46,94,44],[93,8,95,6],[93,12,95,10,"inputKeyIndex"],[93,25,95,23],[93,26,95,24,"hexKey"],[93,33,95,30],[93,34,95,31],[93,36,95,33],[94,10,96,8],[94,16,96,14],[94,20,96,18,"Error"],[94,25,96,23],[94,26,97,10],[94,78,97,62],[94,81,98,12],[94,95,98,26],[94,98,99,12,"index"],[94,103,99,17],[94,106,100,12],[94,113,100,19],[94,116,101,12,"hexKey"],[94,123,102,8],[94,124,102,9],[95,8,103,6],[96,8,104,6,"inputKeyIndex"],[96,21,104,19],[96,22,104,20,"hexKey"],[96,29,104,26],[96,30,104,27],[96,33,104,30],[96,34,104,31],[97,8,105,6,"input"],[97,13,105,11],[97,14,105,12,"push"],[97,18,105,16],[97,19,105,17,"keyVal"],[97,26,105,23],[97,27,105,24],[98,6,106,4],[99,6,107,4,"inputKeyVals"],[99,18,107,16],[99,19,107,17,"push"],[99,23,107,21],[99,24,107,22,"input"],[99,29,107,27],[99,30,107,28],[100,4,108,2],[101,4,109,2],[101,9,109,7],[101,13,109,13,"index"],[101,19,109,18],[101,23,109,22,"_$$_REQUIRE"],[101,34,109,22],[101,35,109,22,"_dependencyMap"],[101,49,109,22],[101,80,109,33,"range"],[101,85,109,38],[101,86,109,39,"outputCount"],[101,97,109,50],[101,98,109,51],[101,100,109,53],[102,6,110,4],[102,10,110,10,"outputKeyIndex"],[102,24,110,24],[102,27,110,27],[102,28,110,28],[102,29,110,29],[103,6,111,4],[103,10,111,10,"output"],[103,16,111,16],[103,19,111,19],[103,21,111,21],[104,6,112,4],[104,13,112,11],[104,14,112,12,"checkEndOfKeyValPairs"],[104,35,112,33],[104,36,112,34],[104,37,112,35],[104,39,112,37],[105,8,113,6],[105,12,113,12,"keyVal"],[105,20,113,18],[105,23,113,21,"getKeyValue"],[105,34,113,32],[105,35,113,33],[105,36,113,34],[106,8,114,6],[106,12,114,12,"hexKey"],[106,20,114,18],[106,23,114,21,"tools"],[106,28,114,26],[106,29,114,27,"toHex"],[106,34,114,32],[106,35,114,33,"keyVal"],[106,43,114,39],[106,44,114,40,"key"],[106,47,114,43],[106,48,114,44],[107,8,115,6],[107,12,115,10,"outputKeyIndex"],[107,26,115,24],[107,27,115,25,"hexKey"],[107,35,115,31],[107,36,115,32],[107,38,115,34],[108,10,116,8],[108,16,116,14],[108,20,116,18,"Error"],[108,25,116,23],[108,26,117,10],[108,79,117,63],[108,82,118,12],[108,97,118,27],[108,100,119,12,"index"],[108,106,119,17],[108,109,120,12],[108,116,120,19],[108,119,121,12,"hexKey"],[108,127,122,8],[108,128,122,9],[109,8,123,6],[110,8,124,6,"outputKeyIndex"],[110,22,124,20],[110,23,124,21,"hexKey"],[110,31,124,27],[110,32,124,28],[110,35,124,31],[110,36,124,32],[111,8,125,6,"output"],[111,14,125,12],[111,15,125,13,"push"],[111,19,125,17],[111,20,125,18,"keyVal"],[111,28,125,24],[111,29,125,25],[112,6,126,4],[113,6,127,4,"outputKeyVals"],[113,19,127,17],[113,20,127,18,"push"],[113,24,127,22],[113,25,127,23,"output"],[113,31,127,29],[113,32,127,30],[114,4,128,2],[115,4,129,2],[115,11,129,9,"psbtFromKeyVals"],[115,26,129,24],[115,27,129,25,"unsignedTx"],[115,37,129,35],[115,39,129,37],[116,6,130,4,"globalMapKeyVals"],[116,22,130,20],[116,24,130,4,"globalMapKeyVals"],[116,40,130,20],[117,6,131,4,"inputKeyVals"],[117,18,131,16],[117,20,131,4,"inputKeyVals"],[117,32,131,16],[118,6,132,4,"outputKeyVals"],[118,19,132,17],[118,21,132,4,"outputKeyVals"],[119,4,133,2],[119,5,133,3],[119,6,133,4],[120,2,134,0],[121,2,135,0,"exports"],[121,9,135,7],[121,10,135,8,"psbtFromBuffer"],[121,24,135,22],[121,27,135,25,"psbtFromBuffer"],[121,41,135,39],[122,2,136,0],[122,11,136,9,"checkKeyBuffer"],[122,25,136,23,"checkKeyBuffer"],[122,26,136,24,"type"],[122,30,136,28],[122,32,136,30,"keyBuf"],[122,38,136,36],[122,40,136,38,"keyNum"],[122,46,136,44],[122,48,136,46],[123,4,137,2],[123,8,137,6,"tools"],[123,13,137,11],[123,14,137,12,"compare"],[123,21,137,19],[123,22,137,20,"keyBuf"],[123,28,137,26],[123,30,137,28,"Uint8Array"],[123,40,137,38],[123,41,137,39,"from"],[123,45,137,43],[123,46,137,44],[123,47,137,45,"keyNum"],[123,53,137,51],[123,54,137,52],[123,55,137,53],[123,56,137,54],[123,58,137,56],[124,6,138,4],[124,12,138,10],[124,16,138,14,"Error"],[124,21,138,19],[125,6,139,6],[126,6,140,6],[126,31,140,31,"type"],[126,35,140,35],[126,44,140,44,"tools"],[126,49,140,49],[126,50,140,50,"toHex"],[126,55,140,55],[126,56,140,56,"keyBuf"],[126,62,140,62],[126,63,140,63],[126,65,141,4],[126,66,141,5],[127,4,142,2],[128,2,143,0],[129,2,144,0,"exports"],[129,9,144,7],[129,10,144,8,"checkKeyBuffer"],[129,24,144,22],[129,27,144,25,"checkKeyBuffer"],[129,41,144,39],[130,2,145,0],[130,11,145,9,"psbtFromKeyVals"],[130,26,145,24,"psbtFromKeyVals"],[130,27,146,2,"unsignedTx"],[130,37,146,12],[130,39,146,12,"_ref"],[130,43,146,12],[130,45,148,2],[131,4,148,2],[131,8,147,4,"globalMapKeyVals"],[131,24,147,20],[131,27,147,20,"_ref"],[131,31,147,20],[131,32,147,4,"globalMapKeyVals"],[131,48,147,20],[132,6,147,22,"inputKeyVals"],[132,18,147,34],[132,21,147,34,"_ref"],[132,25,147,34],[132,26,147,22,"inputKeyVals"],[132,38,147,34],[133,6,147,36,"outputKeyVals"],[133,19,147,49],[133,22,147,49,"_ref"],[133,26,147,49],[133,27,147,36,"outputKeyVals"],[133,40,147,49],[134,4,149,2],[135,4,150,2],[135,8,150,8,"globalMap"],[135,17,150,17],[135,20,150,20],[136,6,151,4,"unsignedTx"],[136,16,151,14],[136,18,151,4,"unsignedTx"],[137,4,152,2],[137,5,152,3],[138,4,153,2],[138,8,153,6,"txCount"],[138,15,153,13],[138,18,153,16],[138,19,153,17],[139,4,154,2],[139,9,154,7],[139,13,154,13,"keyVal"],[139,19,154,19],[139,23,154,23,"globalMapKeyVals"],[139,39,154,39],[139,41,154,41],[140,6,155,4],[141,6,156,4],[142,6,157,4],[142,14,157,12,"keyVal"],[142,20,157,18],[142,21,157,19,"key"],[142,24,157,22],[142,25,157,23],[142,26,157,24],[142,27,157,25],[143,8,158,6],[143,13,158,11,"_$$_REQUIRE"],[143,24,158,11],[143,25,158,11,"_dependencyMap"],[143,39,158,11],[143,65,158,27,"GlobalTypes"],[143,76,158,38],[143,77,158,39,"UNSIGNED_TX"],[143,88,158,50],[144,10,159,8,"checkKeyBuffer"],[144,24,159,22],[144,25,160,10],[144,33,160,18],[144,35,161,10,"keyVal"],[144,41,161,16],[144,42,161,17,"key"],[144,45,161,20],[144,47,162,10,"_$$_REQUIRE"],[144,58,162,10],[144,59,162,10,"_dependencyMap"],[144,73,162,10],[144,99,162,26,"GlobalTypes"],[144,110,162,37],[144,111,162,38,"UNSIGNED_TX"],[144,122,163,8],[144,123,163,9],[145,10,164,8],[145,14,164,12,"txCount"],[145,21,164,19],[145,24,164,22],[145,25,164,23],[145,27,164,25],[146,12,165,10],[146,18,165,16],[146,22,165,20,"Error"],[146,27,165,25],[146,28,165,26],[146,78,165,76],[146,79,165,77],[147,10,166,8],[148,10,167,8,"txCount"],[148,17,167,15],[148,19,167,17],[149,10,168,8],[150,8,169,6],[150,13,169,11,"_$$_REQUIRE"],[150,24,169,11],[150,25,169,11,"_dependencyMap"],[150,39,169,11],[150,65,169,27,"GlobalTypes"],[150,76,169,38],[150,77,169,39,"GLOBAL_XPUB"],[150,88,169,50],[151,10,170,8],[151,14,170,12,"globalMap"],[151,23,170,21],[151,24,170,22,"globalXpub"],[151,34,170,32],[151,39,170,37,"undefined"],[151,48,170,46],[151,50,170,48],[152,12,171,10,"globalMap"],[152,21,171,19],[152,22,171,20,"globalXpub"],[152,32,171,30],[152,35,171,33],[152,37,171,35],[153,10,172,8],[154,10,173,8,"globalMap"],[154,19,173,17],[154,20,173,18,"globalXpub"],[154,30,173,28],[154,31,173,29,"push"],[154,35,173,33],[154,36,173,34,"convert"],[154,43,173,41],[154,44,173,42,"globals"],[154,51,173,49],[154,52,173,50,"globalXpub"],[154,62,173,60],[154,63,173,61,"decode"],[154,69,173,67],[154,70,173,68,"keyVal"],[154,76,173,74],[154,77,173,75],[154,78,173,76],[155,10,174,8],[156,8,175,6],[157,10,176,8],[158,10,177,8],[158,14,177,12],[158,15,177,13,"globalMap"],[158,24,177,22],[158,25,177,23,"unknownKeyVals"],[158,39,177,37],[158,41,177,39,"globalMap"],[158,50,177,48],[158,51,177,49,"unknownKeyVals"],[158,65,177,63],[158,68,177,66],[158,70,177,68],[159,10,178,8,"globalMap"],[159,19,178,17],[159,20,178,18,"unknownKeyVals"],[159,34,178,32],[159,35,178,33,"push"],[159,39,178,37],[159,40,178,38,"keyVal"],[159,46,178,44],[159,47,178,45],[160,6,179,4],[161,4,180,2],[162,4,181,2],[163,4,182,2],[163,8,182,8,"inputCount"],[163,18,182,18],[163,21,182,21,"inputKeyVals"],[163,33,182,33],[163,34,182,34,"length"],[163,40,182,40],[164,4,183,2],[164,8,183,8,"outputCount"],[164,19,183,19],[164,22,183,22,"outputKeyVals"],[164,35,183,35],[164,36,183,36,"length"],[164,42,183,42],[165,4,184,2],[165,8,184,8,"inputs"],[165,14,184,14],[165,17,184,17],[165,19,184,19],[166,4,185,2],[166,8,185,8,"outputs"],[166,15,185,15],[166,18,185,18],[166,20,185,20],[167,4,186,2],[168,4,187,2],[168,9,187,7],[168,13,187,13,"index"],[168,18,187,18],[168,22,187,22,"_$$_REQUIRE"],[168,33,187,22],[168,34,187,22,"_dependencyMap"],[168,48,187,22],[168,79,187,33,"range"],[168,84,187,38],[168,85,187,39,"inputCount"],[168,95,187,49],[168,96,187,50],[168,98,187,52],[169,6,188,4],[169,10,188,10,"input"],[169,15,188,15],[169,18,188,18],[169,19,188,19],[169,20,188,20],[170,6,189,4],[170,11,189,9],[170,15,189,15,"keyVal"],[170,23,189,21],[170,27,189,25,"inputKeyVals"],[170,39,189,37],[170,40,189,38,"index"],[170,45,189,43],[170,46,189,44],[170,48,189,46],[171,8,190,6,"convert"],[171,15,190,13],[171,16,190,14,"inputs"],[171,22,190,20],[171,23,190,21,"checkPubkey"],[171,34,190,32],[171,35,190,33,"keyVal"],[171,43,190,39],[171,44,190,40],[172,8,191,6],[172,16,191,14,"keyVal"],[172,24,191,20],[172,25,191,21,"key"],[172,28,191,24],[172,29,191,25],[172,30,191,26],[172,31,191,27],[173,10,192,8],[173,15,192,13,"_$$_REQUIRE"],[173,26,192,13],[173,27,192,13,"_dependencyMap"],[173,41,192,13],[173,67,192,29,"InputTypes"],[173,77,192,39],[173,78,192,40,"NON_WITNESS_UTXO"],[173,94,192,56],[174,12,193,10,"checkKeyBuffer"],[174,26,193,24],[174,27,194,12],[174,34,194,19],[174,36,195,12,"keyVal"],[174,44,195,18],[174,45,195,19,"key"],[174,48,195,22],[174,50,196,12,"_$$_REQUIRE"],[174,61,196,12],[174,62,196,12,"_dependencyMap"],[174,76,196,12],[174,102,196,28,"InputTypes"],[174,112,196,38],[174,113,196,39,"NON_WITNESS_UTXO"],[174,129,197,10],[174,130,197,11],[175,12,198,10],[175,16,198,14,"input"],[175,21,198,19],[175,22,198,20,"nonWitnessUtxo"],[175,36,198,34],[175,41,198,39,"undefined"],[175,50,198,48],[175,52,198,50],[176,14,199,12],[176,20,199,18],[176,24,199,22,"Error"],[176,29,199,27],[176,30,200,14],[176,81,201,12],[176,82,201,13],[177,12,202,10],[178,12,203,10,"input"],[178,17,203,15],[178,18,203,16,"nonWitnessUtxo"],[178,32,203,30],[178,35,203,33,"convert"],[178,42,203,40],[178,43,203,41,"inputs"],[178,49,203,47],[178,50,203,48,"nonWitnessUtxo"],[178,64,203,62],[178,65,203,63,"decode"],[178,71,203,69],[178,72,203,70,"keyVal"],[178,80,203,76],[178,81,203,77],[179,12,204,10],[180,10,205,8],[180,15,205,13,"_$$_REQUIRE"],[180,26,205,13],[180,27,205,13,"_dependencyMap"],[180,41,205,13],[180,67,205,29,"InputTypes"],[180,77,205,39],[180,78,205,40,"WITNESS_UTXO"],[180,90,205,52],[181,12,206,10,"checkKeyBuffer"],[181,26,206,24],[181,27,207,12],[181,34,207,19],[181,36,208,12,"keyVal"],[181,44,208,18],[181,45,208,19,"key"],[181,48,208,22],[181,50,209,12,"_$$_REQUIRE"],[181,61,209,12],[181,62,209,12,"_dependencyMap"],[181,76,209,12],[181,102,209,28,"InputTypes"],[181,112,209,38],[181,113,209,39,"WITNESS_UTXO"],[181,125,210,10],[181,126,210,11],[182,12,211,10],[182,16,211,14,"input"],[182,21,211,19],[182,22,211,20,"witnessUtxo"],[182,33,211,31],[182,38,211,36,"undefined"],[182,47,211,45],[182,49,211,47],[183,14,212,12],[183,20,212,18],[183,24,212,22,"Error"],[183,29,212,27],[183,30,212,28],[183,77,212,75],[183,78,212,76],[184,12,213,10],[185,12,214,10,"input"],[185,17,214,15],[185,18,214,16,"witnessUtxo"],[185,29,214,27],[185,32,214,30,"convert"],[185,39,214,37],[185,40,214,38,"inputs"],[185,46,214,44],[185,47,214,45,"witnessUtxo"],[185,58,214,56],[185,59,214,57,"decode"],[185,65,214,63],[185,66,214,64,"keyVal"],[185,74,214,70],[185,75,214,71],[186,12,215,10],[187,10,216,8],[187,15,216,13,"_$$_REQUIRE"],[187,26,216,13],[187,27,216,13,"_dependencyMap"],[187,41,216,13],[187,67,216,29,"InputTypes"],[187,77,216,39],[187,78,216,40,"PARTIAL_SIG"],[187,89,216,51],[188,12,217,10],[188,16,217,14,"input"],[188,21,217,19],[188,22,217,20,"partialSig"],[188,32,217,30],[188,37,217,35,"undefined"],[188,46,217,44],[188,48,217,46],[189,14,218,12,"input"],[189,19,218,17],[189,20,218,18,"partialSig"],[189,30,218,28],[189,33,218,31],[189,35,218,33],[190,12,219,10],[191,12,220,10,"input"],[191,17,220,15],[191,18,220,16,"partialSig"],[191,28,220,26],[191,29,220,27,"push"],[191,33,220,31],[191,34,220,32,"convert"],[191,41,220,39],[191,42,220,40,"inputs"],[191,48,220,46],[191,49,220,47,"partialSig"],[191,59,220,57],[191,60,220,58,"decode"],[191,66,220,64],[191,67,220,65,"keyVal"],[191,75,220,71],[191,76,220,72],[191,77,220,73],[192,12,221,10],[193,10,222,8],[193,15,222,13,"_$$_REQUIRE"],[193,26,222,13],[193,27,222,13,"_dependencyMap"],[193,41,222,13],[193,67,222,29,"InputTypes"],[193,77,222,39],[193,78,222,40,"SIGHASH_TYPE"],[193,90,222,52],[194,12,223,10,"checkKeyBuffer"],[194,26,223,24],[194,27,224,12],[194,34,224,19],[194,36,225,12,"keyVal"],[194,44,225,18],[194,45,225,19,"key"],[194,48,225,22],[194,50,226,12,"_$$_REQUIRE"],[194,61,226,12],[194,62,226,12,"_dependencyMap"],[194,76,226,12],[194,102,226,28,"InputTypes"],[194,112,226,38],[194,113,226,39,"SIGHASH_TYPE"],[194,125,227,10],[194,126,227,11],[195,12,228,10],[195,16,228,14,"input"],[195,21,228,19],[195,22,228,20,"sighashType"],[195,33,228,31],[195,38,228,36,"undefined"],[195,47,228,45],[195,49,228,47],[196,14,229,12],[196,20,229,18],[196,24,229,22,"Error"],[196,29,229,27],[196,30,229,28],[196,77,229,75],[196,78,229,76],[197,12,230,10],[198,12,231,10,"input"],[198,17,231,15],[198,18,231,16,"sighashType"],[198,29,231,27],[198,32,231,30,"convert"],[198,39,231,37],[198,40,231,38,"inputs"],[198,46,231,44],[198,47,231,45,"sighashType"],[198,58,231,56],[198,59,231,57,"decode"],[198,65,231,63],[198,66,231,64,"keyVal"],[198,74,231,70],[198,75,231,71],[199,12,232,10],[200,10,233,8],[200,15,233,13,"_$$_REQUIRE"],[200,26,233,13],[200,27,233,13,"_dependencyMap"],[200,41,233,13],[200,67,233,29,"InputTypes"],[200,77,233,39],[200,78,233,40,"REDEEM_SCRIPT"],[200,91,233,53],[201,12,234,10,"checkKeyBuffer"],[201,26,234,24],[201,27,235,12],[201,34,235,19],[201,36,236,12,"keyVal"],[201,44,236,18],[201,45,236,19,"key"],[201,48,236,22],[201,50,237,12,"_$$_REQUIRE"],[201,61,237,12],[201,62,237,12,"_dependencyMap"],[201,76,237,12],[201,102,237,28,"InputTypes"],[201,112,237,38],[201,113,237,39,"REDEEM_SCRIPT"],[201,126,238,10],[201,127,238,11],[202,12,239,10],[202,16,239,14,"input"],[202,21,239,19],[202,22,239,20,"redeemScript"],[202,34,239,32],[202,39,239,37,"undefined"],[202,48,239,46],[202,50,239,48],[203,14,240,12],[203,20,240,18],[203,24,240,22,"Error"],[203,29,240,27],[203,30,240,28],[203,78,240,76],[203,79,240,77],[204,12,241,10],[205,12,242,10,"input"],[205,17,242,15],[205,18,242,16,"redeemScript"],[205,30,242,28],[205,33,242,31,"convert"],[205,40,242,38],[205,41,242,39,"inputs"],[205,47,242,45],[205,48,242,46,"redeemScript"],[205,60,242,58],[205,61,242,59,"decode"],[205,67,242,65],[205,68,242,66,"keyVal"],[205,76,242,72],[205,77,242,73],[206,12,243,10],[207,10,244,8],[207,15,244,13,"_$$_REQUIRE"],[207,26,244,13],[207,27,244,13,"_dependencyMap"],[207,41,244,13],[207,67,244,29,"InputTypes"],[207,77,244,39],[207,78,244,40,"WITNESS_SCRIPT"],[207,92,244,54],[208,12,245,10,"checkKeyBuffer"],[208,26,245,24],[208,27,246,12],[208,34,246,19],[208,36,247,12,"keyVal"],[208,44,247,18],[208,45,247,19,"key"],[208,48,247,22],[208,50,248,12,"_$$_REQUIRE"],[208,61,248,12],[208,62,248,12,"_dependencyMap"],[208,76,248,12],[208,102,248,28,"InputTypes"],[208,112,248,38],[208,113,248,39,"WITNESS_SCRIPT"],[208,127,249,10],[208,128,249,11],[209,12,250,10],[209,16,250,14,"input"],[209,21,250,19],[209,22,250,20,"witnessScript"],[209,35,250,33],[209,40,250,38,"undefined"],[209,49,250,47],[209,51,250,49],[210,14,251,12],[210,20,251,18],[210,24,251,22,"Error"],[210,29,251,27],[210,30,251,28],[210,79,251,77],[210,80,251,78],[211,12,252,10],[212,12,253,10,"input"],[212,17,253,15],[212,18,253,16,"witnessScript"],[212,31,253,29],[212,34,253,32,"convert"],[212,41,253,39],[212,42,253,40,"inputs"],[212,48,253,46],[212,49,253,47,"witnessScript"],[212,62,253,60],[212,63,253,61,"decode"],[212,69,253,67],[212,70,253,68,"keyVal"],[212,78,253,74],[212,79,253,75],[213,12,254,10],[214,10,255,8],[214,15,255,13,"_$$_REQUIRE"],[214,26,255,13],[214,27,255,13,"_dependencyMap"],[214,41,255,13],[214,67,255,29,"InputTypes"],[214,77,255,39],[214,78,255,40,"BIP32_DERIVATION"],[214,94,255,56],[215,12,256,10],[215,16,256,14,"input"],[215,21,256,19],[215,22,256,20,"bip32Derivation"],[215,37,256,35],[215,42,256,40,"undefined"],[215,51,256,49],[215,53,256,51],[216,14,257,12,"input"],[216,19,257,17],[216,20,257,18,"bip32Derivation"],[216,35,257,33],[216,38,257,36],[216,40,257,38],[217,12,258,10],[218,12,259,10,"input"],[218,17,259,15],[218,18,259,16,"bip32Derivation"],[218,33,259,31],[218,34,259,32,"push"],[218,38,259,36],[218,39,260,12,"convert"],[218,46,260,19],[218,47,260,20,"inputs"],[218,53,260,26],[218,54,260,27,"bip32Derivation"],[218,69,260,42],[218,70,260,43,"decode"],[218,76,260,49],[218,77,260,50,"keyVal"],[218,85,260,56],[218,86,261,10],[218,87,261,11],[219,12,262,10],[220,10,263,8],[220,15,263,13,"_$$_REQUIRE"],[220,26,263,13],[220,27,263,13,"_dependencyMap"],[220,41,263,13],[220,67,263,29,"InputTypes"],[220,77,263,39],[220,78,263,40,"FINAL_SCRIPTSIG"],[220,93,263,55],[221,12,264,10,"checkKeyBuffer"],[221,26,264,24],[221,27,265,12],[221,34,265,19],[221,36,266,12,"keyVal"],[221,44,266,18],[221,45,266,19,"key"],[221,48,266,22],[221,50,267,12,"_$$_REQUIRE"],[221,61,267,12],[221,62,267,12,"_dependencyMap"],[221,76,267,12],[221,102,267,28,"InputTypes"],[221,112,267,38],[221,113,267,39,"FINAL_SCRIPTSIG"],[221,128,268,10],[221,129,268,11],[222,12,269,10,"input"],[222,17,269,15],[222,18,269,16,"finalScriptSig"],[222,32,269,30],[222,35,269,33,"convert"],[222,42,269,40],[222,43,269,41,"inputs"],[222,49,269,47],[222,50,269,48,"finalScriptSig"],[222,64,269,62],[222,65,269,63,"decode"],[222,71,269,69],[222,72,269,70,"keyVal"],[222,80,269,76],[222,81,269,77],[223,12,270,10],[224,10,271,8],[224,15,271,13,"_$$_REQUIRE"],[224,26,271,13],[224,27,271,13,"_dependencyMap"],[224,41,271,13],[224,67,271,29,"InputTypes"],[224,77,271,39],[224,78,271,40,"FINAL_SCRIPTWITNESS"],[224,97,271,59],[225,12,272,10,"checkKeyBuffer"],[225,26,272,24],[225,27,273,12],[225,34,273,19],[225,36,274,12,"keyVal"],[225,44,274,18],[225,45,274,19,"key"],[225,48,274,22],[225,50,275,12,"_$$_REQUIRE"],[225,61,275,12],[225,62,275,12,"_dependencyMap"],[225,76,275,12],[225,102,275,28,"InputTypes"],[225,112,275,38],[225,113,275,39,"FINAL_SCRIPTWITNESS"],[225,132,276,10],[225,133,276,11],[226,12,277,10,"input"],[226,17,277,15],[226,18,277,16,"finalScriptWitness"],[226,36,277,34],[226,39,277,37,"convert"],[226,46,277,44],[226,47,277,45,"inputs"],[226,53,277,51],[226,54,277,52,"finalScriptWitness"],[226,72,277,70],[226,73,277,71,"decode"],[226,79,277,77],[226,80,278,12,"keyVal"],[226,88,279,10],[226,89,279,11],[227,12,280,10],[228,10,281,8],[228,15,281,13,"_$$_REQUIRE"],[228,26,281,13],[228,27,281,13,"_dependencyMap"],[228,41,281,13],[228,67,281,29,"InputTypes"],[228,77,281,39],[228,78,281,40,"POR_COMMITMENT"],[228,92,281,54],[229,12,282,10,"checkKeyBuffer"],[229,26,282,24],[229,27,283,12],[229,34,283,19],[229,36,284,12,"keyVal"],[229,44,284,18],[229,45,284,19,"key"],[229,48,284,22],[229,50,285,12,"_$$_REQUIRE"],[229,61,285,12],[229,62,285,12,"_dependencyMap"],[229,76,285,12],[229,102,285,28,"InputTypes"],[229,112,285,38],[229,113,285,39,"POR_COMMITMENT"],[229,127,286,10],[229,128,286,11],[230,12,287,10,"input"],[230,17,287,15],[230,18,287,16,"porCommitment"],[230,31,287,29],[230,34,287,32,"convert"],[230,41,287,39],[230,42,287,40,"inputs"],[230,48,287,46],[230,49,287,47,"porCommitment"],[230,62,287,60],[230,63,287,61,"decode"],[230,69,287,67],[230,70,287,68,"keyVal"],[230,78,287,74],[230,79,287,75],[231,12,288,10],[232,10,289,8],[232,15,289,13,"_$$_REQUIRE"],[232,26,289,13],[232,27,289,13,"_dependencyMap"],[232,41,289,13],[232,67,289,29,"InputTypes"],[232,77,289,39],[232,78,289,40,"TAP_KEY_SIG"],[232,89,289,51],[233,12,290,10,"checkKeyBuffer"],[233,26,290,24],[233,27,291,12],[233,34,291,19],[233,36,292,12,"keyVal"],[233,44,292,18],[233,45,292,19,"key"],[233,48,292,22],[233,50,293,12,"_$$_REQUIRE"],[233,61,293,12],[233,62,293,12,"_dependencyMap"],[233,76,293,12],[233,102,293,28,"InputTypes"],[233,112,293,38],[233,113,293,39,"TAP_KEY_SIG"],[233,124,294,10],[233,125,294,11],[234,12,295,10,"input"],[234,17,295,15],[234,18,295,16,"tapKeySig"],[234,27,295,25],[234,30,295,28,"convert"],[234,37,295,35],[234,38,295,36,"inputs"],[234,44,295,42],[234,45,295,43,"tapKeySig"],[234,54,295,52],[234,55,295,53,"decode"],[234,61,295,59],[234,62,295,60,"keyVal"],[234,70,295,66],[234,71,295,67],[235,12,296,10],[236,10,297,8],[236,15,297,13,"_$$_REQUIRE"],[236,26,297,13],[236,27,297,13,"_dependencyMap"],[236,41,297,13],[236,67,297,29,"InputTypes"],[236,77,297,39],[236,78,297,40,"TAP_SCRIPT_SIG"],[236,92,297,54],[237,12,298,10],[237,16,298,14,"input"],[237,21,298,19],[237,22,298,20,"tapScriptSig"],[237,34,298,32],[237,39,298,37,"undefined"],[237,48,298,46],[237,50,298,48],[238,14,299,12,"input"],[238,19,299,17],[238,20,299,18,"tapScriptSig"],[238,32,299,30],[238,35,299,33],[238,37,299,35],[239,12,300,10],[240,12,301,10,"input"],[240,17,301,15],[240,18,301,16,"tapScriptSig"],[240,30,301,28],[240,31,301,29,"push"],[240,35,301,33],[240,36,301,34,"convert"],[240,43,301,41],[240,44,301,42,"inputs"],[240,50,301,48],[240,51,301,49,"tapScriptSig"],[240,63,301,61],[240,64,301,62,"decode"],[240,70,301,68],[240,71,301,69,"keyVal"],[240,79,301,75],[240,80,301,76],[240,81,301,77],[241,12,302,10],[242,10,303,8],[242,15,303,13,"_$$_REQUIRE"],[242,26,303,13],[242,27,303,13,"_dependencyMap"],[242,41,303,13],[242,67,303,29,"InputTypes"],[242,77,303,39],[242,78,303,40,"TAP_LEAF_SCRIPT"],[242,93,303,55],[243,12,304,10],[243,16,304,14,"input"],[243,21,304,19],[243,22,304,20,"tapLeafScript"],[243,35,304,33],[243,40,304,38,"undefined"],[243,49,304,47],[243,51,304,49],[244,14,305,12,"input"],[244,19,305,17],[244,20,305,18,"tapLeafScript"],[244,33,305,31],[244,36,305,34],[244,38,305,36],[245,12,306,10],[246,12,307,10,"input"],[246,17,307,15],[246,18,307,16,"tapLeafScript"],[246,31,307,29],[246,32,307,30,"push"],[246,36,307,34],[246,37,307,35,"convert"],[246,44,307,42],[246,45,307,43,"inputs"],[246,51,307,49],[246,52,307,50,"tapLeafScript"],[246,65,307,63],[246,66,307,64,"decode"],[246,72,307,70],[246,73,307,71,"keyVal"],[246,81,307,77],[246,82,307,78],[246,83,307,79],[247,12,308,10],[248,10,309,8],[248,15,309,13,"_$$_REQUIRE"],[248,26,309,13],[248,27,309,13,"_dependencyMap"],[248,41,309,13],[248,67,309,29,"InputTypes"],[248,77,309,39],[248,78,309,40,"TAP_BIP32_DERIVATION"],[248,98,309,60],[249,12,310,10],[249,16,310,14,"input"],[249,21,310,19],[249,22,310,20,"tapBip32Derivation"],[249,40,310,38],[249,45,310,43,"undefined"],[249,54,310,52],[249,56,310,54],[250,14,311,12,"input"],[250,19,311,17],[250,20,311,18,"tapBip32Derivation"],[250,38,311,36],[250,41,311,39],[250,43,311,41],[251,12,312,10],[252,12,313,10,"input"],[252,17,313,15],[252,18,313,16,"tapBip32Derivation"],[252,36,313,34],[252,37,313,35,"push"],[252,41,313,39],[252,42,314,12,"convert"],[252,49,314,19],[252,50,314,20,"inputs"],[252,56,314,26],[252,57,314,27,"tapBip32Derivation"],[252,75,314,45],[252,76,314,46,"decode"],[252,82,314,52],[252,83,314,53,"keyVal"],[252,91,314,59],[252,92,315,10],[252,93,315,11],[253,12,316,10],[254,10,317,8],[254,15,317,13,"_$$_REQUIRE"],[254,26,317,13],[254,27,317,13,"_dependencyMap"],[254,41,317,13],[254,67,317,29,"InputTypes"],[254,77,317,39],[254,78,317,40,"TAP_INTERNAL_KEY"],[254,94,317,56],[255,12,318,10,"checkKeyBuffer"],[255,26,318,24],[255,27,319,12],[255,34,319,19],[255,36,320,12,"keyVal"],[255,44,320,18],[255,45,320,19,"key"],[255,48,320,22],[255,50,321,12,"_$$_REQUIRE"],[255,61,321,12],[255,62,321,12,"_dependencyMap"],[255,76,321,12],[255,102,321,28,"InputTypes"],[255,112,321,38],[255,113,321,39,"TAP_INTERNAL_KEY"],[255,129,322,10],[255,130,322,11],[256,12,323,10,"input"],[256,17,323,15],[256,18,323,16,"tapInternalKey"],[256,32,323,30],[256,35,323,33,"convert"],[256,42,323,40],[256,43,323,41,"inputs"],[256,49,323,47],[256,50,323,48,"tapInternalKey"],[256,64,323,62],[256,65,323,63,"decode"],[256,71,323,69],[256,72,323,70,"keyVal"],[256,80,323,76],[256,81,323,77],[257,12,324,10],[258,10,325,8],[258,15,325,13,"_$$_REQUIRE"],[258,26,325,13],[258,27,325,13,"_dependencyMap"],[258,41,325,13],[258,67,325,29,"InputTypes"],[258,77,325,39],[258,78,325,40,"TAP_MERKLE_ROOT"],[258,93,325,55],[259,12,326,10,"checkKeyBuffer"],[259,26,326,24],[259,27,327,12],[259,34,327,19],[259,36,328,12,"keyVal"],[259,44,328,18],[259,45,328,19,"key"],[259,48,328,22],[259,50,329,12,"_$$_REQUIRE"],[259,61,329,12],[259,62,329,12,"_dependencyMap"],[259,76,329,12],[259,102,329,28,"InputTypes"],[259,112,329,38],[259,113,329,39,"TAP_MERKLE_ROOT"],[259,128,330,10],[259,129,330,11],[260,12,331,10,"input"],[260,17,331,15],[260,18,331,16,"tapMerkleRoot"],[260,31,331,29],[260,34,331,32,"convert"],[260,41,331,39],[260,42,331,40,"inputs"],[260,48,331,46],[260,49,331,47,"tapMerkleRoot"],[260,62,331,60],[260,63,331,61,"decode"],[260,69,331,67],[260,70,331,68,"keyVal"],[260,78,331,74],[260,79,331,75],[261,12,332,10],[262,10,333,8],[263,12,334,10],[264,12,335,10],[264,16,335,14],[264,17,335,15,"input"],[264,22,335,20],[264,23,335,21,"unknownKeyVals"],[264,37,335,35],[264,39,335,37,"input"],[264,44,335,42],[264,45,335,43,"unknownKeyVals"],[264,59,335,57],[264,62,335,60],[264,64,335,62],[265,12,336,10,"input"],[265,17,336,15],[265,18,336,16,"unknownKeyVals"],[265,32,336,30],[265,33,336,31,"push"],[265,37,336,35],[265,38,336,36,"keyVal"],[265,46,336,42],[265,47,336,43],[266,8,337,6],[267,6,338,4],[268,6,339,4,"inputs"],[268,12,339,10],[268,13,339,11,"push"],[268,17,339,15],[268,18,339,16,"input"],[268,23,339,21],[268,24,339,22],[269,4,340,2],[270,4,341,2],[270,9,341,7],[270,13,341,13,"index"],[270,20,341,18],[270,24,341,22,"_$$_REQUIRE"],[270,35,341,22],[270,36,341,22,"_dependencyMap"],[270,50,341,22],[270,81,341,33,"range"],[270,86,341,38],[270,87,341,39,"outputCount"],[270,98,341,50],[270,99,341,51],[270,101,341,53],[271,6,342,4],[271,10,342,10,"output"],[271,16,342,16],[271,19,342,19],[271,20,342,20],[271,21,342,21],[272,6,343,4],[272,11,343,9],[272,15,343,15,"keyVal"],[272,23,343,21],[272,27,343,25,"outputKeyVals"],[272,40,343,38],[272,41,343,39,"index"],[272,48,343,44],[272,49,343,45],[272,51,343,47],[273,8,344,6,"convert"],[273,15,344,13],[273,16,344,14,"outputs"],[273,23,344,21],[273,24,344,22,"checkPubkey"],[273,35,344,33],[273,36,344,34,"keyVal"],[273,44,344,40],[273,45,344,41],[274,8,345,6],[274,16,345,14,"keyVal"],[274,24,345,20],[274,25,345,21,"key"],[274,28,345,24],[274,29,345,25],[274,30,345,26],[274,31,345,27],[275,10,346,8],[275,15,346,13,"_$$_REQUIRE"],[275,26,346,13],[275,27,346,13,"_dependencyMap"],[275,41,346,13],[275,67,346,29,"OutputTypes"],[275,78,346,40],[275,79,346,41,"REDEEM_SCRIPT"],[275,92,346,54],[276,12,347,10,"checkKeyBuffer"],[276,26,347,24],[276,27,348,12],[276,35,348,20],[276,37,349,12,"keyVal"],[276,45,349,18],[276,46,349,19,"key"],[276,49,349,22],[276,51,350,12,"_$$_REQUIRE"],[276,62,350,12],[276,63,350,12,"_dependencyMap"],[276,77,350,12],[276,103,350,28,"OutputTypes"],[276,114,350,39],[276,115,350,40,"REDEEM_SCRIPT"],[276,128,351,10],[276,129,351,11],[277,12,352,10],[277,16,352,14,"output"],[277,22,352,20],[277,23,352,21,"redeemScript"],[277,35,352,33],[277,40,352,38,"undefined"],[277,49,352,47],[277,51,352,49],[278,14,353,12],[278,20,353,18],[278,24,353,22,"Error"],[278,29,353,27],[278,30,353,28],[278,79,353,77],[278,80,353,78],[279,12,354,10],[280,12,355,10,"output"],[280,18,355,16],[280,19,355,17,"redeemScript"],[280,31,355,29],[280,34,355,32,"convert"],[280,41,355,39],[280,42,355,40,"outputs"],[280,49,355,47],[280,50,355,48,"redeemScript"],[280,62,355,60],[280,63,355,61,"decode"],[280,69,355,67],[280,70,355,68,"keyVal"],[280,78,355,74],[280,79,355,75],[281,12,356,10],[282,10,357,8],[282,15,357,13,"_$$_REQUIRE"],[282,26,357,13],[282,27,357,13,"_dependencyMap"],[282,41,357,13],[282,67,357,29,"OutputTypes"],[282,78,357,40],[282,79,357,41,"WITNESS_SCRIPT"],[282,93,357,55],[283,12,358,10,"checkKeyBuffer"],[283,26,358,24],[283,27,359,12],[283,35,359,20],[283,37,360,12,"keyVal"],[283,45,360,18],[283,46,360,19,"key"],[283,49,360,22],[283,51,361,12,"_$$_REQUIRE"],[283,62,361,12],[283,63,361,12,"_dependencyMap"],[283,77,361,12],[283,103,361,28,"OutputTypes"],[283,114,361,39],[283,115,361,40,"WITNESS_SCRIPT"],[283,129,362,10],[283,130,362,11],[284,12,363,10],[284,16,363,14,"output"],[284,22,363,20],[284,23,363,21,"witnessScript"],[284,36,363,34],[284,41,363,39,"undefined"],[284,50,363,48],[284,52,363,50],[285,14,364,12],[285,20,364,18],[285,24,364,22,"Error"],[285,29,364,27],[285,30,364,28],[285,80,364,78],[285,81,364,79],[286,12,365,10],[287,12,366,10,"output"],[287,18,366,16],[287,19,366,17,"witnessScript"],[287,32,366,30],[287,35,366,33,"convert"],[287,42,366,40],[287,43,366,41,"outputs"],[287,50,366,48],[287,51,366,49,"witnessScript"],[287,64,366,62],[287,65,366,63,"decode"],[287,71,366,69],[287,72,366,70,"keyVal"],[287,80,366,76],[287,81,366,77],[288,12,367,10],[289,10,368,8],[289,15,368,13,"_$$_REQUIRE"],[289,26,368,13],[289,27,368,13,"_dependencyMap"],[289,41,368,13],[289,67,368,29,"OutputTypes"],[289,78,368,40],[289,79,368,41,"BIP32_DERIVATION"],[289,95,368,57],[290,12,369,10],[290,16,369,14,"output"],[290,22,369,20],[290,23,369,21,"bip32Derivation"],[290,38,369,36],[290,43,369,41,"undefined"],[290,52,369,50],[290,54,369,52],[291,14,370,12,"output"],[291,20,370,18],[291,21,370,19,"bip32Derivation"],[291,36,370,34],[291,39,370,37],[291,41,370,39],[292,12,371,10],[293,12,372,10,"output"],[293,18,372,16],[293,19,372,17,"bip32Derivation"],[293,34,372,32],[293,35,372,33,"push"],[293,39,372,37],[293,40,373,12,"convert"],[293,47,373,19],[293,48,373,20,"outputs"],[293,55,373,27],[293,56,373,28,"bip32Derivation"],[293,71,373,43],[293,72,373,44,"decode"],[293,78,373,50],[293,79,373,51,"keyVal"],[293,87,373,57],[293,88,374,10],[293,89,374,11],[294,12,375,10],[295,10,376,8],[295,15,376,13,"_$$_REQUIRE"],[295,26,376,13],[295,27,376,13,"_dependencyMap"],[295,41,376,13],[295,67,376,29,"OutputTypes"],[295,78,376,40],[295,79,376,41,"TAP_INTERNAL_KEY"],[295,95,376,57],[296,12,377,10,"checkKeyBuffer"],[296,26,377,24],[296,27,378,12],[296,35,378,20],[296,37,379,12,"keyVal"],[296,45,379,18],[296,46,379,19,"key"],[296,49,379,22],[296,51,380,12,"_$$_REQUIRE"],[296,62,380,12],[296,63,380,12,"_dependencyMap"],[296,77,380,12],[296,103,380,28,"OutputTypes"],[296,114,380,39],[296,115,380,40,"TAP_INTERNAL_KEY"],[296,131,381,10],[296,132,381,11],[297,12,382,10,"output"],[297,18,382,16],[297,19,382,17,"tapInternalKey"],[297,33,382,31],[297,36,382,34,"convert"],[297,43,382,41],[297,44,382,42,"outputs"],[297,51,382,49],[297,52,382,50,"tapInternalKey"],[297,66,382,64],[297,67,382,65,"decode"],[297,73,382,71],[297,74,382,72,"keyVal"],[297,82,382,78],[297,83,382,79],[298,12,383,10],[299,10,384,8],[299,15,384,13,"_$$_REQUIRE"],[299,26,384,13],[299,27,384,13,"_dependencyMap"],[299,41,384,13],[299,67,384,29,"OutputTypes"],[299,78,384,40],[299,79,384,41,"TAP_TREE"],[299,87,384,49],[300,12,385,10,"checkKeyBuffer"],[300,26,385,24],[300,27,386,12],[300,35,386,20],[300,37,387,12,"keyVal"],[300,45,387,18],[300,46,387,19,"key"],[300,49,387,22],[300,51,388,12,"_$$_REQUIRE"],[300,62,388,12],[300,63,388,12,"_dependencyMap"],[300,77,388,12],[300,103,388,28,"OutputTypes"],[300,114,388,39],[300,115,388,40,"TAP_TREE"],[300,123,389,10],[300,124,389,11],[301,12,390,10,"output"],[301,18,390,16],[301,19,390,17,"tapTree"],[301,26,390,24],[301,29,390,27,"convert"],[301,36,390,34],[301,37,390,35,"outputs"],[301,44,390,42],[301,45,390,43,"tapTree"],[301,52,390,50],[301,53,390,51,"decode"],[301,59,390,57],[301,60,390,58,"keyVal"],[301,68,390,64],[301,69,390,65],[302,12,391,10],[303,10,392,8],[303,15,392,13,"_$$_REQUIRE"],[303,26,392,13],[303,27,392,13,"_dependencyMap"],[303,41,392,13],[303,67,392,29,"OutputTypes"],[303,78,392,40],[303,79,392,41,"TAP_BIP32_DERIVATION"],[303,99,392,61],[304,12,393,10],[304,16,393,14,"output"],[304,22,393,20],[304,23,393,21,"tapBip32Derivation"],[304,41,393,39],[304,46,393,44,"undefined"],[304,55,393,53],[304,57,393,55],[305,14,394,12,"output"],[305,20,394,18],[305,21,394,19,"tapBip32Derivation"],[305,39,394,37],[305,42,394,40],[305,44,394,42],[306,12,395,10],[307,12,396,10,"output"],[307,18,396,16],[307,19,396,17,"tapBip32Derivation"],[307,37,396,35],[307,38,396,36,"push"],[307,42,396,40],[307,43,397,12,"convert"],[307,50,397,19],[307,51,397,20,"outputs"],[307,58,397,27],[307,59,397,28,"tapBip32Derivation"],[307,77,397,46],[307,78,397,47,"decode"],[307,84,397,53],[307,85,397,54,"keyVal"],[307,93,397,60],[307,94,398,10],[307,95,398,11],[308,12,399,10],[309,10,400,8],[310,12,401,10],[310,16,401,14],[310,17,401,15,"output"],[310,23,401,21],[310,24,401,22,"unknownKeyVals"],[310,38,401,36],[310,40,401,38,"output"],[310,46,401,44],[310,47,401,45,"unknownKeyVals"],[310,61,401,59],[310,64,401,62],[310,66,401,64],[311,12,402,10,"output"],[311,18,402,16],[311,19,402,17,"unknownKeyVals"],[311,33,402,31],[311,34,402,32,"push"],[311,38,402,36],[311,39,402,37,"keyVal"],[311,47,402,43],[311,48,402,44],[312,8,403,6],[313,6,404,4],[314,6,405,4,"outputs"],[314,13,405,11],[314,14,405,12,"push"],[314,18,405,16],[314,19,405,17,"output"],[314,25,405,23],[314,26,405,24],[315,4,406,2],[316,4,407,2],[316,11,407,9],[317,6,407,11,"globalMap"],[317,15,407,20],[317,17,407,11,"globalMap"],[317,26,407,20],[318,6,407,22,"inputs"],[318,12,407,28],[318,14,407,22,"inputs"],[318,20,407,28],[319,6,407,30,"outputs"],[319,13,407,37],[319,15,407,30,"outputs"],[320,4,407,38],[320,5,407,39],[321,2,408,0],[322,2,409,0,"exports"],[322,9,409,7],[322,10,409,8,"psbtFromKeyVals"],[322,25,409,23],[322,28,409,26,"psbtFromKeyVals"],[322,43,409,41],[323,0,409,42],[323,3]],"functionMap":{"names":["<global>","<anonymous>","psbtFromBuffer","varSlice","readUInt32BE","readUInt8","getKeyValue","checkEndOfKeyValPairs","globalMapKeyVals.filter$argument_0","checkKeyBuffer","psbtFromKeyVals"],"mappings":"AAA;ECG;GDQ;AEO;ECE;GDM;EEC;GFI;EGC;GHI;EIC;GJO;EKC;GLS;IMuB,mEN;CFwD;ASE;CTO;AUE;CVuQ"}},"type":"js/module"}]}