{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":229,"column":0,"index":5843}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":229,"column":0,"index":5843}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"./slip39_helper.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":19,"index":46},"end":{"line":2,"column":48,"index":75}},{"start":{"line":2,"column":19,"index":46},"end":{"line":2,"column":48,"index":75}},{"start":{"line":2,"column":19,"index":46},"end":{"line":2,"column":48,"index":75}},{"start":{"line":2,"column":19,"index":46},"end":{"line":2,"column":48,"index":75}},{"start":{"line":2,"column":19,"index":46},"end":{"line":2,"column":48,"index":75}},{"start":{"line":2,"column":19,"index":46},"end":{"line":2,"column":48,"index":75}},{"start":{"line":2,"column":19,"index":46},"end":{"line":2,"column":48,"index":75}},{"start":{"line":2,"column":19,"index":46},"end":{"line":2,"column":48,"index":75}},{"start":{"line":2,"column":19,"index":46},"end":{"line":2,"column":48,"index":75}}],"key":"WMHwapm6lfJJNdTeUkMhLVCdNyc="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  /* eslint-disable radix */\n  var MAX_DEPTH = 2;\n\n  /**\n   * Slip39Node\n   * For root node, description refers to the whole set's title e.g. \"Hardware wallet X SSSS shares\"\n   * For children nodes, description refers to the group e.g. \"Family group: mom, dad, sister, wife\"\n   */\n  var Slip39Node = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function Slip39Node() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n      var mnemonic = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n      var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n      _classCallCheck(this, Slip39Node);\n      this.index = index;\n      this.description = description;\n      this.mnemonic = mnemonic;\n      this.children = children;\n    }\n    return _createClass(Slip39Node, [{\n      key: \"mnemonics\",\n      get: function get() {\n        if (this.children.length === 0) {\n          return [this.mnemonic];\n        }\n        var result = this.children.reduce(function (prev, item) {\n          return prev.concat(item.mnemonics);\n        }, []);\n        return result;\n      }\n    }]);\n  }(); //\n  // The javascript implementation of the SLIP-0039: Shamir's Secret-Sharing for Mnemonic Codes\n  // see: https://github.com/satoshilabs/slips/blob/master/slip-0039.md)\n  //\n  var Slip39 = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function Slip39() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$iterationExponen = _ref.iterationExponent,\n        iterationExponent = _ref$iterationExponen === void 0 ? 0 : _ref$iterationExponen,\n        _ref$extendableBackup = _ref.extendableBackupFlag,\n        extendableBackupFlag = _ref$extendableBackup === void 0 ? 0 : _ref$extendableBackup,\n        identifier = _ref.identifier,\n        groupCount = _ref.groupCount,\n        groupThreshold = _ref.groupThreshold;\n      _classCallCheck(this, Slip39);\n      this.iterationExponent = iterationExponent;\n      this.extendableBackupFlag = extendableBackupFlag;\n      this.identifier = identifier;\n      this.groupCount = groupCount;\n      this.groupThreshold = groupThreshold;\n    }\n    return _createClass(Slip39, [{\n      key: \"buildRecursive\",\n      value: function buildRecursive(currentNode, nodes, secret, threshold, index) {\n        var _this = this;\n        // It means it's a leaf.\n        if (nodes.length === 0) {\n          var mnemonic = _$$_REQUIRE(_dependencyMap[2], \"./slip39_helper.js\").encodeMnemonic(this.identifier, this.extendableBackupFlag, this.iterationExponent, index, this.groupThreshold, this.groupCount, currentNode.index, threshold, secret);\n          currentNode.mnemonic = mnemonic;\n          return currentNode;\n        }\n        var secretShares = _$$_REQUIRE(_dependencyMap[2], \"./slip39_helper.js\").splitSecret(threshold, nodes.length, secret);\n        var children = [];\n        var idx = 0;\n        nodes.forEach(function (item) {\n          // n=threshold\n          var n = item[0];\n          // m=members\n          var m = item[1];\n          // d=description\n          var d = item[2] || \"\";\n\n          // Generate leaf members, means their `m` is `0`\n          var members = Array().slip39Generate(m, function () {\n            return [n, 0, d];\n          });\n          var node = new Slip39Node(idx, d);\n          var branch = _this.buildRecursive(node, members, secretShares[idx], n, currentNode.index);\n          children = children.concat(branch);\n          idx = idx + 1;\n        });\n        currentNode.children = children;\n        return currentNode;\n      }\n    }, {\n      key: \"fromPath\",\n      value: function fromPath(path) {\n        this.validatePath(path);\n        var children = this.parseChildren(path);\n        if (typeof children === \"undefined\" || children.length === 0) {\n          return this.root;\n        }\n        return children.reduce(function (prev, childNumber) {\n          var childrenLen = prev.children.length;\n          if (childNumber >= childrenLen) {\n            throw new Error(`The path index (${childNumber}) exceeds the children index (${childrenLen - 1}).`);\n          }\n          return prev.children[childNumber];\n        }, this.root);\n      }\n    }, {\n      key: \"validatePath\",\n      value: function validatePath(path) {\n        if (!path.match(/(^r)(\\/\\d{1,2}){0,2}$/)) {\n          throw new Error('Expected valid path e.g. \"r/0/0\".');\n        }\n        var depth = path.split(\"/\");\n        var pathLength = depth.length - 1;\n        if (pathLength > MAX_DEPTH) {\n          throw new Error(`Path\\'s (${path}) max depth (${MAX_DEPTH}) is exceeded (${pathLength}).`);\n        }\n      }\n    }, {\n      key: \"parseChildren\",\n      value: function parseChildren(path) {\n        var splitted = path.split(\"/\").slice(1);\n        var result = splitted.map(function (pathFragment) {\n          return parseInt(pathFragment);\n        });\n        return result;\n      }\n    }], [{\n      key: \"fromArray\",\n      value: function fromArray(masterSecret) {\n        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$passphrase = _ref2.passphrase,\n          passphrase = _ref2$passphrase === void 0 ? \"\" : _ref2$passphrase,\n          _ref2$threshold = _ref2.threshold,\n          threshold = _ref2$threshold === void 0 ? 1 : _ref2$threshold,\n          _ref2$groups = _ref2.groups,\n          groups = _ref2$groups === void 0 ? [[1, 1, \"Default 1-of-1 group share\"]] : _ref2$groups,\n          _ref2$iterationExpone = _ref2.iterationExponent,\n          iterationExponent = _ref2$iterationExpone === void 0 ? 0 : _ref2$iterationExpone,\n          _ref2$extendableBacku = _ref2.extendableBackupFlag,\n          extendableBackupFlag = _ref2$extendableBacku === void 0 ? 1 : _ref2$extendableBacku,\n          _ref2$title = _ref2.title,\n          title = _ref2$title === void 0 ? \"My default slip39 shares\" : _ref2$title;\n        if (masterSecret.length * 8 < _$$_REQUIRE(_dependencyMap[2], \"./slip39_helper.js\").MIN_ENTROPY_BITS) {\n          throw Error(`The length of the master secret (${masterSecret.length} bytes) must be at least ${_$$_REQUIRE(_dependencyMap[2], \"./slip39_helper.js\").bitsToBytes(_$$_REQUIRE(_dependencyMap[2], \"./slip39_helper.js\").MIN_ENTROPY_BITS)} bytes.`);\n        }\n        if (masterSecret.length % 2 !== 0) {\n          throw Error(\"The length of the master secret in bytes must be an even number.\");\n        }\n        if (!/^[\\x20-\\x7E]*$/.test(passphrase)) {\n          throw Error(\"The passphrase must contain only printable ASCII characters (code points 32-126).\");\n        }\n        if (threshold > groups.length) {\n          throw Error(`The requested group threshold (${threshold}) must not exceed the number of groups (${groups.length}).`);\n        }\n        groups.forEach(function (item) {\n          if (item[0] === 1 && item[1] > 1) {\n            throw Error(`Creating multiple member shares with member threshold 1 is not allowed. Use 1-of-1 member sharing instead. ${groups.join()}`);\n          }\n        });\n        var identifier = _$$_REQUIRE(_dependencyMap[2], \"./slip39_helper.js\").generateIdentifier();\n        var slip = new Slip39({\n          iterationExponent: iterationExponent,\n          extendableBackupFlag: extendableBackupFlag,\n          identifier: identifier,\n          groupCount: groups.length,\n          groupThreshold: threshold\n        });\n        var encryptedMasterSecret = _$$_REQUIRE(_dependencyMap[2], \"./slip39_helper.js\").crypt(masterSecret, passphrase, iterationExponent, slip.identifier, extendableBackupFlag);\n        var root = slip.buildRecursive(new Slip39Node(0, title), groups, encryptedMasterSecret, threshold);\n        slip.root = root;\n        return slip;\n      }\n    }, {\n      key: \"recoverSecret\",\n      value: function recoverSecret(mnemonics, passphrase) {\n        return _$$_REQUIRE(_dependencyMap[2], \"./slip39_helper.js\").combineMnemonics(mnemonics, passphrase);\n      }\n    }, {\n      key: \"validateMnemonic\",\n      value: function validateMnemonic(mnemonic) {\n        return _$$_REQUIRE(_dependencyMap[2], \"./slip39_helper.js\").validateMnemonic(mnemonic);\n      }\n    }]);\n  }();\n  exports = module.exports = Slip39;\n});","lineCount":190,"map":[[4,2,1,0],[5,2,4,0],[5,6,4,6,"MAX_DEPTH"],[5,15,4,15],[5,18,4,18],[5,19,4,19],[7,2,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,2,6,0],[12,6,11,6,"Slip39Node"],[12,16,11,16],[13,4,11,16],[15,4,12,2],[15,13,12,2,"Slip39Node"],[15,24,12,2],[15,26,12,73],[16,6,12,73],[16,10,12,14,"index"],[16,15,12,19],[16,18,12,19,"arguments"],[16,27,12,19],[16,28,12,19,"length"],[16,34,12,19],[16,42,12,19,"arguments"],[16,51,12,19],[16,59,12,19,"undefined"],[16,68,12,19],[16,71,12,19,"arguments"],[16,80,12,19],[16,86,12,22],[16,87,12,23],[17,6,12,23],[17,10,12,25,"description"],[17,21,12,36],[17,24,12,36,"arguments"],[17,33,12,36],[17,34,12,36,"length"],[17,40,12,36],[17,48,12,36,"arguments"],[17,57,12,36],[17,65,12,36,"undefined"],[17,74,12,36],[17,77,12,36,"arguments"],[17,86,12,36],[17,92,12,39],[17,94,12,41],[18,6,12,41],[18,10,12,43,"mnemonic"],[18,18,12,51],[18,21,12,51,"arguments"],[18,30,12,51],[18,31,12,51,"length"],[18,37,12,51],[18,45,12,51,"arguments"],[18,54,12,51],[18,62,12,51,"undefined"],[18,71,12,51],[18,74,12,51,"arguments"],[18,83,12,51],[18,89,12,54],[18,91,12,56],[19,6,12,56],[19,10,12,58,"children"],[19,18,12,66],[19,21,12,66,"arguments"],[19,30,12,66],[19,31,12,66,"length"],[19,37,12,66],[19,45,12,66,"arguments"],[19,54,12,66],[19,62,12,66,"undefined"],[19,71,12,66],[19,74,12,66,"arguments"],[19,83,12,66],[19,89,12,69],[19,91,12,71],[20,6,12,71,"_classCallCheck"],[20,21,12,71],[20,28,12,71,"Slip39Node"],[20,38,12,71],[21,6,13,4],[21,10,13,8],[21,11,13,9,"index"],[21,16,13,14],[21,19,13,17,"index"],[21,24,13,22],[22,6,14,4],[22,10,14,8],[22,11,14,9,"description"],[22,22,14,20],[22,25,14,23,"description"],[22,36,14,34],[23,6,15,4],[23,10,15,8],[23,11,15,9,"mnemonic"],[23,19,15,17],[23,22,15,20,"mnemonic"],[23,30,15,28],[24,6,16,4],[24,10,16,8],[24,11,16,9,"children"],[24,19,16,17],[24,22,16,20,"children"],[24,30,16,28],[25,4,17,2],[26,4,17,3],[26,11,17,3,"_createClass"],[26,23,17,3],[26,24,17,3,"Slip39Node"],[26,34,17,3],[27,6,17,3,"key"],[27,9,17,3],[28,6,17,3,"get"],[28,9,17,3],[28,11,19,2],[28,20,19,2,"get"],[28,24,19,2],[28,26,19,18],[29,8,20,4],[29,12,20,8],[29,16,20,12],[29,17,20,13,"children"],[29,25,20,21],[29,26,20,22,"length"],[29,32,20,28],[29,37,20,33],[29,38,20,34],[29,40,20,36],[30,10,21,6],[30,17,21,13],[30,18,21,14],[30,22,21,18],[30,23,21,19,"mnemonic"],[30,31,21,27],[30,32,21,28],[31,8,22,4],[32,8,23,4],[32,12,23,10,"result"],[32,18,23,16],[32,21,23,19],[32,25,23,23],[32,26,23,24,"children"],[32,34,23,32],[32,35,23,33,"reduce"],[32,41,23,39],[32,42,23,40],[32,52,23,41,"prev"],[32,56,23,45],[32,58,23,47,"item"],[32,62,23,51],[32,64,23,56],[33,10,24,6],[33,17,24,13,"prev"],[33,21,24,17],[33,22,24,18,"concat"],[33,28,24,24],[33,29,24,25,"item"],[33,33,24,29],[33,34,24,30,"mnemonics"],[33,43,24,39],[33,44,24,40],[34,8,25,4],[34,9,25,5],[34,11,25,7],[34,13,25,9],[34,14,25,10],[35,8,26,4],[35,15,26,11,"result"],[35,21,26,17],[36,6,27,2],[37,4,27,3],[38,2,27,3],[38,7,30,0],[39,2,31,0],[40,2,32,0],[41,2,33,0],[42,2,33,0],[42,6,34,6,"Slip39"],[42,12,34,12],[43,4,34,12],[45,4,35,2],[45,13,35,2,"Slip39"],[45,20,35,2],[45,22,41,10],[46,6,41,10],[46,10,41,10,"_ref"],[46,14,41,10],[46,17,41,10,"arguments"],[46,26,41,10],[46,27,41,10,"length"],[46,33,41,10],[46,41,41,10,"arguments"],[46,50,41,10],[46,58,41,10,"undefined"],[46,67,41,10],[46,70,41,10,"arguments"],[46,79,41,10],[46,85,41,6],[46,86,41,7],[46,87,41,8],[47,8,41,8,"_ref$iterationExponen"],[47,29,41,8],[47,32,41,8,"_ref"],[47,36,41,8],[47,37,36,4,"iterationExponent"],[47,54,36,21],[48,8,36,4,"iterationExponent"],[48,25,36,21],[48,28,36,21,"_ref$iterationExponen"],[48,49,36,21],[48,63,36,24],[48,64,36,25],[48,67,36,25,"_ref$iterationExponen"],[48,88,36,25],[49,8,36,25,"_ref$extendableBackup"],[49,29,36,25],[49,32,36,25,"_ref"],[49,36,36,25],[49,37,37,4,"extendableBackupFlag"],[49,57,37,24],[50,8,37,4,"extendableBackupFlag"],[50,28,37,24],[50,31,37,24,"_ref$extendableBackup"],[50,52,37,24],[50,66,37,27],[50,67,37,28],[50,70,37,28,"_ref$extendableBackup"],[50,91,37,28],[51,8,38,4,"identifier"],[51,18,38,14],[51,21,38,14,"_ref"],[51,25,38,14],[51,26,38,4,"identifier"],[51,36,38,14],[52,8,39,4,"groupCount"],[52,18,39,14],[52,21,39,14,"_ref"],[52,25,39,14],[52,26,39,4,"groupCount"],[52,36,39,14],[53,8,40,4,"groupThreshold"],[53,22,40,18],[53,25,40,18,"_ref"],[53,29,40,18],[53,30,40,4,"groupThreshold"],[53,44,40,18],[54,6,40,18,"_classCallCheck"],[54,21,40,18],[54,28,40,18,"Slip39"],[54,34,40,18],[55,6,42,4],[55,10,42,8],[55,11,42,9,"iterationExponent"],[55,28,42,26],[55,31,42,29,"iterationExponent"],[55,48,42,46],[56,6,43,4],[56,10,43,8],[56,11,43,9,"extendableBackupFlag"],[56,31,43,29],[56,34,43,32,"extendableBackupFlag"],[56,54,43,52],[57,6,44,4],[57,10,44,8],[57,11,44,9,"identifier"],[57,21,44,19],[57,24,44,22,"identifier"],[57,34,44,32],[58,6,45,4],[58,10,45,8],[58,11,45,9,"groupCount"],[58,21,45,19],[58,24,45,22,"groupCount"],[58,34,45,32],[59,6,46,4],[59,10,46,8],[59,11,46,9,"groupThreshold"],[59,25,46,23],[59,28,46,26,"groupThreshold"],[59,42,46,40],[60,4,47,2],[61,4,47,3],[61,11,47,3,"_createClass"],[61,23,47,3],[61,24,47,3,"Slip39"],[61,30,47,3],[62,6,47,3,"key"],[62,9,47,3],[63,6,47,3,"value"],[63,11,47,3],[63,13,121,2],[63,22,121,2,"buildRecursive"],[63,36,121,16,"buildRecursive"],[63,37,121,17,"currentNode"],[63,48,121,28],[63,50,121,30,"nodes"],[63,55,121,35],[63,57,121,37,"secret"],[63,63,121,43],[63,65,121,45,"threshold"],[63,74,121,54],[63,76,121,56,"index"],[63,81,121,61],[63,83,121,63],[64,8,121,63],[64,12,121,63,"_this"],[64,17,121,63],[65,8,122,4],[66,8,123,4],[66,12,123,8,"nodes"],[66,17,123,13],[66,18,123,14,"length"],[66,24,123,20],[66,29,123,25],[66,30,123,26],[66,32,123,28],[67,10,124,6],[67,14,124,12,"mnemonic"],[67,22,124,20],[67,25,124,23,"_$$_REQUIRE"],[67,36,124,23],[67,37,124,23,"_dependencyMap"],[67,51,124,23],[67,78,124,34,"encodeMnemonic"],[67,92,124,48],[67,93,125,8],[67,97,125,12],[67,98,125,13,"identifier"],[67,108,125,23],[67,110,126,8],[67,114,126,12],[67,115,126,13,"extendableBackupFlag"],[67,135,126,33],[67,137,127,8],[67,141,127,12],[67,142,127,13,"iterationExponent"],[67,159,127,30],[67,161,128,8,"index"],[67,166,128,13],[67,168,129,8],[67,172,129,12],[67,173,129,13,"groupThreshold"],[67,187,129,27],[67,189,130,8],[67,193,130,12],[67,194,130,13,"groupCount"],[67,204,130,23],[67,206,131,8,"currentNode"],[67,217,131,19],[67,218,131,20,"index"],[67,223,131,25],[67,225,132,8,"threshold"],[67,234,132,17],[67,236,133,8,"secret"],[67,242,134,6],[67,243,134,7],[68,10,136,6,"currentNode"],[68,21,136,17],[68,22,136,18,"mnemonic"],[68,30,136,26],[68,33,136,29,"mnemonic"],[68,41,136,37],[69,10,137,6],[69,17,137,13,"currentNode"],[69,28,137,24],[70,8,138,4],[71,8,140,4],[71,12,140,10,"secretShares"],[71,24,140,22],[71,27,140,25,"_$$_REQUIRE"],[71,38,140,25],[71,39,140,25,"_dependencyMap"],[71,53,140,25],[71,80,140,36,"splitSecret"],[71,91,140,47],[71,92,141,6,"threshold"],[71,101,141,15],[71,103,142,6,"nodes"],[71,108,142,11],[71,109,142,12,"length"],[71,115,142,18],[71,117,143,6,"secret"],[71,123,144,4],[71,124,144,5],[72,8,145,4],[72,12,145,8,"children"],[72,20,145,16],[72,23,145,19],[72,25,145,21],[73,8,146,4],[73,12,146,8,"idx"],[73,15,146,11],[73,18,146,14],[73,19,146,15],[74,8,148,4,"nodes"],[74,13,148,9],[74,14,148,10,"forEach"],[74,21,148,17],[74,22,148,18],[74,32,148,19,"item"],[74,36,148,23],[74,38,148,28],[75,10,149,6],[76,10,150,6],[76,14,150,12,"n"],[76,15,150,13],[76,18,150,16,"item"],[76,22,150,20],[76,23,150,21],[76,24,150,22],[76,25,150,23],[77,10,151,6],[78,10,152,6],[78,14,152,12,"m"],[78,15,152,13],[78,18,152,16,"item"],[78,22,152,20],[78,23,152,21],[78,24,152,22],[78,25,152,23],[79,10,153,6],[80,10,154,6],[80,14,154,12,"d"],[80,15,154,13],[80,18,154,16,"item"],[80,22,154,20],[80,23,154,21],[80,24,154,22],[80,25,154,23],[80,29,154,27],[80,31,154,29],[82,10,156,6],[83,10,157,6],[83,14,157,12,"members"],[83,21,157,19],[83,24,157,22,"Array"],[83,29,157,27],[83,30,157,28],[83,31,157,29],[83,32,157,30,"slip39Generate"],[83,46,157,44],[83,47,157,45,"m"],[83,48,157,46],[83,50,157,48],[84,12,157,48],[84,19,157,54],[84,20,157,55,"n"],[84,21,157,56],[84,23,157,58],[84,24,157,59],[84,26,157,61,"d"],[84,27,157,62],[84,28,157,63],[85,10,157,63],[85,12,157,64],[86,10,159,6],[86,14,159,12,"node"],[86,18,159,16],[86,21,159,19],[86,25,159,23,"Slip39Node"],[86,35,159,33],[86,36,159,34,"idx"],[86,39,159,37],[86,41,159,39,"d"],[86,42,159,40],[86,43,159,41],[87,10,160,6],[87,14,160,12,"branch"],[87,20,160,18],[87,23,160,21,"_this"],[87,28,160,25],[87,29,160,26,"buildRecursive"],[87,43,160,40],[87,44,161,8,"node"],[87,48,161,12],[87,50,162,8,"members"],[87,57,162,15],[87,59,163,8,"secretShares"],[87,71,163,20],[87,72,163,21,"idx"],[87,75,163,24],[87,76,163,25],[87,78,164,8,"n"],[87,79,164,9],[87,81,165,8,"currentNode"],[87,92,165,19],[87,93,165,20,"index"],[87,98,166,6],[87,99,166,7],[88,10,168,6,"children"],[88,18,168,14],[88,21,168,17,"children"],[88,29,168,25],[88,30,168,26,"concat"],[88,36,168,32],[88,37,168,33,"branch"],[88,43,168,39],[88,44,168,40],[89,10,169,6,"idx"],[89,13,169,9],[89,16,169,12,"idx"],[89,19,169,15],[89,22,169,18],[89,23,169,19],[90,8,170,4],[90,9,170,5],[90,10,170,6],[91,8,171,4,"currentNode"],[91,19,171,15],[91,20,171,16,"children"],[91,28,171,24],[91,31,171,27,"children"],[91,39,171,35],[92,8,172,4],[92,15,172,11,"currentNode"],[92,26,172,22],[93,6,173,2],[94,4,173,3],[95,6,173,3,"key"],[95,9,173,3],[96,6,173,3,"value"],[96,11,173,3],[96,13,183,2],[96,22,183,2,"fromPath"],[96,30,183,10,"fromPath"],[96,31,183,11,"path"],[96,35,183,15],[96,37,183,17],[97,8,184,4],[97,12,184,8],[97,13,184,9,"validatePath"],[97,25,184,21],[97,26,184,22,"path"],[97,30,184,26],[97,31,184,27],[98,8,186,4],[98,12,186,10,"children"],[98,20,186,18],[98,23,186,21],[98,27,186,25],[98,28,186,26,"parseChildren"],[98,41,186,39],[98,42,186,40,"path"],[98,46,186,44],[98,47,186,45],[99,8,188,4],[99,12,188,8],[99,19,188,15,"children"],[99,27,188,23],[99,32,188,28],[99,43,188,39],[99,47,188,43,"children"],[99,55,188,51],[99,56,188,52,"length"],[99,62,188,58],[99,67,188,63],[99,68,188,64],[99,70,188,66],[100,10,189,6],[100,17,189,13],[100,21,189,17],[100,22,189,18,"root"],[100,26,189,22],[101,8,190,4],[102,8,192,4],[102,15,192,11,"children"],[102,23,192,19],[102,24,192,20,"reduce"],[102,30,192,26],[102,31,192,27],[102,41,192,28,"prev"],[102,45,192,32],[102,47,192,34,"childNumber"],[102,58,192,45],[102,60,192,50],[103,10,193,6],[103,14,193,10,"childrenLen"],[103,25,193,21],[103,28,193,24,"prev"],[103,32,193,28],[103,33,193,29,"children"],[103,41,193,37],[103,42,193,38,"length"],[103,48,193,44],[104,10,194,6],[104,14,194,10,"childNumber"],[104,25,194,21],[104,29,194,25,"childrenLen"],[104,40,194,36],[104,42,194,38],[105,12,195,8],[105,18,195,14],[105,22,195,18,"Error"],[105,27,195,23],[105,28,196,10],[105,47,196,29,"childNumber"],[105,58,196,40],[105,91,196,73,"childrenLen"],[105,102,196,84],[105,105,196,87],[105,106,196,88],[105,110,197,8],[105,111,197,9],[106,10,198,6],[107,10,200,6],[107,17,200,13,"prev"],[107,21,200,17],[107,22,200,18,"children"],[107,30,200,26],[107,31,200,27,"childNumber"],[107,42,200,38],[107,43,200,39],[108,8,201,4],[108,9,201,5],[108,11,201,7],[108,15,201,11],[108,16,201,12,"root"],[108,20,201,16],[108,21,201,17],[109,6,202,2],[110,4,202,3],[111,6,202,3,"key"],[111,9,202,3],[112,6,202,3,"value"],[112,11,202,3],[112,13,204,2],[112,22,204,2,"validatePath"],[112,34,204,14,"validatePath"],[112,35,204,15,"path"],[112,39,204,19],[112,41,204,21],[113,8,205,4],[113,12,205,8],[113,13,205,9,"path"],[113,17,205,13],[113,18,205,14,"match"],[113,23,205,19],[113,24,205,20],[113,47,205,43],[113,48,205,44],[113,50,205,46],[114,10,206,6],[114,16,206,12],[114,20,206,16,"Error"],[114,25,206,21],[114,26,206,22],[114,61,206,57],[114,62,206,58],[115,8,207,4],[116,8,209,4],[116,12,209,10,"depth"],[116,17,209,15],[116,20,209,18,"path"],[116,24,209,22],[116,25,209,23,"split"],[116,30,209,28],[116,31,209,29],[116,34,209,32],[116,35,209,33],[117,8,210,4],[117,12,210,10,"pathLength"],[117,22,210,20],[117,25,210,23,"depth"],[117,30,210,28],[117,31,210,29,"length"],[117,37,210,35],[117,40,210,38],[117,41,210,39],[118,8,211,4],[118,12,211,8,"pathLength"],[118,22,211,18],[118,25,211,21,"MAX_DEPTH"],[118,34,211,30],[118,36,211,32],[119,10,212,6],[119,16,212,12],[119,20,212,16,"Error"],[119,25,212,21],[119,26,213,8],[119,38,213,20,"path"],[119,42,213,24],[119,58,213,40,"MAX_DEPTH"],[119,67,213,49],[119,85,213,67,"pathLength"],[119,95,213,77],[119,99,214,6],[119,100,214,7],[120,8,215,4],[121,6,216,2],[122,4,216,3],[123,6,216,3,"key"],[123,9,216,3],[124,6,216,3,"value"],[124,11,216,3],[124,13,218,2],[124,22,218,2,"parseChildren"],[124,35,218,15,"parseChildren"],[124,36,218,16,"path"],[124,40,218,20],[124,42,218,22],[125,8,219,4],[125,12,219,10,"splitted"],[125,20,219,18],[125,23,219,21,"path"],[125,27,219,25],[125,28,219,26,"split"],[125,33,219,31],[125,34,219,32],[125,37,219,35],[125,38,219,36],[125,39,219,37,"slice"],[125,44,219,42],[125,45,219,43],[125,46,219,44],[125,47,219,45],[126,8,221,4],[126,12,221,10,"result"],[126,18,221,16],[126,21,221,19,"splitted"],[126,29,221,27],[126,30,221,28,"map"],[126,33,221,31],[126,34,221,32],[126,44,221,33,"pathFragment"],[126,56,221,45],[126,58,221,50],[127,10,222,6],[127,17,222,13,"parseInt"],[127,25,222,21],[127,26,222,22,"pathFragment"],[127,38,222,34],[127,39,222,35],[128,8,223,4],[128,9,223,5],[128,10,223,6],[129,8,224,4],[129,15,224,11,"result"],[129,21,224,17],[130,6,225,2],[131,4,225,3],[132,6,225,3,"key"],[132,9,225,3],[133,6,225,3,"value"],[133,11,225,3],[133,13,49,2],[133,22,49,9,"fromArray"],[133,31,49,18,"fromArray"],[133,32,50,4,"masterSecret"],[133,44,50,16],[133,46,59,4],[134,8,59,4],[134,12,59,4,"_ref2"],[134,17,59,4],[134,20,59,4,"arguments"],[134,29,59,4],[134,30,59,4,"length"],[134,36,59,4],[134,44,59,4,"arguments"],[134,53,59,4],[134,61,59,4,"undefined"],[134,70,59,4],[134,73,59,4,"arguments"],[134,82,59,4],[134,88,58,8],[134,89,58,9],[134,90,58,10],[135,10,58,10,"_ref2$passphrase"],[135,26,58,10],[135,29,58,10,"_ref2"],[135,34,58,10],[135,35,52,6,"passphrase"],[135,45,52,16],[136,10,52,6,"passphrase"],[136,20,52,16],[136,23,52,16,"_ref2$passphrase"],[136,39,52,16],[136,53,52,19],[136,55,52,21],[136,58,52,21,"_ref2$passphrase"],[136,74,52,21],[137,10,52,21,"_ref2$threshold"],[137,25,52,21],[137,28,52,21,"_ref2"],[137,33,52,21],[137,34,53,6,"threshold"],[137,43,53,15],[138,10,53,6,"threshold"],[138,19,53,15],[138,22,53,15,"_ref2$threshold"],[138,37,53,15],[138,51,53,18],[138,52,53,19],[138,55,53,19,"_ref2$threshold"],[138,70,53,19],[139,10,53,19,"_ref2$groups"],[139,22,53,19],[139,25,53,19,"_ref2"],[139,30,53,19],[139,31,54,6,"groups"],[139,37,54,12],[140,10,54,6,"groups"],[140,16,54,12],[140,19,54,12,"_ref2$groups"],[140,31,54,12],[140,45,54,15],[140,46,54,16],[140,47,54,17],[140,48,54,18],[140,50,54,20],[140,51,54,21],[140,53,54,23],[140,81,54,51],[140,82,54,52],[140,83,54,53],[140,86,54,53,"_ref2$groups"],[140,98,54,53],[141,10,54,53,"_ref2$iterationExpone"],[141,31,54,53],[141,34,54,53,"_ref2"],[141,39,54,53],[141,40,55,6,"iterationExponent"],[141,57,55,23],[142,10,55,6,"iterationExponent"],[142,27,55,23],[142,30,55,23,"_ref2$iterationExpone"],[142,51,55,23],[142,65,55,26],[142,66,55,27],[142,69,55,27,"_ref2$iterationExpone"],[142,90,55,27],[143,10,55,27,"_ref2$extendableBacku"],[143,31,55,27],[143,34,55,27,"_ref2"],[143,39,55,27],[143,40,56,6,"extendableBackupFlag"],[143,60,56,26],[144,10,56,6,"extendableBackupFlag"],[144,30,56,26],[144,33,56,26,"_ref2$extendableBacku"],[144,54,56,26],[144,68,56,29],[144,69,56,30],[144,72,56,30,"_ref2$extendableBacku"],[144,93,56,30],[145,10,56,30,"_ref2$title"],[145,21,56,30],[145,24,56,30,"_ref2"],[145,29,56,30],[145,30,57,6,"title"],[145,35,57,11],[146,10,57,6,"title"],[146,15,57,11],[146,18,57,11,"_ref2$title"],[146,29,57,11],[146,43,57,14],[146,69,57,40],[146,72,57,40,"_ref2$title"],[146,83,57,40],[147,8,60,4],[147,12,60,8,"masterSecret"],[147,24,60,20],[147,25,60,21,"length"],[147,31,60,27],[147,34,60,30],[147,35,60,31],[147,38,60,34,"_$$_REQUIRE"],[147,49,60,34],[147,50,60,34,"_dependencyMap"],[147,64,60,34],[147,91,60,45,"MIN_ENTROPY_BITS"],[147,107,60,61],[147,109,60,63],[148,10,61,6],[148,16,61,12,"Error"],[148,21,61,17],[148,22,62,8],[148,58,62,44,"masterSecret"],[148,70,62,56],[148,71,62,57,"length"],[148,77,62,63],[148,105,62,91,"_$$_REQUIRE"],[148,116,62,91],[148,117,62,91,"_dependencyMap"],[148,131,62,91],[148,158,62,102,"bitsToBytes"],[148,169,62,113],[148,170,62,114,"_$$_REQUIRE"],[148,181,62,114],[148,182,62,114,"_dependencyMap"],[148,196,62,114],[148,223,62,125,"MIN_ENTROPY_BITS"],[148,239,62,141],[148,240,62,142],[148,249,63,6],[148,250,63,7],[149,8,64,4],[150,8,66,4],[150,12,66,8,"masterSecret"],[150,24,66,20],[150,25,66,21,"length"],[150,31,66,27],[150,34,66,30],[150,35,66,31],[150,40,66,36],[150,41,66,37],[150,43,66,39],[151,10,67,6],[151,16,67,12,"Error"],[151,21,67,17],[151,22,68,8],[151,88,69,6],[151,89,69,7],[152,8,70,4],[153,8,72,4],[153,12,72,8],[153,13,72,9],[153,29,72,25],[153,30,72,26,"test"],[153,34,72,30],[153,35,72,31,"passphrase"],[153,45,72,41],[153,46,72,42],[153,48,72,44],[154,10,73,6],[154,16,73,12,"Error"],[154,21,73,17],[154,22,74,8],[154,105,75,6],[154,106,75,7],[155,8,76,4],[156,8,78,4],[156,12,78,8,"threshold"],[156,21,78,17],[156,24,78,20,"groups"],[156,30,78,26],[156,31,78,27,"length"],[156,37,78,33],[156,39,78,35],[157,10,79,6],[157,16,79,12,"Error"],[157,21,79,17],[157,22,80,8],[157,56,80,42,"threshold"],[157,65,80,51],[157,108,80,94,"groups"],[157,114,80,100],[157,115,80,101,"length"],[157,121,80,107],[157,125,81,6],[157,126,81,7],[158,8,82,4],[159,8,84,4,"groups"],[159,14,84,10],[159,15,84,11,"forEach"],[159,22,84,18],[159,23,84,19],[159,33,84,20,"item"],[159,37,84,24],[159,39,84,29],[160,10,85,6],[160,14,85,10,"item"],[160,18,85,14],[160,19,85,15],[160,20,85,16],[160,21,85,17],[160,26,85,22],[160,27,85,23],[160,31,85,27,"item"],[160,35,85,31],[160,36,85,32],[160,37,85,33],[160,38,85,34],[160,41,85,37],[160,42,85,38],[160,44,85,40],[161,12,86,8],[161,18,86,14,"Error"],[161,23,86,19],[161,24,87,10],[161,134,87,120,"groups"],[161,140,87,126],[161,141,87,127,"join"],[161,145,87,131],[161,146,87,132],[161,147,87,133],[161,149,88,8],[161,150,88,9],[162,10,89,6],[163,8,90,4],[163,9,90,5],[163,10,90,6],[164,8,92,4],[164,12,92,10,"identifier"],[164,22,92,20],[164,25,92,23,"_$$_REQUIRE"],[164,36,92,23],[164,37,92,23,"_dependencyMap"],[164,51,92,23],[164,78,92,34,"generateIdentifier"],[164,96,92,52],[164,97,92,53],[164,98,92,54],[165,8,94,4],[165,12,94,10,"slip"],[165,16,94,14],[165,19,94,17],[165,23,94,21,"Slip39"],[165,29,94,27],[165,30,94,28],[166,10,95,6,"iterationExponent"],[166,27,95,23],[166,29,95,25,"iterationExponent"],[166,46,95,42],[167,10,96,6,"extendableBackupFlag"],[167,30,96,26],[167,32,96,28,"extendableBackupFlag"],[167,52,96,48],[168,10,97,6,"identifier"],[168,20,97,16],[168,22,97,18,"identifier"],[168,32,97,28],[169,10,98,6,"groupCount"],[169,20,98,16],[169,22,98,18,"groups"],[169,28,98,24],[169,29,98,25,"length"],[169,35,98,31],[170,10,99,6,"groupThreshold"],[170,24,99,20],[170,26,99,22,"threshold"],[171,8,100,4],[171,9,100,5],[171,10,100,6],[172,8,102,4],[172,12,102,10,"encryptedMasterSecret"],[172,33,102,31],[172,36,102,34,"_$$_REQUIRE"],[172,47,102,34],[172,48,102,34,"_dependencyMap"],[172,62,102,34],[172,89,102,45,"crypt"],[172,94,102,50],[172,95,103,6,"masterSecret"],[172,107,103,18],[172,109,104,6,"passphrase"],[172,119,104,16],[172,121,105,6,"iterationExponent"],[172,138,105,23],[172,140,106,6,"slip"],[172,144,106,10],[172,145,106,11,"identifier"],[172,155,106,21],[172,157,107,6,"extendableBackupFlag"],[172,177,108,4],[172,178,108,5],[173,8,110,4],[173,12,110,10,"root"],[173,16,110,14],[173,19,110,17,"slip"],[173,23,110,21],[173,24,110,22,"buildRecursive"],[173,38,110,36],[173,39,111,6],[173,43,111,10,"Slip39Node"],[173,53,111,20],[173,54,111,21],[173,55,111,22],[173,57,111,24,"title"],[173,62,111,29],[173,63,111,30],[173,65,112,6,"groups"],[173,71,112,12],[173,73,113,6,"encryptedMasterSecret"],[173,94,113,27],[173,96,114,6,"threshold"],[173,105,115,4],[173,106,115,5],[174,8,117,4,"slip"],[174,12,117,8],[174,13,117,9,"root"],[174,17,117,13],[174,20,117,16,"root"],[174,24,117,20],[175,8,118,4],[175,15,118,11,"slip"],[175,19,118,15],[176,6,119,2],[177,4,119,3],[178,6,119,3,"key"],[178,9,119,3],[179,6,119,3,"value"],[179,11,119,3],[179,13,175,2],[179,22,175,9,"recoverSecret"],[179,35,175,22,"recoverSecret"],[179,36,175,23,"mnemonics"],[179,45,175,32],[179,47,175,34,"passphrase"],[179,57,175,44],[179,59,175,46],[180,8,176,4],[180,15,176,11,"_$$_REQUIRE"],[180,26,176,11],[180,27,176,11,"_dependencyMap"],[180,41,176,11],[180,68,176,22,"combineMnemonics"],[180,84,176,38],[180,85,176,39,"mnemonics"],[180,94,176,48],[180,96,176,50,"passphrase"],[180,106,176,60],[180,107,176,61],[181,6,177,2],[182,4,177,3],[183,6,177,3,"key"],[183,9,177,3],[184,6,177,3,"value"],[184,11,177,3],[184,13,179,2],[184,22,179,9,"validateMnemonic"],[184,38,179,25,"validateMnemonic"],[184,39,179,26,"mnemonic"],[184,47,179,34],[184,49,179,36],[185,8,180,4],[185,15,180,11,"_$$_REQUIRE"],[185,26,180,11],[185,27,180,11,"_dependencyMap"],[185,41,180,11],[185,68,180,22,"validateMnemonic"],[185,84,180,38],[185,85,180,39,"mnemonic"],[185,93,180,47],[185,94,180,48],[186,6,181,2],[187,4,181,3],[188,2,181,3],[189,2,228,0,"exports"],[189,9,228,7],[189,12,228,10,"module"],[189,18,228,16],[189,19,228,17,"exports"],[189,26,228,24],[189,29,228,27,"Slip39"],[189,35,228,33],[190,0,228,34],[190,3]],"functionMap":{"names":["<global>","Slip39Node","Slip39Node#constructor","Slip39Node#get__mnemonics","children.reduce$argument_0","Slip39","Slip39#constructor","Slip39.fromArray","groups.forEach$argument_0","Slip39#buildRecursive","nodes.forEach$argument_0","Array.slip39Generate$argument_1","Slip39.recoverSecret","Slip39.validateMnemonic","Slip39#fromPath","Slip39#validatePath","Slip39#parseChildren","splitted.map$argument_0"],"mappings":"AAA;ACU;ECC;GDK;EEE;wCCI;KDE;GFE;CDC;AKM;ECC;GDY;EEE;mBCmC;KDM;GF6B;EIE;kBC2B;gDCS,eD;KDa;GJG;EOE;GPE;EQE;GRE;ESE;2BVS;KUS;GTC;EUE;GVY;EWE;gCCG;KDE;GXE;CLC"}},"type":"js/module"}]}