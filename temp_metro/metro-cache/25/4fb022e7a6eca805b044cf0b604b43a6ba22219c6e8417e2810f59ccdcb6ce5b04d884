{"dependencies":[{"name":"../../tokenizer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":42,"index":42}},{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":42,"index":42}},{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":42,"index":42}},{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":42,"index":42}},{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":42,"index":42}},{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":42,"index":42}}],"key":"aNRU9n3c7yINqZkqLGUbbiGwGn8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var WHITESPACE = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE.WhiteSpace;\n  var COMMENT = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE.Comment;\n  var IDENT = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE.Ident;\n  var FUNCTION = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE.Function;\n  var COLON = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE.Colon;\n  var LEFTPARENTHESIS = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE.LeftParenthesis;\n  function consumeRaw() {\n    return this.createSingleNodeList(this.Raw(this.scanner.tokenIndex, null, false));\n  }\n  function parentheses() {\n    this.scanner.skipSC();\n    if (this.scanner.tokenType === IDENT && this.lookupNonWSType(1) === COLON) {\n      return this.createSingleNodeList(this.Declaration());\n    }\n    return readSequence.call(this);\n  }\n  function readSequence() {\n    var children = this.createList();\n    var space = null;\n    var child;\n    this.scanner.skipSC();\n    scan: while (!this.scanner.eof) {\n      switch (this.scanner.tokenType) {\n        case WHITESPACE:\n          space = this.WhiteSpace();\n          continue;\n        case COMMENT:\n          this.scanner.next();\n          continue;\n        case FUNCTION:\n          child = this.Function(consumeRaw, this.scope.AtrulePrelude);\n          break;\n        case IDENT:\n          child = this.Identifier();\n          break;\n        case LEFTPARENTHESIS:\n          child = this.Parentheses(parentheses, this.scope.AtrulePrelude);\n          break;\n        default:\n          break scan;\n      }\n      if (space !== null) {\n        children.push(space);\n        space = null;\n      }\n      children.push(child);\n    }\n    return children;\n  }\n  module.exports = {\n    parse: {\n      prelude: function prelude() {\n        var children = readSequence.call(this);\n        if (this.getFirstListNode(children) === null) {\n          this.error('Condition is expected');\n        }\n        return children;\n      },\n      block: function block() {\n        return this.Block(false);\n      }\n    }\n  };\n});","lineCount":65,"map":[[2,2,3,0],[2,6,3,4,"WHITESPACE"],[2,16,3,14],[2,19,3,17,"_$$_REQUIRE"],[2,30,3,17],[2,31,3,17,"_dependencyMap"],[2,45,3,17],[2,69,3,17,"TYPE"],[2,73,3,17],[2,74,3,22,"WhiteSpace"],[2,84,3,32],[3,2,4,0],[3,6,4,4,"COMMENT"],[3,13,4,11],[3,16,4,14,"_$$_REQUIRE"],[3,27,4,14],[3,28,4,14,"_dependencyMap"],[3,42,4,14],[3,66,4,14,"TYPE"],[3,70,4,14],[3,71,4,19,"Comment"],[3,78,4,26],[4,2,5,0],[4,6,5,4,"IDENT"],[4,11,5,9],[4,14,5,12,"_$$_REQUIRE"],[4,25,5,12],[4,26,5,12,"_dependencyMap"],[4,40,5,12],[4,64,5,12,"TYPE"],[4,68,5,12],[4,69,5,17,"Ident"],[4,74,5,22],[5,2,6,0],[5,6,6,4,"FUNCTION"],[5,14,6,12],[5,17,6,15,"_$$_REQUIRE"],[5,28,6,15],[5,29,6,15,"_dependencyMap"],[5,43,6,15],[5,67,6,15,"TYPE"],[5,71,6,15],[5,72,6,20,"Function"],[5,80,6,28],[6,2,7,0],[6,6,7,4,"COLON"],[6,11,7,9],[6,14,7,12,"_$$_REQUIRE"],[6,25,7,12],[6,26,7,12,"_dependencyMap"],[6,40,7,12],[6,64,7,12,"TYPE"],[6,68,7,12],[6,69,7,17,"Colon"],[6,74,7,22],[7,2,8,0],[7,6,8,4,"LEFTPARENTHESIS"],[7,21,8,19],[7,24,8,22,"_$$_REQUIRE"],[7,35,8,22],[7,36,8,22,"_dependencyMap"],[7,50,8,22],[7,74,8,22,"TYPE"],[7,78,8,22],[7,79,8,27,"LeftParenthesis"],[7,94,8,42],[8,2,10,0],[8,11,10,9,"consumeRaw"],[8,21,10,19,"consumeRaw"],[8,22,10,19],[8,24,10,22],[9,4,11,4],[9,11,11,11],[9,15,11,15],[9,16,11,16,"createSingleNodeList"],[9,36,11,36],[9,37,12,8],[9,41,12,12],[9,42,12,13,"Raw"],[9,45,12,16],[9,46,12,17],[9,50,12,21],[9,51,12,22,"scanner"],[9,58,12,29],[9,59,12,30,"tokenIndex"],[9,69,12,40],[9,71,12,42],[9,75,12,46],[9,77,12,48],[9,82,12,53],[9,83,13,4],[9,84,13,5],[10,2,14,0],[11,2,16,0],[11,11,16,9,"parentheses"],[11,22,16,20,"parentheses"],[11,23,16,20],[11,25,16,23],[12,4,17,4],[12,8,17,8],[12,9,17,9,"scanner"],[12,16,17,16],[12,17,17,17,"skipSC"],[12,23,17,23],[12,24,17,24],[12,25,17,25],[13,4,19,4],[13,8,19,8],[13,12,19,12],[13,13,19,13,"scanner"],[13,20,19,20],[13,21,19,21,"tokenType"],[13,30,19,30],[13,35,19,35,"IDENT"],[13,40,19,40],[13,44,20,8],[13,48,20,12],[13,49,20,13,"lookupNonWSType"],[13,64,20,28],[13,65,20,29],[13,66,20,30],[13,67,20,31],[13,72,20,36,"COLON"],[13,77,20,41],[13,79,20,43],[14,6,21,8],[14,13,21,15],[14,17,21,19],[14,18,21,20,"createSingleNodeList"],[14,38,21,40],[14,39,22,12],[14,43,22,16],[14,44,22,17,"Declaration"],[14,55,22,28],[14,56,22,29],[14,57,23,8],[14,58,23,9],[15,4,24,4],[16,4,26,4],[16,11,26,11,"readSequence"],[16,23,26,23],[16,24,26,24,"call"],[16,28,26,28],[16,29,26,29],[16,33,26,33],[16,34,26,34],[17,2,27,0],[18,2,29,0],[18,11,29,9,"readSequence"],[18,23,29,21,"readSequence"],[18,24,29,21],[18,26,29,24],[19,4,30,4],[19,8,30,8,"children"],[19,16,30,16],[19,19,30,19],[19,23,30,23],[19,24,30,24,"createList"],[19,34,30,34],[19,35,30,35],[19,36,30,36],[20,4,31,4],[20,8,31,8,"space"],[20,13,31,13],[20,16,31,16],[20,20,31,20],[21,4,32,4],[21,8,32,8,"child"],[21,13,32,13],[22,4,34,4],[22,8,34,8],[22,9,34,9,"scanner"],[22,16,34,16],[22,17,34,17,"skipSC"],[22,23,34,23],[22,24,34,24],[22,25,34,25],[23,4,36,4,"scan"],[23,8,36,8],[23,10,37,4],[23,17,37,11],[23,18,37,12],[23,22,37,16],[23,23,37,17,"scanner"],[23,30,37,24],[23,31,37,25,"eof"],[23,34,37,28],[23,36,37,30],[24,6,38,8],[24,14,38,16],[24,18,38,20],[24,19,38,21,"scanner"],[24,26,38,28],[24,27,38,29,"tokenType"],[24,36,38,38],[25,8,39,12],[25,13,39,17,"WHITESPACE"],[25,23,39,27],[26,10,40,16,"space"],[26,15,40,21],[26,18,40,24],[26,22,40,28],[26,23,40,29,"WhiteSpace"],[26,33,40,39],[26,34,40,40],[26,35,40,41],[27,10,41,16],[28,8,43,12],[28,13,43,17,"COMMENT"],[28,20,43,24],[29,10,44,16],[29,14,44,20],[29,15,44,21,"scanner"],[29,22,44,28],[29,23,44,29,"next"],[29,27,44,33],[29,28,44,34],[29,29,44,35],[30,10,45,16],[31,8,47,12],[31,13,47,17,"FUNCTION"],[31,21,47,25],[32,10,48,16,"child"],[32,15,48,21],[32,18,48,24],[32,22,48,28],[32,23,48,29,"Function"],[32,31,48,37],[32,32,48,38,"consumeRaw"],[32,42,48,48],[32,44,48,50],[32,48,48,54],[32,49,48,55,"scope"],[32,54,48,60],[32,55,48,61,"AtrulePrelude"],[32,68,48,74],[32,69,48,75],[33,10,49,16],[34,8,51,12],[34,13,51,17,"IDENT"],[34,18,51,22],[35,10,52,16,"child"],[35,15,52,21],[35,18,52,24],[35,22,52,28],[35,23,52,29,"Identifier"],[35,33,52,39],[35,34,52,40],[35,35,52,41],[36,10,53,16],[37,8,55,12],[37,13,55,17,"LEFTPARENTHESIS"],[37,28,55,32],[38,10,56,16,"child"],[38,15,56,21],[38,18,56,24],[38,22,56,28],[38,23,56,29,"Parentheses"],[38,34,56,40],[38,35,56,41,"parentheses"],[38,46,56,52],[38,48,56,54],[38,52,56,58],[38,53,56,59,"scope"],[38,58,56,64],[38,59,56,65,"AtrulePrelude"],[38,72,56,78],[38,73,56,79],[39,10,57,16],[40,8,59,12],[41,10,60,16],[41,16,60,22,"scan"],[41,20,60,26],[42,6,61,8],[43,6,63,8],[43,10,63,12,"space"],[43,15,63,17],[43,20,63,22],[43,24,63,26],[43,26,63,28],[44,8,64,12,"children"],[44,16,64,20],[44,17,64,21,"push"],[44,21,64,25],[44,22,64,26,"space"],[44,27,64,31],[44,28,64,32],[45,8,65,12,"space"],[45,13,65,17],[45,16,65,20],[45,20,65,24],[46,6,66,8],[47,6,68,8,"children"],[47,14,68,16],[47,15,68,17,"push"],[47,19,68,21],[47,20,68,22,"child"],[47,25,68,27],[47,26,68,28],[48,4,69,4],[49,4,71,4],[49,11,71,11,"children"],[49,19,71,19],[50,2,72,0],[51,2,74,0,"module"],[51,8,74,6],[51,9,74,7,"exports"],[51,16,74,14],[51,19,74,17],[52,4,75,4,"parse"],[52,9,75,9],[52,11,75,11],[53,6,76,8,"prelude"],[53,13,76,15],[53,15,76,17],[53,24,76,8,"prelude"],[53,31,76,15,"prelude"],[53,32,76,15],[53,34,76,28],[54,8,77,12],[54,12,77,16,"children"],[54,20,77,24],[54,23,77,27,"readSequence"],[54,35,77,39],[54,36,77,40,"call"],[54,40,77,44],[54,41,77,45],[54,45,77,49],[54,46,77,50],[55,8,79,12],[55,12,79,16],[55,16,79,20],[55,17,79,21,"getFirstListNode"],[55,33,79,37],[55,34,79,38,"children"],[55,42,79,46],[55,43,79,47],[55,48,79,52],[55,52,79,56],[55,54,79,58],[56,10,80,16],[56,14,80,20],[56,15,80,21,"error"],[56,20,80,26],[56,21,80,27],[56,44,80,50],[56,45,80,51],[57,8,81,12],[58,8,83,12],[58,15,83,19,"children"],[58,23,83,27],[59,6,84,8],[59,7,84,9],[60,6,85,8,"block"],[60,11,85,13],[60,13,85,15],[60,22,85,8,"block"],[60,27,85,13,"block"],[60,28,85,13],[60,30,85,26],[61,8,86,12],[61,15,86,19],[61,19,86,23],[61,20,86,24,"Block"],[61,25,86,29],[61,26,86,30],[61,31,86,35],[61,32,86,36],[62,6,87,8],[63,4,88,4],[64,2,89,0],[64,3,89,1],[65,0,89,2],[65,3]],"functionMap":{"names":["<global>","consumeRaw","parentheses","readSequence","module.exports.parse.prelude","module.exports.parse.block"],"mappings":"AAA;ACS;CDI;AEE;CFW;AGE;CH2C;iBII;SJQ;eKC;SLE"}},"type":"js/module"}]}