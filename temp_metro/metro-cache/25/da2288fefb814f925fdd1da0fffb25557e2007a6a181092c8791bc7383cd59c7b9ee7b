{"dependencies":[{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":13,"index":26},"end":{"line":2,"column":42,"index":55}},{"start":{"line":2,"column":13,"index":26},"end":{"line":2,"column":42,"index":55}},{"start":{"line":2,"column":13,"index":26},"end":{"line":2,"column":42,"index":55}},{"start":{"line":2,"column":13,"index":26},"end":{"line":2,"column":42,"index":55}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI="}},{"name":"readable-stream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":72},"end":{"line":3,"column":52,"index":108}},{"start":{"line":3,"column":16,"index":72},"end":{"line":3,"column":52,"index":108}}],"key":"MoTosa0NrO3RIvTxl2YVbe2b0EE="}},{"name":"inherits","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":15,"index":124},"end":{"line":4,"column":34,"index":143}}],"key":"UFs2L1Ma7NUz/WYD3lQMkA8Bn/s="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  function throwIfNotStringOrBuffer(val, prefix) {\n    if (!_$$_REQUIRE(_dependencyMap[0], \"safe-buffer\").Buffer.isBuffer(val) && typeof val !== 'string') {\n      throw new TypeError(prefix + ' must be a string or a buffer');\n    }\n  }\n  function HashBase(blockSize) {\n    _$$_REQUIRE(_dependencyMap[1], \"readable-stream\").Transform.call(this);\n    this._block = _$$_REQUIRE(_dependencyMap[0], \"safe-buffer\").Buffer.allocUnsafe(blockSize);\n    this._blockSize = blockSize;\n    this._blockOffset = 0;\n    this._length = [0, 0, 0, 0];\n    this._finalized = false;\n  }\n  _$$_REQUIRE(_dependencyMap[2], \"inherits\")(HashBase, _$$_REQUIRE(_dependencyMap[1], \"readable-stream\").Transform);\n  HashBase.prototype._transform = function (chunk, encoding, callback) {\n    var error = null;\n    try {\n      this.update(chunk, encoding);\n    } catch (err) {\n      error = err;\n    }\n    callback(error);\n  };\n  HashBase.prototype._flush = function (callback) {\n    var error = null;\n    try {\n      this.push(this.digest());\n    } catch (err) {\n      error = err;\n    }\n    callback(error);\n  };\n  HashBase.prototype.update = function (data, encoding) {\n    throwIfNotStringOrBuffer(data, 'Data');\n    if (this._finalized) throw new Error('Digest already called');\n    if (!_$$_REQUIRE(_dependencyMap[0], \"safe-buffer\").Buffer.isBuffer(data)) data = _$$_REQUIRE(_dependencyMap[0], \"safe-buffer\").Buffer.from(data, encoding);\n\n    // consume data\n    var block = this._block;\n    var offset = 0;\n    while (this._blockOffset + data.length - offset >= this._blockSize) {\n      for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];\n      this._update();\n      this._blockOffset = 0;\n    }\n    while (offset < data.length) block[this._blockOffset++] = data[offset++];\n\n    // update length\n    for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\n      this._length[j] += carry;\n      carry = this._length[j] / 0x0100000000 | 0;\n      if (carry > 0) this._length[j] -= 0x0100000000 * carry;\n    }\n    return this;\n  };\n  HashBase.prototype._update = function () {\n    throw new Error('_update is not implemented');\n  };\n  HashBase.prototype.digest = function (encoding) {\n    if (this._finalized) throw new Error('Digest already called');\n    this._finalized = true;\n    var digest = this._digest();\n    if (encoding !== undefined) digest = digest.toString(encoding);\n\n    // reset state\n    this._block.fill(0);\n    this._blockOffset = 0;\n    for (var i = 0; i < 4; ++i) this._length[i] = 0;\n    return digest;\n  };\n  HashBase.prototype._digest = function () {\n    throw new Error('_digest is not implemented');\n  };\n  module.exports = HashBase;\n});","lineCount":78,"map":[[2,2,1,0],[2,14,1,12],[4,2,6,0],[4,11,6,9,"throwIfNotStringOrBuffer"],[4,35,6,33,"throwIfNotStringOrBuffer"],[4,36,6,35,"val"],[4,39,6,38],[4,41,6,40,"prefix"],[4,47,6,46],[4,49,6,48],[5,4,7,2],[5,8,7,6],[5,9,7,7,"_$$_REQUIRE"],[5,20,7,7],[5,21,7,7,"_dependencyMap"],[5,35,7,7],[5,55,7,7,"Buffer"],[5,61,7,7],[5,62,7,14,"isBuffer"],[5,70,7,22],[5,71,7,23,"val"],[5,74,7,26],[5,75,7,27],[5,79,7,31],[5,86,7,38,"val"],[5,89,7,41],[5,94,7,46],[5,102,7,54],[5,104,7,56],[6,6,8,4],[6,12,8,10],[6,16,8,14,"TypeError"],[6,25,8,23],[6,26,8,24,"prefix"],[6,32,8,30],[6,35,8,33],[6,66,8,64],[6,67,8,65],[7,4,9,2],[8,2,10,0],[9,2,12,0],[9,11,12,9,"HashBase"],[9,19,12,17,"HashBase"],[9,20,12,19,"blockSize"],[9,29,12,28],[9,31,12,30],[10,4,13,2,"_$$_REQUIRE"],[10,15,13,2],[10,16,13,2,"_dependencyMap"],[10,30,13,2],[10,54,13,2,"Transform"],[10,63,13,2],[10,64,13,12,"call"],[10,68,13,16],[10,69,13,17],[10,73,13,21],[10,74,13,22],[11,4,15,2],[11,8,15,6],[11,9,15,7,"_block"],[11,15,15,13],[11,18,15,16,"_$$_REQUIRE"],[11,29,15,16],[11,30,15,16,"_dependencyMap"],[11,44,15,16],[11,64,15,16,"Buffer"],[11,70,15,16],[11,71,15,23,"allocUnsafe"],[11,82,15,34],[11,83,15,35,"blockSize"],[11,92,15,44],[11,93,15,45],[12,4,16,2],[12,8,16,6],[12,9,16,7,"_blockSize"],[12,19,16,17],[12,22,16,20,"blockSize"],[12,31,16,29],[13,4,17,2],[13,8,17,6],[13,9,17,7,"_blockOffset"],[13,21,17,19],[13,24,17,22],[13,25,17,23],[14,4,18,2],[14,8,18,6],[14,9,18,7,"_length"],[14,16,18,14],[14,19,18,17],[14,20,18,18],[14,21,18,19],[14,23,18,21],[14,24,18,22],[14,26,18,24],[14,27,18,25],[14,29,18,27],[14,30,18,28],[14,31,18,29],[15,4,20,2],[15,8,20,6],[15,9,20,7,"_finalized"],[15,19,20,17],[15,22,20,20],[15,27,20,25],[16,2,21,0],[17,2,23,0,"_$$_REQUIRE"],[17,13,23,0],[17,14,23,0,"_dependencyMap"],[17,28,23,0],[17,45,23,9,"HashBase"],[17,53,23,17],[17,55,23,17,"_$$_REQUIRE"],[17,66,23,17],[17,67,23,17,"_dependencyMap"],[17,81,23,17],[17,105,23,17,"Transform"],[17,114,23,28],[17,115,23,29],[18,2,25,0,"HashBase"],[18,10,25,8],[18,11,25,9,"prototype"],[18,20,25,18],[18,21,25,19,"_transform"],[18,31,25,29],[18,34,25,32],[18,44,25,42,"chunk"],[18,49,25,47],[18,51,25,49,"encoding"],[18,59,25,57],[18,61,25,59,"callback"],[18,69,25,67],[18,71,25,69],[19,4,26,2],[19,8,26,6,"error"],[19,13,26,11],[19,16,26,14],[19,20,26,18],[20,4,27,2],[20,8,27,6],[21,6,28,4],[21,10,28,8],[21,11,28,9,"update"],[21,17,28,15],[21,18,28,16,"chunk"],[21,23,28,21],[21,25,28,23,"encoding"],[21,33,28,31],[21,34,28,32],[22,4,29,2],[22,5,29,3],[22,6,29,4],[22,13,29,11,"err"],[22,16,29,14],[22,18,29,16],[23,6,30,4,"error"],[23,11,30,9],[23,14,30,12,"err"],[23,17,30,15],[24,4,31,2],[25,4,33,2,"callback"],[25,12,33,10],[25,13,33,11,"error"],[25,18,33,16],[25,19,33,17],[26,2,34,0],[26,3,34,1],[27,2,36,0,"HashBase"],[27,10,36,8],[27,11,36,9,"prototype"],[27,20,36,18],[27,21,36,19,"_flush"],[27,27,36,25],[27,30,36,28],[27,40,36,38,"callback"],[27,48,36,46],[27,50,36,48],[28,4,37,2],[28,8,37,6,"error"],[28,13,37,11],[28,16,37,14],[28,20,37,18],[29,4,38,2],[29,8,38,6],[30,6,39,4],[30,10,39,8],[30,11,39,9,"push"],[30,15,39,13],[30,16,39,14],[30,20,39,18],[30,21,39,19,"digest"],[30,27,39,25],[30,28,39,26],[30,29,39,27],[30,30,39,28],[31,4,40,2],[31,5,40,3],[31,6,40,4],[31,13,40,11,"err"],[31,16,40,14],[31,18,40,16],[32,6,41,4,"error"],[32,11,41,9],[32,14,41,12,"err"],[32,17,41,15],[33,4,42,2],[34,4,44,2,"callback"],[34,12,44,10],[34,13,44,11,"error"],[34,18,44,16],[34,19,44,17],[35,2,45,0],[35,3,45,1],[36,2,47,0,"HashBase"],[36,10,47,8],[36,11,47,9,"prototype"],[36,20,47,18],[36,21,47,19,"update"],[36,27,47,25],[36,30,47,28],[36,40,47,38,"data"],[36,44,47,42],[36,46,47,44,"encoding"],[36,54,47,52],[36,56,47,54],[37,4,48,2,"throwIfNotStringOrBuffer"],[37,28,48,26],[37,29,48,27,"data"],[37,33,48,31],[37,35,48,33],[37,41,48,39],[37,42,48,40],[38,4,49,2],[38,8,49,6],[38,12,49,10],[38,13,49,11,"_finalized"],[38,23,49,21],[38,25,49,23],[38,31,49,29],[38,35,49,33,"Error"],[38,40,49,38],[38,41,49,39],[38,64,49,62],[38,65,49,63],[39,4,50,2],[39,8,50,6],[39,9,50,7,"_$$_REQUIRE"],[39,20,50,7],[39,21,50,7,"_dependencyMap"],[39,35,50,7],[39,55,50,7,"Buffer"],[39,61,50,7],[39,62,50,14,"isBuffer"],[39,70,50,22],[39,71,50,23,"data"],[39,75,50,27],[39,76,50,28],[39,78,50,30,"data"],[39,82,50,34],[39,85,50,37,"_$$_REQUIRE"],[39,96,50,37],[39,97,50,37,"_dependencyMap"],[39,111,50,37],[39,131,50,37,"Buffer"],[39,137,50,37],[39,138,50,44,"from"],[39,142,50,48],[39,143,50,49,"data"],[39,147,50,53],[39,149,50,55,"encoding"],[39,157,50,63],[39,158,50,64],[41,4,52,2],[42,4,53,2],[42,8,53,6,"block"],[42,13,53,11],[42,16,53,14],[42,20,53,18],[42,21,53,19,"_block"],[42,27,53,25],[43,4,54,2],[43,8,54,6,"offset"],[43,14,54,12],[43,17,54,15],[43,18,54,16],[44,4,55,2],[44,11,55,9],[44,15,55,13],[44,16,55,14,"_blockOffset"],[44,28,55,26],[44,31,55,29,"data"],[44,35,55,33],[44,36,55,34,"length"],[44,42,55,40],[44,45,55,43,"offset"],[44,51,55,49],[44,55,55,53],[44,59,55,57],[44,60,55,58,"_blockSize"],[44,70,55,68],[44,72,55,70],[45,6,56,4],[45,11,56,9],[45,15,56,13,"i"],[45,16,56,14],[45,19,56,17],[45,23,56,21],[45,24,56,22,"_blockOffset"],[45,36,56,34],[45,38,56,36,"i"],[45,39,56,37],[45,42,56,40],[45,46,56,44],[45,47,56,45,"_blockSize"],[45,57,56,55],[45,60,56,58,"block"],[45,65,56,63],[45,66,56,64,"i"],[45,67,56,65],[45,69,56,67],[45,70,56,68],[45,73,56,71,"data"],[45,77,56,75],[45,78,56,76,"offset"],[45,84,56,82],[45,86,56,84],[45,87,56,85],[46,6,57,4],[46,10,57,8],[46,11,57,9,"_update"],[46,18,57,16],[46,19,57,17],[46,20,57,18],[47,6,58,4],[47,10,58,8],[47,11,58,9,"_blockOffset"],[47,23,58,21],[47,26,58,24],[47,27,58,25],[48,4,59,2],[49,4,60,2],[49,11,60,9,"offset"],[49,17,60,15],[49,20,60,18,"data"],[49,24,60,22],[49,25,60,23,"length"],[49,31,60,29],[49,33,60,31,"block"],[49,38,60,36],[49,39,60,37],[49,43,60,41],[49,44,60,42,"_blockOffset"],[49,56,60,54],[49,58,60,56],[49,59,60,57],[49,62,60,60,"data"],[49,66,60,64],[49,67,60,65,"offset"],[49,73,60,71],[49,75,60,73],[49,76,60,74],[51,4,62,2],[52,4,63,2],[52,9,63,7],[52,13,63,11,"j"],[52,14,63,12],[52,17,63,15],[52,18,63,16],[52,20,63,18,"carry"],[52,25,63,23],[52,28,63,26,"data"],[52,32,63,30],[52,33,63,31,"length"],[52,39,63,37],[52,42,63,40],[52,43,63,41],[52,45,63,43,"carry"],[52,50,63,48],[52,53,63,51],[52,54,63,52],[52,56,63,54],[52,58,63,56,"j"],[52,59,63,57],[52,61,63,59],[53,6,64,4],[53,10,64,8],[53,11,64,9,"_length"],[53,18,64,16],[53,19,64,17,"j"],[53,20,64,18],[53,21,64,19],[53,25,64,23,"carry"],[53,30,64,28],[54,6,65,4,"carry"],[54,11,65,9],[54,14,65,13],[54,18,65,17],[54,19,65,18,"_length"],[54,26,65,25],[54,27,65,26,"j"],[54,28,65,27],[54,29,65,28],[54,32,65,31],[54,44,65,43],[54,47,65,47],[54,48,65,48],[55,6,66,4],[55,10,66,8,"carry"],[55,15,66,13],[55,18,66,16],[55,19,66,17],[55,21,66,19],[55,25,66,23],[55,26,66,24,"_length"],[55,33,66,31],[55,34,66,32,"j"],[55,35,66,33],[55,36,66,34],[55,40,66,38],[55,52,66,50],[55,55,66,53,"carry"],[55,60,66,58],[56,4,67,2],[57,4,69,2],[57,11,69,9],[57,15,69,13],[58,2,70,0],[58,3,70,1],[59,2,72,0,"HashBase"],[59,10,72,8],[59,11,72,9,"prototype"],[59,20,72,18],[59,21,72,19,"_update"],[59,28,72,26],[59,31,72,29],[59,43,72,41],[60,4,73,2],[60,10,73,8],[60,14,73,12,"Error"],[60,19,73,17],[60,20,73,18],[60,48,73,46],[60,49,73,47],[61,2,74,0],[61,3,74,1],[62,2,76,0,"HashBase"],[62,10,76,8],[62,11,76,9,"prototype"],[62,20,76,18],[62,21,76,19,"digest"],[62,27,76,25],[62,30,76,28],[62,40,76,38,"encoding"],[62,48,76,46],[62,50,76,48],[63,4,77,2],[63,8,77,6],[63,12,77,10],[63,13,77,11,"_finalized"],[63,23,77,21],[63,25,77,23],[63,31,77,29],[63,35,77,33,"Error"],[63,40,77,38],[63,41,77,39],[63,64,77,62],[63,65,77,63],[64,4,78,2],[64,8,78,6],[64,9,78,7,"_finalized"],[64,19,78,17],[64,22,78,20],[64,26,78,24],[65,4,80,2],[65,8,80,6,"digest"],[65,14,80,12],[65,17,80,15],[65,21,80,19],[65,22,80,20,"_digest"],[65,29,80,27],[65,30,80,28],[65,31,80,29],[66,4,81,2],[66,8,81,6,"encoding"],[66,16,81,14],[66,21,81,19,"undefined"],[66,30,81,28],[66,32,81,30,"digest"],[66,38,81,36],[66,41,81,39,"digest"],[66,47,81,45],[66,48,81,46,"toString"],[66,56,81,54],[66,57,81,55,"encoding"],[66,65,81,63],[66,66,81,64],[68,4,83,2],[69,4,84,2],[69,8,84,6],[69,9,84,7,"_block"],[69,15,84,13],[69,16,84,14,"fill"],[69,20,84,18],[69,21,84,19],[69,22,84,20],[69,23,84,21],[70,4,85,2],[70,8,85,6],[70,9,85,7,"_blockOffset"],[70,21,85,19],[70,24,85,22],[70,25,85,23],[71,4,86,2],[71,9,86,7],[71,13,86,11,"i"],[71,14,86,12],[71,17,86,15],[71,18,86,16],[71,20,86,18,"i"],[71,21,86,19],[71,24,86,22],[71,25,86,23],[71,27,86,25],[71,29,86,27,"i"],[71,30,86,28],[71,32,86,30],[71,36,86,34],[71,37,86,35,"_length"],[71,44,86,42],[71,45,86,43,"i"],[71,46,86,44],[71,47,86,45],[71,50,86,48],[71,51,86,49],[72,4,88,2],[72,11,88,9,"digest"],[72,17,88,15],[73,2,89,0],[73,3,89,1],[74,2,91,0,"HashBase"],[74,10,91,8],[74,11,91,9,"prototype"],[74,20,91,18],[74,21,91,19,"_digest"],[74,28,91,26],[74,31,91,29],[74,43,91,41],[75,4,92,2],[75,10,92,8],[75,14,92,12,"Error"],[75,19,92,17],[75,20,92,18],[75,48,92,46],[75,49,92,47],[76,2,93,0],[76,3,93,1],[77,2,95,0,"module"],[77,8,95,6],[77,9,95,7,"exports"],[77,16,95,14],[77,19,95,17,"HashBase"],[77,27,95,25],[78,0,95,25],[78,3]],"functionMap":{"names":["<global>","throwIfNotStringOrBuffer","HashBase","HashBase.prototype._transform","HashBase.prototype._flush","HashBase.prototype.update","HashBase.prototype._update","HashBase.prototype.digest","HashBase.prototype._digest"],"mappings":"AAA;ACK;CDI;AEE;CFS;gCGI;CHS;4BIE;CJS;4BKE;CLuB;6BME;CNE;4BOE;CPa;6BQE;CRE"}},"type":"js/module"}]}