{"dependencies":[{"name":"./util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":11,"index":219},"end":{"line":8,"column":28,"index":236}},{"start":{"line":8,"column":11,"index":219},"end":{"line":8,"column":28,"index":236}}],"key":"hA8WsniBZrUJ/dmBZgrNdZcEmJ8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /* -*- Mode: js; js-indent-level: 2; -*- */\n  /*\n   * Copyright 2014 Mozilla Foundation and contributors\n   * Licensed under the New BSD license. See LICENSE or:\n   * http://opensource.org/licenses/BSD-3-Clause\n   */\n\n  /**\n   * Determine whether mappingB is after mappingA with respect to generated\n   * position.\n   */\n  function generatedPositionAfter(mappingA, mappingB) {\n    // Optimized for most common case\n    var lineA = mappingA.generatedLine;\n    var lineB = mappingB.generatedLine;\n    var columnA = mappingA.generatedColumn;\n    var columnB = mappingB.generatedColumn;\n    return lineB > lineA || lineB == lineA && columnB >= columnA || _$$_REQUIRE(_dependencyMap[0], \"./util\").compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n  }\n\n  /**\n   * A data structure to provide a sorted view of accumulated mappings in a\n   * performance conscious manner. It trades a neglibable overhead in general\n   * case for a large speedup in case of mappings being added in order.\n   */\n  function MappingList() {\n    this._array = [];\n    this._sorted = true;\n    // Serves as infimum\n    this._last = {\n      generatedLine: -1,\n      generatedColumn: 0\n    };\n  }\n\n  /**\n   * Iterate through internal items. This method takes the same arguments that\n   * `Array.prototype.forEach` takes.\n   *\n   * NOTE: The order of the mappings is NOT guaranteed.\n   */\n  MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  };\n\n  /**\n   * Add the given source mapping.\n   *\n   * @param Object aMapping\n   */\n  MappingList.prototype.add = function MappingList_add(aMapping) {\n    if (generatedPositionAfter(this._last, aMapping)) {\n      this._last = aMapping;\n      this._array.push(aMapping);\n    } else {\n      this._sorted = false;\n      this._array.push(aMapping);\n    }\n  };\n\n  /**\n   * Returns the flat, sorted array of mappings. The mappings are sorted by\n   * generated position.\n   *\n   * WARNING: This method returns internal data without copying, for\n   * performance. The return value must NOT be mutated, and should be treated as\n   * an immutable borrow. If you want to take ownership, you must make your own\n   * copy.\n   */\n  MappingList.prototype.toArray = function MappingList_toArray() {\n    if (!this._sorted) {\n      this._array.sort(_$$_REQUIRE(_dependencyMap[0], \"./util\").compareByGeneratedPositionsInflated);\n      this._sorted = true;\n    }\n    return this._array;\n  };\n  exports.MappingList = MappingList;\n});","lineCount":79,"map":[[2,2,1,0],[3,2,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[9,2,10,0],[10,0,11,0],[11,0,12,0],[12,0,13,0],[13,2,14,0],[13,11,14,9,"generatedPositionAfter"],[13,33,14,31,"generatedPositionAfter"],[13,34,14,32,"mappingA"],[13,42,14,40],[13,44,14,42,"mappingB"],[13,52,14,50],[13,54,14,52],[14,4,15,2],[15,4,16,2],[15,8,16,6,"lineA"],[15,13,16,11],[15,16,16,14,"mappingA"],[15,24,16,22],[15,25,16,23,"generatedLine"],[15,38,16,36],[16,4,17,2],[16,8,17,6,"lineB"],[16,13,17,11],[16,16,17,14,"mappingB"],[16,24,17,22],[16,25,17,23,"generatedLine"],[16,38,17,36],[17,4,18,2],[17,8,18,6,"columnA"],[17,15,18,13],[17,18,18,16,"mappingA"],[17,26,18,24],[17,27,18,25,"generatedColumn"],[17,42,18,40],[18,4,19,2],[18,8,19,6,"columnB"],[18,15,19,13],[18,18,19,16,"mappingB"],[18,26,19,24],[18,27,19,25,"generatedColumn"],[18,42,19,40],[19,4,20,2],[19,11,20,9,"lineB"],[19,16,20,14],[19,19,20,17,"lineA"],[19,24,20,22],[19,28,20,26,"lineB"],[19,33,20,31],[19,37,20,35,"lineA"],[19,42,20,40],[19,46,20,44,"columnB"],[19,53,20,51],[19,57,20,55,"columnA"],[19,64,20,62],[19,68,21,9,"_$$_REQUIRE"],[19,79,21,9],[19,80,21,9,"_dependencyMap"],[19,94,21,9],[19,109,21,14,"compareByGeneratedPositionsInflated"],[19,144,21,49],[19,145,21,50,"mappingA"],[19,153,21,58],[19,155,21,60,"mappingB"],[19,163,21,68],[19,164,21,69],[19,168,21,73],[19,169,21,74],[20,2,22,0],[22,2,24,0],[23,0,25,0],[24,0,26,0],[25,0,27,0],[26,0,28,0],[27,2,29,0],[27,11,29,9,"MappingList"],[27,22,29,20,"MappingList"],[27,23,29,20],[27,25,29,23],[28,4,30,2],[28,8,30,6],[28,9,30,7,"_array"],[28,15,30,13],[28,18,30,16],[28,20,30,18],[29,4,31,2],[29,8,31,6],[29,9,31,7,"_sorted"],[29,16,31,14],[29,19,31,17],[29,23,31,21],[30,4,32,2],[31,4,33,2],[31,8,33,6],[31,9,33,7,"_last"],[31,14,33,12],[31,17,33,15],[32,6,33,16,"generatedLine"],[32,19,33,29],[32,21,33,31],[32,22,33,32],[32,23,33,33],[33,6,33,35,"generatedColumn"],[33,21,33,50],[33,23,33,52],[34,4,33,53],[34,5,33,54],[35,2,34,0],[37,2,36,0],[38,0,37,0],[39,0,38,0],[40,0,39,0],[41,0,40,0],[42,0,41,0],[43,2,42,0,"MappingList"],[43,13,42,11],[43,14,42,12,"prototype"],[43,23,42,21],[43,24,42,22,"unsortedForEach"],[43,39,42,37],[43,42,43,2],[43,51,43,11,"MappingList_forEach"],[43,70,43,30,"MappingList_forEach"],[43,71,43,31,"aCallback"],[43,80,43,40],[43,82,43,42,"aThisArg"],[43,90,43,50],[43,92,43,52],[44,4,44,4],[44,8,44,8],[44,9,44,9,"_array"],[44,15,44,15],[44,16,44,16,"forEach"],[44,23,44,23],[44,24,44,24,"aCallback"],[44,33,44,33],[44,35,44,35,"aThisArg"],[44,43,44,43],[44,44,44,44],[45,2,45,2],[45,3,45,3],[47,2,47,0],[48,0,48,0],[49,0,49,0],[50,0,50,0],[51,0,51,0],[52,2,52,0,"MappingList"],[52,13,52,11],[52,14,52,12,"prototype"],[52,23,52,21],[52,24,52,22,"add"],[52,27,52,25],[52,30,52,28],[52,39,52,37,"MappingList_add"],[52,54,52,52,"MappingList_add"],[52,55,52,53,"aMapping"],[52,63,52,61],[52,65,52,63],[53,4,53,2],[53,8,53,6,"generatedPositionAfter"],[53,30,53,28],[53,31,53,29],[53,35,53,33],[53,36,53,34,"_last"],[53,41,53,39],[53,43,53,41,"aMapping"],[53,51,53,49],[53,52,53,50],[53,54,53,52],[54,6,54,4],[54,10,54,8],[54,11,54,9,"_last"],[54,16,54,14],[54,19,54,17,"aMapping"],[54,27,54,25],[55,6,55,4],[55,10,55,8],[55,11,55,9,"_array"],[55,17,55,15],[55,18,55,16,"push"],[55,22,55,20],[55,23,55,21,"aMapping"],[55,31,55,29],[55,32,55,30],[56,4,56,2],[56,5,56,3],[56,11,56,9],[57,6,57,4],[57,10,57,8],[57,11,57,9,"_sorted"],[57,18,57,16],[57,21,57,19],[57,26,57,24],[58,6,58,4],[58,10,58,8],[58,11,58,9,"_array"],[58,17,58,15],[58,18,58,16,"push"],[58,22,58,20],[58,23,58,21,"aMapping"],[58,31,58,29],[58,32,58,30],[59,4,59,2],[60,2,60,0],[60,3,60,1],[62,2,62,0],[63,0,63,0],[64,0,64,0],[65,0,65,0],[66,0,66,0],[67,0,67,0],[68,0,68,0],[69,0,69,0],[70,0,70,0],[71,2,71,0,"MappingList"],[71,13,71,11],[71,14,71,12,"prototype"],[71,23,71,21],[71,24,71,22,"toArray"],[71,31,71,29],[71,34,71,32],[71,43,71,41,"MappingList_toArray"],[71,62,71,60,"MappingList_toArray"],[71,63,71,60],[71,65,71,63],[72,4,72,2],[72,8,72,6],[72,9,72,7],[72,13,72,11],[72,14,72,12,"_sorted"],[72,21,72,19],[72,23,72,21],[73,6,73,4],[73,10,73,8],[73,11,73,9,"_array"],[73,17,73,15],[73,18,73,16,"sort"],[73,22,73,20],[73,23,73,21,"_$$_REQUIRE"],[73,34,73,21],[73,35,73,21,"_dependencyMap"],[73,49,73,21],[73,64,73,26,"compareByGeneratedPositionsInflated"],[73,99,73,61],[73,100,73,62],[74,6,74,4],[74,10,74,8],[74,11,74,9,"_sorted"],[74,18,74,16],[74,21,74,19],[74,25,74,23],[75,4,75,2],[76,4,76,2],[76,11,76,9],[76,15,76,13],[76,16,76,14,"_array"],[76,22,76,20],[77,2,77,0],[77,3,77,1],[78,2,79,0,"exports"],[78,9,79,7],[78,10,79,8,"MappingList"],[78,21,79,19],[78,24,79,22,"MappingList"],[78,35,79,33],[79,0,79,34],[79,3]],"functionMap":{"names":["<global>","generatedPositionAfter","MappingList","MappingList_forEach","MappingList_add","MappingList_toArray"],"mappings":"AAA;ACa;CDQ;AEO;CFK;EGS;GHE;4BIO;CJQ;gCKW;CLM"}},"type":"js/module"}]}