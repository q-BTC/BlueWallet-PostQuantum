{"dependencies":[{"name":"bc-bech32","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":18,"index":228},"end":{"line":6,"column":38,"index":248}},{"start":{"line":6,"column":18,"index":228},"end":{"line":6,"column":38,"index":248}},{"start":{"line":6,"column":18,"index":228},"end":{"line":6,"column":38,"index":248}}],"key":"1IA0Ib80ijcSCTvmq3bv7FxoDPw="}},{"name":"./utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":14,"index":150},"end":{"line":4,"column":32,"index":168}}],"key":"Arg6QRuIuy5D/jfcnxX1qJiHjX8="}},{"name":"./miniCbor","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":17,"index":187},"end":{"line":5,"column":38,"index":208}}],"key":"JMZpWZg45onUIwuHobM8i3qagqs="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.extractSingleWorkload = exports.decodeUR = void 0;\n  var checkAndGetSequence = function checkAndGetSequence(sequence) {\n    var pieces = sequence.toUpperCase().split('OF');\n    if (pieces.length !== 2) throw new Error(\"invalid sequence: \" + sequence);\n    var index = pieces[0],\n      total = pieces[1];\n    return [+index, +total];\n  };\n  var checkDigest = function checkDigest(digest, payload) {\n    if (_$$_REQUIRE(_dependencyMap[0], \"bc-bech32\").decodeBc32Data(digest) !== _$$_REQUIRE(_dependencyMap[1], \"./utils\").sha256Hash(Buffer.from(_$$_REQUIRE(_dependencyMap[0], \"bc-bech32\").decodeBc32Data(payload), 'hex')).toString('hex')) {\n      throw new Error(\"invalid digest: \\n digest:\" + digest + \" \\n payload:\" + payload);\n    }\n  };\n  var checkURHeader = function checkURHeader(UR, type) {\n    if (type === void 0) {\n      type = 'bytes';\n    }\n    if (UR.toUpperCase() !== (\"ur:\" + type).toUpperCase()) throw new Error(\"invalid UR header: \" + UR);\n  };\n  var dealWithSingleWorkload = function dealWithSingleWorkload(workload, type) {\n    if (type === void 0) {\n      type = 'bytes';\n    }\n    var pieces = workload.split('/');\n    switch (pieces.length) {\n      case 2:\n        {\n          //UR:Type/[Fragment]\n          checkURHeader(pieces[0], type);\n          return pieces[1];\n        }\n      case 3:\n        {\n          //UR:Type/[Digest]/[Fragment] when Sequencing is omitted, Digest MAY be omitted;\n          //should check digest\n          checkURHeader(pieces[0], type);\n          var digest = pieces[1];\n          var fragment = pieces[2];\n          checkDigest(digest, fragment);\n          return fragment;\n        }\n      case 4:\n        {\n          //UR:Type/[Sequencing]/[Digest]/[Fragment]\n          //should check sequencing and digest\n          checkURHeader(pieces[0], type);\n          checkAndGetSequence(pieces[1]);\n          var digest = pieces[2];\n          var fragment = pieces[3];\n          checkDigest(digest, fragment);\n          return fragment;\n        }\n      default:\n        throw new Error(\"invalid workload pieces length: expect 2 / 3 / 4 bug got \" + pieces.length);\n    }\n  };\n  var dealWithMultipleWorkloads = function dealWithMultipleWorkloads(workloads, type) {\n    if (type === void 0) {\n      type = 'bytes';\n    }\n    var length = workloads.length;\n    var fragments = new Array(length).fill('');\n    var digest = '';\n    workloads.forEach(function (workload) {\n      var pieces = workload.split('/');\n      checkURHeader(pieces[0], type);\n      var _a = checkAndGetSequence(pieces[1]),\n        index = _a[0],\n        total = _a[1];\n      if (total !== length) throw new Error(\"invalid workload: \" + workload + \", total \" + total + \" not equal workloads length \" + length);\n      if (digest && digest !== pieces[2]) throw new Error(\"invalid workload: \" + workload + \", checksum changed \" + digest + \", \" + pieces[2]);\n      digest = pieces[2];\n      if (fragments[index - 1]) throw new Error(\"invalid workload: \" + workload + \", index \" + index + \" has already been set\");\n      fragments[index - 1] = pieces[3];\n    });\n    var payload = fragments.join('');\n    checkDigest(digest, payload);\n    return payload;\n  };\n  var getBC32Payload = function getBC32Payload(workloads, type) {\n    if (type === void 0) {\n      type = 'bytes';\n    }\n    try {\n      var length_1 = workloads.length;\n      if (length_1 === 1) {\n        return dealWithSingleWorkload(workloads[0], type);\n      } else {\n        return dealWithMultipleWorkloads(workloads, type);\n      }\n    } catch (e) {\n      throw new Error(\"invalid workloads: \" + workloads + \"\\n \" + e);\n    }\n  };\n  exports.decodeUR = function (workloads, type) {\n    if (type === void 0) {\n      type = 'bytes';\n    }\n    var bc32Payload = getBC32Payload(workloads, type);\n    var cborPayload = _$$_REQUIRE(_dependencyMap[0], \"bc-bech32\").decodeBc32Data(bc32Payload);\n    return _$$_REQUIRE(_dependencyMap[2], \"./miniCbor\").decodeSimpleCBOR(cborPayload);\n  };\n  exports.extractSingleWorkload = function (workload) {\n    var pieces = workload.toUpperCase().split('/');\n    switch (pieces.length) {\n      case 2: //UR:Type/[Fragment]\n      case 3:\n        {\n          //UR:Type/[Digest]/[Fragment] when Sequencing is omitted, Digest MAY be omitted;\n          return [1, 1];\n        }\n      case 4:\n        {\n          //UR:Type/[Sequencing]/[Digest]/[Fragment]\n          return checkAndGetSequence(pieces[1]);\n        }\n      default:\n        throw new Error(\"invalid workload pieces length: expect 2 / 3 / 4 bug got \" + pieces.length);\n    }\n  };\n});","lineCount":127,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"extractSingleWorkload"],[7,31,3,29],[7,34,3,32,"exports"],[7,41,3,39],[7,42,3,40,"decodeUR"],[7,50,3,48],[7,53,3,51],[7,58,3,56],[7,59,3,57],[8,2,7,0],[8,6,7,4,"checkAndGetSequence"],[8,25,7,23],[8,28,7,26],[8,37,7,4,"checkAndGetSequence"],[8,56,7,23,"checkAndGetSequence"],[8,57,7,36,"sequence"],[8,65,7,44],[8,67,7,46],[9,4,8,4],[9,8,8,8,"pieces"],[9,14,8,14],[9,17,8,17,"sequence"],[9,25,8,25],[9,26,8,26,"toUpperCase"],[9,37,8,37],[9,38,8,38],[9,39,8,39],[9,40,8,40,"split"],[9,45,8,45],[9,46,8,46],[9,50,8,50],[9,51,8,51],[10,4,9,4],[10,8,9,8,"pieces"],[10,14,9,14],[10,15,9,15,"length"],[10,21,9,21],[10,26,9,26],[10,27,9,27],[10,29,10,8],[10,35,10,14],[10,39,10,18,"Error"],[10,44,10,23],[10,45,10,24],[10,65,10,44],[10,68,10,47,"sequence"],[10,76,10,55],[10,77,10,56],[11,4,11,4],[11,8,11,8,"index"],[11,13,11,13],[11,16,11,16,"pieces"],[11,22,11,22],[11,23,11,23],[11,24,11,24],[11,25,11,25],[12,6,11,27,"total"],[12,11,11,32],[12,14,11,35,"pieces"],[12,20,11,41],[12,21,11,42],[12,22,11,43],[12,23,11,44],[13,4,12,4],[13,11,12,11],[13,12,12,12],[13,13,12,13,"index"],[13,18,12,18],[13,20,12,20],[13,21,12,21,"total"],[13,26,12,26],[13,27,12,27],[14,2,13,0],[14,3,13,1],[15,2,14,0],[15,6,14,4,"checkDigest"],[15,17,14,15],[15,20,14,18],[15,29,14,4,"checkDigest"],[15,40,14,15,"checkDigest"],[15,41,14,28,"digest"],[15,47,14,34],[15,49,14,36,"payload"],[15,56,14,43],[15,58,14,45],[16,4,15,4],[16,8,15,8,"_$$_REQUIRE"],[16,19,15,8],[16,20,15,8,"_dependencyMap"],[16,34,15,8],[16,52,15,20,"decodeBc32Data"],[16,66,15,34],[16,67,15,35,"digest"],[16,73,15,41],[16,74,15,42],[16,79,15,47,"_$$_REQUIRE"],[16,90,15,47],[16,91,15,47,"_dependencyMap"],[16,105,15,47],[16,121,15,55,"sha256Hash"],[16,131,15,65],[16,132,15,66,"Buffer"],[16,138,15,72],[16,139,15,73,"from"],[16,143,15,77],[16,144,15,78,"_$$_REQUIRE"],[16,155,15,78],[16,156,15,78,"_dependencyMap"],[16,170,15,78],[16,188,15,90,"decodeBc32Data"],[16,202,15,104],[16,203,15,105,"payload"],[16,210,15,112],[16,211,15,113],[16,213,15,115],[16,218,15,120],[16,219,15,121],[16,220,15,122],[16,221,15,123,"toString"],[16,229,15,131],[16,230,15,132],[16,235,15,137],[16,236,15,138],[16,238,15,140],[17,6,16,8],[17,12,16,14],[17,16,16,18,"Error"],[17,21,16,23],[17,22,16,24],[17,50,16,52],[17,53,16,55,"digest"],[17,59,16,61],[17,62,16,64],[17,76,16,78],[17,79,16,81,"payload"],[17,86,16,88],[17,87,16,89],[18,4,17,4],[19,2,18,0],[19,3,18,1],[20,2,19,0],[20,6,19,4,"checkURHeader"],[20,19,19,17],[20,22,19,20],[20,31,19,4,"checkURHeader"],[20,44,19,17,"checkURHeader"],[20,45,19,30,"UR"],[20,47,19,32],[20,49,19,34,"type"],[20,53,19,38],[20,55,19,40],[21,4,20,4],[21,8,20,8,"type"],[21,12,20,12],[21,17,20,17],[21,22,20,22],[21,23,20,23],[21,25,20,25],[22,6,20,27,"type"],[22,10,20,31],[22,13,20,34],[22,20,20,41],[23,4,20,43],[24,4,21,4],[24,8,21,8,"UR"],[24,10,21,10],[24,11,21,11,"toUpperCase"],[24,22,21,22],[24,23,21,23],[24,24,21,24],[24,29,21,29],[24,30,21,30],[24,35,21,35],[24,38,21,38,"type"],[24,42,21,42],[24,44,21,44,"toUpperCase"],[24,55,21,55],[24,56,21,56],[24,57,21,57],[24,59,22,8],[24,65,22,14],[24,69,22,18,"Error"],[24,74,22,23],[24,75,22,24],[24,96,22,45],[24,99,22,48,"UR"],[24,101,22,50],[24,102,22,51],[25,2,23,0],[25,3,23,1],[26,2,24,0],[26,6,24,4,"dealWithSingleWorkload"],[26,28,24,26],[26,31,24,29],[26,40,24,4,"dealWithSingleWorkload"],[26,62,24,26,"dealWithSingleWorkload"],[26,63,24,39,"workload"],[26,71,24,47],[26,73,24,49,"type"],[26,77,24,53],[26,79,24,55],[27,4,25,4],[27,8,25,8,"type"],[27,12,25,12],[27,17,25,17],[27,22,25,22],[27,23,25,23],[27,25,25,25],[28,6,25,27,"type"],[28,10,25,31],[28,13,25,34],[28,20,25,41],[29,4,25,43],[30,4,26,4],[30,8,26,8,"pieces"],[30,14,26,14],[30,17,26,17,"workload"],[30,25,26,25],[30,26,26,26,"split"],[30,31,26,31],[30,32,26,32],[30,35,26,35],[30,36,26,36],[31,4,27,4],[31,12,27,12,"pieces"],[31,18,27,18],[31,19,27,19,"length"],[31,25,27,25],[32,6,28,8],[32,11,28,13],[32,12,28,14],[33,8,28,16],[34,10,29,12],[35,10,30,12,"checkURHeader"],[35,23,30,25],[35,24,30,26,"pieces"],[35,30,30,32],[35,31,30,33],[35,32,30,34],[35,33,30,35],[35,35,30,37,"type"],[35,39,30,41],[35,40,30,42],[36,10,31,12],[36,17,31,19,"pieces"],[36,23,31,25],[36,24,31,26],[36,25,31,27],[36,26,31,28],[37,8,32,8],[38,6,33,8],[38,11,33,13],[38,12,33,14],[39,8,33,16],[40,10,34,12],[41,10,35,12],[42,10,36,12,"checkURHeader"],[42,23,36,25],[42,24,36,26,"pieces"],[42,30,36,32],[42,31,36,33],[42,32,36,34],[42,33,36,35],[42,35,36,37,"type"],[42,39,36,41],[42,40,36,42],[43,10,37,12],[43,14,37,16,"digest"],[43,20,37,22],[43,23,37,25,"pieces"],[43,29,37,31],[43,30,37,32],[43,31,37,33],[43,32,37,34],[44,10,38,12],[44,14,38,16,"fragment"],[44,22,38,24],[44,25,38,27,"pieces"],[44,31,38,33],[44,32,38,34],[44,33,38,35],[44,34,38,36],[45,10,39,12,"checkDigest"],[45,21,39,23],[45,22,39,24,"digest"],[45,28,39,30],[45,30,39,32,"fragment"],[45,38,39,40],[45,39,39,41],[46,10,40,12],[46,17,40,19,"fragment"],[46,25,40,27],[47,8,41,8],[48,6,42,8],[48,11,42,13],[48,12,42,14],[49,8,42,16],[50,10,43,12],[51,10,44,12],[52,10,45,12,"checkURHeader"],[52,23,45,25],[52,24,45,26,"pieces"],[52,30,45,32],[52,31,45,33],[52,32,45,34],[52,33,45,35],[52,35,45,37,"type"],[52,39,45,41],[52,40,45,42],[53,10,46,12,"checkAndGetSequence"],[53,29,46,31],[53,30,46,32,"pieces"],[53,36,46,38],[53,37,46,39],[53,38,46,40],[53,39,46,41],[53,40,46,42],[54,10,47,12],[54,14,47,16,"digest"],[54,20,47,22],[54,23,47,25,"pieces"],[54,29,47,31],[54,30,47,32],[54,31,47,33],[54,32,47,34],[55,10,48,12],[55,14,48,16,"fragment"],[55,22,48,24],[55,25,48,27,"pieces"],[55,31,48,33],[55,32,48,34],[55,33,48,35],[55,34,48,36],[56,10,49,12,"checkDigest"],[56,21,49,23],[56,22,49,24,"digest"],[56,28,49,30],[56,30,49,32,"fragment"],[56,38,49,40],[56,39,49,41],[57,10,50,12],[57,17,50,19,"fragment"],[57,25,50,27],[58,8,51,8],[59,6,52,8],[60,8,53,12],[60,14,53,18],[60,18,53,22,"Error"],[60,23,53,27],[60,24,53,28],[60,83,53,87],[60,86,53,90,"pieces"],[60,92,53,96],[60,93,53,97,"length"],[60,99,53,103],[60,100,53,104],[61,4,54,4],[62,2,55,0],[62,3,55,1],[63,2,56,0],[63,6,56,4,"dealWithMultipleWorkloads"],[63,31,56,29],[63,34,56,32],[63,43,56,4,"dealWithMultipleWorkloads"],[63,68,56,29,"dealWithMultipleWorkloads"],[63,69,56,42,"workloads"],[63,78,56,51],[63,80,56,53,"type"],[63,84,56,57],[63,86,56,59],[64,4,57,4],[64,8,57,8,"type"],[64,12,57,12],[64,17,57,17],[64,22,57,22],[64,23,57,23],[64,25,57,25],[65,6,57,27,"type"],[65,10,57,31],[65,13,57,34],[65,20,57,41],[66,4,57,43],[67,4,58,4],[67,8,58,8,"length"],[67,14,58,14],[67,17,58,17,"workloads"],[67,26,58,26],[67,27,58,27,"length"],[67,33,58,33],[68,4,59,4],[68,8,59,8,"fragments"],[68,17,59,17],[68,20,59,20],[68,24,59,24,"Array"],[68,29,59,29],[68,30,59,30,"length"],[68,36,59,36],[68,37,59,37],[68,38,59,38,"fill"],[68,42,59,42],[68,43,59,43],[68,45,59,45],[68,46,59,46],[69,4,60,4],[69,8,60,8,"digest"],[69,14,60,14],[69,17,60,17],[69,19,60,19],[70,4,61,4,"workloads"],[70,13,61,13],[70,14,61,14,"forEach"],[70,21,61,21],[70,22,61,22],[70,32,61,32,"workload"],[70,40,61,40],[70,42,61,42],[71,6,62,8],[71,10,62,12,"pieces"],[71,16,62,18],[71,19,62,21,"workload"],[71,27,62,29],[71,28,62,30,"split"],[71,33,62,35],[71,34,62,36],[71,37,62,39],[71,38,62,40],[72,6,63,8,"checkURHeader"],[72,19,63,21],[72,20,63,22,"pieces"],[72,26,63,28],[72,27,63,29],[72,28,63,30],[72,29,63,31],[72,31,63,33,"type"],[72,35,63,37],[72,36,63,38],[73,6,64,8],[73,10,64,12,"_a"],[73,12,64,14],[73,15,64,17,"checkAndGetSequence"],[73,34,64,36],[73,35,64,37,"pieces"],[73,41,64,43],[73,42,64,44],[73,43,64,45],[73,44,64,46],[73,45,64,47],[74,8,64,49,"index"],[74,13,64,54],[74,16,64,57,"_a"],[74,18,64,59],[74,19,64,60],[74,20,64,61],[74,21,64,62],[75,8,64,64,"total"],[75,13,64,69],[75,16,64,72,"_a"],[75,18,64,74],[75,19,64,75],[75,20,64,76],[75,21,64,77],[76,6,65,8],[76,10,65,12,"total"],[76,15,65,17],[76,20,65,22,"length"],[76,26,65,28],[76,28,66,12],[76,34,66,18],[76,38,66,22,"Error"],[76,43,66,27],[76,44,66,28],[76,64,66,48],[76,67,66,51,"workload"],[76,75,66,59],[76,78,66,62],[76,88,66,72],[76,91,66,75,"total"],[76,96,66,80],[76,99,66,83],[76,129,66,113],[76,132,66,116,"length"],[76,138,66,122],[76,139,66,123],[77,6,67,8],[77,10,67,12,"digest"],[77,16,67,18],[77,20,67,22,"digest"],[77,26,67,28],[77,31,67,33,"pieces"],[77,37,67,39],[77,38,67,40],[77,39,67,41],[77,40,67,42],[77,42,68,12],[77,48,68,18],[77,52,68,22,"Error"],[77,57,68,27],[77,58,68,28],[77,78,68,48],[77,81,68,51,"workload"],[77,89,68,59],[77,92,68,62],[77,113,68,83],[77,116,68,86,"digest"],[77,122,68,92],[77,125,68,95],[77,129,68,99],[77,132,68,102,"pieces"],[77,138,68,108],[77,139,68,109],[77,140,68,110],[77,141,68,111],[77,142,68,112],[78,6,69,8,"digest"],[78,12,69,14],[78,15,69,17,"pieces"],[78,21,69,23],[78,22,69,24],[78,23,69,25],[78,24,69,26],[79,6,70,8],[79,10,70,12,"fragments"],[79,19,70,21],[79,20,70,22,"index"],[79,25,70,27],[79,28,70,30],[79,29,70,31],[79,30,70,32],[79,32,71,12],[79,38,71,18],[79,42,71,22,"Error"],[79,47,71,27],[79,48,71,28],[79,68,71,48],[79,71,71,51,"workload"],[79,79,71,59],[79,82,71,62],[79,92,71,72],[79,95,71,75,"index"],[79,100,71,80],[79,103,71,83],[79,126,71,106],[79,127,71,107],[80,6,72,8,"fragments"],[80,15,72,17],[80,16,72,18,"index"],[80,21,72,23],[80,24,72,26],[80,25,72,27],[80,26,72,28],[80,29,72,31,"pieces"],[80,35,72,37],[80,36,72,38],[80,37,72,39],[80,38,72,40],[81,4,73,4],[81,5,73,5],[81,6,73,6],[82,4,74,4],[82,8,74,8,"payload"],[82,15,74,15],[82,18,74,18,"fragments"],[82,27,74,27],[82,28,74,28,"join"],[82,32,74,32],[82,33,74,33],[82,35,74,35],[82,36,74,36],[83,4,75,4,"checkDigest"],[83,15,75,15],[83,16,75,16,"digest"],[83,22,75,22],[83,24,75,24,"payload"],[83,31,75,31],[83,32,75,32],[84,4,76,4],[84,11,76,11,"payload"],[84,18,76,18],[85,2,77,0],[85,3,77,1],[86,2,78,0],[86,6,78,4,"getBC32Payload"],[86,20,78,18],[86,23,78,21],[86,32,78,4,"getBC32Payload"],[86,46,78,18,"getBC32Payload"],[86,47,78,31,"workloads"],[86,56,78,40],[86,58,78,42,"type"],[86,62,78,46],[86,64,78,48],[87,4,79,4],[87,8,79,8,"type"],[87,12,79,12],[87,17,79,17],[87,22,79,22],[87,23,79,23],[87,25,79,25],[88,6,79,27,"type"],[88,10,79,31],[88,13,79,34],[88,20,79,41],[89,4,79,43],[90,4,80,4],[90,8,80,8],[91,6,81,8],[91,10,81,12,"length_1"],[91,18,81,20],[91,21,81,23,"workloads"],[91,30,81,32],[91,31,81,33,"length"],[91,37,81,39],[92,6,82,8],[92,10,82,12,"length_1"],[92,18,82,20],[92,23,82,25],[92,24,82,26],[92,26,82,28],[93,8,83,12],[93,15,83,19,"dealWithSingleWorkload"],[93,37,83,41],[93,38,83,42,"workloads"],[93,47,83,51],[93,48,83,52],[93,49,83,53],[93,50,83,54],[93,52,83,56,"type"],[93,56,83,60],[93,57,83,61],[94,6,84,8],[94,7,84,9],[94,13,85,13],[95,8,86,12],[95,15,86,19,"dealWithMultipleWorkloads"],[95,40,86,44],[95,41,86,45,"workloads"],[95,50,86,54],[95,52,86,56,"type"],[95,56,86,60],[95,57,86,61],[96,6,87,8],[97,4,88,4],[97,5,88,5],[97,6,89,4],[97,13,89,11,"e"],[97,14,89,12],[97,16,89,14],[98,6,90,8],[98,12,90,14],[98,16,90,18,"Error"],[98,21,90,23],[98,22,90,24],[98,43,90,45],[98,46,90,48,"workloads"],[98,55,90,57],[98,58,90,60],[98,63,90,65],[98,66,90,68,"e"],[98,67,90,69],[98,68,90,70],[99,4,91,4],[100,2,92,0],[100,3,92,1],[101,2,93,0,"exports"],[101,9,93,7],[101,10,93,8,"decodeUR"],[101,18,93,16],[101,21,93,19],[101,31,93,29,"workloads"],[101,40,93,38],[101,42,93,40,"type"],[101,46,93,44],[101,48,93,46],[102,4,94,4],[102,8,94,8,"type"],[102,12,94,12],[102,17,94,17],[102,22,94,22],[102,23,94,23],[102,25,94,25],[103,6,94,27,"type"],[103,10,94,31],[103,13,94,34],[103,20,94,41],[104,4,94,43],[105,4,95,4],[105,8,95,8,"bc32Payload"],[105,19,95,19],[105,22,95,22,"getBC32Payload"],[105,36,95,36],[105,37,95,37,"workloads"],[105,46,95,46],[105,48,95,48,"type"],[105,52,95,52],[105,53,95,53],[106,4,96,4],[106,8,96,8,"cborPayload"],[106,19,96,19],[106,22,96,22,"_$$_REQUIRE"],[106,33,96,22],[106,34,96,22,"_dependencyMap"],[106,48,96,22],[106,66,96,34,"decodeBc32Data"],[106,80,96,48],[106,81,96,49,"bc32Payload"],[106,92,96,60],[106,93,96,61],[107,4,97,4],[107,11,97,11,"_$$_REQUIRE"],[107,22,97,11],[107,23,97,11,"_dependencyMap"],[107,37,97,11],[107,56,97,22,"decodeSimpleCBOR"],[107,72,97,38],[107,73,97,39,"cborPayload"],[107,84,97,50],[107,85,97,51],[108,2,98,0],[108,3,98,1],[109,2,99,0,"exports"],[109,9,99,7],[109,10,99,8,"extractSingleWorkload"],[109,31,99,29],[109,34,99,32],[109,44,99,42,"workload"],[109,52,99,50],[109,54,99,52],[110,4,100,4],[110,8,100,8,"pieces"],[110,14,100,14],[110,17,100,17,"workload"],[110,25,100,25],[110,26,100,26,"toUpperCase"],[110,37,100,37],[110,38,100,38],[110,39,100,39],[110,40,100,40,"split"],[110,45,100,45],[110,46,100,46],[110,49,100,49],[110,50,100,50],[111,4,101,4],[111,12,101,12,"pieces"],[111,18,101,18],[111,19,101,19,"length"],[111,25,101,25],[112,6,102,8],[112,11,102,13],[112,12,102,14],[112,13,102,15],[112,14,102,16],[113,6,103,8],[113,11,103,13],[113,12,103,14],[114,8,103,16],[115,10,104,12],[116,10,105,12],[116,17,105,19],[116,18,105,20],[116,19,105,21],[116,21,105,23],[116,22,105,24],[116,23,105,25],[117,8,106,8],[118,6,107,8],[118,11,107,13],[118,12,107,14],[119,8,107,16],[120,10,108,12],[121,10,109,12],[121,17,109,19,"checkAndGetSequence"],[121,36,109,38],[121,37,109,39,"pieces"],[121,43,109,45],[121,44,109,46],[121,45,109,47],[121,46,109,48],[121,47,109,49],[122,8,110,8],[123,6,111,8],[124,8,112,12],[124,14,112,18],[124,18,112,22,"Error"],[124,23,112,27],[124,24,112,28],[124,83,112,87],[124,86,112,90,"pieces"],[124,92,112,96],[124,93,112,97,"length"],[124,99,112,103],[124,100,112,104],[125,4,113,4],[126,2,114,0],[126,3,114,1],[127,0,114,2],[127,3]],"functionMap":{"names":["<global>","checkAndGetSequence","checkDigest","checkURHeader","dealWithSingleWorkload","dealWithMultipleWorkloads","workloads.forEach$argument_0","getBC32Payload","exports.decodeUR","exports.extractSingleWorkload"],"mappings":"AAA;0BCM;CDM;kBEC;CFI;oBGC;CHI;6BIC;CJ+B;gCKC;sBCK;KDY;CLI;qBOC;CPc;mBQC;CRK;gCSC;CTe"}},"type":"js/module"}]}