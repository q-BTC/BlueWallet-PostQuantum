{"dependencies":[{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":354,"column":0,"index":14559}}],"key":"aU3Lrys8xTVpYSDJal2nhppojC8="}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":354,"column":0,"index":14559}}],"key":"4DwyfFXBA53CJWVTVj5w3kH1PUg="}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":354,"column":0,"index":14559}}],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":354,"column":0,"index":14559}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":354,"column":0,"index":14559}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"./testecc","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":18,"index":131},"end":{"line":4,"column":38,"index":151}}],"key":"dORyQ/C7BYoYjPPHdbo55FvGBLA="}},{"name":"typeforce","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":18,"index":211},"end":{"line":6,"column":38,"index":231}},{"start":{"line":6,"column":18,"index":211},"end":{"line":6,"column":38,"index":231}},{"start":{"line":6,"column":18,"index":211},"end":{"line":6,"column":38,"index":231}},{"start":{"line":6,"column":18,"index":211},"end":{"line":6,"column":38,"index":231}},{"start":{"line":6,"column":18,"index":211},"end":{"line":6,"column":38,"index":231}},{"start":{"line":6,"column":18,"index":211},"end":{"line":6,"column":38,"index":231}},{"start":{"line":6,"column":18,"index":211},"end":{"line":6,"column":38,"index":231}},{"start":{"line":6,"column":18,"index":211},"end":{"line":6,"column":38,"index":231}},{"start":{"line":6,"column":18,"index":211},"end":{"line":6,"column":38,"index":231}},{"start":{"line":6,"column":18,"index":211},"end":{"line":6,"column":38,"index":231}},{"start":{"line":6,"column":18,"index":211},"end":{"line":6,"column":38,"index":231}},{"start":{"line":6,"column":18,"index":211},"end":{"line":6,"column":38,"index":231}},{"start":{"line":6,"column":18,"index":211},"end":{"line":6,"column":38,"index":231}},{"start":{"line":6,"column":18,"index":211},"end":{"line":6,"column":38,"index":231}},{"start":{"line":6,"column":18,"index":211},"end":{"line":6,"column":38,"index":231}},{"start":{"line":6,"column":18,"index":211},"end":{"line":6,"column":38,"index":231}},{"start":{"line":6,"column":18,"index":211},"end":{"line":6,"column":38,"index":231}}],"key":"oCEA5RW0Ha+xwR9ueiGUwAxq7Z8="}},{"name":"./crypto","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":15,"index":92},"end":{"line":3,"column":34,"index":111}},{"start":{"line":3,"column":15,"index":92},"end":{"line":3,"column":34,"index":111}},{"start":{"line":3,"column":15,"index":92},"end":{"line":3,"column":34,"index":111}}],"key":"UlGPg8imq53Of+pf4vVtgObCfOQ="}},{"name":"bs58check","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":18,"index":171},"end":{"line":5,"column":38,"index":191}},{"start":{"line":5,"column":18,"index":171},"end":{"line":5,"column":38,"index":191}}],"key":"4OUKwPALIMTasKbVl6WljOsf4WA="}},{"name":"wif","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":12,"index":245},"end":{"line":7,"column":26,"index":259}}],"key":"hbkfH+nYuAPDRbyK09Y/qV9whEg="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/possibleConstructorReturn\");\n  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/getPrototypeOf\");\n  var _inherits = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/inherits\");\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/createClass\");\n  function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  function BIP32Factory(ecc) {\n    _$$_REQUIRE(_dependencyMap[5], \"./testecc\").testEcc(ecc);\n    var UINT256_TYPE = _$$_REQUIRE(_dependencyMap[6], \"typeforce\").BufferN(32);\n    var NETWORK_TYPE = _$$_REQUIRE(_dependencyMap[6], \"typeforce\").compile({\n      wif: _$$_REQUIRE(_dependencyMap[6], \"typeforce\").UInt8,\n      bip32: {\n        public: _$$_REQUIRE(_dependencyMap[6], \"typeforce\").UInt32,\n        private: _$$_REQUIRE(_dependencyMap[6], \"typeforce\").UInt32\n      }\n    });\n    var BITCOIN = {\n      messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n      bech32: 'bc',\n      bip32: {\n        public: 0x0488b21e,\n        private: 0x0488ade4\n      },\n      pubKeyHash: 0x00,\n      scriptHash: 0x05,\n      wif: 0x80\n    };\n    var HIGHEST_BIT = 0x80000000;\n    var UINT31_MAX = Math.pow(2, 31) - 1;\n    function BIP32Path(value) {\n      return _$$_REQUIRE(_dependencyMap[6], \"typeforce\").String(value) && value.match(/^(m\\/)?(\\d+'?\\/)*\\d+'?$/) !== null;\n    }\n    function UInt31(value) {\n      return _$$_REQUIRE(_dependencyMap[6], \"typeforce\").UInt32(value) && value <= UINT31_MAX;\n    }\n    function toXOnly(pubKey) {\n      return pubKey.length === 32 ? pubKey : pubKey.slice(1, 33);\n    }\n    var Bip32Signer = /*#__PURE__*/function () {\n      function Bip32Signer(__D, __Q) {\n        _classCallCheck(this, Bip32Signer);\n        this.__D = __D;\n        this.__Q = __Q;\n        this.lowR = false;\n      }\n      return _createClass(Bip32Signer, [{\n        key: \"publicKey\",\n        get: function get() {\n          if (this.__Q === undefined) this.__Q = Buffer.from(ecc.pointFromScalar(this.__D, true));\n          return this.__Q;\n        }\n      }, {\n        key: \"privateKey\",\n        get: function get() {\n          return this.__D;\n        }\n      }, {\n        key: \"sign\",\n        value: function sign(hash, lowR) {\n          if (!this.privateKey) throw new Error('Missing private key');\n          if (lowR === undefined) lowR = this.lowR;\n          if (lowR === false) {\n            return Buffer.from(ecc.sign(hash, this.privateKey));\n          } else {\n            var sig = Buffer.from(ecc.sign(hash, this.privateKey));\n            var extraData = Buffer.alloc(32, 0);\n            var counter = 0;\n            // if first try is lowR, skip the loop\n            // for second try and on, add extra entropy counting up\n            while (sig[0] > 0x7f) {\n              counter++;\n              extraData.writeUIntLE(counter, 0, 6);\n              sig = Buffer.from(ecc.sign(hash, this.privateKey, extraData));\n            }\n            return sig;\n          }\n        }\n      }, {\n        key: \"signSchnorr\",\n        value: function signSchnorr(hash) {\n          if (!this.privateKey) throw new Error('Missing private key');\n          if (!ecc.signSchnorr) throw new Error('signSchnorr not supported by ecc library');\n          return Buffer.from(ecc.signSchnorr(hash, this.privateKey));\n        }\n      }, {\n        key: \"verify\",\n        value: function verify(hash, signature) {\n          return ecc.verify(hash, this.publicKey, signature);\n        }\n      }, {\n        key: \"verifySchnorr\",\n        value: function verifySchnorr(hash, signature) {\n          if (!ecc.verifySchnorr) throw new Error('verifySchnorr not supported by ecc library');\n          return ecc.verifySchnorr(hash, this.publicKey.subarray(1, 33), signature);\n        }\n      }]);\n    }();\n    var BIP32 = /*#__PURE__*/function (_Bip32Signer) {\n      function BIP32(__D, __Q, chainCode, network) {\n        var _this;\n        var __DEPTH = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n        var __INDEX = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n        var __PARENT_FINGERPRINT = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0x00000000;\n        _classCallCheck(this, BIP32);\n        _this = _callSuper(this, BIP32, [__D, __Q]);\n        _this.chainCode = chainCode;\n        _this.network = network;\n        _this.__DEPTH = __DEPTH;\n        _this.__INDEX = __INDEX;\n        _this.__PARENT_FINGERPRINT = __PARENT_FINGERPRINT;\n        _$$_REQUIRE(_dependencyMap[6], \"typeforce\")(NETWORK_TYPE, network);\n        return _this;\n      }\n      _inherits(BIP32, _Bip32Signer);\n      return _createClass(BIP32, [{\n        key: \"depth\",\n        get: function get() {\n          return this.__DEPTH;\n        }\n      }, {\n        key: \"index\",\n        get: function get() {\n          return this.__INDEX;\n        }\n      }, {\n        key: \"parentFingerprint\",\n        get: function get() {\n          return this.__PARENT_FINGERPRINT;\n        }\n      }, {\n        key: \"identifier\",\n        get: function get() {\n          return _$$_REQUIRE(_dependencyMap[7], \"./crypto\").hash160(this.publicKey);\n        }\n      }, {\n        key: \"fingerprint\",\n        get: function get() {\n          return this.identifier.slice(0, 4);\n        }\n      }, {\n        key: \"compressed\",\n        get: function get() {\n          return true;\n        }\n        // Private === not neutered\n        // Public === neutered\n      }, {\n        key: \"isNeutered\",\n        value: function isNeutered() {\n          return this.__D === undefined;\n        }\n      }, {\n        key: \"neutered\",\n        value: function neutered() {\n          return fromPublicKeyLocal(this.publicKey, this.chainCode, this.network, this.depth, this.index, this.parentFingerprint);\n        }\n      }, {\n        key: \"toBase58\",\n        value: function toBase58() {\n          var network = this.network;\n          var version = !this.isNeutered() ? network.bip32.private : network.bip32.public;\n          var buffer = Buffer.allocUnsafe(78);\n          // 4 bytes: version bytes\n          buffer.writeUInt32BE(version, 0);\n          // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ....\n          buffer.writeUInt8(this.depth, 4);\n          // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)\n          buffer.writeUInt32BE(this.parentFingerprint, 5);\n          // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.\n          // This is encoded in big endian. (0x00000000 if master key)\n          buffer.writeUInt32BE(this.index, 9);\n          // 32 bytes: the chain code\n          this.chainCode.copy(buffer, 13);\n          // 33 bytes: the public key or private key data\n          if (!this.isNeutered()) {\n            // 0x00 + k for private keys\n            buffer.writeUInt8(0, 45);\n            this.privateKey.copy(buffer, 46);\n            // 33 bytes: the public key\n          } else {\n            // X9.62 encoding for public keys\n            this.publicKey.copy(buffer, 45);\n          }\n          return _$$_REQUIRE(_dependencyMap[8], \"bs58check\").encode(buffer);\n        }\n      }, {\n        key: \"toWIF\",\n        value: function toWIF() {\n          if (!this.privateKey) throw new TypeError('Missing private key');\n          return _$$_REQUIRE(_dependencyMap[9], \"wif\").encode(this.network.wif, this.privateKey, true);\n        }\n        // https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#child-key-derivation-ckd-functions\n      }, {\n        key: \"derive\",\n        value: function derive(index) {\n          _$$_REQUIRE(_dependencyMap[6], \"typeforce\")(_$$_REQUIRE(_dependencyMap[6], \"typeforce\").UInt32, index);\n          var isHardened = index >= HIGHEST_BIT;\n          var data = Buffer.allocUnsafe(37);\n          // Hardened child\n          if (isHardened) {\n            if (this.isNeutered()) throw new TypeError('Missing private key for hardened child key');\n            // data = 0x00 || ser256(kpar) || ser32(index)\n            data[0] = 0x00;\n            this.privateKey.copy(data, 1);\n            data.writeUInt32BE(index, 33);\n            // Normal child\n          } else {\n            // data = serP(point(kpar)) || ser32(index)\n            //      = serP(Kpar) || ser32(index)\n            this.publicKey.copy(data, 0);\n            data.writeUInt32BE(index, 33);\n          }\n          var I = _$$_REQUIRE(_dependencyMap[7], \"./crypto\").hmacSHA512(this.chainCode, data);\n          var IL = I.slice(0, 32);\n          var IR = I.slice(32);\n          // if parse256(IL) >= n, proceed with the next value for i\n          if (!ecc.isPrivate(IL)) return this.derive(index + 1);\n          // Private parent key -> private child key\n          var hd;\n          if (!this.isNeutered()) {\n            // ki = parse256(IL) + kpar (mod n)\n            var ki = Buffer.from(ecc.privateAdd(this.privateKey, IL));\n            // In case ki == 0, proceed with the next value for i\n            if (ki == null) return this.derive(index + 1);\n            hd = fromPrivateKeyLocal(ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));\n            // Public parent key -> public child key\n          } else {\n            // Ki = point(parse256(IL)) + Kpar\n            //    = G*IL + Kpar\n            var Ki = Buffer.from(ecc.pointAddScalar(this.publicKey, IL, true));\n            // In case Ki is the point at infinity, proceed with the next value for i\n            if (Ki === null) return this.derive(index + 1);\n            hd = fromPublicKeyLocal(Ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));\n          }\n          return hd;\n        }\n      }, {\n        key: \"deriveHardened\",\n        value: function deriveHardened(index) {\n          _$$_REQUIRE(_dependencyMap[6], \"typeforce\")(UInt31, index);\n          // Only derives hardened private keys by default\n          return this.derive(index + HIGHEST_BIT);\n        }\n      }, {\n        key: \"derivePath\",\n        value: function derivePath(path) {\n          _$$_REQUIRE(_dependencyMap[6], \"typeforce\")(BIP32Path, path);\n          var splitPath = path.split('/');\n          if (splitPath[0] === 'm') {\n            if (this.parentFingerprint) throw new TypeError('Expected master, got child');\n            splitPath = splitPath.slice(1);\n          }\n          return splitPath.reduce(function (prevHd, indexStr) {\n            var index;\n            if (indexStr.slice(-1) === `'`) {\n              index = parseInt(indexStr.slice(0, -1), 10);\n              return prevHd.deriveHardened(index);\n            } else {\n              index = parseInt(indexStr, 10);\n              return prevHd.derive(index);\n            }\n          }, this);\n        }\n      }, {\n        key: \"tweak\",\n        value: function tweak(t) {\n          if (this.privateKey) return this.tweakFromPrivateKey(t);\n          return this.tweakFromPublicKey(t);\n        }\n      }, {\n        key: \"tweakFromPublicKey\",\n        value: function tweakFromPublicKey(t) {\n          var xOnlyPubKey = toXOnly(this.publicKey);\n          var tweakedPublicKey = ecc.xOnlyPointAddTweak(xOnlyPubKey, t);\n          if (!tweakedPublicKey || tweakedPublicKey.xOnlyPubkey === null) throw new Error('Cannot tweak public key!');\n          var parityByte = Buffer.from([tweakedPublicKey.parity === 0 ? 0x02 : 0x03]);\n          var tweakedPublicKeyCompresed = Buffer.concat([parityByte, tweakedPublicKey.xOnlyPubkey]);\n          return new Bip32Signer(undefined, tweakedPublicKeyCompresed);\n        }\n      }, {\n        key: \"tweakFromPrivateKey\",\n        value: function tweakFromPrivateKey(t) {\n          var hasOddY = this.publicKey[0] === 3 || this.publicKey[0] === 4 && (this.publicKey[64] & 1) === 1;\n          var privateKey = hasOddY ? ecc.privateNegate(this.privateKey) : this.privateKey;\n          var tweakedPrivateKey = ecc.privateAdd(privateKey, t);\n          if (!tweakedPrivateKey) throw new Error('Invalid tweaked private key!');\n          return new Bip32Signer(Buffer.from(tweakedPrivateKey), undefined);\n        }\n      }]);\n    }(Bip32Signer);\n    function fromBase58(inString, network) {\n      var buffer = _$$_REQUIRE(_dependencyMap[8], \"bs58check\").decode(inString);\n      if (buffer.length !== 78) throw new TypeError('Invalid buffer length');\n      network = network || BITCOIN;\n      // 4 bytes: version bytes\n      var version = buffer.readUInt32BE(0);\n      if (version !== network.bip32.private && version !== network.bip32.public) throw new TypeError('Invalid network version');\n      // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ...\n      var depth = buffer[4];\n      // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)\n      var parentFingerprint = buffer.readUInt32BE(5);\n      if (depth === 0) {\n        if (parentFingerprint !== 0x00000000) throw new TypeError('Invalid parent fingerprint');\n      }\n      // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.\n      // This is encoded in MSB order. (0x00000000 if master key)\n      var index = buffer.readUInt32BE(9);\n      if (depth === 0 && index !== 0) throw new TypeError('Invalid index');\n      // 32 bytes: the chain code\n      var chainCode = buffer.slice(13, 45);\n      var hd;\n      // 33 bytes: private key data (0x00 + k)\n      if (version === network.bip32.private) {\n        if (buffer.readUInt8(45) !== 0x00) throw new TypeError('Invalid private key');\n        var k = buffer.slice(46, 78);\n        hd = fromPrivateKeyLocal(k, chainCode, network, depth, index, parentFingerprint);\n        // 33 bytes: public key data (0x02 + X or 0x03 + X)\n      } else {\n        var X = buffer.slice(45, 78);\n        hd = fromPublicKeyLocal(X, chainCode, network, depth, index, parentFingerprint);\n      }\n      return hd;\n    }\n    function fromPrivateKey(privateKey, chainCode, network) {\n      return fromPrivateKeyLocal(privateKey, chainCode, network);\n    }\n    function fromPrivateKeyLocal(privateKey, chainCode, network, depth, index, parentFingerprint) {\n      _$$_REQUIRE(_dependencyMap[6], \"typeforce\")({\n        privateKey: UINT256_TYPE,\n        chainCode: UINT256_TYPE\n      }, {\n        privateKey: privateKey,\n        chainCode: chainCode\n      });\n      network = network || BITCOIN;\n      if (!ecc.isPrivate(privateKey)) throw new TypeError('Private key not in range [1, n)');\n      return new BIP32(privateKey, undefined, chainCode, network, depth, index, parentFingerprint);\n    }\n    function fromPublicKey(publicKey, chainCode, network) {\n      return fromPublicKeyLocal(publicKey, chainCode, network);\n    }\n    function fromPublicKeyLocal(publicKey, chainCode, network, depth, index, parentFingerprint) {\n      _$$_REQUIRE(_dependencyMap[6], \"typeforce\")({\n        publicKey: _$$_REQUIRE(_dependencyMap[6], \"typeforce\").BufferN(33),\n        chainCode: UINT256_TYPE\n      }, {\n        publicKey: publicKey,\n        chainCode: chainCode\n      });\n      network = network || BITCOIN;\n      // verify the X coordinate is a point on the curve\n      if (!ecc.isPoint(publicKey)) throw new TypeError('Point is not on the curve');\n      return new BIP32(undefined, publicKey, chainCode, network, depth, index, parentFingerprint);\n    }\n    function fromSeed(seed, network) {\n      _$$_REQUIRE(_dependencyMap[6], \"typeforce\")(_$$_REQUIRE(_dependencyMap[6], \"typeforce\").Buffer, seed);\n      if (seed.length < 16) throw new TypeError('Seed should be at least 128 bits');\n      if (seed.length > 64) throw new TypeError('Seed should be at most 512 bits');\n      network = network || BITCOIN;\n      var I = _$$_REQUIRE(_dependencyMap[7], \"./crypto\").hmacSHA512(Buffer.from('Bitcoin seed', 'utf8'), seed);\n      var IL = I.slice(0, 32);\n      var IR = I.slice(32);\n      return fromPrivateKey(IL, IR, network);\n    }\n    return {\n      fromSeed: fromSeed,\n      fromBase58: fromBase58,\n      fromPublicKey: fromPublicKey,\n      fromPrivateKey: fromPrivateKey\n    };\n  }\n  exports.BIP32Factory = BIP32Factory;\n});","lineCount":380,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_possibleConstructorReturn"],[4,32,1,13],[4,35,1,13,"_$$_REQUIRE"],[4,46,1,13],[4,47,1,13,"_dependencyMap"],[4,61,1,13],[5,2,1,13],[5,6,1,13,"_getPrototypeOf"],[5,21,1,13],[5,24,1,13,"_$$_REQUIRE"],[5,35,1,13],[5,36,1,13,"_dependencyMap"],[5,50,1,13],[6,2,1,13],[6,6,1,13,"_inherits"],[6,15,1,13],[6,18,1,13,"_$$_REQUIRE"],[6,29,1,13],[6,30,1,13,"_dependencyMap"],[6,44,1,13],[7,2,1,13],[7,6,1,13,"_classCallCheck"],[7,21,1,13],[7,24,1,13,"_$$_REQUIRE"],[7,35,1,13],[7,36,1,13,"_dependencyMap"],[7,50,1,13],[8,2,1,13],[8,6,1,13,"_createClass"],[8,18,1,13],[8,21,1,13,"_$$_REQUIRE"],[8,32,1,13],[8,33,1,13,"_dependencyMap"],[8,47,1,13],[9,2,1,13],[9,11,1,13,"_callSuper"],[9,22,1,13,"t"],[9,23,1,13],[9,25,1,13,"o"],[9,26,1,13],[9,28,1,13,"e"],[9,29,1,13],[9,40,1,13,"o"],[9,41,1,13],[9,44,1,13,"_getPrototypeOf"],[9,59,1,13],[9,60,1,13,"o"],[9,61,1,13],[9,64,1,13,"_possibleConstructorReturn"],[9,90,1,13],[9,91,1,13,"t"],[9,92,1,13],[9,94,1,13,"_isNativeReflectConstruct"],[9,119,1,13],[9,124,1,13,"Reflect"],[9,131,1,13],[9,132,1,13,"construct"],[9,141,1,13],[9,142,1,13,"o"],[9,143,1,13],[9,145,1,13,"e"],[9,146,1,13],[9,154,1,13,"_getPrototypeOf"],[9,169,1,13],[9,170,1,13,"t"],[9,171,1,13],[9,173,1,13,"constructor"],[9,184,1,13],[9,188,1,13,"o"],[9,189,1,13],[9,190,1,13,"apply"],[9,195,1,13],[9,196,1,13,"t"],[9,197,1,13],[9,199,1,13,"e"],[9,200,1,13],[10,2,1,13],[10,11,1,13,"_isNativeReflectConstruct"],[10,37,1,13],[10,51,1,13,"t"],[10,52,1,13],[10,56,1,13,"Boolean"],[10,63,1,13],[10,64,1,13,"prototype"],[10,73,1,13],[10,74,1,13,"valueOf"],[10,81,1,13],[10,82,1,13,"call"],[10,86,1,13],[10,87,1,13,"Reflect"],[10,94,1,13],[10,95,1,13,"construct"],[10,104,1,13],[10,105,1,13,"Boolean"],[10,112,1,13],[10,145,1,13,"t"],[10,146,1,13],[10,159,1,13,"_isNativeReflectConstruct"],[10,184,1,13],[10,196,1,13,"_isNativeReflectConstruct"],[10,222,1,13],[10,235,1,13,"t"],[10,236,1,13],[11,2,2,0,"Object"],[11,8,2,6],[11,9,2,7,"defineProperty"],[11,23,2,21],[11,24,2,22,"exports"],[11,31,2,29],[11,33,2,31],[11,45,2,43],[11,47,2,45],[12,4,2,47,"value"],[12,9,2,52],[12,11,2,54],[13,2,2,59],[13,3,2,60],[13,4,2,61],[14,2,8,0],[14,11,8,9,"BIP32Factory"],[14,23,8,21,"BIP32Factory"],[14,24,8,22,"ecc"],[14,27,8,25],[14,29,8,27],[15,4,9,4,"_$$_REQUIRE"],[15,15,9,4],[15,16,9,4,"_dependencyMap"],[15,30,9,4],[15,48,9,14,"testEcc"],[15,55,9,21],[15,56,9,22,"ecc"],[15,59,9,25],[15,60,9,26],[16,4,10,4],[16,8,10,10,"UINT256_TYPE"],[16,20,10,22],[16,23,10,25,"_$$_REQUIRE"],[16,34,10,25],[16,35,10,25,"_dependencyMap"],[16,49,10,25],[16,67,10,35,"BufferN"],[16,74,10,42],[16,75,10,43],[16,77,10,45],[16,78,10,46],[17,4,11,4],[17,8,11,10,"NETWORK_TYPE"],[17,20,11,22],[17,23,11,25,"_$$_REQUIRE"],[17,34,11,25],[17,35,11,25,"_dependencyMap"],[17,49,11,25],[17,67,11,35,"compile"],[17,74,11,42],[17,75,11,43],[18,6,12,8,"wif"],[18,9,12,11],[18,11,12,13,"_$$_REQUIRE"],[18,22,12,13],[18,23,12,13,"_dependencyMap"],[18,37,12,13],[18,55,12,23,"UInt8"],[18,60,12,28],[19,6,13,8,"bip32"],[19,11,13,13],[19,13,13,15],[20,8,14,12,"public"],[20,14,14,18],[20,16,14,20,"_$$_REQUIRE"],[20,27,14,20],[20,28,14,20,"_dependencyMap"],[20,42,14,20],[20,60,14,30,"UInt32"],[20,66,14,36],[21,8,15,12,"private"],[21,15,15,19],[21,17,15,21,"_$$_REQUIRE"],[21,28,15,21],[21,29,15,21,"_dependencyMap"],[21,43,15,21],[21,61,15,31,"UInt32"],[22,6,16,8],[23,4,17,4],[23,5,17,5],[23,6,17,6],[24,4,18,4],[24,8,18,10,"BITCOIN"],[24,15,18,17],[24,18,18,20],[25,6,19,8,"messagePrefix"],[25,19,19,21],[25,21,19,23],[25,52,19,54],[26,6,20,8,"bech32"],[26,12,20,14],[26,14,20,16],[26,18,20,20],[27,6,21,8,"bip32"],[27,11,21,13],[27,13,21,15],[28,8,22,12,"public"],[28,14,22,18],[28,16,22,20],[28,26,22,30],[29,8,23,12,"private"],[29,15,23,19],[29,17,23,21],[30,6,24,8],[30,7,24,9],[31,6,25,8,"pubKeyHash"],[31,16,25,18],[31,18,25,20],[31,22,25,24],[32,6,26,8,"scriptHash"],[32,16,26,18],[32,18,26,20],[32,22,26,24],[33,6,27,8,"wif"],[33,9,27,11],[33,11,27,13],[34,4,28,4],[34,5,28,5],[35,4,29,4],[35,8,29,10,"HIGHEST_BIT"],[35,19,29,21],[35,22,29,24],[35,32,29,34],[36,4,30,4],[36,8,30,10,"UINT31_MAX"],[36,18,30,20],[36,21,30,23,"Math"],[36,25,30,27],[36,26,30,28,"pow"],[36,29,30,31],[36,30,30,32],[36,31,30,33],[36,33,30,35],[36,35,30,37],[36,36,30,38],[36,39,30,41],[36,40,30,42],[37,4,31,4],[37,13,31,13,"BIP32Path"],[37,22,31,22,"BIP32Path"],[37,23,31,23,"value"],[37,28,31,28],[37,30,31,30],[38,6,32,8],[38,13,32,16,"_$$_REQUIRE"],[38,24,32,16],[38,25,32,16,"_dependencyMap"],[38,39,32,16],[38,57,32,26,"String"],[38,63,32,32],[38,64,32,33,"value"],[38,69,32,38],[38,70,32,39],[38,74,32,43,"value"],[38,79,32,48],[38,80,32,49,"match"],[38,85,32,54],[38,86,32,55],[38,111,32,80],[38,112,32,81],[38,117,32,86],[38,121,32,90],[39,4,33,4],[40,4,34,4],[40,13,34,13,"UInt31"],[40,19,34,19,"UInt31"],[40,20,34,20,"value"],[40,25,34,25],[40,27,34,27],[41,6,35,8],[41,13,35,15,"_$$_REQUIRE"],[41,24,35,15],[41,25,35,15,"_dependencyMap"],[41,39,35,15],[41,57,35,25,"UInt32"],[41,63,35,31],[41,64,35,32,"value"],[41,69,35,37],[41,70,35,38],[41,74,35,42,"value"],[41,79,35,47],[41,83,35,51,"UINT31_MAX"],[41,93,35,61],[42,4,36,4],[43,4,37,4],[43,13,37,13,"toXOnly"],[43,20,37,20,"toXOnly"],[43,21,37,21,"pubKey"],[43,27,37,27],[43,29,37,29],[44,6,38,8],[44,13,38,15,"pubKey"],[44,19,38,21],[44,20,38,22,"length"],[44,26,38,28],[44,31,38,33],[44,33,38,35],[44,36,38,38,"pubKey"],[44,42,38,44],[44,45,38,47,"pubKey"],[44,51,38,53],[44,52,38,54,"slice"],[44,57,38,59],[44,58,38,60],[44,59,38,61],[44,61,38,63],[44,63,38,65],[44,64,38,66],[45,4,39,4],[46,4,39,5],[46,8,40,10,"Bip32Signer"],[46,19,40,21],[47,6,41,8],[47,15,41,8,"Bip32Signer"],[47,27,41,20,"__D"],[47,30,41,23],[47,32,41,25,"__Q"],[47,35,41,28],[47,37,41,30],[48,8,41,30,"_classCallCheck"],[48,23,41,30],[48,30,41,30,"Bip32Signer"],[48,41,41,30],[49,8,42,12],[49,12,42,16],[49,13,42,17,"__D"],[49,16,42,20],[49,19,42,23,"__D"],[49,22,42,26],[50,8,43,12],[50,12,43,16],[50,13,43,17,"__Q"],[50,16,43,20],[50,19,43,23,"__Q"],[50,22,43,26],[51,8,44,12],[51,12,44,16],[51,13,44,17,"lowR"],[51,17,44,21],[51,20,44,24],[51,25,44,29],[52,6,45,8],[53,6,45,9],[53,13,45,9,"_createClass"],[53,25,45,9],[53,26,45,9,"Bip32Signer"],[53,37,45,9],[54,8,45,9,"key"],[54,11,45,9],[55,8,45,9,"get"],[55,11,45,9],[55,13,46,8],[55,22,46,8,"get"],[55,26,46,8],[55,28,46,24],[56,10,47,12],[56,14,47,16],[56,18,47,20],[56,19,47,21,"__Q"],[56,22,47,24],[56,27,47,29,"undefined"],[56,36,47,38],[56,38,48,16],[56,42,48,20],[56,43,48,21,"__Q"],[56,46,48,24],[56,49,48,27,"Buffer"],[56,55,48,33],[56,56,48,34,"from"],[56,60,48,38],[56,61,48,39,"ecc"],[56,64,48,42],[56,65,48,43,"pointFromScalar"],[56,80,48,58],[56,81,48,59],[56,85,48,63],[56,86,48,64,"__D"],[56,89,48,67],[56,91,48,69],[56,95,48,73],[56,96,48,74],[56,97,48,75],[57,10,49,12],[57,17,49,19],[57,21,49,23],[57,22,49,24,"__Q"],[57,25,49,27],[58,8,50,8],[59,6,50,9],[60,8,50,9,"key"],[60,11,50,9],[61,8,50,9,"get"],[61,11,50,9],[61,13,51,8],[61,22,51,8,"get"],[61,26,51,8],[61,28,51,25],[62,10,52,12],[62,17,52,19],[62,21,52,23],[62,22,52,24,"__D"],[62,25,52,27],[63,8,53,8],[64,6,53,9],[65,8,53,9,"key"],[65,11,53,9],[66,8,53,9,"value"],[66,13,53,9],[66,15,54,8],[66,24,54,8,"sign"],[66,28,54,12,"sign"],[66,29,54,13,"hash"],[66,33,54,17],[66,35,54,19,"lowR"],[66,39,54,23],[66,41,54,25],[67,10,55,12],[67,14,55,16],[67,15,55,17],[67,19,55,21],[67,20,55,22,"privateKey"],[67,30,55,32],[67,32,56,16],[67,38,56,22],[67,42,56,26,"Error"],[67,47,56,31],[67,48,56,32],[67,69,56,53],[67,70,56,54],[68,10,57,12],[68,14,57,16,"lowR"],[68,18,57,20],[68,23,57,25,"undefined"],[68,32,57,34],[68,34,58,16,"lowR"],[68,38,58,20],[68,41,58,23],[68,45,58,27],[68,46,58,28,"lowR"],[68,50,58,32],[69,10,59,12],[69,14,59,16,"lowR"],[69,18,59,20],[69,23,59,25],[69,28,59,30],[69,30,59,32],[70,12,60,16],[70,19,60,23,"Buffer"],[70,25,60,29],[70,26,60,30,"from"],[70,30,60,34],[70,31,60,35,"ecc"],[70,34,60,38],[70,35,60,39,"sign"],[70,39,60,43],[70,40,60,44,"hash"],[70,44,60,48],[70,46,60,50],[70,50,60,54],[70,51,60,55,"privateKey"],[70,61,60,65],[70,62,60,66],[70,63,60,67],[71,10,61,12],[71,11,61,13],[71,17,62,17],[72,12,63,16],[72,16,63,20,"sig"],[72,19,63,23],[72,22,63,26,"Buffer"],[72,28,63,32],[72,29,63,33,"from"],[72,33,63,37],[72,34,63,38,"ecc"],[72,37,63,41],[72,38,63,42,"sign"],[72,42,63,46],[72,43,63,47,"hash"],[72,47,63,51],[72,49,63,53],[72,53,63,57],[72,54,63,58,"privateKey"],[72,64,63,68],[72,65,63,69],[72,66,63,70],[73,12,64,16],[73,16,64,22,"extraData"],[73,25,64,31],[73,28,64,34,"Buffer"],[73,34,64,40],[73,35,64,41,"alloc"],[73,40,64,46],[73,41,64,47],[73,43,64,49],[73,45,64,51],[73,46,64,52],[73,47,64,53],[74,12,65,16],[74,16,65,20,"counter"],[74,23,65,27],[74,26,65,30],[74,27,65,31],[75,12,66,16],[76,12,67,16],[77,12,68,16],[77,19,68,23,"sig"],[77,22,68,26],[77,23,68,27],[77,24,68,28],[77,25,68,29],[77,28,68,32],[77,32,68,36],[77,34,68,38],[78,14,69,20,"counter"],[78,21,69,27],[78,23,69,29],[79,14,70,20,"extraData"],[79,23,70,29],[79,24,70,30,"writeUIntLE"],[79,35,70,41],[79,36,70,42,"counter"],[79,43,70,49],[79,45,70,51],[79,46,70,52],[79,48,70,54],[79,49,70,55],[79,50,70,56],[80,14,71,20,"sig"],[80,17,71,23],[80,20,71,26,"Buffer"],[80,26,71,32],[80,27,71,33,"from"],[80,31,71,37],[80,32,71,38,"ecc"],[80,35,71,41],[80,36,71,42,"sign"],[80,40,71,46],[80,41,71,47,"hash"],[80,45,71,51],[80,47,71,53],[80,51,71,57],[80,52,71,58,"privateKey"],[80,62,71,68],[80,64,71,70,"extraData"],[80,73,71,79],[80,74,71,80],[80,75,71,81],[81,12,72,16],[82,12,73,16],[82,19,73,23,"sig"],[82,22,73,26],[83,10,74,12],[84,8,75,8],[85,6,75,9],[86,8,75,9,"key"],[86,11,75,9],[87,8,75,9,"value"],[87,13,75,9],[87,15,76,8],[87,24,76,8,"signSchnorr"],[87,35,76,19,"signSchnorr"],[87,36,76,20,"hash"],[87,40,76,24],[87,42,76,26],[88,10,77,12],[88,14,77,16],[88,15,77,17],[88,19,77,21],[88,20,77,22,"privateKey"],[88,30,77,32],[88,32,78,16],[88,38,78,22],[88,42,78,26,"Error"],[88,47,78,31],[88,48,78,32],[88,69,78,53],[88,70,78,54],[89,10,79,12],[89,14,79,16],[89,15,79,17,"ecc"],[89,18,79,20],[89,19,79,21,"signSchnorr"],[89,30,79,32],[89,32,80,16],[89,38,80,22],[89,42,80,26,"Error"],[89,47,80,31],[89,48,80,32],[89,90,80,74],[89,91,80,75],[90,10,81,12],[90,17,81,19,"Buffer"],[90,23,81,25],[90,24,81,26,"from"],[90,28,81,30],[90,29,81,31,"ecc"],[90,32,81,34],[90,33,81,35,"signSchnorr"],[90,44,81,46],[90,45,81,47,"hash"],[90,49,81,51],[90,51,81,53],[90,55,81,57],[90,56,81,58,"privateKey"],[90,66,81,68],[90,67,81,69],[90,68,81,70],[91,8,82,8],[92,6,82,9],[93,8,82,9,"key"],[93,11,82,9],[94,8,82,9,"value"],[94,13,82,9],[94,15,83,8],[94,24,83,8,"verify"],[94,30,83,14,"verify"],[94,31,83,15,"hash"],[94,35,83,19],[94,37,83,21,"signature"],[94,46,83,30],[94,48,83,32],[95,10,84,12],[95,17,84,19,"ecc"],[95,20,84,22],[95,21,84,23,"verify"],[95,27,84,29],[95,28,84,30,"hash"],[95,32,84,34],[95,34,84,36],[95,38,84,40],[95,39,84,41,"publicKey"],[95,48,84,50],[95,50,84,52,"signature"],[95,59,84,61],[95,60,84,62],[96,8,85,8],[97,6,85,9],[98,8,85,9,"key"],[98,11,85,9],[99,8,85,9,"value"],[99,13,85,9],[99,15,86,8],[99,24,86,8,"verifySchnorr"],[99,37,86,21,"verifySchnorr"],[99,38,86,22,"hash"],[99,42,86,26],[99,44,86,28,"signature"],[99,53,86,37],[99,55,86,39],[100,10,87,12],[100,14,87,16],[100,15,87,17,"ecc"],[100,18,87,20],[100,19,87,21,"verifySchnorr"],[100,32,87,34],[100,34,88,16],[100,40,88,22],[100,44,88,26,"Error"],[100,49,88,31],[100,50,88,32],[100,94,88,76],[100,95,88,77],[101,10,89,12],[101,17,89,19,"ecc"],[101,20,89,22],[101,21,89,23,"verifySchnorr"],[101,34,89,36],[101,35,89,37,"hash"],[101,39,89,41],[101,41,89,43],[101,45,89,47],[101,46,89,48,"publicKey"],[101,55,89,57],[101,56,89,58,"subarray"],[101,64,89,66],[101,65,89,67],[101,66,89,68],[101,68,89,70],[101,70,89,72],[101,71,89,73],[101,73,89,75,"signature"],[101,82,89,84],[101,83,89,85],[102,8,90,8],[103,6,90,9],[104,4,90,9],[105,4,90,9],[105,8,92,10,"BIP32"],[105,13,92,15],[105,39,92,15,"_Bip32Signer"],[105,51,92,15],[106,6,93,8],[106,15,93,8,"BIP32"],[106,21,93,20,"__D"],[106,24,93,23],[106,26,93,25,"__Q"],[106,29,93,28],[106,31,93,30,"chainCode"],[106,40,93,39],[106,42,93,41,"network"],[106,49,93,48],[106,51,93,111],[107,8,93,111],[107,12,93,111,"_this"],[107,17,93,111],[108,8,93,111],[108,12,93,50,"__DEPTH"],[108,19,93,57],[108,22,93,57,"arguments"],[108,31,93,57],[108,32,93,57,"length"],[108,38,93,57],[108,46,93,57,"arguments"],[108,55,93,57],[108,63,93,57,"undefined"],[108,72,93,57],[108,75,93,57,"arguments"],[108,84,93,57],[108,90,93,60],[108,91,93,61],[109,8,93,61],[109,12,93,63,"__INDEX"],[109,19,93,70],[109,22,93,70,"arguments"],[109,31,93,70],[109,32,93,70,"length"],[109,38,93,70],[109,46,93,70,"arguments"],[109,55,93,70],[109,63,93,70,"undefined"],[109,72,93,70],[109,75,93,70,"arguments"],[109,84,93,70],[109,90,93,73],[109,91,93,74],[110,8,93,74],[110,12,93,76,"__PARENT_FINGERPRINT"],[110,32,93,96],[110,35,93,96,"arguments"],[110,44,93,96],[110,45,93,96,"length"],[110,51,93,96],[110,59,93,96,"arguments"],[110,68,93,96],[110,76,93,96,"undefined"],[110,85,93,96],[110,88,93,96,"arguments"],[110,97,93,96],[110,103,93,99],[110,113,93,109],[111,8,93,109,"_classCallCheck"],[111,23,93,109],[111,30,93,109,"BIP32"],[111,35,93,109],[112,8,94,12,"_this"],[112,13,94,12],[112,16,94,12,"_callSuper"],[112,26,94,12],[112,33,94,12,"BIP32"],[112,38,94,12],[112,41,94,18,"__D"],[112,44,94,21],[112,46,94,23,"__Q"],[112,49,94,26],[113,8,95,12,"_this"],[113,13,95,12],[113,14,95,17,"chainCode"],[113,23,95,26],[113,26,95,29,"chainCode"],[113,35,95,38],[114,8,96,12,"_this"],[114,13,96,12],[114,14,96,17,"network"],[114,21,96,24],[114,24,96,27,"network"],[114,31,96,34],[115,8,97,12,"_this"],[115,13,97,12],[115,14,97,17,"__DEPTH"],[115,21,97,24],[115,24,97,27,"__DEPTH"],[115,31,97,34],[116,8,98,12,"_this"],[116,13,98,12],[116,14,98,17,"__INDEX"],[116,21,98,24],[116,24,98,27,"__INDEX"],[116,31,98,34],[117,8,99,12,"_this"],[117,13,99,12],[117,14,99,17,"__PARENT_FINGERPRINT"],[117,34,99,37],[117,37,99,40,"__PARENT_FINGERPRINT"],[117,57,99,60],[118,8,100,12,"_$$_REQUIRE"],[118,19,100,12],[118,20,100,12,"_dependencyMap"],[118,34,100,12],[118,52,100,22,"NETWORK_TYPE"],[118,64,100,34],[118,66,100,36,"network"],[118,73,100,43],[118,74,100,44],[119,8,100,45],[119,15,100,45,"_this"],[119,20,100,45],[120,6,101,8],[121,6,101,9,"_inherits"],[121,15,101,9],[121,16,101,9,"BIP32"],[121,21,101,9],[121,23,101,9,"_Bip32Signer"],[121,35,101,9],[122,6,101,9],[122,13,101,9,"_createClass"],[122,25,101,9],[122,26,101,9,"BIP32"],[122,31,101,9],[123,8,101,9,"key"],[123,11,101,9],[124,8,101,9,"get"],[124,11,101,9],[124,13,102,8],[124,22,102,8,"get"],[124,26,102,8],[124,28,102,20],[125,10,103,12],[125,17,103,19],[125,21,103,23],[125,22,103,24,"__DEPTH"],[125,29,103,31],[126,8,104,8],[127,6,104,9],[128,8,104,9,"key"],[128,11,104,9],[129,8,104,9,"get"],[129,11,104,9],[129,13,105,8],[129,22,105,8,"get"],[129,26,105,8],[129,28,105,20],[130,10,106,12],[130,17,106,19],[130,21,106,23],[130,22,106,24,"__INDEX"],[130,29,106,31],[131,8,107,8],[132,6,107,9],[133,8,107,9,"key"],[133,11,107,9],[134,8,107,9,"get"],[134,11,107,9],[134,13,108,8],[134,22,108,8,"get"],[134,26,108,8],[134,28,108,32],[135,10,109,12],[135,17,109,19],[135,21,109,23],[135,22,109,24,"__PARENT_FINGERPRINT"],[135,42,109,44],[136,8,110,8],[137,6,110,9],[138,8,110,9,"key"],[138,11,110,9],[139,8,110,9,"get"],[139,11,110,9],[139,13,111,8],[139,22,111,8,"get"],[139,26,111,8],[139,28,111,25],[140,10,112,12],[140,17,112,19,"_$$_REQUIRE"],[140,28,112,19],[140,29,112,19,"_dependencyMap"],[140,43,112,19],[140,60,112,26,"hash160"],[140,67,112,33],[140,68,112,34],[140,72,112,38],[140,73,112,39,"publicKey"],[140,82,112,48],[140,83,112,49],[141,8,113,8],[142,6,113,9],[143,8,113,9,"key"],[143,11,113,9],[144,8,113,9,"get"],[144,11,113,9],[144,13,114,8],[144,22,114,8,"get"],[144,26,114,8],[144,28,114,26],[145,10,115,12],[145,17,115,19],[145,21,115,23],[145,22,115,24,"identifier"],[145,32,115,34],[145,33,115,35,"slice"],[145,38,115,40],[145,39,115,41],[145,40,115,42],[145,42,115,44],[145,43,115,45],[145,44,115,46],[146,8,116,8],[147,6,116,9],[148,8,116,9,"key"],[148,11,116,9],[149,8,116,9,"get"],[149,11,116,9],[149,13,117,8],[149,22,117,8,"get"],[149,26,117,8],[149,28,117,25],[150,10,118,12],[150,17,118,19],[150,21,118,23],[151,8,119,8],[152,8,120,8],[153,8,121,8],[154,6,121,8],[155,8,121,8,"key"],[155,11,121,8],[156,8,121,8,"value"],[156,13,121,8],[156,15,122,8],[156,24,122,8,"isNeutered"],[156,34,122,18,"isNeutered"],[156,35,122,18],[156,37,122,21],[157,10,123,12],[157,17,123,19],[157,21,123,23],[157,22,123,24,"__D"],[157,25,123,27],[157,30,123,32,"undefined"],[157,39,123,41],[158,8,124,8],[159,6,124,9],[160,8,124,9,"key"],[160,11,124,9],[161,8,124,9,"value"],[161,13,124,9],[161,15,125,8],[161,24,125,8,"neutered"],[161,32,125,16,"neutered"],[161,33,125,16],[161,35,125,19],[162,10,126,12],[162,17,126,19,"fromPublicKeyLocal"],[162,35,126,37],[162,36,126,38],[162,40,126,42],[162,41,126,43,"publicKey"],[162,50,126,52],[162,52,126,54],[162,56,126,58],[162,57,126,59,"chainCode"],[162,66,126,68],[162,68,126,70],[162,72,126,74],[162,73,126,75,"network"],[162,80,126,82],[162,82,126,84],[162,86,126,88],[162,87,126,89,"depth"],[162,92,126,94],[162,94,126,96],[162,98,126,100],[162,99,126,101,"index"],[162,104,126,106],[162,106,126,108],[162,110,126,112],[162,111,126,113,"parentFingerprint"],[162,128,126,130],[162,129,126,131],[163,8,127,8],[164,6,127,9],[165,8,127,9,"key"],[165,11,127,9],[166,8,127,9,"value"],[166,13,127,9],[166,15,128,8],[166,24,128,8,"toBase58"],[166,32,128,16,"toBase58"],[166,33,128,16],[166,35,128,19],[167,10,129,12],[167,14,129,18,"network"],[167,21,129,25],[167,24,129,28],[167,28,129,32],[167,29,129,33,"network"],[167,36,129,40],[168,10,130,12],[168,14,130,18,"version"],[168,21,130,25],[168,24,130,28],[168,25,130,29],[168,29,130,33],[168,30,130,34,"isNeutered"],[168,40,130,44],[168,41,130,45],[168,42,130,46],[168,45,131,18,"network"],[168,52,131,25],[168,53,131,26,"bip32"],[168,58,131,31],[168,59,131,32,"private"],[168,66,131,39],[168,69,132,18,"network"],[168,76,132,25],[168,77,132,26,"bip32"],[168,82,132,31],[168,83,132,32,"public"],[168,89,132,38],[169,10,133,12],[169,14,133,18,"buffer"],[169,20,133,24],[169,23,133,27,"Buffer"],[169,29,133,33],[169,30,133,34,"allocUnsafe"],[169,41,133,45],[169,42,133,46],[169,44,133,48],[169,45,133,49],[170,10,134,12],[171,10,135,12,"buffer"],[171,16,135,18],[171,17,135,19,"writeUInt32BE"],[171,30,135,32],[171,31,135,33,"version"],[171,38,135,40],[171,40,135,42],[171,41,135,43],[171,42,135,44],[172,10,136,12],[173,10,137,12,"buffer"],[173,16,137,18],[173,17,137,19,"writeUInt8"],[173,27,137,29],[173,28,137,30],[173,32,137,34],[173,33,137,35,"depth"],[173,38,137,40],[173,40,137,42],[173,41,137,43],[173,42,137,44],[174,10,138,12],[175,10,139,12,"buffer"],[175,16,139,18],[175,17,139,19,"writeUInt32BE"],[175,30,139,32],[175,31,139,33],[175,35,139,37],[175,36,139,38,"parentFingerprint"],[175,53,139,55],[175,55,139,57],[175,56,139,58],[175,57,139,59],[176,10,140,12],[177,10,141,12],[178,10,142,12,"buffer"],[178,16,142,18],[178,17,142,19,"writeUInt32BE"],[178,30,142,32],[178,31,142,33],[178,35,142,37],[178,36,142,38,"index"],[178,41,142,43],[178,43,142,45],[178,44,142,46],[178,45,142,47],[179,10,143,12],[180,10,144,12],[180,14,144,16],[180,15,144,17,"chainCode"],[180,24,144,26],[180,25,144,27,"copy"],[180,29,144,31],[180,30,144,32,"buffer"],[180,36,144,38],[180,38,144,40],[180,40,144,42],[180,41,144,43],[181,10,145,12],[182,10,146,12],[182,14,146,16],[182,15,146,17],[182,19,146,21],[182,20,146,22,"isNeutered"],[182,30,146,32],[182,31,146,33],[182,32,146,34],[182,34,146,36],[183,12,147,16],[184,12,148,16,"buffer"],[184,18,148,22],[184,19,148,23,"writeUInt8"],[184,29,148,33],[184,30,148,34],[184,31,148,35],[184,33,148,37],[184,35,148,39],[184,36,148,40],[185,12,149,16],[185,16,149,20],[185,17,149,21,"privateKey"],[185,27,149,31],[185,28,149,32,"copy"],[185,32,149,36],[185,33,149,37,"buffer"],[185,39,149,43],[185,41,149,45],[185,43,149,47],[185,44,149,48],[186,12,150,16],[187,10,151,12],[187,11,151,13],[187,17,152,17],[188,12,153,16],[189,12,154,16],[189,16,154,20],[189,17,154,21,"publicKey"],[189,26,154,30],[189,27,154,31,"copy"],[189,31,154,35],[189,32,154,36,"buffer"],[189,38,154,42],[189,40,154,44],[189,42,154,46],[189,43,154,47],[190,10,155,12],[191,10,156,12],[191,17,156,19,"_$$_REQUIRE"],[191,28,156,19],[191,29,156,19,"_dependencyMap"],[191,43,156,19],[191,61,156,29,"encode"],[191,67,156,35],[191,68,156,36,"buffer"],[191,74,156,42],[191,75,156,43],[192,8,157,8],[193,6,157,9],[194,8,157,9,"key"],[194,11,157,9],[195,8,157,9,"value"],[195,13,157,9],[195,15,158,8],[195,24,158,8,"toWIF"],[195,29,158,13,"toWIF"],[195,30,158,13],[195,32,158,16],[196,10,159,12],[196,14,159,16],[196,15,159,17],[196,19,159,21],[196,20,159,22,"privateKey"],[196,30,159,32],[196,32,160,16],[196,38,160,22],[196,42,160,26,"TypeError"],[196,51,160,35],[196,52,160,36],[196,73,160,57],[196,74,160,58],[197,10,161,12],[197,17,161,19,"_$$_REQUIRE"],[197,28,161,19],[197,29,161,19,"_dependencyMap"],[197,43,161,19],[197,55,161,23,"encode"],[197,61,161,29],[197,62,161,30],[197,66,161,34],[197,67,161,35,"network"],[197,74,161,42],[197,75,161,43,"wif"],[197,78,161,46],[197,80,161,48],[197,84,161,52],[197,85,161,53,"privateKey"],[197,95,161,63],[197,97,161,65],[197,101,161,69],[197,102,161,70],[198,8,162,8],[199,8,163,8],[200,6,163,8],[201,8,163,8,"key"],[201,11,163,8],[202,8,163,8,"value"],[202,13,163,8],[202,15,164,8],[202,24,164,8,"derive"],[202,30,164,14,"derive"],[202,31,164,15,"index"],[202,36,164,20],[202,38,164,22],[203,10,165,12,"_$$_REQUIRE"],[203,21,165,12],[203,22,165,12,"_dependencyMap"],[203,36,165,12],[203,54,165,22,"_$$_REQUIRE"],[203,65,165,22],[203,66,165,22,"_dependencyMap"],[203,80,165,22],[203,98,165,32,"UInt32"],[203,104,165,38],[203,106,165,40,"index"],[203,111,165,45],[203,112,165,46],[204,10,166,12],[204,14,166,18,"isHardened"],[204,24,166,28],[204,27,166,31,"index"],[204,32,166,36],[204,36,166,40,"HIGHEST_BIT"],[204,47,166,51],[205,10,167,12],[205,14,167,18,"data"],[205,18,167,22],[205,21,167,25,"Buffer"],[205,27,167,31],[205,28,167,32,"allocUnsafe"],[205,39,167,43],[205,40,167,44],[205,42,167,46],[205,43,167,47],[206,10,168,12],[207,10,169,12],[207,14,169,16,"isHardened"],[207,24,169,26],[207,26,169,28],[208,12,170,16],[208,16,170,20],[208,20,170,24],[208,21,170,25,"isNeutered"],[208,31,170,35],[208,32,170,36],[208,33,170,37],[208,35,171,20],[208,41,171,26],[208,45,171,30,"TypeError"],[208,54,171,39],[208,55,171,40],[208,99,171,84],[208,100,171,85],[209,12,172,16],[210,12,173,16,"data"],[210,16,173,20],[210,17,173,21],[210,18,173,22],[210,19,173,23],[210,22,173,26],[210,26,173,30],[211,12,174,16],[211,16,174,20],[211,17,174,21,"privateKey"],[211,27,174,31],[211,28,174,32,"copy"],[211,32,174,36],[211,33,174,37,"data"],[211,37,174,41],[211,39,174,43],[211,40,174,44],[211,41,174,45],[212,12,175,16,"data"],[212,16,175,20],[212,17,175,21,"writeUInt32BE"],[212,30,175,34],[212,31,175,35,"index"],[212,36,175,40],[212,38,175,42],[212,40,175,44],[212,41,175,45],[213,12,176,16],[214,10,177,12],[214,11,177,13],[214,17,178,17],[215,12,179,16],[216,12,180,16],[217,12,181,16],[217,16,181,20],[217,17,181,21,"publicKey"],[217,26,181,30],[217,27,181,31,"copy"],[217,31,181,35],[217,32,181,36,"data"],[217,36,181,40],[217,38,181,42],[217,39,181,43],[217,40,181,44],[218,12,182,16,"data"],[218,16,182,20],[218,17,182,21,"writeUInt32BE"],[218,30,182,34],[218,31,182,35,"index"],[218,36,182,40],[218,38,182,42],[218,40,182,44],[218,41,182,45],[219,10,183,12],[220,10,184,12],[220,14,184,18,"I"],[220,15,184,19],[220,18,184,22,"_$$_REQUIRE"],[220,29,184,22],[220,30,184,22,"_dependencyMap"],[220,44,184,22],[220,61,184,29,"hmacSHA512"],[220,71,184,39],[220,72,184,40],[220,76,184,44],[220,77,184,45,"chainCode"],[220,86,184,54],[220,88,184,56,"data"],[220,92,184,60],[220,93,184,61],[221,10,185,12],[221,14,185,18,"IL"],[221,16,185,20],[221,19,185,23,"I"],[221,20,185,24],[221,21,185,25,"slice"],[221,26,185,30],[221,27,185,31],[221,28,185,32],[221,30,185,34],[221,32,185,36],[221,33,185,37],[222,10,186,12],[222,14,186,18,"IR"],[222,16,186,20],[222,19,186,23,"I"],[222,20,186,24],[222,21,186,25,"slice"],[222,26,186,30],[222,27,186,31],[222,29,186,33],[222,30,186,34],[223,10,187,12],[224,10,188,12],[224,14,188,16],[224,15,188,17,"ecc"],[224,18,188,20],[224,19,188,21,"isPrivate"],[224,28,188,30],[224,29,188,31,"IL"],[224,31,188,33],[224,32,188,34],[224,34,189,16],[224,41,189,23],[224,45,189,27],[224,46,189,28,"derive"],[224,52,189,34],[224,53,189,35,"index"],[224,58,189,40],[224,61,189,43],[224,62,189,44],[224,63,189,45],[225,10,190,12],[226,10,191,12],[226,14,191,16,"hd"],[226,16,191,18],[227,10,192,12],[227,14,192,16],[227,15,192,17],[227,19,192,21],[227,20,192,22,"isNeutered"],[227,30,192,32],[227,31,192,33],[227,32,192,34],[227,34,192,36],[228,12,193,16],[229,12,194,16],[229,16,194,22,"ki"],[229,18,194,24],[229,21,194,27,"Buffer"],[229,27,194,33],[229,28,194,34,"from"],[229,32,194,38],[229,33,194,39,"ecc"],[229,36,194,42],[229,37,194,43,"privateAdd"],[229,47,194,53],[229,48,194,54],[229,52,194,58],[229,53,194,59,"privateKey"],[229,63,194,69],[229,65,194,71,"IL"],[229,67,194,73],[229,68,194,74],[229,69,194,75],[230,12,195,16],[231,12,196,16],[231,16,196,20,"ki"],[231,18,196,22],[231,22,196,26],[231,26,196,30],[231,28,197,20],[231,35,197,27],[231,39,197,31],[231,40,197,32,"derive"],[231,46,197,38],[231,47,197,39,"index"],[231,52,197,44],[231,55,197,47],[231,56,197,48],[231,57,197,49],[232,12,198,16,"hd"],[232,14,198,18],[232,17,198,21,"fromPrivateKeyLocal"],[232,36,198,40],[232,37,198,41,"ki"],[232,39,198,43],[232,41,198,45,"IR"],[232,43,198,47],[232,45,198,49],[232,49,198,53],[232,50,198,54,"network"],[232,57,198,61],[232,59,198,63],[232,63,198,67],[232,64,198,68,"depth"],[232,69,198,73],[232,72,198,76],[232,73,198,77],[232,75,198,79,"index"],[232,80,198,84],[232,82,198,86],[232,86,198,90],[232,87,198,91,"fingerprint"],[232,98,198,102],[232,99,198,103,"readUInt32BE"],[232,111,198,115],[232,112,198,116],[232,113,198,117],[232,114,198,118],[232,115,198,119],[233,12,199,16],[234,10,200,12],[234,11,200,13],[234,17,201,17],[235,12,202,16],[236,12,203,16],[237,12,204,16],[237,16,204,22,"Ki"],[237,18,204,24],[237,21,204,27,"Buffer"],[237,27,204,33],[237,28,204,34,"from"],[237,32,204,38],[237,33,204,39,"ecc"],[237,36,204,42],[237,37,204,43,"pointAddScalar"],[237,51,204,57],[237,52,204,58],[237,56,204,62],[237,57,204,63,"publicKey"],[237,66,204,72],[237,68,204,74,"IL"],[237,70,204,76],[237,72,204,78],[237,76,204,82],[237,77,204,83],[237,78,204,84],[238,12,205,16],[239,12,206,16],[239,16,206,20,"Ki"],[239,18,206,22],[239,23,206,27],[239,27,206,31],[239,29,207,20],[239,36,207,27],[239,40,207,31],[239,41,207,32,"derive"],[239,47,207,38],[239,48,207,39,"index"],[239,53,207,44],[239,56,207,47],[239,57,207,48],[239,58,207,49],[240,12,208,16,"hd"],[240,14,208,18],[240,17,208,21,"fromPublicKeyLocal"],[240,35,208,39],[240,36,208,40,"Ki"],[240,38,208,42],[240,40,208,44,"IR"],[240,42,208,46],[240,44,208,48],[240,48,208,52],[240,49,208,53,"network"],[240,56,208,60],[240,58,208,62],[240,62,208,66],[240,63,208,67,"depth"],[240,68,208,72],[240,71,208,75],[240,72,208,76],[240,74,208,78,"index"],[240,79,208,83],[240,81,208,85],[240,85,208,89],[240,86,208,90,"fingerprint"],[240,97,208,101],[240,98,208,102,"readUInt32BE"],[240,110,208,114],[240,111,208,115],[240,112,208,116],[240,113,208,117],[240,114,208,118],[241,10,209,12],[242,10,210,12],[242,17,210,19,"hd"],[242,19,210,21],[243,8,211,8],[244,6,211,9],[245,8,211,9,"key"],[245,11,211,9],[246,8,211,9,"value"],[246,13,211,9],[246,15,212,8],[246,24,212,8,"deriveHardened"],[246,38,212,22,"deriveHardened"],[246,39,212,23,"index"],[246,44,212,28],[246,46,212,30],[247,10,213,12,"_$$_REQUIRE"],[247,21,213,12],[247,22,213,12,"_dependencyMap"],[247,36,213,12],[247,54,213,22,"UInt31"],[247,60,213,28],[247,62,213,30,"index"],[247,67,213,35],[247,68,213,36],[248,10,214,12],[249,10,215,12],[249,17,215,19],[249,21,215,23],[249,22,215,24,"derive"],[249,28,215,30],[249,29,215,31,"index"],[249,34,215,36],[249,37,215,39,"HIGHEST_BIT"],[249,48,215,50],[249,49,215,51],[250,8,216,8],[251,6,216,9],[252,8,216,9,"key"],[252,11,216,9],[253,8,216,9,"value"],[253,13,216,9],[253,15,217,8],[253,24,217,8,"derivePath"],[253,34,217,18,"derivePath"],[253,35,217,19,"path"],[253,39,217,23],[253,41,217,25],[254,10,218,12,"_$$_REQUIRE"],[254,21,218,12],[254,22,218,12,"_dependencyMap"],[254,36,218,12],[254,54,218,22,"BIP32Path"],[254,63,218,31],[254,65,218,33,"path"],[254,69,218,37],[254,70,218,38],[255,10,219,12],[255,14,219,16,"splitPath"],[255,23,219,25],[255,26,219,28,"path"],[255,30,219,32],[255,31,219,33,"split"],[255,36,219,38],[255,37,219,39],[255,40,219,42],[255,41,219,43],[256,10,220,12],[256,14,220,16,"splitPath"],[256,23,220,25],[256,24,220,26],[256,25,220,27],[256,26,220,28],[256,31,220,33],[256,34,220,36],[256,36,220,38],[257,12,221,16],[257,16,221,20],[257,20,221,24],[257,21,221,25,"parentFingerprint"],[257,38,221,42],[257,40,222,20],[257,46,222,26],[257,50,222,30,"TypeError"],[257,59,222,39],[257,60,222,40],[257,88,222,68],[257,89,222,69],[258,12,223,16,"splitPath"],[258,21,223,25],[258,24,223,28,"splitPath"],[258,33,223,37],[258,34,223,38,"slice"],[258,39,223,43],[258,40,223,44],[258,41,223,45],[258,42,223,46],[259,10,224,12],[260,10,225,12],[260,17,225,19,"splitPath"],[260,26,225,28],[260,27,225,29,"reduce"],[260,33,225,35],[260,34,225,36],[260,44,225,37,"prevHd"],[260,50,225,43],[260,52,225,45,"indexStr"],[260,60,225,53],[260,62,225,58],[261,12,226,16],[261,16,226,20,"index"],[261,21,226,25],[262,12,227,16],[262,16,227,20,"indexStr"],[262,24,227,28],[262,25,227,29,"slice"],[262,30,227,34],[262,31,227,35],[262,32,227,36],[262,33,227,37],[262,34,227,38],[262,39,227,43],[262,42,227,46],[262,44,227,48],[263,14,228,20,"index"],[263,19,228,25],[263,22,228,28,"parseInt"],[263,30,228,36],[263,31,228,37,"indexStr"],[263,39,228,45],[263,40,228,46,"slice"],[263,45,228,51],[263,46,228,52],[263,47,228,53],[263,49,228,55],[263,50,228,56],[263,51,228,57],[263,52,228,58],[263,54,228,60],[263,56,228,62],[263,57,228,63],[264,14,229,20],[264,21,229,27,"prevHd"],[264,27,229,33],[264,28,229,34,"deriveHardened"],[264,42,229,48],[264,43,229,49,"index"],[264,48,229,54],[264,49,229,55],[265,12,230,16],[265,13,230,17],[265,19,231,21],[266,14,232,20,"index"],[266,19,232,25],[266,22,232,28,"parseInt"],[266,30,232,36],[266,31,232,37,"indexStr"],[266,39,232,45],[266,41,232,47],[266,43,232,49],[266,44,232,50],[267,14,233,20],[267,21,233,27,"prevHd"],[267,27,233,33],[267,28,233,34,"derive"],[267,34,233,40],[267,35,233,41,"index"],[267,40,233,46],[267,41,233,47],[268,12,234,16],[269,10,235,12],[269,11,235,13],[269,13,235,15],[269,17,235,19],[269,18,235,20],[270,8,236,8],[271,6,236,9],[272,8,236,9,"key"],[272,11,236,9],[273,8,236,9,"value"],[273,13,236,9],[273,15,237,8],[273,24,237,8,"tweak"],[273,29,237,13,"tweak"],[273,30,237,14,"t"],[273,31,237,15],[273,33,237,17],[274,10,238,12],[274,14,238,16],[274,18,238,20],[274,19,238,21,"privateKey"],[274,29,238,31],[274,31,239,16],[274,38,239,23],[274,42,239,27],[274,43,239,28,"tweakFromPrivateKey"],[274,62,239,47],[274,63,239,48,"t"],[274,64,239,49],[274,65,239,50],[275,10,240,12],[275,17,240,19],[275,21,240,23],[275,22,240,24,"tweakFromPublicKey"],[275,40,240,42],[275,41,240,43,"t"],[275,42,240,44],[275,43,240,45],[276,8,241,8],[277,6,241,9],[278,8,241,9,"key"],[278,11,241,9],[279,8,241,9,"value"],[279,13,241,9],[279,15,242,8],[279,24,242,8,"tweakFromPublicKey"],[279,42,242,26,"tweakFromPublicKey"],[279,43,242,27,"t"],[279,44,242,28],[279,46,242,30],[280,10,243,12],[280,14,243,18,"xOnlyPubKey"],[280,25,243,29],[280,28,243,32,"toXOnly"],[280,35,243,39],[280,36,243,40],[280,40,243,44],[280,41,243,45,"publicKey"],[280,50,243,54],[280,51,243,55],[281,10,244,12],[281,14,244,18,"tweakedPublicKey"],[281,30,244,34],[281,33,244,37,"ecc"],[281,36,244,40],[281,37,244,41,"xOnlyPointAddTweak"],[281,55,244,59],[281,56,244,60,"xOnlyPubKey"],[281,67,244,71],[281,69,244,73,"t"],[281,70,244,74],[281,71,244,75],[282,10,245,12],[282,14,245,16],[282,15,245,17,"tweakedPublicKey"],[282,31,245,33],[282,35,245,37,"tweakedPublicKey"],[282,51,245,53],[282,52,245,54,"xOnlyPubkey"],[282,63,245,65],[282,68,245,70],[282,72,245,74],[282,74,246,16],[282,80,246,22],[282,84,246,26,"Error"],[282,89,246,31],[282,90,246,32],[282,116,246,58],[282,117,246,59],[283,10,247,12],[283,14,247,18,"parityByte"],[283,24,247,28],[283,27,247,31,"Buffer"],[283,33,247,37],[283,34,247,38,"from"],[283,38,247,42],[283,39,247,43],[283,40,248,16,"tweakedPublicKey"],[283,56,248,32],[283,57,248,33,"parity"],[283,63,248,39],[283,68,248,44],[283,69,248,45],[283,72,248,48],[283,76,248,52],[283,79,248,55],[283,83,248,59],[283,84,249,13],[283,85,249,14],[284,10,250,12],[284,14,250,18,"tweakedPublicKeyCompresed"],[284,39,250,43],[284,42,250,46,"Buffer"],[284,48,250,52],[284,49,250,53,"concat"],[284,55,250,59],[284,56,250,60],[284,57,251,16,"parityByte"],[284,67,251,26],[284,69,252,16,"tweakedPublicKey"],[284,85,252,32],[284,86,252,33,"xOnlyPubkey"],[284,97,252,44],[284,98,253,13],[284,99,253,14],[285,10,254,12],[285,17,254,19],[285,21,254,23,"Bip32Signer"],[285,32,254,34],[285,33,254,35,"undefined"],[285,42,254,44],[285,44,254,46,"tweakedPublicKeyCompresed"],[285,69,254,71],[285,70,254,72],[286,8,255,8],[287,6,255,9],[288,8,255,9,"key"],[288,11,255,9],[289,8,255,9,"value"],[289,13,255,9],[289,15,256,8],[289,24,256,8,"tweakFromPrivateKey"],[289,43,256,27,"tweakFromPrivateKey"],[289,44,256,28,"t"],[289,45,256,29],[289,47,256,31],[290,10,257,12],[290,14,257,18,"hasOddY"],[290,21,257,25],[290,24,257,28],[290,28,257,32],[290,29,257,33,"publicKey"],[290,38,257,42],[290,39,257,43],[290,40,257,44],[290,41,257,45],[290,46,257,50],[290,47,257,51],[290,51,258,17],[290,55,258,21],[290,56,258,22,"publicKey"],[290,65,258,31],[290,66,258,32],[290,67,258,33],[290,68,258,34],[290,73,258,39],[290,74,258,40],[290,78,258,44],[290,79,258,45],[290,83,258,49],[290,84,258,50,"publicKey"],[290,93,258,59],[290,94,258,60],[290,96,258,62],[290,97,258,63],[290,100,258,66],[290,101,258,67],[290,107,258,73],[290,108,258,75],[291,10,259,12],[291,14,259,18,"privateKey"],[291,24,259,28],[291,27,259,31,"hasOddY"],[291,34,259,38],[291,37,260,18,"ecc"],[291,40,260,21],[291,41,260,22,"privateNegate"],[291,54,260,35],[291,55,260,36],[291,59,260,40],[291,60,260,41,"privateKey"],[291,70,260,51],[291,71,260,52],[291,74,261,18],[291,78,261,22],[291,79,261,23,"privateKey"],[291,89,261,33],[292,10,262,12],[292,14,262,18,"tweakedPrivateKey"],[292,31,262,35],[292,34,262,38,"ecc"],[292,37,262,41],[292,38,262,42,"privateAdd"],[292,48,262,52],[292,49,262,53,"privateKey"],[292,59,262,63],[292,61,262,65,"t"],[292,62,262,66],[292,63,262,67],[293,10,263,12],[293,14,263,16],[293,15,263,17,"tweakedPrivateKey"],[293,32,263,34],[293,34,264,16],[293,40,264,22],[293,44,264,26,"Error"],[293,49,264,31],[293,50,264,32],[293,80,264,62],[293,81,264,63],[294,10,265,12],[294,17,265,19],[294,21,265,23,"Bip32Signer"],[294,32,265,34],[294,33,265,35,"Buffer"],[294,39,265,41],[294,40,265,42,"from"],[294,44,265,46],[294,45,265,47,"tweakedPrivateKey"],[294,62,265,64],[294,63,265,65],[294,65,265,67,"undefined"],[294,74,265,76],[294,75,265,77],[295,8,266,8],[296,6,266,9],[297,4,266,9],[297,6,92,24,"Bip32Signer"],[297,17,92,35],[298,4,268,4],[298,13,268,13,"fromBase58"],[298,23,268,23,"fromBase58"],[298,24,268,24,"inString"],[298,32,268,32],[298,34,268,34,"network"],[298,41,268,41],[298,43,268,43],[299,6,269,8],[299,10,269,14,"buffer"],[299,16,269,20],[299,19,269,23,"_$$_REQUIRE"],[299,30,269,23],[299,31,269,23,"_dependencyMap"],[299,45,269,23],[299,63,269,33,"decode"],[299,69,269,39],[299,70,269,40,"inString"],[299,78,269,48],[299,79,269,49],[300,6,270,8],[300,10,270,12,"buffer"],[300,16,270,18],[300,17,270,19,"length"],[300,23,270,25],[300,28,270,30],[300,30,270,32],[300,32,271,12],[300,38,271,18],[300,42,271,22,"TypeError"],[300,51,271,31],[300,52,271,32],[300,75,271,55],[300,76,271,56],[301,6,272,8,"network"],[301,13,272,15],[301,16,272,18,"network"],[301,23,272,25],[301,27,272,29,"BITCOIN"],[301,34,272,36],[302,6,273,8],[303,6,274,8],[303,10,274,14,"version"],[303,17,274,21],[303,20,274,24,"buffer"],[303,26,274,30],[303,27,274,31,"readUInt32BE"],[303,39,274,43],[303,40,274,44],[303,41,274,45],[303,42,274,46],[304,6,275,8],[304,10,275,12,"version"],[304,17,275,19],[304,22,275,24,"network"],[304,29,275,31],[304,30,275,32,"bip32"],[304,35,275,37],[304,36,275,38,"private"],[304,43,275,45],[304,47,275,49,"version"],[304,54,275,56],[304,59,275,61,"network"],[304,66,275,68],[304,67,275,69,"bip32"],[304,72,275,74],[304,73,275,75,"public"],[304,79,275,81],[304,81,276,12],[304,87,276,18],[304,91,276,22,"TypeError"],[304,100,276,31],[304,101,276,32],[304,126,276,57],[304,127,276,58],[305,6,277,8],[306,6,278,8],[306,10,278,14,"depth"],[306,15,278,19],[306,18,278,22,"buffer"],[306,24,278,28],[306,25,278,29],[306,26,278,30],[306,27,278,31],[307,6,279,8],[308,6,280,8],[308,10,280,14,"parentFingerprint"],[308,27,280,31],[308,30,280,34,"buffer"],[308,36,280,40],[308,37,280,41,"readUInt32BE"],[308,49,280,53],[308,50,280,54],[308,51,280,55],[308,52,280,56],[309,6,281,8],[309,10,281,12,"depth"],[309,15,281,17],[309,20,281,22],[309,21,281,23],[309,23,281,25],[310,8,282,12],[310,12,282,16,"parentFingerprint"],[310,29,282,33],[310,34,282,38],[310,44,282,48],[310,46,283,16],[310,52,283,22],[310,56,283,26,"TypeError"],[310,65,283,35],[310,66,283,36],[310,94,283,64],[310,95,283,65],[311,6,284,8],[312,6,285,8],[313,6,286,8],[314,6,287,8],[314,10,287,14,"index"],[314,15,287,19],[314,18,287,22,"buffer"],[314,24,287,28],[314,25,287,29,"readUInt32BE"],[314,37,287,41],[314,38,287,42],[314,39,287,43],[314,40,287,44],[315,6,288,8],[315,10,288,12,"depth"],[315,15,288,17],[315,20,288,22],[315,21,288,23],[315,25,288,27,"index"],[315,30,288,32],[315,35,288,37],[315,36,288,38],[315,38,289,12],[315,44,289,18],[315,48,289,22,"TypeError"],[315,57,289,31],[315,58,289,32],[315,73,289,47],[315,74,289,48],[316,6,290,8],[317,6,291,8],[317,10,291,14,"chainCode"],[317,19,291,23],[317,22,291,26,"buffer"],[317,28,291,32],[317,29,291,33,"slice"],[317,34,291,38],[317,35,291,39],[317,37,291,41],[317,39,291,43],[317,41,291,45],[317,42,291,46],[318,6,292,8],[318,10,292,12,"hd"],[318,12,292,14],[319,6,293,8],[320,6,294,8],[320,10,294,12,"version"],[320,17,294,19],[320,22,294,24,"network"],[320,29,294,31],[320,30,294,32,"bip32"],[320,35,294,37],[320,36,294,38,"private"],[320,43,294,45],[320,45,294,47],[321,8,295,12],[321,12,295,16,"buffer"],[321,18,295,22],[321,19,295,23,"readUInt8"],[321,28,295,32],[321,29,295,33],[321,31,295,35],[321,32,295,36],[321,37,295,41],[321,41,295,45],[321,43,296,16],[321,49,296,22],[321,53,296,26,"TypeError"],[321,62,296,35],[321,63,296,36],[321,84,296,57],[321,85,296,58],[322,8,297,12],[322,12,297,18,"k"],[322,13,297,19],[322,16,297,22,"buffer"],[322,22,297,28],[322,23,297,29,"slice"],[322,28,297,34],[322,29,297,35],[322,31,297,37],[322,33,297,39],[322,35,297,41],[322,36,297,42],[323,8,298,12,"hd"],[323,10,298,14],[323,13,298,17,"fromPrivateKeyLocal"],[323,32,298,36],[323,33,298,37,"k"],[323,34,298,38],[323,36,298,40,"chainCode"],[323,45,298,49],[323,47,298,51,"network"],[323,54,298,58],[323,56,298,60,"depth"],[323,61,298,65],[323,63,298,67,"index"],[323,68,298,72],[323,70,298,74,"parentFingerprint"],[323,87,298,91],[323,88,298,92],[324,8,299,12],[325,6,300,8],[325,7,300,9],[325,13,301,13],[326,8,302,12],[326,12,302,18,"X"],[326,13,302,19],[326,16,302,22,"buffer"],[326,22,302,28],[326,23,302,29,"slice"],[326,28,302,34],[326,29,302,35],[326,31,302,37],[326,33,302,39],[326,35,302,41],[326,36,302,42],[327,8,303,12,"hd"],[327,10,303,14],[327,13,303,17,"fromPublicKeyLocal"],[327,31,303,35],[327,32,303,36,"X"],[327,33,303,37],[327,35,303,39,"chainCode"],[327,44,303,48],[327,46,303,50,"network"],[327,53,303,57],[327,55,303,59,"depth"],[327,60,303,64],[327,62,303,66,"index"],[327,67,303,71],[327,69,303,73,"parentFingerprint"],[327,86,303,90],[327,87,303,91],[328,6,304,8],[329,6,305,8],[329,13,305,15,"hd"],[329,15,305,17],[330,4,306,4],[331,4,307,4],[331,13,307,13,"fromPrivateKey"],[331,27,307,27,"fromPrivateKey"],[331,28,307,28,"privateKey"],[331,38,307,38],[331,40,307,40,"chainCode"],[331,49,307,49],[331,51,307,51,"network"],[331,58,307,58],[331,60,307,60],[332,6,308,8],[332,13,308,15,"fromPrivateKeyLocal"],[332,32,308,34],[332,33,308,35,"privateKey"],[332,43,308,45],[332,45,308,47,"chainCode"],[332,54,308,56],[332,56,308,58,"network"],[332,63,308,65],[332,64,308,66],[333,4,309,4],[334,4,310,4],[334,13,310,13,"fromPrivateKeyLocal"],[334,32,310,32,"fromPrivateKeyLocal"],[334,33,310,33,"privateKey"],[334,43,310,43],[334,45,310,45,"chainCode"],[334,54,310,54],[334,56,310,56,"network"],[334,63,310,63],[334,65,310,65,"depth"],[334,70,310,70],[334,72,310,72,"index"],[334,77,310,77],[334,79,310,79,"parentFingerprint"],[334,96,310,96],[334,98,310,98],[335,6,311,8,"_$$_REQUIRE"],[335,17,311,8],[335,18,311,8,"_dependencyMap"],[335,32,311,8],[335,50,311,18],[336,8,312,12,"privateKey"],[336,18,312,22],[336,20,312,24,"UINT256_TYPE"],[336,32,312,36],[337,8,313,12,"chainCode"],[337,17,313,21],[337,19,313,23,"UINT256_TYPE"],[338,6,314,8],[338,7,314,9],[338,9,314,11],[339,8,314,13,"privateKey"],[339,18,314,23],[339,20,314,13,"privateKey"],[339,30,314,23],[340,8,314,25,"chainCode"],[340,17,314,34],[340,19,314,25,"chainCode"],[341,6,314,35],[341,7,314,36],[341,8,314,37],[342,6,315,8,"network"],[342,13,315,15],[342,16,315,18,"network"],[342,23,315,25],[342,27,315,29,"BITCOIN"],[342,34,315,36],[343,6,316,8],[343,10,316,12],[343,11,316,13,"ecc"],[343,14,316,16],[343,15,316,17,"isPrivate"],[343,24,316,26],[343,25,316,27,"privateKey"],[343,35,316,37],[343,36,316,38],[343,38,317,12],[343,44,317,18],[343,48,317,22,"TypeError"],[343,57,317,31],[343,58,317,32],[343,91,317,65],[343,92,317,66],[344,6,318,8],[344,13,318,15],[344,17,318,19,"BIP32"],[344,22,318,24],[344,23,318,25,"privateKey"],[344,33,318,35],[344,35,318,37,"undefined"],[344,44,318,46],[344,46,318,48,"chainCode"],[344,55,318,57],[344,57,318,59,"network"],[344,64,318,66],[344,66,318,68,"depth"],[344,71,318,73],[344,73,318,75,"index"],[344,78,318,80],[344,80,318,82,"parentFingerprint"],[344,97,318,99],[344,98,318,100],[345,4,319,4],[346,4,320,4],[346,13,320,13,"fromPublicKey"],[346,26,320,26,"fromPublicKey"],[346,27,320,27,"publicKey"],[346,36,320,36],[346,38,320,38,"chainCode"],[346,47,320,47],[346,49,320,49,"network"],[346,56,320,56],[346,58,320,58],[347,6,321,8],[347,13,321,15,"fromPublicKeyLocal"],[347,31,321,33],[347,32,321,34,"publicKey"],[347,41,321,43],[347,43,321,45,"chainCode"],[347,52,321,54],[347,54,321,56,"network"],[347,61,321,63],[347,62,321,64],[348,4,322,4],[349,4,323,4],[349,13,323,13,"fromPublicKeyLocal"],[349,31,323,31,"fromPublicKeyLocal"],[349,32,323,32,"publicKey"],[349,41,323,41],[349,43,323,43,"chainCode"],[349,52,323,52],[349,54,323,54,"network"],[349,61,323,61],[349,63,323,63,"depth"],[349,68,323,68],[349,70,323,70,"index"],[349,75,323,75],[349,77,323,77,"parentFingerprint"],[349,94,323,94],[349,96,323,96],[350,6,324,8,"_$$_REQUIRE"],[350,17,324,8],[350,18,324,8,"_dependencyMap"],[350,32,324,8],[350,50,324,18],[351,8,325,12,"publicKey"],[351,17,325,21],[351,19,325,23,"_$$_REQUIRE"],[351,30,325,23],[351,31,325,23,"_dependencyMap"],[351,45,325,23],[351,63,325,33,"BufferN"],[351,70,325,40],[351,71,325,41],[351,73,325,43],[351,74,325,44],[352,8,326,12,"chainCode"],[352,17,326,21],[352,19,326,23,"UINT256_TYPE"],[353,6,327,8],[353,7,327,9],[353,9,327,11],[354,8,327,13,"publicKey"],[354,17,327,22],[354,19,327,13,"publicKey"],[354,28,327,22],[355,8,327,24,"chainCode"],[355,17,327,33],[355,19,327,24,"chainCode"],[356,6,327,34],[356,7,327,35],[356,8,327,36],[357,6,328,8,"network"],[357,13,328,15],[357,16,328,18,"network"],[357,23,328,25],[357,27,328,29,"BITCOIN"],[357,34,328,36],[358,6,329,8],[359,6,330,8],[359,10,330,12],[359,11,330,13,"ecc"],[359,14,330,16],[359,15,330,17,"isPoint"],[359,22,330,24],[359,23,330,25,"publicKey"],[359,32,330,34],[359,33,330,35],[359,35,331,12],[359,41,331,18],[359,45,331,22,"TypeError"],[359,54,331,31],[359,55,331,32],[359,82,331,59],[359,83,331,60],[360,6,332,8],[360,13,332,15],[360,17,332,19,"BIP32"],[360,22,332,24],[360,23,332,25,"undefined"],[360,32,332,34],[360,34,332,36,"publicKey"],[360,43,332,45],[360,45,332,47,"chainCode"],[360,54,332,56],[360,56,332,58,"network"],[360,63,332,65],[360,65,332,67,"depth"],[360,70,332,72],[360,72,332,74,"index"],[360,77,332,79],[360,79,332,81,"parentFingerprint"],[360,96,332,98],[360,97,332,99],[361,4,333,4],[362,4,334,4],[362,13,334,13,"fromSeed"],[362,21,334,21,"fromSeed"],[362,22,334,22,"seed"],[362,26,334,26],[362,28,334,28,"network"],[362,35,334,35],[362,37,334,37],[363,6,335,8,"_$$_REQUIRE"],[363,17,335,8],[363,18,335,8,"_dependencyMap"],[363,32,335,8],[363,50,335,18,"_$$_REQUIRE"],[363,61,335,18],[363,62,335,18,"_dependencyMap"],[363,76,335,18],[363,94,335,28,"Buffer"],[363,100,335,34],[363,102,335,36,"seed"],[363,106,335,40],[363,107,335,41],[364,6,336,8],[364,10,336,12,"seed"],[364,14,336,16],[364,15,336,17,"length"],[364,21,336,23],[364,24,336,26],[364,26,336,28],[364,28,337,12],[364,34,337,18],[364,38,337,22,"TypeError"],[364,47,337,31],[364,48,337,32],[364,82,337,66],[364,83,337,67],[365,6,338,8],[365,10,338,12,"seed"],[365,14,338,16],[365,15,338,17,"length"],[365,21,338,23],[365,24,338,26],[365,26,338,28],[365,28,339,12],[365,34,339,18],[365,38,339,22,"TypeError"],[365,47,339,31],[365,48,339,32],[365,81,339,65],[365,82,339,66],[366,6,340,8,"network"],[366,13,340,15],[366,16,340,18,"network"],[366,23,340,25],[366,27,340,29,"BITCOIN"],[366,34,340,36],[367,6,341,8],[367,10,341,14,"I"],[367,11,341,15],[367,14,341,18,"_$$_REQUIRE"],[367,25,341,18],[367,26,341,18,"_dependencyMap"],[367,40,341,18],[367,57,341,25,"hmacSHA512"],[367,67,341,35],[367,68,341,36,"Buffer"],[367,74,341,42],[367,75,341,43,"from"],[367,79,341,47],[367,80,341,48],[367,94,341,62],[367,96,341,64],[367,102,341,70],[367,103,341,71],[367,105,341,73,"seed"],[367,109,341,77],[367,110,341,78],[368,6,342,8],[368,10,342,14,"IL"],[368,12,342,16],[368,15,342,19,"I"],[368,16,342,20],[368,17,342,21,"slice"],[368,22,342,26],[368,23,342,27],[368,24,342,28],[368,26,342,30],[368,28,342,32],[368,29,342,33],[369,6,343,8],[369,10,343,14,"IR"],[369,12,343,16],[369,15,343,19,"I"],[369,16,343,20],[369,17,343,21,"slice"],[369,22,343,26],[369,23,343,27],[369,25,343,29],[369,26,343,30],[370,6,344,8],[370,13,344,15,"fromPrivateKey"],[370,27,344,29],[370,28,344,30,"IL"],[370,30,344,32],[370,32,344,34,"IR"],[370,34,344,36],[370,36,344,38,"network"],[370,43,344,45],[370,44,344,46],[371,4,345,4],[372,4,346,4],[372,11,346,11],[373,6,347,8,"fromSeed"],[373,14,347,16],[373,16,347,8,"fromSeed"],[373,24,347,16],[374,6,348,8,"fromBase58"],[374,16,348,18],[374,18,348,8,"fromBase58"],[374,28,348,18],[375,6,349,8,"fromPublicKey"],[375,19,349,21],[375,21,349,8,"fromPublicKey"],[375,34,349,21],[376,6,350,8,"fromPrivateKey"],[376,20,350,22],[376,22,350,8,"fromPrivateKey"],[377,4,351,4],[377,5,351,5],[378,2,352,0],[379,2,353,0,"exports"],[379,9,353,7],[379,10,353,8,"BIP32Factory"],[379,22,353,20],[379,25,353,23,"BIP32Factory"],[379,37,353,35],[380,0,353,36],[380,3]],"functionMap":{"names":["<global>","BIP32Factory","BIP32Path","UInt31","toXOnly","Bip32Signer","Bip32Signer#constructor","Bip32Signer#get__publicKey","Bip32Signer#get__privateKey","Bip32Signer#sign","Bip32Signer#signSchnorr","Bip32Signer#verify","Bip32Signer#verifySchnorr","BIP32","BIP32#constructor","BIP32#get__depth","BIP32#get__index","BIP32#get__parentFingerprint","BIP32#get__identifier","BIP32#get__fingerprint","BIP32#get__compressed","BIP32#isNeutered","BIP32#neutered","BIP32#toBase58","BIP32#toWIF","BIP32#derive","BIP32#deriveHardened","BIP32#derivePath","splitPath.reduce$argument_0","BIP32#tweak","BIP32#tweakFromPublicKey","BIP32#tweakFromPrivateKey","fromBase58","fromPrivateKey","fromPrivateKeyLocal","fromPublicKey","fromPublicKeyLocal","fromSeed"],"mappings":"AAA;ACO;ICuB;KDE;IEC;KFE;IGC;KHE;IIC;QCC;SDI;QEC;SFI;QGC;SHE;QIC;SJqB;QKC;SLM;QMC;SNE;QOC;SPI;KJC;IYC;QCC;SDQ;QEC;SFE;QGC;SHE;QIC;SJE;QKC;SLE;QMC;SNE;QOC;SPE;QQG;SRE;QSC;STE;QUC;SV6B;QWC;SXI;QYE;SZ+C;QaC;SbI;QcC;oCCQ;aDU;SdC;QgBC;ShBI;QiBC;SjBa;QkBC;SlBU;KZC;I+BC;K/BsC;IgCC;KhCE;IiCC;KjCS;IkCC;KlCE;ImCC;KnCU;IoCC;KpCW;CDO"}},"type":"js/module"}]}