{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":115,"column":37,"index":5963}}],"key":"5y7e5+zC7teYEEC6niD9f5zII1M="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":115,"column":37,"index":5963}}],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE="}},{"name":"assert","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":33,"index":249},"end":{"line":6,"column":50,"index":266}}],"key":"Umsy3wQQm6DbjafRIeuw3teOkUU="}},{"name":"./utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":16,"index":285},"end":{"line":7,"column":34,"index":303}},{"start":{"line":7,"column":16,"index":285},"end":{"line":7,"column":34,"index":303}},{"start":{"line":7,"column":16,"index":285},"end":{"line":7,"column":34,"index":303}},{"start":{"line":7,"column":16,"index":285},"end":{"line":7,"column":34,"index":303}}],"key":"Arg6QRuIuy5D/jfcnxX1qJiHjX8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\");\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var assert_1 = __importDefault(_$$_REQUIRE(_dependencyMap[2], \"assert\"));\n  var bytewords = 'ableacidalsoapexaquaarchatomauntawayaxisbackbaldbarnbeltbetabiasbluebodybragbrewbulbbuzzcalmcashcatschefcityclawcodecolacookcostcruxcurlcuspcyandarkdatadaysdelidicedietdoordowndrawdropdrumdulldutyeacheasyechoedgeepicevenexamexiteyesfactfairfernfigsfilmfishfizzflapflewfluxfoxyfreefrogfuelfundgalagamegeargemsgiftgirlglowgoodgraygrimgurugushgyrohalfhanghardhawkheathelphighhillholyhopehornhutsicedideaidleinchinkyintoirisironitemjadejazzjoinjoltjowljudojugsjumpjunkjurykeepkenokeptkeyskickkilnkingkitekiwiknoblamblavalazyleaflegsliarlimplionlistlogoloudloveluaulucklungmainmanymathmazememomenumeowmildmintmissmonknailnavyneednewsnextnoonnotenumbobeyoboeomitonyxopenovalowlspaidpartpeckplaypluspoempoolposepuffpumapurrquadquizraceramprealredorichroadrockroofrubyruinrunsrustsafesagascarsetssilkskewslotsoapsolosongstubsurfswantacotasktaxitenttiedtimetinytoiltombtoystriptunatwinuglyundouniturgeuservastveryvetovialvibeviewvisavoidvowswallwandwarmwaspwavewaxywebswhatwhenwhizwolfworkyankyawnyellyogayurtzapszerozestzinczonezoom';\n  var bytewordsLookUpTable = [];\n  var BYTEWORDS_NUM = 256;\n  var BYTEWORD_LENGTH = 4;\n  var MINIMAL_BYTEWORD_LENGTH = 2;\n  var STYLES;\n  (function (STYLES) {\n    STYLES[\"STANDARD\"] = \"standard\";\n    STYLES[\"URI\"] = \"uri\";\n    STYLES[\"MINIMAL\"] = \"minimal\";\n  })(STYLES || (STYLES = {}));\n  var getWord = function getWord(index) {\n    return bytewords.slice(index * BYTEWORD_LENGTH, index * BYTEWORD_LENGTH + BYTEWORD_LENGTH);\n  };\n  var getMinimalWord = function getMinimalWord(index) {\n    var byteword = getWord(index);\n    return `${byteword[0]}${byteword[BYTEWORD_LENGTH - 1]}`;\n  };\n  var addCRC = function addCRC(string) {\n    var crc = _$$_REQUIRE(_dependencyMap[3], \"./utils\").getCRCHex(Buffer.from(string, 'hex'));\n    return `${string}${crc}`;\n  };\n  var encodeWithSeparator = function encodeWithSeparator(word, separator) {\n    var crcAppendedWord = addCRC(word);\n    var crcWordBuff = Buffer.from(crcAppendedWord, 'hex');\n    var result = crcWordBuff.reduce(function (result, w) {\n      return [].concat(_toConsumableArray(result), [getWord(w)]);\n    }, []);\n    return result.join(separator);\n  };\n  var encodeMinimal = function encodeMinimal(word) {\n    var crcAppendedWord = addCRC(word);\n    var crcWordBuff = Buffer.from(crcAppendedWord, 'hex');\n    var result = crcWordBuff.reduce(function (result, w) {\n      return result + getMinimalWord(w);\n    }, '');\n    return result;\n  };\n  var decodeWord = function decodeWord(word, wordLength) {\n    assert_1.default(word.length === wordLength, 'Invalid Bytewords: word.length does not match wordLength provided');\n    var dim = 26;\n    // Since the first and last letters of each Byteword are unique,\n    // we can use them as indexes into a two-dimensional lookup table.\n    // This table is generated lazily.\n    if (bytewordsLookUpTable.length === 0) {\n      var array_len = dim * dim;\n      bytewordsLookUpTable = _toConsumableArray(new Array(array_len)).map(function () {\n        return -1;\n      });\n      for (var i = 0; i < BYTEWORDS_NUM; i++) {\n        var byteword = getWord(i);\n        var _x = byteword[0].charCodeAt(0) - 'a'.charCodeAt(0);\n        var _y = byteword[3].charCodeAt(0) - 'a'.charCodeAt(0);\n        var _offset = _y * dim + _x;\n        bytewordsLookUpTable[_offset] = i;\n      }\n    }\n    // If the coordinates generated by the first and last letters are out of bounds,\n    // or the lookup table contains -1 at the coordinates, then the word is not valid.\n    var x = word[0].toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0);\n    var y = word[wordLength == 4 ? 3 : 1].toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0);\n    assert_1.default(0 <= x && x < dim && 0 <= y && y < dim, 'Invalid Bytewords: invalid word');\n    var offset = y * dim + x;\n    var value = bytewordsLookUpTable[offset];\n    assert_1.default(value !== -1, 'Invalid Bytewords: value not in lookup table');\n    // If we're decoding a full four-letter word, verify that the two middle letters are correct.\n    if (wordLength == BYTEWORD_LENGTH) {\n      var _byteword = getWord(value);\n      var c1 = word[1].toLowerCase();\n      var c2 = word[2].toLowerCase();\n      assert_1.default(c1 === _byteword[1] && c2 === _byteword[2], 'Invalid Bytewords: invalid middle letters of word');\n    }\n    // Successful decode.\n    return Buffer.from([value]).toString('hex');\n  };\n  var _decode = function _decode(string, separator, wordLength) {\n    var words = wordLength == BYTEWORD_LENGTH ? string.split(separator) : _$$_REQUIRE(_dependencyMap[3], \"./utils\").partition(string, 2);\n    var decodedString = words.map(function (word) {\n      return decodeWord(word, wordLength);\n    }).join('');\n    assert_1.default(decodedString.length >= 5, 'Invalid Bytewords: invalid decoded string length');\n    var _utils_1$split = _$$_REQUIRE(_dependencyMap[3], \"./utils\").split(Buffer.from(decodedString, 'hex'), 4),\n      _utils_1$split2 = _slicedToArray(_utils_1$split, 2),\n      body = _utils_1$split2[0],\n      bodyChecksum = _utils_1$split2[1];\n    var checksum = _$$_REQUIRE(_dependencyMap[3], \"./utils\").getCRCHex(body); // convert to hex\n    assert_1.default(checksum === bodyChecksum.toString('hex'), 'Invalid Checksum');\n    return body.toString('hex');\n  };\n  var decode = function decode(string) {\n    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : STYLES.MINIMAL;\n    switch (style) {\n      case STYLES.STANDARD:\n        return _decode(string, ' ', BYTEWORD_LENGTH);\n      case STYLES.URI:\n        return _decode(string, '-', BYTEWORD_LENGTH);\n      case STYLES.MINIMAL:\n        return _decode(string, '', MINIMAL_BYTEWORD_LENGTH);\n      default:\n        throw new Error(`Invalid style ${style}`);\n    }\n  };\n  var encode = function encode(string) {\n    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : STYLES.MINIMAL;\n    switch (style) {\n      case STYLES.STANDARD:\n        return encodeWithSeparator(string, ' ');\n      case STYLES.URI:\n        return encodeWithSeparator(string, '-');\n      case STYLES.MINIMAL:\n        return encodeMinimal(string);\n      default:\n        throw new Error(`Invalid style ${style}`);\n    }\n  };\n  exports.default = {\n    decode: decode,\n    encode: encode,\n    STYLES: STYLES\n  };\n});","lineCount":135,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"_$$_REQUIRE"],[4,34,1,13],[4,35,1,13,"_dependencyMap"],[4,49,1,13],[5,2,1,13],[5,6,1,13,"_toConsumableArray"],[5,24,1,13],[5,27,1,13,"_$$_REQUIRE"],[5,38,1,13],[5,39,1,13,"_dependencyMap"],[5,53,1,13],[6,2,2,0],[6,6,2,4,"__importDefault"],[6,21,2,19],[6,24,2,23],[6,28,2,27],[6,32,2,31],[6,36,2,35],[6,37,2,36,"__importDefault"],[6,52,2,51],[6,56,2,56],[6,66,2,66,"mod"],[6,69,2,69],[6,71,2,71],[7,4,3,4],[7,11,3,12,"mod"],[7,14,3,15],[7,18,3,19,"mod"],[7,21,3,22],[7,22,3,23,"__esModule"],[7,32,3,33],[7,35,3,37,"mod"],[7,38,3,40],[7,41,3,43],[8,6,3,45],[8,15,3,54],[8,17,3,56,"mod"],[9,4,3,60],[9,5,3,61],[10,2,4,0],[10,3,4,1],[11,2,5,0,"Object"],[11,8,5,6],[11,9,5,7,"defineProperty"],[11,23,5,21],[11,24,5,22,"exports"],[11,31,5,29],[11,33,5,31],[11,45,5,43],[11,47,5,45],[12,4,5,47,"value"],[12,9,5,52],[12,11,5,54],[13,2,5,59],[13,3,5,60],[13,4,5,61],[14,2,6,0],[14,6,6,6,"assert_1"],[14,14,6,14],[14,17,6,17,"__importDefault"],[14,32,6,32],[14,33,6,33,"require"],[14,44,6,40],[14,45,6,40,"_dependencyMap"],[14,59,6,40],[14,72,6,49],[14,73,6,50],[14,74,6,51],[15,2,8,0],[15,6,8,6,"bytewords"],[15,15,8,15],[15,18,8,18],[15,1044,8,1044],[16,2,9,0],[16,6,9,4,"bytewordsLookUpTable"],[16,26,9,24],[16,29,9,27],[16,31,9,29],[17,2,10,0],[17,6,10,6,"BYTEWORDS_NUM"],[17,19,10,19],[17,22,10,22],[17,25,10,25],[18,2,11,0],[18,6,11,6,"BYTEWORD_LENGTH"],[18,21,11,21],[18,24,11,24],[18,25,11,25],[19,2,12,0],[19,6,12,6,"MINIMAL_BYTEWORD_LENGTH"],[19,29,12,29],[19,32,12,32],[19,33,12,33],[20,2,13,0],[20,6,13,4,"STYLES"],[20,12,13,10],[21,2,14,0],[21,3,14,1],[21,13,14,11,"STYLES"],[21,19,14,17],[21,21,14,19],[22,4,15,4,"STYLES"],[22,10,15,10],[22,11,15,11],[22,21,15,21],[22,22,15,22],[22,25,15,25],[22,35,15,35],[23,4,16,4,"STYLES"],[23,10,16,10],[23,11,16,11],[23,16,16,16],[23,17,16,17],[23,20,16,20],[23,25,16,25],[24,4,17,4,"STYLES"],[24,10,17,10],[24,11,17,11],[24,20,17,20],[24,21,17,21],[24,24,17,24],[24,33,17,33],[25,2,18,0],[25,3,18,1],[25,5,18,3,"STYLES"],[25,11,18,9],[25,16,18,14,"STYLES"],[25,22,18,20],[25,25,18,23],[25,26,18,24],[25,27,18,25],[25,28,18,26],[25,29,18,27],[26,2,19,0],[26,6,19,6,"getWord"],[26,13,19,13],[26,16,19,16],[26,25,19,6,"getWord"],[26,32,19,13,"getWord"],[26,33,19,17,"index"],[26,38,19,22],[26,40,19,27],[27,4,20,4],[27,11,20,11,"bytewords"],[27,20,20,20],[27,21,20,21,"slice"],[27,26,20,26],[27,27,20,27,"index"],[27,32,20,32],[27,35,20,35,"BYTEWORD_LENGTH"],[27,50,20,50],[27,52,20,53,"index"],[27,57,20,58],[27,60,20,61,"BYTEWORD_LENGTH"],[27,75,20,76],[27,78,20,80,"BYTEWORD_LENGTH"],[27,93,20,95],[27,94,20,96],[28,2,21,0],[28,3,21,1],[29,2,22,0],[29,6,22,6,"getMinimalWord"],[29,20,22,20],[29,23,22,23],[29,32,22,6,"getMinimalWord"],[29,46,22,20,"getMinimalWord"],[29,47,22,24,"index"],[29,52,22,29],[29,54,22,34],[30,4,23,4],[30,8,23,10,"byteword"],[30,16,23,18],[30,19,23,21,"getWord"],[30,26,23,28],[30,27,23,29,"index"],[30,32,23,34],[30,33,23,35],[31,4,24,4],[31,11,24,11],[31,14,24,14,"byteword"],[31,22,24,22],[31,23,24,23],[31,24,24,24],[31,25,24,25],[31,28,24,28,"byteword"],[31,36,24,36],[31,37,24,37,"BYTEWORD_LENGTH"],[31,52,24,52],[31,55,24,55],[31,56,24,56],[31,57,24,57],[31,59,24,59],[32,2,25,0],[32,3,25,1],[33,2,26,0],[33,6,26,6,"addCRC"],[33,12,26,12],[33,15,26,15],[33,24,26,6,"addCRC"],[33,30,26,12,"addCRC"],[33,31,26,16,"string"],[33,37,26,22],[33,39,26,27],[34,4,27,4],[34,8,27,10,"crc"],[34,11,27,13],[34,14,27,16,"_$$_REQUIRE"],[34,25,27,16],[34,26,27,16,"_dependencyMap"],[34,40,27,16],[34,56,27,24,"getCRCHex"],[34,65,27,33],[34,66,27,34,"Buffer"],[34,72,27,40],[34,73,27,41,"from"],[34,77,27,45],[34,78,27,46,"string"],[34,84,27,52],[34,86,27,54],[34,91,27,59],[34,92,27,60],[34,93,27,61],[35,4,28,4],[35,11,28,11],[35,14,28,14,"string"],[35,20,28,20],[35,23,28,23,"crc"],[35,26,28,26],[35,28,28,28],[36,2,29,0],[36,3,29,1],[37,2,30,0],[37,6,30,6,"encodeWithSeparator"],[37,25,30,25],[37,28,30,28],[37,37,30,6,"encodeWithSeparator"],[37,56,30,25,"encodeWithSeparator"],[37,57,30,29,"word"],[37,61,30,33],[37,63,30,35,"separator"],[37,72,30,44],[37,74,30,49],[38,4,31,4],[38,8,31,10,"crcAppendedWord"],[38,23,31,25],[38,26,31,28,"addCRC"],[38,32,31,34],[38,33,31,35,"word"],[38,37,31,39],[38,38,31,40],[39,4,32,4],[39,8,32,10,"crcWordBuff"],[39,19,32,21],[39,22,32,24,"Buffer"],[39,28,32,30],[39,29,32,31,"from"],[39,33,32,35],[39,34,32,36,"crcAppendedWord"],[39,49,32,51],[39,51,32,53],[39,56,32,58],[39,57,32,59],[40,4,33,4],[40,8,33,10,"result"],[40,14,33,16],[40,17,33,19,"crcWordBuff"],[40,28,33,30],[40,29,33,31,"reduce"],[40,35,33,37],[40,36,33,38],[40,46,33,39,"result"],[40,52,33,45],[40,54,33,47,"w"],[40,55,33,48],[41,6,33,48],[41,16,33,48,"concat"],[41,22,33,48],[41,23,33,48,"_toConsumableArray"],[41,41,33,48],[41,42,33,58,"result"],[41,48,33,64],[41,52,33,66,"getWord"],[41,59,33,73],[41,60,33,74,"w"],[41,61,33,75],[41,62,33,76],[42,4,33,76],[42,5,33,78],[42,7,33,80],[42,9,33,82],[42,10,33,83],[43,4,34,4],[43,11,34,11,"result"],[43,17,34,17],[43,18,34,18,"join"],[43,22,34,22],[43,23,34,23,"separator"],[43,32,34,32],[43,33,34,33],[44,2,35,0],[44,3,35,1],[45,2,36,0],[45,6,36,6,"encodeMinimal"],[45,19,36,19],[45,22,36,22],[45,31,36,6,"encodeMinimal"],[45,44,36,19,"encodeMinimal"],[45,45,36,23,"word"],[45,49,36,27],[45,51,36,32],[46,4,37,4],[46,8,37,10,"crcAppendedWord"],[46,23,37,25],[46,26,37,28,"addCRC"],[46,32,37,34],[46,33,37,35,"word"],[46,37,37,39],[46,38,37,40],[47,4,38,4],[47,8,38,10,"crcWordBuff"],[47,19,38,21],[47,22,38,24,"Buffer"],[47,28,38,30],[47,29,38,31,"from"],[47,33,38,35],[47,34,38,36,"crcAppendedWord"],[47,49,38,51],[47,51,38,53],[47,56,38,58],[47,57,38,59],[48,4,39,4],[48,8,39,10,"result"],[48,14,39,16],[48,17,39,19,"crcWordBuff"],[48,28,39,30],[48,29,39,31,"reduce"],[48,35,39,37],[48,36,39,38],[48,46,39,39,"result"],[48,52,39,45],[48,54,39,47,"w"],[48,55,39,48],[49,6,39,48],[49,13,39,53,"result"],[49,19,39,59],[49,22,39,62,"getMinimalWord"],[49,36,39,76],[49,37,39,77,"w"],[49,38,39,78],[49,39,39,79],[50,4,39,79],[50,7,39,81],[50,9,39,83],[50,10,39,84],[51,4,40,4],[51,11,40,11,"result"],[51,17,40,17],[52,2,41,0],[52,3,41,1],[53,2,42,0],[53,6,42,6,"decodeWord"],[53,16,42,16],[53,19,42,19],[53,28,42,6,"decodeWord"],[53,38,42,16,"decodeWord"],[53,39,42,20,"word"],[53,43,42,24],[53,45,42,26,"wordLength"],[53,55,42,36],[53,57,42,41],[54,4,43,4,"assert_1"],[54,12,43,12],[54,13,43,13,"default"],[54,20,43,20],[54,21,43,21,"word"],[54,25,43,25],[54,26,43,26,"length"],[54,32,43,32],[54,37,43,37,"wordLength"],[54,47,43,47],[54,49,43,49],[54,116,43,116],[54,117,43,117],[55,4,44,4],[55,8,44,10,"dim"],[55,11,44,13],[55,14,44,16],[55,16,44,18],[56,4,45,4],[57,4,46,4],[58,4,47,4],[59,4,48,4],[59,8,48,8,"bytewordsLookUpTable"],[59,28,48,28],[59,29,48,29,"length"],[59,35,48,35],[59,40,48,40],[59,41,48,41],[59,43,48,43],[60,6,49,8],[60,10,49,14,"array_len"],[60,19,49,23],[60,22,49,26,"dim"],[60,25,49,29],[60,28,49,32,"dim"],[60,31,49,35],[61,6,50,8,"bytewordsLookUpTable"],[61,26,50,28],[61,29,50,31,"_toConsumableArray"],[61,47,50,31],[61,48,50,35],[61,52,50,39,"Array"],[61,57,50,44],[61,58,50,45,"array_len"],[61,67,50,54],[61,68,50,55],[61,70,50,57,"map"],[61,73,50,60],[61,74,50,61],[62,8,50,61],[62,15,50,67],[62,16,50,68],[62,17,50,69],[63,6,50,69],[63,8,50,70],[64,6,51,8],[64,11,51,13],[64,15,51,17,"i"],[64,16,51,18],[64,19,51,21],[64,20,51,22],[64,22,51,24,"i"],[64,23,51,25],[64,26,51,28,"BYTEWORDS_NUM"],[64,39,51,41],[64,41,51,43,"i"],[64,42,51,44],[64,44,51,46],[64,46,51,48],[65,8,52,12],[65,12,52,18,"byteword"],[65,20,52,26],[65,23,52,29,"getWord"],[65,30,52,36],[65,31,52,37,"i"],[65,32,52,38],[65,33,52,39],[66,8,53,12],[66,12,53,16,"x"],[66,14,53,17],[66,17,53,20,"byteword"],[66,25,53,28],[66,26,53,29],[66,27,53,30],[66,28,53,31],[66,29,53,32,"charCodeAt"],[66,39,53,42],[66,40,53,43],[66,41,53,44],[66,42,53,45],[66,45,53,48],[66,48,53,51],[66,49,53,52,"charCodeAt"],[66,59,53,62],[66,60,53,63],[66,61,53,64],[66,62,53,65],[67,8,54,12],[67,12,54,16,"y"],[67,14,54,17],[67,17,54,20,"byteword"],[67,25,54,28],[67,26,54,29],[67,27,54,30],[67,28,54,31],[67,29,54,32,"charCodeAt"],[67,39,54,42],[67,40,54,43],[67,41,54,44],[67,42,54,45],[67,45,54,48],[67,48,54,51],[67,49,54,52,"charCodeAt"],[67,59,54,62],[67,60,54,63],[67,61,54,64],[67,62,54,65],[68,8,55,12],[68,12,55,16,"offset"],[68,19,55,22],[68,22,55,25,"y"],[68,24,55,26],[68,27,55,29,"dim"],[68,30,55,32],[68,33,55,35,"x"],[68,35,55,36],[69,8,56,12,"bytewordsLookUpTable"],[69,28,56,32],[69,29,56,33,"offset"],[69,36,56,39],[69,37,56,40],[69,40,56,43,"i"],[69,41,56,44],[70,6,57,8],[71,4,58,4],[72,4,59,4],[73,4,60,4],[74,4,61,4],[74,8,61,8,"x"],[74,9,61,9],[74,12,61,13,"word"],[74,16,61,17],[74,17,61,18],[74,18,61,19],[74,19,61,20],[74,20,61,22,"toLowerCase"],[74,31,61,33],[74,32,61,34],[74,33,61,35],[74,34,61,36,"charCodeAt"],[74,44,61,46],[74,45,61,47],[74,46,61,48],[74,47,61,49],[74,50,61,52],[74,53,61,55],[74,54,61,56,"charCodeAt"],[74,64,61,66],[74,65,61,67],[74,66,61,68],[74,67,61,69],[75,4,62,4],[75,8,62,8,"y"],[75,9,62,9],[75,12,62,13,"word"],[75,16,62,17],[75,17,62,18,"wordLength"],[75,27,62,28],[75,31,62,32],[75,32,62,33],[75,35,62,36],[75,36,62,37],[75,39,62,40],[75,40,62,41],[75,41,62,42],[75,42,62,44,"toLowerCase"],[75,53,62,55],[75,54,62,56],[75,55,62,57],[75,56,62,58,"charCodeAt"],[75,66,62,68],[75,67,62,69],[75,68,62,70],[75,69,62,71],[75,72,62,74],[75,75,62,77],[75,76,62,78,"charCodeAt"],[75,86,62,88],[75,87,62,89],[75,88,62,90],[75,89,62,91],[76,4,63,4,"assert_1"],[76,12,63,12],[76,13,63,13,"default"],[76,20,63,20],[76,21,63,21],[76,22,63,22],[76,26,63,26,"x"],[76,27,63,27],[76,31,63,31,"x"],[76,32,63,32],[76,35,63,35,"dim"],[76,38,63,38],[76,42,63,42],[76,43,63,43],[76,47,63,47,"y"],[76,48,63,48],[76,52,63,52,"y"],[76,53,63,53],[76,56,63,56,"dim"],[76,59,63,59],[76,61,63,61],[76,94,63,94],[76,95,63,95],[77,4,64,4],[77,8,64,8,"offset"],[77,14,64,14],[77,17,64,17,"y"],[77,18,64,18],[77,21,64,21,"dim"],[77,24,64,24],[77,27,64,27,"x"],[77,28,64,28],[78,4,65,4],[78,8,65,8,"value"],[78,13,65,13],[78,16,65,16,"bytewordsLookUpTable"],[78,36,65,36],[78,37,65,37,"offset"],[78,43,65,43],[78,44,65,44],[79,4,66,4,"assert_1"],[79,12,66,12],[79,13,66,13,"default"],[79,20,66,20],[79,21,66,21,"value"],[79,26,66,26],[79,31,66,31],[79,32,66,32],[79,33,66,33],[79,35,66,35],[79,81,66,81],[79,82,66,82],[80,4,67,4],[81,4,68,4],[81,8,68,8,"wordLength"],[81,18,68,18],[81,22,68,22,"BYTEWORD_LENGTH"],[81,37,68,37],[81,39,68,39],[82,6,69,8],[82,10,69,14,"byteword"],[82,19,69,22],[82,22,69,25,"getWord"],[82,29,69,32],[82,30,69,33,"value"],[82,35,69,38],[82,36,69,39],[83,6,70,8],[83,10,70,12,"c1"],[83,12,70,14],[83,15,70,17,"word"],[83,19,70,21],[83,20,70,22],[83,21,70,23],[83,22,70,24],[83,23,70,25,"toLowerCase"],[83,34,70,36],[83,35,70,37],[83,36,70,38],[84,6,71,8],[84,10,71,12,"c2"],[84,12,71,14],[84,15,71,17,"word"],[84,19,71,21],[84,20,71,22],[84,21,71,23],[84,22,71,24],[84,23,71,25,"toLowerCase"],[84,34,71,36],[84,35,71,37],[84,36,71,38],[85,6,72,8,"assert_1"],[85,14,72,16],[85,15,72,17,"default"],[85,22,72,24],[85,23,72,25,"c1"],[85,25,72,27],[85,30,72,32,"byteword"],[85,39,72,40],[85,40,72,41],[85,41,72,42],[85,42,72,43],[85,46,72,47,"c2"],[85,48,72,49],[85,53,72,54,"byteword"],[85,62,72,62],[85,63,72,63],[85,64,72,64],[85,65,72,65],[85,67,72,67],[85,118,72,118],[85,119,72,119],[86,4,73,4],[87,4,74,4],[88,4,75,4],[88,11,75,11,"Buffer"],[88,17,75,17],[88,18,75,18,"from"],[88,22,75,22],[88,23,75,23],[88,24,75,24,"value"],[88,29,75,29],[88,30,75,30],[88,31,75,31],[88,32,75,32,"toString"],[88,40,75,40],[88,41,75,41],[88,46,75,46],[88,47,75,47],[89,2,76,0],[89,3,76,1],[90,2,77,0],[90,6,77,6,"_decode"],[90,13,77,13],[90,16,77,16],[90,25,77,6,"_decode"],[90,32,77,13,"_decode"],[90,33,77,17,"string"],[90,39,77,23],[90,41,77,25,"separator"],[90,50,77,34],[90,52,77,36,"wordLength"],[90,62,77,46],[90,64,77,51],[91,4,78,4],[91,8,78,10,"words"],[91,13,78,15],[91,16,78,18,"wordLength"],[91,26,78,28],[91,30,78,32,"BYTEWORD_LENGTH"],[91,45,78,47],[91,48,78,50,"string"],[91,54,78,56],[91,55,78,57,"split"],[91,60,78,62],[91,61,78,63,"separator"],[91,70,78,72],[91,71,78,73],[91,74,78,76,"_$$_REQUIRE"],[91,85,78,76],[91,86,78,76,"_dependencyMap"],[91,100,78,76],[91,116,78,84,"partition"],[91,125,78,93],[91,126,78,94,"string"],[91,132,78,100],[91,134,78,102],[91,135,78,103],[91,136,78,104],[92,4,79,4],[92,8,79,10,"decodedString"],[92,21,79,23],[92,24,79,26,"words"],[92,29,79,31],[92,30,79,32,"map"],[92,33,79,35],[92,34,79,36],[92,44,79,37,"word"],[92,48,79,41],[93,6,79,41],[93,13,79,46,"decodeWord"],[93,23,79,56],[93,24,79,57,"word"],[93,28,79,61],[93,30,79,63,"wordLength"],[93,40,79,73],[93,41,79,74],[94,4,79,74],[94,6,79,75],[94,7,79,76,"join"],[94,11,79,80],[94,12,79,81],[94,14,79,83],[94,15,79,84],[95,4,80,4,"assert_1"],[95,12,80,12],[95,13,80,13,"default"],[95,20,80,20],[95,21,80,21,"decodedString"],[95,34,80,34],[95,35,80,35,"length"],[95,41,80,41],[95,45,80,45],[95,46,80,46],[95,48,80,48],[95,98,80,98],[95,99,80,99],[96,4,81,4],[96,8,81,4,"_utils_1$split"],[96,22,81,4],[96,25,81,33,"_$$_REQUIRE"],[96,36,81,33],[96,37,81,33,"_dependencyMap"],[96,51,81,33],[96,67,81,41,"split"],[96,72,81,46],[96,73,81,47,"Buffer"],[96,79,81,53],[96,80,81,54,"from"],[96,84,81,58],[96,85,81,59,"decodedString"],[96,98,81,72],[96,100,81,74],[96,105,81,79],[96,106,81,80],[96,108,81,82],[96,109,81,83],[96,110,81,84],[97,6,81,84,"_utils_1$split2"],[97,21,81,84],[97,24,81,84,"_slicedToArray"],[97,38,81,84],[97,39,81,84,"_utils_1$split"],[97,53,81,84],[98,6,81,11,"body"],[98,10,81,15],[98,13,81,15,"_utils_1$split2"],[98,28,81,15],[99,6,81,17,"bodyChecksum"],[99,18,81,29],[99,21,81,29,"_utils_1$split2"],[99,36,81,29],[100,4,82,4],[100,8,82,10,"checksum"],[100,16,82,18],[100,19,82,21,"_$$_REQUIRE"],[100,30,82,21],[100,31,82,21,"_dependencyMap"],[100,45,82,21],[100,61,82,29,"getCRCHex"],[100,70,82,38],[100,71,82,39,"body"],[100,75,82,43],[100,76,82,44],[100,77,82,45],[100,78,82,46],[101,4,83,4,"assert_1"],[101,12,83,12],[101,13,83,13,"default"],[101,20,83,20],[101,21,83,21,"checksum"],[101,29,83,29],[101,34,83,34,"bodyChecksum"],[101,46,83,46],[101,47,83,47,"toString"],[101,55,83,55],[101,56,83,56],[101,61,83,61],[101,62,83,62],[101,64,83,64],[101,82,83,82],[101,83,83,83],[102,4,84,4],[102,11,84,11,"body"],[102,15,84,15],[102,16,84,16,"toString"],[102,24,84,24],[102,25,84,25],[102,30,84,30],[102,31,84,31],[103,2,85,0],[103,3,85,1],[104,2,86,0],[104,6,86,6,"decode"],[104,12,86,12],[104,15,86,15],[104,24,86,6,"decode"],[104,30,86,12,"decode"],[104,31,86,16,"string"],[104,37,86,22],[104,39,86,51],[105,4,86,51],[105,8,86,24,"style"],[105,13,86,29],[105,16,86,29,"arguments"],[105,25,86,29],[105,26,86,29,"length"],[105,32,86,29],[105,40,86,29,"arguments"],[105,49,86,29],[105,57,86,29,"undefined"],[105,66,86,29],[105,69,86,29,"arguments"],[105,78,86,29],[105,84,86,32,"STYLES"],[105,90,86,38],[105,91,86,39,"MINIMAL"],[105,98,86,46],[106,4,87,4],[106,12,87,12,"style"],[106,17,87,17],[107,6,88,8],[107,11,88,13,"STYLES"],[107,17,88,19],[107,18,88,20,"STANDARD"],[107,26,88,28],[108,8,89,12],[108,15,89,19,"_decode"],[108,22,89,26],[108,23,89,27,"string"],[108,29,89,33],[108,31,89,35],[108,34,89,38],[108,36,89,40,"BYTEWORD_LENGTH"],[108,51,89,55],[108,52,89,56],[109,6,90,8],[109,11,90,13,"STYLES"],[109,17,90,19],[109,18,90,20,"URI"],[109,21,90,23],[110,8,91,12],[110,15,91,19,"_decode"],[110,22,91,26],[110,23,91,27,"string"],[110,29,91,33],[110,31,91,35],[110,34,91,38],[110,36,91,40,"BYTEWORD_LENGTH"],[110,51,91,55],[110,52,91,56],[111,6,92,8],[111,11,92,13,"STYLES"],[111,17,92,19],[111,18,92,20,"MINIMAL"],[111,25,92,27],[112,8,93,12],[112,15,93,19,"_decode"],[112,22,93,26],[112,23,93,27,"string"],[112,29,93,33],[112,31,93,35],[112,33,93,37],[112,35,93,39,"MINIMAL_BYTEWORD_LENGTH"],[112,58,93,62],[112,59,93,63],[113,6,94,8],[114,8,95,12],[114,14,95,18],[114,18,95,22,"Error"],[114,23,95,27],[114,24,95,28],[114,41,95,45,"style"],[114,46,95,50],[114,48,95,52],[114,49,95,53],[115,4,96,4],[116,2,97,0],[116,3,97,1],[117,2,98,0],[117,6,98,6,"encode"],[117,12,98,12],[117,15,98,15],[117,24,98,6,"encode"],[117,30,98,12,"encode"],[117,31,98,16,"string"],[117,37,98,22],[117,39,98,51],[118,4,98,51],[118,8,98,24,"style"],[118,13,98,29],[118,16,98,29,"arguments"],[118,25,98,29],[118,26,98,29,"length"],[118,32,98,29],[118,40,98,29,"arguments"],[118,49,98,29],[118,57,98,29,"undefined"],[118,66,98,29],[118,69,98,29,"arguments"],[118,78,98,29],[118,84,98,32,"STYLES"],[118,90,98,38],[118,91,98,39,"MINIMAL"],[118,98,98,46],[119,4,99,4],[119,12,99,12,"style"],[119,17,99,17],[120,6,100,8],[120,11,100,13,"STYLES"],[120,17,100,19],[120,18,100,20,"STANDARD"],[120,26,100,28],[121,8,101,12],[121,15,101,19,"encodeWithSeparator"],[121,34,101,38],[121,35,101,39,"string"],[121,41,101,45],[121,43,101,47],[121,46,101,50],[121,47,101,51],[122,6,102,8],[122,11,102,13,"STYLES"],[122,17,102,19],[122,18,102,20,"URI"],[122,21,102,23],[123,8,103,12],[123,15,103,19,"encodeWithSeparator"],[123,34,103,38],[123,35,103,39,"string"],[123,41,103,45],[123,43,103,47],[123,46,103,50],[123,47,103,51],[124,6,104,8],[124,11,104,13,"STYLES"],[124,17,104,19],[124,18,104,20,"MINIMAL"],[124,25,104,27],[125,8,105,12],[125,15,105,19,"encodeMinimal"],[125,28,105,32],[125,29,105,33,"string"],[125,35,105,39],[125,36,105,40],[126,6,106,8],[127,8,107,12],[127,14,107,18],[127,18,107,22,"Error"],[127,23,107,27],[127,24,107,28],[127,41,107,45,"style"],[127,46,107,50],[127,48,107,52],[127,49,107,53],[128,4,108,4],[129,2,109,0],[129,3,109,1],[130,2,110,0,"exports"],[130,9,110,7],[130,10,110,8,"default"],[130,17,110,15],[130,20,110,18],[131,4,111,4,"decode"],[131,10,111,10],[131,12,111,4,"decode"],[131,18,111,10],[132,4,112,4,"encode"],[132,10,112,10],[132,12,112,4,"encode"],[132,18,112,10],[133,4,113,4,"STYLES"],[133,10,113,10],[133,12,113,4,"STYLES"],[134,2,114,0],[134,3,114,1],[135,0,114,2],[135,3]],"functionMap":{"names":["<global>","<anonymous>","getWord","getMinimalWord","addCRC","encodeWithSeparator","crcWordBuff.reduce$argument_0","encodeMinimal","decodeWord","map$argument_0","_decode","words.map$argument_0","decode","encode"],"mappings":"AAA;wDCC;CDE;CCU;CDI;gBEC;CFE;uBGC;CHG;eIC;CJG;4BKC;sCCG,wCD;CLE;sBOC;sCDG,yCC;CPE;mBQC;6DCQ,QD;CR0B;gBUC;oCCE,sCD;CVM;eYC;CZW;eaC;CbW"}},"type":"js/module"}]}