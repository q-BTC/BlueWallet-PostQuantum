{"dependencies":[{"name":"elliptic","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":11,"index":39},"end":{"line":2,"column":33,"index":61}}],"key":"h6RIsoF9GgRhyZAr3TXxz6R4meA="}},{"name":"bn.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":27,"index":27}}],"key":"h/AEHknS6KAnKragIfqHUjGvuRM="}},{"name":"./rfc6979","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":31,"index":131},"end":{"line":4,"column":51,"index":151}}],"key":"4rRtKt8e1zz2viF/8gPDUDVwfhE="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var secp256k1 = new (_$$_REQUIRE(_dependencyMap[0], \"elliptic\").ec)('secp256k1');\n  var ZERO32 = Buffer.alloc(32, 0);\n  var EC_GROUP_ORDER = Buffer.from('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 'hex');\n  var EC_P = Buffer.from('fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f', 'hex');\n  var n = secp256k1.curve.n;\n  var nDiv2 = n.shrn(1);\n  var G = secp256k1.curve.g;\n  var THROW_BAD_PRIVATE = 'Expected Private';\n  var THROW_BAD_POINT = 'Expected Point';\n  var THROW_BAD_TWEAK = 'Expected Tweak';\n  var THROW_BAD_HASH = 'Expected Hash';\n  var THROW_BAD_SIGNATURE = 'Expected Signature';\n  var THROW_BAD_EXTRA_DATA = 'Expected Extra Data (32 bytes)';\n  function isScalar(x) {\n    return x instanceof Uint8Array && x.length === 32;\n  }\n  function isOrderScalar(x) {\n    if (!isScalar(x)) return false;\n    return EC_GROUP_ORDER.compare(x) > 0; // < G\n  }\n  function isPoint(p) {\n    if (!(p instanceof Uint8Array)) return false;\n    if (p.length < 33) return false;\n    var t = p[0];\n    var x = p.subarray(1, 33);\n    if (ZERO32.compare(x) === 0) return false;\n    if (EC_P.compare(x) <= 0) return false;\n    if ((t === 0x02 || t === 0x03) && p.length === 33) {\n      try {\n        decodeFrom(p);\n      } catch (e) {\n        return false;\n      } // TODO: temporary\n      return true;\n    }\n    var y = p.subarray(33);\n    if (ZERO32.compare(y) === 0) return false;\n    if (EC_P.compare(y) <= 0) return false;\n    if (t === 0x04 && p.length === 65) return true;\n    return false;\n  }\n  function __isPointCompressed(p) {\n    return p[0] !== 0x04;\n  }\n  function isPointCompressed(p) {\n    if (!isPoint(p)) return false;\n    return __isPointCompressed(p);\n  }\n  function isPrivate(x) {\n    if (!isScalar(x)) return false;\n    return ZERO32.compare(x) < 0 &&\n    // > 0\n    EC_GROUP_ORDER.compare(x) > 0; // < G\n  }\n  function isSignature(value) {\n    var r = value.subarray(0, 32);\n    var s = value.subarray(32, 64);\n    return value instanceof Uint8Array && value.length === 64 && EC_GROUP_ORDER.compare(r) > 0 && EC_GROUP_ORDER.compare(s) > 0;\n  }\n  function assumeCompression(value, pubkey) {\n    if (value === undefined && pubkey !== undefined) return __isPointCompressed(pubkey);\n    if (value === undefined) return true;\n    return value;\n  }\n  function fromBuffer(d) {\n    return new (_$$_REQUIRE(_dependencyMap[1], \"bn.js\"))(d);\n  }\n  function toBuffer(d) {\n    return d.toArrayLike(Buffer, 'be', 32);\n  }\n  function decodeFrom(P) {\n    return secp256k1.curve.decodePoint(P);\n  }\n  function getEncoded(P, compressed) {\n    return Buffer.from(P._encode(compressed));\n  }\n  function pointAdd(pA, pB, __compressed) {\n    if (!isPoint(pA)) throw new TypeError(THROW_BAD_POINT);\n    if (!isPoint(pB)) throw new TypeError(THROW_BAD_POINT);\n    var a = decodeFrom(pA);\n    var b = decodeFrom(pB);\n    var pp = a.add(b);\n    if (pp.isInfinity()) return null;\n    var compressed = assumeCompression(__compressed, pA);\n    return getEncoded(pp, compressed);\n  }\n  function pointAddScalar(p, tweak, __compressed) {\n    if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT);\n    if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK);\n    var compressed = assumeCompression(__compressed, p);\n    var pp = decodeFrom(p);\n    if (ZERO32.compare(tweak) === 0) return getEncoded(pp, compressed);\n    var tt = fromBuffer(tweak);\n    var qq = G.mul(tt);\n    var uu = pp.add(qq);\n    if (uu.isInfinity()) return null;\n    return getEncoded(uu, compressed);\n  }\n  function pointCompress(p, __compressed) {\n    if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT);\n    var pp = decodeFrom(p);\n    if (pp.isInfinity()) throw new TypeError(THROW_BAD_POINT);\n    var compressed = assumeCompression(__compressed, p);\n    return getEncoded(pp, compressed);\n  }\n  function pointFromScalar(d, __compressed) {\n    if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE);\n    var dd = fromBuffer(d);\n    var pp = G.mul(dd);\n    if (pp.isInfinity()) return null;\n    var compressed = assumeCompression(__compressed);\n    return getEncoded(pp, compressed);\n  }\n  function pointMultiply(p, tweak, __compressed) {\n    if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT);\n    if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK);\n    var compressed = assumeCompression(__compressed, p);\n    var pp = decodeFrom(p);\n    var tt = fromBuffer(tweak);\n    var qq = pp.mul(tt);\n    if (qq.isInfinity()) return null;\n    return getEncoded(qq, compressed);\n  }\n  function privateAdd(d, tweak) {\n    if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE);\n    if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK);\n    var dd = fromBuffer(d);\n    var tt = fromBuffer(tweak);\n    var dt = toBuffer(dd.add(tt).umod(n));\n    if (!isPrivate(dt)) return null;\n    return dt;\n  }\n  function privateSub(d, tweak) {\n    if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE);\n    if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK);\n    var dd = fromBuffer(d);\n    var tt = fromBuffer(tweak);\n    var dt = toBuffer(dd.sub(tt).umod(n));\n    if (!isPrivate(dt)) return null;\n    return dt;\n  }\n  function sign(hash, x) {\n    return __sign(hash, x);\n  }\n  function signWithEntropy(hash, x, addData) {\n    return __sign(hash, x, addData);\n  }\n  function __sign(hash, x, addData) {\n    if (!isScalar(hash)) throw new TypeError(THROW_BAD_HASH);\n    if (!isPrivate(x)) throw new TypeError(THROW_BAD_PRIVATE);\n    if (addData !== undefined && !isScalar(addData)) throw new TypeError(THROW_BAD_EXTRA_DATA);\n    var d = fromBuffer(x);\n    var e = fromBuffer(hash);\n    var r, s;\n    var checkSig = function checkSig(k) {\n      var kI = fromBuffer(k);\n      var Q = G.mul(kI);\n      if (Q.isInfinity()) return false;\n      r = Q.x.umod(n);\n      if (r.isZero() === 0) return false;\n      s = kI.invm(n).mul(e.add(d.mul(r))).umod(n);\n      if (s.isZero() === 0) return false;\n      return true;\n    };\n    _$$_REQUIRE(_dependencyMap[2], \"./rfc6979\")(hash, x, checkSig, isPrivate, addData);\n\n    // enforce low S values, see bip62: 'low s values in signatures'\n    if (s.cmp(nDiv2) > 0) {\n      s = n.sub(s);\n    }\n    var buffer = Buffer.allocUnsafe(64);\n    toBuffer(r).copy(buffer, 0);\n    toBuffer(s).copy(buffer, 32);\n    return buffer;\n  }\n  function verify(hash, q, signature, strict) {\n    if (!isScalar(hash)) throw new TypeError(THROW_BAD_HASH);\n    if (!isPoint(q)) throw new TypeError(THROW_BAD_POINT);\n\n    // 1.4.1 Enforce r and s are both integers in the interval [1, n − 1] (1, isSignature enforces '< n - 1')\n    if (!isSignature(signature)) throw new TypeError(THROW_BAD_SIGNATURE);\n    var Q = decodeFrom(q);\n    var r = fromBuffer(signature.subarray(0, 32));\n    var s = fromBuffer(signature.subarray(32, 64));\n    if (strict && s.cmp(nDiv2) > 0) {\n      return false;\n    }\n\n    // 1.4.1 Enforce r and s are both integers in the interval [1, n − 1] (2, enforces '> 0')\n    if (r.gtn(0) <= 0 /* || r.compareTo(n) >= 0 */) return false;\n    if (s.gtn(0) <= 0 /* || s.compareTo(n) >= 0 */) return false;\n\n    // 1.4.2 H = Hash(M), already done by the user\n    // 1.4.3 e = H\n    var e = fromBuffer(hash);\n\n    // Compute s^-1\n    var sInv = s.invm(n);\n\n    // 1.4.4 Compute u1 = es^−1 mod n\n    //               u2 = rs^−1 mod n\n    var u1 = e.mul(sInv).umod(n);\n    var u2 = r.mul(sInv).umod(n);\n\n    // 1.4.5 Compute R = (xR, yR)\n    //               R = u1G + u2Q\n    var R = G.mulAdd(u1, Q, u2);\n\n    // 1.4.5 (cont.) Enforce R is not at infinity\n    if (R.isInfinity()) return false;\n\n    // 1.4.6 Convert the field element R.x to an integer\n    var xR = R.x;\n\n    // 1.4.7 Set v = xR mod n\n    var v = xR.umod(n);\n\n    // 1.4.8 If v = r, output \"valid\", and if v != r, output \"invalid\"\n    return v.eq(r);\n  }\n  module.exports = {\n    isPoint: isPoint,\n    isPointCompressed: isPointCompressed,\n    isPrivate: isPrivate,\n    pointAdd: pointAdd,\n    pointAddScalar: pointAddScalar,\n    pointCompress: pointCompress,\n    pointFromScalar: pointFromScalar,\n    pointMultiply: pointMultiply,\n    privateAdd: privateAdd,\n    privateSub: privateSub,\n    sign: sign,\n    signWithEntropy: signWithEntropy,\n    verify: verify\n  };\n});","lineCount":237,"map":[[2,2,3,0],[2,6,3,6,"secp256k1"],[2,15,3,15],[2,18,3,18],[2,23,3,18,"_$$_REQUIRE"],[2,34,3,18],[2,35,3,18,"_dependencyMap"],[2,49,3,18],[2,66,3,18,"ec"],[2,68,3,18],[2,70,3,25],[2,81,3,36],[2,82,3,37],[3,2,6,0],[3,6,6,6,"ZERO32"],[3,12,6,12],[3,15,6,15,"Buffer"],[3,21,6,21],[3,22,6,22,"alloc"],[3,27,6,27],[3,28,6,28],[3,30,6,30],[3,32,6,32],[3,33,6,33],[3,34,6,34],[4,2,7,0],[4,6,7,6,"EC_GROUP_ORDER"],[4,20,7,20],[4,23,7,23,"Buffer"],[4,29,7,29],[4,30,7,30,"from"],[4,34,7,34],[4,35,7,35],[4,101,7,101],[4,103,7,103],[4,108,7,108],[4,109,7,109],[5,2,8,0],[5,6,8,6,"EC_P"],[5,10,8,10],[5,13,8,13,"Buffer"],[5,19,8,19],[5,20,8,20,"from"],[5,24,8,24],[5,25,8,25],[5,91,8,91],[5,93,8,93],[5,98,8,98],[5,99,8,99],[6,2,10,0],[6,6,10,6,"n"],[6,7,10,7],[6,10,10,10,"secp256k1"],[6,19,10,19],[6,20,10,20,"curve"],[6,25,10,25],[6,26,10,26,"n"],[6,27,10,27],[7,2,11,0],[7,6,11,6,"nDiv2"],[7,11,11,11],[7,14,11,14,"n"],[7,15,11,15],[7,16,11,16,"shrn"],[7,20,11,20],[7,21,11,21],[7,22,11,22],[7,23,11,23],[8,2,12,0],[8,6,12,6,"G"],[8,7,12,7],[8,10,12,10,"secp256k1"],[8,19,12,19],[8,20,12,20,"curve"],[8,25,12,25],[8,26,12,26,"g"],[8,27,12,27],[9,2,14,0],[9,6,14,6,"THROW_BAD_PRIVATE"],[9,23,14,23],[9,26,14,26],[9,44,14,44],[10,2,15,0],[10,6,15,6,"THROW_BAD_POINT"],[10,21,15,21],[10,24,15,24],[10,40,15,40],[11,2,16,0],[11,6,16,6,"THROW_BAD_TWEAK"],[11,21,16,21],[11,24,16,24],[11,40,16,40],[12,2,17,0],[12,6,17,6,"THROW_BAD_HASH"],[12,20,17,20],[12,23,17,23],[12,38,17,38],[13,2,18,0],[13,6,18,6,"THROW_BAD_SIGNATURE"],[13,25,18,25],[13,28,18,28],[13,48,18,48],[14,2,19,0],[14,6,19,6,"THROW_BAD_EXTRA_DATA"],[14,26,19,26],[14,29,19,29],[14,61,19,61],[15,2,21,0],[15,11,21,9,"isScalar"],[15,19,21,17,"isScalar"],[15,20,21,19,"x"],[15,21,21,20],[15,23,21,22],[16,4,22,2],[16,11,22,10,"x"],[16,12,22,11],[16,24,22,23,"Uint8Array"],[16,34,22,33],[16,38,22,38,"x"],[16,39,22,39],[16,40,22,40,"length"],[16,46,22,46],[16,51,22,51],[16,53,22,53],[17,2,23,0],[18,2,25,0],[18,11,25,9,"isOrderScalar"],[18,24,25,22,"isOrderScalar"],[18,25,25,24,"x"],[18,26,25,25],[18,28,25,27],[19,4,26,2],[19,8,26,6],[19,9,26,7,"isScalar"],[19,17,26,15],[19,18,26,16,"x"],[19,19,26,17],[19,20,26,18],[19,22,26,20],[19,29,26,27],[19,34,26,32],[20,4,27,2],[20,11,27,9,"EC_GROUP_ORDER"],[20,25,27,23],[20,26,27,24,"compare"],[20,33,27,31],[20,34,27,32,"x"],[20,35,27,33],[20,36,27,34],[20,39,27,37],[20,40,27,38],[20,42,27,39],[21,2,28,0],[22,2,30,0],[22,11,30,9,"isPoint"],[22,18,30,16,"isPoint"],[22,19,30,18,"p"],[22,20,30,19],[22,22,30,21],[23,4,31,2],[23,8,31,6],[23,10,31,8,"p"],[23,11,31,9],[23,23,31,21,"Uint8Array"],[23,33,31,31],[23,34,31,32],[23,36,31,34],[23,43,31,41],[23,48,31,46],[24,4,32,2],[24,8,32,6,"p"],[24,9,32,7],[24,10,32,8,"length"],[24,16,32,14],[24,19,32,17],[24,21,32,19],[24,23,32,21],[24,30,32,28],[24,35,32,33],[25,4,34,2],[25,8,34,8,"t"],[25,9,34,9],[25,12,34,12,"p"],[25,13,34,13],[25,14,34,14],[25,15,34,15],[25,16,34,16],[26,4,35,2],[26,8,35,8,"x"],[26,9,35,9],[26,12,35,12,"p"],[26,13,35,13],[26,14,35,14,"subarray"],[26,22,35,22],[26,23,35,23],[26,24,35,24],[26,26,35,26],[26,28,35,28],[26,29,35,29],[27,4,36,2],[27,8,36,6,"ZERO32"],[27,14,36,12],[27,15,36,13,"compare"],[27,22,36,20],[27,23,36,21,"x"],[27,24,36,22],[27,25,36,23],[27,30,36,28],[27,31,36,29],[27,33,36,31],[27,40,36,38],[27,45,36,43],[28,4,37,2],[28,8,37,6,"EC_P"],[28,12,37,10],[28,13,37,11,"compare"],[28,20,37,18],[28,21,37,19,"x"],[28,22,37,20],[28,23,37,21],[28,27,37,25],[28,28,37,26],[28,30,37,28],[28,37,37,35],[28,42,37,40],[29,4,38,2],[29,8,38,6],[29,9,38,7,"t"],[29,10,38,8],[29,15,38,13],[29,19,38,17],[29,23,38,21,"t"],[29,24,38,22],[29,29,38,27],[29,33,38,31],[29,38,38,36,"p"],[29,39,38,37],[29,40,38,38,"length"],[29,46,38,44],[29,51,38,49],[29,53,38,51],[29,55,38,53],[30,6,39,4],[30,10,39,8],[31,8,39,10,"decodeFrom"],[31,18,39,20],[31,19,39,21,"p"],[31,20,39,22],[31,21,39,23],[32,6,39,24],[32,7,39,25],[32,8,39,26],[32,15,39,33,"e"],[32,16,39,34],[32,18,39,36],[33,8,39,38],[33,15,39,45],[33,20,39,50],[34,6,39,51],[34,7,39,52],[34,8,39,53],[35,6,40,4],[35,13,40,11],[35,17,40,15],[36,4,41,2],[37,4,43,2],[37,8,43,8,"y"],[37,9,43,9],[37,12,43,12,"p"],[37,13,43,13],[37,14,43,14,"subarray"],[37,22,43,22],[37,23,43,23],[37,25,43,25],[37,26,43,26],[38,4,44,2],[38,8,44,6,"ZERO32"],[38,14,44,12],[38,15,44,13,"compare"],[38,22,44,20],[38,23,44,21,"y"],[38,24,44,22],[38,25,44,23],[38,30,44,28],[38,31,44,29],[38,33,44,31],[38,40,44,38],[38,45,44,43],[39,4,45,2],[39,8,45,6,"EC_P"],[39,12,45,10],[39,13,45,11,"compare"],[39,20,45,18],[39,21,45,19,"y"],[39,22,45,20],[39,23,45,21],[39,27,45,25],[39,28,45,26],[39,30,45,28],[39,37,45,35],[39,42,45,40],[40,4,46,2],[40,8,46,6,"t"],[40,9,46,7],[40,14,46,12],[40,18,46,16],[40,22,46,20,"p"],[40,23,46,21],[40,24,46,22,"length"],[40,30,46,28],[40,35,46,33],[40,37,46,35],[40,39,46,37],[40,46,46,44],[40,50,46,48],[41,4,47,2],[41,11,47,9],[41,16,47,14],[42,2,48,0],[43,2,50,0],[43,11,50,9,"__isPointCompressed"],[43,30,50,28,"__isPointCompressed"],[43,31,50,30,"p"],[43,32,50,31],[43,34,50,33],[44,4,51,2],[44,11,51,9,"p"],[44,12,51,10],[44,13,51,11],[44,14,51,12],[44,15,51,13],[44,20,51,18],[44,24,51,22],[45,2,52,0],[46,2,54,0],[46,11,54,9,"isPointCompressed"],[46,28,54,26,"isPointCompressed"],[46,29,54,28,"p"],[46,30,54,29],[46,32,54,31],[47,4,55,2],[47,8,55,6],[47,9,55,7,"isPoint"],[47,16,55,14],[47,17,55,15,"p"],[47,18,55,16],[47,19,55,17],[47,21,55,19],[47,28,55,26],[47,33,55,31],[48,4,56,2],[48,11,56,9,"__isPointCompressed"],[48,30,56,28],[48,31,56,29,"p"],[48,32,56,30],[48,33,56,31],[49,2,57,0],[50,2,59,0],[50,11,59,9,"isPrivate"],[50,20,59,18,"isPrivate"],[50,21,59,20,"x"],[50,22,59,21],[50,24,59,23],[51,4,60,2],[51,8,60,6],[51,9,60,7,"isScalar"],[51,17,60,15],[51,18,60,16,"x"],[51,19,60,17],[51,20,60,18],[51,22,60,20],[51,29,60,27],[51,34,60,32],[52,4,61,2],[52,11,61,9,"ZERO32"],[52,17,61,15],[52,18,61,16,"compare"],[52,25,61,23],[52,26,61,24,"x"],[52,27,61,25],[52,28,61,26],[52,31,61,29],[52,32,61,30],[53,4,61,34],[54,4,62,4,"EC_GROUP_ORDER"],[54,18,62,18],[54,19,62,19,"compare"],[54,26,62,26],[54,27,62,27,"x"],[54,28,62,28],[54,29,62,29],[54,32,62,32],[54,33,62,33],[54,35,62,34],[55,2,63,0],[56,2,65,0],[56,11,65,9,"isSignature"],[56,22,65,20,"isSignature"],[56,23,65,22,"value"],[56,28,65,27],[56,30,65,29],[57,4,66,2],[57,8,66,8,"r"],[57,9,66,9],[57,12,66,12,"value"],[57,17,66,17],[57,18,66,18,"subarray"],[57,26,66,26],[57,27,66,27],[57,28,66,28],[57,30,66,30],[57,32,66,32],[57,33,66,33],[58,4,67,2],[58,8,67,8,"s"],[58,9,67,9],[58,12,67,12,"value"],[58,17,67,17],[58,18,67,18,"subarray"],[58,26,67,26],[58,27,67,27],[58,29,67,29],[58,31,67,31],[58,33,67,33],[58,34,67,34],[59,4,68,2],[59,11,68,10,"value"],[59,16,68,15],[59,28,68,27,"Uint8Array"],[59,38,68,37],[59,42,68,42,"value"],[59,47,68,47],[59,48,68,48,"length"],[59,54,68,54],[59,59,68,59],[59,61,68,61],[59,65,69,4,"EC_GROUP_ORDER"],[59,79,69,18],[59,80,69,19,"compare"],[59,87,69,26],[59,88,69,27,"r"],[59,89,69,28],[59,90,69,29],[59,93,69,32],[59,94,69,33],[59,98,70,4,"EC_GROUP_ORDER"],[59,112,70,18],[59,113,70,19,"compare"],[59,120,70,26],[59,121,70,27,"s"],[59,122,70,28],[59,123,70,29],[59,126,70,32],[59,127,70,33],[60,2,71,0],[61,2,73,0],[61,11,73,9,"assumeCompression"],[61,28,73,26,"assumeCompression"],[61,29,73,28,"value"],[61,34,73,33],[61,36,73,35,"pubkey"],[61,42,73,41],[61,44,73,43],[62,4,74,2],[62,8,74,6,"value"],[62,13,74,11],[62,18,74,16,"undefined"],[62,27,74,25],[62,31,74,29,"pubkey"],[62,37,74,35],[62,42,74,40,"undefined"],[62,51,74,49],[62,53,74,51],[62,60,74,58,"__isPointCompressed"],[62,79,74,77],[62,80,74,78,"pubkey"],[62,86,74,84],[62,87,74,85],[63,4,75,2],[63,8,75,6,"value"],[63,13,75,11],[63,18,75,16,"undefined"],[63,27,75,25],[63,29,75,27],[63,36,75,34],[63,40,75,38],[64,4,76,2],[64,11,76,9,"value"],[64,16,76,14],[65,2,77,0],[66,2,79,0],[66,11,79,9,"fromBuffer"],[66,21,79,19,"fromBuffer"],[66,22,79,21,"d"],[66,23,79,22],[66,25,79,24],[67,4,79,26],[67,11,79,33],[67,16,79,33,"_$$_REQUIRE"],[67,27,79,33],[67,28,79,33,"_dependencyMap"],[67,42,79,33],[67,57,79,40,"d"],[67,58,79,41],[67,59,79,42],[68,2,79,43],[69,2,80,0],[69,11,80,9,"toBuffer"],[69,19,80,17,"toBuffer"],[69,20,80,19,"d"],[69,21,80,20],[69,23,80,22],[70,4,80,24],[70,11,80,31,"d"],[70,12,80,32],[70,13,80,33,"toArrayLike"],[70,24,80,44],[70,25,80,45,"Buffer"],[70,31,80,51],[70,33,80,53],[70,37,80,57],[70,39,80,59],[70,41,80,61],[70,42,80,62],[71,2,80,63],[72,2,81,0],[72,11,81,9,"decodeFrom"],[72,21,81,19,"decodeFrom"],[72,22,81,21,"P"],[72,23,81,22],[72,25,81,24],[73,4,81,26],[73,11,81,33,"secp256k1"],[73,20,81,42],[73,21,81,43,"curve"],[73,26,81,48],[73,27,81,49,"decodePoint"],[73,38,81,60],[73,39,81,61,"P"],[73,40,81,62],[73,41,81,63],[74,2,81,64],[75,2,82,0],[75,11,82,9,"getEncoded"],[75,21,82,19,"getEncoded"],[75,22,82,21,"P"],[75,23,82,22],[75,25,82,24,"compressed"],[75,35,82,34],[75,37,82,36],[76,4,82,38],[76,11,82,45,"Buffer"],[76,17,82,51],[76,18,82,52,"from"],[76,22,82,56],[76,23,82,57,"P"],[76,24,82,58],[76,25,82,59,"_encode"],[76,32,82,66],[76,33,82,67,"compressed"],[76,43,82,77],[76,44,82,78],[76,45,82,79],[77,2,82,80],[78,2,84,0],[78,11,84,9,"pointAdd"],[78,19,84,17,"pointAdd"],[78,20,84,19,"pA"],[78,22,84,21],[78,24,84,23,"pB"],[78,26,84,25],[78,28,84,27,"__compressed"],[78,40,84,39],[78,42,84,41],[79,4,85,2],[79,8,85,6],[79,9,85,7,"isPoint"],[79,16,85,14],[79,17,85,15,"pA"],[79,19,85,17],[79,20,85,18],[79,22,85,20],[79,28,85,26],[79,32,85,30,"TypeError"],[79,41,85,39],[79,42,85,40,"THROW_BAD_POINT"],[79,57,85,55],[79,58,85,56],[80,4,86,2],[80,8,86,6],[80,9,86,7,"isPoint"],[80,16,86,14],[80,17,86,15,"pB"],[80,19,86,17],[80,20,86,18],[80,22,86,20],[80,28,86,26],[80,32,86,30,"TypeError"],[80,41,86,39],[80,42,86,40,"THROW_BAD_POINT"],[80,57,86,55],[80,58,86,56],[81,4,88,2],[81,8,88,8,"a"],[81,9,88,9],[81,12,88,12,"decodeFrom"],[81,22,88,22],[81,23,88,23,"pA"],[81,25,88,25],[81,26,88,26],[82,4,89,2],[82,8,89,8,"b"],[82,9,89,9],[82,12,89,12,"decodeFrom"],[82,22,89,22],[82,23,89,23,"pB"],[82,25,89,25],[82,26,89,26],[83,4,90,2],[83,8,90,8,"pp"],[83,10,90,10],[83,13,90,13,"a"],[83,14,90,14],[83,15,90,15,"add"],[83,18,90,18],[83,19,90,19,"b"],[83,20,90,20],[83,21,90,21],[84,4,91,2],[84,8,91,6,"pp"],[84,10,91,8],[84,11,91,9,"isInfinity"],[84,21,91,19],[84,22,91,20],[84,23,91,21],[84,25,91,23],[84,32,91,30],[84,36,91,34],[85,4,93,2],[85,8,93,8,"compressed"],[85,18,93,18],[85,21,93,21,"assumeCompression"],[85,38,93,38],[85,39,93,39,"__compressed"],[85,51,93,51],[85,53,93,53,"pA"],[85,55,93,55],[85,56,93,56],[86,4,94,2],[86,11,94,9,"getEncoded"],[86,21,94,19],[86,22,94,20,"pp"],[86,24,94,22],[86,26,94,24,"compressed"],[86,36,94,34],[86,37,94,35],[87,2,95,0],[88,2,97,0],[88,11,97,9,"pointAddScalar"],[88,25,97,23,"pointAddScalar"],[88,26,97,25,"p"],[88,27,97,26],[88,29,97,28,"tweak"],[88,34,97,33],[88,36,97,35,"__compressed"],[88,48,97,47],[88,50,97,49],[89,4,98,2],[89,8,98,6],[89,9,98,7,"isPoint"],[89,16,98,14],[89,17,98,15,"p"],[89,18,98,16],[89,19,98,17],[89,21,98,19],[89,27,98,25],[89,31,98,29,"TypeError"],[89,40,98,38],[89,41,98,39,"THROW_BAD_POINT"],[89,56,98,54],[89,57,98,55],[90,4,99,2],[90,8,99,6],[90,9,99,7,"isOrderScalar"],[90,22,99,20],[90,23,99,21,"tweak"],[90,28,99,26],[90,29,99,27],[90,31,99,29],[90,37,99,35],[90,41,99,39,"TypeError"],[90,50,99,48],[90,51,99,49,"THROW_BAD_TWEAK"],[90,66,99,64],[90,67,99,65],[91,4,101,2],[91,8,101,8,"compressed"],[91,18,101,18],[91,21,101,21,"assumeCompression"],[91,38,101,38],[91,39,101,39,"__compressed"],[91,51,101,51],[91,53,101,53,"p"],[91,54,101,54],[91,55,101,55],[92,4,102,2],[92,8,102,8,"pp"],[92,10,102,10],[92,13,102,13,"decodeFrom"],[92,23,102,23],[92,24,102,24,"p"],[92,25,102,25],[92,26,102,26],[93,4,103,2],[93,8,103,6,"ZERO32"],[93,14,103,12],[93,15,103,13,"compare"],[93,22,103,20],[93,23,103,21,"tweak"],[93,28,103,26],[93,29,103,27],[93,34,103,32],[93,35,103,33],[93,37,103,35],[93,44,103,42,"getEncoded"],[93,54,103,52],[93,55,103,53,"pp"],[93,57,103,55],[93,59,103,57,"compressed"],[93,69,103,67],[93,70,103,68],[94,4,105,2],[94,8,105,8,"tt"],[94,10,105,10],[94,13,105,13,"fromBuffer"],[94,23,105,23],[94,24,105,24,"tweak"],[94,29,105,29],[94,30,105,30],[95,4,106,2],[95,8,106,8,"qq"],[95,10,106,10],[95,13,106,13,"G"],[95,14,106,14],[95,15,106,15,"mul"],[95,18,106,18],[95,19,106,19,"tt"],[95,21,106,21],[95,22,106,22],[96,4,107,2],[96,8,107,8,"uu"],[96,10,107,10],[96,13,107,13,"pp"],[96,15,107,15],[96,16,107,16,"add"],[96,19,107,19],[96,20,107,20,"qq"],[96,22,107,22],[96,23,107,23],[97,4,108,2],[97,8,108,6,"uu"],[97,10,108,8],[97,11,108,9,"isInfinity"],[97,21,108,19],[97,22,108,20],[97,23,108,21],[97,25,108,23],[97,32,108,30],[97,36,108,34],[98,4,110,2],[98,11,110,9,"getEncoded"],[98,21,110,19],[98,22,110,20,"uu"],[98,24,110,22],[98,26,110,24,"compressed"],[98,36,110,34],[98,37,110,35],[99,2,111,0],[100,2,113,0],[100,11,113,9,"pointCompress"],[100,24,113,22,"pointCompress"],[100,25,113,24,"p"],[100,26,113,25],[100,28,113,27,"__compressed"],[100,40,113,39],[100,42,113,41],[101,4,114,2],[101,8,114,6],[101,9,114,7,"isPoint"],[101,16,114,14],[101,17,114,15,"p"],[101,18,114,16],[101,19,114,17],[101,21,114,19],[101,27,114,25],[101,31,114,29,"TypeError"],[101,40,114,38],[101,41,114,39,"THROW_BAD_POINT"],[101,56,114,54],[101,57,114,55],[102,4,116,2],[102,8,116,8,"pp"],[102,10,116,10],[102,13,116,13,"decodeFrom"],[102,23,116,23],[102,24,116,24,"p"],[102,25,116,25],[102,26,116,26],[103,4,117,2],[103,8,117,6,"pp"],[103,10,117,8],[103,11,117,9,"isInfinity"],[103,21,117,19],[103,22,117,20],[103,23,117,21],[103,25,117,23],[103,31,117,29],[103,35,117,33,"TypeError"],[103,44,117,42],[103,45,117,43,"THROW_BAD_POINT"],[103,60,117,58],[103,61,117,59],[104,4,119,2],[104,8,119,8,"compressed"],[104,18,119,18],[104,21,119,21,"assumeCompression"],[104,38,119,38],[104,39,119,39,"__compressed"],[104,51,119,51],[104,53,119,53,"p"],[104,54,119,54],[104,55,119,55],[105,4,121,2],[105,11,121,9,"getEncoded"],[105,21,121,19],[105,22,121,20,"pp"],[105,24,121,22],[105,26,121,24,"compressed"],[105,36,121,34],[105,37,121,35],[106,2,122,0],[107,2,124,0],[107,11,124,9,"pointFromScalar"],[107,26,124,24,"pointFromScalar"],[107,27,124,26,"d"],[107,28,124,27],[107,30,124,29,"__compressed"],[107,42,124,41],[107,44,124,43],[108,4,125,2],[108,8,125,6],[108,9,125,7,"isPrivate"],[108,18,125,16],[108,19,125,17,"d"],[108,20,125,18],[108,21,125,19],[108,23,125,21],[108,29,125,27],[108,33,125,31,"TypeError"],[108,42,125,40],[108,43,125,41,"THROW_BAD_PRIVATE"],[108,60,125,58],[108,61,125,59],[109,4,127,2],[109,8,127,8,"dd"],[109,10,127,10],[109,13,127,13,"fromBuffer"],[109,23,127,23],[109,24,127,24,"d"],[109,25,127,25],[109,26,127,26],[110,4,128,2],[110,8,128,8,"pp"],[110,10,128,10],[110,13,128,13,"G"],[110,14,128,14],[110,15,128,15,"mul"],[110,18,128,18],[110,19,128,19,"dd"],[110,21,128,21],[110,22,128,22],[111,4,129,2],[111,8,129,6,"pp"],[111,10,129,8],[111,11,129,9,"isInfinity"],[111,21,129,19],[111,22,129,20],[111,23,129,21],[111,25,129,23],[111,32,129,30],[111,36,129,34],[112,4,131,2],[112,8,131,8,"compressed"],[112,18,131,18],[112,21,131,21,"assumeCompression"],[112,38,131,38],[112,39,131,39,"__compressed"],[112,51,131,51],[112,52,131,52],[113,4,132,2],[113,11,132,9,"getEncoded"],[113,21,132,19],[113,22,132,20,"pp"],[113,24,132,22],[113,26,132,24,"compressed"],[113,36,132,34],[113,37,132,35],[114,2,133,0],[115,2,135,0],[115,11,135,9,"pointMultiply"],[115,24,135,22,"pointMultiply"],[115,25,135,24,"p"],[115,26,135,25],[115,28,135,27,"tweak"],[115,33,135,32],[115,35,135,34,"__compressed"],[115,47,135,46],[115,49,135,48],[116,4,136,2],[116,8,136,6],[116,9,136,7,"isPoint"],[116,16,136,14],[116,17,136,15,"p"],[116,18,136,16],[116,19,136,17],[116,21,136,19],[116,27,136,25],[116,31,136,29,"TypeError"],[116,40,136,38],[116,41,136,39,"THROW_BAD_POINT"],[116,56,136,54],[116,57,136,55],[117,4,137,2],[117,8,137,6],[117,9,137,7,"isOrderScalar"],[117,22,137,20],[117,23,137,21,"tweak"],[117,28,137,26],[117,29,137,27],[117,31,137,29],[117,37,137,35],[117,41,137,39,"TypeError"],[117,50,137,48],[117,51,137,49,"THROW_BAD_TWEAK"],[117,66,137,64],[117,67,137,65],[118,4,139,2],[118,8,139,8,"compressed"],[118,18,139,18],[118,21,139,21,"assumeCompression"],[118,38,139,38],[118,39,139,39,"__compressed"],[118,51,139,51],[118,53,139,53,"p"],[118,54,139,54],[118,55,139,55],[119,4,140,2],[119,8,140,8,"pp"],[119,10,140,10],[119,13,140,13,"decodeFrom"],[119,23,140,23],[119,24,140,24,"p"],[119,25,140,25],[119,26,140,26],[120,4,141,2],[120,8,141,8,"tt"],[120,10,141,10],[120,13,141,13,"fromBuffer"],[120,23,141,23],[120,24,141,24,"tweak"],[120,29,141,29],[120,30,141,30],[121,4,142,2],[121,8,142,8,"qq"],[121,10,142,10],[121,13,142,13,"pp"],[121,15,142,15],[121,16,142,16,"mul"],[121,19,142,19],[121,20,142,20,"tt"],[121,22,142,22],[121,23,142,23],[122,4,143,2],[122,8,143,6,"qq"],[122,10,143,8],[122,11,143,9,"isInfinity"],[122,21,143,19],[122,22,143,20],[122,23,143,21],[122,25,143,23],[122,32,143,30],[122,36,143,34],[123,4,145,2],[123,11,145,9,"getEncoded"],[123,21,145,19],[123,22,145,20,"qq"],[123,24,145,22],[123,26,145,24,"compressed"],[123,36,145,34],[123,37,145,35],[124,2,146,0],[125,2,148,0],[125,11,148,9,"privateAdd"],[125,21,148,19,"privateAdd"],[125,22,148,21,"d"],[125,23,148,22],[125,25,148,24,"tweak"],[125,30,148,29],[125,32,148,31],[126,4,149,2],[126,8,149,6],[126,9,149,7,"isPrivate"],[126,18,149,16],[126,19,149,17,"d"],[126,20,149,18],[126,21,149,19],[126,23,149,21],[126,29,149,27],[126,33,149,31,"TypeError"],[126,42,149,40],[126,43,149,41,"THROW_BAD_PRIVATE"],[126,60,149,58],[126,61,149,59],[127,4,150,2],[127,8,150,6],[127,9,150,7,"isOrderScalar"],[127,22,150,20],[127,23,150,21,"tweak"],[127,28,150,26],[127,29,150,27],[127,31,150,29],[127,37,150,35],[127,41,150,39,"TypeError"],[127,50,150,48],[127,51,150,49,"THROW_BAD_TWEAK"],[127,66,150,64],[127,67,150,65],[128,4,152,2],[128,8,152,8,"dd"],[128,10,152,10],[128,13,152,13,"fromBuffer"],[128,23,152,23],[128,24,152,24,"d"],[128,25,152,25],[128,26,152,26],[129,4,153,2],[129,8,153,8,"tt"],[129,10,153,10],[129,13,153,13,"fromBuffer"],[129,23,153,23],[129,24,153,24,"tweak"],[129,29,153,29],[129,30,153,30],[130,4,154,2],[130,8,154,8,"dt"],[130,10,154,10],[130,13,154,13,"toBuffer"],[130,21,154,21],[130,22,154,22,"dd"],[130,24,154,24],[130,25,154,25,"add"],[130,28,154,28],[130,29,154,29,"tt"],[130,31,154,31],[130,32,154,32],[130,33,154,33,"umod"],[130,37,154,37],[130,38,154,38,"n"],[130,39,154,39],[130,40,154,40],[130,41,154,41],[131,4,155,2],[131,8,155,6],[131,9,155,7,"isPrivate"],[131,18,155,16],[131,19,155,17,"dt"],[131,21,155,19],[131,22,155,20],[131,24,155,22],[131,31,155,29],[131,35,155,33],[132,4,157,2],[132,11,157,9,"dt"],[132,13,157,11],[133,2,158,0],[134,2,160,0],[134,11,160,9,"privateSub"],[134,21,160,19,"privateSub"],[134,22,160,21,"d"],[134,23,160,22],[134,25,160,24,"tweak"],[134,30,160,29],[134,32,160,31],[135,4,161,2],[135,8,161,6],[135,9,161,7,"isPrivate"],[135,18,161,16],[135,19,161,17,"d"],[135,20,161,18],[135,21,161,19],[135,23,161,21],[135,29,161,27],[135,33,161,31,"TypeError"],[135,42,161,40],[135,43,161,41,"THROW_BAD_PRIVATE"],[135,60,161,58],[135,61,161,59],[136,4,162,2],[136,8,162,6],[136,9,162,7,"isOrderScalar"],[136,22,162,20],[136,23,162,21,"tweak"],[136,28,162,26],[136,29,162,27],[136,31,162,29],[136,37,162,35],[136,41,162,39,"TypeError"],[136,50,162,48],[136,51,162,49,"THROW_BAD_TWEAK"],[136,66,162,64],[136,67,162,65],[137,4,164,2],[137,8,164,8,"dd"],[137,10,164,10],[137,13,164,13,"fromBuffer"],[137,23,164,23],[137,24,164,24,"d"],[137,25,164,25],[137,26,164,26],[138,4,165,2],[138,8,165,8,"tt"],[138,10,165,10],[138,13,165,13,"fromBuffer"],[138,23,165,23],[138,24,165,24,"tweak"],[138,29,165,29],[138,30,165,30],[139,4,166,2],[139,8,166,8,"dt"],[139,10,166,10],[139,13,166,13,"toBuffer"],[139,21,166,21],[139,22,166,22,"dd"],[139,24,166,24],[139,25,166,25,"sub"],[139,28,166,28],[139,29,166,29,"tt"],[139,31,166,31],[139,32,166,32],[139,33,166,33,"umod"],[139,37,166,37],[139,38,166,38,"n"],[139,39,166,39],[139,40,166,40],[139,41,166,41],[140,4,167,2],[140,8,167,6],[140,9,167,7,"isPrivate"],[140,18,167,16],[140,19,167,17,"dt"],[140,21,167,19],[140,22,167,20],[140,24,167,22],[140,31,167,29],[140,35,167,33],[141,4,169,2],[141,11,169,9,"dt"],[141,13,169,11],[142,2,170,0],[143,2,172,0],[143,11,172,9,"sign"],[143,15,172,13,"sign"],[143,16,172,15,"hash"],[143,20,172,19],[143,22,172,21,"x"],[143,23,172,22],[143,25,172,24],[144,4,173,2],[144,11,173,9,"__sign"],[144,17,173,15],[144,18,173,16,"hash"],[144,22,173,20],[144,24,173,22,"x"],[144,25,173,23],[144,26,173,24],[145,2,174,0],[146,2,176,0],[146,11,176,9,"signWithEntropy"],[146,26,176,24,"signWithEntropy"],[146,27,176,26,"hash"],[146,31,176,30],[146,33,176,32,"x"],[146,34,176,33],[146,36,176,35,"addData"],[146,43,176,42],[146,45,176,44],[147,4,177,2],[147,11,177,9,"__sign"],[147,17,177,15],[147,18,177,16,"hash"],[147,22,177,20],[147,24,177,22,"x"],[147,25,177,23],[147,27,177,25,"addData"],[147,34,177,32],[147,35,177,33],[148,2,178,0],[149,2,180,0],[149,11,180,9,"__sign"],[149,17,180,15,"__sign"],[149,18,180,17,"hash"],[149,22,180,21],[149,24,180,23,"x"],[149,25,180,24],[149,27,180,26,"addData"],[149,34,180,33],[149,36,180,35],[150,4,181,2],[150,8,181,6],[150,9,181,7,"isScalar"],[150,17,181,15],[150,18,181,16,"hash"],[150,22,181,20],[150,23,181,21],[150,25,181,23],[150,31,181,29],[150,35,181,33,"TypeError"],[150,44,181,42],[150,45,181,43,"THROW_BAD_HASH"],[150,59,181,57],[150,60,181,58],[151,4,182,2],[151,8,182,6],[151,9,182,7,"isPrivate"],[151,18,182,16],[151,19,182,17,"x"],[151,20,182,18],[151,21,182,19],[151,23,182,21],[151,29,182,27],[151,33,182,31,"TypeError"],[151,42,182,40],[151,43,182,41,"THROW_BAD_PRIVATE"],[151,60,182,58],[151,61,182,59],[152,4,183,2],[152,8,183,6,"addData"],[152,15,183,13],[152,20,183,18,"undefined"],[152,29,183,27],[152,33,183,31],[152,34,183,32,"isScalar"],[152,42,183,40],[152,43,183,41,"addData"],[152,50,183,48],[152,51,183,49],[152,53,183,51],[152,59,183,57],[152,63,183,61,"TypeError"],[152,72,183,70],[152,73,183,71,"THROW_BAD_EXTRA_DATA"],[152,93,183,91],[152,94,183,92],[153,4,185,2],[153,8,185,8,"d"],[153,9,185,9],[153,12,185,12,"fromBuffer"],[153,22,185,22],[153,23,185,23,"x"],[153,24,185,24],[153,25,185,25],[154,4,186,2],[154,8,186,8,"e"],[154,9,186,9],[154,12,186,12,"fromBuffer"],[154,22,186,22],[154,23,186,23,"hash"],[154,27,186,27],[154,28,186,28],[155,4,188,2],[155,8,188,6,"r"],[155,9,188,7],[155,11,188,9,"s"],[155,12,188,10],[156,4,189,2],[156,8,189,8,"checkSig"],[156,16,189,16],[156,19,189,19],[156,28,189,8,"checkSig"],[156,36,189,16,"checkSig"],[156,37,189,29,"k"],[156,38,189,30],[156,40,189,32],[157,6,190,4],[157,10,190,10,"kI"],[157,12,190,12],[157,15,190,15,"fromBuffer"],[157,25,190,25],[157,26,190,26,"k"],[157,27,190,27],[157,28,190,28],[158,6,191,4],[158,10,191,10,"Q"],[158,11,191,11],[158,14,191,14,"G"],[158,15,191,15],[158,16,191,16,"mul"],[158,19,191,19],[158,20,191,20,"kI"],[158,22,191,22],[158,23,191,23],[159,6,193,4],[159,10,193,8,"Q"],[159,11,193,9],[159,12,193,10,"isInfinity"],[159,22,193,20],[159,23,193,21],[159,24,193,22],[159,26,193,24],[159,33,193,31],[159,38,193,36],[160,6,195,4,"r"],[160,7,195,5],[160,10,195,8,"Q"],[160,11,195,9],[160,12,195,10,"x"],[160,13,195,11],[160,14,195,12,"umod"],[160,18,195,16],[160,19,195,17,"n"],[160,20,195,18],[160,21,195,19],[161,6,196,4],[161,10,196,8,"r"],[161,11,196,9],[161,12,196,10,"isZero"],[161,18,196,16],[161,19,196,17],[161,20,196,18],[161,25,196,23],[161,26,196,24],[161,28,196,26],[161,35,196,33],[161,40,196,38],[162,6,198,4,"s"],[162,7,198,5],[162,10,198,8,"kI"],[162,12,198,10],[162,13,199,7,"invm"],[162,17,199,11],[162,18,199,12,"n"],[162,19,199,13],[162,20,199,14],[162,21,200,7,"mul"],[162,24,200,10],[162,25,200,11,"e"],[162,26,200,12],[162,27,200,13,"add"],[162,30,200,16],[162,31,200,17,"d"],[162,32,200,18],[162,33,200,19,"mul"],[162,36,200,22],[162,37,200,23,"r"],[162,38,200,24],[162,39,200,25],[162,40,200,26],[162,41,200,27],[162,42,201,7,"umod"],[162,46,201,11],[162,47,201,12,"n"],[162,48,201,13],[162,49,201,14],[163,6,202,4],[163,10,202,8,"s"],[163,11,202,9],[163,12,202,10,"isZero"],[163,18,202,16],[163,19,202,17],[163,20,202,18],[163,25,202,23],[163,26,202,24],[163,28,202,26],[163,35,202,33],[163,40,202,38],[164,6,204,4],[164,13,204,11],[164,17,204,15],[165,4,205,2],[165,5,205,3],[166,4,207,2,"_$$_REQUIRE"],[166,15,207,2],[166,16,207,2,"_dependencyMap"],[166,30,207,2],[166,48,207,25,"hash"],[166,52,207,29],[166,54,207,31,"x"],[166,55,207,32],[166,57,207,34,"checkSig"],[166,65,207,42],[166,67,207,44,"isPrivate"],[166,76,207,53],[166,78,207,55,"addData"],[166,85,207,62],[166,86,207,63],[168,4,209,2],[169,4,210,2],[169,8,210,6,"s"],[169,9,210,7],[169,10,210,8,"cmp"],[169,13,210,11],[169,14,210,12,"nDiv2"],[169,19,210,17],[169,20,210,18],[169,23,210,21],[169,24,210,22],[169,26,210,24],[170,6,211,4,"s"],[170,7,211,5],[170,10,211,8,"n"],[170,11,211,9],[170,12,211,10,"sub"],[170,15,211,13],[170,16,211,14,"s"],[170,17,211,15],[170,18,211,16],[171,4,212,2],[172,4,214,2],[172,8,214,8,"buffer"],[172,14,214,14],[172,17,214,17,"Buffer"],[172,23,214,23],[172,24,214,24,"allocUnsafe"],[172,35,214,35],[172,36,214,36],[172,38,214,38],[172,39,214,39],[173,4,215,2,"toBuffer"],[173,12,215,10],[173,13,215,11,"r"],[173,14,215,12],[173,15,215,13],[173,16,215,14,"copy"],[173,20,215,18],[173,21,215,19,"buffer"],[173,27,215,25],[173,29,215,27],[173,30,215,28],[173,31,215,29],[174,4,216,2,"toBuffer"],[174,12,216,10],[174,13,216,11,"s"],[174,14,216,12],[174,15,216,13],[174,16,216,14,"copy"],[174,20,216,18],[174,21,216,19,"buffer"],[174,27,216,25],[174,29,216,27],[174,31,216,29],[174,32,216,30],[175,4,217,2],[175,11,217,9,"buffer"],[175,17,217,15],[176,2,218,0],[177,2,220,0],[177,11,220,9,"verify"],[177,17,220,15,"verify"],[177,18,220,17,"hash"],[177,22,220,21],[177,24,220,23,"q"],[177,25,220,24],[177,27,220,26,"signature"],[177,36,220,35],[177,38,220,37,"strict"],[177,44,220,43],[177,46,220,45],[178,4,221,2],[178,8,221,6],[178,9,221,7,"isScalar"],[178,17,221,15],[178,18,221,16,"hash"],[178,22,221,20],[178,23,221,21],[178,25,221,23],[178,31,221,29],[178,35,221,33,"TypeError"],[178,44,221,42],[178,45,221,43,"THROW_BAD_HASH"],[178,59,221,57],[178,60,221,58],[179,4,222,2],[179,8,222,6],[179,9,222,7,"isPoint"],[179,16,222,14],[179,17,222,15,"q"],[179,18,222,16],[179,19,222,17],[179,21,222,19],[179,27,222,25],[179,31,222,29,"TypeError"],[179,40,222,38],[179,41,222,39,"THROW_BAD_POINT"],[179,56,222,54],[179,57,222,55],[181,4,224,2],[182,4,225,2],[182,8,225,6],[182,9,225,7,"isSignature"],[182,20,225,18],[182,21,225,19,"signature"],[182,30,225,28],[182,31,225,29],[182,33,225,31],[182,39,225,37],[182,43,225,41,"TypeError"],[182,52,225,50],[182,53,225,51,"THROW_BAD_SIGNATURE"],[182,72,225,70],[182,73,225,71],[183,4,227,2],[183,8,227,8,"Q"],[183,9,227,9],[183,12,227,12,"decodeFrom"],[183,22,227,22],[183,23,227,23,"q"],[183,24,227,24],[183,25,227,25],[184,4,228,2],[184,8,228,8,"r"],[184,9,228,9],[184,12,228,12,"fromBuffer"],[184,22,228,22],[184,23,228,23,"signature"],[184,32,228,32],[184,33,228,33,"subarray"],[184,41,228,41],[184,42,228,42],[184,43,228,43],[184,45,228,45],[184,47,228,47],[184,48,228,48],[184,49,228,49],[185,4,229,2],[185,8,229,8,"s"],[185,9,229,9],[185,12,229,12,"fromBuffer"],[185,22,229,22],[185,23,229,23,"signature"],[185,32,229,32],[185,33,229,33,"subarray"],[185,41,229,41],[185,42,229,42],[185,44,229,44],[185,46,229,46],[185,48,229,48],[185,49,229,49],[185,50,229,50],[186,4,231,2],[186,8,231,6,"strict"],[186,14,231,12],[186,18,231,16,"s"],[186,19,231,17],[186,20,231,18,"cmp"],[186,23,231,21],[186,24,231,22,"nDiv2"],[186,29,231,27],[186,30,231,28],[186,33,231,31],[186,34,231,32],[186,36,231,34],[187,6,232,4],[187,13,232,11],[187,18,232,16],[188,4,233,2],[190,4,235,2],[191,4,236,2],[191,8,236,6,"r"],[191,9,236,7],[191,10,236,8,"gtn"],[191,13,236,11],[191,14,236,12],[191,15,236,13],[191,16,236,14],[191,20,236,18],[191,21,236,19],[191,22,236,20],[191,52,236,50],[191,59,236,57],[191,64,236,62],[192,4,237,2],[192,8,237,6,"s"],[192,9,237,7],[192,10,237,8,"gtn"],[192,13,237,11],[192,14,237,12],[192,15,237,13],[192,16,237,14],[192,20,237,18],[192,21,237,19],[192,22,237,20],[192,52,237,50],[192,59,237,57],[192,64,237,62],[194,4,239,2],[195,4,240,2],[196,4,241,2],[196,8,241,8,"e"],[196,9,241,9],[196,12,241,12,"fromBuffer"],[196,22,241,22],[196,23,241,23,"hash"],[196,27,241,27],[196,28,241,28],[198,4,243,2],[199,4,244,2],[199,8,244,8,"sInv"],[199,12,244,12],[199,15,244,15,"s"],[199,16,244,16],[199,17,244,17,"invm"],[199,21,244,21],[199,22,244,22,"n"],[199,23,244,23],[199,24,244,24],[201,4,246,2],[202,4,247,2],[203,4,248,2],[203,8,248,8,"u1"],[203,10,248,10],[203,13,248,13,"e"],[203,14,248,14],[203,15,248,15,"mul"],[203,18,248,18],[203,19,248,19,"sInv"],[203,23,248,23],[203,24,248,24],[203,25,248,25,"umod"],[203,29,248,29],[203,30,248,30,"n"],[203,31,248,31],[203,32,248,32],[204,4,249,2],[204,8,249,8,"u2"],[204,10,249,10],[204,13,249,13,"r"],[204,14,249,14],[204,15,249,15,"mul"],[204,18,249,18],[204,19,249,19,"sInv"],[204,23,249,23],[204,24,249,24],[204,25,249,25,"umod"],[204,29,249,29],[204,30,249,30,"n"],[204,31,249,31],[204,32,249,32],[206,4,251,2],[207,4,252,2],[208,4,253,2],[208,8,253,8,"R"],[208,9,253,9],[208,12,253,12,"G"],[208,13,253,13],[208,14,253,14,"mulAdd"],[208,20,253,20],[208,21,253,21,"u1"],[208,23,253,23],[208,25,253,25,"Q"],[208,26,253,26],[208,28,253,28,"u2"],[208,30,253,30],[208,31,253,31],[210,4,255,2],[211,4,256,2],[211,8,256,6,"R"],[211,9,256,7],[211,10,256,8,"isInfinity"],[211,20,256,18],[211,21,256,19],[211,22,256,20],[211,24,256,22],[211,31,256,29],[211,36,256,34],[213,4,258,2],[214,4,259,2],[214,8,259,8,"xR"],[214,10,259,10],[214,13,259,13,"R"],[214,14,259,14],[214,15,259,15,"x"],[214,16,259,16],[216,4,261,2],[217,4,262,2],[217,8,262,8,"v"],[217,9,262,9],[217,12,262,12,"xR"],[217,14,262,14],[217,15,262,15,"umod"],[217,19,262,19],[217,20,262,20,"n"],[217,21,262,21],[217,22,262,22],[219,4,264,2],[220,4,265,2],[220,11,265,9,"v"],[220,12,265,10],[220,13,265,11,"eq"],[220,15,265,13],[220,16,265,14,"r"],[220,17,265,15],[220,18,265,16],[221,2,266,0],[222,2,268,0,"module"],[222,8,268,6],[222,9,268,7,"exports"],[222,16,268,14],[222,19,268,17],[223,4,269,2,"isPoint"],[223,11,269,9],[223,13,269,2,"isPoint"],[223,20,269,9],[224,4,270,2,"isPointCompressed"],[224,21,270,19],[224,23,270,2,"isPointCompressed"],[224,40,270,19],[225,4,271,2,"isPrivate"],[225,13,271,11],[225,15,271,2,"isPrivate"],[225,24,271,11],[226,4,272,2,"pointAdd"],[226,12,272,10],[226,14,272,2,"pointAdd"],[226,22,272,10],[227,4,273,2,"pointAddScalar"],[227,18,273,16],[227,20,273,2,"pointAddScalar"],[227,34,273,16],[228,4,274,2,"pointCompress"],[228,17,274,15],[228,19,274,2,"pointCompress"],[228,32,274,15],[229,4,275,2,"pointFromScalar"],[229,19,275,17],[229,21,275,2,"pointFromScalar"],[229,36,275,17],[230,4,276,2,"pointMultiply"],[230,17,276,15],[230,19,276,2,"pointMultiply"],[230,32,276,15],[231,4,277,2,"privateAdd"],[231,14,277,12],[231,16,277,2,"privateAdd"],[231,26,277,12],[232,4,278,2,"privateSub"],[232,14,278,12],[232,16,278,2,"privateSub"],[232,26,278,12],[233,4,279,2,"sign"],[233,8,279,6],[233,10,279,2,"sign"],[233,14,279,6],[234,4,280,2,"signWithEntropy"],[234,19,280,17],[234,21,280,2,"signWithEntropy"],[234,36,280,17],[235,4,281,2,"verify"],[235,10,281,8],[235,12,281,2,"verify"],[236,2,282,0],[236,3,282,1],[237,0,282,1],[237,3]],"functionMap":{"names":["<global>","isScalar","isOrderScalar","isPoint","__isPointCompressed","isPointCompressed","isPrivate","isSignature","assumeCompression","fromBuffer","toBuffer","decodeFrom","getEncoded","pointAdd","pointAddScalar","pointCompress","pointFromScalar","pointMultiply","privateAdd","privateSub","sign","signWithEntropy","__sign","checkSig","verify"],"mappings":"AAA;ACoB;CDE;AEE;CFG;AGE;CHkB;AIE;CJE;AKE;CLG;AME;CNI;AOE;CPM;AQE;CRI;ASE,4CT;AUC,gEV;AWC,iEX;AYC,iFZ;AaE;CbW;AcE;Cdc;AeE;CfS;AgBE;ChBS;AiBE;CjBW;AkBE;ClBU;AmBE;CnBU;AoBE;CpBE;AqBE;CrBE;AsBE;mBCS;GDgB;CtBa;AwBE;CxB8C"}},"type":"js/module"}]}