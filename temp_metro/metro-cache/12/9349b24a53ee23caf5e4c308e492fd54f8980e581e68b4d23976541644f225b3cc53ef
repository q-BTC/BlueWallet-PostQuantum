{"dependencies":[{"name":"./mode","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":30,"index":30}}],"key":"kP3UoMWYBHY2j1qDa+F4rCzyVl0="}},{"name":"./utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":14,"index":45},"end":{"line":2,"column":32,"index":63}}],"key":"Arg6QRuIuy5D/jfcnxX1qJiHjX8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function KanjiData(data) {\n    this.mode = _$$_REQUIRE(_dependencyMap[0], \"./mode\").KANJI;\n    this.data = data;\n  }\n  KanjiData.getBitsLength = function getBitsLength(length) {\n    return length * 13;\n  };\n  KanjiData.prototype.getLength = function getLength() {\n    return this.data.length;\n  };\n  KanjiData.prototype.getBitsLength = function getBitsLength() {\n    return KanjiData.getBitsLength(this.data.length);\n  };\n  KanjiData.prototype.write = function (bitBuffer) {\n    var i;\n\n    // In the Shift JIS system, Kanji characters are represented by a two byte combination.\n    // These byte values are shifted from the JIS X 0208 values.\n    // JIS X 0208 gives details of the shift coded representation.\n    for (i = 0; i < this.data.length; i++) {\n      var value = _$$_REQUIRE(_dependencyMap[1], \"./utils\").toSJIS(this.data[i]);\n\n      // For characters with Shift JIS values from 0x8140 to 0x9FFC:\n      if (value >= 0x8140 && value <= 0x9FFC) {\n        // Subtract 0x8140 from Shift JIS value\n        value -= 0x8140;\n\n        // For characters with Shift JIS values from 0xE040 to 0xEBBF\n      } else if (value >= 0xE040 && value <= 0xEBBF) {\n        // Subtract 0xC140 from Shift JIS value\n        value -= 0xC140;\n      } else {\n        throw new Error('Invalid SJIS character: ' + this.data[i] + '\\n' + 'Make sure your charset is UTF-8');\n      }\n\n      // Multiply most significant byte of result by 0xC0\n      // and add least significant byte to product\n      value = (value >>> 8 & 0xff) * 0xC0 + (value & 0xff);\n\n      // Convert result to a 13-bit binary string\n      bitBuffer.put(value, 13);\n    }\n  };\n  module.exports = KanjiData;\n});","lineCount":46,"map":[[2,2,4,0],[2,11,4,9,"KanjiData"],[2,20,4,18,"KanjiData"],[2,21,4,20,"data"],[2,25,4,24],[2,27,4,26],[3,4,5,2],[3,8,5,6],[3,9,5,7,"mode"],[3,13,5,11],[3,16,5,14,"_$$_REQUIRE"],[3,27,5,14],[3,28,5,14,"_dependencyMap"],[3,42,5,14],[3,57,5,19,"KANJI"],[3,62,5,24],[4,4,6,2],[4,8,6,6],[4,9,6,7,"data"],[4,13,6,11],[4,16,6,14,"data"],[4,20,6,18],[5,2,7,0],[6,2,9,0,"KanjiData"],[6,11,9,9],[6,12,9,10,"getBitsLength"],[6,25,9,23],[6,28,9,26],[6,37,9,35,"getBitsLength"],[6,50,9,48,"getBitsLength"],[6,51,9,50,"length"],[6,57,9,56],[6,59,9,58],[7,4,10,2],[7,11,10,9,"length"],[7,17,10,15],[7,20,10,18],[7,22,10,20],[8,2,11,0],[8,3,11,1],[9,2,13,0,"KanjiData"],[9,11,13,9],[9,12,13,10,"prototype"],[9,21,13,19],[9,22,13,20,"getLength"],[9,31,13,29],[9,34,13,32],[9,43,13,41,"getLength"],[9,52,13,50,"getLength"],[9,53,13,50],[9,55,13,54],[10,4,14,2],[10,11,14,9],[10,15,14,13],[10,16,14,14,"data"],[10,20,14,18],[10,21,14,19,"length"],[10,27,14,25],[11,2,15,0],[11,3,15,1],[12,2,17,0,"KanjiData"],[12,11,17,9],[12,12,17,10,"prototype"],[12,21,17,19],[12,22,17,20,"getBitsLength"],[12,35,17,33],[12,38,17,36],[12,47,17,45,"getBitsLength"],[12,60,17,58,"getBitsLength"],[12,61,17,58],[12,63,17,62],[13,4,18,2],[13,11,18,9,"KanjiData"],[13,20,18,18],[13,21,18,19,"getBitsLength"],[13,34,18,32],[13,35,18,33],[13,39,18,37],[13,40,18,38,"data"],[13,44,18,42],[13,45,18,43,"length"],[13,51,18,49],[13,52,18,50],[14,2,19,0],[14,3,19,1],[15,2,21,0,"KanjiData"],[15,11,21,9],[15,12,21,10,"prototype"],[15,21,21,19],[15,22,21,20,"write"],[15,27,21,25],[15,30,21,28],[15,40,21,38,"bitBuffer"],[15,49,21,47],[15,51,21,49],[16,4,22,2],[16,8,22,6,"i"],[16,9,22,7],[18,4,24,2],[19,4,25,2],[20,4,26,2],[21,4,27,2],[21,9,27,7,"i"],[21,10,27,8],[21,13,27,11],[21,14,27,12],[21,16,27,14,"i"],[21,17,27,15],[21,20,27,18],[21,24,27,22],[21,25,27,23,"data"],[21,29,27,27],[21,30,27,28,"length"],[21,36,27,34],[21,38,27,36,"i"],[21,39,27,37],[21,41,27,39],[21,43,27,41],[22,6,28,4],[22,10,28,8,"value"],[22,15,28,13],[22,18,28,16,"_$$_REQUIRE"],[22,29,28,16],[22,30,28,16,"_dependencyMap"],[22,44,28,16],[22,60,28,22,"toSJIS"],[22,66,28,28],[22,67,28,29],[22,71,28,33],[22,72,28,34,"data"],[22,76,28,38],[22,77,28,39,"i"],[22,78,28,40],[22,79,28,41],[22,80,28,42],[24,6,30,4],[25,6,31,4],[25,10,31,8,"value"],[25,15,31,13],[25,19,31,17],[25,25,31,23],[25,29,31,27,"value"],[25,34,31,32],[25,38,31,36],[25,44,31,42],[25,46,31,44],[26,8,32,6],[27,8,33,6,"value"],[27,13,33,11],[27,17,33,15],[27,23,33,21],[29,8,35,4],[30,6,36,4],[30,7,36,5],[30,13,36,11],[30,17,36,15,"value"],[30,22,36,20],[30,26,36,24],[30,32,36,30],[30,36,36,34,"value"],[30,41,36,39],[30,45,36,43],[30,51,36,49],[30,53,36,51],[31,8,37,6],[32,8,38,6,"value"],[32,13,38,11],[32,17,38,15],[32,23,38,21],[33,6,39,4],[33,7,39,5],[33,13,39,11],[34,8,40,6],[34,14,40,12],[34,18,40,16,"Error"],[34,23,40,21],[34,24,41,8],[34,50,41,34],[34,53,41,37],[34,57,41,41],[34,58,41,42,"data"],[34,62,41,46],[34,63,41,47,"i"],[34,64,41,48],[34,65,41,49],[34,68,41,52],[34,72,41,56],[34,75,42,8],[34,108,42,41],[34,109,42,42],[35,6,43,4],[37,6,45,4],[38,6,46,4],[39,6,47,4,"value"],[39,11,47,9],[39,14,47,13],[39,15,47,15,"value"],[39,20,47,20],[39,25,47,25],[39,26,47,26],[39,29,47,30],[39,33,47,34],[39,37,47,38],[39,41,47,42],[39,45,47,47,"value"],[39,50,47,52],[39,53,47,55],[39,57,47,59],[39,58,47,60],[41,6,49,4],[42,6,50,4,"bitBuffer"],[42,15,50,13],[42,16,50,14,"put"],[42,19,50,17],[42,20,50,18,"value"],[42,25,50,23],[42,27,50,25],[42,29,50,27],[42,30,50,28],[43,4,51,2],[44,2,52,0],[44,3,52,1],[45,2,54,0,"module"],[45,8,54,6],[45,9,54,7,"exports"],[45,16,54,14],[45,19,54,17,"KanjiData"],[45,28,54,26],[46,0,54,26],[46,3]],"functionMap":{"names":["<global>","KanjiData","getBitsLength","getLength","KanjiData.prototype.write"],"mappings":"AAA;ACG;CDG;0BEE;CFE;gCGE;CHE;oCEE;CFE;4BIE;CJ+B"}},"type":"js/module"}]}