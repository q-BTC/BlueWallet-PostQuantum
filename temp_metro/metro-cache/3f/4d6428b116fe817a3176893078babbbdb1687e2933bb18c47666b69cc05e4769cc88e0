{"dependencies":[{"name":"./utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":22,"column":20,"index":849},"end":{"line":22,"column":39,"index":868}},{"start":{"line":21,"column":18,"index":810},"end":{"line":21,"column":35,"index":827}},{"start":{"line":21,"column":18,"index":810},"end":{"line":21,"column":35,"index":827}},{"start":{"line":17,"column":13,"index":639},"end":{"line":17,"column":25,"index":651}},{"start":{"line":19,"column":24,"index":724},"end":{"line":19,"column":47,"index":747}},{"start":{"line":18,"column":23,"index":676},"end":{"line":18,"column":45,"index":698}},{"start":{"line":18,"column":23,"index":676},"end":{"line":18,"column":45,"index":698}},{"start":{"line":20,"column":21,"index":770},"end":{"line":20,"column":41,"index":790}},{"start":{"line":19,"column":24,"index":724},"end":{"line":19,"column":47,"index":747}},{"start":{"line":19,"column":24,"index":724},"end":{"line":19,"column":47,"index":747}},{"start":{"line":23,"column":28,"index":898},"end":{"line":23,"column":55,"index":925}},{"start":{"line":23,"column":28,"index":898},"end":{"line":23,"column":55,"index":925}},{"start":{"line":20,"column":21,"index":770},"end":{"line":20,"column":41,"index":790}},{"start":{"line":23,"column":28,"index":898},"end":{"line":23,"column":55,"index":925}},{"start":{"line":19,"column":24,"index":724},"end":{"line":19,"column":47,"index":747}},{"start":{"line":21,"column":18,"index":810},"end":{"line":21,"column":35,"index":827}},{"start":{"line":21,"column":18,"index":810},"end":{"line":21,"column":35,"index":827}},{"start":{"line":16,"column":12,"index":606},"end":{"line":16,"column":30,"index":624}},{"start":{"line":16,"column":12,"index":606},"end":{"line":16,"column":30,"index":624}}],"key":"Arg6QRuIuy5D/jfcnxX1qJiHjX8="}},{"name":"./char-code-definitions","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":24,"index":454},"end":{"line":12,"column":61,"index":491}},{"start":{"line":13,"column":23,"index":516},"end":{"line":13,"column":59,"index":552}},{"start":{"line":13,"column":23,"index":516},"end":{"line":13,"column":59,"index":552}},{"start":{"line":13,"column":23,"index":516},"end":{"line":13,"column":59,"index":552}},{"start":{"line":8,"column":16,"index":248},"end":{"line":8,"column":45,"index":277}},{"start":{"line":8,"column":16,"index":248},"end":{"line":8,"column":45,"index":277}},{"start":{"line":10,"column":20,"index":340},"end":{"line":10,"column":53,"index":373}},{"start":{"line":13,"column":23,"index":516},"end":{"line":13,"column":59,"index":552}},{"start":{"line":13,"column":23,"index":516},"end":{"line":13,"column":59,"index":552}},{"start":{"line":13,"column":23,"index":516},"end":{"line":13,"column":59,"index":552}},{"start":{"line":13,"column":23,"index":516},"end":{"line":13,"column":59,"index":552}},{"start":{"line":10,"column":20,"index":340},"end":{"line":10,"column":53,"index":373}},{"start":{"line":14,"column":12,"index":566},"end":{"line":14,"column":37,"index":591}},{"start":{"line":13,"column":23,"index":516},"end":{"line":13,"column":59,"index":552}},{"start":{"line":13,"column":23,"index":516},"end":{"line":13,"column":59,"index":552}},{"start":{"line":9,"column":13,"index":292},"end":{"line":9,"column":39,"index":318}},{"start":{"line":10,"column":20,"index":340},"end":{"line":10,"column":53,"index":373}},{"start":{"line":11,"column":20,"index":395},"end":{"line":11,"column":53,"index":428}},{"start":{"line":11,"column":20,"index":395},"end":{"line":11,"column":53,"index":428}},{"start":{"line":12,"column":24,"index":454},"end":{"line":12,"column":61,"index":491}},{"start":{"line":11,"column":20,"index":395},"end":{"line":11,"column":53,"index":428}},{"start":{"line":12,"column":24,"index":454},"end":{"line":12,"column":61,"index":491}},{"start":{"line":10,"column":20,"index":340},"end":{"line":10,"column":53,"index":373}},{"start":{"line":13,"column":23,"index":516},"end":{"line":13,"column":59,"index":552}},{"start":{"line":13,"column":23,"index":516},"end":{"line":13,"column":59,"index":552}},{"start":{"line":13,"column":23,"index":516},"end":{"line":13,"column":59,"index":552}},{"start":{"line":7,"column":26,"index":196},"end":{"line":7,"column":60,"index":230}},{"start":{"line":7,"column":26,"index":196},"end":{"line":7,"column":60,"index":230}}],"key":"x4MUsEEQZGnEfli5zpshTBk5nHM="}},{"name":"./const","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":11,"index":153},"end":{"line":5,"column":25,"index":167}},{"start":{"line":4,"column":16,"index":122},"end":{"line":4,"column":34,"index":140}},{"start":{"line":4,"column":16,"index":122},"end":{"line":4,"column":34,"index":140}}],"key":"hBChfLBmOLDPH08/J2hw0EUOhjM="}},{"name":"../common/TokenStream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":18,"index":18},"end":{"line":1,"column":50,"index":50}}],"key":"vGDH+tOFOSMdeulZRr3iYmyZGhY="}},{"name":"../common/adopt-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":18,"index":70},"end":{"line":2,"column":51,"index":103}},{"start":{"line":2,"column":18,"index":70},"end":{"line":2,"column":51,"index":103}}],"key":"9zv+x4PheedFhp1g6FLc84wbcIY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var OFFSET_MASK = 0x00FFFFFF;\n  var TYPE_SHIFT = 24;\n  function tokenize(source, stream) {\n    function getCharCode(offset) {\n      return offset < sourceLength ? source.charCodeAt(offset) : 0;\n    }\n\n    // Â§ 4.3.3. Consume a numeric token\n    function consumeNumericToken() {\n      // Consume a number and let number be the result.\n      offset = _$$_REQUIRE(_dependencyMap[0], \"./utils\").consumeNumber(source, offset);\n\n      // If the next 3 input code points would start an identifier, then:\n      if (_$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").isIdentifierStart(getCharCode(offset), getCharCode(offset + 1), getCharCode(offset + 2))) {\n        // Create a <dimension-token> with the same value and type flag as number, and a unit set initially to the empty string.\n        // Consume a name. Set the <dimension-token>â€™s unit to the returned value.\n        // Return the <dimension-token>.\n        type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Dimension;\n        offset = _$$_REQUIRE(_dependencyMap[0], \"./utils\").consumeName(source, offset);\n        return;\n      }\n\n      // Otherwise, if the next input code point is U+0025 PERCENTAGE SIGN (%), consume it.\n      if (getCharCode(offset) === 0x0025) {\n        // Create a <percentage-token> with the same value as number, and return it.\n        type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Percentage;\n        offset++;\n        return;\n      }\n\n      // Otherwise, create a <number-token> with the same value and type flag as number, and return it.\n      type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Number;\n    }\n\n    // Â§ 4.3.4. Consume an ident-like token\n    function consumeIdentLikeToken() {\n      var nameStartOffset = offset;\n\n      // Consume a name, and let string be the result.\n      offset = _$$_REQUIRE(_dependencyMap[0], \"./utils\").consumeName(source, offset);\n\n      // If stringâ€™s value is an ASCII case-insensitive match for \"url\",\n      // and the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n      if (_$$_REQUIRE(_dependencyMap[0], \"./utils\").cmpStr(source, nameStartOffset, offset, 'url') && getCharCode(offset) === 0x0028) {\n        // While the next two input code points are whitespace, consume the next input code point.\n        offset = _$$_REQUIRE(_dependencyMap[0], \"./utils\").findWhiteSpaceEnd(source, offset + 1);\n\n        // If the next one or two input code points are U+0022 QUOTATION MARK (\"), U+0027 APOSTROPHE ('),\n        // or whitespace followed by U+0022 QUOTATION MARK (\") or U+0027 APOSTROPHE ('),\n        // then create a <function-token> with its value set to string and return it.\n        if (getCharCode(offset) === 0x0022 || getCharCode(offset) === 0x0027) {\n          type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Function;\n          offset = nameStartOffset + 4;\n          return;\n        }\n\n        // Otherwise, consume a url token, and return it.\n        consumeUrlToken();\n        return;\n      }\n\n      // Otherwise, if the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n      // Create a <function-token> with its value set to string and return it.\n      if (getCharCode(offset) === 0x0028) {\n        type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Function;\n        offset++;\n        return;\n      }\n\n      // Otherwise, create an <ident-token> with its value set to string and return it.\n      type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Ident;\n    }\n\n    // Â§ 4.3.5. Consume a string token\n    function consumeStringToken(endingCodePoint) {\n      // This algorithm may be called with an ending code point, which denotes the code point\n      // that ends the string. If an ending code point is not specified,\n      // the current input code point is used.\n      if (!endingCodePoint) {\n        endingCodePoint = getCharCode(offset++);\n      }\n\n      // Initially create a <string-token> with its value set to the empty string.\n      type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.String;\n\n      // Repeatedly consume the next input code point from the stream:\n      for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n        switch (_$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").charCodeCategory(code)) {\n          // ending code point\n          case endingCodePoint:\n            // Return the <string-token>.\n            offset++;\n            return;\n\n          // EOF\n          case _$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").charCodeCategory.Eof:\n            // This is a parse error. Return the <string-token>.\n            return;\n\n          // newline\n          case _$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").charCodeCategory.WhiteSpace:\n            if (_$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").isNewline(code)) {\n              // This is a parse error. Reconsume the current input code point,\n              // create a <bad-string-token>, and return it.\n              offset += _$$_REQUIRE(_dependencyMap[0], \"./utils\").getNewlineLength(source, offset, code);\n              type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.BadString;\n              return;\n            }\n            break;\n\n          // U+005C REVERSE SOLIDUS (\\)\n          case 0x005C:\n            // If the next input code point is EOF, do nothing.\n            if (offset === source.length - 1) {\n              break;\n            }\n            var nextCode = getCharCode(offset + 1);\n\n            // Otherwise, if the next input code point is a newline, consume it.\n            if (_$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").isNewline(nextCode)) {\n              offset += _$$_REQUIRE(_dependencyMap[0], \"./utils\").getNewlineLength(source, offset + 1, nextCode);\n            } else if (_$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").isValidEscape(code, nextCode)) {\n              // Otherwise, (the stream starts with a valid escape) consume\n              // an escaped code point and append the returned code point to\n              // the <string-token>â€™s value.\n              offset = _$$_REQUIRE(_dependencyMap[0], \"./utils\").consumeEscaped(source, offset) - 1;\n            }\n            break;\n\n          // anything else\n          // Append the current input code point to the <string-token>â€™s value.\n        }\n      }\n    }\n\n    // Â§ 4.3.6. Consume a url token\n    // Note: This algorithm assumes that the initial \"url(\" has already been consumed.\n    // This algorithm also assumes that itâ€™s being called to consume an \"unquoted\" value, like url(foo).\n    // A quoted value, like url(\"foo\"), is parsed as a <function-token>. Consume an ident-like token\n    // automatically handles this distinction; this algorithm shouldnâ€™t be called directly otherwise.\n    function consumeUrlToken() {\n      // Initially create a <url-token> with its value set to the empty string.\n      type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Url;\n\n      // Consume as much whitespace as possible.\n      offset = _$$_REQUIRE(_dependencyMap[0], \"./utils\").findWhiteSpaceEnd(source, offset);\n\n      // Repeatedly consume the next input code point from the stream:\n      for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n        switch (_$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").charCodeCategory(code)) {\n          // U+0029 RIGHT PARENTHESIS ())\n          case 0x0029:\n            // Return the <url-token>.\n            offset++;\n            return;\n\n          // EOF\n          case _$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").charCodeCategory.Eof:\n            // This is a parse error. Return the <url-token>.\n            return;\n\n          // whitespace\n          case _$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").charCodeCategory.WhiteSpace:\n            // Consume as much whitespace as possible.\n            offset = _$$_REQUIRE(_dependencyMap[0], \"./utils\").findWhiteSpaceEnd(source, offset);\n\n            // If the next input code point is U+0029 RIGHT PARENTHESIS ()) or EOF,\n            // consume it and return the <url-token>\n            // (if EOF was encountered, this is a parse error);\n            if (getCharCode(offset) === 0x0029 || offset >= source.length) {\n              if (offset < source.length) {\n                offset++;\n              }\n              return;\n            }\n\n            // otherwise, consume the remnants of a bad url, create a <bad-url-token>,\n            // and return it.\n            offset = _$$_REQUIRE(_dependencyMap[0], \"./utils\").consumeBadUrlRemnants(source, offset);\n            type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.BadUrl;\n            return;\n\n          // U+0022 QUOTATION MARK (\")\n          // U+0027 APOSTROPHE (')\n          // U+0028 LEFT PARENTHESIS (()\n          // non-printable code point\n          case 0x0022:\n          case 0x0027:\n          case 0x0028:\n          case _$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").charCodeCategory.NonPrintable:\n            // This is a parse error. Consume the remnants of a bad url,\n            // create a <bad-url-token>, and return it.\n            offset = _$$_REQUIRE(_dependencyMap[0], \"./utils\").consumeBadUrlRemnants(source, offset);\n            type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.BadUrl;\n            return;\n\n          // U+005C REVERSE SOLIDUS (\\)\n          case 0x005C:\n            // If the stream starts with a valid escape, consume an escaped code point and\n            // append the returned code point to the <url-token>â€™s value.\n            if (_$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").isValidEscape(code, getCharCode(offset + 1))) {\n              offset = _$$_REQUIRE(_dependencyMap[0], \"./utils\").consumeEscaped(source, offset) - 1;\n              break;\n            }\n\n            // Otherwise, this is a parse error. Consume the remnants of a bad url,\n            // create a <bad-url-token>, and return it.\n            offset = _$$_REQUIRE(_dependencyMap[0], \"./utils\").consumeBadUrlRemnants(source, offset);\n            type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.BadUrl;\n            return;\n\n          // anything else\n          // Append the current input code point to the <url-token>â€™s value.\n        }\n      }\n    }\n    if (!stream) {\n      stream = new (_$$_REQUIRE(_dependencyMap[3], \"../common/TokenStream\"))();\n    }\n\n    // ensure source is a string\n    source = String(source || '');\n    var sourceLength = source.length;\n    var offsetAndType = _$$_REQUIRE(_dependencyMap[4], \"../common/adopt-buffer\")(stream.offsetAndType, sourceLength + 1); // +1 because of eof-token\n    var balance = _$$_REQUIRE(_dependencyMap[4], \"../common/adopt-buffer\")(stream.balance, sourceLength + 1);\n    var tokenCount = 0;\n    var start = _$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").isBOM(getCharCode(0));\n    var offset = start;\n    var balanceCloseType = 0;\n    var balanceStart = 0;\n    var balancePrev = 0;\n\n    // https://drafts.csswg.org/css-syntax-3/#consume-token\n    // Â§ 4.3.1. Consume a token\n    while (offset < sourceLength) {\n      var code = source.charCodeAt(offset);\n      var type = 0;\n      balance[tokenCount] = sourceLength;\n      switch (_$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").charCodeCategory(code)) {\n        // whitespace\n        case _$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").charCodeCategory.WhiteSpace:\n          // Consume as much whitespace as possible. Return a <whitespace-token>.\n          type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.WhiteSpace;\n          offset = _$$_REQUIRE(_dependencyMap[0], \"./utils\").findWhiteSpaceEnd(source, offset + 1);\n          break;\n\n        // U+0022 QUOTATION MARK (\")\n        case 0x0022:\n          // Consume a string token and return it.\n          consumeStringToken();\n          break;\n\n        // U+0023 NUMBER SIGN (#)\n        case 0x0023:\n          // If the next input code point is a name code point or the next two input code points are a valid escape, then:\n          if (_$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").isName(getCharCode(offset + 1)) || _$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").isValidEscape(getCharCode(offset + 1), getCharCode(offset + 2))) {\n            // Create a <hash-token>.\n            type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Hash;\n\n            // If the next 3 input code points would start an identifier, set the <hash-token>â€™s type flag to \"id\".\n            // if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n            //     // TODO: set id flag\n            // }\n\n            // Consume a name, and set the <hash-token>â€™s value to the returned string.\n            offset = _$$_REQUIRE(_dependencyMap[0], \"./utils\").consumeName(source, offset + 1);\n\n            // Return the <hash-token>.\n          } else {\n            // Otherwise, return a <delim-token> with its value set to the current input code point.\n            type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+0027 APOSTROPHE (')\n        case 0x0027:\n          // Consume a string token and return it.\n          consumeStringToken();\n          break;\n\n        // U+0028 LEFT PARENTHESIS (()\n        case 0x0028:\n          // Return a <(-token>.\n          type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.LeftParenthesis;\n          offset++;\n          break;\n\n        // U+0029 RIGHT PARENTHESIS ())\n        case 0x0029:\n          // Return a <)-token>.\n          type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.RightParenthesis;\n          offset++;\n          break;\n\n        // U+002B PLUS SIGN (+)\n        case 0x002B:\n          // If the input stream starts with a number, ...\n          if (_$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n            // ... reconsume the current input code point, consume a numeric token, and return it.\n            consumeNumericToken();\n          } else {\n            // Otherwise, return a <delim-token> with its value set to the current input code point.\n            type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+002C COMMA (,)\n        case 0x002C:\n          // Return a <comma-token>.\n          type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Comma;\n          offset++;\n          break;\n\n        // U+002D HYPHEN-MINUS (-)\n        case 0x002D:\n          // If the input stream starts with a number, reconsume the current input code point, consume a numeric token, and return it.\n          if (_$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n            consumeNumericToken();\n          } else {\n            // Otherwise, if the next 2 input code points are U+002D HYPHEN-MINUS U+003E GREATER-THAN SIGN (->), consume them and return a <CDC-token>.\n            if (getCharCode(offset + 1) === 0x002D && getCharCode(offset + 2) === 0x003E) {\n              type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.CDC;\n              offset = offset + 3;\n            } else {\n              // Otherwise, if the input stream starts with an identifier, ...\n              if (_$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").isIdentifierStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                // ... reconsume the current input code point, consume an ident-like token, and return it.\n                consumeIdentLikeToken();\n              } else {\n                // Otherwise, return a <delim-token> with its value set to the current input code point.\n                type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Delim;\n                offset++;\n              }\n            }\n          }\n          break;\n\n        // U+002E FULL STOP (.)\n        case 0x002E:\n          // If the input stream starts with a number, ...\n          if (_$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n            // ... reconsume the current input code point, consume a numeric token, and return it.\n            consumeNumericToken();\n          } else {\n            // Otherwise, return a <delim-token> with its value set to the current input code point.\n            type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+002F SOLIDUS (/)\n        case 0x002F:\n          // If the next two input code point are U+002F SOLIDUS (/) followed by a U+002A ASTERISK (*),\n          if (getCharCode(offset + 1) === 0x002A) {\n            // ... consume them and all following code points up to and including the first U+002A ASTERISK (*)\n            // followed by a U+002F SOLIDUS (/), or up to an EOF code point.\n            type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Comment;\n            offset = source.indexOf('*/', offset + 2) + 2;\n            if (offset === 1) {\n              offset = source.length;\n            }\n          } else {\n            type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+003A COLON (:)\n        case 0x003A:\n          // Return a <colon-token>.\n          type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Colon;\n          offset++;\n          break;\n\n        // U+003B SEMICOLON (;)\n        case 0x003B:\n          // Return a <semicolon-token>.\n          type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Semicolon;\n          offset++;\n          break;\n\n        // U+003C LESS-THAN SIGN (<)\n        case 0x003C:\n          // If the next 3 input code points are U+0021 EXCLAMATION MARK U+002D HYPHEN-MINUS U+002D HYPHEN-MINUS (!--), ...\n          if (getCharCode(offset + 1) === 0x0021 && getCharCode(offset + 2) === 0x002D && getCharCode(offset + 3) === 0x002D) {\n            // ... consume them and return a <CDO-token>.\n            type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.CDO;\n            offset = offset + 4;\n          } else {\n            // Otherwise, return a <delim-token> with its value set to the current input code point.\n            type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+0040 COMMERCIAL AT (@)\n        case 0x0040:\n          // If the next 3 input code points would start an identifier, ...\n          if (_$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n            // ... consume a name, create an <at-keyword-token> with its value set to the returned value, and return it.\n            type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.AtKeyword;\n            offset = _$$_REQUIRE(_dependencyMap[0], \"./utils\").consumeName(source, offset + 1);\n          } else {\n            // Otherwise, return a <delim-token> with its value set to the current input code point.\n            type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+005B LEFT SQUARE BRACKET ([)\n        case 0x005B:\n          // Return a <[-token>.\n          type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.LeftSquareBracket;\n          offset++;\n          break;\n\n        // U+005C REVERSE SOLIDUS (\\)\n        case 0x005C:\n          // If the input stream starts with a valid escape, ...\n          if (_$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").isValidEscape(code, getCharCode(offset + 1))) {\n            // ... reconsume the current input code point, consume an ident-like token, and return it.\n            consumeIdentLikeToken();\n          } else {\n            // Otherwise, this is a parse error. Return a <delim-token> with its value set to the current input code point.\n            type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+005D RIGHT SQUARE BRACKET (])\n        case 0x005D:\n          // Return a <]-token>.\n          type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.RightSquareBracket;\n          offset++;\n          break;\n\n        // U+007B LEFT CURLY BRACKET ({)\n        case 0x007B:\n          // Return a <{-token>.\n          type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.LeftCurlyBracket;\n          offset++;\n          break;\n\n        // U+007D RIGHT CURLY BRACKET (})\n        case 0x007D:\n          // Return a <}-token>.\n          type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.RightCurlyBracket;\n          offset++;\n          break;\n\n        // digit\n        case _$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").charCodeCategory.Digit:\n          // Reconsume the current input code point, consume a numeric token, and return it.\n          consumeNumericToken();\n          break;\n\n        // name-start code point\n        case _$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").charCodeCategory.NameStart:\n          // Reconsume the current input code point, consume an ident-like token, and return it.\n          consumeIdentLikeToken();\n          break;\n\n        // EOF\n        case _$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\").charCodeCategory.Eof:\n          // Return an <EOF-token>.\n          break;\n\n        // anything else\n        default:\n          // Return a <delim-token> with its value set to the current input code point.\n          type = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Delim;\n          offset++;\n      }\n      switch (type) {\n        case balanceCloseType:\n          balancePrev = balanceStart & OFFSET_MASK;\n          balanceStart = balance[balancePrev];\n          balanceCloseType = balanceStart >> TYPE_SHIFT;\n          balance[tokenCount] = balancePrev;\n          balance[balancePrev++] = tokenCount;\n          for (; balancePrev < tokenCount; balancePrev++) {\n            if (balance[balancePrev] === sourceLength) {\n              balance[balancePrev] = tokenCount;\n            }\n          }\n          break;\n        case _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.LeftParenthesis:\n        case _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.Function:\n          balance[tokenCount] = balanceStart;\n          balanceCloseType = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.RightParenthesis;\n          balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;\n          break;\n        case _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.LeftSquareBracket:\n          balance[tokenCount] = balanceStart;\n          balanceCloseType = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.RightSquareBracket;\n          balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;\n          break;\n        case _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.LeftCurlyBracket:\n          balance[tokenCount] = balanceStart;\n          balanceCloseType = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.RightCurlyBracket;\n          balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;\n          break;\n      }\n      offsetAndType[tokenCount++] = type << TYPE_SHIFT | offset;\n    }\n\n    // finalize buffers\n    offsetAndType[tokenCount] = _$$_REQUIRE(_dependencyMap[2], \"./const\").TYPE.EOF << TYPE_SHIFT | offset; // <EOF-token>\n    balance[tokenCount] = sourceLength;\n    balance[sourceLength] = sourceLength; // prevents false positive balance match with any token\n    while (balanceStart !== 0) {\n      balancePrev = balanceStart & OFFSET_MASK;\n      balanceStart = balance[balancePrev];\n      balance[balancePrev] = sourceLength;\n    }\n\n    // update stream\n    stream.source = source;\n    stream.firstCharOffset = start;\n    stream.offsetAndType = offsetAndType;\n    stream.tokenCount = tokenCount;\n    stream.balance = balance;\n    stream.reset();\n    stream.next();\n    return stream;\n  }\n\n  // extend tokenizer with constants\n  Object.keys(_$$_REQUIRE(_dependencyMap[2], \"./const\")).forEach(function (key) {\n    tokenize[key] = _$$_REQUIRE(_dependencyMap[2], \"./const\")[key];\n  });\n\n  // extend tokenizer with static methods from utils\n  Object.keys(_$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\")).forEach(function (key) {\n    tokenize[key] = _$$_REQUIRE(_dependencyMap[1], \"./char-code-definitions\")[key];\n  });\n  Object.keys(_$$_REQUIRE(_dependencyMap[0], \"./utils\")).forEach(function (key) {\n    tokenize[key] = _$$_REQUIRE(_dependencyMap[0], \"./utils\")[key];\n  });\n  module.exports = tokenize;\n});","lineCount":546,"map":[[2,2,25,0],[2,6,25,4,"OFFSET_MASK"],[2,17,25,15],[2,20,25,18],[2,30,25,28],[3,2,26,0],[3,6,26,4,"TYPE_SHIFT"],[3,16,26,14],[3,19,26,17],[3,21,26,19],[4,2,28,0],[4,11,28,9,"tokenize"],[4,19,28,17,"tokenize"],[4,20,28,18,"source"],[4,26,28,24],[4,28,28,26,"stream"],[4,34,28,32],[4,36,28,34],[5,4,29,4],[5,13,29,13,"getCharCode"],[5,24,29,24,"getCharCode"],[5,25,29,25,"offset"],[5,31,29,31],[5,33,29,33],[6,6,30,8],[6,13,30,15,"offset"],[6,19,30,21],[6,22,30,24,"sourceLength"],[6,34,30,36],[6,37,30,39,"source"],[6,43,30,45],[6,44,30,46,"charCodeAt"],[6,54,30,56],[6,55,30,57,"offset"],[6,61,30,63],[6,62,30,64],[6,65,30,67],[6,66,30,68],[7,4,31,4],[9,4,33,4],[10,4,34,4],[10,13,34,13,"consumeNumericToken"],[10,32,34,32,"consumeNumericToken"],[10,33,34,32],[10,35,34,35],[11,6,35,8],[12,6,36,8,"offset"],[12,12,36,14],[12,15,36,17,"_$$_REQUIRE"],[12,26,36,17],[12,27,36,17,"_dependencyMap"],[12,41,36,17],[12,57,36,17,"consumeNumber"],[12,70,36,17],[12,71,36,31,"source"],[12,77,36,37],[12,79,36,39,"offset"],[12,85,36,45],[12,86,36,46],[14,6,38,8],[15,6,39,8],[15,10,39,12,"_$$_REQUIRE"],[15,21,39,12],[15,22,39,12,"_dependencyMap"],[15,36,39,12],[15,68,39,12,"isIdentifierStart"],[15,85,39,12],[15,86,39,30,"getCharCode"],[15,97,39,41],[15,98,39,42,"offset"],[15,104,39,48],[15,105,39,49],[15,107,39,51,"getCharCode"],[15,118,39,62],[15,119,39,63,"offset"],[15,125,39,69],[15,128,39,72],[15,129,39,73],[15,130,39,74],[15,132,39,76,"getCharCode"],[15,143,39,87],[15,144,39,88,"offset"],[15,150,39,94],[15,153,39,97],[15,154,39,98],[15,155,39,99],[15,156,39,100],[15,158,39,102],[16,8,40,12],[17,8,41,12],[18,8,42,12],[19,8,43,12,"type"],[19,12,43,16],[19,15,43,19,"_$$_REQUIRE"],[19,26,43,19],[19,27,43,19,"_dependencyMap"],[19,41,43,19],[19,57,43,19,"TYPE"],[19,61,43,19],[19,62,43,24,"Dimension"],[19,71,43,33],[20,8,44,12,"offset"],[20,14,44,18],[20,17,44,21,"_$$_REQUIRE"],[20,28,44,21],[20,29,44,21,"_dependencyMap"],[20,43,44,21],[20,59,44,21,"consumeName"],[20,70,44,21],[20,71,44,33,"source"],[20,77,44,39],[20,79,44,41,"offset"],[20,85,44,47],[20,86,44,48],[21,8,45,12],[22,6,46,8],[24,6,48,8],[25,6,49,8],[25,10,49,12,"getCharCode"],[25,21,49,23],[25,22,49,24,"offset"],[25,28,49,30],[25,29,49,31],[25,34,49,36],[25,40,49,42],[25,42,49,44],[26,8,50,12],[27,8,51,12,"type"],[27,12,51,16],[27,15,51,19,"_$$_REQUIRE"],[27,26,51,19],[27,27,51,19,"_dependencyMap"],[27,41,51,19],[27,57,51,19,"TYPE"],[27,61,51,19],[27,62,51,24,"Percentage"],[27,72,51,34],[28,8,52,12,"offset"],[28,14,52,18],[28,16,52,20],[29,8,53,12],[30,6,54,8],[32,6,56,8],[33,6,57,8,"type"],[33,10,57,12],[33,13,57,15,"_$$_REQUIRE"],[33,24,57,15],[33,25,57,15,"_dependencyMap"],[33,39,57,15],[33,55,57,15,"TYPE"],[33,59,57,15],[33,60,57,20,"Number"],[33,66,57,26],[34,4,58,4],[36,4,60,4],[37,4,61,4],[37,13,61,13,"consumeIdentLikeToken"],[37,34,61,34,"consumeIdentLikeToken"],[37,35,61,34],[37,37,61,37],[38,6,62,8],[38,10,62,14,"nameStartOffset"],[38,25,62,29],[38,28,62,32,"offset"],[38,34,62,38],[40,6,64,8],[41,6,65,8,"offset"],[41,12,65,14],[41,15,65,17,"_$$_REQUIRE"],[41,26,65,17],[41,27,65,17,"_dependencyMap"],[41,41,65,17],[41,57,65,17,"consumeName"],[41,68,65,17],[41,69,65,29,"source"],[41,75,65,35],[41,77,65,37,"offset"],[41,83,65,43],[41,84,65,44],[43,6,67,8],[44,6,68,8],[45,6,69,8],[45,10,69,12,"_$$_REQUIRE"],[45,21,69,12],[45,22,69,12,"_dependencyMap"],[45,36,69,12],[45,52,69,12,"cmpStr"],[45,58,69,12],[45,59,69,19,"source"],[45,65,69,25],[45,67,69,27,"nameStartOffset"],[45,82,69,42],[45,84,69,44,"offset"],[45,90,69,50],[45,92,69,52],[45,97,69,57],[45,98,69,58],[45,102,69,62,"getCharCode"],[45,113,69,73],[45,114,69,74,"offset"],[45,120,69,80],[45,121,69,81],[45,126,69,86],[45,132,69,92],[45,134,69,94],[46,8,70,12],[47,8,71,12,"offset"],[47,14,71,18],[47,17,71,21,"_$$_REQUIRE"],[47,28,71,21],[47,29,71,21,"_dependencyMap"],[47,43,71,21],[47,59,71,21,"findWhiteSpaceEnd"],[47,76,71,21],[47,77,71,39,"source"],[47,83,71,45],[47,85,71,47,"offset"],[47,91,71,53],[47,94,71,56],[47,95,71,57],[47,96,71,58],[49,8,73,12],[50,8,74,12],[51,8,75,12],[52,8,76,12],[52,12,76,16,"getCharCode"],[52,23,76,27],[52,24,76,28,"offset"],[52,30,76,34],[52,31,76,35],[52,36,76,40],[52,42,76,46],[52,46,77,16,"getCharCode"],[52,57,77,27],[52,58,77,28,"offset"],[52,64,77,34],[52,65,77,35],[52,70,77,40],[52,76,77,46],[52,78,77,48],[53,10,78,16,"type"],[53,14,78,20],[53,17,78,23,"_$$_REQUIRE"],[53,28,78,23],[53,29,78,23,"_dependencyMap"],[53,43,78,23],[53,59,78,23,"TYPE"],[53,63,78,23],[53,64,78,28,"Function"],[53,72,78,36],[54,10,79,16,"offset"],[54,16,79,22],[54,19,79,25,"nameStartOffset"],[54,34,79,40],[54,37,79,43],[54,38,79,44],[55,10,80,16],[56,8,81,12],[58,8,83,12],[59,8,84,12,"consumeUrlToken"],[59,23,84,27],[59,24,84,28],[59,25,84,29],[60,8,85,12],[61,6,86,8],[63,6,88,8],[64,6,89,8],[65,6,90,8],[65,10,90,12,"getCharCode"],[65,21,90,23],[65,22,90,24,"offset"],[65,28,90,30],[65,29,90,31],[65,34,90,36],[65,40,90,42],[65,42,90,44],[66,8,91,12,"type"],[66,12,91,16],[66,15,91,19,"_$$_REQUIRE"],[66,26,91,19],[66,27,91,19,"_dependencyMap"],[66,41,91,19],[66,57,91,19,"TYPE"],[66,61,91,19],[66,62,91,24,"Function"],[66,70,91,32],[67,8,92,12,"offset"],[67,14,92,18],[67,16,92,20],[68,8,93,12],[69,6,94,8],[71,6,96,8],[72,6,97,8,"type"],[72,10,97,12],[72,13,97,15,"_$$_REQUIRE"],[72,24,97,15],[72,25,97,15,"_dependencyMap"],[72,39,97,15],[72,55,97,15,"TYPE"],[72,59,97,15],[72,60,97,20,"Ident"],[72,65,97,25],[73,4,98,4],[75,4,100,4],[76,4,101,4],[76,13,101,13,"consumeStringToken"],[76,31,101,31,"consumeStringToken"],[76,32,101,32,"endingCodePoint"],[76,47,101,47],[76,49,101,49],[77,6,102,8],[78,6,103,8],[79,6,104,8],[80,6,105,8],[80,10,105,12],[80,11,105,13,"endingCodePoint"],[80,26,105,28],[80,28,105,30],[81,8,106,12,"endingCodePoint"],[81,23,106,27],[81,26,106,30,"getCharCode"],[81,37,106,41],[81,38,106,42,"offset"],[81,44,106,48],[81,46,106,50],[81,47,106,51],[82,6,107,8],[84,6,109,8],[85,6,110,8,"type"],[85,10,110,12],[85,13,110,15,"_$$_REQUIRE"],[85,24,110,15],[85,25,110,15,"_dependencyMap"],[85,39,110,15],[85,55,110,15,"TYPE"],[85,59,110,15],[85,60,110,20,"String"],[85,66,110,26],[87,6,112,8],[88,6,113,8],[88,13,113,15,"offset"],[88,19,113,21],[88,22,113,24,"source"],[88,28,113,30],[88,29,113,31,"length"],[88,35,113,37],[88,37,113,39,"offset"],[88,43,113,45],[88,45,113,47],[88,47,113,49],[89,8,114,12],[89,12,114,16,"code"],[89,16,114,20],[89,19,114,23,"source"],[89,25,114,29],[89,26,114,30,"charCodeAt"],[89,36,114,40],[89,37,114,41,"offset"],[89,43,114,47],[89,44,114,48],[90,8,116,12],[90,16,116,20,"_$$_REQUIRE"],[90,27,116,20],[90,28,116,20,"_dependencyMap"],[90,42,116,20],[90,74,116,20,"charCodeCategory"],[90,90,116,20],[90,91,116,37,"code"],[90,95,116,41],[90,96,116,42],[91,10,117,16],[92,10,118,16],[92,15,118,21,"endingCodePoint"],[92,30,118,36],[93,12,119,20],[94,12,120,20,"offset"],[94,18,120,26],[94,20,120,28],[95,12,121,20],[97,10,123,16],[98,10,124,16],[98,15,124,21,"_$$_REQUIRE"],[98,26,124,21],[98,27,124,21,"_dependencyMap"],[98,41,124,21],[98,73,124,21,"charCodeCategory"],[98,89,124,21],[98,90,124,38,"Eof"],[98,93,124,41],[99,12,125,20],[100,12,126,20],[102,10,128,16],[103,10,129,16],[103,15,129,21,"_$$_REQUIRE"],[103,26,129,21],[103,27,129,21,"_dependencyMap"],[103,41,129,21],[103,73,129,21,"charCodeCategory"],[103,89,129,21],[103,90,129,38,"WhiteSpace"],[103,100,129,48],[104,12,130,20],[104,16,130,24,"_$$_REQUIRE"],[104,27,130,24],[104,28,130,24,"_dependencyMap"],[104,42,130,24],[104,74,130,24,"isNewline"],[104,83,130,24],[104,84,130,34,"code"],[104,88,130,38],[104,89,130,39],[104,91,130,41],[105,14,131,24],[106,14,132,24],[107,14,133,24,"offset"],[107,20,133,30],[107,24,133,34,"_$$_REQUIRE"],[107,35,133,34],[107,36,133,34,"_dependencyMap"],[107,50,133,34],[107,66,133,34,"getNewlineLength"],[107,82,133,34],[107,83,133,51,"source"],[107,89,133,57],[107,91,133,59,"offset"],[107,97,133,65],[107,99,133,67,"code"],[107,103,133,71],[107,104,133,72],[108,14,134,24,"type"],[108,18,134,28],[108,21,134,31,"_$$_REQUIRE"],[108,32,134,31],[108,33,134,31,"_dependencyMap"],[108,47,134,31],[108,63,134,31,"TYPE"],[108,67,134,31],[108,68,134,36,"BadString"],[108,77,134,45],[109,14,135,24],[110,12,136,20],[111,12,137,20],[113,10,139,16],[114,10,140,16],[114,15,140,21],[114,21,140,27],[115,12,141,20],[116,12,142,20],[116,16,142,24,"offset"],[116,22,142,30],[116,27,142,35,"source"],[116,33,142,41],[116,34,142,42,"length"],[116,40,142,48],[116,43,142,51],[116,44,142,52],[116,46,142,54],[117,14,143,24],[118,12,144,20],[119,12,146,20],[119,16,146,24,"nextCode"],[119,24,146,32],[119,27,146,35,"getCharCode"],[119,38,146,46],[119,39,146,47,"offset"],[119,45,146,53],[119,48,146,56],[119,49,146,57],[119,50,146,58],[121,12,148,20],[122,12,149,20],[122,16,149,24,"_$$_REQUIRE"],[122,27,149,24],[122,28,149,24,"_dependencyMap"],[122,42,149,24],[122,74,149,24,"isNewline"],[122,83,149,24],[122,84,149,34,"nextCode"],[122,92,149,42],[122,93,149,43],[122,95,149,45],[123,14,150,24,"offset"],[123,20,150,30],[123,24,150,34,"_$$_REQUIRE"],[123,35,150,34],[123,36,150,34,"_dependencyMap"],[123,50,150,34],[123,66,150,34,"getNewlineLength"],[123,82,150,34],[123,83,150,51,"source"],[123,89,150,57],[123,91,150,59,"offset"],[123,97,150,65],[123,100,150,68],[123,101,150,69],[123,103,150,71,"nextCode"],[123,111,150,79],[123,112,150,80],[124,12,151,20],[124,13,151,21],[124,19,151,27],[124,23,151,31,"_$$_REQUIRE"],[124,34,151,31],[124,35,151,31,"_dependencyMap"],[124,49,151,31],[124,81,151,31,"isValidEscape"],[124,94,151,31],[124,95,151,45,"code"],[124,99,151,49],[124,101,151,51,"nextCode"],[124,109,151,59],[124,110,151,60],[124,112,151,62],[125,14,152,24],[126,14,153,24],[127,14,154,24],[128,14,155,24,"offset"],[128,20,155,30],[128,23,155,33,"_$$_REQUIRE"],[128,34,155,33],[128,35,155,33,"_dependencyMap"],[128,49,155,33],[128,65,155,33,"consumeEscaped"],[128,79,155,33],[128,80,155,48,"source"],[128,86,155,54],[128,88,155,56,"offset"],[128,94,155,62],[128,95,155,63],[128,98,155,66],[128,99,155,67],[129,12,156,20],[130,12,157,20],[132,10,159,16],[133,10,160,16],[134,8,161,12],[135,6,162,8],[136,4,163,4],[138,4,165,4],[139,4,166,4],[140,4,167,4],[141,4,168,4],[142,4,169,4],[143,4,170,4],[143,13,170,13,"consumeUrlToken"],[143,28,170,28,"consumeUrlToken"],[143,29,170,28],[143,31,170,31],[144,6,171,8],[145,6,172,8,"type"],[145,10,172,12],[145,13,172,15,"_$$_REQUIRE"],[145,24,172,15],[145,25,172,15,"_dependencyMap"],[145,39,172,15],[145,55,172,15,"TYPE"],[145,59,172,15],[145,60,172,20,"Url"],[145,63,172,23],[147,6,174,8],[148,6,175,8,"offset"],[148,12,175,14],[148,15,175,17,"_$$_REQUIRE"],[148,26,175,17],[148,27,175,17,"_dependencyMap"],[148,41,175,17],[148,57,175,17,"findWhiteSpaceEnd"],[148,74,175,17],[148,75,175,35,"source"],[148,81,175,41],[148,83,175,43,"offset"],[148,89,175,49],[148,90,175,50],[150,6,177,8],[151,6,178,8],[151,13,178,15,"offset"],[151,19,178,21],[151,22,178,24,"source"],[151,28,178,30],[151,29,178,31,"length"],[151,35,178,37],[151,37,178,39,"offset"],[151,43,178,45],[151,45,178,47],[151,47,178,49],[152,8,179,12],[152,12,179,16,"code"],[152,16,179,20],[152,19,179,23,"source"],[152,25,179,29],[152,26,179,30,"charCodeAt"],[152,36,179,40],[152,37,179,41,"offset"],[152,43,179,47],[152,44,179,48],[153,8,181,12],[153,16,181,20,"_$$_REQUIRE"],[153,27,181,20],[153,28,181,20,"_dependencyMap"],[153,42,181,20],[153,74,181,20,"charCodeCategory"],[153,90,181,20],[153,91,181,37,"code"],[153,95,181,41],[153,96,181,42],[154,10,182,16],[155,10,183,16],[155,15,183,21],[155,21,183,27],[156,12,184,20],[157,12,185,20,"offset"],[157,18,185,26],[157,20,185,28],[158,12,186,20],[160,10,188,16],[161,10,189,16],[161,15,189,21,"_$$_REQUIRE"],[161,26,189,21],[161,27,189,21,"_dependencyMap"],[161,41,189,21],[161,73,189,21,"charCodeCategory"],[161,89,189,21],[161,90,189,38,"Eof"],[161,93,189,41],[162,12,190,20],[163,12,191,20],[165,10,193,16],[166,10,194,16],[166,15,194,21,"_$$_REQUIRE"],[166,26,194,21],[166,27,194,21,"_dependencyMap"],[166,41,194,21],[166,73,194,21,"charCodeCategory"],[166,89,194,21],[166,90,194,38,"WhiteSpace"],[166,100,194,48],[167,12,195,20],[168,12,196,20,"offset"],[168,18,196,26],[168,21,196,29,"_$$_REQUIRE"],[168,32,196,29],[168,33,196,29,"_dependencyMap"],[168,47,196,29],[168,63,196,29,"findWhiteSpaceEnd"],[168,80,196,29],[168,81,196,47,"source"],[168,87,196,53],[168,89,196,55,"offset"],[168,95,196,61],[168,96,196,62],[170,12,198,20],[171,12,199,20],[172,12,200,20],[173,12,201,20],[173,16,201,24,"getCharCode"],[173,27,201,35],[173,28,201,36,"offset"],[173,34,201,42],[173,35,201,43],[173,40,201,48],[173,46,201,54],[173,50,201,58,"offset"],[173,56,201,64],[173,60,201,68,"source"],[173,66,201,74],[173,67,201,75,"length"],[173,73,201,81],[173,75,201,83],[174,14,202,24],[174,18,202,28,"offset"],[174,24,202,34],[174,27,202,37,"source"],[174,33,202,43],[174,34,202,44,"length"],[174,40,202,50],[174,42,202,52],[175,16,203,28,"offset"],[175,22,203,34],[175,24,203,36],[176,14,204,24],[177,14,205,24],[178,12,206,20],[180,12,208,20],[181,12,209,20],[182,12,210,20,"offset"],[182,18,210,26],[182,21,210,29,"_$$_REQUIRE"],[182,32,210,29],[182,33,210,29,"_dependencyMap"],[182,47,210,29],[182,63,210,29,"consumeBadUrlRemnants"],[182,84,210,29],[182,85,210,51,"source"],[182,91,210,57],[182,93,210,59,"offset"],[182,99,210,65],[182,100,210,66],[183,12,211,20,"type"],[183,16,211,24],[183,19,211,27,"_$$_REQUIRE"],[183,30,211,27],[183,31,211,27,"_dependencyMap"],[183,45,211,27],[183,61,211,27,"TYPE"],[183,65,211,27],[183,66,211,32,"BadUrl"],[183,72,211,38],[184,12,212,20],[186,10,214,16],[187,10,215,16],[188,10,216,16],[189,10,217,16],[190,10,218,16],[190,15,218,21],[190,21,218,27],[191,10,219,16],[191,15,219,21],[191,21,219,27],[192,10,220,16],[192,15,220,21],[192,21,220,27],[193,10,221,16],[193,15,221,21,"_$$_REQUIRE"],[193,26,221,21],[193,27,221,21,"_dependencyMap"],[193,41,221,21],[193,73,221,21,"charCodeCategory"],[193,89,221,21],[193,90,221,38,"NonPrintable"],[193,102,221,50],[194,12,222,20],[195,12,223,20],[196,12,224,20,"offset"],[196,18,224,26],[196,21,224,29,"_$$_REQUIRE"],[196,32,224,29],[196,33,224,29,"_dependencyMap"],[196,47,224,29],[196,63,224,29,"consumeBadUrlRemnants"],[196,84,224,29],[196,85,224,51,"source"],[196,91,224,57],[196,93,224,59,"offset"],[196,99,224,65],[196,100,224,66],[197,12,225,20,"type"],[197,16,225,24],[197,19,225,27,"_$$_REQUIRE"],[197,30,225,27],[197,31,225,27,"_dependencyMap"],[197,45,225,27],[197,61,225,27,"TYPE"],[197,65,225,27],[197,66,225,32,"BadUrl"],[197,72,225,38],[198,12,226,20],[200,10,228,16],[201,10,229,16],[201,15,229,21],[201,21,229,27],[202,12,230,20],[203,12,231,20],[204,12,232,20],[204,16,232,24,"_$$_REQUIRE"],[204,27,232,24],[204,28,232,24,"_dependencyMap"],[204,42,232,24],[204,74,232,24,"isValidEscape"],[204,87,232,24],[204,88,232,38,"code"],[204,92,232,42],[204,94,232,44,"getCharCode"],[204,105,232,55],[204,106,232,56,"offset"],[204,112,232,62],[204,115,232,65],[204,116,232,66],[204,117,232,67],[204,118,232,68],[204,120,232,70],[205,14,233,24,"offset"],[205,20,233,30],[205,23,233,33,"_$$_REQUIRE"],[205,34,233,33],[205,35,233,33,"_dependencyMap"],[205,49,233,33],[205,65,233,33,"consumeEscaped"],[205,79,233,33],[205,80,233,48,"source"],[205,86,233,54],[205,88,233,56,"offset"],[205,94,233,62],[205,95,233,63],[205,98,233,66],[205,99,233,67],[206,14,234,24],[207,12,235,20],[209,12,237,20],[210,12,238,20],[211,12,239,20,"offset"],[211,18,239,26],[211,21,239,29,"_$$_REQUIRE"],[211,32,239,29],[211,33,239,29,"_dependencyMap"],[211,47,239,29],[211,63,239,29,"consumeBadUrlRemnants"],[211,84,239,29],[211,85,239,51,"source"],[211,91,239,57],[211,93,239,59,"offset"],[211,99,239,65],[211,100,239,66],[212,12,240,20,"type"],[212,16,240,24],[212,19,240,27,"_$$_REQUIRE"],[212,30,240,27],[212,31,240,27,"_dependencyMap"],[212,45,240,27],[212,61,240,27,"TYPE"],[212,65,240,27],[212,66,240,32,"BadUrl"],[212,72,240,38],[213,12,241,20],[215,10,243,16],[216,10,244,16],[217,8,245,12],[218,6,246,8],[219,4,247,4],[220,4,249,4],[220,8,249,8],[220,9,249,9,"stream"],[220,15,249,15],[220,17,249,17],[221,6,250,8,"stream"],[221,12,250,14],[221,15,250,17],[221,20,250,17,"_$$_REQUIRE"],[221,31,250,17],[221,32,250,17,"_dependencyMap"],[221,46,250,17],[221,77,250,33],[221,78,250,34],[222,4,251,4],[224,4,253,4],[225,4,254,4,"source"],[225,10,254,10],[225,13,254,13,"String"],[225,19,254,19],[225,20,254,20,"source"],[225,26,254,26],[225,30,254,30],[225,32,254,32],[225,33,254,33],[226,4,256,4],[226,8,256,8,"sourceLength"],[226,20,256,20],[226,23,256,23,"source"],[226,29,256,29],[226,30,256,30,"length"],[226,36,256,36],[227,4,257,4],[227,8,257,8,"offsetAndType"],[227,21,257,21],[227,24,257,24,"_$$_REQUIRE"],[227,35,257,24],[227,36,257,24,"_dependencyMap"],[227,50,257,24],[227,81,257,36,"stream"],[227,87,257,42],[227,88,257,43,"offsetAndType"],[227,101,257,56],[227,103,257,58,"sourceLength"],[227,115,257,70],[227,118,257,73],[227,119,257,74],[227,120,257,75],[227,121,257,76],[227,122,257,77],[228,4,258,4],[228,8,258,8,"balance"],[228,15,258,15],[228,18,258,18,"_$$_REQUIRE"],[228,29,258,18],[228,30,258,18,"_dependencyMap"],[228,44,258,18],[228,75,258,30,"stream"],[228,81,258,36],[228,82,258,37,"balance"],[228,89,258,44],[228,91,258,46,"sourceLength"],[228,103,258,58],[228,106,258,61],[228,107,258,62],[228,108,258,63],[229,4,259,4],[229,8,259,8,"tokenCount"],[229,18,259,18],[229,21,259,21],[229,22,259,22],[230,4,260,4],[230,8,260,8,"start"],[230,13,260,13],[230,16,260,16,"_$$_REQUIRE"],[230,27,260,16],[230,28,260,16,"_dependencyMap"],[230,42,260,16],[230,74,260,16,"isBOM"],[230,79,260,16],[230,80,260,22,"getCharCode"],[230,91,260,33],[230,92,260,34],[230,93,260,35],[230,94,260,36],[230,95,260,37],[231,4,261,4],[231,8,261,8,"offset"],[231,14,261,14],[231,17,261,17,"start"],[231,22,261,22],[232,4,262,4],[232,8,262,8,"balanceCloseType"],[232,24,262,24],[232,27,262,27],[232,28,262,28],[233,4,263,4],[233,8,263,8,"balanceStart"],[233,20,263,20],[233,23,263,23],[233,24,263,24],[234,4,264,4],[234,8,264,8,"balancePrev"],[234,19,264,19],[234,22,264,22],[234,23,264,23],[236,4,266,4],[237,4,267,4],[238,4,268,4],[238,11,268,11,"offset"],[238,17,268,17],[238,20,268,20,"sourceLength"],[238,32,268,32],[238,34,268,34],[239,6,269,8],[239,10,269,12,"code"],[239,14,269,16],[239,17,269,19,"source"],[239,23,269,25],[239,24,269,26,"charCodeAt"],[239,34,269,36],[239,35,269,37,"offset"],[239,41,269,43],[239,42,269,44],[240,6,270,8],[240,10,270,12,"type"],[240,14,270,16],[240,17,270,19],[240,18,270,20],[241,6,272,8,"balance"],[241,13,272,15],[241,14,272,16,"tokenCount"],[241,24,272,26],[241,25,272,27],[241,28,272,30,"sourceLength"],[241,40,272,42],[242,6,274,8],[242,14,274,16,"_$$_REQUIRE"],[242,25,274,16],[242,26,274,16,"_dependencyMap"],[242,40,274,16],[242,72,274,16,"charCodeCategory"],[242,88,274,16],[242,89,274,33,"code"],[242,93,274,37],[242,94,274,38],[243,8,275,12],[244,8,276,12],[244,13,276,17,"_$$_REQUIRE"],[244,24,276,17],[244,25,276,17,"_dependencyMap"],[244,39,276,17],[244,71,276,17,"charCodeCategory"],[244,87,276,17],[244,88,276,34,"WhiteSpace"],[244,98,276,44],[245,10,277,16],[246,10,278,16,"type"],[246,14,278,20],[246,17,278,23,"_$$_REQUIRE"],[246,28,278,23],[246,29,278,23,"_dependencyMap"],[246,43,278,23],[246,59,278,23,"TYPE"],[246,63,278,23],[246,64,278,28,"WhiteSpace"],[246,74,278,38],[247,10,279,16,"offset"],[247,16,279,22],[247,19,279,25,"_$$_REQUIRE"],[247,30,279,25],[247,31,279,25,"_dependencyMap"],[247,45,279,25],[247,61,279,25,"findWhiteSpaceEnd"],[247,78,279,25],[247,79,279,43,"source"],[247,85,279,49],[247,87,279,51,"offset"],[247,93,279,57],[247,96,279,60],[247,97,279,61],[247,98,279,62],[248,10,280,16],[250,8,282,12],[251,8,283,12],[251,13,283,17],[251,19,283,23],[252,10,284,16],[253,10,285,16,"consumeStringToken"],[253,28,285,34],[253,29,285,35],[253,30,285,36],[254,10,286,16],[256,8,288,12],[257,8,289,12],[257,13,289,17],[257,19,289,23],[258,10,290,16],[259,10,291,16],[259,14,291,20,"_$$_REQUIRE"],[259,25,291,20],[259,26,291,20,"_dependencyMap"],[259,40,291,20],[259,72,291,20,"isName"],[259,78,291,20],[259,79,291,27,"getCharCode"],[259,90,291,38],[259,91,291,39,"offset"],[259,97,291,45],[259,100,291,48],[259,101,291,49],[259,102,291,50],[259,103,291,51],[259,107,291,55,"_$$_REQUIRE"],[259,118,291,55],[259,119,291,55,"_dependencyMap"],[259,133,291,55],[259,165,291,55,"isValidEscape"],[259,178,291,55],[259,179,291,69,"getCharCode"],[259,190,291,80],[259,191,291,81,"offset"],[259,197,291,87],[259,200,291,90],[259,201,291,91],[259,202,291,92],[259,204,291,94,"getCharCode"],[259,215,291,105],[259,216,291,106,"offset"],[259,222,291,112],[259,225,291,115],[259,226,291,116],[259,227,291,117],[259,228,291,118],[259,230,291,120],[260,12,292,20],[261,12,293,20,"type"],[261,16,293,24],[261,19,293,27,"_$$_REQUIRE"],[261,30,293,27],[261,31,293,27,"_dependencyMap"],[261,45,293,27],[261,61,293,27,"TYPE"],[261,65,293,27],[261,66,293,32,"Hash"],[261,70,293,36],[263,12,295,20],[264,12,296,20],[265,12,297,20],[266,12,298,20],[268,12,300,20],[269,12,301,20,"offset"],[269,18,301,26],[269,21,301,29,"_$$_REQUIRE"],[269,32,301,29],[269,33,301,29,"_dependencyMap"],[269,47,301,29],[269,63,301,29,"consumeName"],[269,74,301,29],[269,75,301,41,"source"],[269,81,301,47],[269,83,301,49,"offset"],[269,89,301,55],[269,92,301,58],[269,93,301,59],[269,94,301,60],[271,12,303,20],[272,10,304,16],[272,11,304,17],[272,17,304,23],[273,12,305,20],[274,12,306,20,"type"],[274,16,306,24],[274,19,306,27,"_$$_REQUIRE"],[274,30,306,27],[274,31,306,27,"_dependencyMap"],[274,45,306,27],[274,61,306,27,"TYPE"],[274,65,306,27],[274,66,306,32,"Delim"],[274,71,306,37],[275,12,307,20,"offset"],[275,18,307,26],[275,20,307,28],[276,10,308,16],[277,10,310,16],[279,8,312,12],[280,8,313,12],[280,13,313,17],[280,19,313,23],[281,10,314,16],[282,10,315,16,"consumeStringToken"],[282,28,315,34],[282,29,315,35],[282,30,315,36],[283,10,316,16],[285,8,318,12],[286,8,319,12],[286,13,319,17],[286,19,319,23],[287,10,320,16],[288,10,321,16,"type"],[288,14,321,20],[288,17,321,23,"_$$_REQUIRE"],[288,28,321,23],[288,29,321,23,"_dependencyMap"],[288,43,321,23],[288,59,321,23,"TYPE"],[288,63,321,23],[288,64,321,28,"LeftParenthesis"],[288,79,321,43],[289,10,322,16,"offset"],[289,16,322,22],[289,18,322,24],[290,10,323,16],[292,8,325,12],[293,8,326,12],[293,13,326,17],[293,19,326,23],[294,10,327,16],[295,10,328,16,"type"],[295,14,328,20],[295,17,328,23,"_$$_REQUIRE"],[295,28,328,23],[295,29,328,23,"_dependencyMap"],[295,43,328,23],[295,59,328,23,"TYPE"],[295,63,328,23],[295,64,328,28,"RightParenthesis"],[295,80,328,44],[296,10,329,16,"offset"],[296,16,329,22],[296,18,329,24],[297,10,330,16],[299,8,332,12],[300,8,333,12],[300,13,333,17],[300,19,333,23],[301,10,334,16],[302,10,335,16],[302,14,335,20,"_$$_REQUIRE"],[302,25,335,20],[302,26,335,20,"_dependencyMap"],[302,40,335,20],[302,72,335,20,"isNumberStart"],[302,85,335,20],[302,86,335,34,"code"],[302,90,335,38],[302,92,335,40,"getCharCode"],[302,103,335,51],[302,104,335,52,"offset"],[302,110,335,58],[302,113,335,61],[302,114,335,62],[302,115,335,63],[302,117,335,65,"getCharCode"],[302,128,335,76],[302,129,335,77,"offset"],[302,135,335,83],[302,138,335,86],[302,139,335,87],[302,140,335,88],[302,141,335,89],[302,143,335,91],[303,12,336,20],[304,12,337,20,"consumeNumericToken"],[304,31,337,39],[304,32,337,40],[304,33,337,41],[305,10,338,16],[305,11,338,17],[305,17,338,23],[306,12,339,20],[307,12,340,20,"type"],[307,16,340,24],[307,19,340,27,"_$$_REQUIRE"],[307,30,340,27],[307,31,340,27,"_dependencyMap"],[307,45,340,27],[307,61,340,27,"TYPE"],[307,65,340,27],[307,66,340,32,"Delim"],[307,71,340,37],[308,12,341,20,"offset"],[308,18,341,26],[308,20,341,28],[309,10,342,16],[310,10,343,16],[312,8,345,12],[313,8,346,12],[313,13,346,17],[313,19,346,23],[314,10,347,16],[315,10,348,16,"type"],[315,14,348,20],[315,17,348,23,"_$$_REQUIRE"],[315,28,348,23],[315,29,348,23,"_dependencyMap"],[315,43,348,23],[315,59,348,23,"TYPE"],[315,63,348,23],[315,64,348,28,"Comma"],[315,69,348,33],[316,10,349,16,"offset"],[316,16,349,22],[316,18,349,24],[317,10,350,16],[319,8,352,12],[320,8,353,12],[320,13,353,17],[320,19,353,23],[321,10,354,16],[322,10,355,16],[322,14,355,20,"_$$_REQUIRE"],[322,25,355,20],[322,26,355,20,"_dependencyMap"],[322,40,355,20],[322,72,355,20,"isNumberStart"],[322,85,355,20],[322,86,355,34,"code"],[322,90,355,38],[322,92,355,40,"getCharCode"],[322,103,355,51],[322,104,355,52,"offset"],[322,110,355,58],[322,113,355,61],[322,114,355,62],[322,115,355,63],[322,117,355,65,"getCharCode"],[322,128,355,76],[322,129,355,77,"offset"],[322,135,355,83],[322,138,355,86],[322,139,355,87],[322,140,355,88],[322,141,355,89],[322,143,355,91],[323,12,356,20,"consumeNumericToken"],[323,31,356,39],[323,32,356,40],[323,33,356,41],[324,10,357,16],[324,11,357,17],[324,17,357,23],[325,12,358,20],[326,12,359,20],[326,16,359,24,"getCharCode"],[326,27,359,35],[326,28,359,36,"offset"],[326,34,359,42],[326,37,359,45],[326,38,359,46],[326,39,359,47],[326,44,359,52],[326,50,359,58],[326,54,360,24,"getCharCode"],[326,65,360,35],[326,66,360,36,"offset"],[326,72,360,42],[326,75,360,45],[326,76,360,46],[326,77,360,47],[326,82,360,52],[326,88,360,58],[326,90,360,60],[327,14,361,24,"type"],[327,18,361,28],[327,21,361,31,"_$$_REQUIRE"],[327,32,361,31],[327,33,361,31,"_dependencyMap"],[327,47,361,31],[327,63,361,31,"TYPE"],[327,67,361,31],[327,68,361,36,"CDC"],[327,71,361,39],[328,14,362,24,"offset"],[328,20,362,30],[328,23,362,33,"offset"],[328,29,362,39],[328,32,362,42],[328,33,362,43],[329,12,363,20],[329,13,363,21],[329,19,363,27],[330,14,364,24],[331,14,365,24],[331,18,365,28,"_$$_REQUIRE"],[331,29,365,28],[331,30,365,28,"_dependencyMap"],[331,44,365,28],[331,76,365,28,"isIdentifierStart"],[331,93,365,28],[331,94,365,46,"code"],[331,98,365,50],[331,100,365,52,"getCharCode"],[331,111,365,63],[331,112,365,64,"offset"],[331,118,365,70],[331,121,365,73],[331,122,365,74],[331,123,365,75],[331,125,365,77,"getCharCode"],[331,136,365,88],[331,137,365,89,"offset"],[331,143,365,95],[331,146,365,98],[331,147,365,99],[331,148,365,100],[331,149,365,101],[331,151,365,103],[332,16,366,28],[333,16,367,28,"consumeIdentLikeToken"],[333,37,367,49],[333,38,367,50],[333,39,367,51],[334,14,368,24],[334,15,368,25],[334,21,368,31],[335,16,369,28],[336,16,370,28,"type"],[336,20,370,32],[336,23,370,35,"_$$_REQUIRE"],[336,34,370,35],[336,35,370,35,"_dependencyMap"],[336,49,370,35],[336,65,370,35,"TYPE"],[336,69,370,35],[336,70,370,40,"Delim"],[336,75,370,45],[337,16,371,28,"offset"],[337,22,371,34],[337,24,371,36],[338,14,372,24],[339,12,373,20],[340,10,374,16],[341,10,375,16],[343,8,377,12],[344,8,378,12],[344,13,378,17],[344,19,378,23],[345,10,379,16],[346,10,380,16],[346,14,380,20,"_$$_REQUIRE"],[346,25,380,20],[346,26,380,20,"_dependencyMap"],[346,40,380,20],[346,72,380,20,"isNumberStart"],[346,85,380,20],[346,86,380,34,"code"],[346,90,380,38],[346,92,380,40,"getCharCode"],[346,103,380,51],[346,104,380,52,"offset"],[346,110,380,58],[346,113,380,61],[346,114,380,62],[346,115,380,63],[346,117,380,65,"getCharCode"],[346,128,380,76],[346,129,380,77,"offset"],[346,135,380,83],[346,138,380,86],[346,139,380,87],[346,140,380,88],[346,141,380,89],[346,143,380,91],[347,12,381,20],[348,12,382,20,"consumeNumericToken"],[348,31,382,39],[348,32,382,40],[348,33,382,41],[349,10,383,16],[349,11,383,17],[349,17,383,23],[350,12,384,20],[351,12,385,20,"type"],[351,16,385,24],[351,19,385,27,"_$$_REQUIRE"],[351,30,385,27],[351,31,385,27,"_dependencyMap"],[351,45,385,27],[351,61,385,27,"TYPE"],[351,65,385,27],[351,66,385,32,"Delim"],[351,71,385,37],[352,12,386,20,"offset"],[352,18,386,26],[352,20,386,28],[353,10,387,16],[354,10,389,16],[356,8,391,12],[357,8,392,12],[357,13,392,17],[357,19,392,23],[358,10,393,16],[359,10,394,16],[359,14,394,20,"getCharCode"],[359,25,394,31],[359,26,394,32,"offset"],[359,32,394,38],[359,35,394,41],[359,36,394,42],[359,37,394,43],[359,42,394,48],[359,48,394,54],[359,50,394,56],[360,12,395,20],[361,12,396,20],[362,12,397,20,"type"],[362,16,397,24],[362,19,397,27,"_$$_REQUIRE"],[362,30,397,27],[362,31,397,27,"_dependencyMap"],[362,45,397,27],[362,61,397,27,"TYPE"],[362,65,397,27],[362,66,397,32,"Comment"],[362,73,397,39],[363,12,398,20,"offset"],[363,18,398,26],[363,21,398,29,"source"],[363,27,398,35],[363,28,398,36,"indexOf"],[363,35,398,43],[363,36,398,44],[363,40,398,48],[363,42,398,50,"offset"],[363,48,398,56],[363,51,398,59],[363,52,398,60],[363,53,398,61],[363,56,398,64],[363,57,398,65],[364,12,399,20],[364,16,399,24,"offset"],[364,22,399,30],[364,27,399,35],[364,28,399,36],[364,30,399,38],[365,14,400,24,"offset"],[365,20,400,30],[365,23,400,33,"source"],[365,29,400,39],[365,30,400,40,"length"],[365,36,400,46],[366,12,401,20],[367,10,402,16],[367,11,402,17],[367,17,402,23],[368,12,403,20,"type"],[368,16,403,24],[368,19,403,27,"_$$_REQUIRE"],[368,30,403,27],[368,31,403,27,"_dependencyMap"],[368,45,403,27],[368,61,403,27,"TYPE"],[368,65,403,27],[368,66,403,32,"Delim"],[368,71,403,37],[369,12,404,20,"offset"],[369,18,404,26],[369,20,404,28],[370,10,405,16],[371,10,406,16],[373,8,408,12],[374,8,409,12],[374,13,409,17],[374,19,409,23],[375,10,410,16],[376,10,411,16,"type"],[376,14,411,20],[376,17,411,23,"_$$_REQUIRE"],[376,28,411,23],[376,29,411,23,"_dependencyMap"],[376,43,411,23],[376,59,411,23,"TYPE"],[376,63,411,23],[376,64,411,28,"Colon"],[376,69,411,33],[377,10,412,16,"offset"],[377,16,412,22],[377,18,412,24],[378,10,413,16],[380,8,415,12],[381,8,416,12],[381,13,416,17],[381,19,416,23],[382,10,417,16],[383,10,418,16,"type"],[383,14,418,20],[383,17,418,23,"_$$_REQUIRE"],[383,28,418,23],[383,29,418,23,"_dependencyMap"],[383,43,418,23],[383,59,418,23,"TYPE"],[383,63,418,23],[383,64,418,28,"Semicolon"],[383,73,418,37],[384,10,419,16,"offset"],[384,16,419,22],[384,18,419,24],[385,10,420,16],[387,8,422,12],[388,8,423,12],[388,13,423,17],[388,19,423,23],[389,10,424,16],[390,10,425,16],[390,14,425,20,"getCharCode"],[390,25,425,31],[390,26,425,32,"offset"],[390,32,425,38],[390,35,425,41],[390,36,425,42],[390,37,425,43],[390,42,425,48],[390,48,425,54],[390,52,426,20,"getCharCode"],[390,63,426,31],[390,64,426,32,"offset"],[390,70,426,38],[390,73,426,41],[390,74,426,42],[390,75,426,43],[390,80,426,48],[390,86,426,54],[390,90,427,20,"getCharCode"],[390,101,427,31],[390,102,427,32,"offset"],[390,108,427,38],[390,111,427,41],[390,112,427,42],[390,113,427,43],[390,118,427,48],[390,124,427,54],[390,126,427,56],[391,12,428,20],[392,12,429,20,"type"],[392,16,429,24],[392,19,429,27,"_$$_REQUIRE"],[392,30,429,27],[392,31,429,27,"_dependencyMap"],[392,45,429,27],[392,61,429,27,"TYPE"],[392,65,429,27],[392,66,429,32,"CDO"],[392,69,429,35],[393,12,430,20,"offset"],[393,18,430,26],[393,21,430,29,"offset"],[393,27,430,35],[393,30,430,38],[393,31,430,39],[394,10,431,16],[394,11,431,17],[394,17,431,23],[395,12,432,20],[396,12,433,20,"type"],[396,16,433,24],[396,19,433,27,"_$$_REQUIRE"],[396,30,433,27],[396,31,433,27,"_dependencyMap"],[396,45,433,27],[396,61,433,27,"TYPE"],[396,65,433,27],[396,66,433,32,"Delim"],[396,71,433,37],[397,12,434,20,"offset"],[397,18,434,26],[397,20,434,28],[398,10,435,16],[399,10,437,16],[401,8,439,12],[402,8,440,12],[402,13,440,17],[402,19,440,23],[403,10,441,16],[404,10,442,16],[404,14,442,20,"_$$_REQUIRE"],[404,25,442,20],[404,26,442,20,"_dependencyMap"],[404,40,442,20],[404,72,442,20,"isIdentifierStart"],[404,89,442,20],[404,90,442,38,"getCharCode"],[404,101,442,49],[404,102,442,50,"offset"],[404,108,442,56],[404,111,442,59],[404,112,442,60],[404,113,442,61],[404,115,442,63,"getCharCode"],[404,126,442,74],[404,127,442,75,"offset"],[404,133,442,81],[404,136,442,84],[404,137,442,85],[404,138,442,86],[404,140,442,88,"getCharCode"],[404,151,442,99],[404,152,442,100,"offset"],[404,158,442,106],[404,161,442,109],[404,162,442,110],[404,163,442,111],[404,164,442,112],[404,166,442,114],[405,12,443,20],[406,12,444,20,"type"],[406,16,444,24],[406,19,444,27,"_$$_REQUIRE"],[406,30,444,27],[406,31,444,27,"_dependencyMap"],[406,45,444,27],[406,61,444,27,"TYPE"],[406,65,444,27],[406,66,444,32,"AtKeyword"],[406,75,444,41],[407,12,445,20,"offset"],[407,18,445,26],[407,21,445,29,"_$$_REQUIRE"],[407,32,445,29],[407,33,445,29,"_dependencyMap"],[407,47,445,29],[407,63,445,29,"consumeName"],[407,74,445,29],[407,75,445,41,"source"],[407,81,445,47],[407,83,445,49,"offset"],[407,89,445,55],[407,92,445,58],[407,93,445,59],[407,94,445,60],[408,10,446,16],[408,11,446,17],[408,17,446,23],[409,12,447,20],[410,12,448,20,"type"],[410,16,448,24],[410,19,448,27,"_$$_REQUIRE"],[410,30,448,27],[410,31,448,27,"_dependencyMap"],[410,45,448,27],[410,61,448,27,"TYPE"],[410,65,448,27],[410,66,448,32,"Delim"],[410,71,448,37],[411,12,449,20,"offset"],[411,18,449,26],[411,20,449,28],[412,10,450,16],[413,10,452,16],[415,8,454,12],[416,8,455,12],[416,13,455,17],[416,19,455,23],[417,10,456,16],[418,10,457,16,"type"],[418,14,457,20],[418,17,457,23,"_$$_REQUIRE"],[418,28,457,23],[418,29,457,23,"_dependencyMap"],[418,43,457,23],[418,59,457,23,"TYPE"],[418,63,457,23],[418,64,457,28,"LeftSquareBracket"],[418,81,457,45],[419,10,458,16,"offset"],[419,16,458,22],[419,18,458,24],[420,10,459,16],[422,8,461,12],[423,8,462,12],[423,13,462,17],[423,19,462,23],[424,10,463,16],[425,10,464,16],[425,14,464,20,"_$$_REQUIRE"],[425,25,464,20],[425,26,464,20,"_dependencyMap"],[425,40,464,20],[425,72,464,20,"isValidEscape"],[425,85,464,20],[425,86,464,34,"code"],[425,90,464,38],[425,92,464,40,"getCharCode"],[425,103,464,51],[425,104,464,52,"offset"],[425,110,464,58],[425,113,464,61],[425,114,464,62],[425,115,464,63],[425,116,464,64],[425,118,464,66],[426,12,465,20],[427,12,466,20,"consumeIdentLikeToken"],[427,33,466,41],[427,34,466,42],[427,35,466,43],[428,10,467,16],[428,11,467,17],[428,17,467,23],[429,12,468,20],[430,12,469,20,"type"],[430,16,469,24],[430,19,469,27,"_$$_REQUIRE"],[430,30,469,27],[430,31,469,27,"_dependencyMap"],[430,45,469,27],[430,61,469,27,"TYPE"],[430,65,469,27],[430,66,469,32,"Delim"],[430,71,469,37],[431,12,470,20,"offset"],[431,18,470,26],[431,20,470,28],[432,10,471,16],[433,10,472,16],[435,8,474,12],[436,8,475,12],[436,13,475,17],[436,19,475,23],[437,10,476,16],[438,10,477,16,"type"],[438,14,477,20],[438,17,477,23,"_$$_REQUIRE"],[438,28,477,23],[438,29,477,23,"_dependencyMap"],[438,43,477,23],[438,59,477,23,"TYPE"],[438,63,477,23],[438,64,477,28,"RightSquareBracket"],[438,82,477,46],[439,10,478,16,"offset"],[439,16,478,22],[439,18,478,24],[440,10,479,16],[442,8,481,12],[443,8,482,12],[443,13,482,17],[443,19,482,23],[444,10,483,16],[445,10,484,16,"type"],[445,14,484,20],[445,17,484,23,"_$$_REQUIRE"],[445,28,484,23],[445,29,484,23,"_dependencyMap"],[445,43,484,23],[445,59,484,23,"TYPE"],[445,63,484,23],[445,64,484,28,"LeftCurlyBracket"],[445,80,484,44],[446,10,485,16,"offset"],[446,16,485,22],[446,18,485,24],[447,10,486,16],[449,8,488,12],[450,8,489,12],[450,13,489,17],[450,19,489,23],[451,10,490,16],[452,10,491,16,"type"],[452,14,491,20],[452,17,491,23,"_$$_REQUIRE"],[452,28,491,23],[452,29,491,23,"_dependencyMap"],[452,43,491,23],[452,59,491,23,"TYPE"],[452,63,491,23],[452,64,491,28,"RightCurlyBracket"],[452,81,491,45],[453,10,492,16,"offset"],[453,16,492,22],[453,18,492,24],[454,10,493,16],[456,8,495,12],[457,8,496,12],[457,13,496,17,"_$$_REQUIRE"],[457,24,496,17],[457,25,496,17,"_dependencyMap"],[457,39,496,17],[457,71,496,17,"charCodeCategory"],[457,87,496,17],[457,88,496,34,"Digit"],[457,93,496,39],[458,10,497,16],[459,10,498,16,"consumeNumericToken"],[459,29,498,35],[459,30,498,36],[459,31,498,37],[460,10,499,16],[462,8,501,12],[463,8,502,12],[463,13,502,17,"_$$_REQUIRE"],[463,24,502,17],[463,25,502,17,"_dependencyMap"],[463,39,502,17],[463,71,502,17,"charCodeCategory"],[463,87,502,17],[463,88,502,34,"NameStart"],[463,97,502,43],[464,10,503,16],[465,10,504,16,"consumeIdentLikeToken"],[465,31,504,37],[465,32,504,38],[465,33,504,39],[466,10,505,16],[468,8,507,12],[469,8,508,12],[469,13,508,17,"_$$_REQUIRE"],[469,24,508,17],[469,25,508,17,"_dependencyMap"],[469,39,508,17],[469,71,508,17,"charCodeCategory"],[469,87,508,17],[469,88,508,34,"Eof"],[469,91,508,37],[470,10,509,16],[471,10,510,16],[473,8,512,12],[474,8,513,12],[475,10,514,16],[476,10,515,16,"type"],[476,14,515,20],[476,17,515,23,"_$$_REQUIRE"],[476,28,515,23],[476,29,515,23,"_dependencyMap"],[476,43,515,23],[476,59,515,23,"TYPE"],[476,63,515,23],[476,64,515,28,"Delim"],[476,69,515,33],[477,10,516,16,"offset"],[477,16,516,22],[477,18,516,24],[478,6,517,8],[479,6,519,8],[479,14,519,16,"type"],[479,18,519,20],[480,8,520,12],[480,13,520,17,"balanceCloseType"],[480,29,520,33],[481,10,521,16,"balancePrev"],[481,21,521,27],[481,24,521,30,"balanceStart"],[481,36,521,42],[481,39,521,45,"OFFSET_MASK"],[481,50,521,56],[482,10,522,16,"balanceStart"],[482,22,522,28],[482,25,522,31,"balance"],[482,32,522,38],[482,33,522,39,"balancePrev"],[482,44,522,50],[482,45,522,51],[483,10,523,16,"balanceCloseType"],[483,26,523,32],[483,29,523,35,"balanceStart"],[483,41,523,47],[483,45,523,51,"TYPE_SHIFT"],[483,55,523,61],[484,10,524,16,"balance"],[484,17,524,23],[484,18,524,24,"tokenCount"],[484,28,524,34],[484,29,524,35],[484,32,524,38,"balancePrev"],[484,43,524,49],[485,10,525,16,"balance"],[485,17,525,23],[485,18,525,24,"balancePrev"],[485,29,525,35],[485,31,525,37],[485,32,525,38],[485,35,525,41,"tokenCount"],[485,45,525,51],[486,10,526,16],[486,17,526,23,"balancePrev"],[486,28,526,34],[486,31,526,37,"tokenCount"],[486,41,526,47],[486,43,526,49,"balancePrev"],[486,54,526,60],[486,56,526,62],[486,58,526,64],[487,12,527,20],[487,16,527,24,"balance"],[487,23,527,31],[487,24,527,32,"balancePrev"],[487,35,527,43],[487,36,527,44],[487,41,527,49,"sourceLength"],[487,53,527,61],[487,55,527,63],[488,14,528,24,"balance"],[488,21,528,31],[488,22,528,32,"balancePrev"],[488,33,528,43],[488,34,528,44],[488,37,528,47,"tokenCount"],[488,47,528,57],[489,12,529,20],[490,10,530,16],[491,10,531,16],[492,8,533,12],[492,13,533,17,"_$$_REQUIRE"],[492,24,533,17],[492,25,533,17,"_dependencyMap"],[492,39,533,17],[492,55,533,17,"TYPE"],[492,59,533,17],[492,60,533,22,"LeftParenthesis"],[492,75,533,37],[493,8,534,12],[493,13,534,17,"_$$_REQUIRE"],[493,24,534,17],[493,25,534,17,"_dependencyMap"],[493,39,534,17],[493,55,534,17,"TYPE"],[493,59,534,17],[493,60,534,22,"Function"],[493,68,534,30],[494,10,535,16,"balance"],[494,17,535,23],[494,18,535,24,"tokenCount"],[494,28,535,34],[494,29,535,35],[494,32,535,38,"balanceStart"],[494,44,535,50],[495,10,536,16,"balanceCloseType"],[495,26,536,32],[495,29,536,35,"_$$_REQUIRE"],[495,40,536,35],[495,41,536,35,"_dependencyMap"],[495,55,536,35],[495,71,536,35,"TYPE"],[495,75,536,35],[495,76,536,40,"RightParenthesis"],[495,92,536,56],[496,10,537,16,"balanceStart"],[496,22,537,28],[496,25,537,32,"balanceCloseType"],[496,41,537,48],[496,45,537,52,"TYPE_SHIFT"],[496,55,537,62],[496,58,537,66,"tokenCount"],[496,68,537,76],[497,10,538,16],[498,8,540,12],[498,13,540,17,"_$$_REQUIRE"],[498,24,540,17],[498,25,540,17,"_dependencyMap"],[498,39,540,17],[498,55,540,17,"TYPE"],[498,59,540,17],[498,60,540,22,"LeftSquareBracket"],[498,77,540,39],[499,10,541,16,"balance"],[499,17,541,23],[499,18,541,24,"tokenCount"],[499,28,541,34],[499,29,541,35],[499,32,541,38,"balanceStart"],[499,44,541,50],[500,10,542,16,"balanceCloseType"],[500,26,542,32],[500,29,542,35,"_$$_REQUIRE"],[500,40,542,35],[500,41,542,35,"_dependencyMap"],[500,55,542,35],[500,71,542,35,"TYPE"],[500,75,542,35],[500,76,542,40,"RightSquareBracket"],[500,94,542,58],[501,10,543,16,"balanceStart"],[501,22,543,28],[501,25,543,32,"balanceCloseType"],[501,41,543,48],[501,45,543,52,"TYPE_SHIFT"],[501,55,543,62],[501,58,543,66,"tokenCount"],[501,68,543,76],[502,10,544,16],[503,8,546,12],[503,13,546,17,"_$$_REQUIRE"],[503,24,546,17],[503,25,546,17,"_dependencyMap"],[503,39,546,17],[503,55,546,17,"TYPE"],[503,59,546,17],[503,60,546,22,"LeftCurlyBracket"],[503,76,546,38],[504,10,547,16,"balance"],[504,17,547,23],[504,18,547,24,"tokenCount"],[504,28,547,34],[504,29,547,35],[504,32,547,38,"balanceStart"],[504,44,547,50],[505,10,548,16,"balanceCloseType"],[505,26,548,32],[505,29,548,35,"_$$_REQUIRE"],[505,40,548,35],[505,41,548,35,"_dependencyMap"],[505,55,548,35],[505,71,548,35,"TYPE"],[505,75,548,35],[505,76,548,40,"RightCurlyBracket"],[505,93,548,57],[506,10,549,16,"balanceStart"],[506,22,549,28],[506,25,549,32,"balanceCloseType"],[506,41,549,48],[506,45,549,52,"TYPE_SHIFT"],[506,55,549,62],[506,58,549,66,"tokenCount"],[506,68,549,76],[507,10,550,16],[508,6,551,8],[509,6,553,8,"offsetAndType"],[509,19,553,21],[509,20,553,22,"tokenCount"],[509,30,553,32],[509,32,553,34],[509,33,553,35],[509,36,553,39,"type"],[509,40,553,43],[509,44,553,47,"TYPE_SHIFT"],[509,54,553,57],[509,57,553,61,"offset"],[509,63,553,67],[510,4,554,4],[512,4,556,4],[513,4,557,4,"offsetAndType"],[513,17,557,17],[513,18,557,18,"tokenCount"],[513,28,557,28],[513,29,557,29],[513,32,557,33,"_$$_REQUIRE"],[513,43,557,33],[513,44,557,33,"_dependencyMap"],[513,58,557,33],[513,74,557,33,"TYPE"],[513,78,557,33],[513,79,557,38,"EOF"],[513,82,557,41],[513,86,557,45,"TYPE_SHIFT"],[513,96,557,55],[513,99,557,59,"offset"],[513,105,557,65],[513,106,557,66],[513,107,557,67],[514,4,558,4,"balance"],[514,11,558,11],[514,12,558,12,"tokenCount"],[514,22,558,22],[514,23,558,23],[514,26,558,26,"sourceLength"],[514,38,558,38],[515,4,559,4,"balance"],[515,11,559,11],[515,12,559,12,"sourceLength"],[515,24,559,24],[515,25,559,25],[515,28,559,28,"sourceLength"],[515,40,559,40],[515,41,559,41],[515,42,559,42],[516,4,560,4],[516,11,560,11,"balanceStart"],[516,23,560,23],[516,28,560,28],[516,29,560,29],[516,31,560,31],[517,6,561,8,"balancePrev"],[517,17,561,19],[517,20,561,22,"balanceStart"],[517,32,561,34],[517,35,561,37,"OFFSET_MASK"],[517,46,561,48],[518,6,562,8,"balanceStart"],[518,18,562,20],[518,21,562,23,"balance"],[518,28,562,30],[518,29,562,31,"balancePrev"],[518,40,562,42],[518,41,562,43],[519,6,563,8,"balance"],[519,13,563,15],[519,14,563,16,"balancePrev"],[519,25,563,27],[519,26,563,28],[519,29,563,31,"sourceLength"],[519,41,563,43],[520,4,564,4],[522,4,566,4],[523,4,567,4,"stream"],[523,10,567,10],[523,11,567,11,"source"],[523,17,567,17],[523,20,567,20,"source"],[523,26,567,26],[524,4,568,4,"stream"],[524,10,568,10],[524,11,568,11,"firstCharOffset"],[524,26,568,26],[524,29,568,29,"start"],[524,34,568,34],[525,4,569,4,"stream"],[525,10,569,10],[525,11,569,11,"offsetAndType"],[525,24,569,24],[525,27,569,27,"offsetAndType"],[525,40,569,40],[526,4,570,4,"stream"],[526,10,570,10],[526,11,570,11,"tokenCount"],[526,21,570,21],[526,24,570,24,"tokenCount"],[526,34,570,34],[527,4,571,4,"stream"],[527,10,571,10],[527,11,571,11,"balance"],[527,18,571,18],[527,21,571,21,"balance"],[527,28,571,28],[528,4,572,4,"stream"],[528,10,572,10],[528,11,572,11,"reset"],[528,16,572,16],[528,17,572,17],[528,18,572,18],[529,4,573,4,"stream"],[529,10,573,10],[529,11,573,11,"next"],[529,15,573,15],[529,16,573,16],[529,17,573,17],[530,4,575,4],[530,11,575,11,"stream"],[530,17,575,17],[531,2,576,0],[533,2,578,0],[534,2,579,0,"Object"],[534,8,579,6],[534,9,579,7,"keys"],[534,13,579,11],[534,14,579,11,"_$$_REQUIRE"],[534,25,579,11],[534,26,579,11,"_dependencyMap"],[534,40,579,11],[534,55,579,21],[534,56,579,22],[534,57,579,23,"forEach"],[534,64,579,30],[534,65,579,31],[534,75,579,40,"key"],[534,78,579,43],[534,80,579,45],[535,4,580,4,"tokenize"],[535,12,580,12],[535,13,580,13,"key"],[535,16,580,16],[535,17,580,17],[535,20,580,20,"_$$_REQUIRE"],[535,31,580,20],[535,32,580,20,"_dependencyMap"],[535,46,580,20],[535,62,580,30,"key"],[535,65,580,33],[535,66,580,34],[536,2,581,0],[536,3,581,1],[536,4,581,2],[538,2,583,0],[539,2,584,0,"Object"],[539,8,584,6],[539,9,584,7,"keys"],[539,13,584,11],[539,14,584,11,"_$$_REQUIRE"],[539,25,584,11],[539,26,584,11,"_dependencyMap"],[539,40,584,11],[539,71,584,31],[539,72,584,32],[539,73,584,33,"forEach"],[539,80,584,40],[539,81,584,41],[539,91,584,50,"key"],[539,94,584,53],[539,96,584,55],[540,4,585,4,"tokenize"],[540,12,585,12],[540,13,585,13,"key"],[540,16,585,16],[540,17,585,17],[540,20,585,20,"_$$_REQUIRE"],[540,31,585,20],[540,32,585,20,"_dependencyMap"],[540,46,585,20],[540,78,585,40,"key"],[540,81,585,43],[540,82,585,44],[541,2,586,0],[541,3,586,1],[541,4,586,2],[542,2,587,0,"Object"],[542,8,587,6],[542,9,587,7,"keys"],[542,13,587,11],[542,14,587,11,"_$$_REQUIRE"],[542,25,587,11],[542,26,587,11,"_dependencyMap"],[542,40,587,11],[542,55,587,17],[542,56,587,18],[542,57,587,19,"forEach"],[542,64,587,26],[542,65,587,27],[542,75,587,36,"key"],[542,78,587,39],[542,80,587,41],[543,4,588,4,"tokenize"],[543,12,588,12],[543,13,588,13,"key"],[543,16,588,16],[543,17,588,17],[543,20,588,20,"_$$_REQUIRE"],[543,31,588,20],[543,32,588,20,"_dependencyMap"],[543,46,588,20],[543,62,588,26,"key"],[543,65,588,29],[543,66,588,30],[544,2,589,0],[544,3,589,1],[544,4,589,2],[545,2,591,0,"module"],[545,8,591,6],[545,9,591,7,"exports"],[545,16,591,14],[545,19,591,17,"tokenize"],[545,27,591,25],[546,0,591,26],[546,3]],"functionMap":{"names":["<global>","tokenize","getCharCode","consumeNumericToken","consumeIdentLikeToken","consumeStringToken","consumeUrlToken","Object.keys.forEach$argument_0"],"mappings":"AAA;AC2B;ICC;KDE;IEG;KFwB;IGG;KHqC;IIG;KJ8D;IKO;KL6E;CDyU;+BOG;CPE;yCOG;CPE;2BOC;CPE"}},"type":"js/module"}]}