{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":93,"column":0,"index":3368}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk="}},{"name":"../../../RNGestureHandlerModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":118},"end":{"line":3,"column":69,"index":187}}],"key":"2BYIjnTRSFId8SRJ7sJFxLD1BD4="}},{"name":"./utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":424},"end":{"line":12,"column":17,"index":530}},{"start":{"line":8,"column":0,"index":424},"end":{"line":12,"column":17,"index":530}},{"start":{"line":8,"column":0,"index":424},"end":{"line":12,"column":17,"index":530}}],"key":"fIqjJ6Rx8c7Khc/wm9kX7hQXC5I="}},{"name":"../../../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":314},"end":{"line":6,"column":61,"index":375}}],"key":"6QYiO8x9sAoDBctSRJ19A8sqUNk="}},{"name":"../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":188},"end":{"line":4,"column":68,"index":256}},{"start":{"line":4,"column":0,"index":188},"end":{"line":4,"column":68,"index":256}}],"key":"ByXat9lt9duIJLDmSeH0V+tRq1s="}},{"name":"../../handlersRegistry","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":60},"end":{"line":2,"column":57,"index":117}}],"key":"Q8MtNj8/mrt1iN8Kay94o881ERE="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.updateHandlers = updateHandlers;\n  var _RNGestureHandlerModule = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"../../../RNGestureHandlerModule\"));\n  function updateHandlers(preparedGesture, gestureConfig, newGestures) {\n    gestureConfig.prepare();\n    for (var i = 0; i < newGestures.length; i++) {\n      var handler = preparedGesture.attachedGestures[i];\n      (0, _$$_REQUIRE(_dependencyMap[2], \"./utils\").checkGestureCallbacksForWorklets)(handler);\n\n      // Only update handlerTag when it's actually different, it may be the same\n      // if gesture config object is wrapped with useMemo\n      if (newGestures[i].handlerTag !== handler.handlerTag) {\n        newGestures[i].handlerTag = handler.handlerTag;\n        newGestures[i].handlers.handlerTag = handler.handlerTag;\n      }\n    }\n\n    // Store attached gestures to avoid crash when gestures changed after queueing micro task\n    var attachedGestures = preparedGesture.attachedGestures;\n\n    // Use queueMicrotask to extract handlerTags, because when it's ran, all refs should be updated\n    // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n    // in case of external relations)\n    (0, _$$_REQUIRE(_dependencyMap[3], \"../../../ghQueueMicrotask\").ghQueueMicrotask)(function () {\n      if (!preparedGesture.isMounted) {\n        return;\n      }\n\n      // Stop if attached gestures changed after queueing micro task\n      if (attachedGestures !== preparedGesture.attachedGestures) {\n        return;\n      }\n\n      // If amount of gesture configs changes, we need to update the callbacks in shared value\n      var shouldUpdateSharedValueIfUsed = attachedGestures.length !== newGestures.length;\n      for (var _i = 0; _i < newGestures.length; _i++) {\n        var _handler = attachedGestures[_i];\n\n        // If the gestureId is different (gesture isn't wrapped with useMemo or its dependencies changed),\n        // we need to update the shared value, assuming the gesture runs on UI thread or the thread changed\n        if (_handler.handlers.gestureId !== newGestures[_i].handlers.gestureId && (newGestures[_i].shouldUseReanimated || _handler.shouldUseReanimated)) {\n          shouldUpdateSharedValueIfUsed = true;\n        }\n        _handler.config = newGestures[_i].config;\n        _handler.handlers = newGestures[_i].handlers;\n        _RNGestureHandlerModule.default.updateGestureHandler(_handler.handlerTag, (0, _$$_REQUIRE(_dependencyMap[4], \"../../utils\").filterConfig)(_handler.config, _$$_REQUIRE(_dependencyMap[2], \"./utils\").ALLOWED_PROPS, (0, _$$_REQUIRE(_dependencyMap[2], \"./utils\").extractGestureRelations)(_handler)));\n        (0, _$$_REQUIRE(_dependencyMap[5], \"../../handlersRegistry\").registerHandler)(_handler.handlerTag, _handler, _handler.config.testId);\n      }\n      if (preparedGesture.animatedHandlers && shouldUpdateSharedValueIfUsed) {\n        var newHandlersValue = attachedGestures.filter(function (g) {\n          return g.shouldUseReanimated;\n        }) // Ignore gestures that shouldn't run on UI\n        .map(function (g) {\n          return g.handlers;\n        });\n        preparedGesture.animatedHandlers.value = newHandlersValue;\n      }\n      (0, _$$_REQUIRE(_dependencyMap[4], \"../../utils\").scheduleFlushOperations)();\n    });\n  }\n});","lineCount":65,"map":[[7,2,3,0],[7,6,3,0,"_RNGestureHandlerModule"],[7,29,3,0],[7,32,3,0,"_interopRequireDefault"],[7,54,3,0],[7,55,3,0,"_$$_REQUIRE"],[7,66,3,0],[7,67,3,0,"_dependencyMap"],[7,81,3,0],[8,2,14,7],[8,11,14,16,"updateHandlers"],[8,25,14,30,"updateHandlers"],[8,26,15,2,"preparedGesture"],[8,41,15,39],[8,43,16,2,"gestureConfig"],[8,56,16,46],[8,58,17,2,"newGestures"],[8,69,17,28],[8,71,18,2],[9,4,19,2,"gestureConfig"],[9,17,19,15],[9,18,19,16,"prepare"],[9,25,19,23],[9,26,19,24],[9,27,19,25],[10,4,21,2],[10,9,21,7],[10,13,21,11,"i"],[10,14,21,12],[10,17,21,15],[10,18,21,16],[10,20,21,18,"i"],[10,21,21,19],[10,24,21,22,"newGestures"],[10,35,21,33],[10,36,21,34,"length"],[10,42,21,40],[10,44,21,42,"i"],[10,45,21,43],[10,47,21,45],[10,49,21,47],[11,6,22,4],[11,10,22,10,"handler"],[11,17,22,17],[11,20,22,20,"preparedGesture"],[11,35,22,35],[11,36,22,36,"attachedGestures"],[11,52,22,52],[11,53,22,53,"i"],[11,54,22,54],[11,55,22,55],[12,6,23,4],[12,10,23,4,"checkGestureCallbacksForWorklets"],[12,40,23,4],[12,41,23,4,"checkGestureCallbacksForWorklets"],[12,84,23,36],[12,86,23,37,"handler"],[12,93,23,44],[12,94,23,45],[14,6,25,4],[15,6,26,4],[16,6,27,4],[16,10,27,8,"newGestures"],[16,21,27,19],[16,22,27,20,"i"],[16,23,27,21],[16,24,27,22],[16,25,27,23,"handlerTag"],[16,35,27,33],[16,40,27,38,"handler"],[16,47,27,45],[16,48,27,46,"handlerTag"],[16,58,27,56],[16,60,27,58],[17,8,28,6,"newGestures"],[17,19,28,17],[17,20,28,18,"i"],[17,21,28,19],[17,22,28,20],[17,23,28,21,"handlerTag"],[17,33,28,31],[17,36,28,34,"handler"],[17,43,28,41],[17,44,28,42,"handlerTag"],[17,54,28,52],[18,8,29,6,"newGestures"],[18,19,29,17],[18,20,29,18,"i"],[18,21,29,19],[18,22,29,20],[18,23,29,21,"handlers"],[18,31,29,29],[18,32,29,30,"handlerTag"],[18,42,29,40],[18,45,29,43,"handler"],[18,52,29,50],[18,53,29,51,"handlerTag"],[18,63,29,61],[19,6,30,4],[20,4,31,2],[22,4,33,2],[23,4,34,2],[23,8,34,8,"attachedGestures"],[23,24,34,24],[23,27,34,27,"preparedGesture"],[23,42,34,42],[23,43,34,43,"attachedGestures"],[23,59,34,59],[25,4,36,2],[26,4,37,2],[27,4,38,2],[28,4,39,2],[28,8,39,2,"ghQueueMicrotask"],[28,38,39,2],[28,39,39,2,"ghQueueMicrotask"],[28,84,39,18],[28,86,39,19],[28,98,39,25],[29,6,40,4],[29,10,40,8],[29,11,40,9,"preparedGesture"],[29,26,40,24],[29,27,40,25,"isMounted"],[29,36,40,34],[29,38,40,36],[30,8,41,6],[31,6,42,4],[33,6,44,4],[34,6,45,4],[34,10,45,8,"attachedGestures"],[34,26,45,24],[34,31,45,29,"preparedGesture"],[34,46,45,44],[34,47,45,45,"attachedGestures"],[34,63,45,61],[34,65,45,63],[35,8,46,6],[36,6,47,4],[38,6,49,4],[39,6,50,4],[39,10,50,8,"shouldUpdateSharedValueIfUsed"],[39,39,50,37],[39,42,51,6,"attachedGestures"],[39,58,51,22],[39,59,51,23,"length"],[39,65,51,29],[39,70,51,34,"newGestures"],[39,81,51,45],[39,82,51,46,"length"],[39,88,51,52],[40,6,53,4],[40,11,53,9],[40,15,53,13,"i"],[40,17,53,14],[40,20,53,17],[40,21,53,18],[40,23,53,20,"i"],[40,25,53,21],[40,28,53,24,"newGestures"],[40,39,53,35],[40,40,53,36,"length"],[40,46,53,42],[40,48,53,44,"i"],[40,50,53,45],[40,52,53,47],[40,54,53,49],[41,8,54,6],[41,12,54,12,"handler"],[41,20,54,19],[41,23,54,22,"attachedGestures"],[41,39,54,38],[41,40,54,39,"i"],[41,42,54,40],[41,43,54,41],[43,8,56,6],[44,8,57,6],[45,8,58,6],[45,12,59,8,"handler"],[45,20,59,15],[45,21,59,16,"handlers"],[45,29,59,24],[45,30,59,25,"gestureId"],[45,39,59,34],[45,44,59,39,"newGestures"],[45,55,59,50],[45,56,59,51,"i"],[45,58,59,52],[45,59,59,53],[45,60,59,54,"handlers"],[45,68,59,62],[45,69,59,63,"gestureId"],[45,78,59,72],[45,83,60,9,"newGestures"],[45,94,60,20],[45,95,60,21,"i"],[45,97,60,22],[45,98,60,23],[45,99,60,24,"shouldUseReanimated"],[45,118,60,43],[45,122,60,47,"handler"],[45,130,60,54],[45,131,60,55,"shouldUseReanimated"],[45,150,60,74],[45,151,60,75],[45,153,61,8],[46,10,62,8,"shouldUpdateSharedValueIfUsed"],[46,39,62,37],[46,42,62,40],[46,46,62,44],[47,8,63,6],[48,8,65,6,"handler"],[48,16,65,13],[48,17,65,14,"config"],[48,23,65,20],[48,26,65,23,"newGestures"],[48,37,65,34],[48,38,65,35,"i"],[48,40,65,36],[48,41,65,37],[48,42,65,38,"config"],[48,48,65,44],[49,8,66,6,"handler"],[49,16,66,13],[49,17,66,14,"handlers"],[49,25,66,22],[49,28,66,25,"newGestures"],[49,39,66,36],[49,40,66,37,"i"],[49,42,66,38],[49,43,66,39],[49,44,66,40,"handlers"],[49,52,66,48],[50,8,68,6,"RNGestureHandlerModule"],[50,39,68,28],[50,40,68,29,"updateGestureHandler"],[50,60,68,49],[50,61,69,8,"handler"],[50,69,69,15],[50,70,69,16,"handlerTag"],[50,80,69,26],[50,82,70,8],[50,86,70,8,"filterConfig"],[50,116,70,8],[50,117,70,8,"filterConfig"],[50,144,70,20],[50,146,71,10,"handler"],[50,154,71,17],[50,155,71,18,"config"],[50,161,71,24],[50,163,72,10,"ALLOWED_PROPS"],[50,193,72,10],[50,194,72,10,"ALLOWED_PROPS"],[50,218,72,23],[50,220,73,10],[50,224,73,10,"extractGestureRelations"],[50,254,73,10],[50,255,73,10,"extractGestureRelations"],[50,289,73,33],[50,291,73,34,"handler"],[50,299,73,41],[50,300,74,8],[50,301,75,6],[50,302,75,7],[51,8,77,6],[51,12,77,6,"registerHandler"],[51,42,77,6],[51,43,77,6,"registerHandler"],[51,84,77,21],[51,86,77,22,"handler"],[51,94,77,29],[51,95,77,30,"handlerTag"],[51,105,77,40],[51,107,77,42,"handler"],[51,115,77,49],[51,117,77,51,"handler"],[51,125,77,58],[51,126,77,59,"config"],[51,132,77,65],[51,133,77,66,"testId"],[51,139,77,72],[51,140,77,73],[52,6,78,4],[53,6,80,4],[53,10,80,8,"preparedGesture"],[53,25,80,23],[53,26,80,24,"animatedHandlers"],[53,42,80,40],[53,46,80,44,"shouldUpdateSharedValueIfUsed"],[53,75,80,73],[53,77,80,75],[54,8,81,6],[54,12,81,12,"newHandlersValue"],[54,28,81,28],[54,31,81,31,"attachedGestures"],[54,47,81,47],[54,48,82,9,"filter"],[54,54,82,15],[54,55,82,16],[54,65,82,17,"g"],[54,66,82,18],[55,10,82,18],[55,17,82,23,"g"],[55,18,82,24],[55,19,82,25,"shouldUseReanimated"],[55,38,82,44],[56,8,82,44],[56,10,82,45],[56,11,82,46],[57,8,82,46],[57,9,83,9,"map"],[57,12,83,12],[57,13,83,13],[57,23,83,14,"g"],[57,24,83,15],[58,10,83,15],[58,17,83,20,"g"],[58,18,83,21],[58,19,83,22,"handlers"],[58,27,83,30],[59,8,83,30],[59,10,85,9],[60,8,87,6,"preparedGesture"],[60,23,87,21],[60,24,87,22,"animatedHandlers"],[60,40,87,38],[60,41,87,39,"value"],[60,46,87,44],[60,49,87,47,"newHandlersValue"],[60,65,87,63],[61,6,88,4],[62,6,90,4],[62,10,90,4,"scheduleFlushOperations"],[62,40,90,4],[62,41,90,4,"scheduleFlushOperations"],[62,79,90,27],[62,81,90,28],[62,82,90,29],[63,4,91,2],[63,5,91,3],[63,6,91,4],[64,2,92,0],[65,0,92,1],[65,3]],"functionMap":{"names":["<global>","updateHandlers","ghQueueMicrotask$argument_0","attachedGestures.filter$argument_0","attachedGestures.filter.map$argument_0"],"mappings":"AAA;OCa;mBCyB;gBC2C,4BD;aEC,iBF;GDQ;CDC"}},"type":"js/module"}]}