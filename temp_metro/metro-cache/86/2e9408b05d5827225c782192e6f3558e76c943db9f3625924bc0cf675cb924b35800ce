{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":255,"column":0,"index":8419}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":255,"column":0,"index":8419}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"./networks.cjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":49,"column":30,"index":1408},"end":{"line":49,"column":55,"index":1433}}],"key":"VwSWqjLk3lF+0uJetUWOf3RnSCs="}},{"name":"./types.cjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":51,"column":27,"index":1492},"end":{"line":51,"column":49,"index":1514}}],"key":"WQrrQSPUEy7ImSCQXvQAA3uXTs4="}},{"name":"wif","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":52,"column":25,"index":1542},"end":{"line":52,"column":39,"index":1556}}],"key":"hbkfH+nYuAPDRbyK09Y/qV9whEg="}},{"name":"valibot","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":54,"column":23,"index":1626},"end":{"line":54,"column":41,"index":1644}}],"key":"rRKi8w2T+ZK7uQFy8MRs6k6j9DA="}},{"name":"uint8array-tools","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":55,"column":27,"index":1674},"end":{"line":55,"column":54,"index":1701}}],"key":"d9z2uhLIsbEZR4MIqnLfYd/zTK8="}},{"name":"./testecc.cjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":53,"column":18,"index":1577},"end":{"line":53,"column":42,"index":1601}}],"key":"J28f3IkRBblyZ0fTOU5wa5ZGg9Q="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function get() {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, 'default', {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o['default'] = v;\n  });\n  var __importStar = this && this.__importStar || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.networks = void 0;\n  exports.ECPairFactory = ECPairFactory;\n  var networks = __importStar(_$$_REQUIRE(_dependencyMap[2], \"./networks.cjs\"));\n  exports.networks = networks;\n  var types = __importStar(_$$_REQUIRE(_dependencyMap[3], \"./types.cjs\"));\n  var wif = __importStar(_$$_REQUIRE(_dependencyMap[4], \"wif\"));\n  var v = __importStar(_$$_REQUIRE(_dependencyMap[5], \"valibot\"));\n  var tools = __importStar(_$$_REQUIRE(_dependencyMap[6], \"uint8array-tools\"));\n  var ECPairOptionsSchema = v.optional(v.object({\n    compressed: v.optional(v.boolean()),\n    network: v.optional(types.NetworkSchema),\n    // https://github.com/fabian-hiller/valibot/issues/243#issuecomment-2182514063\n    rng: v.optional(v.pipe(v.instance(Function), v.transform(function (func) {\n      return function (arg) {\n        var parsedArg = v.parse(v.optional(v.number()), arg);\n        var returnedValue = func(parsedArg);\n        var parsedReturn = v.parse(v.instance(Uint8Array), returnedValue);\n        return parsedReturn;\n      };\n    })))\n  }));\n  var toXOnly = function toXOnly(pubKey) {\n    return pubKey.length === 32 ? pubKey : pubKey.subarray(1, 33);\n  };\n  function ECPairFactory(ecc) {\n    (0, _$$_REQUIRE(_dependencyMap[7], \"./testecc.cjs\").testEcc)(ecc);\n    function isPoint(maybePoint) {\n      return ecc.isPoint(maybePoint);\n    }\n    function fromPrivateKey(buffer, options) {\n      v.parse(types.Buffer256Bit, buffer);\n      if (!ecc.isPrivate(buffer)) throw new TypeError('Private key not in range [1, n)');\n      v.parse(ECPairOptionsSchema, options);\n      return new ECPair(buffer, undefined, options);\n    }\n    function fromPublicKey(buffer, options) {\n      if (!ecc.isPoint(buffer)) {\n        throw new Error('Point not on the curve');\n      }\n      v.parse(ECPairOptionsSchema, options);\n      return new ECPair(undefined, buffer, options);\n    }\n    function fromWIF(wifString, network) {\n      var decoded = wif.decode(wifString);\n      var version = decoded.version;\n      // list of networks?\n      if (Array.isArray(network)) {\n        network = network.filter(function (x) {\n          return version === x.wif;\n        }).pop();\n        if (!network) throw new Error('Unknown network version');\n        // otherwise, assume a network object (or default to bitcoin)\n      } else {\n        network = network || networks.bitcoin;\n        if (version !== network.wif) throw new Error('Invalid network version');\n      }\n      return fromPrivateKey(decoded.privateKey, {\n        compressed: decoded.compressed,\n        network: network\n      });\n    }\n    /**\n     * Generates a random ECPairInterface.\n     *\n     * Uses `crypto.getRandomValues` under the hood for options.rng function, which is still an experimental feature as of Node.js 18.19.0. To work around this you can do one of the following:\n     * 1. Use a polyfill for crypto.getRandomValues()\n     * 2. Use the `--experimental-global-webcrypto` flag when running node.js.\n     * 3. Pass in a custom rng function to generate random values.\n     *\n     * @param {ECPairOptions} options - Options for the ECPairInterface.\n     * @return {ECPairInterface} A random ECPairInterface.\n     */\n    function makeRandom(options) {\n      v.parse(ECPairOptionsSchema, options);\n      if (options === undefined) options = {};\n      var rng = options.rng || function (size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n      };\n      var d;\n      do {\n        d = rng(32);\n        v.parse(types.Buffer256Bit, d);\n      } while (!ecc.isPrivate(d));\n      return fromPrivateKey(d, options);\n    }\n    var ECPair = /*#__PURE__*/function () {\n      function ECPair(__D, __Q, options) {\n        _classCallCheck(this, ECPair);\n        this.__D = __D;\n        this.__Q = __Q;\n        this.lowR = false;\n        if (options === undefined) options = {};\n        this.compressed = options.compressed === undefined ? true : options.compressed;\n        this.network = options.network || networks.bitcoin;\n        if (__Q !== undefined) this.__Q = ecc.pointCompress(__Q, this.compressed);\n      }\n      return _createClass(ECPair, [{\n        key: \"privateKey\",\n        get: function get() {\n          return this.__D;\n        }\n      }, {\n        key: \"publicKey\",\n        get: function get() {\n          if (!this.__Q) {\n            // It is not possible for both `__Q` and `__D` to be `undefined` at the same time.\n            // The factory methods guard for this.\n            var p = ecc.pointFromScalar(this.__D, this.compressed);\n            // It is not possible for `p` to be null.\n            // `fromPrivateKey()` checks that `__D` is a valid scalar.\n            this.__Q = p;\n          }\n          return this.__Q;\n        }\n      }, {\n        key: \"toWIF\",\n        value: function toWIF() {\n          if (!this.__D) throw new Error('Missing private key');\n          return wif.encode({\n            compressed: this.compressed,\n            privateKey: this.__D,\n            version: this.network.wif\n          });\n        }\n      }, {\n        key: \"tweak\",\n        value: function tweak(t) {\n          if (this.privateKey) return this.tweakFromPrivateKey(t);\n          return this.tweakFromPublicKey(t);\n        }\n      }, {\n        key: \"sign\",\n        value: function sign(hash, lowR) {\n          if (!this.__D) throw new Error('Missing private key');\n          if (lowR === undefined) lowR = this.lowR;\n          if (lowR === false) {\n            return ecc.sign(hash, this.__D);\n          } else {\n            var sig = ecc.sign(hash, this.__D);\n            var extraData = new Uint8Array(32);\n            var counter = 0;\n            // if first try is lowR, skip the loop\n            // for second try and on, add extra entropy counting up\n            while (sig[0] > 0x7f) {\n              counter++;\n              tools.writeUInt32(extraData, 0, counter, 'LE');\n              sig = ecc.sign(hash, this.__D, extraData);\n            }\n            return sig;\n          }\n        }\n      }, {\n        key: \"signSchnorr\",\n        value: function signSchnorr(hash) {\n          if (!this.privateKey) throw new Error('Missing private key');\n          if (!ecc.signSchnorr) throw new Error('signSchnorr not supported by ecc library');\n          return ecc.signSchnorr(hash, this.privateKey);\n        }\n      }, {\n        key: \"verify\",\n        value: function verify(hash, signature) {\n          return ecc.verify(hash, this.publicKey, signature);\n        }\n      }, {\n        key: \"verifySchnorr\",\n        value: function verifySchnorr(hash, signature) {\n          if (!ecc.verifySchnorr) throw new Error('verifySchnorr not supported by ecc library');\n          return ecc.verifySchnorr(hash, this.publicKey.subarray(1, 33), signature);\n        }\n      }, {\n        key: \"tweakFromPublicKey\",\n        value: function tweakFromPublicKey(t) {\n          var xOnlyPubKey = toXOnly(this.publicKey);\n          var tweakedPublicKey = ecc.xOnlyPointAddTweak(xOnlyPubKey, t);\n          if (!tweakedPublicKey || tweakedPublicKey.xOnlyPubkey === null) throw new Error('Cannot tweak public key!');\n          var parityByte = Uint8Array.from([tweakedPublicKey.parity === 0 ? 0x02 : 0x03]);\n          return fromPublicKey(tools.concat([parityByte, tweakedPublicKey.xOnlyPubkey]), {\n            network: this.network,\n            compressed: this.compressed\n          });\n        }\n      }, {\n        key: \"tweakFromPrivateKey\",\n        value: function tweakFromPrivateKey(t) {\n          var hasOddY = this.publicKey[0] === 3 || this.publicKey[0] === 4 && (this.publicKey[64] & 1) === 1;\n          var privateKey = hasOddY ? ecc.privateNegate(this.privateKey) : this.privateKey;\n          var tweakedPrivateKey = ecc.privateAdd(privateKey, t);\n          if (!tweakedPrivateKey) throw new Error('Invalid tweaked private key!');\n          return fromPrivateKey(tweakedPrivateKey, {\n            network: this.network,\n            compressed: this.compressed\n          });\n        }\n      }]);\n    }();\n    return {\n      isPoint: isPoint,\n      fromPrivateKey: fromPrivateKey,\n      fromPublicKey: fromPublicKey,\n      fromWIF: fromWIF,\n      makeRandom: makeRandom\n    };\n  }\n});","lineCount":243,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"_$$_REQUIRE"],[4,35,1,13],[4,36,1,13,"_dependencyMap"],[4,50,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"_$$_REQUIRE"],[5,32,1,13],[5,33,1,13,"_dependencyMap"],[5,47,1,13],[6,2,2,0],[6,6,2,4,"__createBinding"],[6,21,2,19],[6,24,3,3],[6,28,3,7],[6,32,3,11],[6,36,3,15],[6,37,3,16,"__createBinding"],[6,52,3,31],[6,57,4,3,"Object"],[6,63,4,9],[6,64,4,10,"create"],[6,70,4,16],[6,73,5,6],[6,83,5,16,"o"],[6,84,5,17],[6,86,5,19,"m"],[6,87,5,20],[6,89,5,22,"k"],[6,90,5,23],[6,92,5,25,"k2"],[6,94,5,27],[6,96,5,29],[7,4,6,8],[7,8,6,12,"k2"],[7,10,6,14],[7,15,6,19,"undefined"],[7,24,6,28],[7,26,6,30,"k2"],[7,28,6,32],[7,31,6,35,"k"],[7,32,6,36],[8,4,7,8],[8,8,7,12,"desc"],[8,12,7,16],[8,15,7,19,"Object"],[8,21,7,25],[8,22,7,26,"getOwnPropertyDescriptor"],[8,46,7,50],[8,47,7,51,"m"],[8,48,7,52],[8,50,7,54,"k"],[8,51,7,55],[8,52,7,56],[9,4,8,8],[9,8,9,10],[9,9,9,11,"desc"],[9,13,9,15],[9,18,10,11],[9,23,10,16],[9,27,10,20,"desc"],[9,31,10,24],[9,34,10,27],[9,35,10,28,"m"],[9,36,10,29],[9,37,10,30,"__esModule"],[9,47,10,40],[9,50,10,43,"desc"],[9,54,10,47],[9,55,10,48,"writable"],[9,63,10,56],[9,67,10,60,"desc"],[9,71,10,64],[9,72,10,65,"configurable"],[9,84,10,77],[9,85,10,78],[9,87,11,10],[10,6,12,10,"desc"],[10,10,12,14],[10,13,12,17],[11,8,13,12,"enumerable"],[11,18,13,22],[11,20,13,24],[11,24,13,28],[12,8,14,12,"get"],[12,11,14,15],[12,13,14,17],[12,22,14,12,"get"],[12,25,14,15,"get"],[12,26,14,15],[12,28,14,29],[13,10,15,14],[13,17,15,21,"m"],[13,18,15,22],[13,19,15,23,"k"],[13,20,15,24],[13,21,15,25],[14,8,16,12],[15,6,17,10],[15,7,17,11],[16,4,18,8],[17,4,19,8,"Object"],[17,10,19,14],[17,11,19,15,"defineProperty"],[17,25,19,29],[17,26,19,30,"o"],[17,27,19,31],[17,29,19,33,"k2"],[17,31,19,35],[17,33,19,37,"desc"],[17,37,19,41],[17,38,19,42],[18,2,20,6],[18,3,20,7],[18,6,21,6],[18,16,21,16,"o"],[18,17,21,17],[18,19,21,19,"m"],[18,20,21,20],[18,22,21,22,"k"],[18,23,21,23],[18,25,21,25,"k2"],[18,27,21,27],[18,29,21,29],[19,4,22,8],[19,8,22,12,"k2"],[19,10,22,14],[19,15,22,19,"undefined"],[19,24,22,28],[19,26,22,30,"k2"],[19,28,22,32],[19,31,22,35,"k"],[19,32,22,36],[20,4,23,8,"o"],[20,5,23,9],[20,6,23,10,"k2"],[20,8,23,12],[20,9,23,13],[20,12,23,16,"m"],[20,13,23,17],[20,14,23,18,"k"],[20,15,23,19],[20,16,23,20],[21,2,24,6],[21,3,24,7],[21,4,24,8],[22,2,25,0],[22,6,25,4,"__setModuleDefault"],[22,24,25,22],[22,27,26,3],[22,31,26,7],[22,35,26,11],[22,39,26,15],[22,40,26,16,"__setModuleDefault"],[22,58,26,34],[22,63,27,3,"Object"],[22,69,27,9],[22,70,27,10,"create"],[22,76,27,16],[22,79,28,6],[22,89,28,16,"o"],[22,90,28,17],[22,92,28,19,"v"],[22,93,28,20],[22,95,28,22],[23,4,29,8,"Object"],[23,10,29,14],[23,11,29,15,"defineProperty"],[23,25,29,29],[23,26,29,30,"o"],[23,27,29,31],[23,29,29,33],[23,38,29,42],[23,40,29,44],[24,6,29,46,"enumerable"],[24,16,29,56],[24,18,29,58],[24,22,29,62],[25,6,29,64,"value"],[25,11,29,69],[25,13,29,71,"v"],[26,4,29,73],[26,5,29,74],[26,6,29,75],[27,2,30,6],[27,3,30,7],[27,6,31,6],[27,16,31,16,"o"],[27,17,31,17],[27,19,31,19,"v"],[27,20,31,20],[27,22,31,22],[28,4,32,8,"o"],[28,5,32,9],[28,6,32,10],[28,15,32,19],[28,16,32,20],[28,19,32,23,"v"],[28,20,32,24],[29,2,33,6],[29,3,33,7],[29,4,33,8],[30,2,34,0],[30,6,34,4,"__importStar"],[30,18,34,16],[30,21,35,3],[30,25,35,7],[30,29,35,11],[30,33,35,15],[30,34,35,16,"__importStar"],[30,46,35,28],[30,50,36,2],[30,60,36,12,"mod"],[30,63,36,15],[30,65,36,17],[31,4,37,4],[31,8,37,8,"mod"],[31,11,37,11],[31,15,37,15,"mod"],[31,18,37,18],[31,19,37,19,"__esModule"],[31,29,37,29],[31,31,37,31],[31,38,37,38,"mod"],[31,41,37,41],[32,4,38,4],[32,8,38,8,"result"],[32,14,38,14],[32,17,38,17],[32,18,38,18],[32,19,38,19],[33,4,39,4],[33,8,39,8,"mod"],[33,11,39,11],[33,15,39,15],[33,19,39,19],[33,21,40,6],[33,26,40,11],[33,30,40,15,"k"],[33,31,40,16],[33,35,40,20,"mod"],[33,38,40,23],[33,40,41,8],[33,44,41,12,"k"],[33,45,41,13],[33,50,41,18],[33,59,41,27],[33,63,41,31,"Object"],[33,69,41,37],[33,70,41,38,"prototype"],[33,79,41,47],[33,80,41,48,"hasOwnProperty"],[33,94,41,62],[33,95,41,63,"call"],[33,99,41,67],[33,100,41,68,"mod"],[33,103,41,71],[33,105,41,73,"k"],[33,106,41,74],[33,107,41,75],[33,109,42,10,"__createBinding"],[33,124,42,25],[33,125,42,26,"result"],[33,131,42,32],[33,133,42,34,"mod"],[33,136,42,37],[33,138,42,39,"k"],[33,139,42,40],[33,140,42,41],[34,4,43,4,"__setModuleDefault"],[34,22,43,22],[34,23,43,23,"result"],[34,29,43,29],[34,31,43,31,"mod"],[34,34,43,34],[34,35,43,35],[35,4,44,4],[35,11,44,11,"result"],[35,17,44,17],[36,2,45,2],[36,3,45,3],[37,2,46,0,"Object"],[37,8,46,6],[37,9,46,7,"defineProperty"],[37,23,46,21],[37,24,46,22,"exports"],[37,31,46,29],[37,33,46,31],[37,45,46,43],[37,47,46,45],[38,4,46,47,"value"],[38,9,46,52],[38,11,46,54],[39,2,46,59],[39,3,46,60],[39,4,46,61],[40,2,47,0,"exports"],[40,9,47,7],[40,10,47,8,"networks"],[40,18,47,16],[40,21,47,19],[40,26,47,24],[40,27,47,25],[41,2,48,0,"exports"],[41,9,48,7],[41,10,48,8,"ECPairFactory"],[41,23,48,21],[41,26,48,24,"ECPairFactory"],[41,39,48,37],[42,2,49,0],[42,6,49,6,"networks"],[42,14,49,14],[42,17,49,17,"__importStar"],[42,29,49,29],[42,30,49,30,"require"],[42,41,49,37],[42,42,49,37,"_dependencyMap"],[42,56,49,37],[42,77,49,54],[42,78,49,55],[42,79,49,56],[43,2,50,0,"exports"],[43,9,50,7],[43,10,50,8,"networks"],[43,18,50,16],[43,21,50,19,"networks"],[43,29,50,27],[44,2,51,0],[44,6,51,6,"types"],[44,11,51,11],[44,14,51,14,"__importStar"],[44,26,51,26],[44,27,51,27,"require"],[44,38,51,34],[44,39,51,34,"_dependencyMap"],[44,53,51,34],[44,71,51,48],[44,72,51,49],[44,73,51,50],[45,2,52,0],[45,6,52,6,"wif"],[45,9,52,9],[45,12,52,12,"__importStar"],[45,24,52,24],[45,25,52,25,"require"],[45,36,52,32],[45,37,52,32,"_dependencyMap"],[45,51,52,32],[45,61,52,38],[45,62,52,39],[45,63,52,40],[46,2,54,0],[46,6,54,6,"v"],[46,7,54,7],[46,10,54,10,"__importStar"],[46,22,54,22],[46,23,54,23,"require"],[46,34,54,30],[46,35,54,30,"_dependencyMap"],[46,49,54,30],[46,63,54,40],[46,64,54,41],[46,65,54,42],[47,2,55,0],[47,6,55,6,"tools"],[47,11,55,11],[47,14,55,14,"__importStar"],[47,26,55,26],[47,27,55,27,"require"],[47,38,55,34],[47,39,55,34,"_dependencyMap"],[47,53,55,34],[47,76,55,53],[47,77,55,54],[47,78,55,55],[48,2,56,0],[48,6,56,6,"ECPairOptionsSchema"],[48,25,56,25],[48,28,56,28,"v"],[48,29,56,29],[48,30,56,30,"optional"],[48,38,56,38],[48,39,57,2,"v"],[48,40,57,3],[48,41,57,4,"object"],[48,47,57,10],[48,48,57,11],[49,4,58,4,"compressed"],[49,14,58,14],[49,16,58,16,"v"],[49,17,58,17],[49,18,58,18,"optional"],[49,26,58,26],[49,27,58,27,"v"],[49,28,58,28],[49,29,58,29,"boolean"],[49,36,58,36],[49,37,58,37],[49,38,58,38],[49,39,58,39],[50,4,59,4,"network"],[50,11,59,11],[50,13,59,13,"v"],[50,14,59,14],[50,15,59,15,"optional"],[50,23,59,23],[50,24,59,24,"types"],[50,29,59,29],[50,30,59,30,"NetworkSchema"],[50,43,59,43],[50,44,59,44],[51,4,60,4],[52,4,61,4,"rng"],[52,7,61,7],[52,9,61,9,"v"],[52,10,61,10],[52,11,61,11,"optional"],[52,19,61,19],[52,20,62,6,"v"],[52,21,62,7],[52,22,62,8,"pipe"],[52,26,62,12],[52,27,63,8,"v"],[52,28,63,9],[52,29,63,10,"instance"],[52,37,63,18],[52,38,63,19,"Function"],[52,46,63,27],[52,47,63,28],[52,49,64,8,"v"],[52,50,64,9],[52,51,64,10,"transform"],[52,60,64,19],[52,61,64,20],[52,71,64,21,"func"],[52,75,64,25],[52,77,64,30],[53,6,65,10],[53,13,65,17],[53,23,65,18,"arg"],[53,26,65,21],[53,28,65,26],[54,8,66,12],[54,12,66,18,"parsedArg"],[54,21,66,27],[54,24,66,30,"v"],[54,25,66,31],[54,26,66,32,"parse"],[54,31,66,37],[54,32,66,38,"v"],[54,33,66,39],[54,34,66,40,"optional"],[54,42,66,48],[54,43,66,49,"v"],[54,44,66,50],[54,45,66,51,"number"],[54,51,66,57],[54,52,66,58],[54,53,66,59],[54,54,66,60],[54,56,66,62,"arg"],[54,59,66,65],[54,60,66,66],[55,8,67,12],[55,12,67,18,"returnedValue"],[55,25,67,31],[55,28,67,34,"func"],[55,32,67,38],[55,33,67,39,"parsedArg"],[55,42,67,48],[55,43,67,49],[56,8,68,12],[56,12,68,18,"parsedReturn"],[56,24,68,30],[56,27,68,33,"v"],[56,28,68,34],[56,29,68,35,"parse"],[56,34,68,40],[56,35,68,41,"v"],[56,36,68,42],[56,37,68,43,"instance"],[56,45,68,51],[56,46,68,52,"Uint8Array"],[56,56,68,62],[56,57,68,63],[56,59,68,65,"returnedValue"],[56,72,68,78],[56,73,68,79],[57,8,69,12],[57,15,69,19,"parsedReturn"],[57,27,69,31],[58,6,70,10],[58,7,70,11],[59,4,71,8],[59,5,71,9],[59,6,72,6],[59,7,73,4],[60,2,74,2],[60,3,74,3],[60,4,75,0],[60,5,75,1],[61,2,76,0],[61,6,76,6,"toXOnly"],[61,13,76,13],[61,16,76,16],[61,25,76,6,"toXOnly"],[61,32,76,13,"toXOnly"],[61,33,76,17,"pubKey"],[61,39,76,23],[62,4,76,23],[62,11,77,2,"pubKey"],[62,17,77,8],[62,18,77,9,"length"],[62,24,77,15],[62,29,77,20],[62,31,77,22],[62,34,77,25,"pubKey"],[62,40,77,31],[62,43,77,34,"pubKey"],[62,49,77,40],[62,50,77,41,"subarray"],[62,58,77,49],[62,59,77,50],[62,60,77,51],[62,62,77,53],[62,64,77,55],[62,65,77,56],[63,2,77,56],[64,2,78,0],[64,11,78,9,"ECPairFactory"],[64,24,78,22,"ECPairFactory"],[64,25,78,23,"ecc"],[64,28,78,26],[64,30,78,28],[65,4,79,2],[65,5,79,3],[65,6,79,4],[65,8,79,6,"_$$_REQUIRE"],[65,19,79,6],[65,20,79,6,"_dependencyMap"],[65,34,79,6],[65,56,79,16,"testEcc"],[65,63,79,23],[65,65,79,25,"ecc"],[65,68,79,28],[65,69,79,29],[66,4,80,2],[66,13,80,11,"isPoint"],[66,20,80,18,"isPoint"],[66,21,80,19,"maybePoint"],[66,31,80,29],[66,33,80,31],[67,6,81,4],[67,13,81,11,"ecc"],[67,16,81,14],[67,17,81,15,"isPoint"],[67,24,81,22],[67,25,81,23,"maybePoint"],[67,35,81,33],[67,36,81,34],[68,4,82,2],[69,4,83,2],[69,13,83,11,"fromPrivateKey"],[69,27,83,25,"fromPrivateKey"],[69,28,83,26,"buffer"],[69,34,83,32],[69,36,83,34,"options"],[69,43,83,41],[69,45,83,43],[70,6,84,4,"v"],[70,7,84,5],[70,8,84,6,"parse"],[70,13,84,11],[70,14,84,12,"types"],[70,19,84,17],[70,20,84,18,"Buffer256Bit"],[70,32,84,30],[70,34,84,32,"buffer"],[70,40,84,38],[70,41,84,39],[71,6,85,4],[71,10,85,8],[71,11,85,9,"ecc"],[71,14,85,12],[71,15,85,13,"isPrivate"],[71,24,85,22],[71,25,85,23,"buffer"],[71,31,85,29],[71,32,85,30],[71,34,86,6],[71,40,86,12],[71,44,86,16,"TypeError"],[71,53,86,25],[71,54,86,26],[71,87,86,59],[71,88,86,60],[72,6,87,4,"v"],[72,7,87,5],[72,8,87,6,"parse"],[72,13,87,11],[72,14,87,12,"ECPairOptionsSchema"],[72,33,87,31],[72,35,87,33,"options"],[72,42,87,40],[72,43,87,41],[73,6,88,4],[73,13,88,11],[73,17,88,15,"ECPair"],[73,23,88,21],[73,24,88,22,"buffer"],[73,30,88,28],[73,32,88,30,"undefined"],[73,41,88,39],[73,43,88,41,"options"],[73,50,88,48],[73,51,88,49],[74,4,89,2],[75,4,90,2],[75,13,90,11,"fromPublicKey"],[75,26,90,24,"fromPublicKey"],[75,27,90,25,"buffer"],[75,33,90,31],[75,35,90,33,"options"],[75,42,90,40],[75,44,90,42],[76,6,91,4],[76,10,91,8],[76,11,91,9,"ecc"],[76,14,91,12],[76,15,91,13,"isPoint"],[76,22,91,20],[76,23,91,21,"buffer"],[76,29,91,27],[76,30,91,28],[76,32,91,30],[77,8,92,6],[77,14,92,12],[77,18,92,16,"Error"],[77,23,92,21],[77,24,92,22],[77,48,92,46],[77,49,92,47],[78,6,93,4],[79,6,94,4,"v"],[79,7,94,5],[79,8,94,6,"parse"],[79,13,94,11],[79,14,94,12,"ECPairOptionsSchema"],[79,33,94,31],[79,35,94,33,"options"],[79,42,94,40],[79,43,94,41],[80,6,95,4],[80,13,95,11],[80,17,95,15,"ECPair"],[80,23,95,21],[80,24,95,22,"undefined"],[80,33,95,31],[80,35,95,33,"buffer"],[80,41,95,39],[80,43,95,41,"options"],[80,50,95,48],[80,51,95,49],[81,4,96,2],[82,4,97,2],[82,13,97,11,"fromWIF"],[82,20,97,18,"fromWIF"],[82,21,97,19,"wifString"],[82,30,97,28],[82,32,97,30,"network"],[82,39,97,37],[82,41,97,39],[83,6,98,4],[83,10,98,10,"decoded"],[83,17,98,17],[83,20,98,20,"wif"],[83,23,98,23],[83,24,98,24,"decode"],[83,30,98,30],[83,31,98,31,"wifString"],[83,40,98,40],[83,41,98,41],[84,6,99,4],[84,10,99,10,"version"],[84,17,99,17],[84,20,99,20,"decoded"],[84,27,99,27],[84,28,99,28,"version"],[84,35,99,35],[85,6,100,4],[86,6,101,4],[86,10,101,8,"Array"],[86,15,101,13],[86,16,101,14,"isArray"],[86,23,101,21],[86,24,101,22,"network"],[86,31,101,29],[86,32,101,30],[86,34,101,32],[87,8,102,6,"network"],[87,15,102,13],[87,18,102,16,"network"],[87,25,102,23],[87,26,103,9,"filter"],[87,32,103,15],[87,33,103,16],[87,43,103,17,"x"],[87,44,103,18],[87,46,103,23],[88,10,104,10],[88,17,104,17,"version"],[88,24,104,24],[88,29,104,29,"x"],[88,30,104,30],[88,31,104,31,"wif"],[88,34,104,34],[89,8,105,8],[89,9,105,9],[89,10,105,10],[89,11,106,9,"pop"],[89,14,106,12],[89,15,106,13],[89,16,106,14],[90,8,107,6],[90,12,107,10],[90,13,107,11,"network"],[90,20,107,18],[90,22,107,20],[90,28,107,26],[90,32,107,30,"Error"],[90,37,107,35],[90,38,107,36],[90,63,107,61],[90,64,107,62],[91,8,108,6],[92,6,109,4],[92,7,109,5],[92,13,109,11],[93,8,110,6,"network"],[93,15,110,13],[93,18,110,16,"network"],[93,25,110,23],[93,29,110,27,"networks"],[93,37,110,35],[93,38,110,36,"bitcoin"],[93,45,110,43],[94,8,111,6],[94,12,111,10,"version"],[94,19,111,17],[94,24,111,22,"network"],[94,31,111,29],[94,32,111,30,"wif"],[94,35,111,33],[94,37,111,35],[94,43,111,41],[94,47,111,45,"Error"],[94,52,111,50],[94,53,111,51],[94,78,111,76],[94,79,111,77],[95,6,112,4],[96,6,113,4],[96,13,113,11,"fromPrivateKey"],[96,27,113,25],[96,28,113,26,"decoded"],[96,35,113,33],[96,36,113,34,"privateKey"],[96,46,113,44],[96,48,113,46],[97,8,114,6,"compressed"],[97,18,114,16],[97,20,114,18,"decoded"],[97,27,114,25],[97,28,114,26,"compressed"],[97,38,114,36],[98,8,115,6,"network"],[98,15,115,13],[98,17,115,15,"network"],[99,6,116,4],[99,7,116,5],[99,8,116,6],[100,4,117,2],[101,4,118,2],[102,0,119,0],[103,0,120,0],[104,0,121,0],[105,0,122,0],[106,0,123,0],[107,0,124,0],[108,0,125,0],[109,0,126,0],[110,0,127,0],[111,0,128,0],[112,4,129,2],[112,13,129,11,"makeRandom"],[112,23,129,21,"makeRandom"],[112,24,129,22,"options"],[112,31,129,29],[112,33,129,31],[113,6,130,4,"v"],[113,7,130,5],[113,8,130,6,"parse"],[113,13,130,11],[113,14,130,12,"ECPairOptionsSchema"],[113,33,130,31],[113,35,130,33,"options"],[113,42,130,40],[113,43,130,41],[114,6,131,4],[114,10,131,8,"options"],[114,17,131,15],[114,22,131,20,"undefined"],[114,31,131,29],[114,33,131,31,"options"],[114,40,131,38],[114,43,131,41],[114,44,131,42],[114,45,131,43],[115,6,132,4],[115,10,132,10,"rng"],[115,13,132,13],[115,16,133,6,"options"],[115,23,133,13],[115,24,133,14,"rng"],[115,27,133,17],[115,31,133,22],[115,41,133,23,"size"],[115,45,133,27],[116,8,133,27],[116,15,133,32,"crypto"],[116,21,133,38],[116,22,133,39,"getRandomValues"],[116,37,133,54],[116,38,133,55],[116,42,133,59,"Uint8Array"],[116,52,133,69],[116,53,133,70,"size"],[116,57,133,74],[116,58,133,75],[116,59,133,76],[117,6,133,76],[117,7,133,77],[118,6,134,4],[118,10,134,8,"d"],[118,11,134,9],[119,6,135,4],[119,9,135,7],[120,8,136,6,"d"],[120,9,136,7],[120,12,136,10,"rng"],[120,15,136,13],[120,16,136,14],[120,18,136,16],[120,19,136,17],[121,8,137,6,"v"],[121,9,137,7],[121,10,137,8,"parse"],[121,15,137,13],[121,16,137,14,"types"],[121,21,137,19],[121,22,137,20,"Buffer256Bit"],[121,34,137,32],[121,36,137,34,"d"],[121,37,137,35],[121,38,137,36],[122,6,138,4],[122,7,138,5],[122,15,138,13],[122,16,138,14,"ecc"],[122,19,138,17],[122,20,138,18,"isPrivate"],[122,29,138,27],[122,30,138,28,"d"],[122,31,138,29],[122,32,138,30],[123,6,139,4],[123,13,139,11,"fromPrivateKey"],[123,27,139,25],[123,28,139,26,"d"],[123,29,139,27],[123,31,139,29,"options"],[123,38,139,36],[123,39,139,37],[124,4,140,2],[125,4,140,3],[125,8,141,8,"ECPair"],[125,14,141,14],[126,6,147,4],[126,15,147,4,"ECPair"],[126,22,147,16,"__D"],[126,25,147,19],[126,27,147,21,"__Q"],[126,30,147,24],[126,32,147,26,"options"],[126,39,147,33],[126,41,147,35],[127,8,147,35,"_classCallCheck"],[127,23,147,35],[127,30,147,35,"ECPair"],[127,36,147,35],[128,8,148,6],[128,12,148,10],[128,13,148,11,"__D"],[128,16,148,14],[128,19,148,17,"__D"],[128,22,148,20],[129,8,149,6],[129,12,149,10],[129,13,149,11,"__Q"],[129,16,149,14],[129,19,149,17,"__Q"],[129,22,149,20],[130,8,150,6],[130,12,150,10],[130,13,150,11,"lowR"],[130,17,150,15],[130,20,150,18],[130,25,150,23],[131,8,151,6],[131,12,151,10,"options"],[131,19,151,17],[131,24,151,22,"undefined"],[131,33,151,31],[131,35,151,33,"options"],[131,42,151,40],[131,45,151,43],[131,46,151,44],[131,47,151,45],[132,8,152,6],[132,12,152,10],[132,13,152,11,"compressed"],[132,23,152,21],[132,26,153,8,"options"],[132,33,153,15],[132,34,153,16,"compressed"],[132,44,153,26],[132,49,153,31,"undefined"],[132,58,153,40],[132,61,153,43],[132,65,153,47],[132,68,153,50,"options"],[132,75,153,57],[132,76,153,58,"compressed"],[132,86,153,68],[133,8,154,6],[133,12,154,10],[133,13,154,11,"network"],[133,20,154,18],[133,23,154,21,"options"],[133,30,154,28],[133,31,154,29,"network"],[133,38,154,36],[133,42,154,40,"networks"],[133,50,154,48],[133,51,154,49,"bitcoin"],[133,58,154,56],[134,8,155,6],[134,12,155,10,"__Q"],[134,15,155,13],[134,20,155,18,"undefined"],[134,29,155,27],[134,31,155,29],[134,35,155,33],[134,36,155,34,"__Q"],[134,39,155,37],[134,42,155,40,"ecc"],[134,45,155,43],[134,46,155,44,"pointCompress"],[134,59,155,57],[134,60,155,58,"__Q"],[134,63,155,61],[134,65,155,63],[134,69,155,67],[134,70,155,68,"compressed"],[134,80,155,78],[134,81,155,79],[135,6,156,4],[136,6,156,5],[136,13,156,5,"_createClass"],[136,25,156,5],[136,26,156,5,"ECPair"],[136,32,156,5],[137,8,156,5,"key"],[137,11,156,5],[138,8,156,5,"get"],[138,11,156,5],[138,13,157,4],[138,22,157,4,"get"],[138,26,157,4],[138,28,157,21],[139,10,158,6],[139,17,158,13],[139,21,158,17],[139,22,158,18,"__D"],[139,25,158,21],[140,8,159,4],[141,6,159,5],[142,8,159,5,"key"],[142,11,159,5],[143,8,159,5,"get"],[143,11,159,5],[143,13,160,4],[143,22,160,4,"get"],[143,26,160,4],[143,28,160,20],[144,10,161,6],[144,14,161,10],[144,15,161,11],[144,19,161,15],[144,20,161,16,"__Q"],[144,23,161,19],[144,25,161,21],[145,12,162,8],[146,12,163,8],[147,12,164,8],[147,16,164,14,"p"],[147,17,164,15],[147,20,164,18,"ecc"],[147,23,164,21],[147,24,164,22,"pointFromScalar"],[147,39,164,37],[147,40,164,38],[147,44,164,42],[147,45,164,43,"__D"],[147,48,164,46],[147,50,164,48],[147,54,164,52],[147,55,164,53,"compressed"],[147,65,164,63],[147,66,164,64],[148,12,165,8],[149,12,166,8],[150,12,167,8],[150,16,167,12],[150,17,167,13,"__Q"],[150,20,167,16],[150,23,167,19,"p"],[150,24,167,20],[151,10,168,6],[152,10,169,6],[152,17,169,13],[152,21,169,17],[152,22,169,18,"__Q"],[152,25,169,21],[153,8,170,4],[154,6,170,5],[155,8,170,5,"key"],[155,11,170,5],[156,8,170,5,"value"],[156,13,170,5],[156,15,171,4],[156,24,171,4,"toWIF"],[156,29,171,9,"toWIF"],[156,30,171,9],[156,32,171,12],[157,10,172,6],[157,14,172,10],[157,15,172,11],[157,19,172,15],[157,20,172,16,"__D"],[157,23,172,19],[157,25,172,21],[157,31,172,27],[157,35,172,31,"Error"],[157,40,172,36],[157,41,172,37],[157,62,172,58],[157,63,172,59],[158,10,173,6],[158,17,173,13,"wif"],[158,20,173,16],[158,21,173,17,"encode"],[158,27,173,23],[158,28,173,24],[159,12,174,8,"compressed"],[159,22,174,18],[159,24,174,20],[159,28,174,24],[159,29,174,25,"compressed"],[159,39,174,35],[160,12,175,8,"privateKey"],[160,22,175,18],[160,24,175,20],[160,28,175,24],[160,29,175,25,"__D"],[160,32,175,28],[161,12,176,8,"version"],[161,19,176,15],[161,21,176,17],[161,25,176,21],[161,26,176,22,"network"],[161,33,176,29],[161,34,176,30,"wif"],[162,10,177,6],[162,11,177,7],[162,12,177,8],[163,8,178,4],[164,6,178,5],[165,8,178,5,"key"],[165,11,178,5],[166,8,178,5,"value"],[166,13,178,5],[166,15,179,4],[166,24,179,4,"tweak"],[166,29,179,9,"tweak"],[166,30,179,10,"t"],[166,31,179,11],[166,33,179,13],[167,10,180,6],[167,14,180,10],[167,18,180,14],[167,19,180,15,"privateKey"],[167,29,180,25],[167,31,180,27],[167,38,180,34],[167,42,180,38],[167,43,180,39,"tweakFromPrivateKey"],[167,62,180,58],[167,63,180,59,"t"],[167,64,180,60],[167,65,180,61],[168,10,181,6],[168,17,181,13],[168,21,181,17],[168,22,181,18,"tweakFromPublicKey"],[168,40,181,36],[168,41,181,37,"t"],[168,42,181,38],[168,43,181,39],[169,8,182,4],[170,6,182,5],[171,8,182,5,"key"],[171,11,182,5],[172,8,182,5,"value"],[172,13,182,5],[172,15,183,4],[172,24,183,4,"sign"],[172,28,183,8,"sign"],[172,29,183,9,"hash"],[172,33,183,13],[172,35,183,15,"lowR"],[172,39,183,19],[172,41,183,21],[173,10,184,6],[173,14,184,10],[173,15,184,11],[173,19,184,15],[173,20,184,16,"__D"],[173,23,184,19],[173,25,184,21],[173,31,184,27],[173,35,184,31,"Error"],[173,40,184,36],[173,41,184,37],[173,62,184,58],[173,63,184,59],[174,10,185,6],[174,14,185,10,"lowR"],[174,18,185,14],[174,23,185,19,"undefined"],[174,32,185,28],[174,34,185,30,"lowR"],[174,38,185,34],[174,41,185,37],[174,45,185,41],[174,46,185,42,"lowR"],[174,50,185,46],[175,10,186,6],[175,14,186,10,"lowR"],[175,18,186,14],[175,23,186,19],[175,28,186,24],[175,30,186,26],[176,12,187,8],[176,19,187,15,"ecc"],[176,22,187,18],[176,23,187,19,"sign"],[176,27,187,23],[176,28,187,24,"hash"],[176,32,187,28],[176,34,187,30],[176,38,187,34],[176,39,187,35,"__D"],[176,42,187,38],[176,43,187,39],[177,10,188,6],[177,11,188,7],[177,17,188,13],[178,12,189,8],[178,16,189,12,"sig"],[178,19,189,15],[178,22,189,18,"ecc"],[178,25,189,21],[178,26,189,22,"sign"],[178,30,189,26],[178,31,189,27,"hash"],[178,35,189,31],[178,37,189,33],[178,41,189,37],[178,42,189,38,"__D"],[178,45,189,41],[178,46,189,42],[179,12,190,8],[179,16,190,14,"extraData"],[179,25,190,23],[179,28,190,26],[179,32,190,30,"Uint8Array"],[179,42,190,40],[179,43,190,41],[179,45,190,43],[179,46,190,44],[180,12,191,8],[180,16,191,12,"counter"],[180,23,191,19],[180,26,191,22],[180,27,191,23],[181,12,192,8],[182,12,193,8],[183,12,194,8],[183,19,194,15,"sig"],[183,22,194,18],[183,23,194,19],[183,24,194,20],[183,25,194,21],[183,28,194,24],[183,32,194,28],[183,34,194,30],[184,14,195,10,"counter"],[184,21,195,17],[184,23,195,19],[185,14,196,10,"tools"],[185,19,196,15],[185,20,196,16,"writeUInt32"],[185,31,196,27],[185,32,196,28,"extraData"],[185,41,196,37],[185,43,196,39],[185,44,196,40],[185,46,196,42,"counter"],[185,53,196,49],[185,55,196,51],[185,59,196,55],[185,60,196,56],[186,14,197,10,"sig"],[186,17,197,13],[186,20,197,16,"ecc"],[186,23,197,19],[186,24,197,20,"sign"],[186,28,197,24],[186,29,197,25,"hash"],[186,33,197,29],[186,35,197,31],[186,39,197,35],[186,40,197,36,"__D"],[186,43,197,39],[186,45,197,41,"extraData"],[186,54,197,50],[186,55,197,51],[187,12,198,8],[188,12,199,8],[188,19,199,15,"sig"],[188,22,199,18],[189,10,200,6],[190,8,201,4],[191,6,201,5],[192,8,201,5,"key"],[192,11,201,5],[193,8,201,5,"value"],[193,13,201,5],[193,15,202,4],[193,24,202,4,"signSchnorr"],[193,35,202,15,"signSchnorr"],[193,36,202,16,"hash"],[193,40,202,20],[193,42,202,22],[194,10,203,6],[194,14,203,10],[194,15,203,11],[194,19,203,15],[194,20,203,16,"privateKey"],[194,30,203,26],[194,32,203,28],[194,38,203,34],[194,42,203,38,"Error"],[194,47,203,43],[194,48,203,44],[194,69,203,65],[194,70,203,66],[195,10,204,6],[195,14,204,10],[195,15,204,11,"ecc"],[195,18,204,14],[195,19,204,15,"signSchnorr"],[195,30,204,26],[195,32,205,8],[195,38,205,14],[195,42,205,18,"Error"],[195,47,205,23],[195,48,205,24],[195,90,205,66],[195,91,205,67],[196,10,206,6],[196,17,206,13,"ecc"],[196,20,206,16],[196,21,206,17,"signSchnorr"],[196,32,206,28],[196,33,206,29,"hash"],[196,37,206,33],[196,39,206,35],[196,43,206,39],[196,44,206,40,"privateKey"],[196,54,206,50],[196,55,206,51],[197,8,207,4],[198,6,207,5],[199,8,207,5,"key"],[199,11,207,5],[200,8,207,5,"value"],[200,13,207,5],[200,15,208,4],[200,24,208,4,"verify"],[200,30,208,10,"verify"],[200,31,208,11,"hash"],[200,35,208,15],[200,37,208,17,"signature"],[200,46,208,26],[200,48,208,28],[201,10,209,6],[201,17,209,13,"ecc"],[201,20,209,16],[201,21,209,17,"verify"],[201,27,209,23],[201,28,209,24,"hash"],[201,32,209,28],[201,34,209,30],[201,38,209,34],[201,39,209,35,"publicKey"],[201,48,209,44],[201,50,209,46,"signature"],[201,59,209,55],[201,60,209,56],[202,8,210,4],[203,6,210,5],[204,8,210,5,"key"],[204,11,210,5],[205,8,210,5,"value"],[205,13,210,5],[205,15,211,4],[205,24,211,4,"verifySchnorr"],[205,37,211,17,"verifySchnorr"],[205,38,211,18,"hash"],[205,42,211,22],[205,44,211,24,"signature"],[205,53,211,33],[205,55,211,35],[206,10,212,6],[206,14,212,10],[206,15,212,11,"ecc"],[206,18,212,14],[206,19,212,15,"verifySchnorr"],[206,32,212,28],[206,34,213,8],[206,40,213,14],[206,44,213,18,"Error"],[206,49,213,23],[206,50,213,24],[206,94,213,68],[206,95,213,69],[207,10,214,6],[207,17,214,13,"ecc"],[207,20,214,16],[207,21,214,17,"verifySchnorr"],[207,34,214,30],[207,35,214,31,"hash"],[207,39,214,35],[207,41,214,37],[207,45,214,41],[207,46,214,42,"publicKey"],[207,55,214,51],[207,56,214,52,"subarray"],[207,64,214,60],[207,65,214,61],[207,66,214,62],[207,68,214,64],[207,70,214,66],[207,71,214,67],[207,73,214,69,"signature"],[207,82,214,78],[207,83,214,79],[208,8,215,4],[209,6,215,5],[210,8,215,5,"key"],[210,11,215,5],[211,8,215,5,"value"],[211,13,215,5],[211,15,216,4],[211,24,216,4,"tweakFromPublicKey"],[211,42,216,22,"tweakFromPublicKey"],[211,43,216,23,"t"],[211,44,216,24],[211,46,216,26],[212,10,217,6],[212,14,217,12,"xOnlyPubKey"],[212,25,217,23],[212,28,217,26,"toXOnly"],[212,35,217,33],[212,36,217,34],[212,40,217,38],[212,41,217,39,"publicKey"],[212,50,217,48],[212,51,217,49],[213,10,218,6],[213,14,218,12,"tweakedPublicKey"],[213,30,218,28],[213,33,218,31,"ecc"],[213,36,218,34],[213,37,218,35,"xOnlyPointAddTweak"],[213,55,218,53],[213,56,218,54,"xOnlyPubKey"],[213,67,218,65],[213,69,218,67,"t"],[213,70,218,68],[213,71,218,69],[214,10,219,6],[214,14,219,10],[214,15,219,11,"tweakedPublicKey"],[214,31,219,27],[214,35,219,31,"tweakedPublicKey"],[214,51,219,47],[214,52,219,48,"xOnlyPubkey"],[214,63,219,59],[214,68,219,64],[214,72,219,68],[214,74,220,8],[214,80,220,14],[214,84,220,18,"Error"],[214,89,220,23],[214,90,220,24],[214,116,220,50],[214,117,220,51],[215,10,221,6],[215,14,221,12,"parityByte"],[215,24,221,22],[215,27,221,25,"Uint8Array"],[215,37,221,35],[215,38,221,36,"from"],[215,42,221,40],[215,43,221,41],[215,44,222,8,"tweakedPublicKey"],[215,60,222,24],[215,61,222,25,"parity"],[215,67,222,31],[215,72,222,36],[215,73,222,37],[215,76,222,40],[215,80,222,44],[215,83,222,47],[215,87,222,51],[215,88,223,7],[215,89,223,8],[216,10,224,6],[216,17,224,13,"fromPublicKey"],[216,30,224,26],[216,31,225,8,"tools"],[216,36,225,13],[216,37,225,14,"concat"],[216,43,225,20],[216,44,225,21],[216,45,225,22,"parityByte"],[216,55,225,32],[216,57,225,34,"tweakedPublicKey"],[216,73,225,50],[216,74,225,51,"xOnlyPubkey"],[216,85,225,62],[216,86,225,63],[216,87,225,64],[216,89,226,8],[217,12,227,10,"network"],[217,19,227,17],[217,21,227,19],[217,25,227,23],[217,26,227,24,"network"],[217,33,227,31],[218,12,228,10,"compressed"],[218,22,228,20],[218,24,228,22],[218,28,228,26],[218,29,228,27,"compressed"],[219,10,229,8],[219,11,230,6],[219,12,230,7],[220,8,231,4],[221,6,231,5],[222,8,231,5,"key"],[222,11,231,5],[223,8,231,5,"value"],[223,13,231,5],[223,15,232,4],[223,24,232,4,"tweakFromPrivateKey"],[223,43,232,23,"tweakFromPrivateKey"],[223,44,232,24,"t"],[223,45,232,25],[223,47,232,27],[224,10,233,6],[224,14,233,12,"hasOddY"],[224,21,233,19],[224,24,234,8],[224,28,234,12],[224,29,234,13,"publicKey"],[224,38,234,22],[224,39,234,23],[224,40,234,24],[224,41,234,25],[224,46,234,30],[224,47,234,31],[224,51,235,9],[224,55,235,13],[224,56,235,14,"publicKey"],[224,65,235,23],[224,66,235,24],[224,67,235,25],[224,68,235,26],[224,73,235,31],[224,74,235,32],[224,78,235,36],[224,79,235,37],[224,83,235,41],[224,84,235,42,"publicKey"],[224,93,235,51],[224,94,235,52],[224,96,235,54],[224,97,235,55],[224,100,235,58],[224,101,235,59],[224,107,235,65],[224,108,235,67],[225,10,236,6],[225,14,236,12,"privateKey"],[225,24,236,22],[225,27,236,25,"hasOddY"],[225,34,236,32],[225,37,237,10,"ecc"],[225,40,237,13],[225,41,237,14,"privateNegate"],[225,54,237,27],[225,55,237,28],[225,59,237,32],[225,60,237,33,"privateKey"],[225,70,237,43],[225,71,237,44],[225,74,238,10],[225,78,238,14],[225,79,238,15,"privateKey"],[225,89,238,25],[226,10,239,6],[226,14,239,12,"tweakedPrivateKey"],[226,31,239,29],[226,34,239,32,"ecc"],[226,37,239,35],[226,38,239,36,"privateAdd"],[226,48,239,46],[226,49,239,47,"privateKey"],[226,59,239,57],[226,61,239,59,"t"],[226,62,239,60],[226,63,239,61],[227,10,240,6],[227,14,240,10],[227,15,240,11,"tweakedPrivateKey"],[227,32,240,28],[227,34,240,30],[227,40,240,36],[227,44,240,40,"Error"],[227,49,240,45],[227,50,240,46],[227,80,240,76],[227,81,240,77],[228,10,241,6],[228,17,241,13,"fromPrivateKey"],[228,31,241,27],[228,32,241,28,"tweakedPrivateKey"],[228,49,241,45],[228,51,241,47],[229,12,242,8,"network"],[229,19,242,15],[229,21,242,17],[229,25,242,21],[229,26,242,22,"network"],[229,33,242,29],[230,12,243,8,"compressed"],[230,22,243,18],[230,24,243,20],[230,28,243,24],[230,29,243,25,"compressed"],[231,10,244,6],[231,11,244,7],[231,12,244,8],[232,8,245,4],[233,6,245,5],[234,4,245,5],[235,4,247,2],[235,11,247,9],[236,6,248,4,"isPoint"],[236,13,248,11],[236,15,248,4,"isPoint"],[236,22,248,11],[237,6,249,4,"fromPrivateKey"],[237,20,249,18],[237,22,249,4,"fromPrivateKey"],[237,36,249,18],[238,6,250,4,"fromPublicKey"],[238,19,250,17],[238,21,250,4,"fromPublicKey"],[238,34,250,17],[239,6,251,4,"fromWIF"],[239,13,251,11],[239,15,251,4,"fromWIF"],[239,22,251,11],[240,6,252,4,"makeRandom"],[240,16,252,14],[240,18,252,4,"makeRandom"],[241,4,253,2],[241,5,253,3],[242,2,254,0],[243,0,254,1],[243,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","v.transform$argument_0","toXOnly","ECPairFactory","isPoint","fromPrivateKey","fromPublicKey","fromWIF","network.filter$argument_0","makeRandom","ECPair","ECPair#constructor","ECPair#get__privateKey","ECPair#get__publicKey","ECPair#toWIF","ECPair#tweak","ECPair#sign","ECPair#signSchnorr","ECPair#verify","ECPair#verifySchnorr","ECPair#tweakFromPublicKey","ECPair#tweakFromPrivateKey"],"mappings":"AAA;MCI;iBCS;aDE;ODI;MCC;ODG;MCI;ODE;MCC;ODE;ECG;GDS;oBGmB;iBFC;WEK;SHC;gBIK;wDJC;AKC;ECE;GDE;EEC;GFM;EGC;GHM;EIC;gBCM;SDE;GJY;EMY;sBVI,sDU;GNO;EOC;ICM;KDS;IEC;KFE;IGC;KHU;IIC;KJO;IKC;KLG;IMC;KNkB;IOC;KPK;IQC;KRE;ISC;KTI;IUC;KVe;IWC;KXa;GPC;CLQ"}},"type":"js/module"}]}