{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":228,"column":0,"index":7846}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk="}},{"name":"create-hash","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":424},"end":{"line":12,"column":37,"index":461}}],"key":"S+LTcEsr9DE4tXbLBAdDMJflQ0A="}},{"name":"@noble/secp256k1","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":499},"end":{"line":14,"column":41,"index":540}}],"key":"ugvgZ2kZKVKf9ahqP3VTezq0lV0="}},{"name":"crypto","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":462},"end":{"line":13,"column":36,"index":498}}],"key":"6Athyt5cKjlNulGJomFjL8BysnY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _createHash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"create-hash\"));\n  var necc = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2], \"@noble/secp256k1\"));\n  function _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\n  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n  /**\n   * adapted from https://github.com/BitGo/BitGoJS/blob/bitcoinjs_lib_6_sync/modules/utxo-lib/src/noble_ecc.ts\n   * license: Apache License\n   *\n   * some pieces are ported from:\n   * https://github.com/paulmillr/noble-secp256k1\n   * https://github.com/bitcoinerlab/secp256k1\n   *\n   * @see https://github.com/bitcoinjs/tiny-secp256k1/issues/84#issuecomment-1185682315\n   * @see https://github.com/bitcoinjs/bitcoinjs-lib/issues/1781\n   */\n\n  necc.utils.sha256Sync = function () {\n    var sha256 = (0, _createHash.default)(\"sha256\");\n    for (var _len = arguments.length, messages = new Array(_len), _key = 0; _key < _len; _key++) {\n      messages[_key] = arguments[_key];\n    }\n    for (var message of messages) sha256.update(message);\n    return sha256.digest();\n  };\n  necc.utils.hmacSha256Sync = function (key) {\n    var hash = (0, _$$_REQUIRE(_dependencyMap[3], \"crypto\").createHmac)(\"sha256\", Buffer.from(key));\n    for (var _len2 = arguments.length, messages = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      messages[_key2 - 1] = arguments[_key2];\n    }\n    messages.forEach(function (m) {\n      return hash.update(m);\n    });\n    return Uint8Array.from(hash.digest());\n  };\n  var defaultTrue = function defaultTrue(param) {\n    return param !== false;\n  };\n  function throwToNull(fn) {\n    try {\n      return fn();\n    } catch (e) {\n      return null;\n    }\n  }\n  function _isPoint(p, xOnly) {\n    if (p.length === 32 !== xOnly) return false;\n    try {\n      return !!necc.Point.fromHex(p);\n    } catch (e) {\n      return false;\n    }\n  }\n  var ecc = {\n    isPoint: function isPoint(p) {\n      return _isPoint(p, false);\n    },\n    isPrivate: function isPrivate(d) {\n      return necc.utils.isValidPrivateKey(d);\n    },\n    isXOnlyPoint: function isXOnlyPoint(p) {\n      return _isPoint(p, true);\n    },\n    xOnlyPointAddTweak: function xOnlyPointAddTweak(p, tweak) {\n      return throwToNull(function () {\n        var P = necc.utils.pointAddScalar(p, tweak, true);\n        var parity = P[0] % 2 === 1 ? 1 : 0;\n        return {\n          parity: parity,\n          xOnlyPubkey: P.slice(1)\n        };\n      });\n    },\n    getSharedSecret: function getSharedSecret(sk, pk, compressed) {\n      return necc.getSharedSecret(sk, pk, defaultTrue(compressed));\n    },\n    pointFromScalar: function pointFromScalar(sk, compressed) {\n      return throwToNull(function () {\n        return necc.getPublicKey(sk, defaultTrue(compressed));\n      });\n    },\n    pointCompress: function pointCompress(p, compressed) {\n      return necc.Point.fromHex(p).toRawBytes(defaultTrue(compressed));\n    },\n    pointMultiply: function pointMultiply(a, tweak, compressed) {\n      return throwToNull(function () {\n        return necc.utils.pointMultiply(a, tweak, defaultTrue(compressed));\n      });\n    },\n    pointAdd: function pointAdd(a, b, compressed) {\n      return throwToNull(function () {\n        var A = necc.Point.fromHex(a);\n        var B = necc.Point.fromHex(b);\n        return A.add(B).toRawBytes(defaultTrue(compressed));\n      });\n    },\n    pointAddScalar: function pointAddScalar(p, tweak, compressed) {\n      return throwToNull(function () {\n        return necc.utils.pointAddScalar(p, tweak, defaultTrue(compressed));\n      });\n    },\n    privateAdd: function privateAdd(d, tweak) {\n      return throwToNull(function () {\n        var ret = necc.utils.privateAdd(d, tweak);\n        if (ret.join(\"\") === \"00000000000000000000000000000000\") {\n          return null;\n        }\n        return ret;\n      });\n    },\n    privateNegate: function privateNegate(d) {\n      return necc.utils.privateNegate(d);\n    },\n    sign: function sign(h, d, e) {\n      return necc.signSync(h, d, {\n        der: false,\n        extraEntropy: e\n      });\n    },\n    signSchnorr: function signSchnorr(h, d) {\n      var e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Buffer.alloc(32, 0x00);\n      return necc.schnorr.signSync(h, d, e);\n    },\n    verify: function verify(h, Q, signature, strict) {\n      return necc.verify(signature, h, Q, {\n        strict: strict\n      });\n    },\n    verifySchnorr: function verifySchnorr(h, Q, signature) {\n      return necc.schnorr.verifySync(signature, h, Q);\n    },\n    privateMultiply: function privateMultiply(d, tweak) {\n      if (ecc.isPrivate(d) === false) {\n        throw new Error(\"Expected Private\");\n      }\n      var _privateMultiply = function _privateMultiply(privateKey, tweak) {\n        var p = normalizePrivateKey(privateKey);\n        var t = normalizeScalar(tweak);\n        var mul = _bigintTo32Bytes(necc.utils.mod(p * t, necc.CURVE.n));\n        if (necc.utils.isValidPrivateKey(mul)) return mul;else return null;\n      };\n      return throwToNull(function () {\n        return _privateMultiply(d, tweak);\n      });\n    }\n  };\n  var _default = exports.default = ecc;\n  function normalizeScalar(scalar) {\n    var num;\n    if (typeof scalar === \"bigint\") {\n      num = scalar;\n    } else if (typeof scalar === \"number\" && Number.isSafeInteger(scalar) && scalar >= 0) {\n      num = BigInt(scalar);\n    } else if (typeof scalar === \"string\") {\n      if (scalar.length !== 64) throw new Error(\"Expected 32 bytes of private scalar\");\n      num = hexToNumber(scalar);\n    } else if (scalar instanceof Uint8Array) {\n      if (scalar.length !== 32) throw new Error(\"Expected 32 bytes of private scalar\");\n      num = bytesToNumber(scalar);\n    } else {\n      throw new TypeError(\"Expected valid private scalar\");\n    }\n    if (num < 0) throw new Error(\"Expected private scalar >= 0\");\n    return num;\n  }\n  function hexToNumber(hex) {\n    return BigInt(`0x${hex}`);\n  }\n  function bytesToNumber(bytes) {\n    return hexToNumber(necc.utils.bytesToHex(bytes));\n  }\n  function normalizePrivateKey(key) {\n    var num;\n    if (typeof key === \"bigint\") {\n      num = key;\n    } else if (typeof key === \"number\" && Number.isSafeInteger(key) && key > 0) {\n      num = BigInt(key);\n    } else if (typeof key === \"string\") {\n      if (key.length !== 64) throw new Error(\"Expected 32 bytes of private key\");\n      num = hexToNumber(key);\n    } else if (isUint8a(key)) {\n      if (key.length !== 32) throw new Error(\"Expected 32 bytes of private key\");\n      num = bytesToNumber(key);\n    } else {\n      throw new TypeError(\"Expected valid private key\");\n    }\n    if (!isWithinCurveOrder(num)) throw new Error(\"Expected private key: 0 < key < n\");\n    return num;\n  }\n  function isUint8a(bytes) {\n    return bytes instanceof Uint8Array;\n  }\n  function isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n  }\n  var _0n = BigInt(0);\n  var _1n = BigInt(1);\n  var _2n = BigInt(2);\n  var POW_2_256 = _2n ** BigInt(256);\n  var CURVE = {\n    a: _0n,\n    b: BigInt(7),\n    P: POW_2_256 - _2n ** BigInt(32) - BigInt(977),\n    n: POW_2_256 - BigInt(\"432420386565659656852420866394968145599\"),\n    h: _1n,\n    Gx: BigInt(\"55066263022277343669578718895168534326250603453777594175500187360389116729240\"),\n    Gy: BigInt(\"32670510020758816978083085130507043184471273380659243275938904335757337482424\"),\n    beta: BigInt(\"0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\")\n  };\n  function _bigintTo32Bytes(num) {\n    var b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32) throw new Error(\"Error: expected 32 bytes\");\n    return b;\n  }\n  function numTo32bStr(num) {\n    if (typeof num !== \"bigint\") throw new Error(\"Expected bigint\");\n    if (!(_0n <= num && num < POW_2_256)) throw new Error(\"Expected number 0 <= n < 2^256\");\n    return num.toString(16).padStart(64, \"0\");\n  }\n  function hexToBytes(hex) {\n    if (typeof hex !== \"string\") {\n      throw new TypeError(\"hexToBytes: expected string, got \" + typeof hex);\n    }\n    if (hex.length % 2) throw new Error(\"hexToBytes: received invalid unpadded hex\" + hex.length);\n    var array = new Uint8Array(hex.length / 2);\n    for (var i = 0; i < array.length; i++) {\n      var j = i * 2;\n      var hexByte = hex.slice(j, j + 2);\n      var byte = Number.parseInt(hexByte, 16);\n      if (Number.isNaN(byte) || byte < 0) throw new Error(\"Invalid byte sequence\");\n      array[i] = byte;\n    }\n    return array;\n  }\n});","lineCount":240,"map":[[7,2,12,0],[7,6,12,0,"_createHash"],[7,17,12,0],[7,20,12,0,"_interopRequireDefault"],[7,42,12,0],[7,43,12,0,"_$$_REQUIRE"],[7,54,12,0],[7,55,12,0,"_dependencyMap"],[7,69,12,0],[8,2,14,0],[8,6,14,0,"necc"],[8,10,14,0],[8,13,14,0,"_interopRequireWildcard"],[8,36,14,0],[8,37,14,0,"_$$_REQUIRE"],[8,48,14,0],[8,49,14,0,"_dependencyMap"],[8,63,14,0],[9,2,14,41],[9,11,14,41,"_getRequireWildcardCache"],[9,36,14,41,"e"],[9,37,14,41],[9,66,14,41,"WeakMap"],[9,73,14,41],[9,92,14,41,"r"],[9,93,14,41],[9,100,14,41,"WeakMap"],[9,107,14,41],[9,111,14,41,"t"],[9,112,14,41],[9,119,14,41,"WeakMap"],[9,126,14,41],[9,138,14,41,"_getRequireWildcardCache"],[9,162,14,41],[9,174,14,41,"_getRequireWildcardCache"],[9,199,14,41,"e"],[9,200,14,41],[9,211,14,41,"e"],[9,212,14,41],[9,215,14,41,"t"],[9,216,14,41],[9,219,14,41,"r"],[9,220,14,41],[9,225,14,41,"e"],[9,226,14,41],[10,2,14,41],[10,11,14,41,"_interopRequireWildcard"],[10,35,14,41,"e"],[10,36,14,41],[10,38,14,41,"r"],[10,39,14,41],[10,48,14,41,"r"],[10,49,14,41],[10,53,14,41,"e"],[10,54,14,41],[10,58,14,41,"e"],[10,59,14,41],[10,60,14,41,"__esModule"],[10,70,14,41],[10,79,14,41,"e"],[10,80,14,41],[10,95,14,41,"e"],[10,96,14,41],[10,119,14,41,"e"],[10,120,14,41],[10,145,14,41,"e"],[10,146,14,41],[10,157,14,41,"default"],[10,164,14,41],[10,166,14,41,"e"],[10,167,14,41],[10,175,14,41,"t"],[10,176,14,41],[10,179,14,41,"_getRequireWildcardCache"],[10,203,14,41],[10,204,14,41,"r"],[10,205,14,41],[10,212,14,41,"t"],[10,213,14,41],[10,217,14,41,"t"],[10,218,14,41],[10,219,14,41,"has"],[10,222,14,41],[10,223,14,41,"e"],[10,224,14,41],[10,234,14,41,"t"],[10,235,14,41],[10,236,14,41,"get"],[10,239,14,41],[10,240,14,41,"e"],[10,241,14,41],[10,248,14,41,"n"],[10,249,14,41],[10,254,14,41,"__proto__"],[10,263,14,41],[10,273,14,41,"a"],[10,274,14,41],[10,277,14,41,"Object"],[10,283,14,41],[10,284,14,41,"defineProperty"],[10,298,14,41],[10,302,14,41,"Object"],[10,308,14,41],[10,309,14,41,"getOwnPropertyDescriptor"],[10,333,14,41],[10,344,14,41,"u"],[10,345,14,41],[10,349,14,41,"e"],[10,350,14,41],[10,370,14,41,"u"],[10,371,14,41],[10,378,14,41,"hasOwnProperty"],[10,392,14,41],[10,393,14,41,"call"],[10,397,14,41],[10,398,14,41,"e"],[10,399,14,41],[10,401,14,41,"u"],[10,402,14,41],[10,411,14,41,"i"],[10,412,14,41],[10,415,14,41,"a"],[10,416,14,41],[10,419,14,41,"Object"],[10,425,14,41],[10,426,14,41,"getOwnPropertyDescriptor"],[10,450,14,41],[10,451,14,41,"e"],[10,452,14,41],[10,454,14,41,"u"],[10,455,14,41],[10,465,14,41,"i"],[10,466,14,41],[10,471,14,41,"i"],[10,472,14,41],[10,473,14,41,"get"],[10,476,14,41],[10,480,14,41,"i"],[10,481,14,41],[10,482,14,41,"set"],[10,485,14,41],[10,489,14,41,"Object"],[10,495,14,41],[10,496,14,41,"defineProperty"],[10,510,14,41],[10,511,14,41,"n"],[10,512,14,41],[10,514,14,41,"u"],[10,515,14,41],[10,517,14,41,"i"],[10,518,14,41],[10,522,14,41,"n"],[10,523,14,41],[10,524,14,41,"u"],[10,525,14,41],[10,529,14,41,"e"],[10,530,14,41],[10,531,14,41,"u"],[10,532,14,41],[10,544,14,41,"n"],[10,545,14,41],[10,546,14,41,"default"],[10,553,14,41],[10,556,14,41,"e"],[10,557,14,41],[10,559,14,41,"t"],[10,560,14,41],[10,564,14,41,"t"],[10,565,14,41],[10,566,14,41,"set"],[10,569,14,41],[10,570,14,41,"e"],[10,571,14,41],[10,573,14,41,"n"],[10,574,14,41],[10,577,14,41,"n"],[10,578,14,41],[11,2,1,0],[12,0,2,0],[13,0,3,0],[14,0,4,0],[15,0,5,0],[16,0,6,0],[17,0,7,0],[18,0,8,0],[19,0,9,0],[20,0,10,0],[21,0,11,0],[23,2,16,0,"necc"],[23,6,16,4],[23,7,16,5,"utils"],[23,12,16,10],[23,13,16,11,"sha256Sync"],[23,23,16,21],[23,26,16,24],[23,38,16,67],[24,4,17,2],[24,8,17,8,"sha256"],[24,14,17,14],[24,17,17,17],[24,21,17,17,"createHash"],[24,40,17,27],[24,42,17,28],[24,50,17,36],[24,51,17,37],[25,4,17,38],[25,13,17,38,"_len"],[25,17,17,38],[25,20,17,38,"arguments"],[25,29,17,38],[25,30,17,38,"length"],[25,36,17,38],[25,38,16,28,"messages"],[25,46,16,36],[25,53,16,36,"Array"],[25,58,16,36],[25,59,16,36,"_len"],[25,63,16,36],[25,66,16,36,"_key"],[25,70,16,36],[25,76,16,36,"_key"],[25,80,16,36],[25,83,16,36,"_len"],[25,87,16,36],[25,89,16,36,"_key"],[25,93,16,36],[26,6,16,28,"messages"],[26,14,16,36],[26,15,16,36,"_key"],[26,19,16,36],[26,23,16,36,"arguments"],[26,32,16,36],[26,33,16,36,"_key"],[26,37,16,36],[27,4,16,36],[28,4,18,2],[28,9,18,7],[28,13,18,13,"message"],[28,20,18,20],[28,24,18,24,"messages"],[28,32,18,32],[28,34,18,34,"sha256"],[28,40,18,40],[28,41,18,41,"update"],[28,47,18,47],[28,48,18,48,"message"],[28,55,18,55],[28,56,18,56],[29,4,19,2],[29,11,19,9,"sha256"],[29,17,19,15],[29,18,19,16,"digest"],[29,24,19,22],[29,25,19,23],[29,26,19,24],[30,2,20,0],[30,3,20,1],[31,2,22,0,"necc"],[31,6,22,4],[31,7,22,5,"utils"],[31,12,22,10],[31,13,22,11,"hmacSha256Sync"],[31,27,22,25],[31,30,22,28],[31,40,22,29,"key"],[31,43,22,44],[31,45,22,88],[32,4,23,2],[32,8,23,8,"hash"],[32,12,23,12],[32,15,23,15],[32,19,23,15,"createHmac"],[32,49,23,15],[32,50,23,15,"createHmac"],[32,70,23,25],[32,72,23,26],[32,80,23,34],[32,82,23,36,"Buffer"],[32,88,23,42],[32,89,23,43,"from"],[32,93,23,47],[32,94,23,48,"key"],[32,97,23,51],[32,98,23,52],[32,99,23,53],[33,4,23,54],[33,13,23,54,"_len2"],[33,18,23,54],[33,21,23,54,"arguments"],[33,30,23,54],[33,31,23,54,"length"],[33,37,23,54],[33,39,22,49,"messages"],[33,47,22,57],[33,54,22,57,"Array"],[33,59,22,57],[33,60,22,57,"_len2"],[33,65,22,57],[33,72,22,57,"_len2"],[33,77,22,57],[33,88,22,57,"_key2"],[33,93,22,57],[33,99,22,57,"_key2"],[33,104,22,57],[33,107,22,57,"_len2"],[33,112,22,57],[33,114,22,57,"_key2"],[33,119,22,57],[34,6,22,49,"messages"],[34,14,22,57],[34,15,22,57,"_key2"],[34,20,22,57],[34,28,22,57,"arguments"],[34,37,22,57],[34,38,22,57,"_key2"],[34,43,22,57],[35,4,22,57],[36,4,24,2,"messages"],[36,12,24,10],[36,13,24,11,"forEach"],[36,20,24,18],[36,21,24,19],[36,31,24,20,"m"],[36,32,24,21],[37,6,24,21],[37,13,24,26,"hash"],[37,17,24,30],[37,18,24,31,"update"],[37,24,24,37],[37,25,24,38,"m"],[37,26,24,39],[37,27,24,40],[38,4,24,40],[38,6,24,41],[39,4,25,2],[39,11,25,9,"Uint8Array"],[39,21,25,19],[39,22,25,20,"from"],[39,26,25,24],[39,27,25,25,"hash"],[39,31,25,29],[39,32,25,30,"digest"],[39,38,25,36],[39,39,25,37],[39,40,25,38],[39,41,25,39],[40,2,26,0],[40,3,26,1],[41,2,28,0],[41,6,28,6,"defaultTrue"],[41,17,28,17],[41,20,28,20],[41,29,28,6,"defaultTrue"],[41,40,28,17,"defaultTrue"],[41,41,28,21,"param"],[41,46,28,36],[42,4,28,36],[42,11,28,50,"param"],[42,16,28,55],[42,21,28,60],[42,26,28,65],[43,2,28,65],[44,2,30,0],[44,11,30,9,"throwToNull"],[44,22,30,20,"throwToNull"],[44,23,30,27,"fn"],[44,25,30,41],[44,27,30,56],[45,4,31,2],[45,8,31,6],[46,6,32,4],[46,13,32,11,"fn"],[46,15,32,13],[46,16,32,14],[46,17,32,15],[47,4,33,2],[47,5,33,3],[47,6,33,4],[47,13,33,11,"e"],[47,14,33,12],[47,16,33,14],[48,6,34,4],[48,13,34,11],[48,17,34,15],[49,4,35,2],[50,2,36,0],[51,2,38,0],[51,11,38,9,"isPoint"],[51,19,38,16,"isPoint"],[51,20,38,17,"p"],[51,21,38,30],[51,23,38,32,"xOnly"],[51,28,38,46],[51,30,38,57],[52,4,39,2],[52,8,39,7,"p"],[52,9,39,8],[52,10,39,9,"length"],[52,16,39,15],[52,21,39,20],[52,23,39,22],[52,28,39,28,"xOnly"],[52,33,39,33],[52,35,39,35],[52,42,39,42],[52,47,39,47],[53,4,40,2],[53,8,40,6],[54,6,41,4],[54,13,41,11],[54,14,41,12],[54,15,41,13,"necc"],[54,19,41,17],[54,20,41,18,"Point"],[54,25,41,23],[54,26,41,24,"fromHex"],[54,33,41,31],[54,34,41,32,"p"],[54,35,41,33],[54,36,41,34],[55,4,42,2],[55,5,42,3],[55,6,42,4],[55,13,42,11,"e"],[55,14,42,12],[55,16,42,14],[56,6,43,4],[56,13,43,11],[56,18,43,16],[57,4,44,2],[58,2,45,0],[59,2,47,0],[59,6,47,6,"ecc"],[59,9,47,9],[59,12,47,12],[60,4,48,2,"isPoint"],[60,11,48,9],[60,13,48,11],[60,22,48,2,"isPoint"],[60,29,48,9,"isPoint"],[60,30,48,12,"p"],[60,31,48,25],[61,6,48,25],[61,13,48,39,"isPoint"],[61,21,48,46],[61,22,48,47,"p"],[61,23,48,48],[61,25,48,50],[61,30,48,55],[61,31,48,56],[62,4,48,56],[63,4,49,2,"isPrivate"],[63,13,49,11],[63,15,49,13],[63,24,49,2,"isPrivate"],[63,33,49,11,"isPrivate"],[63,34,49,14,"d"],[63,35,49,27],[63,37,49,41],[64,6,50,4],[64,13,50,11,"necc"],[64,17,50,15],[64,18,50,16,"utils"],[64,23,50,21],[64,24,50,22,"isValidPrivateKey"],[64,41,50,39],[64,42,50,40,"d"],[64,43,50,41],[64,44,50,42],[65,4,51,2],[65,5,51,3],[66,4,52,2,"isXOnlyPoint"],[66,16,52,14],[66,18,52,16],[66,27,52,2,"isXOnlyPoint"],[66,39,52,14,"isXOnlyPoint"],[66,40,52,17,"p"],[66,41,52,30],[67,6,52,30],[67,13,52,44,"isPoint"],[67,21,52,51],[67,22,52,52,"p"],[67,23,52,53],[67,25,52,55],[67,29,52,59],[67,30,52,60],[68,4,52,60],[69,4,54,2,"xOnlyPointAddTweak"],[69,22,54,20],[69,24,54,22],[69,33,54,2,"xOnlyPointAddTweak"],[69,51,54,20,"xOnlyPointAddTweak"],[69,52,54,23,"p"],[69,53,54,36],[69,55,54,38,"tweak"],[69,60,54,55],[70,6,54,55],[70,13,55,4,"throwToNull"],[70,24,55,15],[70,25,55,16],[70,37,55,22],[71,8,56,6],[71,12,56,12,"P"],[71,13,56,13],[71,16,56,16,"necc"],[71,20,56,20],[71,21,56,21,"utils"],[71,26,56,26],[71,27,56,27,"pointAddScalar"],[71,41,56,41],[71,42,56,42,"p"],[71,43,56,43],[71,45,56,45,"tweak"],[71,50,56,50],[71,52,56,52],[71,56,56,56],[71,57,56,57],[72,8,57,6],[72,12,57,12,"parity"],[72,18,57,18],[72,21,57,21,"P"],[72,22,57,22],[72,23,57,23],[72,24,57,24],[72,25,57,25],[72,28,57,28],[72,29,57,29],[72,34,57,34],[72,35,57,35],[72,38,57,38],[72,39,57,39],[72,42,57,42],[72,43,57,43],[73,8,58,6],[73,15,58,13],[74,10,58,15,"parity"],[74,16,58,21],[74,18,58,15,"parity"],[74,24,58,21],[75,10,58,23,"xOnlyPubkey"],[75,21,58,34],[75,23,58,36,"P"],[75,24,58,37],[75,25,58,38,"slice"],[75,30,58,43],[75,31,58,44],[75,32,58,45],[76,8,58,47],[76,9,58,48],[77,6,59,4],[77,7,59,5],[77,8,59,6],[78,4,59,6],[79,4,61,2,"getSharedSecret"],[79,19,61,17],[79,21,61,19],[79,30,61,2,"getSharedSecret"],[79,45,61,17,"getSharedSecret"],[79,46,61,20,"sk"],[79,48,61,34],[79,50,61,36,"pk"],[79,52,61,50],[79,54,61,52,"compressed"],[79,64,61,72],[79,66,61,89],[80,6,62,4],[80,13,62,11,"necc"],[80,17,62,15],[80,18,62,16,"getSharedSecret"],[80,33,62,31],[80,34,62,32,"sk"],[80,36,62,34],[80,38,62,36,"pk"],[80,40,62,38],[80,42,62,40,"defaultTrue"],[80,53,62,51],[80,54,62,52,"compressed"],[80,64,62,62],[80,65,62,63],[80,66,62,64],[81,4,63,2],[81,5,63,3],[82,4,65,2,"pointFromScalar"],[82,19,65,17],[82,21,65,19],[82,30,65,2,"pointFromScalar"],[82,45,65,17,"pointFromScalar"],[82,46,65,20,"sk"],[82,48,65,34],[82,50,65,36,"compressed"],[82,60,65,56],[83,6,65,56],[83,13,65,80,"throwToNull"],[83,24,65,91],[83,25,65,92],[84,8,65,92],[84,15,65,98,"necc"],[84,19,65,102],[84,20,65,103,"getPublicKey"],[84,32,65,115],[84,33,65,116,"sk"],[84,35,65,118],[84,37,65,120,"defaultTrue"],[84,48,65,131],[84,49,65,132,"compressed"],[84,59,65,142],[84,60,65,143],[84,61,65,144],[85,6,65,144],[85,8,65,145],[86,4,65,145],[87,4,67,2,"pointCompress"],[87,17,67,15],[87,19,67,17],[87,28,67,2,"pointCompress"],[87,41,67,15,"pointCompress"],[87,42,67,18,"p"],[87,43,67,31],[87,45,67,33,"compressed"],[87,55,67,53],[87,57,67,70],[88,6,68,4],[88,13,68,11,"necc"],[88,17,68,15],[88,18,68,16,"Point"],[88,23,68,21],[88,24,68,22,"fromHex"],[88,31,68,29],[88,32,68,30,"p"],[88,33,68,31],[88,34,68,32],[88,35,68,33,"toRawBytes"],[88,45,68,43],[88,46,68,44,"defaultTrue"],[88,57,68,55],[88,58,68,56,"compressed"],[88,68,68,66],[88,69,68,67],[88,70,68,68],[89,4,69,2],[89,5,69,3],[90,4,71,2,"pointMultiply"],[90,17,71,15],[90,19,71,17],[90,28,71,2,"pointMultiply"],[90,41,71,15,"pointMultiply"],[90,42,71,18,"a"],[90,43,71,31],[90,45,71,33,"tweak"],[90,50,71,50],[90,52,71,52,"compressed"],[90,62,71,72],[91,6,71,72],[91,13,71,96,"throwToNull"],[91,24,71,107],[91,25,71,108],[92,8,71,108],[92,15,71,114,"necc"],[92,19,71,118],[92,20,71,119,"utils"],[92,25,71,124],[92,26,71,125,"pointMultiply"],[92,39,71,138],[92,40,71,139,"a"],[92,41,71,140],[92,43,71,142,"tweak"],[92,48,71,147],[92,50,71,149,"defaultTrue"],[92,61,71,160],[92,62,71,161,"compressed"],[92,72,71,171],[92,73,71,172],[92,74,71,173],[93,6,71,173],[93,8,71,174],[94,4,71,174],[95,4,73,2,"pointAdd"],[95,12,73,10],[95,14,73,12],[95,23,73,2,"pointAdd"],[95,31,73,10,"pointAdd"],[95,32,73,13,"a"],[95,33,73,26],[95,35,73,28,"b"],[95,36,73,41],[95,38,73,43,"compressed"],[95,48,73,63],[96,6,73,63],[96,13,74,4,"throwToNull"],[96,24,74,15],[96,25,74,16],[96,37,74,22],[97,8,75,6],[97,12,75,12,"A"],[97,13,75,13],[97,16,75,16,"necc"],[97,20,75,20],[97,21,75,21,"Point"],[97,26,75,26],[97,27,75,27,"fromHex"],[97,34,75,34],[97,35,75,35,"a"],[97,36,75,36],[97,37,75,37],[98,8,76,6],[98,12,76,12,"B"],[98,13,76,13],[98,16,76,16,"necc"],[98,20,76,20],[98,21,76,21,"Point"],[98,26,76,26],[98,27,76,27,"fromHex"],[98,34,76,34],[98,35,76,35,"b"],[98,36,76,36],[98,37,76,37],[99,8,77,6],[99,15,77,13,"A"],[99,16,77,14],[99,17,77,15,"add"],[99,20,77,18],[99,21,77,19,"B"],[99,22,77,20],[99,23,77,21],[99,24,77,22,"toRawBytes"],[99,34,77,32],[99,35,77,33,"defaultTrue"],[99,46,77,44],[99,47,77,45,"compressed"],[99,57,77,55],[99,58,77,56],[99,59,77,57],[100,6,78,4],[100,7,78,5],[100,8,78,6],[101,4,78,6],[102,4,80,2,"pointAddScalar"],[102,18,80,16],[102,20,80,18],[102,29,80,2,"pointAddScalar"],[102,43,80,16,"pointAddScalar"],[102,44,80,19,"p"],[102,45,80,32],[102,47,80,34,"tweak"],[102,52,80,51],[102,54,80,53,"compressed"],[102,64,80,73],[103,6,80,73],[103,13,80,97,"throwToNull"],[103,24,80,108],[103,25,80,109],[104,8,80,109],[104,15,80,115,"necc"],[104,19,80,119],[104,20,80,120,"utils"],[104,25,80,125],[104,26,80,126,"pointAddScalar"],[104,40,80,140],[104,41,80,141,"p"],[104,42,80,142],[104,44,80,144,"tweak"],[104,49,80,149],[104,51,80,151,"defaultTrue"],[104,62,80,162],[104,63,80,163,"compressed"],[104,73,80,173],[104,74,80,174],[104,75,80,175],[105,6,80,175],[105,8,80,176],[106,4,80,176],[107,4,82,2,"privateAdd"],[107,14,82,12],[107,16,82,14],[107,25,82,2,"privateAdd"],[107,35,82,12,"privateAdd"],[107,36,82,15,"d"],[107,37,82,28],[107,39,82,30,"tweak"],[107,44,82,47],[108,6,82,47],[108,13,83,4,"throwToNull"],[108,24,83,15],[108,25,83,16],[108,37,83,22],[109,8,84,6],[109,12,84,12,"ret"],[109,15,84,15],[109,18,84,18,"necc"],[109,22,84,22],[109,23,84,23,"utils"],[109,28,84,28],[109,29,84,29,"privateAdd"],[109,39,84,39],[109,40,84,40,"d"],[109,41,84,41],[109,43,84,43,"tweak"],[109,48,84,48],[109,49,84,49],[110,8,85,6],[110,12,85,10,"ret"],[110,15,85,13],[110,16,85,14,"join"],[110,20,85,18],[110,21,85,19],[110,23,85,21],[110,24,85,22],[110,29,85,27],[110,63,85,61],[110,65,85,63],[111,10,86,8],[111,17,86,15],[111,21,86,19],[112,8,87,6],[113,8,88,6],[113,15,88,13,"ret"],[113,18,88,16],[114,6,89,4],[114,7,89,5],[114,8,89,6],[115,4,89,6],[116,4,91,2,"privateNegate"],[116,17,91,15],[116,19,91,17],[116,28,91,2,"privateNegate"],[116,41,91,15,"privateNegate"],[116,42,91,18,"d"],[116,43,91,31],[117,6,91,31],[117,13,91,48,"necc"],[117,17,91,52],[117,18,91,53,"utils"],[117,23,91,58],[117,24,91,59,"privateNegate"],[117,37,91,72],[117,38,91,73,"d"],[117,39,91,74],[117,40,91,75],[118,4,91,75],[119,4,93,2,"sign"],[119,8,93,6],[119,10,93,8],[119,19,93,2,"sign"],[119,23,93,6,"sign"],[119,24,93,9,"h"],[119,25,93,22],[119,27,93,24,"d"],[119,28,93,37],[119,30,93,39,"e"],[119,31,93,53],[119,33,93,70],[120,6,94,4],[120,13,94,11,"necc"],[120,17,94,15],[120,18,94,16,"signSync"],[120,26,94,24],[120,27,94,25,"h"],[120,28,94,26],[120,30,94,28,"d"],[120,31,94,29],[120,33,94,31],[121,8,94,33,"der"],[121,11,94,36],[121,13,94,38],[121,18,94,43],[122,8,94,45,"extraEntropy"],[122,20,94,57],[122,22,94,59,"e"],[123,6,94,61],[123,7,94,62],[123,8,94,63],[124,4,95,2],[124,5,95,3],[125,4,97,2,"signSchnorr"],[125,15,97,13],[125,17,97,15],[125,26,97,2,"signSchnorr"],[125,37,97,13,"signSchnorr"],[125,38,97,16,"h"],[125,39,97,29],[125,41,97,31,"d"],[125,42,97,44],[125,44,97,101],[126,6,97,101],[126,10,97,46,"e"],[126,11,97,59],[126,14,97,59,"arguments"],[126,23,97,59],[126,24,97,59,"length"],[126,30,97,59],[126,38,97,59,"arguments"],[126,47,97,59],[126,55,97,59,"undefined"],[126,64,97,59],[126,67,97,59,"arguments"],[126,76,97,59],[126,82,97,62,"Buffer"],[126,88,97,68],[126,89,97,69,"alloc"],[126,94,97,74],[126,95,97,75],[126,97,97,77],[126,99,97,79],[126,103,97,83],[126,104,97,84],[127,6,98,4],[127,13,98,11,"necc"],[127,17,98,15],[127,18,98,16,"schnorr"],[127,25,98,23],[127,26,98,24,"signSync"],[127,34,98,32],[127,35,98,33,"h"],[127,36,98,34],[127,38,98,36,"d"],[127,39,98,37],[127,41,98,39,"e"],[127,42,98,40],[127,43,98,41],[128,4,99,2],[128,5,99,3],[129,4,101,2,"verify"],[129,10,101,8],[129,12,101,10],[129,21,101,2,"verify"],[129,27,101,8,"verify"],[129,28,101,11,"h"],[129,29,101,24],[129,31,101,26,"Q"],[129,32,101,39],[129,34,101,41,"signature"],[129,43,101,62],[129,45,101,64,"strict"],[129,51,101,80],[129,53,101,94],[130,6,102,4],[130,13,102,11,"necc"],[130,17,102,15],[130,18,102,16,"verify"],[130,24,102,22],[130,25,102,23,"signature"],[130,34,102,32],[130,36,102,34,"h"],[130,37,102,35],[130,39,102,37,"Q"],[130,40,102,38],[130,42,102,40],[131,8,102,42,"strict"],[131,14,102,48],[131,16,102,42,"strict"],[132,6,102,49],[132,7,102,50],[132,8,102,51],[133,4,103,2],[133,5,103,3],[134,4,105,2,"verifySchnorr"],[134,17,105,15],[134,19,105,17],[134,28,105,2,"verifySchnorr"],[134,41,105,15,"verifySchnorr"],[134,42,105,18,"h"],[134,43,105,31],[134,45,105,33,"Q"],[134,46,105,46],[134,48,105,48,"signature"],[134,57,105,69],[134,59,105,83],[135,6,106,4],[135,13,106,11,"necc"],[135,17,106,15],[135,18,106,16,"schnorr"],[135,25,106,23],[135,26,106,24,"verifySync"],[135,36,106,34],[135,37,106,35,"signature"],[135,46,106,44],[135,48,106,46,"h"],[135,49,106,47],[135,51,106,49,"Q"],[135,52,106,50],[135,53,106,51],[136,4,107,2],[136,5,107,3],[137,4,109,2,"privateMultiply"],[137,19,109,17],[137,21,109,19],[137,30,109,2,"privateMultiply"],[137,45,109,17,"privateMultiply"],[137,46,109,20,"d"],[137,47,109,33],[137,49,109,35,"tweak"],[137,54,109,52],[137,56,109,57],[138,6,110,4],[138,10,110,8,"ecc"],[138,13,110,11],[138,14,110,12,"isPrivate"],[138,23,110,21],[138,24,110,22,"d"],[138,25,110,23],[138,26,110,24],[138,31,110,29],[138,36,110,34],[138,38,110,36],[139,8,111,6],[139,14,111,12],[139,18,111,16,"Error"],[139,23,111,21],[139,24,111,22],[139,42,111,40],[139,43,111,41],[140,6,112,4],[141,6,114,4],[141,10,114,10,"_privateMultiply"],[141,26,114,26],[141,29,114,29],[141,38,114,10,"_privateMultiply"],[141,54,114,26,"_privateMultiply"],[141,55,114,30,"privateKey"],[141,65,114,52],[141,67,114,54,"tweak"],[141,72,114,71],[141,74,114,76],[142,8,115,6],[142,12,115,12,"p"],[142,13,115,13],[142,16,115,16,"normalizePrivateKey"],[142,35,115,35],[142,36,115,36,"privateKey"],[142,46,115,46],[142,47,115,47],[143,8,116,6],[143,12,116,12,"t"],[143,13,116,13],[143,16,116,16,"normalizeScalar"],[143,31,116,31],[143,32,116,32,"tweak"],[143,37,116,37],[143,38,116,38],[144,8,117,6],[144,12,117,12,"mul"],[144,15,117,15],[144,18,117,18,"_bigintTo32Bytes"],[144,34,117,34],[144,35,117,35,"necc"],[144,39,117,39],[144,40,117,40,"utils"],[144,45,117,45],[144,46,117,46,"mod"],[144,49,117,49],[144,50,117,50,"p"],[144,51,117,51],[144,54,117,54,"t"],[144,55,117,55],[144,57,117,57,"necc"],[144,61,117,61],[144,62,117,62,"CURVE"],[144,67,117,67],[144,68,117,68,"n"],[144,69,117,69],[144,70,117,70],[144,71,117,71],[145,8,118,6],[145,12,118,10,"necc"],[145,16,118,14],[145,17,118,15,"utils"],[145,22,118,20],[145,23,118,21,"isValidPrivateKey"],[145,40,118,38],[145,41,118,39,"mul"],[145,44,118,42],[145,45,118,43],[145,47,118,45],[145,54,118,52,"mul"],[145,57,118,55],[145,58,118,56],[145,63,119,11],[145,70,119,18],[145,74,119,22],[146,6,120,4],[146,7,120,5],[147,6,122,4],[147,13,122,11,"throwToNull"],[147,24,122,22],[147,25,122,23],[148,8,122,23],[148,15,122,29,"_privateMultiply"],[148,31,122,45],[148,32,122,46,"d"],[148,33,122,47],[148,35,122,49,"tweak"],[148,40,122,54],[148,41,122,55],[149,6,122,55],[149,8,122,56],[150,4,123,2],[151,2,124,0],[151,3,124,1],[152,2,124,2],[152,6,124,2,"_default"],[152,14,124,2],[152,17,124,2,"exports"],[152,24,124,2],[152,25,124,2,"default"],[152,32,124,2],[152,35,126,15,"ecc"],[152,38,126,18],[153,2,128,0],[153,11,128,9,"normalizeScalar"],[153,26,128,24,"normalizeScalar"],[153,27,128,25,"scalar"],[153,33,128,36],[153,35,128,38],[154,4,129,2],[154,8,129,6,"num"],[154,11,129,9],[155,4,130,2],[155,8,130,6],[155,15,130,13,"scalar"],[155,21,130,19],[155,26,130,24],[155,34,130,32],[155,36,130,34],[156,6,131,4,"num"],[156,9,131,7],[156,12,131,10,"scalar"],[156,18,131,16],[157,4,132,2],[157,5,132,3],[157,11,132,9],[157,15,132,13],[157,22,132,20,"scalar"],[157,28,132,26],[157,33,132,31],[157,41,132,39],[157,45,132,43,"Number"],[157,51,132,49],[157,52,132,50,"isSafeInteger"],[157,65,132,63],[157,66,132,64,"scalar"],[157,72,132,70],[157,73,132,71],[157,77,132,75,"scalar"],[157,83,132,81],[157,87,132,85],[157,88,132,86],[157,90,132,88],[158,6,133,4,"num"],[158,9,133,7],[158,12,133,10,"BigInt"],[158,18,133,16],[158,19,133,17,"scalar"],[158,25,133,23],[158,26,133,24],[159,4,134,2],[159,5,134,3],[159,11,134,9],[159,15,134,13],[159,22,134,20,"scalar"],[159,28,134,26],[159,33,134,31],[159,41,134,39],[159,43,134,41],[160,6,135,4],[160,10,135,8,"scalar"],[160,16,135,14],[160,17,135,15,"length"],[160,23,135,21],[160,28,135,26],[160,30,135,28],[160,32,135,30],[160,38,135,36],[160,42,135,40,"Error"],[160,47,135,45],[160,48,135,46],[160,85,135,83],[160,86,135,84],[161,6,136,4,"num"],[161,9,136,7],[161,12,136,10,"hexToNumber"],[161,23,136,21],[161,24,136,22,"scalar"],[161,30,136,28],[161,31,136,29],[162,4,137,2],[162,5,137,3],[162,11,137,9],[162,15,137,13,"scalar"],[162,21,137,19],[162,33,137,31,"Uint8Array"],[162,43,137,41],[162,45,137,43],[163,6,138,4],[163,10,138,8,"scalar"],[163,16,138,14],[163,17,138,15,"length"],[163,23,138,21],[163,28,138,26],[163,30,138,28],[163,32,138,30],[163,38,138,36],[163,42,138,40,"Error"],[163,47,138,45],[163,48,138,46],[163,85,138,83],[163,86,138,84],[164,6,139,4,"num"],[164,9,139,7],[164,12,139,10,"bytesToNumber"],[164,25,139,23],[164,26,139,24,"scalar"],[164,32,139,30],[164,33,139,31],[165,4,140,2],[165,5,140,3],[165,11,140,9],[166,6,141,4],[166,12,141,10],[166,16,141,14,"TypeError"],[166,25,141,23],[166,26,141,24],[166,57,141,55],[166,58,141,56],[167,4,142,2],[168,4,143,2],[168,8,143,6,"num"],[168,11,143,9],[168,14,143,12],[168,15,143,13],[168,17,143,15],[168,23,143,21],[168,27,143,25,"Error"],[168,32,143,30],[168,33,143,31],[168,63,143,61],[168,64,143,62],[169,4,144,2],[169,11,144,9,"num"],[169,14,144,12],[170,2,145,0],[171,2,147,0],[171,11,147,9,"hexToNumber"],[171,22,147,20,"hexToNumber"],[171,23,147,21,"hex"],[171,26,147,32],[171,28,147,34],[172,4,148,2],[172,11,148,9,"BigInt"],[172,17,148,15],[172,18,148,16],[172,23,148,21,"hex"],[172,26,148,24],[172,28,148,26],[172,29,148,27],[173,2,149,0],[174,2,151,0],[174,11,151,9,"bytesToNumber"],[174,24,151,22,"bytesToNumber"],[174,25,151,23,"bytes"],[174,30,151,40],[174,32,151,42],[175,4,152,2],[175,11,152,9,"hexToNumber"],[175,22,152,20],[175,23,152,21,"necc"],[175,27,152,25],[175,28,152,26,"utils"],[175,33,152,31],[175,34,152,32,"bytesToHex"],[175,44,152,42],[175,45,152,43,"bytes"],[175,50,152,48],[175,51,152,49],[175,52,152,50],[176,2,153,0],[177,2,157,0],[177,11,157,9,"normalizePrivateKey"],[177,30,157,28,"normalizePrivateKey"],[177,31,157,29,"key"],[177,34,157,41],[177,36,157,51],[178,4,158,2],[178,8,158,6,"num"],[178,11,158,17],[179,4,159,2],[179,8,159,6],[179,15,159,13,"key"],[179,18,159,16],[179,23,159,21],[179,31,159,29],[179,33,159,31],[180,6,160,4,"num"],[180,9,160,7],[180,12,160,10,"key"],[180,15,160,13],[181,4,161,2],[181,5,161,3],[181,11,161,9],[181,15,161,13],[181,22,161,20,"key"],[181,25,161,23],[181,30,161,28],[181,38,161,36],[181,42,161,40,"Number"],[181,48,161,46],[181,49,161,47,"isSafeInteger"],[181,62,161,60],[181,63,161,61,"key"],[181,66,161,64],[181,67,161,65],[181,71,161,69,"key"],[181,74,161,72],[181,77,161,75],[181,78,161,76],[181,80,161,78],[182,6,162,4,"num"],[182,9,162,7],[182,12,162,10,"BigInt"],[182,18,162,16],[182,19,162,17,"key"],[182,22,162,20],[182,23,162,21],[183,4,163,2],[183,5,163,3],[183,11,163,9],[183,15,163,13],[183,22,163,20,"key"],[183,25,163,23],[183,30,163,28],[183,38,163,36],[183,40,163,38],[184,6,164,4],[184,10,164,8,"key"],[184,13,164,11],[184,14,164,12,"length"],[184,20,164,18],[184,25,164,23],[184,27,164,25],[184,29,164,27],[184,35,164,33],[184,39,164,37,"Error"],[184,44,164,42],[184,45,164,43],[184,79,164,77],[184,80,164,78],[185,6,165,4,"num"],[185,9,165,7],[185,12,165,10,"hexToNumber"],[185,23,165,21],[185,24,165,22,"key"],[185,27,165,25],[185,28,165,26],[186,4,166,2],[186,5,166,3],[186,11,166,9],[186,15,166,13,"isUint8a"],[186,23,166,21],[186,24,166,22,"key"],[186,27,166,25],[186,28,166,26],[186,30,166,28],[187,6,167,4],[187,10,167,8,"key"],[187,13,167,11],[187,14,167,12,"length"],[187,20,167,18],[187,25,167,23],[187,27,167,25],[187,29,167,27],[187,35,167,33],[187,39,167,37,"Error"],[187,44,167,42],[187,45,167,43],[187,79,167,77],[187,80,167,78],[188,6,168,4,"num"],[188,9,168,7],[188,12,168,10,"bytesToNumber"],[188,25,168,23],[188,26,168,24,"key"],[188,29,168,27],[188,30,168,28],[189,4,169,2],[189,5,169,3],[189,11,169,9],[190,6,170,4],[190,12,170,10],[190,16,170,14,"TypeError"],[190,25,170,23],[190,26,170,24],[190,54,170,52],[190,55,170,53],[191,4,171,2],[192,4,172,2],[192,8,172,6],[192,9,172,7,"isWithinCurveOrder"],[192,27,172,25],[192,28,172,26,"num"],[192,31,172,29],[192,32,172,30],[192,34,172,32],[192,40,172,38],[192,44,172,42,"Error"],[192,49,172,47],[192,50,172,48],[192,85,172,83],[192,86,172,84],[193,4,173,2],[193,11,173,9,"num"],[193,14,173,12],[194,2,174,0],[195,2,176,0],[195,11,176,9,"isUint8a"],[195,19,176,17,"isUint8a"],[195,20,176,18,"bytes"],[195,25,176,45],[195,27,176,68],[196,4,177,2],[196,11,177,9,"bytes"],[196,16,177,14],[196,28,177,26,"Uint8Array"],[196,38,177,36],[197,2,178,0],[198,2,180,0],[198,11,180,9,"isWithinCurveOrder"],[198,29,180,27,"isWithinCurveOrder"],[198,30,180,28,"num"],[198,33,180,39],[198,35,180,50],[199,4,181,2],[199,11,181,9,"_0n"],[199,14,181,12],[199,17,181,15,"num"],[199,20,181,18],[199,24,181,22,"num"],[199,27,181,25],[199,30,181,28,"CURVE"],[199,35,181,33],[199,36,181,34,"n"],[199,37,181,35],[200,2,182,0],[201,2,184,0],[201,6,184,6,"_0n"],[201,9,184,9],[201,12,184,12,"BigInt"],[201,18,184,18],[201,19,184,19],[201,20,184,20],[201,21,184,21],[202,2,185,0],[202,6,185,6,"_1n"],[202,9,185,9],[202,12,185,12,"BigInt"],[202,18,185,18],[202,19,185,19],[202,20,185,20],[202,21,185,21],[203,2,186,0],[203,6,186,6,"_2n"],[203,9,186,9],[203,12,186,12,"BigInt"],[203,18,186,18],[203,19,186,19],[203,20,186,20],[203,21,186,21],[204,2,188,0],[204,6,188,6,"POW_2_256"],[204,15,188,15],[204,18,188,18,"_2n"],[204,21,188,21],[204,25,188,25,"BigInt"],[204,31,188,31],[204,32,188,32],[204,35,188,35],[204,36,188,36],[205,2,190,0],[205,6,190,6,"CURVE"],[205,11,190,11],[205,14,190,14],[206,4,191,2,"a"],[206,5,191,3],[206,7,191,5,"_0n"],[206,10,191,8],[207,4,192,2,"b"],[207,5,192,3],[207,7,192,5,"BigInt"],[207,13,192,11],[207,14,192,12],[207,15,192,13],[207,16,192,14],[208,4,193,2,"P"],[208,5,193,3],[208,7,193,5,"POW_2_256"],[208,16,193,14],[208,19,193,17,"_2n"],[208,22,193,20],[208,26,193,24,"BigInt"],[208,32,193,30],[208,33,193,31],[208,35,193,33],[208,36,193,34],[208,39,193,37,"BigInt"],[208,45,193,43],[208,46,193,44],[208,49,193,47],[208,50,193,48],[209,4,194,2,"n"],[209,5,194,3],[209,7,194,5,"POW_2_256"],[209,16,194,14],[209,19,194,17,"BigInt"],[209,25,194,23],[209,26,194,24],[209,67,194,65],[209,68,194,66],[210,4,195,2,"h"],[210,5,195,3],[210,7,195,5,"_1n"],[210,10,195,8],[211,4,196,2,"Gx"],[211,6,196,4],[211,8,196,6,"BigInt"],[211,14,196,12],[211,15,196,13],[211,94,196,92],[211,95,196,93],[212,4,197,2,"Gy"],[212,6,197,4],[212,8,197,6,"BigInt"],[212,14,197,12],[212,15,197,13],[212,94,197,92],[212,95,197,93],[213,4,198,2,"beta"],[213,8,198,6],[213,10,198,8,"BigInt"],[213,16,198,14],[213,17,198,15],[213,85,198,83],[214,2,199,0],[214,3,199,1],[215,2,201,0],[215,11,201,9,"_bigintTo32Bytes"],[215,27,201,25,"_bigintTo32Bytes"],[215,28,201,26,"num"],[215,31,201,37],[215,33,201,51],[216,4,202,2],[216,8,202,8,"b"],[216,9,202,9],[216,12,202,12,"hexToBytes"],[216,22,202,22],[216,23,202,23,"numTo32bStr"],[216,34,202,34],[216,35,202,35,"num"],[216,38,202,38],[216,39,202,39],[216,40,202,40],[217,4,203,2],[217,8,203,6,"b"],[217,9,203,7],[217,10,203,8,"length"],[217,16,203,14],[217,21,203,19],[217,23,203,21],[217,25,203,23],[217,31,203,29],[217,35,203,33,"Error"],[217,40,203,38],[217,41,203,39],[217,67,203,65],[217,68,203,66],[218,4,204,2],[218,11,204,9,"b"],[218,12,204,10],[219,2,205,0],[220,2,207,0],[220,11,207,9,"numTo32bStr"],[220,22,207,20,"numTo32bStr"],[220,23,207,21,"num"],[220,26,207,32],[220,28,207,42],[221,4,208,2],[221,8,208,6],[221,15,208,13,"num"],[221,18,208,16],[221,23,208,21],[221,31,208,29],[221,33,208,31],[221,39,208,37],[221,43,208,41,"Error"],[221,48,208,46],[221,49,208,47],[221,66,208,64],[221,67,208,65],[222,4,209,2],[222,8,209,6],[222,10,209,8,"_0n"],[222,13,209,11],[222,17,209,15,"num"],[222,20,209,18],[222,24,209,22,"num"],[222,27,209,25],[222,30,209,28,"POW_2_256"],[222,39,209,37],[222,40,209,38],[222,42,209,40],[222,48,209,46],[222,52,209,50,"Error"],[222,57,209,55],[222,58,209,56],[222,90,209,88],[222,91,209,89],[223,4,210,2],[223,11,210,9,"num"],[223,14,210,12],[223,15,210,13,"toString"],[223,23,210,21],[223,24,210,22],[223,26,210,24],[223,27,210,25],[223,28,210,26,"padStart"],[223,36,210,34],[223,37,210,35],[223,39,210,37],[223,41,210,39],[223,44,210,42],[223,45,210,43],[224,2,211,0],[225,2,213,0],[225,11,213,9,"hexToBytes"],[225,21,213,19,"hexToBytes"],[225,22,213,20,"hex"],[225,25,213,31],[225,27,213,45],[226,4,214,2],[226,8,214,6],[226,15,214,13,"hex"],[226,18,214,16],[226,23,214,21],[226,31,214,29],[226,33,214,31],[227,6,215,4],[227,12,215,10],[227,16,215,14,"TypeError"],[227,25,215,23],[227,26,215,24],[227,61,215,59],[227,64,215,62],[227,71,215,69,"hex"],[227,74,215,72],[227,75,215,73],[228,4,216,2],[229,4,217,2],[229,8,217,6,"hex"],[229,11,217,9],[229,12,217,10,"length"],[229,18,217,16],[229,21,217,19],[229,22,217,20],[229,24,217,22],[229,30,217,28],[229,34,217,32,"Error"],[229,39,217,37],[229,40,217,38],[229,83,217,81],[229,86,217,84,"hex"],[229,89,217,87],[229,90,217,88,"length"],[229,96,217,94],[229,97,217,95],[230,4,218,2],[230,8,218,8,"array"],[230,13,218,13],[230,16,218,16],[230,20,218,20,"Uint8Array"],[230,30,218,30],[230,31,218,31,"hex"],[230,34,218,34],[230,35,218,35,"length"],[230,41,218,41],[230,44,218,44],[230,45,218,45],[230,46,218,46],[231,4,219,2],[231,9,219,7],[231,13,219,11,"i"],[231,14,219,12],[231,17,219,15],[231,18,219,16],[231,20,219,18,"i"],[231,21,219,19],[231,24,219,22,"array"],[231,29,219,27],[231,30,219,28,"length"],[231,36,219,34],[231,38,219,36,"i"],[231,39,219,37],[231,41,219,39],[231,43,219,41],[232,6,220,4],[232,10,220,10,"j"],[232,11,220,11],[232,14,220,14,"i"],[232,15,220,15],[232,18,220,18],[232,19,220,19],[233,6,221,4],[233,10,221,10,"hexByte"],[233,17,221,17],[233,20,221,20,"hex"],[233,23,221,23],[233,24,221,24,"slice"],[233,29,221,29],[233,30,221,30,"j"],[233,31,221,31],[233,33,221,33,"j"],[233,34,221,34],[233,37,221,37],[233,38,221,38],[233,39,221,39],[234,6,222,4],[234,10,222,10,"byte"],[234,14,222,14],[234,17,222,17,"Number"],[234,23,222,23],[234,24,222,24,"parseInt"],[234,32,222,32],[234,33,222,33,"hexByte"],[234,40,222,40],[234,42,222,42],[234,44,222,44],[234,45,222,45],[235,6,223,4],[235,10,223,8,"Number"],[235,16,223,14],[235,17,223,15,"isNaN"],[235,22,223,20],[235,23,223,21,"byte"],[235,27,223,25],[235,28,223,26],[235,32,223,30,"byte"],[235,36,223,34],[235,39,223,37],[235,40,223,38],[235,42,223,40],[235,48,223,46],[235,52,223,50,"Error"],[235,57,223,55],[235,58,223,56],[235,81,223,79],[235,82,223,80],[236,6,224,4,"array"],[236,11,224,9],[236,12,224,10,"i"],[236,13,224,11],[236,14,224,12],[236,17,224,15,"byte"],[236,21,224,19],[237,4,225,2],[238,4,226,2],[238,11,226,9,"array"],[238,16,226,14],[239,2,227,0],[240,0,227,1],[240,3]],"functionMap":{"names":["<global>","necc.utils.sha256Sync","necc.utils.hmacSha256Sync","messages.forEach$argument_0","defaultTrue","throwToNull","isPoint","ecc.isPoint","ecc.isPrivate","ecc.isXOnlyPoint","ecc.xOnlyPointAddTweak","throwToNull$argument_0","ecc.getSharedSecret","ecc.pointFromScalar","ecc.pointCompress","ecc.pointMultiply","ecc.pointAdd","ecc.pointAddScalar","ecc.privateAdd","ecc.privateNegate","ecc.sign","ecc.signSchnorr","ecc.verify","ecc.verifySchnorr","ecc.privateMultiply","_privateMultiply","normalizeScalar","hexToNumber","bytesToNumber","normalizePrivateKey","isUint8a","isWithinCurveOrder","_bigintTo32Bytes","numTo32bStr","hexToBytes"],"mappings":"AAA;wBCe;CDI;4BEE;mBCE,qBD;CFE;oBIE,6CJ;AKE;CLM;AME;CNO;WOG,6CP;aQC;GRE;gBSC,4CT;sBUE;gBCC;KDI,CV;mBYE;GZE;mBaE,yEF,oDE,Cb;iBcE;GdE;iBeE,2FJ,iEI,Cf;YgBE;gBLC;KKI,ChB;kBiBE,2FN,kEM,CjB;ckBE;gBPC;KOM,ClB;iBmBE,0DnB;QoBE;GpBE;eqBE;GrBE;UsBE;GtBE;iBuBE;GvBE;mBwBE;6BCK;KDM;uBbE,gCa;GxBC;A0BK;C1BiB;A2BE;C3BE;A4BE;C5BE;A6BI;C7BiB;A8BE;C9BE;A+BE;C/BE;AgCmB;ChCI;AiCE;CjCI;AkCE;ClCc"}},"type":"js/module"}]}