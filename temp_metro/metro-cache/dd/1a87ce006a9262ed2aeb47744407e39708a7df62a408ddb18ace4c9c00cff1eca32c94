{"dependencies":[{"name":"../converter/varint","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":16,"index":181},"end":{"line":5,"column":46,"index":211}},{"start":{"line":5,"column":16,"index":181},"end":{"line":5,"column":46,"index":211}}],"key":"zgIUkI8fSReZeFaU4gzSPAj75XQ="}},{"name":"../typeFields","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}},{"start":{"line":6,"column":21,"index":234},"end":{"line":6,"column":45,"index":258}}],"key":"jhn59cJw3tHpiEmswia6Eb9F85g="}},{"name":"../converter/tools","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":16,"index":134},"end":{"line":4,"column":45,"index":163}},{"start":{"line":4,"column":16,"index":134},"end":{"line":4,"column":45,"index":163}},{"start":{"line":4,"column":16,"index":134},"end":{"line":4,"column":45,"index":163}},{"start":{"line":4,"column":16,"index":134},"end":{"line":4,"column":45,"index":163}}],"key":"5pP7auj0+4eX4w/ZwZevJRIcSa4="}},{"name":"../converter","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}},{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":39,"index":116}}],"key":"kKBPuYVZKHJRvN6QY6Tu9VkLxJM="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function psbtFromBuffer(buffer, txGetter) {\n    var offset = 0;\n    function varSlice() {\n      var keyLen = _$$_REQUIRE(_dependencyMap[0], \"../converter/varint\").decode(buffer, offset);\n      offset += _$$_REQUIRE(_dependencyMap[0], \"../converter/varint\").encodingLength(keyLen);\n      var key = buffer.slice(offset, offset + keyLen);\n      offset += keyLen;\n      return key;\n    }\n    function readUInt32BE() {\n      var num = buffer.readUInt32BE(offset);\n      offset += 4;\n      return num;\n    }\n    function readUInt8() {\n      var num = buffer.readUInt8(offset);\n      offset += 1;\n      return num;\n    }\n    function getKeyValue() {\n      var key = varSlice();\n      var value = varSlice();\n      return {\n        key: key,\n        value: value\n      };\n    }\n    function checkEndOfKeyValPairs() {\n      if (offset >= buffer.length) {\n        throw new Error('Format Error: Unexpected End of PSBT');\n      }\n      var isEnd = buffer.readUInt8(offset) === 0;\n      if (isEnd) {\n        offset++;\n      }\n      return isEnd;\n    }\n    if (readUInt32BE() !== 0x70736274) {\n      throw new Error('Format Error: Invalid Magic Number');\n    }\n    if (readUInt8() !== 0xff) {\n      throw new Error('Format Error: Magic Number must be followed by 0xff separator');\n    }\n    var globalMapKeyVals = [];\n    var globalKeyIndex = {};\n    while (!checkEndOfKeyValPairs()) {\n      var keyVal = getKeyValue();\n      var hexKey = keyVal.key.toString('hex');\n      if (globalKeyIndex[hexKey]) {\n        throw new Error('Format Error: Keys must be unique for global keymap: key ' + hexKey);\n      }\n      globalKeyIndex[hexKey] = 1;\n      globalMapKeyVals.push(keyVal);\n    }\n    var unsignedTxMaps = globalMapKeyVals.filter(function (keyVal) {\n      return keyVal.key[0] === _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").GlobalTypes.UNSIGNED_TX;\n    });\n    if (unsignedTxMaps.length !== 1) {\n      throw new Error('Format Error: Only one UNSIGNED_TX allowed');\n    }\n    var unsignedTx = txGetter(unsignedTxMaps[0].value);\n    // Get input and output counts to loop the respective fields\n    var _unsignedTx$getInputO = unsignedTx.getInputOutputCounts(),\n      inputCount = _unsignedTx$getInputO.inputCount,\n      outputCount = _unsignedTx$getInputO.outputCount;\n    var inputKeyVals = [];\n    var outputKeyVals = [];\n    // Get input fields\n    for (var index of _$$_REQUIRE(_dependencyMap[2], \"../converter/tools\").range(inputCount)) {\n      var inputKeyIndex = {};\n      var input = [];\n      while (!checkEndOfKeyValPairs()) {\n        var _keyVal = getKeyValue();\n        var _hexKey = _keyVal.key.toString('hex');\n        if (inputKeyIndex[_hexKey]) {\n          throw new Error('Format Error: Keys must be unique for each input: ' + 'input index ' + index + ' key ' + _hexKey);\n        }\n        inputKeyIndex[_hexKey] = 1;\n        input.push(_keyVal);\n      }\n      inputKeyVals.push(input);\n    }\n    for (var _index of _$$_REQUIRE(_dependencyMap[2], \"../converter/tools\").range(outputCount)) {\n      var outputKeyIndex = {};\n      var output = [];\n      while (!checkEndOfKeyValPairs()) {\n        var _keyVal2 = getKeyValue();\n        var _hexKey2 = _keyVal2.key.toString('hex');\n        if (outputKeyIndex[_hexKey2]) {\n          throw new Error('Format Error: Keys must be unique for each output: ' + 'output index ' + _index + ' key ' + _hexKey2);\n        }\n        outputKeyIndex[_hexKey2] = 1;\n        output.push(_keyVal2);\n      }\n      outputKeyVals.push(output);\n    }\n    return psbtFromKeyVals(unsignedTx, {\n      globalMapKeyVals: globalMapKeyVals,\n      inputKeyVals: inputKeyVals,\n      outputKeyVals: outputKeyVals\n    });\n  }\n  exports.psbtFromBuffer = psbtFromBuffer;\n  function checkKeyBuffer(type, keyBuf, keyNum) {\n    if (!keyBuf.equals(Buffer.from([keyNum]))) {\n      throw new Error(`Format Error: Invalid ${type} key: ${keyBuf.toString('hex')}`);\n    }\n  }\n  exports.checkKeyBuffer = checkKeyBuffer;\n  function psbtFromKeyVals(unsignedTx, _ref) {\n    var globalMapKeyVals = _ref.globalMapKeyVals,\n      inputKeyVals = _ref.inputKeyVals,\n      outputKeyVals = _ref.outputKeyVals;\n    // That was easy :-)\n    var globalMap = {\n      unsignedTx: unsignedTx\n    };\n    var txCount = 0;\n    for (var keyVal of globalMapKeyVals) {\n      // If a globalMap item needs pubkey, uncomment\n      // const pubkey = convert.globals.checkPubkey(keyVal);\n      switch (keyVal.key[0]) {\n        case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").GlobalTypes.UNSIGNED_TX:\n          checkKeyBuffer('global', keyVal.key, _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").GlobalTypes.UNSIGNED_TX);\n          if (txCount > 0) {\n            throw new Error('Format Error: GlobalMap has multiple UNSIGNED_TX');\n          }\n          txCount++;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").GlobalTypes.GLOBAL_XPUB:\n          if (globalMap.globalXpub === undefined) {\n            globalMap.globalXpub = [];\n          }\n          globalMap.globalXpub.push(_$$_REQUIRE(_dependencyMap[3], \"../converter\").globals.globalXpub.decode(keyVal));\n          break;\n        default:\n          // This will allow inclusion during serialization.\n          if (!globalMap.unknownKeyVals) globalMap.unknownKeyVals = [];\n          globalMap.unknownKeyVals.push(keyVal);\n      }\n    }\n    // Get input and output counts to loop the respective fields\n    var inputCount = inputKeyVals.length;\n    var outputCount = outputKeyVals.length;\n    var inputs = [];\n    var outputs = [];\n    // Get input fields\n    for (var index of _$$_REQUIRE(_dependencyMap[2], \"../converter/tools\").range(inputCount)) {\n      var input = {};\n      for (var _keyVal3 of inputKeyVals[index]) {\n        _$$_REQUIRE(_dependencyMap[3], \"../converter\").inputs.checkPubkey(_keyVal3);\n        switch (_keyVal3.key[0]) {\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.NON_WITNESS_UTXO:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.NON_WITNESS_UTXO);\n            if (input.nonWitnessUtxo !== undefined) {\n              throw new Error('Format Error: Input has multiple NON_WITNESS_UTXO');\n            }\n            input.nonWitnessUtxo = _$$_REQUIRE(_dependencyMap[3], \"../converter\").inputs.nonWitnessUtxo.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.WITNESS_UTXO:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.WITNESS_UTXO);\n            if (input.witnessUtxo !== undefined) {\n              throw new Error('Format Error: Input has multiple WITNESS_UTXO');\n            }\n            input.witnessUtxo = _$$_REQUIRE(_dependencyMap[3], \"../converter\").inputs.witnessUtxo.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.PARTIAL_SIG:\n            if (input.partialSig === undefined) {\n              input.partialSig = [];\n            }\n            input.partialSig.push(_$$_REQUIRE(_dependencyMap[3], \"../converter\").inputs.partialSig.decode(_keyVal3));\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.SIGHASH_TYPE:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.SIGHASH_TYPE);\n            if (input.sighashType !== undefined) {\n              throw new Error('Format Error: Input has multiple SIGHASH_TYPE');\n            }\n            input.sighashType = _$$_REQUIRE(_dependencyMap[3], \"../converter\").inputs.sighashType.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.REDEEM_SCRIPT:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.REDEEM_SCRIPT);\n            if (input.redeemScript !== undefined) {\n              throw new Error('Format Error: Input has multiple REDEEM_SCRIPT');\n            }\n            input.redeemScript = _$$_REQUIRE(_dependencyMap[3], \"../converter\").inputs.redeemScript.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.WITNESS_SCRIPT:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.WITNESS_SCRIPT);\n            if (input.witnessScript !== undefined) {\n              throw new Error('Format Error: Input has multiple WITNESS_SCRIPT');\n            }\n            input.witnessScript = _$$_REQUIRE(_dependencyMap[3], \"../converter\").inputs.witnessScript.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.BIP32_DERIVATION:\n            if (input.bip32Derivation === undefined) {\n              input.bip32Derivation = [];\n            }\n            input.bip32Derivation.push(_$$_REQUIRE(_dependencyMap[3], \"../converter\").inputs.bip32Derivation.decode(_keyVal3));\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.FINAL_SCRIPTSIG:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.FINAL_SCRIPTSIG);\n            input.finalScriptSig = _$$_REQUIRE(_dependencyMap[3], \"../converter\").inputs.finalScriptSig.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.FINAL_SCRIPTWITNESS:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.FINAL_SCRIPTWITNESS);\n            input.finalScriptWitness = _$$_REQUIRE(_dependencyMap[3], \"../converter\").inputs.finalScriptWitness.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.POR_COMMITMENT:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.POR_COMMITMENT);\n            input.porCommitment = _$$_REQUIRE(_dependencyMap[3], \"../converter\").inputs.porCommitment.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.TAP_KEY_SIG:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.TAP_KEY_SIG);\n            input.tapKeySig = _$$_REQUIRE(_dependencyMap[3], \"../converter\").inputs.tapKeySig.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.TAP_SCRIPT_SIG:\n            if (input.tapScriptSig === undefined) {\n              input.tapScriptSig = [];\n            }\n            input.tapScriptSig.push(_$$_REQUIRE(_dependencyMap[3], \"../converter\").inputs.tapScriptSig.decode(_keyVal3));\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.TAP_LEAF_SCRIPT:\n            if (input.tapLeafScript === undefined) {\n              input.tapLeafScript = [];\n            }\n            input.tapLeafScript.push(_$$_REQUIRE(_dependencyMap[3], \"../converter\").inputs.tapLeafScript.decode(_keyVal3));\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.TAP_BIP32_DERIVATION:\n            if (input.tapBip32Derivation === undefined) {\n              input.tapBip32Derivation = [];\n            }\n            input.tapBip32Derivation.push(_$$_REQUIRE(_dependencyMap[3], \"../converter\").inputs.tapBip32Derivation.decode(_keyVal3));\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.TAP_INTERNAL_KEY:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.TAP_INTERNAL_KEY);\n            input.tapInternalKey = _$$_REQUIRE(_dependencyMap[3], \"../converter\").inputs.tapInternalKey.decode(_keyVal3);\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.TAP_MERKLE_ROOT:\n            checkKeyBuffer('input', _keyVal3.key, _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").InputTypes.TAP_MERKLE_ROOT);\n            input.tapMerkleRoot = _$$_REQUIRE(_dependencyMap[3], \"../converter\").inputs.tapMerkleRoot.decode(_keyVal3);\n            break;\n          default:\n            // This will allow inclusion during serialization.\n            if (!input.unknownKeyVals) input.unknownKeyVals = [];\n            input.unknownKeyVals.push(_keyVal3);\n        }\n      }\n      inputs.push(input);\n    }\n    for (var _index2 of _$$_REQUIRE(_dependencyMap[2], \"../converter/tools\").range(outputCount)) {\n      var output = {};\n      for (var _keyVal4 of outputKeyVals[_index2]) {\n        _$$_REQUIRE(_dependencyMap[3], \"../converter\").outputs.checkPubkey(_keyVal4);\n        switch (_keyVal4.key[0]) {\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").OutputTypes.REDEEM_SCRIPT:\n            checkKeyBuffer('output', _keyVal4.key, _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").OutputTypes.REDEEM_SCRIPT);\n            if (output.redeemScript !== undefined) {\n              throw new Error('Format Error: Output has multiple REDEEM_SCRIPT');\n            }\n            output.redeemScript = _$$_REQUIRE(_dependencyMap[3], \"../converter\").outputs.redeemScript.decode(_keyVal4);\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").OutputTypes.WITNESS_SCRIPT:\n            checkKeyBuffer('output', _keyVal4.key, _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").OutputTypes.WITNESS_SCRIPT);\n            if (output.witnessScript !== undefined) {\n              throw new Error('Format Error: Output has multiple WITNESS_SCRIPT');\n            }\n            output.witnessScript = _$$_REQUIRE(_dependencyMap[3], \"../converter\").outputs.witnessScript.decode(_keyVal4);\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").OutputTypes.BIP32_DERIVATION:\n            if (output.bip32Derivation === undefined) {\n              output.bip32Derivation = [];\n            }\n            output.bip32Derivation.push(_$$_REQUIRE(_dependencyMap[3], \"../converter\").outputs.bip32Derivation.decode(_keyVal4));\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").OutputTypes.TAP_INTERNAL_KEY:\n            checkKeyBuffer('output', _keyVal4.key, _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").OutputTypes.TAP_INTERNAL_KEY);\n            output.tapInternalKey = _$$_REQUIRE(_dependencyMap[3], \"../converter\").outputs.tapInternalKey.decode(_keyVal4);\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").OutputTypes.TAP_TREE:\n            checkKeyBuffer('output', _keyVal4.key, _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").OutputTypes.TAP_TREE);\n            output.tapTree = _$$_REQUIRE(_dependencyMap[3], \"../converter\").outputs.tapTree.decode(_keyVal4);\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"../typeFields\").OutputTypes.TAP_BIP32_DERIVATION:\n            if (output.tapBip32Derivation === undefined) {\n              output.tapBip32Derivation = [];\n            }\n            output.tapBip32Derivation.push(_$$_REQUIRE(_dependencyMap[3], \"../converter\").outputs.tapBip32Derivation.decode(_keyVal4));\n            break;\n          default:\n            if (!output.unknownKeyVals) output.unknownKeyVals = [];\n            output.unknownKeyVals.push(_keyVal4);\n        }\n      }\n      outputs.push(output);\n    }\n    return {\n      globalMap: globalMap,\n      inputs: inputs,\n      outputs: outputs\n    };\n  }\n  exports.psbtFromKeyVals = psbtFromKeyVals;\n});","lineCount":309,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,7,0],[7,11,7,9,"psbtFromBuffer"],[7,25,7,23,"psbtFromBuffer"],[7,26,7,24,"buffer"],[7,32,7,30],[7,34,7,32,"txGetter"],[7,42,7,40],[7,44,7,42],[8,4,8,2],[8,8,8,6,"offset"],[8,14,8,12],[8,17,8,15],[8,18,8,16],[9,4,9,2],[9,13,9,11,"varSlice"],[9,21,9,19,"varSlice"],[9,22,9,19],[9,24,9,22],[10,6,10,4],[10,10,10,10,"keyLen"],[10,16,10,16],[10,19,10,19,"_$$_REQUIRE"],[10,30,10,19],[10,31,10,19,"_dependencyMap"],[10,45,10,19],[10,73,10,27,"decode"],[10,79,10,33],[10,80,10,34,"buffer"],[10,86,10,40],[10,88,10,42,"offset"],[10,94,10,48],[10,95,10,49],[11,6,11,4,"offset"],[11,12,11,10],[11,16,11,14,"_$$_REQUIRE"],[11,27,11,14],[11,28,11,14,"_dependencyMap"],[11,42,11,14],[11,70,11,22,"encodingLength"],[11,84,11,36],[11,85,11,37,"keyLen"],[11,91,11,43],[11,92,11,44],[12,6,12,4],[12,10,12,10,"key"],[12,13,12,13],[12,16,12,16,"buffer"],[12,22,12,22],[12,23,12,23,"slice"],[12,28,12,28],[12,29,12,29,"offset"],[12,35,12,35],[12,37,12,37,"offset"],[12,43,12,43],[12,46,12,46,"keyLen"],[12,52,12,52],[12,53,12,53],[13,6,13,4,"offset"],[13,12,13,10],[13,16,13,14,"keyLen"],[13,22,13,20],[14,6,14,4],[14,13,14,11,"key"],[14,16,14,14],[15,4,15,2],[16,4,16,2],[16,13,16,11,"readUInt32BE"],[16,25,16,23,"readUInt32BE"],[16,26,16,23],[16,28,16,26],[17,6,17,4],[17,10,17,10,"num"],[17,13,17,13],[17,16,17,16,"buffer"],[17,22,17,22],[17,23,17,23,"readUInt32BE"],[17,35,17,35],[17,36,17,36,"offset"],[17,42,17,42],[17,43,17,43],[18,6,18,4,"offset"],[18,12,18,10],[18,16,18,14],[18,17,18,15],[19,6,19,4],[19,13,19,11,"num"],[19,16,19,14],[20,4,20,2],[21,4,21,2],[21,13,21,11,"readUInt8"],[21,22,21,20,"readUInt8"],[21,23,21,20],[21,25,21,23],[22,6,22,4],[22,10,22,10,"num"],[22,13,22,13],[22,16,22,16,"buffer"],[22,22,22,22],[22,23,22,23,"readUInt8"],[22,32,22,32],[22,33,22,33,"offset"],[22,39,22,39],[22,40,22,40],[23,6,23,4,"offset"],[23,12,23,10],[23,16,23,14],[23,17,23,15],[24,6,24,4],[24,13,24,11,"num"],[24,16,24,14],[25,4,25,2],[26,4,26,2],[26,13,26,11,"getKeyValue"],[26,24,26,22,"getKeyValue"],[26,25,26,22],[26,27,26,25],[27,6,27,4],[27,10,27,10,"key"],[27,13,27,13],[27,16,27,16,"varSlice"],[27,24,27,24],[27,25,27,25],[27,26,27,26],[28,6,28,4],[28,10,28,10,"value"],[28,15,28,15],[28,18,28,18,"varSlice"],[28,26,28,26],[28,27,28,27],[28,28,28,28],[29,6,29,4],[29,13,29,11],[30,8,30,6,"key"],[30,11,30,9],[30,13,30,6,"key"],[30,16,30,9],[31,8,31,6,"value"],[31,13,31,11],[31,15,31,6,"value"],[32,6,32,4],[32,7,32,5],[33,4,33,2],[34,4,34,2],[34,13,34,11,"checkEndOfKeyValPairs"],[34,34,34,32,"checkEndOfKeyValPairs"],[34,35,34,32],[34,37,34,35],[35,6,35,4],[35,10,35,8,"offset"],[35,16,35,14],[35,20,35,18,"buffer"],[35,26,35,24],[35,27,35,25,"length"],[35,33,35,31],[35,35,35,33],[36,8,36,6],[36,14,36,12],[36,18,36,16,"Error"],[36,23,36,21],[36,24,36,22],[36,62,36,60],[36,63,36,61],[37,6,37,4],[38,6,38,4],[38,10,38,10,"isEnd"],[38,15,38,15],[38,18,38,18,"buffer"],[38,24,38,24],[38,25,38,25,"readUInt8"],[38,34,38,34],[38,35,38,35,"offset"],[38,41,38,41],[38,42,38,42],[38,47,38,47],[38,48,38,48],[39,6,39,4],[39,10,39,8,"isEnd"],[39,15,39,13],[39,17,39,15],[40,8,40,6,"offset"],[40,14,40,12],[40,16,40,14],[41,6,41,4],[42,6,42,4],[42,13,42,11,"isEnd"],[42,18,42,16],[43,4,43,2],[44,4,44,2],[44,8,44,6,"readUInt32BE"],[44,20,44,18],[44,21,44,19],[44,22,44,20],[44,27,44,25],[44,37,44,35],[44,39,44,37],[45,6,45,4],[45,12,45,10],[45,16,45,14,"Error"],[45,21,45,19],[45,22,45,20],[45,58,45,56],[45,59,45,57],[46,4,46,2],[47,4,47,2],[47,8,47,6,"readUInt8"],[47,17,47,15],[47,18,47,16],[47,19,47,17],[47,24,47,22],[47,28,47,26],[47,30,47,28],[48,6,48,4],[48,12,48,10],[48,16,48,14,"Error"],[48,21,48,19],[48,22,49,6],[48,85,50,4],[48,86,50,5],[49,4,51,2],[50,4,52,2],[50,8,52,8,"globalMapKeyVals"],[50,24,52,24],[50,27,52,27],[50,29,52,29],[51,4,53,2],[51,8,53,8,"globalKeyIndex"],[51,22,53,22],[51,25,53,25],[51,26,53,26],[51,27,53,27],[52,4,54,2],[52,11,54,9],[52,12,54,10,"checkEndOfKeyValPairs"],[52,33,54,31],[52,34,54,32],[52,35,54,33],[52,37,54,35],[53,6,55,4],[53,10,55,10,"keyVal"],[53,16,55,16],[53,19,55,19,"getKeyValue"],[53,30,55,30],[53,31,55,31],[53,32,55,32],[54,6,56,4],[54,10,56,10,"hexKey"],[54,16,56,16],[54,19,56,19,"keyVal"],[54,25,56,25],[54,26,56,26,"key"],[54,29,56,29],[54,30,56,30,"toString"],[54,38,56,38],[54,39,56,39],[54,44,56,44],[54,45,56,45],[55,6,57,4],[55,10,57,8,"globalKeyIndex"],[55,24,57,22],[55,25,57,23,"hexKey"],[55,31,57,29],[55,32,57,30],[55,34,57,32],[56,8,58,6],[56,14,58,12],[56,18,58,16,"Error"],[56,23,58,21],[56,24,59,8],[56,83,59,67],[56,86,59,70,"hexKey"],[56,92,60,6],[56,93,60,7],[57,6,61,4],[58,6,62,4,"globalKeyIndex"],[58,20,62,18],[58,21,62,19,"hexKey"],[58,27,62,25],[58,28,62,26],[58,31,62,29],[58,32,62,30],[59,6,63,4,"globalMapKeyVals"],[59,22,63,20],[59,23,63,21,"push"],[59,27,63,25],[59,28,63,26,"keyVal"],[59,34,63,32],[59,35,63,33],[60,4,64,2],[61,4,65,2],[61,8,65,8,"unsignedTxMaps"],[61,22,65,22],[61,25,65,25,"globalMapKeyVals"],[61,41,65,41],[61,42,65,42,"filter"],[61,48,65,48],[61,49,66,4],[61,59,66,4,"keyVal"],[61,65,66,10],[62,6,66,10],[62,13,66,14,"keyVal"],[62,19,66,20],[62,20,66,21,"key"],[62,23,66,24],[62,24,66,25],[62,25,66,26],[62,26,66,27],[62,31,66,32,"_$$_REQUIRE"],[62,42,66,32],[62,43,66,32,"_dependencyMap"],[62,57,66,32],[62,79,66,45,"GlobalTypes"],[62,90,66,56],[62,91,66,57,"UNSIGNED_TX"],[62,102,66,68],[63,4,66,68],[63,5,67,2],[63,6,67,3],[64,4,68,2],[64,8,68,6,"unsignedTxMaps"],[64,22,68,20],[64,23,68,21,"length"],[64,29,68,27],[64,34,68,32],[64,35,68,33],[64,37,68,35],[65,6,69,4],[65,12,69,10],[65,16,69,14,"Error"],[65,21,69,19],[65,22,69,20],[65,66,69,64],[65,67,69,65],[66,4,70,2],[67,4,71,2],[67,8,71,8,"unsignedTx"],[67,18,71,18],[67,21,71,21,"txGetter"],[67,29,71,29],[67,30,71,30,"unsignedTxMaps"],[67,44,71,44],[67,45,71,45],[67,46,71,46],[67,47,71,47],[67,48,71,48,"value"],[67,53,71,53],[67,54,71,54],[68,4,72,2],[69,4,73,2],[69,8,73,2,"_unsignedTx$getInputO"],[69,29,73,2],[69,32,73,38,"unsignedTx"],[69,42,73,48],[69,43,73,49,"getInputOutputCounts"],[69,63,73,69],[69,64,73,70],[69,65,73,71],[70,6,73,10,"inputCount"],[70,16,73,20],[70,19,73,20,"_unsignedTx$getInputO"],[70,40,73,20],[70,41,73,10,"inputCount"],[70,51,73,20],[71,6,73,22,"outputCount"],[71,17,73,33],[71,20,73,33,"_unsignedTx$getInputO"],[71,41,73,33],[71,42,73,22,"outputCount"],[71,53,73,33],[72,4,74,2],[72,8,74,8,"inputKeyVals"],[72,20,74,20],[72,23,74,23],[72,25,74,25],[73,4,75,2],[73,8,75,8,"outputKeyVals"],[73,21,75,21],[73,24,75,24],[73,26,75,26],[74,4,76,2],[75,4,77,2],[75,9,77,7],[75,13,77,13,"index"],[75,18,77,18],[75,22,77,22,"_$$_REQUIRE"],[75,33,77,22],[75,34,77,22,"_dependencyMap"],[75,48,77,22],[75,75,77,30,"range"],[75,80,77,35],[75,81,77,36,"inputCount"],[75,91,77,46],[75,92,77,47],[75,94,77,49],[76,6,78,4],[76,10,78,10,"inputKeyIndex"],[76,23,78,23],[76,26,78,26],[76,27,78,27],[76,28,78,28],[77,6,79,4],[77,10,79,10,"input"],[77,15,79,15],[77,18,79,18],[77,20,79,20],[78,6,80,4],[78,13,80,11],[78,14,80,12,"checkEndOfKeyValPairs"],[78,35,80,33],[78,36,80,34],[78,37,80,35],[78,39,80,37],[79,8,81,6],[79,12,81,12,"keyVal"],[79,19,81,18],[79,22,81,21,"getKeyValue"],[79,33,81,32],[79,34,81,33],[79,35,81,34],[80,8,82,6],[80,12,82,12,"hexKey"],[80,19,82,18],[80,22,82,21,"keyVal"],[80,29,82,27],[80,30,82,28,"key"],[80,33,82,31],[80,34,82,32,"toString"],[80,42,82,40],[80,43,82,41],[80,48,82,46],[80,49,82,47],[81,8,83,6],[81,12,83,10,"inputKeyIndex"],[81,25,83,23],[81,26,83,24,"hexKey"],[81,33,83,30],[81,34,83,31],[81,36,83,33],[82,10,84,8],[82,16,84,14],[82,20,84,18,"Error"],[82,25,84,23],[82,26,85,10],[82,78,85,62],[82,81,86,12],[82,95,86,26],[82,98,87,12,"index"],[82,103,87,17],[82,106,88,12],[82,113,88,19],[82,116,89,12,"hexKey"],[82,123,90,8],[82,124,90,9],[83,8,91,6],[84,8,92,6,"inputKeyIndex"],[84,21,92,19],[84,22,92,20,"hexKey"],[84,29,92,26],[84,30,92,27],[84,33,92,30],[84,34,92,31],[85,8,93,6,"input"],[85,13,93,11],[85,14,93,12,"push"],[85,18,93,16],[85,19,93,17,"keyVal"],[85,26,93,23],[85,27,93,24],[86,6,94,4],[87,6,95,4,"inputKeyVals"],[87,18,95,16],[87,19,95,17,"push"],[87,23,95,21],[87,24,95,22,"input"],[87,29,95,27],[87,30,95,28],[88,4,96,2],[89,4,97,2],[89,9,97,7],[89,13,97,13,"index"],[89,19,97,18],[89,23,97,22,"_$$_REQUIRE"],[89,34,97,22],[89,35,97,22,"_dependencyMap"],[89,49,97,22],[89,76,97,30,"range"],[89,81,97,35],[89,82,97,36,"outputCount"],[89,93,97,47],[89,94,97,48],[89,96,97,50],[90,6,98,4],[90,10,98,10,"outputKeyIndex"],[90,24,98,24],[90,27,98,27],[90,28,98,28],[90,29,98,29],[91,6,99,4],[91,10,99,10,"output"],[91,16,99,16],[91,19,99,19],[91,21,99,21],[92,6,100,4],[92,13,100,11],[92,14,100,12,"checkEndOfKeyValPairs"],[92,35,100,33],[92,36,100,34],[92,37,100,35],[92,39,100,37],[93,8,101,6],[93,12,101,12,"keyVal"],[93,20,101,18],[93,23,101,21,"getKeyValue"],[93,34,101,32],[93,35,101,33],[93,36,101,34],[94,8,102,6],[94,12,102,12,"hexKey"],[94,20,102,18],[94,23,102,21,"keyVal"],[94,31,102,27],[94,32,102,28,"key"],[94,35,102,31],[94,36,102,32,"toString"],[94,44,102,40],[94,45,102,41],[94,50,102,46],[94,51,102,47],[95,8,103,6],[95,12,103,10,"outputKeyIndex"],[95,26,103,24],[95,27,103,25,"hexKey"],[95,35,103,31],[95,36,103,32],[95,38,103,34],[96,10,104,8],[96,16,104,14],[96,20,104,18,"Error"],[96,25,104,23],[96,26,105,10],[96,79,105,63],[96,82,106,12],[96,97,106,27],[96,100,107,12,"index"],[96,106,107,17],[96,109,108,12],[96,116,108,19],[96,119,109,12,"hexKey"],[96,127,110,8],[96,128,110,9],[97,8,111,6],[98,8,112,6,"outputKeyIndex"],[98,22,112,20],[98,23,112,21,"hexKey"],[98,31,112,27],[98,32,112,28],[98,35,112,31],[98,36,112,32],[99,8,113,6,"output"],[99,14,113,12],[99,15,113,13,"push"],[99,19,113,17],[99,20,113,18,"keyVal"],[99,28,113,24],[99,29,113,25],[100,6,114,4],[101,6,115,4,"outputKeyVals"],[101,19,115,17],[101,20,115,18,"push"],[101,24,115,22],[101,25,115,23,"output"],[101,31,115,29],[101,32,115,30],[102,4,116,2],[103,4,117,2],[103,11,117,9,"psbtFromKeyVals"],[103,26,117,24],[103,27,117,25,"unsignedTx"],[103,37,117,35],[103,39,117,37],[104,6,118,4,"globalMapKeyVals"],[104,22,118,20],[104,24,118,4,"globalMapKeyVals"],[104,40,118,20],[105,6,119,4,"inputKeyVals"],[105,18,119,16],[105,20,119,4,"inputKeyVals"],[105,32,119,16],[106,6,120,4,"outputKeyVals"],[106,19,120,17],[106,21,120,4,"outputKeyVals"],[107,4,121,2],[107,5,121,3],[107,6,121,4],[108,2,122,0],[109,2,123,0,"exports"],[109,9,123,7],[109,10,123,8,"psbtFromBuffer"],[109,24,123,22],[109,27,123,25,"psbtFromBuffer"],[109,41,123,39],[110,2,124,0],[110,11,124,9,"checkKeyBuffer"],[110,25,124,23,"checkKeyBuffer"],[110,26,124,24,"type"],[110,30,124,28],[110,32,124,30,"keyBuf"],[110,38,124,36],[110,40,124,38,"keyNum"],[110,46,124,44],[110,48,124,46],[111,4,125,2],[111,8,125,6],[111,9,125,7,"keyBuf"],[111,15,125,13],[111,16,125,14,"equals"],[111,22,125,20],[111,23,125,21,"Buffer"],[111,29,125,27],[111,30,125,28,"from"],[111,34,125,32],[111,35,125,33],[111,36,125,34,"keyNum"],[111,42,125,40],[111,43,125,41],[111,44,125,42],[111,45,125,43],[111,47,125,45],[112,6,126,4],[112,12,126,10],[112,16,126,14,"Error"],[112,21,126,19],[112,22,127,6],[112,47,127,31,"type"],[112,51,127,35],[112,60,127,44,"keyBuf"],[112,66,127,50],[112,67,127,51,"toString"],[112,75,127,59],[112,76,127,60],[112,81,127,65],[112,82,127,66],[112,84,128,4],[112,85,128,5],[113,4,129,2],[114,2,130,0],[115,2,131,0,"exports"],[115,9,131,7],[115,10,131,8,"checkKeyBuffer"],[115,24,131,22],[115,27,131,25,"checkKeyBuffer"],[115,41,131,39],[116,2,132,0],[116,11,132,9,"psbtFromKeyVals"],[116,26,132,24,"psbtFromKeyVals"],[116,27,133,2,"unsignedTx"],[116,37,133,12],[116,39,133,12,"_ref"],[116,43,133,12],[116,45,135,2],[117,4,135,2],[117,8,134,4,"globalMapKeyVals"],[117,24,134,20],[117,27,134,20,"_ref"],[117,31,134,20],[117,32,134,4,"globalMapKeyVals"],[117,48,134,20],[118,6,134,22,"inputKeyVals"],[118,18,134,34],[118,21,134,34,"_ref"],[118,25,134,34],[118,26,134,22,"inputKeyVals"],[118,38,134,34],[119,6,134,36,"outputKeyVals"],[119,19,134,49],[119,22,134,49,"_ref"],[119,26,134,49],[119,27,134,36,"outputKeyVals"],[119,40,134,49],[120,4,136,2],[121,4,137,2],[121,8,137,8,"globalMap"],[121,17,137,17],[121,20,137,20],[122,6,138,4,"unsignedTx"],[122,16,138,14],[122,18,138,4,"unsignedTx"],[123,4,139,2],[123,5,139,3],[124,4,140,2],[124,8,140,6,"txCount"],[124,15,140,13],[124,18,140,16],[124,19,140,17],[125,4,141,2],[125,9,141,7],[125,13,141,13,"keyVal"],[125,19,141,19],[125,23,141,23,"globalMapKeyVals"],[125,39,141,39],[125,41,141,41],[126,6,142,4],[127,6,143,4],[128,6,144,4],[128,14,144,12,"keyVal"],[128,20,144,18],[128,21,144,19,"key"],[128,24,144,22],[128,25,144,23],[128,26,144,24],[128,27,144,25],[129,8,145,6],[129,13,145,11,"_$$_REQUIRE"],[129,24,145,11],[129,25,145,11,"_dependencyMap"],[129,39,145,11],[129,61,145,24,"GlobalTypes"],[129,72,145,35],[129,73,145,36,"UNSIGNED_TX"],[129,84,145,47],[130,10,146,8,"checkKeyBuffer"],[130,24,146,22],[130,25,147,10],[130,33,147,18],[130,35,148,10,"keyVal"],[130,41,148,16],[130,42,148,17,"key"],[130,45,148,20],[130,47,149,10,"_$$_REQUIRE"],[130,58,149,10],[130,59,149,10,"_dependencyMap"],[130,73,149,10],[130,95,149,23,"GlobalTypes"],[130,106,149,34],[130,107,149,35,"UNSIGNED_TX"],[130,118,150,8],[130,119,150,9],[131,10,151,8],[131,14,151,12,"txCount"],[131,21,151,19],[131,24,151,22],[131,25,151,23],[131,27,151,25],[132,12,152,10],[132,18,152,16],[132,22,152,20,"Error"],[132,27,152,25],[132,28,152,26],[132,78,152,76],[132,79,152,77],[133,10,153,8],[134,10,154,8,"txCount"],[134,17,154,15],[134,19,154,17],[135,10,155,8],[136,8,156,6],[136,13,156,11,"_$$_REQUIRE"],[136,24,156,11],[136,25,156,11,"_dependencyMap"],[136,39,156,11],[136,61,156,24,"GlobalTypes"],[136,72,156,35],[136,73,156,36,"GLOBAL_XPUB"],[136,84,156,47],[137,10,157,8],[137,14,157,12,"globalMap"],[137,23,157,21],[137,24,157,22,"globalXpub"],[137,34,157,32],[137,39,157,37,"undefined"],[137,48,157,46],[137,50,157,48],[138,12,158,10,"globalMap"],[138,21,158,19],[138,22,158,20,"globalXpub"],[138,32,158,30],[138,35,158,33],[138,37,158,35],[139,10,159,8],[140,10,160,8,"globalMap"],[140,19,160,17],[140,20,160,18,"globalXpub"],[140,30,160,28],[140,31,160,29,"push"],[140,35,160,33],[140,36,160,34,"_$$_REQUIRE"],[140,47,160,34],[140,48,160,34,"_dependencyMap"],[140,62,160,34],[140,83,160,42,"globals"],[140,90,160,49],[140,91,160,50,"globalXpub"],[140,101,160,60],[140,102,160,61,"decode"],[140,108,160,67],[140,109,160,68,"keyVal"],[140,115,160,74],[140,116,160,75],[140,117,160,76],[141,10,161,8],[142,8,162,6],[143,10,163,8],[144,10,164,8],[144,14,164,12],[144,15,164,13,"globalMap"],[144,24,164,22],[144,25,164,23,"unknownKeyVals"],[144,39,164,37],[144,41,164,39,"globalMap"],[144,50,164,48],[144,51,164,49,"unknownKeyVals"],[144,65,164,63],[144,68,164,66],[144,70,164,68],[145,10,165,8,"globalMap"],[145,19,165,17],[145,20,165,18,"unknownKeyVals"],[145,34,165,32],[145,35,165,33,"push"],[145,39,165,37],[145,40,165,38,"keyVal"],[145,46,165,44],[145,47,165,45],[146,6,166,4],[147,4,167,2],[148,4,168,2],[149,4,169,2],[149,8,169,8,"inputCount"],[149,18,169,18],[149,21,169,21,"inputKeyVals"],[149,33,169,33],[149,34,169,34,"length"],[149,40,169,40],[150,4,170,2],[150,8,170,8,"outputCount"],[150,19,170,19],[150,22,170,22,"outputKeyVals"],[150,35,170,35],[150,36,170,36,"length"],[150,42,170,42],[151,4,171,2],[151,8,171,8,"inputs"],[151,14,171,14],[151,17,171,17],[151,19,171,19],[152,4,172,2],[152,8,172,8,"outputs"],[152,15,172,15],[152,18,172,18],[152,20,172,20],[153,4,173,2],[154,4,174,2],[154,9,174,7],[154,13,174,13,"index"],[154,18,174,18],[154,22,174,22,"_$$_REQUIRE"],[154,33,174,22],[154,34,174,22,"_dependencyMap"],[154,48,174,22],[154,75,174,30,"range"],[154,80,174,35],[154,81,174,36,"inputCount"],[154,91,174,46],[154,92,174,47],[154,94,174,49],[155,6,175,4],[155,10,175,10,"input"],[155,15,175,15],[155,18,175,18],[155,19,175,19],[155,20,175,20],[156,6,176,4],[156,11,176,9],[156,15,176,15,"keyVal"],[156,23,176,21],[156,27,176,25,"inputKeyVals"],[156,39,176,37],[156,40,176,38,"index"],[156,45,176,43],[156,46,176,44],[156,48,176,46],[157,8,177,6,"_$$_REQUIRE"],[157,19,177,6],[157,20,177,6,"_dependencyMap"],[157,34,177,6],[157,55,177,14,"inputs"],[157,61,177,20],[157,62,177,21,"checkPubkey"],[157,73,177,32],[157,74,177,33,"keyVal"],[157,82,177,39],[157,83,177,40],[158,8,178,6],[158,16,178,14,"keyVal"],[158,24,178,20],[158,25,178,21,"key"],[158,28,178,24],[158,29,178,25],[158,30,178,26],[158,31,178,27],[159,10,179,8],[159,15,179,13,"_$$_REQUIRE"],[159,26,179,13],[159,27,179,13,"_dependencyMap"],[159,41,179,13],[159,63,179,26,"InputTypes"],[159,73,179,36],[159,74,179,37,"NON_WITNESS_UTXO"],[159,90,179,53],[160,12,180,10,"checkKeyBuffer"],[160,26,180,24],[160,27,181,12],[160,34,181,19],[160,36,182,12,"keyVal"],[160,44,182,18],[160,45,182,19,"key"],[160,48,182,22],[160,50,183,12,"_$$_REQUIRE"],[160,61,183,12],[160,62,183,12,"_dependencyMap"],[160,76,183,12],[160,98,183,25,"InputTypes"],[160,108,183,35],[160,109,183,36,"NON_WITNESS_UTXO"],[160,125,184,10],[160,126,184,11],[161,12,185,10],[161,16,185,14,"input"],[161,21,185,19],[161,22,185,20,"nonWitnessUtxo"],[161,36,185,34],[161,41,185,39,"undefined"],[161,50,185,48],[161,52,185,50],[162,14,186,12],[162,20,186,18],[162,24,186,22,"Error"],[162,29,186,27],[162,30,187,14],[162,81,188,12],[162,82,188,13],[163,12,189,10],[164,12,190,10,"input"],[164,17,190,15],[164,18,190,16,"nonWitnessUtxo"],[164,32,190,30],[164,35,190,33,"_$$_REQUIRE"],[164,46,190,33],[164,47,190,33,"_dependencyMap"],[164,61,190,33],[164,82,190,41,"inputs"],[164,88,190,47],[164,89,190,48,"nonWitnessUtxo"],[164,103,190,62],[164,104,190,63,"decode"],[164,110,190,69],[164,111,190,70,"keyVal"],[164,119,190,76],[164,120,190,77],[165,12,191,10],[166,10,192,8],[166,15,192,13,"_$$_REQUIRE"],[166,26,192,13],[166,27,192,13,"_dependencyMap"],[166,41,192,13],[166,63,192,26,"InputTypes"],[166,73,192,36],[166,74,192,37,"WITNESS_UTXO"],[166,86,192,49],[167,12,193,10,"checkKeyBuffer"],[167,26,193,24],[167,27,194,12],[167,34,194,19],[167,36,195,12,"keyVal"],[167,44,195,18],[167,45,195,19,"key"],[167,48,195,22],[167,50,196,12,"_$$_REQUIRE"],[167,61,196,12],[167,62,196,12,"_dependencyMap"],[167,76,196,12],[167,98,196,25,"InputTypes"],[167,108,196,35],[167,109,196,36,"WITNESS_UTXO"],[167,121,197,10],[167,122,197,11],[168,12,198,10],[168,16,198,14,"input"],[168,21,198,19],[168,22,198,20,"witnessUtxo"],[168,33,198,31],[168,38,198,36,"undefined"],[168,47,198,45],[168,49,198,47],[169,14,199,12],[169,20,199,18],[169,24,199,22,"Error"],[169,29,199,27],[169,30,199,28],[169,77,199,75],[169,78,199,76],[170,12,200,10],[171,12,201,10,"input"],[171,17,201,15],[171,18,201,16,"witnessUtxo"],[171,29,201,27],[171,32,201,30,"_$$_REQUIRE"],[171,43,201,30],[171,44,201,30,"_dependencyMap"],[171,58,201,30],[171,79,201,38,"inputs"],[171,85,201,44],[171,86,201,45,"witnessUtxo"],[171,97,201,56],[171,98,201,57,"decode"],[171,104,201,63],[171,105,201,64,"keyVal"],[171,113,201,70],[171,114,201,71],[172,12,202,10],[173,10,203,8],[173,15,203,13,"_$$_REQUIRE"],[173,26,203,13],[173,27,203,13,"_dependencyMap"],[173,41,203,13],[173,63,203,26,"InputTypes"],[173,73,203,36],[173,74,203,37,"PARTIAL_SIG"],[173,85,203,48],[174,12,204,10],[174,16,204,14,"input"],[174,21,204,19],[174,22,204,20,"partialSig"],[174,32,204,30],[174,37,204,35,"undefined"],[174,46,204,44],[174,48,204,46],[175,14,205,12,"input"],[175,19,205,17],[175,20,205,18,"partialSig"],[175,30,205,28],[175,33,205,31],[175,35,205,33],[176,12,206,10],[177,12,207,10,"input"],[177,17,207,15],[177,18,207,16,"partialSig"],[177,28,207,26],[177,29,207,27,"push"],[177,33,207,31],[177,34,207,32,"_$$_REQUIRE"],[177,45,207,32],[177,46,207,32,"_dependencyMap"],[177,60,207,32],[177,81,207,40,"inputs"],[177,87,207,46],[177,88,207,47,"partialSig"],[177,98,207,57],[177,99,207,58,"decode"],[177,105,207,64],[177,106,207,65,"keyVal"],[177,114,207,71],[177,115,207,72],[177,116,207,73],[178,12,208,10],[179,10,209,8],[179,15,209,13,"_$$_REQUIRE"],[179,26,209,13],[179,27,209,13,"_dependencyMap"],[179,41,209,13],[179,63,209,26,"InputTypes"],[179,73,209,36],[179,74,209,37,"SIGHASH_TYPE"],[179,86,209,49],[180,12,210,10,"checkKeyBuffer"],[180,26,210,24],[180,27,211,12],[180,34,211,19],[180,36,212,12,"keyVal"],[180,44,212,18],[180,45,212,19,"key"],[180,48,212,22],[180,50,213,12,"_$$_REQUIRE"],[180,61,213,12],[180,62,213,12,"_dependencyMap"],[180,76,213,12],[180,98,213,25,"InputTypes"],[180,108,213,35],[180,109,213,36,"SIGHASH_TYPE"],[180,121,214,10],[180,122,214,11],[181,12,215,10],[181,16,215,14,"input"],[181,21,215,19],[181,22,215,20,"sighashType"],[181,33,215,31],[181,38,215,36,"undefined"],[181,47,215,45],[181,49,215,47],[182,14,216,12],[182,20,216,18],[182,24,216,22,"Error"],[182,29,216,27],[182,30,216,28],[182,77,216,75],[182,78,216,76],[183,12,217,10],[184,12,218,10,"input"],[184,17,218,15],[184,18,218,16,"sighashType"],[184,29,218,27],[184,32,218,30,"_$$_REQUIRE"],[184,43,218,30],[184,44,218,30,"_dependencyMap"],[184,58,218,30],[184,79,218,38,"inputs"],[184,85,218,44],[184,86,218,45,"sighashType"],[184,97,218,56],[184,98,218,57,"decode"],[184,104,218,63],[184,105,218,64,"keyVal"],[184,113,218,70],[184,114,218,71],[185,12,219,10],[186,10,220,8],[186,15,220,13,"_$$_REQUIRE"],[186,26,220,13],[186,27,220,13,"_dependencyMap"],[186,41,220,13],[186,63,220,26,"InputTypes"],[186,73,220,36],[186,74,220,37,"REDEEM_SCRIPT"],[186,87,220,50],[187,12,221,10,"checkKeyBuffer"],[187,26,221,24],[187,27,222,12],[187,34,222,19],[187,36,223,12,"keyVal"],[187,44,223,18],[187,45,223,19,"key"],[187,48,223,22],[187,50,224,12,"_$$_REQUIRE"],[187,61,224,12],[187,62,224,12,"_dependencyMap"],[187,76,224,12],[187,98,224,25,"InputTypes"],[187,108,224,35],[187,109,224,36,"REDEEM_SCRIPT"],[187,122,225,10],[187,123,225,11],[188,12,226,10],[188,16,226,14,"input"],[188,21,226,19],[188,22,226,20,"redeemScript"],[188,34,226,32],[188,39,226,37,"undefined"],[188,48,226,46],[188,50,226,48],[189,14,227,12],[189,20,227,18],[189,24,227,22,"Error"],[189,29,227,27],[189,30,227,28],[189,78,227,76],[189,79,227,77],[190,12,228,10],[191,12,229,10,"input"],[191,17,229,15],[191,18,229,16,"redeemScript"],[191,30,229,28],[191,33,229,31,"_$$_REQUIRE"],[191,44,229,31],[191,45,229,31,"_dependencyMap"],[191,59,229,31],[191,80,229,39,"inputs"],[191,86,229,45],[191,87,229,46,"redeemScript"],[191,99,229,58],[191,100,229,59,"decode"],[191,106,229,65],[191,107,229,66,"keyVal"],[191,115,229,72],[191,116,229,73],[192,12,230,10],[193,10,231,8],[193,15,231,13,"_$$_REQUIRE"],[193,26,231,13],[193,27,231,13,"_dependencyMap"],[193,41,231,13],[193,63,231,26,"InputTypes"],[193,73,231,36],[193,74,231,37,"WITNESS_SCRIPT"],[193,88,231,51],[194,12,232,10,"checkKeyBuffer"],[194,26,232,24],[194,27,233,12],[194,34,233,19],[194,36,234,12,"keyVal"],[194,44,234,18],[194,45,234,19,"key"],[194,48,234,22],[194,50,235,12,"_$$_REQUIRE"],[194,61,235,12],[194,62,235,12,"_dependencyMap"],[194,76,235,12],[194,98,235,25,"InputTypes"],[194,108,235,35],[194,109,235,36,"WITNESS_SCRIPT"],[194,123,236,10],[194,124,236,11],[195,12,237,10],[195,16,237,14,"input"],[195,21,237,19],[195,22,237,20,"witnessScript"],[195,35,237,33],[195,40,237,38,"undefined"],[195,49,237,47],[195,51,237,49],[196,14,238,12],[196,20,238,18],[196,24,238,22,"Error"],[196,29,238,27],[196,30,238,28],[196,79,238,77],[196,80,238,78],[197,12,239,10],[198,12,240,10,"input"],[198,17,240,15],[198,18,240,16,"witnessScript"],[198,31,240,29],[198,34,240,32,"_$$_REQUIRE"],[198,45,240,32],[198,46,240,32,"_dependencyMap"],[198,60,240,32],[198,81,240,40,"inputs"],[198,87,240,46],[198,88,240,47,"witnessScript"],[198,101,240,60],[198,102,240,61,"decode"],[198,108,240,67],[198,109,240,68,"keyVal"],[198,117,240,74],[198,118,240,75],[199,12,241,10],[200,10,242,8],[200,15,242,13,"_$$_REQUIRE"],[200,26,242,13],[200,27,242,13,"_dependencyMap"],[200,41,242,13],[200,63,242,26,"InputTypes"],[200,73,242,36],[200,74,242,37,"BIP32_DERIVATION"],[200,90,242,53],[201,12,243,10],[201,16,243,14,"input"],[201,21,243,19],[201,22,243,20,"bip32Derivation"],[201,37,243,35],[201,42,243,40,"undefined"],[201,51,243,49],[201,53,243,51],[202,14,244,12,"input"],[202,19,244,17],[202,20,244,18,"bip32Derivation"],[202,35,244,33],[202,38,244,36],[202,40,244,38],[203,12,245,10],[204,12,246,10,"input"],[204,17,246,15],[204,18,246,16,"bip32Derivation"],[204,33,246,31],[204,34,246,32,"push"],[204,38,246,36],[204,39,247,12,"_$$_REQUIRE"],[204,50,247,12],[204,51,247,12,"_dependencyMap"],[204,65,247,12],[204,86,247,20,"inputs"],[204,92,247,26],[204,93,247,27,"bip32Derivation"],[204,108,247,42],[204,109,247,43,"decode"],[204,115,247,49],[204,116,247,50,"keyVal"],[204,124,247,56],[204,125,248,10],[204,126,248,11],[205,12,249,10],[206,10,250,8],[206,15,250,13,"_$$_REQUIRE"],[206,26,250,13],[206,27,250,13,"_dependencyMap"],[206,41,250,13],[206,63,250,26,"InputTypes"],[206,73,250,36],[206,74,250,37,"FINAL_SCRIPTSIG"],[206,89,250,52],[207,12,251,10,"checkKeyBuffer"],[207,26,251,24],[207,27,252,12],[207,34,252,19],[207,36,253,12,"keyVal"],[207,44,253,18],[207,45,253,19,"key"],[207,48,253,22],[207,50,254,12,"_$$_REQUIRE"],[207,61,254,12],[207,62,254,12,"_dependencyMap"],[207,76,254,12],[207,98,254,25,"InputTypes"],[207,108,254,35],[207,109,254,36,"FINAL_SCRIPTSIG"],[207,124,255,10],[207,125,255,11],[208,12,256,10,"input"],[208,17,256,15],[208,18,256,16,"finalScriptSig"],[208,32,256,30],[208,35,256,33,"_$$_REQUIRE"],[208,46,256,33],[208,47,256,33,"_dependencyMap"],[208,61,256,33],[208,82,256,41,"inputs"],[208,88,256,47],[208,89,256,48,"finalScriptSig"],[208,103,256,62],[208,104,256,63,"decode"],[208,110,256,69],[208,111,256,70,"keyVal"],[208,119,256,76],[208,120,256,77],[209,12,257,10],[210,10,258,8],[210,15,258,13,"_$$_REQUIRE"],[210,26,258,13],[210,27,258,13,"_dependencyMap"],[210,41,258,13],[210,63,258,26,"InputTypes"],[210,73,258,36],[210,74,258,37,"FINAL_SCRIPTWITNESS"],[210,93,258,56],[211,12,259,10,"checkKeyBuffer"],[211,26,259,24],[211,27,260,12],[211,34,260,19],[211,36,261,12,"keyVal"],[211,44,261,18],[211,45,261,19,"key"],[211,48,261,22],[211,50,262,12,"_$$_REQUIRE"],[211,61,262,12],[211,62,262,12,"_dependencyMap"],[211,76,262,12],[211,98,262,25,"InputTypes"],[211,108,262,35],[211,109,262,36,"FINAL_SCRIPTWITNESS"],[211,128,263,10],[211,129,263,11],[212,12,264,10,"input"],[212,17,264,15],[212,18,264,16,"finalScriptWitness"],[212,36,264,34],[212,39,264,37,"_$$_REQUIRE"],[212,50,264,37],[212,51,264,37,"_dependencyMap"],[212,65,264,37],[212,86,264,45,"inputs"],[212,92,264,51],[212,93,264,52,"finalScriptWitness"],[212,111,264,70],[212,112,264,71,"decode"],[212,118,264,77],[212,119,265,12,"keyVal"],[212,127,266,10],[212,128,266,11],[213,12,267,10],[214,10,268,8],[214,15,268,13,"_$$_REQUIRE"],[214,26,268,13],[214,27,268,13,"_dependencyMap"],[214,41,268,13],[214,63,268,26,"InputTypes"],[214,73,268,36],[214,74,268,37,"POR_COMMITMENT"],[214,88,268,51],[215,12,269,10,"checkKeyBuffer"],[215,26,269,24],[215,27,270,12],[215,34,270,19],[215,36,271,12,"keyVal"],[215,44,271,18],[215,45,271,19,"key"],[215,48,271,22],[215,50,272,12,"_$$_REQUIRE"],[215,61,272,12],[215,62,272,12,"_dependencyMap"],[215,76,272,12],[215,98,272,25,"InputTypes"],[215,108,272,35],[215,109,272,36,"POR_COMMITMENT"],[215,123,273,10],[215,124,273,11],[216,12,274,10,"input"],[216,17,274,15],[216,18,274,16,"porCommitment"],[216,31,274,29],[216,34,274,32,"_$$_REQUIRE"],[216,45,274,32],[216,46,274,32,"_dependencyMap"],[216,60,274,32],[216,81,274,40,"inputs"],[216,87,274,46],[216,88,274,47,"porCommitment"],[216,101,274,60],[216,102,274,61,"decode"],[216,108,274,67],[216,109,274,68,"keyVal"],[216,117,274,74],[216,118,274,75],[217,12,275,10],[218,10,276,8],[218,15,276,13,"_$$_REQUIRE"],[218,26,276,13],[218,27,276,13,"_dependencyMap"],[218,41,276,13],[218,63,276,26,"InputTypes"],[218,73,276,36],[218,74,276,37,"TAP_KEY_SIG"],[218,85,276,48],[219,12,277,10,"checkKeyBuffer"],[219,26,277,24],[219,27,278,12],[219,34,278,19],[219,36,279,12,"keyVal"],[219,44,279,18],[219,45,279,19,"key"],[219,48,279,22],[219,50,280,12,"_$$_REQUIRE"],[219,61,280,12],[219,62,280,12,"_dependencyMap"],[219,76,280,12],[219,98,280,25,"InputTypes"],[219,108,280,35],[219,109,280,36,"TAP_KEY_SIG"],[219,120,281,10],[219,121,281,11],[220,12,282,10,"input"],[220,17,282,15],[220,18,282,16,"tapKeySig"],[220,27,282,25],[220,30,282,28,"_$$_REQUIRE"],[220,41,282,28],[220,42,282,28,"_dependencyMap"],[220,56,282,28],[220,77,282,36,"inputs"],[220,83,282,42],[220,84,282,43,"tapKeySig"],[220,93,282,52],[220,94,282,53,"decode"],[220,100,282,59],[220,101,282,60,"keyVal"],[220,109,282,66],[220,110,282,67],[221,12,283,10],[222,10,284,8],[222,15,284,13,"_$$_REQUIRE"],[222,26,284,13],[222,27,284,13,"_dependencyMap"],[222,41,284,13],[222,63,284,26,"InputTypes"],[222,73,284,36],[222,74,284,37,"TAP_SCRIPT_SIG"],[222,88,284,51],[223,12,285,10],[223,16,285,14,"input"],[223,21,285,19],[223,22,285,20,"tapScriptSig"],[223,34,285,32],[223,39,285,37,"undefined"],[223,48,285,46],[223,50,285,48],[224,14,286,12,"input"],[224,19,286,17],[224,20,286,18,"tapScriptSig"],[224,32,286,30],[224,35,286,33],[224,37,286,35],[225,12,287,10],[226,12,288,10,"input"],[226,17,288,15],[226,18,288,16,"tapScriptSig"],[226,30,288,28],[226,31,288,29,"push"],[226,35,288,33],[226,36,288,34,"_$$_REQUIRE"],[226,47,288,34],[226,48,288,34,"_dependencyMap"],[226,62,288,34],[226,83,288,42,"inputs"],[226,89,288,48],[226,90,288,49,"tapScriptSig"],[226,102,288,61],[226,103,288,62,"decode"],[226,109,288,68],[226,110,288,69,"keyVal"],[226,118,288,75],[226,119,288,76],[226,120,288,77],[227,12,289,10],[228,10,290,8],[228,15,290,13,"_$$_REQUIRE"],[228,26,290,13],[228,27,290,13,"_dependencyMap"],[228,41,290,13],[228,63,290,26,"InputTypes"],[228,73,290,36],[228,74,290,37,"TAP_LEAF_SCRIPT"],[228,89,290,52],[229,12,291,10],[229,16,291,14,"input"],[229,21,291,19],[229,22,291,20,"tapLeafScript"],[229,35,291,33],[229,40,291,38,"undefined"],[229,49,291,47],[229,51,291,49],[230,14,292,12,"input"],[230,19,292,17],[230,20,292,18,"tapLeafScript"],[230,33,292,31],[230,36,292,34],[230,38,292,36],[231,12,293,10],[232,12,294,10,"input"],[232,17,294,15],[232,18,294,16,"tapLeafScript"],[232,31,294,29],[232,32,294,30,"push"],[232,36,294,34],[232,37,294,35,"_$$_REQUIRE"],[232,48,294,35],[232,49,294,35,"_dependencyMap"],[232,63,294,35],[232,84,294,43,"inputs"],[232,90,294,49],[232,91,294,50,"tapLeafScript"],[232,104,294,63],[232,105,294,64,"decode"],[232,111,294,70],[232,112,294,71,"keyVal"],[232,120,294,77],[232,121,294,78],[232,122,294,79],[233,12,295,10],[234,10,296,8],[234,15,296,13,"_$$_REQUIRE"],[234,26,296,13],[234,27,296,13,"_dependencyMap"],[234,41,296,13],[234,63,296,26,"InputTypes"],[234,73,296,36],[234,74,296,37,"TAP_BIP32_DERIVATION"],[234,94,296,57],[235,12,297,10],[235,16,297,14,"input"],[235,21,297,19],[235,22,297,20,"tapBip32Derivation"],[235,40,297,38],[235,45,297,43,"undefined"],[235,54,297,52],[235,56,297,54],[236,14,298,12,"input"],[236,19,298,17],[236,20,298,18,"tapBip32Derivation"],[236,38,298,36],[236,41,298,39],[236,43,298,41],[237,12,299,10],[238,12,300,10,"input"],[238,17,300,15],[238,18,300,16,"tapBip32Derivation"],[238,36,300,34],[238,37,300,35,"push"],[238,41,300,39],[238,42,301,12,"_$$_REQUIRE"],[238,53,301,12],[238,54,301,12,"_dependencyMap"],[238,68,301,12],[238,89,301,20,"inputs"],[238,95,301,26],[238,96,301,27,"tapBip32Derivation"],[238,114,301,45],[238,115,301,46,"decode"],[238,121,301,52],[238,122,301,53,"keyVal"],[238,130,301,59],[238,131,302,10],[238,132,302,11],[239,12,303,10],[240,10,304,8],[240,15,304,13,"_$$_REQUIRE"],[240,26,304,13],[240,27,304,13,"_dependencyMap"],[240,41,304,13],[240,63,304,26,"InputTypes"],[240,73,304,36],[240,74,304,37,"TAP_INTERNAL_KEY"],[240,90,304,53],[241,12,305,10,"checkKeyBuffer"],[241,26,305,24],[241,27,306,12],[241,34,306,19],[241,36,307,12,"keyVal"],[241,44,307,18],[241,45,307,19,"key"],[241,48,307,22],[241,50,308,12,"_$$_REQUIRE"],[241,61,308,12],[241,62,308,12,"_dependencyMap"],[241,76,308,12],[241,98,308,25,"InputTypes"],[241,108,308,35],[241,109,308,36,"TAP_INTERNAL_KEY"],[241,125,309,10],[241,126,309,11],[242,12,310,10,"input"],[242,17,310,15],[242,18,310,16,"tapInternalKey"],[242,32,310,30],[242,35,310,33,"_$$_REQUIRE"],[242,46,310,33],[242,47,310,33,"_dependencyMap"],[242,61,310,33],[242,82,310,41,"inputs"],[242,88,310,47],[242,89,310,48,"tapInternalKey"],[242,103,310,62],[242,104,310,63,"decode"],[242,110,310,69],[242,111,310,70,"keyVal"],[242,119,310,76],[242,120,310,77],[243,12,311,10],[244,10,312,8],[244,15,312,13,"_$$_REQUIRE"],[244,26,312,13],[244,27,312,13,"_dependencyMap"],[244,41,312,13],[244,63,312,26,"InputTypes"],[244,73,312,36],[244,74,312,37,"TAP_MERKLE_ROOT"],[244,89,312,52],[245,12,313,10,"checkKeyBuffer"],[245,26,313,24],[245,27,314,12],[245,34,314,19],[245,36,315,12,"keyVal"],[245,44,315,18],[245,45,315,19,"key"],[245,48,315,22],[245,50,316,12,"_$$_REQUIRE"],[245,61,316,12],[245,62,316,12,"_dependencyMap"],[245,76,316,12],[245,98,316,25,"InputTypes"],[245,108,316,35],[245,109,316,36,"TAP_MERKLE_ROOT"],[245,124,317,10],[245,125,317,11],[246,12,318,10,"input"],[246,17,318,15],[246,18,318,16,"tapMerkleRoot"],[246,31,318,29],[246,34,318,32,"_$$_REQUIRE"],[246,45,318,32],[246,46,318,32,"_dependencyMap"],[246,60,318,32],[246,81,318,40,"inputs"],[246,87,318,46],[246,88,318,47,"tapMerkleRoot"],[246,101,318,60],[246,102,318,61,"decode"],[246,108,318,67],[246,109,318,68,"keyVal"],[246,117,318,74],[246,118,318,75],[247,12,319,10],[248,10,320,8],[249,12,321,10],[250,12,322,10],[250,16,322,14],[250,17,322,15,"input"],[250,22,322,20],[250,23,322,21,"unknownKeyVals"],[250,37,322,35],[250,39,322,37,"input"],[250,44,322,42],[250,45,322,43,"unknownKeyVals"],[250,59,322,57],[250,62,322,60],[250,64,322,62],[251,12,323,10,"input"],[251,17,323,15],[251,18,323,16,"unknownKeyVals"],[251,32,323,30],[251,33,323,31,"push"],[251,37,323,35],[251,38,323,36,"keyVal"],[251,46,323,42],[251,47,323,43],[252,8,324,6],[253,6,325,4],[254,6,326,4,"inputs"],[254,12,326,10],[254,13,326,11,"push"],[254,17,326,15],[254,18,326,16,"input"],[254,23,326,21],[254,24,326,22],[255,4,327,2],[256,4,328,2],[256,9,328,7],[256,13,328,13,"index"],[256,20,328,18],[256,24,328,22,"_$$_REQUIRE"],[256,35,328,22],[256,36,328,22,"_dependencyMap"],[256,50,328,22],[256,77,328,30,"range"],[256,82,328,35],[256,83,328,36,"outputCount"],[256,94,328,47],[256,95,328,48],[256,97,328,50],[257,6,329,4],[257,10,329,10,"output"],[257,16,329,16],[257,19,329,19],[257,20,329,20],[257,21,329,21],[258,6,330,4],[258,11,330,9],[258,15,330,15,"keyVal"],[258,23,330,21],[258,27,330,25,"outputKeyVals"],[258,40,330,38],[258,41,330,39,"index"],[258,48,330,44],[258,49,330,45],[258,51,330,47],[259,8,331,6,"_$$_REQUIRE"],[259,19,331,6],[259,20,331,6,"_dependencyMap"],[259,34,331,6],[259,55,331,14,"outputs"],[259,62,331,21],[259,63,331,22,"checkPubkey"],[259,74,331,33],[259,75,331,34,"keyVal"],[259,83,331,40],[259,84,331,41],[260,8,332,6],[260,16,332,14,"keyVal"],[260,24,332,20],[260,25,332,21,"key"],[260,28,332,24],[260,29,332,25],[260,30,332,26],[260,31,332,27],[261,10,333,8],[261,15,333,13,"_$$_REQUIRE"],[261,26,333,13],[261,27,333,13,"_dependencyMap"],[261,41,333,13],[261,63,333,26,"OutputTypes"],[261,74,333,37],[261,75,333,38,"REDEEM_SCRIPT"],[261,88,333,51],[262,12,334,10,"checkKeyBuffer"],[262,26,334,24],[262,27,335,12],[262,35,335,20],[262,37,336,12,"keyVal"],[262,45,336,18],[262,46,336,19,"key"],[262,49,336,22],[262,51,337,12,"_$$_REQUIRE"],[262,62,337,12],[262,63,337,12,"_dependencyMap"],[262,77,337,12],[262,99,337,25,"OutputTypes"],[262,110,337,36],[262,111,337,37,"REDEEM_SCRIPT"],[262,124,338,10],[262,125,338,11],[263,12,339,10],[263,16,339,14,"output"],[263,22,339,20],[263,23,339,21,"redeemScript"],[263,35,339,33],[263,40,339,38,"undefined"],[263,49,339,47],[263,51,339,49],[264,14,340,12],[264,20,340,18],[264,24,340,22,"Error"],[264,29,340,27],[264,30,340,28],[264,79,340,77],[264,80,340,78],[265,12,341,10],[266,12,342,10,"output"],[266,18,342,16],[266,19,342,17,"redeemScript"],[266,31,342,29],[266,34,342,32,"_$$_REQUIRE"],[266,45,342,32],[266,46,342,32,"_dependencyMap"],[266,60,342,32],[266,81,342,40,"outputs"],[266,88,342,47],[266,89,342,48,"redeemScript"],[266,101,342,60],[266,102,342,61,"decode"],[266,108,342,67],[266,109,342,68,"keyVal"],[266,117,342,74],[266,118,342,75],[267,12,343,10],[268,10,344,8],[268,15,344,13,"_$$_REQUIRE"],[268,26,344,13],[268,27,344,13,"_dependencyMap"],[268,41,344,13],[268,63,344,26,"OutputTypes"],[268,74,344,37],[268,75,344,38,"WITNESS_SCRIPT"],[268,89,344,52],[269,12,345,10,"checkKeyBuffer"],[269,26,345,24],[269,27,346,12],[269,35,346,20],[269,37,347,12,"keyVal"],[269,45,347,18],[269,46,347,19,"key"],[269,49,347,22],[269,51,348,12,"_$$_REQUIRE"],[269,62,348,12],[269,63,348,12,"_dependencyMap"],[269,77,348,12],[269,99,348,25,"OutputTypes"],[269,110,348,36],[269,111,348,37,"WITNESS_SCRIPT"],[269,125,349,10],[269,126,349,11],[270,12,350,10],[270,16,350,14,"output"],[270,22,350,20],[270,23,350,21,"witnessScript"],[270,36,350,34],[270,41,350,39,"undefined"],[270,50,350,48],[270,52,350,50],[271,14,351,12],[271,20,351,18],[271,24,351,22,"Error"],[271,29,351,27],[271,30,351,28],[271,80,351,78],[271,81,351,79],[272,12,352,10],[273,12,353,10,"output"],[273,18,353,16],[273,19,353,17,"witnessScript"],[273,32,353,30],[273,35,353,33,"_$$_REQUIRE"],[273,46,353,33],[273,47,353,33,"_dependencyMap"],[273,61,353,33],[273,82,353,41,"outputs"],[273,89,353,48],[273,90,353,49,"witnessScript"],[273,103,353,62],[273,104,353,63,"decode"],[273,110,353,69],[273,111,353,70,"keyVal"],[273,119,353,76],[273,120,353,77],[274,12,354,10],[275,10,355,8],[275,15,355,13,"_$$_REQUIRE"],[275,26,355,13],[275,27,355,13,"_dependencyMap"],[275,41,355,13],[275,63,355,26,"OutputTypes"],[275,74,355,37],[275,75,355,38,"BIP32_DERIVATION"],[275,91,355,54],[276,12,356,10],[276,16,356,14,"output"],[276,22,356,20],[276,23,356,21,"bip32Derivation"],[276,38,356,36],[276,43,356,41,"undefined"],[276,52,356,50],[276,54,356,52],[277,14,357,12,"output"],[277,20,357,18],[277,21,357,19,"bip32Derivation"],[277,36,357,34],[277,39,357,37],[277,41,357,39],[278,12,358,10],[279,12,359,10,"output"],[279,18,359,16],[279,19,359,17,"bip32Derivation"],[279,34,359,32],[279,35,359,33,"push"],[279,39,359,37],[279,40,360,12,"_$$_REQUIRE"],[279,51,360,12],[279,52,360,12,"_dependencyMap"],[279,66,360,12],[279,87,360,20,"outputs"],[279,94,360,27],[279,95,360,28,"bip32Derivation"],[279,110,360,43],[279,111,360,44,"decode"],[279,117,360,50],[279,118,360,51,"keyVal"],[279,126,360,57],[279,127,361,10],[279,128,361,11],[280,12,362,10],[281,10,363,8],[281,15,363,13,"_$$_REQUIRE"],[281,26,363,13],[281,27,363,13,"_dependencyMap"],[281,41,363,13],[281,63,363,26,"OutputTypes"],[281,74,363,37],[281,75,363,38,"TAP_INTERNAL_KEY"],[281,91,363,54],[282,12,364,10,"checkKeyBuffer"],[282,26,364,24],[282,27,365,12],[282,35,365,20],[282,37,366,12,"keyVal"],[282,45,366,18],[282,46,366,19,"key"],[282,49,366,22],[282,51,367,12,"_$$_REQUIRE"],[282,62,367,12],[282,63,367,12,"_dependencyMap"],[282,77,367,12],[282,99,367,25,"OutputTypes"],[282,110,367,36],[282,111,367,37,"TAP_INTERNAL_KEY"],[282,127,368,10],[282,128,368,11],[283,12,369,10,"output"],[283,18,369,16],[283,19,369,17,"tapInternalKey"],[283,33,369,31],[283,36,369,34,"_$$_REQUIRE"],[283,47,369,34],[283,48,369,34,"_dependencyMap"],[283,62,369,34],[283,83,369,42,"outputs"],[283,90,369,49],[283,91,369,50,"tapInternalKey"],[283,105,369,64],[283,106,369,65,"decode"],[283,112,369,71],[283,113,369,72,"keyVal"],[283,121,369,78],[283,122,369,79],[284,12,370,10],[285,10,371,8],[285,15,371,13,"_$$_REQUIRE"],[285,26,371,13],[285,27,371,13,"_dependencyMap"],[285,41,371,13],[285,63,371,26,"OutputTypes"],[285,74,371,37],[285,75,371,38,"TAP_TREE"],[285,83,371,46],[286,12,372,10,"checkKeyBuffer"],[286,26,372,24],[286,27,373,12],[286,35,373,20],[286,37,374,12,"keyVal"],[286,45,374,18],[286,46,374,19,"key"],[286,49,374,22],[286,51,375,12,"_$$_REQUIRE"],[286,62,375,12],[286,63,375,12,"_dependencyMap"],[286,77,375,12],[286,99,375,25,"OutputTypes"],[286,110,375,36],[286,111,375,37,"TAP_TREE"],[286,119,376,10],[286,120,376,11],[287,12,377,10,"output"],[287,18,377,16],[287,19,377,17,"tapTree"],[287,26,377,24],[287,29,377,27,"_$$_REQUIRE"],[287,40,377,27],[287,41,377,27,"_dependencyMap"],[287,55,377,27],[287,76,377,35,"outputs"],[287,83,377,42],[287,84,377,43,"tapTree"],[287,91,377,50],[287,92,377,51,"decode"],[287,98,377,57],[287,99,377,58,"keyVal"],[287,107,377,64],[287,108,377,65],[288,12,378,10],[289,10,379,8],[289,15,379,13,"_$$_REQUIRE"],[289,26,379,13],[289,27,379,13,"_dependencyMap"],[289,41,379,13],[289,63,379,26,"OutputTypes"],[289,74,379,37],[289,75,379,38,"TAP_BIP32_DERIVATION"],[289,95,379,58],[290,12,380,10],[290,16,380,14,"output"],[290,22,380,20],[290,23,380,21,"tapBip32Derivation"],[290,41,380,39],[290,46,380,44,"undefined"],[290,55,380,53],[290,57,380,55],[291,14,381,12,"output"],[291,20,381,18],[291,21,381,19,"tapBip32Derivation"],[291,39,381,37],[291,42,381,40],[291,44,381,42],[292,12,382,10],[293,12,383,10,"output"],[293,18,383,16],[293,19,383,17,"tapBip32Derivation"],[293,37,383,35],[293,38,383,36,"push"],[293,42,383,40],[293,43,384,12,"_$$_REQUIRE"],[293,54,384,12],[293,55,384,12,"_dependencyMap"],[293,69,384,12],[293,90,384,20,"outputs"],[293,97,384,27],[293,98,384,28,"tapBip32Derivation"],[293,116,384,46],[293,117,384,47,"decode"],[293,123,384,53],[293,124,384,54,"keyVal"],[293,132,384,60],[293,133,385,10],[293,134,385,11],[294,12,386,10],[295,10,387,8],[296,12,388,10],[296,16,388,14],[296,17,388,15,"output"],[296,23,388,21],[296,24,388,22,"unknownKeyVals"],[296,38,388,36],[296,40,388,38,"output"],[296,46,388,44],[296,47,388,45,"unknownKeyVals"],[296,61,388,59],[296,64,388,62],[296,66,388,64],[297,12,389,10,"output"],[297,18,389,16],[297,19,389,17,"unknownKeyVals"],[297,33,389,31],[297,34,389,32,"push"],[297,38,389,36],[297,39,389,37,"keyVal"],[297,47,389,43],[297,48,389,44],[298,8,390,6],[299,6,391,4],[300,6,392,4,"outputs"],[300,13,392,11],[300,14,392,12,"push"],[300,18,392,16],[300,19,392,17,"output"],[300,25,392,23],[300,26,392,24],[301,4,393,2],[302,4,394,2],[302,11,394,9],[303,6,394,11,"globalMap"],[303,15,394,20],[303,17,394,11,"globalMap"],[303,26,394,20],[304,6,394,22,"inputs"],[304,12,394,28],[304,14,394,22,"inputs"],[304,20,394,28],[305,6,394,30,"outputs"],[305,13,394,37],[305,15,394,30,"outputs"],[306,4,394,38],[306,5,394,39],[307,2,395,0],[308,2,396,0,"exports"],[308,9,396,7],[308,10,396,8,"psbtFromKeyVals"],[308,25,396,23],[308,28,396,26,"psbtFromKeyVals"],[308,43,396,41],[309,0,396,42],[309,3]],"functionMap":{"names":["<global>","psbtFromBuffer","varSlice","readUInt32BE","readUInt8","getKeyValue","checkEndOfKeyValPairs","globalMapKeyVals.filter$argument_0","checkKeyBuffer","psbtFromKeyVals"],"mappings":"AAA;ACM;ECE;GDM;EEC;GFI;EGC;GHI;EIC;GJO;EKC;GLS;IMuB,gEN;CDwD;AQE;CRM;ASE;CTuQ"}},"type":"js/module"}]}