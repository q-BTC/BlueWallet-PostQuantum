{"dependencies":[{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":81,"column":0,"index":2254}}],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE="}},{"name":"varuint-bitcoin","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":15,"column":29,"index":464},"end":{"line":15,"column":55,"index":490}}],"key":"d/MLbboLwipJSIgxTfEgzKAp95s="}},{"name":"uint8array-tools","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":27,"index":520},"end":{"line":16,"column":54,"index":547}}],"key":"d9z2uhLIsbEZR4MIqnLfYd/zTK8="}},{"name":"../../typeFields.cjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":14,"column":24,"index":402},"end":{"line":14,"column":55,"index":433}},{"start":{"line":14,"column":24,"index":402},"end":{"line":14,"column":55,"index":433}}],"key":"6VKrghDrlipK/Kkfa9oBo7LMnas="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/toConsumableArray\");\n  var __importStar = this && this.__importStar || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result['default'] = mod;\n    return result;\n  };\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  var varuint = __importStar(_$$_REQUIRE(_dependencyMap[1], \"varuint-bitcoin\"));\n  var tools = __importStar(_$$_REQUIRE(_dependencyMap[2], \"uint8array-tools\"));\n  function decode(keyVal) {\n    if (keyVal.key[0] !== _$$_REQUIRE(_dependencyMap[3], \"../../typeFields.cjs\").OutputTypes.TAP_TREE || keyVal.key.length !== 1) {\n      throw new Error('Decode Error: could not decode tapTree with key 0x' + tools.toHex(keyVal.key));\n    }\n    var _offset = 0;\n    var data = [];\n    while (_offset < keyVal.value.length) {\n      var depth = keyVal.value[_offset++];\n      var leafVersion = keyVal.value[_offset++];\n      var _varuint$decode = varuint.decode(keyVal.value, _offset),\n        scriptLen = _varuint$decode.numberValue,\n        bytes = _varuint$decode.bytes;\n      _offset += bytes;\n      data.push({\n        depth: depth,\n        leafVersion: leafVersion,\n        script: keyVal.value.slice(_offset, _offset + scriptLen)\n      });\n      _offset += scriptLen;\n    }\n    return {\n      leaves: data\n    };\n  }\n  exports.decode = decode;\n  function encode(tree) {\n    var _ref;\n    var key = Uint8Array.from([_$$_REQUIRE(_dependencyMap[3], \"../../typeFields.cjs\").OutputTypes.TAP_TREE]);\n    var bufs = (_ref = []).concat.apply(_ref, _toConsumableArray(tree.leaves.map(function (tapLeaf) {\n      return [Uint8Array.of(tapLeaf.depth, tapLeaf.leafVersion), varuint.encode(BigInt(tapLeaf.script.length)).buffer, tapLeaf.script];\n    })));\n    return {\n      key: key,\n      value: tools.concat(bufs)\n    };\n  }\n  exports.encode = encode;\n  exports.expected = '{ leaves: [{ depth: number; leafVersion: number, script: Uint8Array; }] }';\n  function check(data) {\n    return Array.isArray(data.leaves) && data.leaves.every(function (tapLeaf) {\n      return tapLeaf.depth >= 0 && tapLeaf.depth <= 128 && (tapLeaf.leafVersion & 0xfe) === tapLeaf.leafVersion && tapLeaf.script instanceof Uint8Array;\n    });\n  }\n  exports.check = check;\n  function canAdd(currentData, newData) {\n    return !!currentData && !!newData && currentData.tapTree === undefined;\n  }\n  exports.canAdd = canAdd;\n});","lineCount":65,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_toConsumableArray"],[4,24,1,13],[4,27,1,13,"_$$_REQUIRE"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,2,0],[5,6,2,4,"__importStar"],[5,18,2,16],[5,21,3,3],[5,25,3,7],[5,29,3,11],[5,33,3,15],[5,34,3,16,"__importStar"],[5,46,3,28],[5,50,4,2],[5,60,4,11,"mod"],[5,63,4,14],[5,65,4,16],[6,4,5,4],[6,8,5,8,"mod"],[6,11,5,11],[6,15,5,15,"mod"],[6,18,5,18],[6,19,5,19,"__esModule"],[6,29,5,29],[6,31,5,31],[6,38,5,38,"mod"],[6,41,5,41],[7,4,6,4],[7,8,6,8,"result"],[7,14,6,14],[7,17,6,17],[7,18,6,18],[7,19,6,19],[8,4,7,4],[8,8,7,8,"mod"],[8,11,7,11],[8,15,7,15],[8,19,7,19],[8,21,8,6],[8,26,8,11],[8,30,8,15,"k"],[8,31,8,16],[8,35,8,20,"mod"],[8,38,8,23],[8,40,9,8],[8,44,9,12,"Object"],[8,50,9,18],[8,51,9,19,"hasOwnProperty"],[8,65,9,33],[8,66,9,34,"call"],[8,70,9,38],[8,71,9,39,"mod"],[8,74,9,42],[8,76,9,44,"k"],[8,77,9,45],[8,78,9,46],[8,80,9,48,"result"],[8,86,9,54],[8,87,9,55,"k"],[8,88,9,56],[8,89,9,57],[8,92,9,60,"mod"],[8,95,9,63],[8,96,9,64,"k"],[8,97,9,65],[8,98,9,66],[9,4,10,4,"result"],[9,10,10,10],[9,11,10,11],[9,20,10,20],[9,21,10,21],[9,24,10,24,"mod"],[9,27,10,27],[10,4,11,4],[10,11,11,11,"result"],[10,17,11,17],[11,2,12,2],[11,3,12,3],[12,2,13,0,"Object"],[12,8,13,6],[12,9,13,7,"defineProperty"],[12,23,13,21],[12,24,13,22,"exports"],[12,31,13,29],[12,33,13,31],[12,45,13,43],[12,47,13,45],[13,4,13,47,"value"],[13,9,13,52],[13,11,13,54],[14,2,13,59],[14,3,13,60],[14,4,13,61],[15,2,15,0],[15,6,15,6,"varuint"],[15,13,15,13],[15,16,15,16,"__importStar"],[15,28,15,28],[15,29,15,29,"require"],[15,40,15,36],[15,41,15,36,"_dependencyMap"],[15,55,15,36],[15,77,15,54],[15,78,15,55],[15,79,15,56],[16,2,16,0],[16,6,16,6,"tools"],[16,11,16,11],[16,14,16,14,"__importStar"],[16,26,16,26],[16,27,16,27,"require"],[16,38,16,34],[16,39,16,34,"_dependencyMap"],[16,53,16,34],[16,76,16,53],[16,77,16,54],[16,78,16,55],[17,2,17,0],[17,11,17,9,"decode"],[17,17,17,15,"decode"],[17,18,17,16,"keyVal"],[17,24,17,22],[17,26,17,24],[18,4,18,2],[18,8,19,4,"keyVal"],[18,14,19,10],[18,15,19,11,"key"],[18,18,19,14],[18,19,19,15],[18,20,19,16],[18,21,19,17],[18,26,19,22,"_$$_REQUIRE"],[18,37,19,22],[18,38,19,22,"_dependencyMap"],[18,52,19,22],[18,81,19,38,"OutputTypes"],[18,92,19,49],[18,93,19,50,"TAP_TREE"],[18,101,19,58],[18,105,20,4,"keyVal"],[18,111,20,10],[18,112,20,11,"key"],[18,115,20,14],[18,116,20,15,"length"],[18,122,20,21],[18,127,20,26],[18,128,20,27],[18,130,21,4],[19,6,22,4],[19,12,22,10],[19,16,22,14,"Error"],[19,21,22,19],[19,22,23,6],[19,74,23,58],[19,77,24,8,"tools"],[19,82,24,13],[19,83,24,14,"toHex"],[19,88,24,19],[19,89,24,20,"keyVal"],[19,95,24,26],[19,96,24,27,"key"],[19,99,24,30],[19,100,25,4],[19,101,25,5],[20,4,26,2],[21,4,27,2],[21,8,27,6,"_offset"],[21,15,27,13],[21,18,27,16],[21,19,27,17],[22,4,28,2],[22,8,28,8,"data"],[22,12,28,12],[22,15,28,15],[22,17,28,17],[23,4,29,2],[23,11,29,9,"_offset"],[23,18,29,16],[23,21,29,19,"keyVal"],[23,27,29,25],[23,28,29,26,"value"],[23,33,29,31],[23,34,29,32,"length"],[23,40,29,38],[23,42,29,40],[24,6,30,4],[24,10,30,10,"depth"],[24,15,30,15],[24,18,30,18,"keyVal"],[24,24,30,24],[24,25,30,25,"value"],[24,30,30,30],[24,31,30,31,"_offset"],[24,38,30,38],[24,40,30,40],[24,41,30,41],[25,6,31,4],[25,10,31,10,"leafVersion"],[25,21,31,21],[25,24,31,24,"keyVal"],[25,30,31,30],[25,31,31,31,"value"],[25,36,31,36],[25,37,31,37,"_offset"],[25,44,31,44],[25,46,31,46],[25,47,31,47],[26,6,32,4],[26,10,32,4,"_varuint$decode"],[26,25,32,4],[26,28,32,46,"varuint"],[26,35,32,53],[26,36,32,54,"decode"],[26,42,32,60],[26,43,33,6,"keyVal"],[26,49,33,12],[26,50,33,13,"value"],[26,55,33,18],[26,57,34,6,"_offset"],[26,64,35,4],[26,65,35,5],[27,8,32,25,"scriptLen"],[27,17,32,34],[27,20,32,34,"_varuint$decode"],[27,35,32,34],[27,36,32,12,"numberValue"],[27,47,32,23],[28,8,32,36,"bytes"],[28,13,32,41],[28,16,32,41,"_varuint$decode"],[28,31,32,41],[28,32,32,36,"bytes"],[28,37,32,41],[29,6,36,4,"_offset"],[29,13,36,11],[29,17,36,15,"bytes"],[29,22,36,20],[30,6,37,4,"data"],[30,10,37,8],[30,11,37,9,"push"],[30,15,37,13],[30,16,37,14],[31,8,38,6,"depth"],[31,13,38,11],[31,15,38,6,"depth"],[31,20,38,11],[32,8,39,6,"leafVersion"],[32,19,39,17],[32,21,39,6,"leafVersion"],[32,32,39,17],[33,8,40,6,"script"],[33,14,40,12],[33,16,40,14,"keyVal"],[33,22,40,20],[33,23,40,21,"value"],[33,28,40,26],[33,29,40,27,"slice"],[33,34,40,32],[33,35,40,33,"_offset"],[33,42,40,40],[33,44,40,42,"_offset"],[33,51,40,49],[33,54,40,52,"scriptLen"],[33,63,40,61],[34,6,41,4],[34,7,41,5],[34,8,41,6],[35,6,42,4,"_offset"],[35,13,42,11],[35,17,42,15,"scriptLen"],[35,26,42,24],[36,4,43,2],[37,4,44,2],[37,11,44,9],[38,6,44,11,"leaves"],[38,12,44,17],[38,14,44,19,"data"],[39,4,44,24],[39,5,44,25],[40,2,45,0],[41,2,46,0,"exports"],[41,9,46,7],[41,10,46,8,"decode"],[41,16,46,14],[41,19,46,17,"decode"],[41,25,46,23],[42,2,47,0],[42,11,47,9,"encode"],[42,17,47,15,"encode"],[42,18,47,16,"tree"],[42,22,47,20],[42,24,47,22],[43,4,47,22],[43,8,47,22,"_ref"],[43,12,47,22],[44,4,48,2],[44,8,48,8,"key"],[44,11,48,11],[44,14,48,14,"Uint8Array"],[44,24,48,24],[44,25,48,25,"from"],[44,29,48,29],[44,30,48,30],[44,31,48,31,"_$$_REQUIRE"],[44,42,48,31],[44,43,48,31,"_dependencyMap"],[44,57,48,31],[44,86,48,47,"OutputTypes"],[44,97,48,58],[44,98,48,59,"TAP_TREE"],[44,106,48,67],[44,107,48,68],[44,108,48,69],[45,4,49,2],[45,8,49,8,"bufs"],[45,12,49,12],[45,15,49,15],[45,16,49,15,"_ref"],[45,20,49,15],[45,25,49,17],[45,27,49,18,"concat"],[45,33,49,24],[45,34,49,24,"apply"],[45,39,49,24],[45,40,49,24,"_ref"],[45,44,49,24],[45,46,49,24,"_toConsumableArray"],[45,64,49,24],[45,65,50,7,"tree"],[45,69,50,11],[45,70,50,12,"leaves"],[45,76,50,18],[45,77,50,19,"map"],[45,80,50,22],[45,81,50,23],[45,91,50,23,"tapLeaf"],[45,98,50,30],[46,6,50,30],[46,13,50,34],[46,14,51,6,"Uint8Array"],[46,24,51,16],[46,25,51,17,"of"],[46,27,51,19],[46,28,51,20,"tapLeaf"],[46,35,51,27],[46,36,51,28,"depth"],[46,41,51,33],[46,43,51,35,"tapLeaf"],[46,50,51,42],[46,51,51,43,"leafVersion"],[46,62,51,54],[46,63,51,55],[46,65,52,6,"varuint"],[46,72,52,13],[46,73,52,14,"encode"],[46,79,52,20],[46,80,52,21,"BigInt"],[46,86,52,27],[46,87,52,28,"tapLeaf"],[46,94,52,35],[46,95,52,36,"script"],[46,101,52,42],[46,102,52,43,"length"],[46,108,52,49],[46,109,52,50],[46,110,52,51],[46,111,52,52,"buffer"],[46,117,52,58],[46,119,53,6,"tapLeaf"],[46,126,53,13],[46,127,53,14,"script"],[46,133,53,20],[46,134,54,5],[47,4,54,5],[47,6,54,6],[47,7,55,2],[47,8,55,3],[48,4,56,2],[48,11,56,9],[49,6,57,4,"key"],[49,9,57,7],[49,11,57,4,"key"],[49,14,57,7],[50,6,58,4,"value"],[50,11,58,9],[50,13,58,11,"tools"],[50,18,58,16],[50,19,58,17,"concat"],[50,25,58,23],[50,26,58,24,"bufs"],[50,30,58,28],[51,4,59,2],[51,5,59,3],[52,2,60,0],[53,2,61,0,"exports"],[53,9,61,7],[53,10,61,8,"encode"],[53,16,61,14],[53,19,61,17,"encode"],[53,25,61,23],[54,2,62,0,"exports"],[54,9,62,7],[54,10,62,8,"expected"],[54,18,62,16],[54,21,63,2],[54,96,63,77],[55,2,64,0],[55,11,64,9,"check"],[55,16,64,14,"check"],[55,17,64,15,"data"],[55,21,64,19],[55,23,64,21],[56,4,65,2],[56,11,66,4,"Array"],[56,16,66,9],[56,17,66,10,"isArray"],[56,24,66,17],[56,25,66,18,"data"],[56,29,66,22],[56,30,66,23,"leaves"],[56,36,66,29],[56,37,66,30],[56,41,67,4,"data"],[56,45,67,8],[56,46,67,9,"leaves"],[56,52,67,15],[56,53,67,16,"every"],[56,58,67,21],[56,59,68,6],[56,69,68,6,"tapLeaf"],[56,76,68,13],[57,6,68,13],[57,13,69,8,"tapLeaf"],[57,20,69,15],[57,21,69,16,"depth"],[57,26,69,21],[57,30,69,25],[57,31,69,26],[57,35,70,8,"tapLeaf"],[57,42,70,15],[57,43,70,16,"depth"],[57,48,70,21],[57,52,70,25],[57,55,70,28],[57,59,71,8],[57,60,71,9,"tapLeaf"],[57,67,71,16],[57,68,71,17,"leafVersion"],[57,79,71,28],[57,82,71,31],[57,86,71,35],[57,92,71,41,"tapLeaf"],[57,99,71,48],[57,100,71,49,"leafVersion"],[57,111,71,60],[57,115,72,8,"tapLeaf"],[57,122,72,15],[57,123,72,16,"script"],[57,129,72,22],[57,141,72,34,"Uint8Array"],[57,151,72,44],[58,4,72,44],[58,5,73,4],[58,6,73,5],[59,2,75,0],[60,2,76,0,"exports"],[60,9,76,7],[60,10,76,8,"check"],[60,15,76,13],[60,18,76,16,"check"],[60,23,76,21],[61,2,77,0],[61,11,77,9,"canAdd"],[61,17,77,15,"canAdd"],[61,18,77,16,"currentData"],[61,29,77,27],[61,31,77,29,"newData"],[61,38,77,36],[61,40,77,38],[62,4,78,2],[62,11,78,9],[62,12,78,10],[62,13,78,11,"currentData"],[62,24,78,22],[62,28,78,26],[62,29,78,27],[62,30,78,28,"newData"],[62,37,78,35],[62,41,78,39,"currentData"],[62,52,78,50],[62,53,78,51,"tapTree"],[62,60,78,58],[62,65,78,63,"undefined"],[62,74,78,72],[63,2,79,0],[64,2,80,0,"exports"],[64,9,80,7],[64,10,80,8,"canAdd"],[64,16,80,14],[64,19,80,17,"canAdd"],[64,25,80,23],[65,0,80,24],[65,3]],"functionMap":{"names":["<global>","<anonymous>","decode","encode","tree.leaves.map$argument_0","check","data.leaves.every$argument_0","canAdd"],"mappings":"AAA;ECG;GDQ;AEK;CF4B;AGE;uBCG;KDI;CHM;AKI;MCI;4CDI;CLG;AOE;CPE"}},"type":"js/module"}]}