{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":124,"column":0,"index":3624}}],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo="}},{"name":"randombytes","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":20,"index":97},"end":{"line":3,"column":42,"index":119}}],"key":"HRppB8l92kfLq10/yqHPiqGAuBY="}},{"name":"./wordlists/english.json","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":16,"index":214},"end":{"line":6,"column":51,"index":249}}],"key":"vE+e/NmMCfUhSRdJJOlTNhnwVg8="}},{"name":"./encoding","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":19,"index":270},"end":{"line":7,"column":40,"index":291}},{"start":{"line":7,"column":19,"index":270},"end":{"line":7,"column":40,"index":291}},{"start":{"line":7,"column":19,"index":270},"end":{"line":7,"column":40,"index":291}},{"start":{"line":7,"column":19,"index":270},"end":{"line":7,"column":40,"index":291}},{"start":{"line":7,"column":19,"index":270},"end":{"line":7,"column":40,"index":291}},{"start":{"line":7,"column":19,"index":270},"end":{"line":7,"column":40,"index":291}},{"start":{"line":7,"column":19,"index":270},"end":{"line":7,"column":40,"index":291}},{"start":{"line":7,"column":19,"index":270},"end":{"line":7,"column":40,"index":291}}],"key":"9LoYqopQb044WPJQWV/AiXM5u08="}},{"name":"pbkdf2","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":15,"index":179},"end":{"line":5,"column":32,"index":196}},{"start":{"line":5,"column":15,"index":179},"end":{"line":5,"column":32,"index":196}}],"key":"1/dbhwRh6o3OR9626P/2VdN0D7E="}},{"name":"create-hmac","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":19,"index":140},"end":{"line":4,"column":41,"index":162}}],"key":"Hb4O2fQ/eTYGCsl146rR3M0LxJk="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _asyncToGenerator = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  var INVALID_MNEMONIC_MESSAGE = 'Invalid Seed Version for mnemonic';\n  exports.PREFIXES = {\n    segwit: '100',\n    standard: '01',\n    '2fa': '101',\n    '2fa-segwit': '102'\n  };\n  var DEFAULTGENOPTS = {\n    prefix: exports.PREFIXES.segwit,\n    strength: 132,\n    rng: _$$_REQUIRE(_dependencyMap[1], \"randombytes\"),\n    wordlist: _$$_REQUIRE(_dependencyMap[2], \"./wordlists/english.json\")\n  };\n  function generateMnemonic(opts) {\n    var _Object$assign = Object.assign({}, DEFAULTGENOPTS, opts),\n      prefix = _Object$assign.prefix,\n      strength = _Object$assign.strength,\n      rng = _Object$assign.rng,\n      wordlist = _Object$assign.wordlist;\n    validatePrefixFormat(prefix);\n    if (prefix.length * 4 > strength / 2) throw new Error(`strength must be at least 2x of prefix bit count to ` + `lower endless loop probability.\\nprefix: ${prefix} ` + `(${prefix.length * 4} bits)\\nstrength: ${strength}`);\n    var wordBitLen = _$$_REQUIRE(_dependencyMap[3], \"./encoding\").bitlen(wordlist.length);\n    var wordCount = Math.ceil(strength / wordBitLen);\n    var byteCount = Math.ceil(wordCount * wordBitLen / 8);\n    var result = '';\n    do {\n      var bytes = rng(byteCount);\n      _$$_REQUIRE(_dependencyMap[3], \"./encoding\").maskBytes(bytes, strength);\n      result = _$$_REQUIRE(_dependencyMap[3], \"./encoding\").encode(bytes, wordlist);\n    } while (!prefixMatches(result, [prefix])[0]);\n    return result;\n  }\n  exports.generateMnemonic = generateMnemonic;\n  var DEFAULTOPTS = {\n    passphrase: '',\n    prefix: exports.PREFIXES.segwit,\n    skipCheck: false\n  };\n  function mnemonicToSeedSync(mnemonic, opts) {\n    var _Object$assign2 = Object.assign({}, DEFAULTOPTS, opts),\n      passphrase = _Object$assign2.passphrase,\n      prefix = _Object$assign2.prefix,\n      skipCheck = _Object$assign2.skipCheck;\n    validatePrefixFormat(prefix);\n    if (!skipCheck) checkPrefix(mnemonic, [prefix]);\n    return _$$_REQUIRE(_dependencyMap[4], \"pbkdf2\").pbkdf2Sync(_$$_REQUIRE(_dependencyMap[3], \"./encoding\").normalizeText(mnemonic), 'electrum' + _$$_REQUIRE(_dependencyMap[3], \"./encoding\").normalizeText(passphrase), 2048, 64, 'sha512');\n  }\n  exports.mnemonicToSeedSync = mnemonicToSeedSync;\n  function mnemonicToSeed(_x, _x2) {\n    return _mnemonicToSeed.apply(this, arguments);\n  }\n  function _mnemonicToSeed() {\n    _mnemonicToSeed = _asyncToGenerator(function* (mnemonic, opts) {\n      var _Object$assign3 = Object.assign({}, DEFAULTOPTS, opts),\n        passphrase = _Object$assign3.passphrase,\n        prefix = _Object$assign3.prefix,\n        skipCheck = _Object$assign3.skipCheck;\n      validatePrefixFormat(prefix);\n      if (!skipCheck) checkPrefix(mnemonic, [prefix]);\n      return new Promise(function (resolve, reject) {\n        _$$_REQUIRE(_dependencyMap[4], \"pbkdf2\").pbkdf2(_$$_REQUIRE(_dependencyMap[3], \"./encoding\").normalizeText(mnemonic), 'electrum' + _$$_REQUIRE(_dependencyMap[3], \"./encoding\").normalizeText(passphrase), 2048, 64, 'sha512', function (err, res) {\n          /* istanbul ignore next */\n          if (err) return reject(err);else return resolve(res);\n        });\n      });\n    });\n    return _mnemonicToSeed.apply(this, arguments);\n  }\n  exports.mnemonicToSeed = mnemonicToSeed;\n  function validateMnemonic(mnemonic, prefix) {\n    validatePrefixFormat(prefix);\n    try {\n      checkPrefix(mnemonic, [prefix]);\n      return true;\n    } catch (e) {\n      /* istanbul ignore else  */\n      if (e.message === INVALID_MNEMONIC_MESSAGE) {\n        return false;\n      }\n      /* istanbul ignore next */\n      throw e;\n    }\n  }\n  exports.validateMnemonic = validateMnemonic;\n  function matchesAnyPrefix(mnemonic, validPrefixes) {\n    return prefixMatches(mnemonic, validPrefixes).some(function (v) {\n      return v;\n    });\n  }\n  function validatePrefixFormat(prefix) {\n    if (!prefix.match(/^[0-9a-f]+$/) || prefix.length > 128) throw new Error('prefix must be a hex string');\n  }\n  function checkPrefix(mn, validPrefixes) {\n    if (!matchesAnyPrefix(mn, validPrefixes)) throw new Error(INVALID_MNEMONIC_MESSAGE);\n  }\n  function prefixMatches(phrase, prefixes) {\n    var hmac = _$$_REQUIRE(_dependencyMap[5], \"create-hmac\")('sha512', 'Seed version');\n    hmac.update(_$$_REQUIRE(_dependencyMap[3], \"./encoding\").normalizeText(phrase));\n    var hx = hmac.digest('hex');\n    return prefixes.map(function (prefix) {\n      return hx.startsWith(prefix.toLowerCase());\n    });\n  }\n});","lineCount":111,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_asyncToGenerator"],[4,23,1,13],[4,26,1,13,"_$$_REQUIRE"],[4,37,1,13],[4,38,1,13,"_dependencyMap"],[4,52,1,13],[5,2,2,0,"Object"],[5,8,2,6],[5,9,2,7,"defineProperty"],[5,23,2,21],[5,24,2,22,"exports"],[5,31,2,29],[5,33,2,31],[5,45,2,43],[5,47,2,45],[6,4,2,47,"value"],[6,9,2,52],[6,11,2,54],[7,2,2,59],[7,3,2,60],[7,4,2,61],[8,2,8,0],[8,6,8,6,"INVALID_MNEMONIC_MESSAGE"],[8,30,8,30],[8,33,8,33],[8,68,8,68],[9,2,9,0,"exports"],[9,9,9,7],[9,10,9,8,"PREFIXES"],[9,18,9,16],[9,21,9,19],[10,4,10,2,"segwit"],[10,10,10,8],[10,12,10,10],[10,17,10,15],[11,4,11,2,"standard"],[11,12,11,10],[11,14,11,12],[11,18,11,16],[12,4,12,2],[12,9,12,7],[12,11,12,9],[12,16,12,14],[13,4,13,2],[13,16,13,14],[13,18,13,16],[14,2,14,0],[14,3,14,1],[15,2,15,0],[15,6,15,6,"DEFAULTGENOPTS"],[15,20,15,20],[15,23,15,23],[16,4,16,2,"prefix"],[16,10,16,8],[16,12,16,10,"exports"],[16,19,16,17],[16,20,16,18,"PREFIXES"],[16,28,16,26],[16,29,16,27,"segwit"],[16,35,16,33],[17,4,17,2,"strength"],[17,12,17,10],[17,14,17,12],[17,17,17,15],[18,4,18,2,"rng"],[18,7,18,5],[18,9,18,5,"_$$_REQUIRE"],[18,20,18,5],[18,21,18,5,"_dependencyMap"],[18,35,18,5],[18,54,18,18],[19,4,19,2,"wordlist"],[19,12,19,10],[19,14,19,10,"_$$_REQUIRE"],[19,25,19,10],[19,26,19,10,"_dependencyMap"],[19,40,19,10],[20,2,20,0],[20,3,20,1],[21,2,21,0],[21,11,21,9,"generateMnemonic"],[21,27,21,25,"generateMnemonic"],[21,28,21,26,"opts"],[21,32,21,30],[21,34,21,32],[22,4,22,2],[22,8,22,2,"_Object$assign"],[22,22,22,2],[22,25,22,46,"Object"],[22,31,22,52],[22,32,22,53,"assign"],[22,38,22,59],[22,39,23,4],[22,40,23,5],[22,41,23,6],[22,43,24,4,"DEFAULTGENOPTS"],[22,57,24,18],[22,59,25,4,"opts"],[22,63,26,2],[22,64,26,3],[23,6,22,10,"prefix"],[23,12,22,16],[23,15,22,16,"_Object$assign"],[23,29,22,16],[23,30,22,10,"prefix"],[23,36,22,16],[24,6,22,18,"strength"],[24,14,22,26],[24,17,22,26,"_Object$assign"],[24,31,22,26],[24,32,22,18,"strength"],[24,40,22,26],[25,6,22,28,"rng"],[25,9,22,31],[25,12,22,31,"_Object$assign"],[25,26,22,31],[25,27,22,28,"rng"],[25,30,22,31],[26,6,22,33,"wordlist"],[26,14,22,41],[26,17,22,41,"_Object$assign"],[26,31,22,41],[26,32,22,33,"wordlist"],[26,40,22,41],[27,4,27,2,"validatePrefixFormat"],[27,24,27,22],[27,25,27,23,"prefix"],[27,31,27,29],[27,32,27,30],[28,4,28,2],[28,8,28,6,"prefix"],[28,14,28,12],[28,15,28,13,"length"],[28,21,28,19],[28,24,28,22],[28,25,28,23],[28,28,28,26,"strength"],[28,36,28,34],[28,39,28,37],[28,40,28,38],[28,42,29,4],[28,48,29,10],[28,52,29,14,"Error"],[28,57,29,19],[28,58,30,6],[28,112,30,60],[28,115,31,8],[28,159,31,52,"prefix"],[28,165,31,58],[28,168,31,61],[28,171,32,8],[28,175,32,12,"prefix"],[28,181,32,18],[28,182,32,19,"length"],[28,188,32,25],[28,191,32,28],[28,192,32,29],[28,213,32,50,"strength"],[28,221,32,58],[28,223,33,4],[28,224,33,5],[29,4,34,2],[29,8,34,8,"wordBitLen"],[29,18,34,18],[29,21,34,21,"_$$_REQUIRE"],[29,32,34,21],[29,33,34,21,"_dependencyMap"],[29,47,34,21],[29,66,34,32,"bitlen"],[29,72,34,38],[29,73,34,39,"wordlist"],[29,81,34,47],[29,82,34,48,"length"],[29,88,34,54],[29,89,34,55],[30,4,35,2],[30,8,35,8,"wordCount"],[30,17,35,17],[30,20,35,20,"Math"],[30,24,35,24],[30,25,35,25,"ceil"],[30,29,35,29],[30,30,35,30,"strength"],[30,38,35,38],[30,41,35,41,"wordBitLen"],[30,51,35,51],[30,52,35,52],[31,4,36,2],[31,8,36,8,"byteCount"],[31,17,36,17],[31,20,36,20,"Math"],[31,24,36,24],[31,25,36,25,"ceil"],[31,29,36,29],[31,30,36,31,"wordCount"],[31,39,36,40],[31,42,36,43,"wordBitLen"],[31,52,36,53],[31,55,36,57],[31,56,36,58],[31,57,36,59],[32,4,37,2],[32,8,37,6,"result"],[32,14,37,12],[32,17,37,15],[32,19,37,17],[33,4,38,2],[33,7,38,5],[34,6,39,4],[34,10,39,10,"bytes"],[34,15,39,15],[34,18,39,18,"rng"],[34,21,39,21],[34,22,39,22,"byteCount"],[34,31,39,31],[34,32,39,32],[35,6,40,4,"_$$_REQUIRE"],[35,17,40,4],[35,18,40,4,"_dependencyMap"],[35,32,40,4],[35,51,40,15,"maskBytes"],[35,60,40,24],[35,61,40,25,"bytes"],[35,66,40,30],[35,68,40,32,"strength"],[35,76,40,40],[35,77,40,41],[36,6,41,4,"result"],[36,12,41,10],[36,15,41,13,"_$$_REQUIRE"],[36,26,41,13],[36,27,41,13,"_dependencyMap"],[36,41,41,13],[36,60,41,24,"encode"],[36,66,41,30],[36,67,41,31,"bytes"],[36,72,41,36],[36,74,41,38,"wordlist"],[36,82,41,46],[36,83,41,47],[37,4,42,2],[37,5,42,3],[37,13,42,11],[37,14,42,12,"prefixMatches"],[37,27,42,25],[37,28,42,26,"result"],[37,34,42,32],[37,36,42,34],[37,37,42,35,"prefix"],[37,43,42,41],[37,44,42,42],[37,45,42,43],[37,46,42,44],[37,47,42,45],[37,48,42,46],[38,4,43,2],[38,11,43,9,"result"],[38,17,43,15],[39,2,44,0],[40,2,45,0,"exports"],[40,9,45,7],[40,10,45,8,"generateMnemonic"],[40,26,45,24],[40,29,45,27,"generateMnemonic"],[40,45,45,43],[41,2,46,0],[41,6,46,6,"DEFAULTOPTS"],[41,17,46,17],[41,20,46,20],[42,4,47,2,"passphrase"],[42,14,47,12],[42,16,47,14],[42,18,47,16],[43,4,48,2,"prefix"],[43,10,48,8],[43,12,48,10,"exports"],[43,19,48,17],[43,20,48,18,"PREFIXES"],[43,28,48,26],[43,29,48,27,"segwit"],[43,35,48,33],[44,4,49,2,"skipCheck"],[44,13,49,11],[44,15,49,13],[45,2,50,0],[45,3,50,1],[46,2,51,0],[46,11,51,9,"mnemonicToSeedSync"],[46,29,51,27,"mnemonicToSeedSync"],[46,30,51,28,"mnemonic"],[46,38,51,36],[46,40,51,38,"opts"],[46,44,51,42],[46,46,51,44],[47,4,52,2],[47,8,52,2,"_Object$assign2"],[47,23,52,2],[47,26,52,44,"Object"],[47,32,52,50],[47,33,52,51,"assign"],[47,39,52,57],[47,40,53,4],[47,41,53,5],[47,42,53,6],[47,44,54,4,"DEFAULTOPTS"],[47,55,54,15],[47,57,55,4,"opts"],[47,61,56,2],[47,62,56,3],[48,6,52,10,"passphrase"],[48,16,52,20],[48,19,52,20,"_Object$assign2"],[48,34,52,20],[48,35,52,10,"passphrase"],[48,45,52,20],[49,6,52,22,"prefix"],[49,12,52,28],[49,15,52,28,"_Object$assign2"],[49,30,52,28],[49,31,52,22,"prefix"],[49,37,52,28],[50,6,52,30,"skipCheck"],[50,15,52,39],[50,18,52,39,"_Object$assign2"],[50,33,52,39],[50,34,52,30,"skipCheck"],[50,43,52,39],[51,4,57,2,"validatePrefixFormat"],[51,24,57,22],[51,25,57,23,"prefix"],[51,31,57,29],[51,32,57,30],[52,4,58,2],[52,8,58,6],[52,9,58,7,"skipCheck"],[52,18,58,16],[52,20,58,18,"checkPrefix"],[52,31,58,29],[52,32,58,30,"mnemonic"],[52,40,58,38],[52,42,58,40],[52,43,58,41,"prefix"],[52,49,58,47],[52,50,58,48],[52,51,58,49],[53,4,59,2],[53,11,59,9,"_$$_REQUIRE"],[53,22,59,9],[53,23,59,9,"_dependencyMap"],[53,37,59,9],[53,52,59,16,"pbkdf2Sync"],[53,62,59,26],[53,63,60,4,"_$$_REQUIRE"],[53,74,60,4],[53,75,60,4,"_dependencyMap"],[53,89,60,4],[53,108,60,15,"normalizeText"],[53,121,60,28],[53,122,60,29,"mnemonic"],[53,130,60,37],[53,131,60,38],[53,133,61,4],[53,143,61,14],[53,146,61,17,"_$$_REQUIRE"],[53,157,61,17],[53,158,61,17,"_dependencyMap"],[53,172,61,17],[53,191,61,28,"normalizeText"],[53,204,61,41],[53,205,61,42,"passphrase"],[53,215,61,52],[53,216,61,53],[53,218,62,4],[53,222,62,8],[53,224,63,4],[53,226,63,6],[53,228,64,4],[53,236,65,2],[53,237,65,3],[54,2,66,0],[55,2,67,0,"exports"],[55,9,67,7],[55,10,67,8,"mnemonicToSeedSync"],[55,28,67,26],[55,31,67,29,"mnemonicToSeedSync"],[55,49,67,47],[56,2,67,48],[56,11,68,15,"mnemonicToSeed"],[56,25,68,29,"mnemonicToSeed"],[56,26,68,29,"_x"],[56,28,68,29],[56,30,68,29,"_x2"],[56,33,68,29],[57,4,68,29],[57,11,68,29,"_mnemonicToSeed"],[57,26,68,29],[57,27,68,29,"apply"],[57,32,68,29],[57,39,68,29,"arguments"],[57,48,68,29],[58,2,68,29],[59,2,68,29],[59,11,68,29,"_mnemonicToSeed"],[59,27,68,29],[60,4,68,29,"_mnemonicToSeed"],[60,19,68,29],[60,22,68,29,"_asyncToGenerator"],[60,39,68,29],[60,40,68,0],[60,51,68,30,"mnemonic"],[60,59,68,38],[60,61,68,40,"opts"],[60,65,68,44],[60,67,68,46],[61,6,69,2],[61,10,69,2,"_Object$assign3"],[61,25,69,2],[61,28,69,44,"Object"],[61,34,69,50],[61,35,69,51,"assign"],[61,41,69,57],[61,42,70,4],[61,43,70,5],[61,44,70,6],[61,46,71,4,"DEFAULTOPTS"],[61,57,71,15],[61,59,72,4,"opts"],[61,63,73,2],[61,64,73,3],[62,8,69,10,"passphrase"],[62,18,69,20],[62,21,69,20,"_Object$assign3"],[62,36,69,20],[62,37,69,10,"passphrase"],[62,47,69,20],[63,8,69,22,"prefix"],[63,14,69,28],[63,17,69,28,"_Object$assign3"],[63,32,69,28],[63,33,69,22,"prefix"],[63,39,69,28],[64,8,69,30,"skipCheck"],[64,17,69,39],[64,20,69,39,"_Object$assign3"],[64,35,69,39],[64,36,69,30,"skipCheck"],[64,45,69,39],[65,6,74,2,"validatePrefixFormat"],[65,26,74,22],[65,27,74,23,"prefix"],[65,33,74,29],[65,34,74,30],[66,6,75,2],[66,10,75,6],[66,11,75,7,"skipCheck"],[66,20,75,16],[66,22,75,18,"checkPrefix"],[66,33,75,29],[66,34,75,30,"mnemonic"],[66,42,75,38],[66,44,75,40],[66,45,75,41,"prefix"],[66,51,75,47],[66,52,75,48],[66,53,75,49],[67,6,76,2],[67,13,76,9],[67,17,76,13,"Promise"],[67,24,76,20],[67,25,76,21],[67,35,76,22,"resolve"],[67,42,76,29],[67,44,76,31,"reject"],[67,50,76,37],[67,52,76,42],[68,8,77,4,"_$$_REQUIRE"],[68,19,77,4],[68,20,77,4,"_dependencyMap"],[68,34,77,4],[68,49,77,11,"pbkdf2"],[68,55,77,17],[68,56,78,6,"_$$_REQUIRE"],[68,67,78,6],[68,68,78,6,"_dependencyMap"],[68,82,78,6],[68,101,78,17,"normalizeText"],[68,114,78,30],[68,115,78,31,"mnemonic"],[68,123,78,39],[68,124,78,40],[68,126,79,6],[68,136,79,16],[68,139,79,19,"_$$_REQUIRE"],[68,150,79,19],[68,151,79,19,"_dependencyMap"],[68,165,79,19],[68,184,79,30,"normalizeText"],[68,197,79,43],[68,198,79,44,"passphrase"],[68,208,79,54],[68,209,79,55],[68,211,80,6],[68,215,80,10],[68,217,81,6],[68,219,81,8],[68,221,82,6],[68,229,82,14],[68,231,83,6],[68,241,83,7,"err"],[68,244,83,10],[68,246,83,12,"res"],[68,249,83,15],[68,251,83,20],[69,10,84,8],[70,10,85,8],[70,14,85,12,"err"],[70,17,85,15],[70,19,85,17],[70,26,85,24,"reject"],[70,32,85,30],[70,33,85,31,"err"],[70,36,85,34],[70,37,85,35],[70,38,85,36],[70,43,86,13],[70,50,86,20,"resolve"],[70,57,86,27],[70,58,86,28,"res"],[70,61,86,31],[70,62,86,32],[71,8,87,6],[71,9,88,4],[71,10,88,5],[72,6,89,2],[72,7,89,3],[72,8,89,4],[73,4,90,0],[73,5,90,1],[74,4,90,1],[74,11,90,1,"_mnemonicToSeed"],[74,26,90,1],[74,27,90,1,"apply"],[74,32,90,1],[74,39,90,1,"arguments"],[74,48,90,1],[75,2,90,1],[76,2,91,0,"exports"],[76,9,91,7],[76,10,91,8,"mnemonicToSeed"],[76,24,91,22],[76,27,91,25,"mnemonicToSeed"],[76,41,91,39],[77,2,92,0],[77,11,92,9,"validateMnemonic"],[77,27,92,25,"validateMnemonic"],[77,28,92,26,"mnemonic"],[77,36,92,34],[77,38,92,36,"prefix"],[77,44,92,42],[77,46,92,44],[78,4,93,2,"validatePrefixFormat"],[78,24,93,22],[78,25,93,23,"prefix"],[78,31,93,29],[78,32,93,30],[79,4,94,2],[79,8,94,6],[80,6,95,4,"checkPrefix"],[80,17,95,15],[80,18,95,16,"mnemonic"],[80,26,95,24],[80,28,95,26],[80,29,95,27,"prefix"],[80,35,95,33],[80,36,95,34],[80,37,95,35],[81,6,96,4],[81,13,96,11],[81,17,96,15],[82,4,97,2],[82,5,97,3],[82,6,97,4],[82,13,97,11,"e"],[82,14,97,12],[82,16,97,14],[83,6,98,4],[84,6,99,4],[84,10,99,8,"e"],[84,11,99,9],[84,12,99,10,"message"],[84,19,99,17],[84,24,99,22,"INVALID_MNEMONIC_MESSAGE"],[84,48,99,46],[84,50,99,48],[85,8,100,6],[85,15,100,13],[85,20,100,18],[86,6,101,4],[87,6,102,4],[88,6,103,4],[88,12,103,10,"e"],[88,13,103,11],[89,4,104,2],[90,2,105,0],[91,2,106,0,"exports"],[91,9,106,7],[91,10,106,8,"validateMnemonic"],[91,26,106,24],[91,29,106,27,"validateMnemonic"],[91,45,106,43],[92,2,107,0],[92,11,107,9,"matchesAnyPrefix"],[92,27,107,25,"matchesAnyPrefix"],[92,28,107,26,"mnemonic"],[92,36,107,34],[92,38,107,36,"validPrefixes"],[92,51,107,49],[92,53,107,51],[93,4,108,2],[93,11,108,9,"prefixMatches"],[93,24,108,22],[93,25,108,23,"mnemonic"],[93,33,108,31],[93,35,108,33,"validPrefixes"],[93,48,108,46],[93,49,108,47],[93,50,108,48,"some"],[93,54,108,52],[93,55,108,53],[93,65,108,54,"v"],[93,66,108,55],[94,6,108,55],[94,13,108,60,"v"],[94,14,108,61],[95,4,108,61],[95,6,108,62],[96,2,109,0],[97,2,110,0],[97,11,110,9,"validatePrefixFormat"],[97,31,110,29,"validatePrefixFormat"],[97,32,110,30,"prefix"],[97,38,110,36],[97,40,110,38],[98,4,111,2],[98,8,111,6],[98,9,111,7,"prefix"],[98,15,111,13],[98,16,111,14,"match"],[98,21,111,19],[98,22,111,20],[98,35,111,33],[98,36,111,34],[98,40,111,38,"prefix"],[98,46,111,44],[98,47,111,45,"length"],[98,53,111,51],[98,56,111,54],[98,59,111,57],[98,61,112,4],[98,67,112,10],[98,71,112,14,"Error"],[98,76,112,19],[98,77,112,20],[98,106,112,49],[98,107,112,50],[99,2,113,0],[100,2,114,0],[100,11,114,9,"checkPrefix"],[100,22,114,20,"checkPrefix"],[100,23,114,21,"mn"],[100,25,114,23],[100,27,114,25,"validPrefixes"],[100,40,114,38],[100,42,114,40],[101,4,115,2],[101,8,115,6],[101,9,115,7,"matchesAnyPrefix"],[101,25,115,23],[101,26,115,24,"mn"],[101,28,115,26],[101,30,115,28,"validPrefixes"],[101,43,115,41],[101,44,115,42],[101,46,116,4],[101,52,116,10],[101,56,116,14,"Error"],[101,61,116,19],[101,62,116,20,"INVALID_MNEMONIC_MESSAGE"],[101,86,116,44],[101,87,116,45],[102,2,117,0],[103,2,118,0],[103,11,118,9,"prefixMatches"],[103,24,118,22,"prefixMatches"],[103,25,118,23,"phrase"],[103,31,118,29],[103,33,118,31,"prefixes"],[103,41,118,39],[103,43,118,41],[104,4,119,2],[104,8,119,8,"hmac"],[104,12,119,12],[104,15,119,15,"_$$_REQUIRE"],[104,26,119,15],[104,27,119,15,"_dependencyMap"],[104,41,119,15],[104,61,119,26],[104,69,119,34],[104,71,119,36],[104,85,119,50],[104,86,119,51],[105,4,120,2,"hmac"],[105,8,120,6],[105,9,120,7,"update"],[105,15,120,13],[105,16,120,14,"_$$_REQUIRE"],[105,27,120,14],[105,28,120,14,"_dependencyMap"],[105,42,120,14],[105,61,120,25,"normalizeText"],[105,74,120,38],[105,75,120,39,"phrase"],[105,81,120,45],[105,82,120,46],[105,83,120,47],[106,4,121,2],[106,8,121,8,"hx"],[106,10,121,10],[106,13,121,13,"hmac"],[106,17,121,17],[106,18,121,18,"digest"],[106,24,121,24],[106,25,121,25],[106,30,121,30],[106,31,121,31],[107,4,122,2],[107,11,122,9,"prefixes"],[107,19,122,17],[107,20,122,18,"map"],[107,23,122,21],[107,24,122,22],[107,34,122,23,"prefix"],[107,40,122,29],[108,6,122,29],[108,13,122,34,"hx"],[108,15,122,36],[108,16,122,37,"startsWith"],[108,26,122,47],[108,27,122,48,"prefix"],[108,33,122,54],[108,34,122,55,"toLowerCase"],[108,45,122,66],[108,46,122,67],[108,47,122,68],[108,48,122,69],[109,4,122,69],[109,6,122,70],[110,2,123,0],[111,0,123,1],[111,3]],"functionMap":{"names":["<global>","generateMnemonic","mnemonicToSeedSync","mnemonicToSeed","Promise$argument_0","pbkdf2.pbkdf2$argument_5","validateMnemonic","matchesAnyPrefix","prefixMatches.some$argument_0","validatePrefixFormat","checkPrefix","prefixMatches","prefixes.map$argument_0"],"mappings":"AAA;ACoB;CDuB;AEO;CFe;AGE;qBCQ;MCO;ODI;GDE;CHC;AME;CNa;AOE;qDCC,QD;CPC;ASC;CTG;AUC;CVG;AWC;sBCI,+CD;CXC"}},"type":"js/module"}]}