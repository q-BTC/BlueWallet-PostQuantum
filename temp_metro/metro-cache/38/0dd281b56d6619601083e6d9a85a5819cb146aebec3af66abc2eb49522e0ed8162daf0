{"dependencies":[{"name":"../parser","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":17,"index":94},"end":{"line":3,"column":37,"index":114}},{"start":{"line":3,"column":17,"index":94},"end":{"line":3,"column":37,"index":114}},{"start":{"line":3,"column":17,"index":94},"end":{"line":3,"column":37,"index":114}}],"key":"c2lLFDkhdqEOCRO0VYshrneVdj4="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function combine(psbts) {\n    var self = psbts[0];\n    var selfKeyVals = _$$_REQUIRE(_dependencyMap[0], \"../parser\").psbtToKeyVals(self);\n    var others = psbts.slice(1);\n    if (others.length === 0) throw new Error('Combine: Nothing to combine');\n    var selfTx = getTx(self);\n    if (selfTx === undefined) {\n      throw new Error('Combine: Self missing transaction');\n    }\n    var selfGlobalSet = getKeySet(selfKeyVals.globalKeyVals);\n    var selfInputSets = selfKeyVals.inputKeyVals.map(getKeySet);\n    var selfOutputSets = selfKeyVals.outputKeyVals.map(getKeySet);\n    var _loop = function _loop() {\n      var otherTx = getTx(other);\n      if (otherTx === undefined || !otherTx.toBuffer().equals(selfTx.toBuffer())) {\n        throw new Error('Combine: One of the Psbts does not have the same transaction.');\n      }\n      var otherKeyVals = _$$_REQUIRE(_dependencyMap[0], \"../parser\").psbtToKeyVals(other);\n      var otherGlobalSet = getKeySet(otherKeyVals.globalKeyVals);\n      otherGlobalSet.forEach(keyPusher(selfGlobalSet, selfKeyVals.globalKeyVals, otherKeyVals.globalKeyVals));\n      var otherInputSets = otherKeyVals.inputKeyVals.map(getKeySet);\n      otherInputSets.forEach(function (inputSet, idx) {\n        return inputSet.forEach(keyPusher(selfInputSets[idx], selfKeyVals.inputKeyVals[idx], otherKeyVals.inputKeyVals[idx]));\n      });\n      var otherOutputSets = otherKeyVals.outputKeyVals.map(getKeySet);\n      otherOutputSets.forEach(function (outputSet, idx) {\n        return outputSet.forEach(keyPusher(selfOutputSets[idx], selfKeyVals.outputKeyVals[idx], otherKeyVals.outputKeyVals[idx]));\n      });\n    };\n    for (var other of others) {\n      _loop();\n    }\n    return _$$_REQUIRE(_dependencyMap[0], \"../parser\").psbtFromKeyVals(selfTx, {\n      globalMapKeyVals: selfKeyVals.globalKeyVals,\n      inputKeyVals: selfKeyVals.inputKeyVals,\n      outputKeyVals: selfKeyVals.outputKeyVals\n    });\n  }\n  exports.combine = combine;\n  function keyPusher(selfSet, selfKeyVals, otherKeyVals) {\n    return function (key) {\n      if (selfSet.has(key)) return;\n      var newKv = otherKeyVals.filter(function (kv) {\n        return kv.key.toString('hex') === key;\n      })[0];\n      selfKeyVals.push(newKv);\n      selfSet.add(key);\n    };\n  }\n  function getTx(psbt) {\n    return psbt.globalMap.unsignedTx;\n  }\n  function getKeySet(keyVals) {\n    var set = new Set();\n    keyVals.forEach(function (keyVal) {\n      var hex = keyVal.key.toString('hex');\n      if (set.has(hex)) throw new Error('Combine: KeyValue Map keys should be unique');\n      set.add(hex);\n    });\n    return set;\n  }\n});","lineCount":68,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,4,0],[7,11,4,9,"combine"],[7,18,4,16,"combine"],[7,19,4,17,"psbts"],[7,24,4,22],[7,26,4,24],[8,4,5,2],[8,8,5,8,"self"],[8,12,5,12],[8,15,5,15,"psbts"],[8,20,5,20],[8,21,5,21],[8,22,5,22],[8,23,5,23],[9,4,6,2],[9,8,6,8,"selfKeyVals"],[9,19,6,19],[9,22,6,22,"_$$_REQUIRE"],[9,33,6,22],[9,34,6,22,"_dependencyMap"],[9,48,6,22],[9,66,6,31,"psbtToKeyVals"],[9,79,6,44],[9,80,6,45,"self"],[9,84,6,49],[9,85,6,50],[10,4,7,2],[10,8,7,8,"others"],[10,14,7,14],[10,17,7,17,"psbts"],[10,22,7,22],[10,23,7,23,"slice"],[10,28,7,28],[10,29,7,29],[10,30,7,30],[10,31,7,31],[11,4,8,2],[11,8,8,6,"others"],[11,14,8,12],[11,15,8,13,"length"],[11,21,8,19],[11,26,8,24],[11,27,8,25],[11,29,8,27],[11,35,8,33],[11,39,8,37,"Error"],[11,44,8,42],[11,45,8,43],[11,74,8,72],[11,75,8,73],[12,4,9,2],[12,8,9,8,"selfTx"],[12,14,9,14],[12,17,9,17,"getTx"],[12,22,9,22],[12,23,9,23,"self"],[12,27,9,27],[12,28,9,28],[13,4,10,2],[13,8,10,6,"selfTx"],[13,14,10,12],[13,19,10,17,"undefined"],[13,28,10,26],[13,30,10,28],[14,6,11,4],[14,12,11,10],[14,16,11,14,"Error"],[14,21,11,19],[14,22,11,20],[14,57,11,55],[14,58,11,56],[15,4,12,2],[16,4,13,2],[16,8,13,8,"selfGlobalSet"],[16,21,13,21],[16,24,13,24,"getKeySet"],[16,33,13,33],[16,34,13,34,"selfKeyVals"],[16,45,13,45],[16,46,13,46,"globalKeyVals"],[16,59,13,59],[16,60,13,60],[17,4,14,2],[17,8,14,8,"selfInputSets"],[17,21,14,21],[17,24,14,24,"selfKeyVals"],[17,35,14,35],[17,36,14,36,"inputKeyVals"],[17,48,14,48],[17,49,14,49,"map"],[17,52,14,52],[17,53,14,53,"getKeySet"],[17,62,14,62],[17,63,14,63],[18,4,15,2],[18,8,15,8,"selfOutputSets"],[18,22,15,22],[18,25,15,25,"selfKeyVals"],[18,36,15,36],[18,37,15,37,"outputKeyVals"],[18,50,15,50],[18,51,15,51,"map"],[18,54,15,54],[18,55,15,55,"getKeySet"],[18,64,15,64],[18,65,15,65],[19,4,15,66],[19,8,15,66,"_loop"],[19,13,15,66],[19,25,15,66,"_loop"],[19,31,15,66],[19,33,16,30],[20,6,17,4],[20,10,17,10,"otherTx"],[20,17,17,17],[20,20,17,20,"getTx"],[20,25,17,25],[20,26,17,26,"other"],[20,31,17,31],[20,32,17,32],[21,6,18,4],[21,10,19,6,"otherTx"],[21,17,19,13],[21,22,19,18,"undefined"],[21,31,19,27],[21,35,20,6],[21,36,20,7,"otherTx"],[21,43,20,14],[21,44,20,15,"toBuffer"],[21,52,20,23],[21,53,20,24],[21,54,20,25],[21,55,20,26,"equals"],[21,61,20,32],[21,62,20,33,"selfTx"],[21,68,20,39],[21,69,20,40,"toBuffer"],[21,77,20,48],[21,78,20,49],[21,79,20,50],[21,80,20,51],[21,82,21,6],[22,8,22,6],[22,14,22,12],[22,18,22,16,"Error"],[22,23,22,21],[22,24,23,8],[22,87,24,6],[22,88,24,7],[23,6,25,4],[24,6,26,4],[24,10,26,10,"otherKeyVals"],[24,22,26,22],[24,25,26,25,"_$$_REQUIRE"],[24,36,26,25],[24,37,26,25,"_dependencyMap"],[24,51,26,25],[24,69,26,34,"psbtToKeyVals"],[24,82,26,47],[24,83,26,48,"other"],[24,88,26,53],[24,89,26,54],[25,6,27,4],[25,10,27,10,"otherGlobalSet"],[25,24,27,24],[25,27,27,27,"getKeySet"],[25,36,27,36],[25,37,27,37,"otherKeyVals"],[25,49,27,49],[25,50,27,50,"globalKeyVals"],[25,63,27,63],[25,64,27,64],[26,6,28,4,"otherGlobalSet"],[26,20,28,18],[26,21,28,19,"forEach"],[26,28,28,26],[26,29,29,6,"keyPusher"],[26,38,29,15],[26,39,30,8,"selfGlobalSet"],[26,52,30,21],[26,54,31,8,"selfKeyVals"],[26,65,31,19],[26,66,31,20,"globalKeyVals"],[26,79,31,33],[26,81,32,8,"otherKeyVals"],[26,93,32,20],[26,94,32,21,"globalKeyVals"],[26,107,33,6],[26,108,34,4],[26,109,34,5],[27,6,35,4],[27,10,35,10,"otherInputSets"],[27,24,35,24],[27,27,35,27,"otherKeyVals"],[27,39,35,39],[27,40,35,40,"inputKeyVals"],[27,52,35,52],[27,53,35,53,"map"],[27,56,35,56],[27,57,35,57,"getKeySet"],[27,66,35,66],[27,67,35,67],[28,6,36,4,"otherInputSets"],[28,20,36,18],[28,21,36,19,"forEach"],[28,28,36,26],[28,29,36,27],[28,39,36,28,"inputSet"],[28,47,36,36],[28,49,36,38,"idx"],[28,52,36,41],[29,8,36,41],[29,15,37,6,"inputSet"],[29,23,37,14],[29,24,37,15,"forEach"],[29,31,37,22],[29,32,38,8,"keyPusher"],[29,41,38,17],[29,42,39,10,"selfInputSets"],[29,55,39,23],[29,56,39,24,"idx"],[29,59,39,27],[29,60,39,28],[29,62,40,10,"selfKeyVals"],[29,73,40,21],[29,74,40,22,"inputKeyVals"],[29,86,40,34],[29,87,40,35,"idx"],[29,90,40,38],[29,91,40,39],[29,93,41,10,"otherKeyVals"],[29,105,41,22],[29,106,41,23,"inputKeyVals"],[29,118,41,35],[29,119,41,36,"idx"],[29,122,41,39],[29,123,42,8],[29,124,43,6],[29,125,43,7],[30,6,43,7],[30,7,44,4],[30,8,44,5],[31,6,45,4],[31,10,45,10,"otherOutputSets"],[31,25,45,25],[31,28,45,28,"otherKeyVals"],[31,40,45,40],[31,41,45,41,"outputKeyVals"],[31,54,45,54],[31,55,45,55,"map"],[31,58,45,58],[31,59,45,59,"getKeySet"],[31,68,45,68],[31,69,45,69],[32,6,46,4,"otherOutputSets"],[32,21,46,19],[32,22,46,20,"forEach"],[32,29,46,27],[32,30,46,28],[32,40,46,29,"outputSet"],[32,49,46,38],[32,51,46,40,"idx"],[32,54,46,43],[33,8,46,43],[33,15,47,6,"outputSet"],[33,24,47,15],[33,25,47,16,"forEach"],[33,32,47,23],[33,33,48,8,"keyPusher"],[33,42,48,17],[33,43,49,10,"selfOutputSets"],[33,57,49,24],[33,58,49,25,"idx"],[33,61,49,28],[33,62,49,29],[33,64,50,10,"selfKeyVals"],[33,75,50,21],[33,76,50,22,"outputKeyVals"],[33,89,50,35],[33,90,50,36,"idx"],[33,93,50,39],[33,94,50,40],[33,96,51,10,"otherKeyVals"],[33,108,51,22],[33,109,51,23,"outputKeyVals"],[33,122,51,36],[33,123,51,37,"idx"],[33,126,51,40],[33,127,52,8],[33,128,53,6],[33,129,53,7],[34,6,53,7],[34,7,54,4],[34,8,54,5],[35,4,55,2],[35,5,55,3],[36,4,16,2],[36,9,16,7],[36,13,16,13,"other"],[36,18,16,18],[36,22,16,22,"others"],[36,28,16,28],[37,6,16,28,"_loop"],[37,11,16,28],[38,4,16,28],[39,4,56,2],[39,11,56,9,"_$$_REQUIRE"],[39,22,56,9],[39,23,56,9,"_dependencyMap"],[39,37,56,9],[39,55,56,18,"psbtFromKeyVals"],[39,70,56,33],[39,71,56,34,"selfTx"],[39,77,56,40],[39,79,56,42],[40,6,57,4,"globalMapKeyVals"],[40,22,57,20],[40,24,57,22,"selfKeyVals"],[40,35,57,33],[40,36,57,34,"globalKeyVals"],[40,49,57,47],[41,6,58,4,"inputKeyVals"],[41,18,58,16],[41,20,58,18,"selfKeyVals"],[41,31,58,29],[41,32,58,30,"inputKeyVals"],[41,44,58,42],[42,6,59,4,"outputKeyVals"],[42,19,59,17],[42,21,59,19,"selfKeyVals"],[42,32,59,30],[42,33,59,31,"outputKeyVals"],[43,4,60,2],[43,5,60,3],[43,6,60,4],[44,2,61,0],[45,2,62,0,"exports"],[45,9,62,7],[45,10,62,8,"combine"],[45,17,62,15],[45,20,62,18,"combine"],[45,27,62,25],[46,2,63,0],[46,11,63,9,"keyPusher"],[46,20,63,18,"keyPusher"],[46,21,63,19,"selfSet"],[46,28,63,26],[46,30,63,28,"selfKeyVals"],[46,41,63,39],[46,43,63,41,"otherKeyVals"],[46,55,63,53],[46,57,63,55],[47,4,64,2],[47,11,64,9],[47,21,64,9,"key"],[47,24,64,12],[47,26,64,16],[48,6,65,4],[48,10,65,8,"selfSet"],[48,17,65,15],[48,18,65,16,"has"],[48,21,65,19],[48,22,65,20,"key"],[48,25,65,23],[48,26,65,24],[48,28,65,26],[49,6,66,4],[49,10,66,10,"newKv"],[49,15,66,15],[49,18,66,18,"otherKeyVals"],[49,30,66,30],[49,31,66,31,"filter"],[49,37,66,37],[49,38,66,38],[49,48,66,38,"kv"],[49,50,66,40],[50,8,66,40],[50,15,66,44,"kv"],[50,17,66,46],[50,18,66,47,"key"],[50,21,66,50],[50,22,66,51,"toString"],[50,30,66,59],[50,31,66,60],[50,36,66,65],[50,37,66,66],[50,42,66,71,"key"],[50,45,66,74],[51,6,66,74],[51,8,66,75],[51,9,66,76],[51,10,66,77],[51,11,66,78],[52,6,67,4,"selfKeyVals"],[52,17,67,15],[52,18,67,16,"push"],[52,22,67,20],[52,23,67,21,"newKv"],[52,28,67,26],[52,29,67,27],[53,6,68,4,"selfSet"],[53,13,68,11],[53,14,68,12,"add"],[53,17,68,15],[53,18,68,16,"key"],[53,21,68,19],[53,22,68,20],[54,4,69,2],[54,5,69,3],[55,2,70,0],[56,2,71,0],[56,11,71,9,"getTx"],[56,16,71,14,"getTx"],[56,17,71,15,"psbt"],[56,21,71,19],[56,23,71,21],[57,4,72,2],[57,11,72,9,"psbt"],[57,15,72,13],[57,16,72,14,"globalMap"],[57,25,72,23],[57,26,72,24,"unsignedTx"],[57,36,72,34],[58,2,73,0],[59,2,74,0],[59,11,74,9,"getKeySet"],[59,20,74,18,"getKeySet"],[59,21,74,19,"keyVals"],[59,28,74,26],[59,30,74,28],[60,4,75,2],[60,8,75,8,"set"],[60,11,75,11],[60,14,75,14],[60,18,75,18,"Set"],[60,21,75,21],[60,22,75,22],[60,23,75,23],[61,4,76,2,"keyVals"],[61,11,76,9],[61,12,76,10,"forEach"],[61,19,76,17],[61,20,76,18],[61,30,76,18,"keyVal"],[61,36,76,24],[61,38,76,28],[62,6,77,4],[62,10,77,10,"hex"],[62,13,77,13],[62,16,77,16,"keyVal"],[62,22,77,22],[62,23,77,23,"key"],[62,26,77,26],[62,27,77,27,"toString"],[62,35,77,35],[62,36,77,36],[62,41,77,41],[62,42,77,42],[63,6,78,4],[63,10,78,8,"set"],[63,13,78,11],[63,14,78,12,"has"],[63,17,78,15],[63,18,78,16,"hex"],[63,21,78,19],[63,22,78,20],[63,24,79,6],[63,30,79,12],[63,34,79,16,"Error"],[63,39,79,21],[63,40,79,22],[63,85,79,67],[63,86,79,68],[64,6,80,4,"set"],[64,9,80,7],[64,10,80,8,"add"],[64,13,80,11],[64,14,80,12,"hex"],[64,17,80,15],[64,18,80,16],[65,4,81,2],[65,5,81,3],[65,6,81,4],[66,4,82,2],[66,11,82,9,"set"],[66,14,82,12],[67,2,83,0],[68,0,83,1],[68,3]],"functionMap":{"names":["<global>","combine","otherInputSets.forEach$argument_0","otherOutputSets.forEach$argument_0","keyPusher","<anonymous>","otherKeyVals.filter$argument_0","getTx","getKeySet","keyVals.forEach$argument_0"],"mappings":"AAA;ACG;2BCgC;ODO;4BEG;OFO;CDQ;AIE;SCC;sCCE,oCD;GDG;CJC;AOC;CPE;AQC;kBCE;GDK;CRE"}},"type":"js/module"}]}