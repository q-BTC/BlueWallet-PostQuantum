{"dependencies":[{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":193,"column":0,"index":6424}}],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE="}},{"name":"../crypto.cjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":55,"column":29,"index":1678},"end":{"line":55,"column":53,"index":1702}}],"key":"bY/XcTutLkbpjy6vznOCA0x1/xI="}},{"name":"uint8array-tools","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":58,"column":27,"index":1832},"end":{"line":58,"column":54,"index":1859}}],"key":"d9z2uhLIsbEZR4MIqnLfYd/zTK8="}},{"name":"../types.cjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":57,"column":19,"index":1780},"end":{"line":57,"column":42,"index":1803}}],"key":"fEWP9g3yw1tvmzSUSkgsecUHZn0="}},{"name":"../ecc_lib.cjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":54,"column":21,"index":1622},"end":{"line":54,"column":46,"index":1647}}],"key":"Sm4LR+iHSeebeAfwlYGjGsNYdfA="}},{"name":"../bufferutils.cjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":56,"column":25,"index":1730},"end":{"line":56,"column":54,"index":1759}},{"start":{"line":56,"column":25,"index":1730},"end":{"line":56,"column":54,"index":1759}}],"key":"NNXCATWjADLqqyRWFjrMyZ7J01w="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/toConsumableArray\");\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function get() {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, 'default', {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o['default'] = v;\n  });\n  var __importStar = this && this.__importStar || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.MAX_TAPTREE_DEPTH = exports.LEAF_VERSION_TAPSCRIPT = void 0;\n  exports.rootHashFromPath = rootHashFromPath;\n  exports.toHashTree = toHashTree;\n  exports.findScriptPath = findScriptPath;\n  exports.tapleafHash = tapleafHash;\n  exports.tapTweakHash = tapTweakHash;\n  exports.tweakKey = tweakKey;\n  var bcrypto = __importStar(_$$_REQUIRE(_dependencyMap[1], \"../crypto.cjs\"));\n  var tools = __importStar(_$$_REQUIRE(_dependencyMap[2], \"uint8array-tools\"));\n  exports.LEAF_VERSION_TAPSCRIPT = 0xc0;\n  exports.MAX_TAPTREE_DEPTH = 128;\n  var isHashBranch = function isHashBranch(ht) {\n    return 'left' in ht && 'right' in ht;\n  };\n  /**\n   * Calculates the root hash from a given control block and leaf hash.\n   * @param controlBlock - The control block buffer.\n   * @param leafHash - The leaf hash buffer.\n   * @returns The root hash buffer.\n   * @throws {TypeError} If the control block length is less than 33.\n   */\n  function rootHashFromPath(controlBlock, leafHash) {\n    if (controlBlock.length < 33) throw new TypeError(`The control-block length is too small. Got ${controlBlock.length}, expected min 33.`);\n    var m = (controlBlock.length - 33) / 32;\n    var kj = leafHash;\n    for (var j = 0; j < m; j++) {\n      var ej = controlBlock.slice(33 + 32 * j, 65 + 32 * j);\n      if (tools.compare(kj, ej) < 0) {\n        kj = tapBranchHash(kj, ej);\n      } else {\n        kj = tapBranchHash(ej, kj);\n      }\n    }\n    return kj;\n  }\n  /**\n   * Build a hash tree of merkle nodes from the scripts binary tree.\n   * @param scriptTree - the tree of scripts to pairwise hash.\n   */\n  function toHashTree(scriptTree) {\n    if ((0, _$$_REQUIRE(_dependencyMap[3], \"../types.cjs\").isTapleaf)(scriptTree)) return {\n      hash: tapleafHash(scriptTree)\n    };\n    var hashes = [toHashTree(scriptTree[0]), toHashTree(scriptTree[1])];\n    // hashes.sort((a, b) => a.hash.compare(b.hash));\n    hashes.sort(function (a, b) {\n      return tools.compare(a.hash, b.hash);\n    });\n    var left = hashes[0],\n      right = hashes[1];\n    return {\n      hash: tapBranchHash(left.hash, right.hash),\n      left: left,\n      right: right\n    };\n  }\n  /**\n   * Given a HashTree, finds the path from a particular hash to the root.\n   * @param node - the root of the tree\n   * @param hash - the hash to search for\n   * @returns - array of sibling hashes, from leaf (inclusive) to root\n   * (exclusive) needed to prove inclusion of the specified hash. undefined if no\n   * path is found\n   */\n  function findScriptPath(node, hash) {\n    if (isHashBranch(node)) {\n      var leftPath = findScriptPath(node.left, hash);\n      if (leftPath !== undefined) return [].concat(_toConsumableArray(leftPath), [node.right.hash]);\n      var rightPath = findScriptPath(node.right, hash);\n      if (rightPath !== undefined) return [].concat(_toConsumableArray(rightPath), [node.left.hash]);\n    } else if (tools.compare(node.hash, hash) === 0) {\n      return [];\n    }\n    return undefined;\n  }\n  /**\n   * Calculates the tapleaf hash for a given Tapleaf object.\n   * @param leaf - The Tapleaf object to calculate the hash for.\n   * @returns The tapleaf hash as a Buffer.\n   */\n  function tapleafHash(leaf) {\n    var version = leaf.version || exports.LEAF_VERSION_TAPSCRIPT;\n    return bcrypto.taggedHash('TapLeaf', tools.concat([Uint8Array.from([version]), serializeScript(leaf.output)]));\n  }\n  /**\n   * Computes the taproot tweak hash for a given public key and optional hash.\n   * If a hash is provided, the public key and hash are concatenated before computing the hash.\n   * If no hash is provided, only the public key is used to compute the hash.\n   *\n   * @param pubKey - The public key buffer.\n   * @param h - The optional hash buffer.\n   * @returns The taproot tweak hash.\n   */\n  function tapTweakHash(pubKey, h) {\n    return bcrypto.taggedHash('TapTweak', tools.concat(h ? [pubKey, h] : [pubKey]));\n  }\n  /**\n   * Tweak a public key with a given tweak hash.\n   * @param pubKey - The public key to be tweaked.\n   * @param h - The tweak hash.\n   * @returns The tweaked public key or null if the input is invalid.\n   */\n  function tweakKey(pubKey, h) {\n    if (!(pubKey instanceof Uint8Array)) return null;\n    if (pubKey.length !== 32) return null;\n    if (h && h.length !== 32) return null;\n    var tweakHash = tapTweakHash(pubKey, h);\n    var res = (0, _$$_REQUIRE(_dependencyMap[4], \"../ecc_lib.cjs\").getEccLib)().xOnlyPointAddTweak(pubKey, tweakHash);\n    if (!res || res.xOnlyPubkey === null) return null;\n    return {\n      parity: res.parity,\n      x: Uint8Array.from(res.xOnlyPubkey)\n    };\n  }\n  /**\n   * Computes the TapBranch hash by concatenating two buffers and applying the 'TapBranch' tagged hash algorithm.\n   *\n   * @param a - The first buffer.\n   * @param b - The second buffer.\n   * @returns The TapBranch hash of the concatenated buffers.\n   */\n  function tapBranchHash(a, b) {\n    return bcrypto.taggedHash('TapBranch', tools.concat([a, b]));\n  }\n  /**\n   * Serializes a script by encoding its length as a varint and concatenating it with the script.\n   *\n   * @param s - The script to be serialized.\n   * @returns The serialized script as a Buffer.\n   */\n  function serializeScript(s) {\n    /* global BigInt */\n    var varintLen = _$$_REQUIRE(_dependencyMap[5], \"../bufferutils.cjs\").varuint.encodingLength(s.length);\n    var buffer = new Uint8Array(varintLen);\n    _$$_REQUIRE(_dependencyMap[5], \"../bufferutils.cjs\").varuint.encode(s.length, buffer);\n    return tools.concat([buffer, s]);\n  }\n});","lineCount":176,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_toConsumableArray"],[4,24,1,13],[4,27,1,13,"_$$_REQUIRE"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,2,0],[5,6,2,4,"__createBinding"],[5,21,2,19],[5,24,3,3],[5,28,3,7],[5,32,3,11],[5,36,3,15],[5,37,3,16,"__createBinding"],[5,52,3,31],[5,57,4,3,"Object"],[5,63,4,9],[5,64,4,10,"create"],[5,70,4,16],[5,73,5,6],[5,83,5,16,"o"],[5,84,5,17],[5,86,5,19,"m"],[5,87,5,20],[5,89,5,22,"k"],[5,90,5,23],[5,92,5,25,"k2"],[5,94,5,27],[5,96,5,29],[6,4,6,8],[6,8,6,12,"k2"],[6,10,6,14],[6,15,6,19,"undefined"],[6,24,6,28],[6,26,6,30,"k2"],[6,28,6,32],[6,31,6,35,"k"],[6,32,6,36],[7,4,7,8],[7,8,7,12,"desc"],[7,12,7,16],[7,15,7,19,"Object"],[7,21,7,25],[7,22,7,26,"getOwnPropertyDescriptor"],[7,46,7,50],[7,47,7,51,"m"],[7,48,7,52],[7,50,7,54,"k"],[7,51,7,55],[7,52,7,56],[8,4,8,8],[8,8,9,10],[8,9,9,11,"desc"],[8,13,9,15],[8,18,10,11],[8,23,10,16],[8,27,10,20,"desc"],[8,31,10,24],[8,34,10,27],[8,35,10,28,"m"],[8,36,10,29],[8,37,10,30,"__esModule"],[8,47,10,40],[8,50,10,43,"desc"],[8,54,10,47],[8,55,10,48,"writable"],[8,63,10,56],[8,67,10,60,"desc"],[8,71,10,64],[8,72,10,65,"configurable"],[8,84,10,77],[8,85,10,78],[8,87,11,10],[9,6,12,10,"desc"],[9,10,12,14],[9,13,12,17],[10,8,13,12,"enumerable"],[10,18,13,22],[10,20,13,24],[10,24,13,28],[11,8,14,12,"get"],[11,11,14,15],[11,13,14,17],[11,22,14,12,"get"],[11,25,14,15,"get"],[11,26,14,15],[11,28,14,29],[12,10,15,14],[12,17,15,21,"m"],[12,18,15,22],[12,19,15,23,"k"],[12,20,15,24],[12,21,15,25],[13,8,16,12],[14,6,17,10],[14,7,17,11],[15,4,18,8],[16,4,19,8,"Object"],[16,10,19,14],[16,11,19,15,"defineProperty"],[16,25,19,29],[16,26,19,30,"o"],[16,27,19,31],[16,29,19,33,"k2"],[16,31,19,35],[16,33,19,37,"desc"],[16,37,19,41],[16,38,19,42],[17,2,20,6],[17,3,20,7],[17,6,21,6],[17,16,21,16,"o"],[17,17,21,17],[17,19,21,19,"m"],[17,20,21,20],[17,22,21,22,"k"],[17,23,21,23],[17,25,21,25,"k2"],[17,27,21,27],[17,29,21,29],[18,4,22,8],[18,8,22,12,"k2"],[18,10,22,14],[18,15,22,19,"undefined"],[18,24,22,28],[18,26,22,30,"k2"],[18,28,22,32],[18,31,22,35,"k"],[18,32,22,36],[19,4,23,8,"o"],[19,5,23,9],[19,6,23,10,"k2"],[19,8,23,12],[19,9,23,13],[19,12,23,16,"m"],[19,13,23,17],[19,14,23,18,"k"],[19,15,23,19],[19,16,23,20],[20,2,24,6],[20,3,24,7],[20,4,24,8],[21,2,25,0],[21,6,25,4,"__setModuleDefault"],[21,24,25,22],[21,27,26,3],[21,31,26,7],[21,35,26,11],[21,39,26,15],[21,40,26,16,"__setModuleDefault"],[21,58,26,34],[21,63,27,3,"Object"],[21,69,27,9],[21,70,27,10,"create"],[21,76,27,16],[21,79,28,6],[21,89,28,16,"o"],[21,90,28,17],[21,92,28,19,"v"],[21,93,28,20],[21,95,28,22],[22,4,29,8,"Object"],[22,10,29,14],[22,11,29,15,"defineProperty"],[22,25,29,29],[22,26,29,30,"o"],[22,27,29,31],[22,29,29,33],[22,38,29,42],[22,40,29,44],[23,6,29,46,"enumerable"],[23,16,29,56],[23,18,29,58],[23,22,29,62],[24,6,29,64,"value"],[24,11,29,69],[24,13,29,71,"v"],[25,4,29,73],[25,5,29,74],[25,6,29,75],[26,2,30,6],[26,3,30,7],[26,6,31,6],[26,16,31,16,"o"],[26,17,31,17],[26,19,31,19,"v"],[26,20,31,20],[26,22,31,22],[27,4,32,8,"o"],[27,5,32,9],[27,6,32,10],[27,15,32,19],[27,16,32,20],[27,19,32,23,"v"],[27,20,32,24],[28,2,33,6],[28,3,33,7],[28,4,33,8],[29,2,34,0],[29,6,34,4,"__importStar"],[29,18,34,16],[29,21,35,3],[29,25,35,7],[29,29,35,11],[29,33,35,15],[29,34,35,16,"__importStar"],[29,46,35,28],[29,50,36,2],[29,60,36,12,"mod"],[29,63,36,15],[29,65,36,17],[30,4,37,4],[30,8,37,8,"mod"],[30,11,37,11],[30,15,37,15,"mod"],[30,18,37,18],[30,19,37,19,"__esModule"],[30,29,37,29],[30,31,37,31],[30,38,37,38,"mod"],[30,41,37,41],[31,4,38,4],[31,8,38,8,"result"],[31,14,38,14],[31,17,38,17],[31,18,38,18],[31,19,38,19],[32,4,39,4],[32,8,39,8,"mod"],[32,11,39,11],[32,15,39,15],[32,19,39,19],[32,21,40,6],[32,26,40,11],[32,30,40,15,"k"],[32,31,40,16],[32,35,40,20,"mod"],[32,38,40,23],[32,40,41,8],[32,44,41,12,"k"],[32,45,41,13],[32,50,41,18],[32,59,41,27],[32,63,41,31,"Object"],[32,69,41,37],[32,70,41,38,"prototype"],[32,79,41,47],[32,80,41,48,"hasOwnProperty"],[32,94,41,62],[32,95,41,63,"call"],[32,99,41,67],[32,100,41,68,"mod"],[32,103,41,71],[32,105,41,73,"k"],[32,106,41,74],[32,107,41,75],[32,109,42,10,"__createBinding"],[32,124,42,25],[32,125,42,26,"result"],[32,131,42,32],[32,133,42,34,"mod"],[32,136,42,37],[32,138,42,39,"k"],[32,139,42,40],[32,140,42,41],[33,4,43,4,"__setModuleDefault"],[33,22,43,22],[33,23,43,23,"result"],[33,29,43,29],[33,31,43,31,"mod"],[33,34,43,34],[33,35,43,35],[34,4,44,4],[34,11,44,11,"result"],[34,17,44,17],[35,2,45,2],[35,3,45,3],[36,2,46,0,"Object"],[36,8,46,6],[36,9,46,7,"defineProperty"],[36,23,46,21],[36,24,46,22,"exports"],[36,31,46,29],[36,33,46,31],[36,45,46,43],[36,47,46,45],[37,4,46,47,"value"],[37,9,46,52],[37,11,46,54],[38,2,46,59],[38,3,46,60],[38,4,46,61],[39,2,47,0,"exports"],[39,9,47,7],[39,10,47,8,"MAX_TAPTREE_DEPTH"],[39,27,47,25],[39,30,47,28,"exports"],[39,37,47,35],[39,38,47,36,"LEAF_VERSION_TAPSCRIPT"],[39,60,47,58],[39,63,47,61],[39,68,47,66],[39,69,47,67],[40,2,48,0,"exports"],[40,9,48,7],[40,10,48,8,"rootHashFromPath"],[40,26,48,24],[40,29,48,27,"rootHashFromPath"],[40,45,48,43],[41,2,49,0,"exports"],[41,9,49,7],[41,10,49,8,"toHashTree"],[41,20,49,18],[41,23,49,21,"toHashTree"],[41,33,49,31],[42,2,50,0,"exports"],[42,9,50,7],[42,10,50,8,"findScriptPath"],[42,24,50,22],[42,27,50,25,"findScriptPath"],[42,41,50,39],[43,2,51,0,"exports"],[43,9,51,7],[43,10,51,8,"tapleafHash"],[43,21,51,19],[43,24,51,22,"tapleafHash"],[43,35,51,33],[44,2,52,0,"exports"],[44,9,52,7],[44,10,52,8,"tapTweakHash"],[44,22,52,20],[44,25,52,23,"tapTweakHash"],[44,37,52,35],[45,2,53,0,"exports"],[45,9,53,7],[45,10,53,8,"tweakKey"],[45,18,53,16],[45,21,53,19,"tweakKey"],[45,29,53,27],[46,2,55,0],[46,6,55,6,"bcrypto"],[46,13,55,13],[46,16,55,16,"__importStar"],[46,28,55,28],[46,29,55,29,"require"],[46,40,55,36],[46,41,55,36,"_dependencyMap"],[46,55,55,36],[46,75,55,52],[46,76,55,53],[46,77,55,54],[47,2,58,0],[47,6,58,6,"tools"],[47,11,58,11],[47,14,58,14,"__importStar"],[47,26,58,26],[47,27,58,27,"require"],[47,38,58,34],[47,39,58,34,"_dependencyMap"],[47,53,58,34],[47,76,58,53],[47,77,58,54],[47,78,58,55],[48,2,59,0,"exports"],[48,9,59,7],[48,10,59,8,"LEAF_VERSION_TAPSCRIPT"],[48,32,59,30],[48,35,59,33],[48,39,59,37],[49,2,60,0,"exports"],[49,9,60,7],[49,10,60,8,"MAX_TAPTREE_DEPTH"],[49,27,60,25],[49,30,60,28],[49,33,60,31],[50,2,61,0],[50,6,61,6,"isHashBranch"],[50,18,61,18],[50,21,61,21],[50,30,61,6,"isHashBranch"],[50,42,61,18,"isHashBranch"],[50,43,61,21,"ht"],[50,45,61,23],[51,4,61,23],[51,11,61,27],[51,17,61,33],[51,21,61,37,"ht"],[51,23,61,39],[51,27,61,43],[51,34,61,50],[51,38,61,54,"ht"],[51,40,61,56],[52,2,61,56],[53,2,62,0],[54,0,63,0],[55,0,64,0],[56,0,65,0],[57,0,66,0],[58,0,67,0],[59,0,68,0],[60,2,69,0],[60,11,69,9,"rootHashFromPath"],[60,27,69,25,"rootHashFromPath"],[60,28,69,26,"controlBlock"],[60,40,69,38],[60,42,69,40,"leafHash"],[60,50,69,48],[60,52,69,50],[61,4,70,2],[61,8,70,6,"controlBlock"],[61,20,70,18],[61,21,70,19,"length"],[61,27,70,25],[61,30,70,28],[61,32,70,30],[61,34,71,4],[61,40,71,10],[61,44,71,14,"TypeError"],[61,53,71,23],[61,54,72,6],[61,100,72,52,"controlBlock"],[61,112,72,64],[61,113,72,65,"length"],[61,119,72,71],[61,139,73,4],[61,140,73,5],[62,4,74,2],[62,8,74,8,"m"],[62,9,74,9],[62,12,74,12],[62,13,74,13,"controlBlock"],[62,25,74,25],[62,26,74,26,"length"],[62,32,74,32],[62,35,74,35],[62,37,74,37],[62,41,74,41],[62,43,74,43],[63,4,75,2],[63,8,75,6,"kj"],[63,10,75,8],[63,13,75,11,"leafHash"],[63,21,75,19],[64,4,76,2],[64,9,76,7],[64,13,76,11,"j"],[64,14,76,12],[64,17,76,15],[64,18,76,16],[64,20,76,18,"j"],[64,21,76,19],[64,24,76,22,"m"],[64,25,76,23],[64,27,76,25,"j"],[64,28,76,26],[64,30,76,28],[64,32,76,30],[65,6,77,4],[65,10,77,10,"ej"],[65,12,77,12],[65,15,77,15,"controlBlock"],[65,27,77,27],[65,28,77,28,"slice"],[65,33,77,33],[65,34,77,34],[65,36,77,36],[65,39,77,39],[65,41,77,41],[65,44,77,44,"j"],[65,45,77,45],[65,47,77,47],[65,49,77,49],[65,52,77,52],[65,54,77,54],[65,57,77,57,"j"],[65,58,77,58],[65,59,77,59],[66,6,78,4],[66,10,78,8,"tools"],[66,15,78,13],[66,16,78,14,"compare"],[66,23,78,21],[66,24,78,22,"kj"],[66,26,78,24],[66,28,78,26,"ej"],[66,30,78,28],[66,31,78,29],[66,34,78,32],[66,35,78,33],[66,37,78,35],[67,8,79,6,"kj"],[67,10,79,8],[67,13,79,11,"tapBranchHash"],[67,26,79,24],[67,27,79,25,"kj"],[67,29,79,27],[67,31,79,29,"ej"],[67,33,79,31],[67,34,79,32],[68,6,80,4],[68,7,80,5],[68,13,80,11],[69,8,81,6,"kj"],[69,10,81,8],[69,13,81,11,"tapBranchHash"],[69,26,81,24],[69,27,81,25,"ej"],[69,29,81,27],[69,31,81,29,"kj"],[69,33,81,31],[69,34,81,32],[70,6,82,4],[71,4,83,2],[72,4,84,2],[72,11,84,9,"kj"],[72,13,84,11],[73,2,85,0],[74,2,86,0],[75,0,87,0],[76,0,88,0],[77,0,89,0],[78,2,90,0],[78,11,90,9,"toHashTree"],[78,21,90,19,"toHashTree"],[78,22,90,20,"scriptTree"],[78,32,90,30],[78,34,90,32],[79,4,91,2],[79,8,91,6],[79,9,91,7],[79,10,91,8],[79,12,91,10,"_$$_REQUIRE"],[79,23,91,10],[79,24,91,10,"_dependencyMap"],[79,38,91,10],[79,59,91,21,"isTapleaf"],[79,68,91,30],[79,70,91,32,"scriptTree"],[79,80,91,42],[79,81,91,43],[79,83,92,4],[79,90,92,11],[80,6,92,13,"hash"],[80,10,92,17],[80,12,92,19,"tapleafHash"],[80,23,92,30],[80,24,92,31,"scriptTree"],[80,34,92,41],[81,4,92,43],[81,5,92,44],[82,4,93,2],[82,8,93,8,"hashes"],[82,14,93,14],[82,17,93,17],[82,18,93,18,"toHashTree"],[82,28,93,28],[82,29,93,29,"scriptTree"],[82,39,93,39],[82,40,93,40],[82,41,93,41],[82,42,93,42],[82,43,93,43],[82,45,93,45,"toHashTree"],[82,55,93,55],[82,56,93,56,"scriptTree"],[82,66,93,66],[82,67,93,67],[82,68,93,68],[82,69,93,69],[82,70,93,70],[82,71,93,71],[83,4,94,2],[84,4,95,2,"hashes"],[84,10,95,8],[84,11,95,9,"sort"],[84,15,95,13],[84,16,95,14],[84,26,95,15,"a"],[84,27,95,16],[84,29,95,18,"b"],[84,30,95,19],[85,6,95,19],[85,13,95,24,"tools"],[85,18,95,29],[85,19,95,30,"compare"],[85,26,95,37],[85,27,95,38,"a"],[85,28,95,39],[85,29,95,40,"hash"],[85,33,95,44],[85,35,95,46,"b"],[85,36,95,47],[85,37,95,48,"hash"],[85,41,95,52],[85,42,95,53],[86,4,95,53],[86,6,95,54],[87,4,96,2],[87,8,96,9,"left"],[87,12,96,13],[87,15,96,24,"hashes"],[87,21,96,30],[88,6,96,15,"right"],[88,11,96,20],[88,14,96,24,"hashes"],[88,20,96,30],[89,4,97,2],[89,11,97,9],[90,6,98,4,"hash"],[90,10,98,8],[90,12,98,10,"tapBranchHash"],[90,25,98,23],[90,26,98,24,"left"],[90,30,98,28],[90,31,98,29,"hash"],[90,35,98,33],[90,37,98,35,"right"],[90,42,98,40],[90,43,98,41,"hash"],[90,47,98,45],[90,48,98,46],[91,6,99,4,"left"],[91,10,99,8],[91,12,99,4,"left"],[91,16,99,8],[92,6,100,4,"right"],[92,11,100,9],[92,13,100,4,"right"],[93,4,101,2],[93,5,101,3],[94,2,102,0],[95,2,103,0],[96,0,104,0],[97,0,105,0],[98,0,106,0],[99,0,107,0],[100,0,108,0],[101,0,109,0],[102,0,110,0],[103,2,111,0],[103,11,111,9,"findScriptPath"],[103,25,111,23,"findScriptPath"],[103,26,111,24,"node"],[103,30,111,28],[103,32,111,30,"hash"],[103,36,111,34],[103,38,111,36],[104,4,112,2],[104,8,112,6,"isHashBranch"],[104,20,112,18],[104,21,112,19,"node"],[104,25,112,23],[104,26,112,24],[104,28,112,26],[105,6,113,4],[105,10,113,10,"leftPath"],[105,18,113,18],[105,21,113,21,"findScriptPath"],[105,35,113,35],[105,36,113,36,"node"],[105,40,113,40],[105,41,113,41,"left"],[105,45,113,45],[105,47,113,47,"hash"],[105,51,113,51],[105,52,113,52],[106,6,114,4],[106,10,114,8,"leftPath"],[106,18,114,16],[106,23,114,21,"undefined"],[106,32,114,30],[106,34,114,32],[106,44,114,32,"concat"],[106,50,114,32],[106,51,114,32,"_toConsumableArray"],[106,69,114,32],[106,70,114,43,"leftPath"],[106,78,114,51],[106,82,114,53,"node"],[106,86,114,57],[106,87,114,58,"right"],[106,92,114,63],[106,93,114,64,"hash"],[106,97,114,68],[107,6,115,4],[107,10,115,10,"rightPath"],[107,19,115,19],[107,22,115,22,"findScriptPath"],[107,36,115,36],[107,37,115,37,"node"],[107,41,115,41],[107,42,115,42,"right"],[107,47,115,47],[107,49,115,49,"hash"],[107,53,115,53],[107,54,115,54],[108,6,116,4],[108,10,116,8,"rightPath"],[108,19,116,17],[108,24,116,22,"undefined"],[108,33,116,31],[108,35,116,33],[108,45,116,33,"concat"],[108,51,116,33],[108,52,116,33,"_toConsumableArray"],[108,70,116,33],[108,71,116,44,"rightPath"],[108,80,116,53],[108,84,116,55,"node"],[108,88,116,59],[108,89,116,60,"left"],[108,93,116,64],[108,94,116,65,"hash"],[108,98,116,69],[109,4,117,2],[109,5,117,3],[109,11,117,9],[109,15,117,13,"tools"],[109,20,117,18],[109,21,117,19,"compare"],[109,28,117,26],[109,29,117,27,"node"],[109,33,117,31],[109,34,117,32,"hash"],[109,38,117,36],[109,40,117,38,"hash"],[109,44,117,42],[109,45,117,43],[109,50,117,48],[109,51,117,49],[109,53,117,51],[110,6,118,4],[110,13,118,11],[110,15,118,13],[111,4,119,2],[112,4,120,2],[112,11,120,9,"undefined"],[112,20,120,18],[113,2,121,0],[114,2,122,0],[115,0,123,0],[116,0,124,0],[117,0,125,0],[118,0,126,0],[119,2,127,0],[119,11,127,9,"tapleafHash"],[119,22,127,20,"tapleafHash"],[119,23,127,21,"leaf"],[119,27,127,25],[119,29,127,27],[120,4,128,2],[120,8,128,8,"version"],[120,15,128,15],[120,18,128,18,"leaf"],[120,22,128,22],[120,23,128,23,"version"],[120,30,128,30],[120,34,128,34,"exports"],[120,41,128,41],[120,42,128,42,"LEAF_VERSION_TAPSCRIPT"],[120,64,128,64],[121,4,129,2],[121,11,129,9,"bcrypto"],[121,18,129,16],[121,19,129,17,"taggedHash"],[121,29,129,27],[121,30,130,4],[121,39,130,13],[121,41,131,4,"tools"],[121,46,131,9],[121,47,131,10,"concat"],[121,53,131,16],[121,54,131,17],[121,55,131,18,"Uint8Array"],[121,65,131,28],[121,66,131,29,"from"],[121,70,131,33],[121,71,131,34],[121,72,131,35,"version"],[121,79,131,42],[121,80,131,43],[121,81,131,44],[121,83,131,46,"serializeScript"],[121,98,131,61],[121,99,131,62,"leaf"],[121,103,131,66],[121,104,131,67,"output"],[121,110,131,73],[121,111,131,74],[121,112,131,75],[121,113,132,2],[121,114,132,3],[122,2,133,0],[123,2,134,0],[124,0,135,0],[125,0,136,0],[126,0,137,0],[127,0,138,0],[128,0,139,0],[129,0,140,0],[130,0,141,0],[131,0,142,0],[132,2,143,0],[132,11,143,9,"tapTweakHash"],[132,23,143,21,"tapTweakHash"],[132,24,143,22,"pubKey"],[132,30,143,28],[132,32,143,30,"h"],[132,33,143,31],[132,35,143,33],[133,4,144,2],[133,11,144,9,"bcrypto"],[133,18,144,16],[133,19,144,17,"taggedHash"],[133,29,144,27],[133,30,145,4],[133,40,145,14],[133,42,146,4,"tools"],[133,47,146,9],[133,48,146,10,"concat"],[133,54,146,16],[133,55,146,17,"h"],[133,56,146,18],[133,59,146,21],[133,60,146,22,"pubKey"],[133,66,146,28],[133,68,146,30,"h"],[133,69,146,31],[133,70,146,32],[133,73,146,35],[133,74,146,36,"pubKey"],[133,80,146,42],[133,81,146,43],[133,82,147,2],[133,83,147,3],[134,2,148,0],[135,2,149,0],[136,0,150,0],[137,0,151,0],[138,0,152,0],[139,0,153,0],[140,0,154,0],[141,2,155,0],[141,11,155,9,"tweakKey"],[141,19,155,17,"tweakKey"],[141,20,155,18,"pubKey"],[141,26,155,24],[141,28,155,26,"h"],[141,29,155,27],[141,31,155,29],[142,4,156,2],[142,8,156,6],[142,10,156,8,"pubKey"],[142,16,156,14],[142,28,156,26,"Uint8Array"],[142,38,156,36],[142,39,156,37],[142,41,156,39],[142,48,156,46],[142,52,156,50],[143,4,157,2],[143,8,157,6,"pubKey"],[143,14,157,12],[143,15,157,13,"length"],[143,21,157,19],[143,26,157,24],[143,28,157,26],[143,30,157,28],[143,37,157,35],[143,41,157,39],[144,4,158,2],[144,8,158,6,"h"],[144,9,158,7],[144,13,158,11,"h"],[144,14,158,12],[144,15,158,13,"length"],[144,21,158,19],[144,26,158,24],[144,28,158,26],[144,30,158,28],[144,37,158,35],[144,41,158,39],[145,4,159,2],[145,8,159,8,"tweakHash"],[145,17,159,17],[145,20,159,20,"tapTweakHash"],[145,32,159,32],[145,33,159,33,"pubKey"],[145,39,159,39],[145,41,159,41,"h"],[145,42,159,42],[145,43,159,43],[146,4,160,2],[146,8,160,8,"res"],[146,11,160,11],[146,14,160,14],[146,15,160,15],[146,16,160,16],[146,18,160,18,"_$$_REQUIRE"],[146,29,160,18],[146,30,160,18,"_dependencyMap"],[146,44,160,18],[146,67,160,31,"getEccLib"],[146,76,160,40],[146,78,160,42],[146,79,160,43],[146,80,160,44,"xOnlyPointAddTweak"],[146,98,160,62],[146,99,161,4,"pubKey"],[146,105,161,10],[146,107,162,4,"tweakHash"],[146,116,163,2],[146,117,163,3],[147,4,164,2],[147,8,164,6],[147,9,164,7,"res"],[147,12,164,10],[147,16,164,14,"res"],[147,19,164,17],[147,20,164,18,"xOnlyPubkey"],[147,31,164,29],[147,36,164,34],[147,40,164,38],[147,42,164,40],[147,49,164,47],[147,53,164,51],[148,4,165,2],[148,11,165,9],[149,6,166,4,"parity"],[149,12,166,10],[149,14,166,12,"res"],[149,17,166,15],[149,18,166,16,"parity"],[149,24,166,22],[150,6,167,4,"x"],[150,7,167,5],[150,9,167,7,"Uint8Array"],[150,19,167,17],[150,20,167,18,"from"],[150,24,167,22],[150,25,167,23,"res"],[150,28,167,26],[150,29,167,27,"xOnlyPubkey"],[150,40,167,38],[151,4,168,2],[151,5,168,3],[152,2,169,0],[153,2,170,0],[154,0,171,0],[155,0,172,0],[156,0,173,0],[157,0,174,0],[158,0,175,0],[159,0,176,0],[160,2,177,0],[160,11,177,9,"tapBranchHash"],[160,24,177,22,"tapBranchHash"],[160,25,177,23,"a"],[160,26,177,24],[160,28,177,26,"b"],[160,29,177,27],[160,31,177,29],[161,4,178,2],[161,11,178,9,"bcrypto"],[161,18,178,16],[161,19,178,17,"taggedHash"],[161,29,178,27],[161,30,178,28],[161,41,178,39],[161,43,178,41,"tools"],[161,48,178,46],[161,49,178,47,"concat"],[161,55,178,53],[161,56,178,54],[161,57,178,55,"a"],[161,58,178,56],[161,60,178,58,"b"],[161,61,178,59],[161,62,178,60],[161,63,178,61],[161,64,178,62],[162,2,179,0],[163,2,180,0],[164,0,181,0],[165,0,182,0],[166,0,183,0],[167,0,184,0],[168,0,185,0],[169,2,186,0],[169,11,186,9,"serializeScript"],[169,26,186,24,"serializeScript"],[169,27,186,25,"s"],[169,28,186,26],[169,30,186,28],[170,4,187,2],[171,4,188,2],[171,8,188,8,"varintLen"],[171,17,188,17],[171,20,188,20,"_$$_REQUIRE"],[171,31,188,20],[171,32,188,20,"_dependencyMap"],[171,46,188,20],[171,73,188,37,"varuint"],[171,80,188,44],[171,81,188,45,"encodingLength"],[171,95,188,59],[171,96,188,60,"s"],[171,97,188,61],[171,98,188,62,"length"],[171,104,188,68],[171,105,188,69],[172,4,189,2],[172,8,189,8,"buffer"],[172,14,189,14],[172,17,189,17],[172,21,189,21,"Uint8Array"],[172,31,189,31],[172,32,189,32,"varintLen"],[172,41,189,41],[172,42,189,42],[173,4,190,2,"_$$_REQUIRE"],[173,15,190,2],[173,16,190,2,"_dependencyMap"],[173,30,190,2],[173,57,190,19,"varuint"],[173,64,190,26],[173,65,190,27,"encode"],[173,71,190,33],[173,72,190,34,"s"],[173,73,190,35],[173,74,190,36,"length"],[173,80,190,42],[173,82,190,44,"buffer"],[173,88,190,50],[173,89,190,51],[174,4,191,2],[174,11,191,9,"tools"],[174,16,191,14],[174,17,191,15,"concat"],[174,23,191,21],[174,24,191,22],[174,25,191,23,"buffer"],[174,31,191,29],[174,33,191,31,"s"],[174,34,191,32],[174,35,191,33],[174,36,191,34],[175,2,192,0],[176,0,192,1],[176,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","isHashBranch","rootHashFromPath","toHashTree","hashes.sort$argument_0","findScriptPath","tapleafHash","tapTweakHash","tweakKey","tapBranchHash","serializeScript"],"mappings":"AAA;MCI;iBCS;aDE;ODI;MCC;ODG;MCI;ODE;MCC;ODE;ECG;GDS;qBGgB,mCH;AIQ;CJgB;AKK;cCK,uCD;CLO;AOS;CPU;AQM;CRM;ASU;CTK;AUO;CVc;AWQ;CXE;AYO;CZM"}},"type":"js/module"}]}