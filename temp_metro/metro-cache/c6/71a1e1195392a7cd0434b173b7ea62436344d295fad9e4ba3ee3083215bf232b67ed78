{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":427,"column":0,"index":12582}}],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo="}},{"name":"ecurve","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":13,"index":330},"end":{"line":10,"column":30,"index":347}}],"key":"uuDJz/0eCREXa8sh6d6gZZe5Xdo="}},{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":13,"index":136},"end":{"line":4,"column":42,"index":165}},{"start":{"line":4,"column":13,"index":136},"end":{"line":4,"column":42,"index":165}},{"start":{"line":4,"column":13,"index":136},"end":{"line":4,"column":42,"index":165}},{"start":{"line":4,"column":13,"index":136},"end":{"line":4,"column":42,"index":165}},{"start":{"line":4,"column":13,"index":136},"end":{"line":4,"column":42,"index":165}},{"start":{"line":4,"column":13,"index":136},"end":{"line":4,"column":42,"index":165}},{"start":{"line":4,"column":13,"index":136},"end":{"line":4,"column":42,"index":165}},{"start":{"line":4,"column":13,"index":136},"end":{"line":4,"column":42,"index":165}},{"start":{"line":4,"column":13,"index":136},"end":{"line":4,"column":42,"index":165}},{"start":{"line":4,"column":13,"index":136},"end":{"line":4,"column":42,"index":165}},{"start":{"line":4,"column":13,"index":136},"end":{"line":4,"column":42,"index":165}},{"start":{"line":4,"column":13,"index":136},"end":{"line":4,"column":42,"index":165}},{"start":{"line":4,"column":13,"index":136},"end":{"line":4,"column":42,"index":165}},{"start":{"line":4,"column":13,"index":136},"end":{"line":4,"column":42,"index":165}},{"start":{"line":4,"column":13,"index":136},"end":{"line":4,"column":42,"index":165}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI="}},{"name":"create-hash","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":17,"index":220},"end":{"line":6,"column":39,"index":242}},{"start":{"line":6,"column":17,"index":220},"end":{"line":6,"column":39,"index":242}},{"start":{"line":6,"column":17,"index":220},"end":{"line":6,"column":39,"index":242}},{"start":{"line":6,"column":17,"index":220},"end":{"line":6,"column":39,"index":242}},{"start":{"line":6,"column":17,"index":220},"end":{"line":6,"column":39,"index":242}}],"key":"7Wxhpesb6O8KtkMXbqnF6GdF3fo=","isOptional":false}},{"name":"bs58check","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":16,"index":182},"end":{"line":5,"column":36,"index":202}},{"start":{"line":5,"column":16,"index":182},"end":{"line":5,"column":36,"index":202}},{"start":{"line":5,"column":16,"index":182},"end":{"line":5,"column":36,"index":202}},{"start":{"line":5,"column":16,"index":182},"end":{"line":5,"column":36,"index":202}},{"start":{"line":5,"column":16,"index":182},"end":{"line":5,"column":36,"index":202}},{"start":{"line":5,"column":16,"index":182},"end":{"line":5,"column":36,"index":202}}],"key":"4OUKwPALIMTasKbVl6WljOsf4WA="}},{"name":"react-native-blue-crypto","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":19,"index":19},"end":{"line":1,"column":54,"index":54}},{"start":{"line":1,"column":19,"index":19},"end":{"line":1,"column":54,"index":54}}],"key":"Dd511vhgRzst603xigFAP7jWoeE="}},{"name":"scryptsy","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":13,"index":256},"end":{"line":7,"column":32,"index":275}},{"start":{"line":7,"column":13,"index":256},"end":{"line":7,"column":32,"index":275}},{"start":{"line":7,"column":13,"index":256},"end":{"line":7,"column":32,"index":275}},{"start":{"line":7,"column":13,"index":256},"end":{"line":7,"column":32,"index":275}},{"start":{"line":7,"column":13,"index":256},"end":{"line":7,"column":32,"index":275}}],"key":"fqqPjq28TH0Jcmo2Fvleclo1KqE="}},{"name":"bigi","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":17,"index":413},"end":{"line":13,"column":32,"index":428}},{"start":{"line":13,"column":17,"index":413},"end":{"line":13,"column":32,"index":428}},{"start":{"line":13,"column":17,"index":413},"end":{"line":13,"column":32,"index":428}},{"start":{"line":13,"column":17,"index":413},"end":{"line":13,"column":32,"index":428}},{"start":{"line":13,"column":17,"index":413},"end":{"line":13,"column":32,"index":428}}],"key":"q6QfkLyqHnq7dS8FK7xihddCqiE="}},{"name":"buffer-xor/inplace","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":10,"index":286},"end":{"line":8,"column":39,"index":315}},{"start":{"line":8,"column":10,"index":286},"end":{"line":8,"column":39,"index":315}},{"start":{"line":8,"column":10,"index":286},"end":{"line":8,"column":39,"index":315}},{"start":{"line":8,"column":10,"index":286},"end":{"line":8,"column":39,"index":315}}],"key":"RJSpD0kbIacX1utBpklU0FokAUw="}},{"name":"browserify-aes","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":10,"index":66},"end":{"line":2,"column":35,"index":91}},{"start":{"line":2,"column":10,"index":66},"end":{"line":2,"column":35,"index":91}},{"start":{"line":2,"column":10,"index":66},"end":{"line":2,"column":35,"index":91}},{"start":{"line":2,"column":10,"index":66},"end":{"line":2,"column":35,"index":91}}],"key":"wGSnDtBSNDYVJj7EcrGHDojgmHU="}},{"name":"assert","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":13,"index":105},"end":{"line":3,"column":30,"index":122}},{"start":{"line":3,"column":13,"index":105},"end":{"line":3,"column":30,"index":122}},{"start":{"line":3,"column":13,"index":105},"end":{"line":3,"column":30,"index":122}}],"key":"Umsy3wQQm6DbjafRIeuw3teOkUU="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _asyncToGenerator = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var curve = _$$_REQUIRE(_dependencyMap[1], \"ecurve\").getCurveByName('secp256k1');\n  // constants\n  var SCRYPT_PARAMS = {\n    N: 16384,\n    // specified by BIP38\n    r: 8,\n    p: 8\n  };\n  var NULL = _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.alloc(0);\n  function hash160(buffer) {\n    var hash;\n    try {\n      hash = _$$_REQUIRE(_dependencyMap[3], \"create-hash\")('rmd160');\n    } catch (e) {\n      hash = _$$_REQUIRE(_dependencyMap[3], \"create-hash\")('ripemd160');\n    }\n    return hash.update(_$$_REQUIRE(_dependencyMap[3], \"create-hash\")('sha256').update(buffer).digest()).digest();\n  }\n  function hash256(buffer) {\n    return _$$_REQUIRE(_dependencyMap[3], \"create-hash\")('sha256').update(_$$_REQUIRE(_dependencyMap[3], \"create-hash\")('sha256').update(buffer).digest()).digest();\n  }\n  function getAddress(d, compressed) {\n    var Q = curve.G.multiply(d).getEncoded(compressed);\n    var hash = hash160(Q);\n    var payload = _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.allocUnsafe(21);\n    payload.writeUInt8(0x00, 0); // XXX TODO FIXME bitcoin only??? damn you BIP38\n    hash.copy(payload, 1);\n    return _$$_REQUIRE(_dependencyMap[4], \"bs58check\").encode(payload);\n  }\n  function scryptWrapper(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n    return _scryptWrapper.apply(this, arguments);\n  }\n  function _scryptWrapper() {\n    _scryptWrapper = _asyncToGenerator(function* (secret, salt, N, r, p, dkLen, progressCallback, promiseInterval) {\n      if (_$$_REQUIRE(_dependencyMap[5], \"react-native-blue-crypto\").isAvailable()) {\n        secret = _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.from(secret).toString('hex');\n        salt = _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.from(salt).toString('hex');\n        var hex = yield _$$_REQUIRE(_dependencyMap[5], \"react-native-blue-crypto\").scrypt(secret, salt, N, r, p, dkLen);\n        return _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.from(hex, 'hex');\n      } else {\n        // fallback to js implementation\n        return yield _$$_REQUIRE(_dependencyMap[6], \"scryptsy\").async(secret, salt, N, r, p, dkLen, progressCallback, promiseInterval);\n      }\n    });\n    return _scryptWrapper.apply(this, arguments);\n  }\n  function prepareEncryptRaw(buffer, compressed, passphrase, scryptParams) {\n    if (buffer.length !== 32) throw new Error('Invalid private key length');\n    var d = _$$_REQUIRE(_dependencyMap[7], \"bigi\").fromBuffer(buffer);\n    var address = getAddress(d, compressed);\n    var secret = _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.from(passphrase.normalize('NFC'), 'utf8');\n    var salt = hash256(address).slice(0, 4);\n    var N = scryptParams.N;\n    var r = scryptParams.r;\n    var p = scryptParams.p;\n    return {\n      secret: secret,\n      salt: salt,\n      N: N,\n      r: r,\n      p: p\n    };\n  }\n  function finishEncryptRaw(buffer, compressed, salt, scryptBuf) {\n    var derivedHalf1 = scryptBuf.slice(0, 32);\n    var derivedHalf2 = scryptBuf.slice(32, 64);\n    var xorBuf = _$$_REQUIRE(_dependencyMap[8], \"buffer-xor/inplace\")(derivedHalf1, buffer);\n    var cipher = _$$_REQUIRE(_dependencyMap[9], \"browserify-aes\").createCipheriv('aes-256-ecb', derivedHalf2, NULL);\n    cipher.setAutoPadding(false);\n    cipher.end(xorBuf);\n    var cipherText = cipher.read();\n\n    // 0x01 | 0x42 | flagByte | salt (4) | cipherText (32)\n    var result = _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.allocUnsafe(7 + 32);\n    result.writeUInt8(0x01, 0);\n    result.writeUInt8(0x42, 1);\n    result.writeUInt8(compressed ? 0xe0 : 0xc0, 2);\n    salt.copy(result, 3);\n    cipherText.copy(result, 7);\n    return result;\n  }\n  function encryptRawAsync(_x9, _x0, _x1, _x10, _x11, _x12) {\n    return _encryptRawAsync.apply(this, arguments);\n  }\n  function _encryptRawAsync() {\n    _encryptRawAsync = _asyncToGenerator(function* (buffer, compressed, passphrase, progressCallback, scryptParams, promiseInterval) {\n      scryptParams = scryptParams || SCRYPT_PARAMS;\n      var _prepareEncryptRaw2 = prepareEncryptRaw(buffer, compressed, passphrase, scryptParams),\n        secret = _prepareEncryptRaw2.secret,\n        salt = _prepareEncryptRaw2.salt,\n        N = _prepareEncryptRaw2.N,\n        r = _prepareEncryptRaw2.r,\n        p = _prepareEncryptRaw2.p;\n      var scryptBuf = yield scryptWrapper(secret, salt, N, r, p, 64, progressCallback, promiseInterval);\n      return finishEncryptRaw(buffer, compressed, salt, scryptBuf);\n    });\n    return _encryptRawAsync.apply(this, arguments);\n  }\n  function encryptRaw(buffer, compressed, passphrase, progressCallback, scryptParams) {\n    scryptParams = scryptParams || SCRYPT_PARAMS;\n    var _prepareEncryptRaw = prepareEncryptRaw(buffer, compressed, passphrase, scryptParams),\n      secret = _prepareEncryptRaw.secret,\n      salt = _prepareEncryptRaw.salt,\n      N = _prepareEncryptRaw.N,\n      r = _prepareEncryptRaw.r,\n      p = _prepareEncryptRaw.p;\n    var scryptBuf = _$$_REQUIRE(_dependencyMap[6], \"scryptsy\")(secret, salt, N, r, p, 64, progressCallback);\n    return finishEncryptRaw(buffer, compressed, salt, scryptBuf);\n  }\n  function encryptAsync(_x13, _x14, _x15, _x16, _x17, _x18) {\n    return _encryptAsync.apply(this, arguments);\n  }\n  function _encryptAsync() {\n    _encryptAsync = _asyncToGenerator(function* (buffer, compressed, passphrase, progressCallback, scryptParams, promiseInterval) {\n      return _$$_REQUIRE(_dependencyMap[4], \"bs58check\").encode(yield encryptRawAsync(buffer, compressed, passphrase, progressCallback, scryptParams, promiseInterval));\n    });\n    return _encryptAsync.apply(this, arguments);\n  }\n  function encrypt(buffer, compressed, passphrase, progressCallback, scryptParams) {\n    return _$$_REQUIRE(_dependencyMap[4], \"bs58check\").encode(encryptRaw(buffer, compressed, passphrase, progressCallback, scryptParams));\n  }\n  function prepareDecryptRaw(buffer, progressCallback, scryptParams) {\n    // 39 bytes: 2 bytes prefix, 37 bytes payload\n    if (buffer.length !== 39) throw new Error('Invalid BIP38 data length');\n    if (buffer.readUInt8(0) !== 0x01) throw new Error('Invalid BIP38 prefix');\n\n    // check if BIP38 EC multiply\n    var type = buffer.readUInt8(1);\n    if (type === 0x43) return {\n      decryptEC: true\n    };\n    if (type !== 0x42) throw new Error('Invalid BIP38 type');\n    var flagByte = buffer.readUInt8(2);\n    var compressed = flagByte === 0xe0;\n    if (!compressed && flagByte !== 0xc0) throw new Error('Invalid BIP38 compression flag');\n    var N = scryptParams.N;\n    var r = scryptParams.r;\n    var p = scryptParams.p;\n    var salt = buffer.slice(3, 7);\n    return {\n      salt: salt,\n      compressed: compressed,\n      N: N,\n      r: r,\n      p: p\n    };\n  }\n  function finishDecryptRaw(buffer, salt, compressed, scryptBuf) {\n    var derivedHalf1 = scryptBuf.slice(0, 32);\n    var derivedHalf2 = scryptBuf.slice(32, 64);\n    var privKeyBuf = buffer.slice(7, 7 + 32);\n    var decipher = _$$_REQUIRE(_dependencyMap[9], \"browserify-aes\").createDecipheriv('aes-256-ecb', derivedHalf2, NULL);\n    decipher.setAutoPadding(false);\n    decipher.end(privKeyBuf);\n    var plainText = decipher.read();\n    var privateKey = _$$_REQUIRE(_dependencyMap[8], \"buffer-xor/inplace\")(derivedHalf1, plainText);\n\n    // verify salt matches address\n    var d = _$$_REQUIRE(_dependencyMap[7], \"bigi\").fromBuffer(privateKey);\n    var address = getAddress(d, compressed);\n    var checksum = hash256(address).slice(0, 4);\n    _$$_REQUIRE(_dependencyMap[10], \"assert\").deepStrictEqual(salt, checksum, 'Invalid private key.');\n    return {\n      privateKey: privateKey,\n      compressed: compressed\n    };\n  }\n  function decryptRawAsync(_x19, _x20, _x21, _x22, _x23) {\n    return _decryptRawAsync.apply(this, arguments);\n  } // some of the techniques borrowed from: https://github.com/pointbiz/bitaddress.org\n  function _decryptRawAsync() {\n    _decryptRawAsync = _asyncToGenerator(function* (buffer, passphrase, progressCallback, scryptParams, promiseInterval) {\n      scryptParams = scryptParams || SCRYPT_PARAMS;\n      var _prepareDecryptRaw2 = prepareDecryptRaw(buffer, progressCallback, scryptParams),\n        salt = _prepareDecryptRaw2.salt,\n        compressed = _prepareDecryptRaw2.compressed,\n        N = _prepareDecryptRaw2.N,\n        r = _prepareDecryptRaw2.r,\n        p = _prepareDecryptRaw2.p,\n        decryptEC = _prepareDecryptRaw2.decryptEC;\n      if (decryptEC === true) return decryptECMultAsync(buffer, passphrase, progressCallback, scryptParams, promiseInterval);\n      var scryptBuf = yield scryptWrapper(passphrase.normalize('NFC'), salt, N, r, p, 64, progressCallback, promiseInterval);\n      return finishDecryptRaw(buffer, salt, compressed, scryptBuf);\n    });\n    return _decryptRawAsync.apply(this, arguments);\n  }\n  function decryptRaw(buffer, passphrase, progressCallback, scryptParams) {\n    scryptParams = scryptParams || SCRYPT_PARAMS;\n    var _prepareDecryptRaw = prepareDecryptRaw(buffer, progressCallback, scryptParams),\n      salt = _prepareDecryptRaw.salt,\n      compressed = _prepareDecryptRaw.compressed,\n      N = _prepareDecryptRaw.N,\n      r = _prepareDecryptRaw.r,\n      p = _prepareDecryptRaw.p,\n      decryptEC = _prepareDecryptRaw.decryptEC;\n    if (decryptEC === true) return decryptECMult(buffer, passphrase, progressCallback, scryptParams);\n    var scryptBuf = _$$_REQUIRE(_dependencyMap[6], \"scryptsy\")(passphrase.normalize('NFC'), salt, N, r, p, 64, progressCallback);\n    return finishDecryptRaw(buffer, salt, compressed, scryptBuf);\n  }\n  function decryptAsync(_x24, _x25, _x26, _x27, _x28) {\n    return _decryptAsync.apply(this, arguments);\n  }\n  function _decryptAsync() {\n    _decryptAsync = _asyncToGenerator(function* (string, passphrase, progressCallback, scryptParams, promiseInterval) {\n      return decryptRawAsync(_$$_REQUIRE(_dependencyMap[4], \"bs58check\").decode(string), passphrase, progressCallback, scryptParams, promiseInterval);\n    });\n    return _decryptAsync.apply(this, arguments);\n  }\n  function decrypt(string, passphrase, progressCallback, scryptParams) {\n    return decryptRaw(_$$_REQUIRE(_dependencyMap[4], \"bs58check\").decode(string), passphrase, progressCallback, scryptParams);\n  }\n  function prepareDecryptECMult(buffer, passphrase, progressCallback, scryptParams) {\n    var flag = buffer.readUInt8(1);\n    var compressed = (flag & 0x20) !== 0;\n    var hasLotSeq = (flag & 0x04) !== 0;\n    _$$_REQUIRE(_dependencyMap[10], \"assert\").strictEqual(flag & 0x24, flag, 'Invalid private key.');\n    var addressHash = buffer.slice(2, 6);\n    var ownerEntropy = buffer.slice(6, 14);\n    var ownerSalt;\n\n    // 4 bytes ownerSalt if 4 bytes lot/sequence\n    if (hasLotSeq) {\n      ownerSalt = ownerEntropy.slice(0, 4);\n\n      // else, 8 bytes ownerSalt\n    } else {\n      ownerSalt = ownerEntropy;\n    }\n    var encryptedPart1 = buffer.slice(14, 22); // First 8 bytes\n    var encryptedPart2 = buffer.slice(22, 38); // 16 bytes\n\n    var N = scryptParams.N;\n    var r = scryptParams.r;\n    var p = scryptParams.p;\n    return {\n      addressHash: addressHash,\n      encryptedPart1: encryptedPart1,\n      encryptedPart2: encryptedPart2,\n      ownerEntropy: ownerEntropy,\n      ownerSalt: ownerSalt,\n      hasLotSeq: hasLotSeq,\n      compressed: compressed,\n      N: N,\n      r: r,\n      p: p\n    };\n  }\n  function getPassIntAndPoint(preFactor, ownerEntropy, hasLotSeq) {\n    var passFactor;\n    if (hasLotSeq) {\n      var hashTarget = _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.concat([preFactor, ownerEntropy]);\n      passFactor = hash256(hashTarget);\n    } else {\n      passFactor = preFactor;\n    }\n    var passInt = _$$_REQUIRE(_dependencyMap[7], \"bigi\").fromBuffer(passFactor);\n    return {\n      passInt: passInt,\n      passPoint: curve.G.multiply(passInt).getEncoded(true)\n    };\n  }\n  // async function decryptECMult (buffer, passphrase, progressCallback, scryptParams) {\n  function finishDecryptECMult(seedBPass, encryptedPart1, encryptedPart2, passInt, compressed) {\n    var derivedHalf1 = seedBPass.slice(0, 32);\n    var derivedHalf2 = seedBPass.slice(32, 64);\n    var decipher = _$$_REQUIRE(_dependencyMap[9], \"browserify-aes\").createDecipheriv('aes-256-ecb', derivedHalf2, _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.alloc(0));\n    decipher.setAutoPadding(false);\n    decipher.end(encryptedPart2);\n    var decryptedPart2 = decipher.read();\n    var tmp = _$$_REQUIRE(_dependencyMap[8], \"buffer-xor/inplace\")(decryptedPart2, derivedHalf1.slice(16, 32));\n    var seedBPart2 = tmp.slice(8, 16);\n    var decipher2 = _$$_REQUIRE(_dependencyMap[9], \"browserify-aes\").createDecipheriv('aes-256-ecb', derivedHalf2, _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.alloc(0));\n    decipher2.setAutoPadding(false);\n    decipher2.write(encryptedPart1); // first 8 bytes\n    decipher2.end(tmp.slice(0, 8)); // last 8 bytes\n\n    var seedBPart1 = _$$_REQUIRE(_dependencyMap[8], \"buffer-xor/inplace\")(decipher2.read(), derivedHalf1.slice(0, 16));\n    var seedB = _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.concat([seedBPart1, seedBPart2], 24);\n    var factorB = _$$_REQUIRE(_dependencyMap[7], \"bigi\").fromBuffer(hash256(seedB));\n\n    // d = passFactor * factorB (mod n)\n    var d = passInt.multiply(factorB).mod(curve.n);\n    return {\n      privateKey: d.toBuffer(32),\n      compressed: compressed\n    };\n  }\n  function decryptECMultAsync(_x29, _x30, _x31, _x32, _x33) {\n    return _decryptECMultAsync.apply(this, arguments);\n  }\n  function _decryptECMultAsync() {\n    _decryptECMultAsync = _asyncToGenerator(function* (buffer, passphrase, progressCallback, scryptParams, promiseInterval) {\n      buffer = buffer.slice(1); // FIXME: we can avoid this\n      passphrase = _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.from(passphrase.normalize('NFC'), 'utf8');\n      scryptParams = scryptParams || SCRYPT_PARAMS;\n      var _prepareDecryptECMult2 = prepareDecryptECMult(buffer, passphrase, progressCallback, scryptParams),\n        addressHash = _prepareDecryptECMult2.addressHash,\n        encryptedPart1 = _prepareDecryptECMult2.encryptedPart1,\n        encryptedPart2 = _prepareDecryptECMult2.encryptedPart2,\n        ownerEntropy = _prepareDecryptECMult2.ownerEntropy,\n        ownerSalt = _prepareDecryptECMult2.ownerSalt,\n        hasLotSeq = _prepareDecryptECMult2.hasLotSeq,\n        compressed = _prepareDecryptECMult2.compressed,\n        N = _prepareDecryptECMult2.N,\n        r = _prepareDecryptECMult2.r,\n        p = _prepareDecryptECMult2.p;\n      var preFactor = yield scryptWrapper(passphrase, ownerSalt, N, r, p, 32, progressCallback, promiseInterval);\n      var _getPassIntAndPoint2 = getPassIntAndPoint(preFactor, ownerEntropy, hasLotSeq),\n        passInt = _getPassIntAndPoint2.passInt,\n        passPoint = _getPassIntAndPoint2.passPoint;\n      var seedBPass = yield scryptWrapper(passPoint, _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.concat([addressHash, ownerEntropy]), 1024, 1, 1, 64, undefined, promiseInterval);\n      var res = finishDecryptECMult(seedBPass, encryptedPart1, encryptedPart2, passInt, compressed);\n\n      // added by overtorment: see https://github.com/bitcoinjs/bip38/issues/60\n      // verify salt matches address\n      var d = _$$_REQUIRE(_dependencyMap[7], \"bigi\").fromBuffer(res.privateKey);\n      var address = getAddress(d, compressed);\n      var checksum = hash256(address).slice(0, 4);\n      var salt = buffer.slice(2, 6);\n      _$$_REQUIRE(_dependencyMap[10], \"assert\").deepEqual(salt, checksum, 'Incorrect passphrase.');\n      return res;\n    });\n    return _decryptECMultAsync.apply(this, arguments);\n  }\n  function decryptECMult(buffer, passphrase, progressCallback, scryptParams) {\n    buffer = buffer.slice(1); // FIXME: we can avoid this\n    passphrase = _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.from(passphrase.normalize('NFC'), 'utf8');\n    scryptParams = scryptParams || SCRYPT_PARAMS;\n    var _prepareDecryptECMult = prepareDecryptECMult(buffer, passphrase, progressCallback, scryptParams),\n      addressHash = _prepareDecryptECMult.addressHash,\n      encryptedPart1 = _prepareDecryptECMult.encryptedPart1,\n      encryptedPart2 = _prepareDecryptECMult.encryptedPart2,\n      ownerEntropy = _prepareDecryptECMult.ownerEntropy,\n      ownerSalt = _prepareDecryptECMult.ownerSalt,\n      hasLotSeq = _prepareDecryptECMult.hasLotSeq,\n      compressed = _prepareDecryptECMult.compressed,\n      N = _prepareDecryptECMult.N,\n      r = _prepareDecryptECMult.r,\n      p = _prepareDecryptECMult.p;\n    var preFactor = _$$_REQUIRE(_dependencyMap[6], \"scryptsy\")(passphrase, ownerSalt, N, r, p, 32, progressCallback);\n    var _getPassIntAndPoint = getPassIntAndPoint(preFactor, ownerEntropy, hasLotSeq),\n      passInt = _getPassIntAndPoint.passInt,\n      passPoint = _getPassIntAndPoint.passPoint;\n    var seedBPass = _$$_REQUIRE(_dependencyMap[6], \"scryptsy\")(passPoint, _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.concat([addressHash, ownerEntropy]), 1024, 1, 1, 64);\n    return finishDecryptECMult(seedBPass, encryptedPart1, encryptedPart2, passInt, compressed);\n  }\n  function verify(string) {\n    var decoded = _$$_REQUIRE(_dependencyMap[4], \"bs58check\").decodeUnsafe(string);\n    if (!decoded) return false;\n    if (decoded.length !== 39) return false;\n    if (decoded.readUInt8(0) !== 0x01) return false;\n    var type = decoded.readUInt8(1);\n    var flag = decoded.readUInt8(2);\n\n    // encrypted WIF\n    if (type === 0x42) {\n      if (flag !== 0xc0 && flag !== 0xe0) return false;\n\n      // EC mult\n    } else if (type === 0x43) {\n      if (flag & ~0x24) return false;\n    } else {\n      return false;\n    }\n    return true;\n  }\n\n  // expose only async methods. they use fast BlueCrypto\n  module.exports = {\n    // decrypt: decrypt,\n    // decryptECMult: decryptECMult,\n    // decryptRaw: decryptRaw,\n    // encrypt: encrypt,\n    // encryptRaw: encryptRaw,\n    decryptAsync: decryptAsync,\n    decryptECMultAsync: decryptECMultAsync,\n    decryptRawAsync: decryptRawAsync,\n    encryptAsync: encryptAsync,\n    encryptRawAsync: encryptRawAsync,\n    verify: verify\n  };\n});","lineCount":384,"map":[[3,2,11,0],[3,6,11,4,"curve"],[3,11,11,9],[3,14,11,12,"_$$_REQUIRE"],[3,25,11,12],[3,26,11,12,"_dependencyMap"],[3,40,11,12],[3,55,11,19,"getCurveByName"],[3,69,11,33],[3,70,11,34],[3,81,11,45],[3,82,11,46],[4,2,15,0],[5,2,16,0],[5,6,16,4,"SCRYPT_PARAMS"],[5,19,16,17],[5,22,16,20],[6,4,17,2,"N"],[6,5,17,3],[6,7,17,5],[6,12,17,10],[7,4,17,12],[8,4,18,2,"r"],[8,5,18,3],[8,7,18,5],[8,8,18,6],[9,4,19,2,"p"],[9,5,19,3],[9,7,19,5],[10,2,20,0],[10,3,20,1],[11,2,21,0],[11,6,21,4,"NULL"],[11,10,21,8],[11,13,21,11,"_$$_REQUIRE"],[11,24,21,11],[11,25,21,11,"_dependencyMap"],[11,39,21,11],[11,59,21,11,"Buffer"],[11,65,21,11],[11,66,21,18,"alloc"],[11,71,21,23],[11,72,21,24],[11,73,21,25],[11,74,21,26],[12,2,23,0],[12,11,23,9,"hash160"],[12,18,23,16,"hash160"],[12,19,23,18,"buffer"],[12,25,23,24],[12,27,23,26],[13,4,24,2],[13,8,24,6,"hash"],[13,12,24,10],[14,4,25,2],[14,8,25,6],[15,6,26,4,"hash"],[15,10,26,8],[15,13,26,11,"_$$_REQUIRE"],[15,24,26,11],[15,25,26,11,"_dependencyMap"],[15,39,26,11],[15,59,26,22],[15,67,26,30],[15,68,26,31],[16,4,27,2],[16,5,27,3],[16,6,27,4],[16,13,27,11,"e"],[16,14,27,12],[16,16,27,14],[17,6,28,4,"hash"],[17,10,28,8],[17,13,28,11,"_$$_REQUIRE"],[17,24,28,11],[17,25,28,11,"_dependencyMap"],[17,39,28,11],[17,59,28,22],[17,70,28,33],[17,71,28,34],[18,4,29,2],[19,4,30,2],[19,11,30,9,"hash"],[19,15,30,13],[19,16,30,14,"update"],[19,22,30,20],[19,23,31,4,"_$$_REQUIRE"],[19,34,31,4],[19,35,31,4,"_dependencyMap"],[19,49,31,4],[19,69,31,15],[19,77,31,23],[19,78,31,24],[19,79,31,25,"update"],[19,85,31,31],[19,86,31,32,"buffer"],[19,92,31,38],[19,93,31,39],[19,94,31,40,"digest"],[19,100,31,46],[19,101,31,47],[19,102,32,2],[19,103,32,3],[19,104,32,4,"digest"],[19,110,32,10],[19,111,32,11],[19,112,32,12],[20,2,33,0],[21,2,35,0],[21,11,35,9,"hash256"],[21,18,35,16,"hash256"],[21,19,35,18,"buffer"],[21,25,35,24],[21,27,35,26],[22,4,36,2],[22,11,36,9,"_$$_REQUIRE"],[22,22,36,9],[22,23,36,9,"_dependencyMap"],[22,37,36,9],[22,57,36,20],[22,65,36,28],[22,66,36,29],[22,67,36,30,"update"],[22,73,36,36],[22,74,37,4,"_$$_REQUIRE"],[22,85,37,4],[22,86,37,4,"_dependencyMap"],[22,100,37,4],[22,120,37,15],[22,128,37,23],[22,129,37,24],[22,130,37,25,"update"],[22,136,37,31],[22,137,37,32,"buffer"],[22,143,37,38],[22,144,37,39],[22,145,37,40,"digest"],[22,151,37,46],[22,152,37,47],[22,153,38,2],[22,154,38,3],[22,155,38,4,"digest"],[22,161,38,10],[22,162,38,11],[22,163,38,12],[23,2,39,0],[24,2,41,0],[24,11,41,9,"getAddress"],[24,21,41,19,"getAddress"],[24,22,41,21,"d"],[24,23,41,22],[24,25,41,24,"compressed"],[24,35,41,34],[24,37,41,36],[25,4,42,2],[25,8,42,6,"Q"],[25,9,42,7],[25,12,42,10,"curve"],[25,17,42,15],[25,18,42,16,"G"],[25,19,42,17],[25,20,42,18,"multiply"],[25,28,42,26],[25,29,42,27,"d"],[25,30,42,28],[25,31,42,29],[25,32,42,30,"getEncoded"],[25,42,42,40],[25,43,42,41,"compressed"],[25,53,42,51],[25,54,42,52],[26,4,43,2],[26,8,43,6,"hash"],[26,12,43,10],[26,15,43,13,"hash160"],[26,22,43,20],[26,23,43,21,"Q"],[26,24,43,22],[26,25,43,23],[27,4,44,2],[27,8,44,6,"payload"],[27,15,44,13],[27,18,44,16,"_$$_REQUIRE"],[27,29,44,16],[27,30,44,16,"_dependencyMap"],[27,44,44,16],[27,64,44,16,"Buffer"],[27,70,44,16],[27,71,44,23,"allocUnsafe"],[27,82,44,34],[27,83,44,35],[27,85,44,37],[27,86,44,38],[28,4,45,2,"payload"],[28,11,45,9],[28,12,45,10,"writeUInt8"],[28,22,45,20],[28,23,45,21],[28,27,45,25],[28,29,45,27],[28,30,45,28],[28,31,45,29],[28,33,45,30],[29,4,46,2,"hash"],[29,8,46,6],[29,9,46,7,"copy"],[29,13,46,11],[29,14,46,12,"payload"],[29,21,46,19],[29,23,46,21],[29,24,46,22],[29,25,46,23],[30,4,48,2],[30,11,48,9,"_$$_REQUIRE"],[30,22,48,9],[30,23,48,9,"_dependencyMap"],[30,37,48,9],[30,55,48,19,"encode"],[30,61,48,25],[30,62,48,26,"payload"],[30,69,48,33],[30,70,48,34],[31,2,49,0],[32,2,49,1],[32,11,51,15,"scryptWrapper"],[32,24,51,28,"scryptWrapper"],[32,25,51,28,"_x"],[32,27,51,28],[32,29,51,28,"_x2"],[32,32,51,28],[32,34,51,28,"_x3"],[32,37,51,28],[32,39,51,28,"_x4"],[32,42,51,28],[32,44,51,28,"_x5"],[32,47,51,28],[32,49,51,28,"_x6"],[32,52,51,28],[32,54,51,28,"_x7"],[32,57,51,28],[32,59,51,28,"_x8"],[32,62,51,28],[33,4,51,28],[33,11,51,28,"_scryptWrapper"],[33,25,51,28],[33,26,51,28,"apply"],[33,31,51,28],[33,38,51,28,"arguments"],[33,47,51,28],[34,2,51,28],[35,2,51,28],[35,11,51,28,"_scryptWrapper"],[35,26,51,28],[36,4,51,28,"_scryptWrapper"],[36,18,51,28],[36,21,51,28,"_asyncToGenerator"],[36,38,51,28],[36,39,51,0],[36,50,51,29,"secret"],[36,56,51,35],[36,58,51,37,"salt"],[36,62,51,41],[36,64,51,43,"N"],[36,65,51,44],[36,67,51,46,"r"],[36,68,51,47],[36,70,51,49,"p"],[36,71,51,50],[36,73,51,52,"dkLen"],[36,78,51,57],[36,80,51,59,"progressCallback"],[36,96,51,75],[36,98,51,77,"promiseInterval"],[36,113,51,92],[36,115,51,94],[37,6,52,2],[37,10,52,6,"_$$_REQUIRE"],[37,21,52,6],[37,22,52,6,"_dependencyMap"],[37,36,52,6],[37,69,52,17,"isAvailable"],[37,80,52,28],[37,81,52,29],[37,82,52,30],[37,84,52,32],[38,8,53,4,"secret"],[38,14,53,10],[38,17,53,13,"_$$_REQUIRE"],[38,28,53,13],[38,29,53,13,"_dependencyMap"],[38,43,53,13],[38,63,53,13,"Buffer"],[38,69,53,13],[38,70,53,20,"from"],[38,74,53,24],[38,75,53,25,"secret"],[38,81,53,31],[38,82,53,32],[38,83,53,33,"toString"],[38,91,53,41],[38,92,53,42],[38,97,53,47],[38,98,53,48],[39,8,54,4,"salt"],[39,12,54,8],[39,15,54,11,"_$$_REQUIRE"],[39,26,54,11],[39,27,54,11,"_dependencyMap"],[39,41,54,11],[39,61,54,11,"Buffer"],[39,67,54,11],[39,68,54,18,"from"],[39,72,54,22],[39,73,54,23,"salt"],[39,77,54,27],[39,78,54,28],[39,79,54,29,"toString"],[39,87,54,37],[39,88,54,38],[39,93,54,43],[39,94,54,44],[40,8,55,4],[40,12,55,10,"hex"],[40,15,55,13],[40,24,55,22,"_$$_REQUIRE"],[40,35,55,22],[40,36,55,22,"_dependencyMap"],[40,50,55,22],[40,83,55,33,"scrypt"],[40,89,55,39],[40,90,55,40,"secret"],[40,96,55,46],[40,98,55,48,"salt"],[40,102,55,52],[40,104,55,54,"N"],[40,105,55,55],[40,107,55,57,"r"],[40,108,55,58],[40,110,55,60,"p"],[40,111,55,61],[40,113,55,63,"dkLen"],[40,118,55,68],[40,119,55,69],[41,8,56,4],[41,15,56,11,"_$$_REQUIRE"],[41,26,56,11],[41,27,56,11,"_dependencyMap"],[41,41,56,11],[41,61,56,11,"Buffer"],[41,67,56,11],[41,68,56,18,"from"],[41,72,56,22],[41,73,56,23,"hex"],[41,76,56,26],[41,78,56,28],[41,83,56,33],[41,84,56,34],[42,6,57,2],[42,7,57,3],[42,13,57,9],[43,8,58,4],[44,8,59,4],[44,21,59,17,"_$$_REQUIRE"],[44,32,59,17],[44,33,59,17,"_dependencyMap"],[44,47,59,17],[44,64,59,24,"async"],[44,69,59,29],[44,70,59,30,"secret"],[44,76,59,36],[44,78,59,38,"salt"],[44,82,59,42],[44,84,59,44,"N"],[44,85,59,45],[44,87,59,47,"r"],[44,88,59,48],[44,90,59,50,"p"],[44,91,59,51],[44,93,59,53,"dkLen"],[44,98,59,58],[44,100,59,60,"progressCallback"],[44,116,59,76],[44,118,59,78,"promiseInterval"],[44,133,59,93],[44,134,59,94],[45,6,60,2],[46,4,61,0],[46,5,61,1],[47,4,61,1],[47,11,61,1,"_scryptWrapper"],[47,25,61,1],[47,26,61,1,"apply"],[47,31,61,1],[47,38,61,1,"arguments"],[47,47,61,1],[48,2,61,1],[49,2,63,0],[49,11,63,9,"prepareEncryptRaw"],[49,28,63,26,"prepareEncryptRaw"],[49,29,63,28,"buffer"],[49,35,63,34],[49,37,63,36,"compressed"],[49,47,63,46],[49,49,63,48,"passphrase"],[49,59,63,58],[49,61,63,60,"scryptParams"],[49,73,63,72],[49,75,63,74],[50,4,64,2],[50,8,64,6,"buffer"],[50,14,64,12],[50,15,64,13,"length"],[50,21,64,19],[50,26,64,24],[50,28,64,26],[50,30,64,28],[50,36,64,34],[50,40,64,38,"Error"],[50,45,64,43],[50,46,64,44],[50,74,64,72],[50,75,64,73],[51,4,66,2],[51,8,66,6,"d"],[51,9,66,7],[51,12,66,10,"_$$_REQUIRE"],[51,23,66,10],[51,24,66,10,"_dependencyMap"],[51,38,66,10],[51,51,66,21,"fromBuffer"],[51,61,66,31],[51,62,66,32,"buffer"],[51,68,66,38],[51,69,66,39],[52,4,67,2],[52,8,67,6,"address"],[52,15,67,13],[52,18,67,16,"getAddress"],[52,28,67,26],[52,29,67,27,"d"],[52,30,67,28],[52,32,67,30,"compressed"],[52,42,67,40],[52,43,67,41],[53,4,68,2],[53,8,68,6,"secret"],[53,14,68,12],[53,17,68,15,"_$$_REQUIRE"],[53,28,68,15],[53,29,68,15,"_dependencyMap"],[53,43,68,15],[53,63,68,15,"Buffer"],[53,69,68,15],[53,70,68,22,"from"],[53,74,68,26],[53,75,68,27,"passphrase"],[53,85,68,37],[53,86,68,38,"normalize"],[53,95,68,47],[53,96,68,48],[53,101,68,53],[53,102,68,54],[53,104,68,56],[53,110,68,62],[53,111,68,63],[54,4,69,2],[54,8,69,6,"salt"],[54,12,69,10],[54,15,69,13,"hash256"],[54,22,69,20],[54,23,69,21,"address"],[54,30,69,28],[54,31,69,29],[54,32,69,30,"slice"],[54,37,69,35],[54,38,69,36],[54,39,69,37],[54,41,69,39],[54,42,69,40],[54,43,69,41],[55,4,71,2],[55,8,71,6,"N"],[55,9,71,7],[55,12,71,10,"scryptParams"],[55,24,71,22],[55,25,71,23,"N"],[55,26,71,24],[56,4,72,2],[56,8,72,6,"r"],[56,9,72,7],[56,12,72,10,"scryptParams"],[56,24,72,22],[56,25,72,23,"r"],[56,26,72,24],[57,4,73,2],[57,8,73,6,"p"],[57,9,73,7],[57,12,73,10,"scryptParams"],[57,24,73,22],[57,25,73,23,"p"],[57,26,73,24],[58,4,75,2],[58,11,75,9],[59,6,76,4,"secret"],[59,12,76,10],[59,14,76,4,"secret"],[59,20,76,10],[60,6,77,4,"salt"],[60,10,77,8],[60,12,77,4,"salt"],[60,16,77,8],[61,6,78,4,"N"],[61,7,78,5],[61,9,78,4,"N"],[61,10,78,5],[62,6,79,4,"r"],[62,7,79,5],[62,9,79,4,"r"],[62,10,79,5],[63,6,80,4,"p"],[63,7,80,5],[63,9,80,4,"p"],[64,4,81,2],[64,5,81,3],[65,2,82,0],[66,2,84,0],[66,11,84,9,"finishEncryptRaw"],[66,27,84,25,"finishEncryptRaw"],[66,28,84,27,"buffer"],[66,34,84,33],[66,36,84,35,"compressed"],[66,46,84,45],[66,48,84,47,"salt"],[66,52,84,51],[66,54,84,53,"scryptBuf"],[66,63,84,62],[66,65,84,64],[67,4,85,2],[67,8,85,6,"derivedHalf1"],[67,20,85,18],[67,23,85,21,"scryptBuf"],[67,32,85,30],[67,33,85,31,"slice"],[67,38,85,36],[67,39,85,37],[67,40,85,38],[67,42,85,40],[67,44,85,42],[67,45,85,43],[68,4,86,2],[68,8,86,6,"derivedHalf2"],[68,20,86,18],[68,23,86,21,"scryptBuf"],[68,32,86,30],[68,33,86,31,"slice"],[68,38,86,36],[68,39,86,37],[68,41,86,39],[68,43,86,41],[68,45,86,43],[68,46,86,44],[69,4,88,2],[69,8,88,6,"xorBuf"],[69,14,88,12],[69,17,88,15,"_$$_REQUIRE"],[69,28,88,15],[69,29,88,15,"_dependencyMap"],[69,43,88,15],[69,70,88,19,"derivedHalf1"],[69,82,88,31],[69,84,88,33,"buffer"],[69,90,88,39],[69,91,88,40],[70,4,89,2],[70,8,89,6,"cipher"],[70,14,89,12],[70,17,89,15,"_$$_REQUIRE"],[70,28,89,15],[70,29,89,15,"_dependencyMap"],[70,43,89,15],[70,66,89,19,"createCipheriv"],[70,80,89,33],[70,81,89,34],[70,94,89,47],[70,96,89,49,"derivedHalf2"],[70,108,89,61],[70,110,89,63,"NULL"],[70,114,89,67],[70,115,89,68],[71,4,90,2,"cipher"],[71,10,90,8],[71,11,90,9,"setAutoPadding"],[71,25,90,23],[71,26,90,24],[71,31,90,29],[71,32,90,30],[72,4,91,2,"cipher"],[72,10,91,8],[72,11,91,9,"end"],[72,14,91,12],[72,15,91,13,"xorBuf"],[72,21,91,19],[72,22,91,20],[73,4,93,2],[73,8,93,6,"cipherText"],[73,18,93,16],[73,21,93,19,"cipher"],[73,27,93,25],[73,28,93,26,"read"],[73,32,93,30],[73,33,93,31],[73,34,93,32],[75,4,95,2],[76,4,96,2],[76,8,96,6,"result"],[76,14,96,12],[76,17,96,15,"_$$_REQUIRE"],[76,28,96,15],[76,29,96,15,"_dependencyMap"],[76,43,96,15],[76,63,96,15,"Buffer"],[76,69,96,15],[76,70,96,22,"allocUnsafe"],[76,81,96,33],[76,82,96,34],[76,83,96,35],[76,86,96,38],[76,88,96,40],[76,89,96,41],[77,4,97,2,"result"],[77,10,97,8],[77,11,97,9,"writeUInt8"],[77,21,97,19],[77,22,97,20],[77,26,97,24],[77,28,97,26],[77,29,97,27],[77,30,97,28],[78,4,98,2,"result"],[78,10,98,8],[78,11,98,9,"writeUInt8"],[78,21,98,19],[78,22,98,20],[78,26,98,24],[78,28,98,26],[78,29,98,27],[78,30,98,28],[79,4,99,2,"result"],[79,10,99,8],[79,11,99,9,"writeUInt8"],[79,21,99,19],[79,22,99,20,"compressed"],[79,32,99,30],[79,35,99,33],[79,39,99,37],[79,42,99,40],[79,46,99,44],[79,48,99,46],[79,49,99,47],[79,50,99,48],[80,4,100,2,"salt"],[80,8,100,6],[80,9,100,7,"copy"],[80,13,100,11],[80,14,100,12,"result"],[80,20,100,18],[80,22,100,20],[80,23,100,21],[80,24,100,22],[81,4,101,2,"cipherText"],[81,14,101,12],[81,15,101,13,"copy"],[81,19,101,17],[81,20,101,18,"result"],[81,26,101,24],[81,28,101,26],[81,29,101,27],[81,30,101,28],[82,4,103,2],[82,11,103,9,"result"],[82,17,103,15],[83,2,104,0],[84,2,104,1],[84,11,106,15,"encryptRawAsync"],[84,26,106,30,"encryptRawAsync"],[84,27,106,30,"_x9"],[84,30,106,30],[84,32,106,30,"_x0"],[84,35,106,30],[84,37,106,30,"_x1"],[84,40,106,30],[84,42,106,30,"_x10"],[84,46,106,30],[84,48,106,30,"_x11"],[84,52,106,30],[84,54,106,30,"_x12"],[84,58,106,30],[85,4,106,30],[85,11,106,30,"_encryptRawAsync"],[85,27,106,30],[85,28,106,30,"apply"],[85,33,106,30],[85,40,106,30,"arguments"],[85,49,106,30],[86,2,106,30],[87,2,106,30],[87,11,106,30,"_encryptRawAsync"],[87,28,106,30],[88,4,106,30,"_encryptRawAsync"],[88,20,106,30],[88,23,106,30,"_asyncToGenerator"],[88,40,106,30],[88,41,106,0],[88,52,106,32,"buffer"],[88,58,106,38],[88,60,106,40,"compressed"],[88,70,106,50],[88,72,106,52,"passphrase"],[88,82,106,62],[88,84,106,64,"progressCallback"],[88,100,106,80],[88,102,106,82,"scryptParams"],[88,114,106,94],[88,116,106,96,"promiseInterval"],[88,131,106,111],[88,133,106,113],[89,6,107,2,"scryptParams"],[89,18,107,14],[89,21,107,17,"scryptParams"],[89,33,107,29],[89,37,107,33,"SCRYPT_PARAMS"],[89,50,107,46],[90,6,108,2],[90,10,108,2,"_prepareEncryptRaw2"],[90,29,108,2],[90,32,114,6,"prepareEncryptRaw"],[90,49,114,23],[90,50,114,24,"buffer"],[90,56,114,30],[90,58,114,32,"compressed"],[90,68,114,42],[90,70,114,44,"passphrase"],[90,80,114,54],[90,82,114,56,"scryptParams"],[90,94,114,68],[90,95,114,69],[91,8,109,4,"secret"],[91,14,109,10],[91,17,109,10,"_prepareEncryptRaw2"],[91,36,109,10],[91,37,109,4,"secret"],[91,43,109,10],[92,8,110,4,"salt"],[92,12,110,8],[92,15,110,8,"_prepareEncryptRaw2"],[92,34,110,8],[92,35,110,4,"salt"],[92,39,110,8],[93,8,111,4,"N"],[93,9,111,5],[93,12,111,5,"_prepareEncryptRaw2"],[93,31,111,5],[93,32,111,4,"N"],[93,33,111,5],[94,8,112,4,"r"],[94,9,112,5],[94,12,112,5,"_prepareEncryptRaw2"],[94,31,112,5],[94,32,112,4,"r"],[94,33,112,5],[95,8,113,4,"p"],[95,9,113,5],[95,12,113,5,"_prepareEncryptRaw2"],[95,31,113,5],[95,32,113,4,"p"],[95,33,113,5],[96,6,116,2],[96,10,116,6,"scryptBuf"],[96,19,116,15],[96,28,116,24,"scryptWrapper"],[96,41,116,37],[96,42,116,38,"secret"],[96,48,116,44],[96,50,116,46,"salt"],[96,54,116,50],[96,56,116,52,"N"],[96,57,116,53],[96,59,116,55,"r"],[96,60,116,56],[96,62,116,58,"p"],[96,63,116,59],[96,65,116,61],[96,67,116,63],[96,69,116,65,"progressCallback"],[96,85,116,81],[96,87,116,83,"promiseInterval"],[96,102,116,98],[96,103,116,99],[97,6,118,2],[97,13,118,9,"finishEncryptRaw"],[97,29,118,25],[97,30,118,26,"buffer"],[97,36,118,32],[97,38,118,34,"compressed"],[97,48,118,44],[97,50,118,46,"salt"],[97,54,118,50],[97,56,118,52,"scryptBuf"],[97,65,118,61],[97,66,118,62],[98,4,119,0],[98,5,119,1],[99,4,119,1],[99,11,119,1,"_encryptRawAsync"],[99,27,119,1],[99,28,119,1,"apply"],[99,33,119,1],[99,40,119,1,"arguments"],[99,49,119,1],[100,2,119,1],[101,2,121,0],[101,11,121,9,"encryptRaw"],[101,21,121,19,"encryptRaw"],[101,22,121,21,"buffer"],[101,28,121,27],[101,30,121,29,"compressed"],[101,40,121,39],[101,42,121,41,"passphrase"],[101,52,121,51],[101,54,121,53,"progressCallback"],[101,70,121,69],[101,72,121,71,"scryptParams"],[101,84,121,83],[101,86,121,85],[102,4,122,2,"scryptParams"],[102,16,122,14],[102,19,122,17,"scryptParams"],[102,31,122,29],[102,35,122,33,"SCRYPT_PARAMS"],[102,48,122,46],[103,4,123,2],[103,8,123,2,"_prepareEncryptRaw"],[103,26,123,2],[103,29,129,6,"prepareEncryptRaw"],[103,46,129,23],[103,47,129,24,"buffer"],[103,53,129,30],[103,55,129,32,"compressed"],[103,65,129,42],[103,67,129,44,"passphrase"],[103,77,129,54],[103,79,129,56,"scryptParams"],[103,91,129,68],[103,92,129,69],[104,6,124,4,"secret"],[104,12,124,10],[104,15,124,10,"_prepareEncryptRaw"],[104,33,124,10],[104,34,124,4,"secret"],[104,40,124,10],[105,6,125,4,"salt"],[105,10,125,8],[105,13,125,8,"_prepareEncryptRaw"],[105,31,125,8],[105,32,125,4,"salt"],[105,36,125,8],[106,6,126,4,"N"],[106,7,126,5],[106,10,126,5,"_prepareEncryptRaw"],[106,28,126,5],[106,29,126,4,"N"],[106,30,126,5],[107,6,127,4,"r"],[107,7,127,5],[107,10,127,5,"_prepareEncryptRaw"],[107,28,127,5],[107,29,127,4,"r"],[107,30,127,5],[108,6,128,4,"p"],[108,7,128,5],[108,10,128,5,"_prepareEncryptRaw"],[108,28,128,5],[108,29,128,4,"p"],[108,30,128,5],[109,4,131,2],[109,8,131,6,"scryptBuf"],[109,17,131,15],[109,20,131,18,"_$$_REQUIRE"],[109,31,131,18],[109,32,131,18,"_dependencyMap"],[109,46,131,18],[109,63,131,25,"secret"],[109,69,131,31],[109,71,131,33,"salt"],[109,75,131,37],[109,77,131,39,"N"],[109,78,131,40],[109,80,131,42,"r"],[109,81,131,43],[109,83,131,45,"p"],[109,84,131,46],[109,86,131,48],[109,88,131,50],[109,90,131,52,"progressCallback"],[109,106,131,68],[109,107,131,69],[110,4,133,2],[110,11,133,9,"finishEncryptRaw"],[110,27,133,25],[110,28,133,26,"buffer"],[110,34,133,32],[110,36,133,34,"compressed"],[110,46,133,44],[110,48,133,46,"salt"],[110,52,133,50],[110,54,133,52,"scryptBuf"],[110,63,133,61],[110,64,133,62],[111,2,134,0],[112,2,134,1],[112,11,136,15,"encryptAsync"],[112,23,136,27,"encryptAsync"],[112,24,136,27,"_x13"],[112,28,136,27],[112,30,136,27,"_x14"],[112,34,136,27],[112,36,136,27,"_x15"],[112,40,136,27],[112,42,136,27,"_x16"],[112,46,136,27],[112,48,136,27,"_x17"],[112,52,136,27],[112,54,136,27,"_x18"],[112,58,136,27],[113,4,136,27],[113,11,136,27,"_encryptAsync"],[113,24,136,27],[113,25,136,27,"apply"],[113,30,136,27],[113,37,136,27,"arguments"],[113,46,136,27],[114,2,136,27],[115,2,136,27],[115,11,136,27,"_encryptAsync"],[115,25,136,27],[116,4,136,27,"_encryptAsync"],[116,17,136,27],[116,20,136,27,"_asyncToGenerator"],[116,37,136,27],[116,38,136,0],[116,49,136,29,"buffer"],[116,55,136,35],[116,57,136,37,"compressed"],[116,67,136,47],[116,69,136,49,"passphrase"],[116,79,136,59],[116,81,136,61,"progressCallback"],[116,97,136,77],[116,99,136,79,"scryptParams"],[116,111,136,91],[116,113,136,93,"promiseInterval"],[116,128,136,108],[116,130,136,110],[117,6,137,2],[117,13,137,9,"_$$_REQUIRE"],[117,24,137,9],[117,25,137,9,"_dependencyMap"],[117,39,137,9],[117,57,137,19,"encode"],[117,63,137,25],[117,70,137,32,"encryptRawAsync"],[117,85,137,47],[117,86,137,48,"buffer"],[117,92,137,54],[117,94,137,56,"compressed"],[117,104,137,66],[117,106,137,68,"passphrase"],[117,116,137,78],[117,118,137,80,"progressCallback"],[117,134,137,96],[117,136,137,98,"scryptParams"],[117,148,137,110],[117,150,137,112,"promiseInterval"],[117,165,137,127],[117,166,137,128],[117,167,137,129],[118,4,138,0],[118,5,138,1],[119,4,138,1],[119,11,138,1,"_encryptAsync"],[119,24,138,1],[119,25,138,1,"apply"],[119,30,138,1],[119,37,138,1,"arguments"],[119,46,138,1],[120,2,138,1],[121,2,140,0],[121,11,140,9,"encrypt"],[121,18,140,16,"encrypt"],[121,19,140,18,"buffer"],[121,25,140,24],[121,27,140,26,"compressed"],[121,37,140,36],[121,39,140,38,"passphrase"],[121,49,140,48],[121,51,140,50,"progressCallback"],[121,67,140,66],[121,69,140,68,"scryptParams"],[121,81,140,80],[121,83,140,82],[122,4,141,2],[122,11,141,9,"_$$_REQUIRE"],[122,22,141,9],[122,23,141,9,"_dependencyMap"],[122,37,141,9],[122,55,141,19,"encode"],[122,61,141,25],[122,62,141,26,"encryptRaw"],[122,72,141,36],[122,73,141,37,"buffer"],[122,79,141,43],[122,81,141,45,"compressed"],[122,91,141,55],[122,93,141,57,"passphrase"],[122,103,141,67],[122,105,141,69,"progressCallback"],[122,121,141,85],[122,123,141,87,"scryptParams"],[122,135,141,99],[122,136,141,100],[122,137,141,101],[123,2,142,0],[124,2,144,0],[124,11,144,9,"prepareDecryptRaw"],[124,28,144,26,"prepareDecryptRaw"],[124,29,144,28,"buffer"],[124,35,144,34],[124,37,144,36,"progressCallback"],[124,53,144,52],[124,55,144,54,"scryptParams"],[124,67,144,66],[124,69,144,68],[125,4,145,2],[126,4,146,2],[126,8,146,6,"buffer"],[126,14,146,12],[126,15,146,13,"length"],[126,21,146,19],[126,26,146,24],[126,28,146,26],[126,30,146,28],[126,36,146,34],[126,40,146,38,"Error"],[126,45,146,43],[126,46,146,44],[126,73,146,71],[126,74,146,72],[127,4,147,2],[127,8,147,6,"buffer"],[127,14,147,12],[127,15,147,13,"readUInt8"],[127,24,147,22],[127,25,147,23],[127,26,147,24],[127,27,147,25],[127,32,147,30],[127,36,147,34],[127,38,147,36],[127,44,147,42],[127,48,147,46,"Error"],[127,53,147,51],[127,54,147,52],[127,76,147,74],[127,77,147,75],[129,4,149,2],[130,4,150,2],[130,8,150,6,"type"],[130,12,150,10],[130,15,150,13,"buffer"],[130,21,150,19],[130,22,150,20,"readUInt8"],[130,31,150,29],[130,32,150,30],[130,33,150,31],[130,34,150,32],[131,4,151,2],[131,8,151,6,"type"],[131,12,151,10],[131,17,151,15],[131,21,151,19],[131,23,151,21],[131,30,151,28],[132,6,151,30,"decryptEC"],[132,15,151,39],[132,17,151,41],[133,4,151,46],[133,5,151,47],[134,4,152,2],[134,8,152,6,"type"],[134,12,152,10],[134,17,152,15],[134,21,152,19],[134,23,152,21],[134,29,152,27],[134,33,152,31,"Error"],[134,38,152,36],[134,39,152,37],[134,59,152,57],[134,60,152,58],[135,4,154,2],[135,8,154,6,"flagByte"],[135,16,154,14],[135,19,154,17,"buffer"],[135,25,154,23],[135,26,154,24,"readUInt8"],[135,35,154,33],[135,36,154,34],[135,37,154,35],[135,38,154,36],[136,4,155,2],[136,8,155,6,"compressed"],[136,18,155,16],[136,21,155,19,"flagByte"],[136,29,155,27],[136,34,155,32],[136,38,155,36],[137,4,156,2],[137,8,156,6],[137,9,156,7,"compressed"],[137,19,156,17],[137,23,156,21,"flagByte"],[137,31,156,29],[137,36,156,34],[137,40,156,38],[137,42,156,40],[137,48,156,46],[137,52,156,50,"Error"],[137,57,156,55],[137,58,156,56],[137,90,156,88],[137,91,156,89],[138,4,158,2],[138,8,158,6,"N"],[138,9,158,7],[138,12,158,10,"scryptParams"],[138,24,158,22],[138,25,158,23,"N"],[138,26,158,24],[139,4,159,2],[139,8,159,6,"r"],[139,9,159,7],[139,12,159,10,"scryptParams"],[139,24,159,22],[139,25,159,23,"r"],[139,26,159,24],[140,4,160,2],[140,8,160,6,"p"],[140,9,160,7],[140,12,160,10,"scryptParams"],[140,24,160,22],[140,25,160,23,"p"],[140,26,160,24],[141,4,162,2],[141,8,162,6,"salt"],[141,12,162,10],[141,15,162,13,"buffer"],[141,21,162,19],[141,22,162,20,"slice"],[141,27,162,25],[141,28,162,26],[141,29,162,27],[141,31,162,29],[141,32,162,30],[141,33,162,31],[142,4,163,2],[142,11,163,9],[143,6,164,4,"salt"],[143,10,164,8],[143,12,164,4,"salt"],[143,16,164,8],[144,6,165,4,"compressed"],[144,16,165,14],[144,18,165,4,"compressed"],[144,28,165,14],[145,6,166,4,"N"],[145,7,166,5],[145,9,166,4,"N"],[145,10,166,5],[146,6,167,4,"r"],[146,7,167,5],[146,9,167,4,"r"],[146,10,167,5],[147,6,168,4,"p"],[147,7,168,5],[147,9,168,4,"p"],[148,4,169,2],[148,5,169,3],[149,2,170,0],[150,2,172,0],[150,11,172,9,"finishDecryptRaw"],[150,27,172,25,"finishDecryptRaw"],[150,28,172,27,"buffer"],[150,34,172,33],[150,36,172,35,"salt"],[150,40,172,39],[150,42,172,41,"compressed"],[150,52,172,51],[150,54,172,53,"scryptBuf"],[150,63,172,62],[150,65,172,64],[151,4,173,2],[151,8,173,6,"derivedHalf1"],[151,20,173,18],[151,23,173,21,"scryptBuf"],[151,32,173,30],[151,33,173,31,"slice"],[151,38,173,36],[151,39,173,37],[151,40,173,38],[151,42,173,40],[151,44,173,42],[151,45,173,43],[152,4,174,2],[152,8,174,6,"derivedHalf2"],[152,20,174,18],[152,23,174,21,"scryptBuf"],[152,32,174,30],[152,33,174,31,"slice"],[152,38,174,36],[152,39,174,37],[152,41,174,39],[152,43,174,41],[152,45,174,43],[152,46,174,44],[153,4,176,2],[153,8,176,6,"privKeyBuf"],[153,18,176,16],[153,21,176,19,"buffer"],[153,27,176,25],[153,28,176,26,"slice"],[153,33,176,31],[153,34,176,32],[153,35,176,33],[153,37,176,35],[153,38,176,36],[153,41,176,39],[153,43,176,41],[153,44,176,42],[154,4,177,2],[154,8,177,6,"decipher"],[154,16,177,14],[154,19,177,17,"_$$_REQUIRE"],[154,30,177,17],[154,31,177,17,"_dependencyMap"],[154,45,177,17],[154,68,177,21,"createDecipheriv"],[154,84,177,37],[154,85,177,38],[154,98,177,51],[154,100,177,53,"derivedHalf2"],[154,112,177,65],[154,114,177,67,"NULL"],[154,118,177,71],[154,119,177,72],[155,4,178,2,"decipher"],[155,12,178,10],[155,13,178,11,"setAutoPadding"],[155,27,178,25],[155,28,178,26],[155,33,178,31],[155,34,178,32],[156,4,179,2,"decipher"],[156,12,179,10],[156,13,179,11,"end"],[156,16,179,14],[156,17,179,15,"privKeyBuf"],[156,27,179,25],[156,28,179,26],[157,4,181,2],[157,8,181,6,"plainText"],[157,17,181,15],[157,20,181,18,"decipher"],[157,28,181,26],[157,29,181,27,"read"],[157,33,181,31],[157,34,181,32],[157,35,181,33],[158,4,182,2],[158,8,182,6,"privateKey"],[158,18,182,16],[158,21,182,19,"_$$_REQUIRE"],[158,32,182,19],[158,33,182,19,"_dependencyMap"],[158,47,182,19],[158,74,182,23,"derivedHalf1"],[158,86,182,35],[158,88,182,37,"plainText"],[158,97,182,46],[158,98,182,47],[160,4,184,2],[161,4,185,2],[161,8,185,6,"d"],[161,9,185,7],[161,12,185,10,"_$$_REQUIRE"],[161,23,185,10],[161,24,185,10,"_dependencyMap"],[161,38,185,10],[161,51,185,21,"fromBuffer"],[161,61,185,31],[161,62,185,32,"privateKey"],[161,72,185,42],[161,73,185,43],[162,4,186,2],[162,8,186,6,"address"],[162,15,186,13],[162,18,186,16,"getAddress"],[162,28,186,26],[162,29,186,27,"d"],[162,30,186,28],[162,32,186,30,"compressed"],[162,42,186,40],[162,43,186,41],[163,4,187,2],[163,8,187,6,"checksum"],[163,16,187,14],[163,19,187,17,"hash256"],[163,26,187,24],[163,27,187,25,"address"],[163,34,187,32],[163,35,187,33],[163,36,187,34,"slice"],[163,41,187,39],[163,42,187,40],[163,43,187,41],[163,45,187,43],[163,46,187,44],[163,47,187,45],[164,4,188,2,"_$$_REQUIRE"],[164,15,188,2],[164,16,188,2,"_dependencyMap"],[164,30,188,2],[164,46,188,9,"deepStrictEqual"],[164,61,188,24],[164,62,188,25,"salt"],[164,66,188,29],[164,68,188,31,"checksum"],[164,76,188,39],[164,78,188,41],[164,100,188,63],[164,101,188,64],[165,4,190,2],[165,11,190,9],[166,6,191,4,"privateKey"],[166,16,191,14],[166,18,191,16,"privateKey"],[166,28,191,26],[167,6,192,4,"compressed"],[167,16,192,14],[167,18,192,16,"compressed"],[168,4,193,2],[168,5,193,3],[169,2,194,0],[170,2,194,1],[170,11,196,15,"decryptRawAsync"],[170,26,196,30,"decryptRawAsync"],[170,27,196,30,"_x19"],[170,31,196,30],[170,33,196,30,"_x20"],[170,37,196,30],[170,39,196,30,"_x21"],[170,43,196,30],[170,45,196,30,"_x22"],[170,49,196,30],[170,51,196,30,"_x23"],[170,55,196,30],[171,4,196,30],[171,11,196,30,"_decryptRawAsync"],[171,27,196,30],[171,28,196,30,"apply"],[171,33,196,30],[171,40,196,30,"arguments"],[171,49,196,30],[172,2,196,30],[172,4,212,0],[173,2,212,0],[173,11,212,0,"_decryptRawAsync"],[173,28,212,0],[174,4,212,0,"_decryptRawAsync"],[174,20,212,0],[174,23,212,0,"_asyncToGenerator"],[174,40,212,0],[174,41,196,0],[174,52,196,32,"buffer"],[174,58,196,38],[174,60,196,40,"passphrase"],[174,70,196,50],[174,72,196,52,"progressCallback"],[174,88,196,68],[174,90,196,70,"scryptParams"],[174,102,196,82],[174,104,196,84,"promiseInterval"],[174,119,196,99],[174,121,196,101],[175,6,197,2,"scryptParams"],[175,18,197,14],[175,21,197,17,"scryptParams"],[175,33,197,29],[175,37,197,33,"SCRYPT_PARAMS"],[175,50,197,46],[176,6,198,2],[176,10,198,2,"_prepareDecryptRaw2"],[176,29,198,2],[176,32,205,6,"prepareDecryptRaw"],[176,49,205,23],[176,50,205,24,"buffer"],[176,56,205,30],[176,58,205,32,"progressCallback"],[176,74,205,48],[176,76,205,50,"scryptParams"],[176,88,205,62],[176,89,205,63],[177,8,199,4,"salt"],[177,12,199,8],[177,15,199,8,"_prepareDecryptRaw2"],[177,34,199,8],[177,35,199,4,"salt"],[177,39,199,8],[178,8,200,4,"compressed"],[178,18,200,14],[178,21,200,14,"_prepareDecryptRaw2"],[178,40,200,14],[178,41,200,4,"compressed"],[178,51,200,14],[179,8,201,4,"N"],[179,9,201,5],[179,12,201,5,"_prepareDecryptRaw2"],[179,31,201,5],[179,32,201,4,"N"],[179,33,201,5],[180,8,202,4,"r"],[180,9,202,5],[180,12,202,5,"_prepareDecryptRaw2"],[180,31,202,5],[180,32,202,4,"r"],[180,33,202,5],[181,8,203,4,"p"],[181,9,203,5],[181,12,203,5,"_prepareDecryptRaw2"],[181,31,203,5],[181,32,203,4,"p"],[181,33,203,5],[182,8,204,4,"decryptEC"],[182,17,204,13],[182,20,204,13,"_prepareDecryptRaw2"],[182,39,204,13],[182,40,204,4,"decryptEC"],[182,49,204,13],[183,6,206,2],[183,10,206,6,"decryptEC"],[183,19,206,15],[183,24,206,20],[183,28,206,24],[183,30,206,26],[183,37,206,33,"decryptECMultAsync"],[183,55,206,51],[183,56,206,52,"buffer"],[183,62,206,58],[183,64,206,60,"passphrase"],[183,74,206,70],[183,76,206,72,"progressCallback"],[183,92,206,88],[183,94,206,90,"scryptParams"],[183,106,206,102],[183,108,206,104,"promiseInterval"],[183,123,206,119],[183,124,206,120],[184,6,208,2],[184,10,208,6,"scryptBuf"],[184,19,208,15],[184,28,208,24,"scryptWrapper"],[184,41,208,37],[184,42,208,38,"passphrase"],[184,52,208,48],[184,53,208,49,"normalize"],[184,62,208,58],[184,63,208,59],[184,68,208,64],[184,69,208,65],[184,71,208,67,"salt"],[184,75,208,71],[184,77,208,73,"N"],[184,78,208,74],[184,80,208,76,"r"],[184,81,208,77],[184,83,208,79,"p"],[184,84,208,80],[184,86,208,82],[184,88,208,84],[184,90,208,86,"progressCallback"],[184,106,208,102],[184,108,208,104,"promiseInterval"],[184,123,208,119],[184,124,208,120],[185,6,209,2],[185,13,209,9,"finishDecryptRaw"],[185,29,209,25],[185,30,209,26,"buffer"],[185,36,209,32],[185,38,209,34,"salt"],[185,42,209,38],[185,44,209,40,"compressed"],[185,54,209,50],[185,56,209,52,"scryptBuf"],[185,65,209,61],[185,66,209,62],[186,4,210,0],[186,5,210,1],[187,4,210,1],[187,11,210,1,"_decryptRawAsync"],[187,27,210,1],[187,28,210,1,"apply"],[187,33,210,1],[187,40,210,1,"arguments"],[187,49,210,1],[188,2,210,1],[189,2,213,0],[189,11,213,9,"decryptRaw"],[189,21,213,19,"decryptRaw"],[189,22,213,21,"buffer"],[189,28,213,27],[189,30,213,29,"passphrase"],[189,40,213,39],[189,42,213,41,"progressCallback"],[189,58,213,57],[189,60,213,59,"scryptParams"],[189,72,213,71],[189,74,213,73],[190,4,214,2,"scryptParams"],[190,16,214,14],[190,19,214,17,"scryptParams"],[190,31,214,29],[190,35,214,33,"SCRYPT_PARAMS"],[190,48,214,46],[191,4,215,2],[191,8,215,2,"_prepareDecryptRaw"],[191,26,215,2],[191,29,222,6,"prepareDecryptRaw"],[191,46,222,23],[191,47,222,24,"buffer"],[191,53,222,30],[191,55,222,32,"progressCallback"],[191,71,222,48],[191,73,222,50,"scryptParams"],[191,85,222,62],[191,86,222,63],[192,6,216,4,"salt"],[192,10,216,8],[192,13,216,8,"_prepareDecryptRaw"],[192,31,216,8],[192,32,216,4,"salt"],[192,36,216,8],[193,6,217,4,"compressed"],[193,16,217,14],[193,19,217,14,"_prepareDecryptRaw"],[193,37,217,14],[193,38,217,4,"compressed"],[193,48,217,14],[194,6,218,4,"N"],[194,7,218,5],[194,10,218,5,"_prepareDecryptRaw"],[194,28,218,5],[194,29,218,4,"N"],[194,30,218,5],[195,6,219,4,"r"],[195,7,219,5],[195,10,219,5,"_prepareDecryptRaw"],[195,28,219,5],[195,29,219,4,"r"],[195,30,219,5],[196,6,220,4,"p"],[196,7,220,5],[196,10,220,5,"_prepareDecryptRaw"],[196,28,220,5],[196,29,220,4,"p"],[196,30,220,5],[197,6,221,4,"decryptEC"],[197,15,221,13],[197,18,221,13,"_prepareDecryptRaw"],[197,36,221,13],[197,37,221,4,"decryptEC"],[197,46,221,13],[198,4,223,2],[198,8,223,6,"decryptEC"],[198,17,223,15],[198,22,223,20],[198,26,223,24],[198,28,223,26],[198,35,223,33,"decryptECMult"],[198,48,223,46],[198,49,223,47,"buffer"],[198,55,223,53],[198,57,223,55,"passphrase"],[198,67,223,65],[198,69,223,67,"progressCallback"],[198,85,223,83],[198,87,223,85,"scryptParams"],[198,99,223,97],[198,100,223,98],[199,4,224,2],[199,8,224,6,"scryptBuf"],[199,17,224,15],[199,20,224,18,"_$$_REQUIRE"],[199,31,224,18],[199,32,224,18,"_dependencyMap"],[199,46,224,18],[199,63,224,25,"passphrase"],[199,73,224,35],[199,74,224,36,"normalize"],[199,83,224,45],[199,84,224,46],[199,89,224,51],[199,90,224,52],[199,92,224,54,"salt"],[199,96,224,58],[199,98,224,60,"N"],[199,99,224,61],[199,101,224,63,"r"],[199,102,224,64],[199,104,224,66,"p"],[199,105,224,67],[199,107,224,69],[199,109,224,71],[199,111,224,73,"progressCallback"],[199,127,224,89],[199,128,224,90],[200,4,225,2],[200,11,225,9,"finishDecryptRaw"],[200,27,225,25],[200,28,225,26,"buffer"],[200,34,225,32],[200,36,225,34,"salt"],[200,40,225,38],[200,42,225,40,"compressed"],[200,52,225,50],[200,54,225,52,"scryptBuf"],[200,63,225,61],[200,64,225,62],[201,2,226,0],[202,2,226,1],[202,11,228,15,"decryptAsync"],[202,23,228,27,"decryptAsync"],[202,24,228,27,"_x24"],[202,28,228,27],[202,30,228,27,"_x25"],[202,34,228,27],[202,36,228,27,"_x26"],[202,40,228,27],[202,42,228,27,"_x27"],[202,46,228,27],[202,48,228,27,"_x28"],[202,52,228,27],[203,4,228,27],[203,11,228,27,"_decryptAsync"],[203,24,228,27],[203,25,228,27,"apply"],[203,30,228,27],[203,37,228,27,"arguments"],[203,46,228,27],[204,2,228,27],[205,2,228,27],[205,11,228,27,"_decryptAsync"],[205,25,228,27],[206,4,228,27,"_decryptAsync"],[206,17,228,27],[206,20,228,27,"_asyncToGenerator"],[206,37,228,27],[206,38,228,0],[206,49,228,29,"string"],[206,55,228,35],[206,57,228,37,"passphrase"],[206,67,228,47],[206,69,228,49,"progressCallback"],[206,85,228,65],[206,87,228,67,"scryptParams"],[206,99,228,79],[206,101,228,81,"promiseInterval"],[206,116,228,96],[206,118,228,98],[207,6,229,2],[207,13,229,9,"decryptRawAsync"],[207,28,229,24],[207,29,229,25,"_$$_REQUIRE"],[207,40,229,25],[207,41,229,25,"_dependencyMap"],[207,55,229,25],[207,73,229,35,"decode"],[207,79,229,41],[207,80,229,42,"string"],[207,86,229,48],[207,87,229,49],[207,89,229,51,"passphrase"],[207,99,229,61],[207,101,229,63,"progressCallback"],[207,117,229,79],[207,119,229,81,"scryptParams"],[207,131,229,93],[207,133,229,95,"promiseInterval"],[207,148,229,110],[207,149,229,111],[208,4,230,0],[208,5,230,1],[209,4,230,1],[209,11,230,1,"_decryptAsync"],[209,24,230,1],[209,25,230,1,"apply"],[209,30,230,1],[209,37,230,1,"arguments"],[209,46,230,1],[210,2,230,1],[211,2,232,0],[211,11,232,9,"decrypt"],[211,18,232,16,"decrypt"],[211,19,232,18,"string"],[211,25,232,24],[211,27,232,26,"passphrase"],[211,37,232,36],[211,39,232,38,"progressCallback"],[211,55,232,54],[211,57,232,56,"scryptParams"],[211,69,232,68],[211,71,232,70],[212,4,233,2],[212,11,233,9,"decryptRaw"],[212,21,233,19],[212,22,233,20,"_$$_REQUIRE"],[212,33,233,20],[212,34,233,20,"_dependencyMap"],[212,48,233,20],[212,66,233,30,"decode"],[212,72,233,36],[212,73,233,37,"string"],[212,79,233,43],[212,80,233,44],[212,82,233,46,"passphrase"],[212,92,233,56],[212,94,233,58,"progressCallback"],[212,110,233,74],[212,112,233,76,"scryptParams"],[212,124,233,88],[212,125,233,89],[213,2,234,0],[214,2,236,0],[214,11,236,9,"prepareDecryptECMult"],[214,31,236,29,"prepareDecryptECMult"],[214,32,236,31,"buffer"],[214,38,236,37],[214,40,236,39,"passphrase"],[214,50,236,49],[214,52,236,51,"progressCallback"],[214,68,236,67],[214,70,236,69,"scryptParams"],[214,82,236,81],[214,84,236,83],[215,4,237,2],[215,8,237,6,"flag"],[215,12,237,10],[215,15,237,13,"buffer"],[215,21,237,19],[215,22,237,20,"readUInt8"],[215,31,237,29],[215,32,237,30],[215,33,237,31],[215,34,237,32],[216,4,238,2],[216,8,238,6,"compressed"],[216,18,238,16],[216,21,238,19],[216,22,238,20,"flag"],[216,26,238,24],[216,29,238,27],[216,33,238,31],[216,39,238,37],[216,40,238,38],[217,4,239,2],[217,8,239,6,"hasLotSeq"],[217,17,239,15],[217,20,239,18],[217,21,239,19,"flag"],[217,25,239,23],[217,28,239,26],[217,32,239,30],[217,38,239,36],[217,39,239,37],[218,4,241,2,"_$$_REQUIRE"],[218,15,241,2],[218,16,241,2,"_dependencyMap"],[218,30,241,2],[218,46,241,9,"strictEqual"],[218,57,241,20],[218,58,241,22,"flag"],[218,62,241,26],[218,65,241,29],[218,69,241,33],[218,71,241,36,"flag"],[218,75,241,40],[218,77,241,42],[218,99,241,64],[218,100,241,65],[219,4,243,2],[219,8,243,6,"addressHash"],[219,19,243,17],[219,22,243,20,"buffer"],[219,28,243,26],[219,29,243,27,"slice"],[219,34,243,32],[219,35,243,33],[219,36,243,34],[219,38,243,36],[219,39,243,37],[219,40,243,38],[220,4,244,2],[220,8,244,6,"ownerEntropy"],[220,20,244,18],[220,23,244,21,"buffer"],[220,29,244,27],[220,30,244,28,"slice"],[220,35,244,33],[220,36,244,34],[220,37,244,35],[220,39,244,37],[220,41,244,39],[220,42,244,40],[221,4,245,2],[221,8,245,6,"ownerSalt"],[221,17,245,15],[223,4,247,2],[224,4,248,2],[224,8,248,6,"hasLotSeq"],[224,17,248,15],[224,19,248,17],[225,6,249,4,"ownerSalt"],[225,15,249,13],[225,18,249,16,"ownerEntropy"],[225,30,249,28],[225,31,249,29,"slice"],[225,36,249,34],[225,37,249,35],[225,38,249,36],[225,40,249,38],[225,41,249,39],[225,42,249,40],[227,6,251,2],[228,4,252,2],[228,5,252,3],[228,11,252,9],[229,6,253,4,"ownerSalt"],[229,15,253,13],[229,18,253,16,"ownerEntropy"],[229,30,253,28],[230,4,254,2],[231,4,256,2],[231,8,256,6,"encryptedPart1"],[231,22,256,20],[231,25,256,23,"buffer"],[231,31,256,29],[231,32,256,30,"slice"],[231,37,256,35],[231,38,256,36],[231,40,256,38],[231,42,256,40],[231,44,256,42],[231,45,256,43],[231,47,256,44],[232,4,257,2],[232,8,257,6,"encryptedPart2"],[232,22,257,20],[232,25,257,23,"buffer"],[232,31,257,29],[232,32,257,30,"slice"],[232,37,257,35],[232,38,257,36],[232,40,257,38],[232,42,257,40],[232,44,257,42],[232,45,257,43],[232,47,257,44],[234,4,259,2],[234,8,259,6,"N"],[234,9,259,7],[234,12,259,10,"scryptParams"],[234,24,259,22],[234,25,259,23,"N"],[234,26,259,24],[235,4,260,2],[235,8,260,6,"r"],[235,9,260,7],[235,12,260,10,"scryptParams"],[235,24,260,22],[235,25,260,23,"r"],[235,26,260,24],[236,4,261,2],[236,8,261,6,"p"],[236,9,261,7],[236,12,261,10,"scryptParams"],[236,24,261,22],[236,25,261,23,"p"],[236,26,261,24],[237,4,262,2],[237,11,262,9],[238,6,263,4,"addressHash"],[238,17,263,15],[238,19,263,4,"addressHash"],[238,30,263,15],[239,6,264,4,"encryptedPart1"],[239,20,264,18],[239,22,264,4,"encryptedPart1"],[239,36,264,18],[240,6,265,4,"encryptedPart2"],[240,20,265,18],[240,22,265,4,"encryptedPart2"],[240,36,265,18],[241,6,266,4,"ownerEntropy"],[241,18,266,16],[241,20,266,4,"ownerEntropy"],[241,32,266,16],[242,6,267,4,"ownerSalt"],[242,15,267,13],[242,17,267,4,"ownerSalt"],[242,26,267,13],[243,6,268,4,"hasLotSeq"],[243,15,268,13],[243,17,268,4,"hasLotSeq"],[243,26,268,13],[244,6,269,4,"compressed"],[244,16,269,14],[244,18,269,4,"compressed"],[244,28,269,14],[245,6,270,4,"N"],[245,7,270,5],[245,9,270,4,"N"],[245,10,270,5],[246,6,271,4,"r"],[246,7,271,5],[246,9,271,4,"r"],[246,10,271,5],[247,6,272,4,"p"],[247,7,272,5],[247,9,272,4,"p"],[248,4,273,2],[248,5,273,3],[249,2,274,0],[250,2,276,0],[250,11,276,9,"getPassIntAndPoint"],[250,29,276,27,"getPassIntAndPoint"],[250,30,276,29,"preFactor"],[250,39,276,38],[250,41,276,40,"ownerEntropy"],[250,53,276,52],[250,55,276,54,"hasLotSeq"],[250,64,276,63],[250,66,276,65],[251,4,277,2],[251,8,277,6,"passFactor"],[251,18,277,16],[252,4,278,2],[252,8,278,6,"hasLotSeq"],[252,17,278,15],[252,19,278,17],[253,6,279,4],[253,10,279,8,"hashTarget"],[253,20,279,18],[253,23,279,21,"_$$_REQUIRE"],[253,34,279,21],[253,35,279,21,"_dependencyMap"],[253,49,279,21],[253,69,279,21,"Buffer"],[253,75,279,21],[253,76,279,28,"concat"],[253,82,279,34],[253,83,279,35],[253,84,279,36,"preFactor"],[253,93,279,45],[253,95,279,47,"ownerEntropy"],[253,107,279,59],[253,108,279,60],[253,109,279,61],[254,6,280,4,"passFactor"],[254,16,280,14],[254,19,280,17,"hash256"],[254,26,280,24],[254,27,280,25,"hashTarget"],[254,37,280,35],[254,38,280,36],[255,4,281,2],[255,5,281,3],[255,11,281,9],[256,6,282,4,"passFactor"],[256,16,282,14],[256,19,282,17,"preFactor"],[256,28,282,26],[257,4,283,2],[258,4,284,2],[258,8,284,8,"passInt"],[258,15,284,15],[258,18,284,18,"_$$_REQUIRE"],[258,29,284,18],[258,30,284,18,"_dependencyMap"],[258,44,284,18],[258,57,284,29,"fromBuffer"],[258,67,284,39],[258,68,284,40,"passFactor"],[258,78,284,50],[258,79,284,51],[259,4,285,2],[259,11,285,9],[260,6,286,4,"passInt"],[260,13,286,11],[260,15,286,4,"passInt"],[260,22,286,11],[261,6,287,4,"passPoint"],[261,15,287,13],[261,17,287,15,"curve"],[261,22,287,20],[261,23,287,21,"G"],[261,24,287,22],[261,25,287,23,"multiply"],[261,33,287,31],[261,34,287,32,"passInt"],[261,41,287,39],[261,42,287,40],[261,43,287,41,"getEncoded"],[261,53,287,51],[261,54,287,52],[261,58,287,56],[262,4,288,2],[262,5,288,3],[263,2,289,0],[264,2,290,0],[265,2,291,0],[265,11,291,9,"finishDecryptECMult"],[265,30,291,28,"finishDecryptECMult"],[265,31,291,30,"seedBPass"],[265,40,291,39],[265,42,291,41,"encryptedPart1"],[265,56,291,55],[265,58,291,57,"encryptedPart2"],[265,72,291,71],[265,74,291,73,"passInt"],[265,81,291,80],[265,83,291,82,"compressed"],[265,93,291,92],[265,95,291,94],[266,4,292,2],[266,8,292,6,"derivedHalf1"],[266,20,292,18],[266,23,292,21,"seedBPass"],[266,32,292,30],[266,33,292,31,"slice"],[266,38,292,36],[266,39,292,37],[266,40,292,38],[266,42,292,40],[266,44,292,42],[266,45,292,43],[267,4,293,2],[267,8,293,6,"derivedHalf2"],[267,20,293,18],[267,23,293,21,"seedBPass"],[267,32,293,30],[267,33,293,31,"slice"],[267,38,293,36],[267,39,293,37],[267,41,293,39],[267,43,293,41],[267,45,293,43],[267,46,293,44],[268,4,295,2],[268,8,295,6,"decipher"],[268,16,295,14],[268,19,295,17,"_$$_REQUIRE"],[268,30,295,17],[268,31,295,17,"_dependencyMap"],[268,45,295,17],[268,68,295,21,"createDecipheriv"],[268,84,295,37],[268,85,295,38],[268,98,295,51],[268,100,295,53,"derivedHalf2"],[268,112,295,65],[268,114,295,67,"_$$_REQUIRE"],[268,125,295,67],[268,126,295,67,"_dependencyMap"],[268,140,295,67],[268,160,295,67,"Buffer"],[268,166,295,67],[268,167,295,74,"alloc"],[268,172,295,79],[268,173,295,80],[268,174,295,81],[268,175,295,82],[268,176,295,83],[269,4,296,2,"decipher"],[269,12,296,10],[269,13,296,11,"setAutoPadding"],[269,27,296,25],[269,28,296,26],[269,33,296,31],[269,34,296,32],[270,4,297,2,"decipher"],[270,12,297,10],[270,13,297,11,"end"],[270,16,297,14],[270,17,297,15,"encryptedPart2"],[270,31,297,29],[270,32,297,30],[271,4,299,2],[271,8,299,6,"decryptedPart2"],[271,22,299,20],[271,25,299,23,"decipher"],[271,33,299,31],[271,34,299,32,"read"],[271,38,299,36],[271,39,299,37],[271,40,299,38],[272,4,300,2],[272,8,300,6,"tmp"],[272,11,300,9],[272,14,300,12,"_$$_REQUIRE"],[272,25,300,12],[272,26,300,12,"_dependencyMap"],[272,40,300,12],[272,67,300,16,"decryptedPart2"],[272,81,300,30],[272,83,300,32,"derivedHalf1"],[272,95,300,44],[272,96,300,45,"slice"],[272,101,300,50],[272,102,300,51],[272,104,300,53],[272,106,300,55],[272,108,300,57],[272,109,300,58],[272,110,300,59],[273,4,301,2],[273,8,301,6,"seedBPart2"],[273,18,301,16],[273,21,301,19,"tmp"],[273,24,301,22],[273,25,301,23,"slice"],[273,30,301,28],[273,31,301,29],[273,32,301,30],[273,34,301,32],[273,36,301,34],[273,37,301,35],[274,4,303,2],[274,8,303,6,"decipher2"],[274,17,303,15],[274,20,303,18,"_$$_REQUIRE"],[274,31,303,18],[274,32,303,18,"_dependencyMap"],[274,46,303,18],[274,69,303,22,"createDecipheriv"],[274,85,303,38],[274,86,303,39],[274,99,303,52],[274,101,303,54,"derivedHalf2"],[274,113,303,66],[274,115,303,68,"_$$_REQUIRE"],[274,126,303,68],[274,127,303,68,"_dependencyMap"],[274,141,303,68],[274,161,303,68,"Buffer"],[274,167,303,68],[274,168,303,75,"alloc"],[274,173,303,80],[274,174,303,81],[274,175,303,82],[274,176,303,83],[274,177,303,84],[275,4,304,2,"decipher2"],[275,13,304,11],[275,14,304,12,"setAutoPadding"],[275,28,304,26],[275,29,304,27],[275,34,304,32],[275,35,304,33],[276,4,305,2,"decipher2"],[276,13,305,11],[276,14,305,12,"write"],[276,19,305,17],[276,20,305,18,"encryptedPart1"],[276,34,305,32],[276,35,305,33],[276,37,305,34],[277,4,306,2,"decipher2"],[277,13,306,11],[277,14,306,12,"end"],[277,17,306,15],[277,18,306,16,"tmp"],[277,21,306,19],[277,22,306,20,"slice"],[277,27,306,25],[277,28,306,26],[277,29,306,27],[277,31,306,29],[277,32,306,30],[277,33,306,31],[277,34,306,32],[277,36,306,33],[279,4,308,2],[279,8,308,6,"seedBPart1"],[279,18,308,16],[279,21,308,19,"_$$_REQUIRE"],[279,32,308,19],[279,33,308,19,"_dependencyMap"],[279,47,308,19],[279,74,308,23,"decipher2"],[279,83,308,32],[279,84,308,33,"read"],[279,88,308,37],[279,89,308,38],[279,90,308,39],[279,92,308,41,"derivedHalf1"],[279,104,308,53],[279,105,308,54,"slice"],[279,110,308,59],[279,111,308,60],[279,112,308,61],[279,114,308,63],[279,116,308,65],[279,117,308,66],[279,118,308,67],[280,4,309,2],[280,8,309,6,"seedB"],[280,13,309,11],[280,16,309,14,"_$$_REQUIRE"],[280,27,309,14],[280,28,309,14,"_dependencyMap"],[280,42,309,14],[280,62,309,14,"Buffer"],[280,68,309,14],[280,69,309,21,"concat"],[280,75,309,27],[280,76,309,28],[280,77,309,29,"seedBPart1"],[280,87,309,39],[280,89,309,41,"seedBPart2"],[280,99,309,51],[280,100,309,52],[280,102,309,54],[280,104,309,56],[280,105,309,57],[281,4,310,2],[281,8,310,6,"factorB"],[281,15,310,13],[281,18,310,16,"_$$_REQUIRE"],[281,29,310,16],[281,30,310,16,"_dependencyMap"],[281,44,310,16],[281,57,310,27,"fromBuffer"],[281,67,310,37],[281,68,310,38,"hash256"],[281,75,310,45],[281,76,310,46,"seedB"],[281,81,310,51],[281,82,310,52],[281,83,310,53],[283,4,312,2],[284,4,313,2],[284,8,313,6,"d"],[284,9,313,7],[284,12,313,10,"passInt"],[284,19,313,17],[284,20,313,18,"multiply"],[284,28,313,26],[284,29,313,27,"factorB"],[284,36,313,34],[284,37,313,35],[284,38,313,36,"mod"],[284,41,313,39],[284,42,313,40,"curve"],[284,47,313,45],[284,48,313,46,"n"],[284,49,313,47],[284,50,313,48],[285,4,315,2],[285,11,315,9],[286,6,316,4,"privateKey"],[286,16,316,14],[286,18,316,16,"d"],[286,19,316,17],[286,20,316,18,"toBuffer"],[286,28,316,26],[286,29,316,27],[286,31,316,29],[286,32,316,30],[287,6,317,4,"compressed"],[287,16,317,14],[287,18,317,16,"compressed"],[288,4,318,2],[288,5,318,3],[289,2,319,0],[290,2,319,1],[290,11,321,15,"decryptECMultAsync"],[290,29,321,33,"decryptECMultAsync"],[290,30,321,33,"_x29"],[290,34,321,33],[290,36,321,33,"_x30"],[290,40,321,33],[290,42,321,33,"_x31"],[290,46,321,33],[290,48,321,33,"_x32"],[290,52,321,33],[290,54,321,33,"_x33"],[290,58,321,33],[291,4,321,33],[291,11,321,33,"_decryptECMultAsync"],[291,30,321,33],[291,31,321,33,"apply"],[291,36,321,33],[291,43,321,33,"arguments"],[291,52,321,33],[292,2,321,33],[293,2,321,33],[293,11,321,33,"_decryptECMultAsync"],[293,31,321,33],[294,4,321,33,"_decryptECMultAsync"],[294,23,321,33],[294,26,321,33,"_asyncToGenerator"],[294,43,321,33],[294,44,321,0],[294,55,321,35,"buffer"],[294,61,321,41],[294,63,321,43,"passphrase"],[294,73,321,53],[294,75,321,55,"progressCallback"],[294,91,321,71],[294,93,321,73,"scryptParams"],[294,105,321,85],[294,107,321,87,"promiseInterval"],[294,122,321,102],[294,124,321,104],[295,6,322,2,"buffer"],[295,12,322,8],[295,15,322,11,"buffer"],[295,21,322,17],[295,22,322,18,"slice"],[295,27,322,23],[295,28,322,24],[295,29,322,25],[295,30,322,26],[295,32,322,27],[296,6,323,2,"passphrase"],[296,16,323,12],[296,19,323,15,"_$$_REQUIRE"],[296,30,323,15],[296,31,323,15,"_dependencyMap"],[296,45,323,15],[296,65,323,15,"Buffer"],[296,71,323,15],[296,72,323,22,"from"],[296,76,323,26],[296,77,323,27,"passphrase"],[296,87,323,37],[296,88,323,38,"normalize"],[296,97,323,47],[296,98,323,48],[296,103,323,53],[296,104,323,54],[296,106,323,56],[296,112,323,62],[296,113,323,63],[297,6,324,2,"scryptParams"],[297,18,324,14],[297,21,324,17,"scryptParams"],[297,33,324,29],[297,37,324,33,"SCRYPT_PARAMS"],[297,50,324,46],[298,6,325,2],[298,10,325,2,"_prepareDecryptECMult2"],[298,32,325,2],[298,35,336,6,"prepareDecryptECMult"],[298,55,336,26],[298,56,336,27,"buffer"],[298,62,336,33],[298,64,336,35,"passphrase"],[298,74,336,45],[298,76,336,47,"progressCallback"],[298,92,336,63],[298,94,336,65,"scryptParams"],[298,106,336,77],[298,107,336,78],[299,8,326,4,"addressHash"],[299,19,326,15],[299,22,326,15,"_prepareDecryptECMult2"],[299,44,326,15],[299,45,326,4,"addressHash"],[299,56,326,15],[300,8,327,4,"encryptedPart1"],[300,22,327,18],[300,25,327,18,"_prepareDecryptECMult2"],[300,47,327,18],[300,48,327,4,"encryptedPart1"],[300,62,327,18],[301,8,328,4,"encryptedPart2"],[301,22,328,18],[301,25,328,18,"_prepareDecryptECMult2"],[301,47,328,18],[301,48,328,4,"encryptedPart2"],[301,62,328,18],[302,8,329,4,"ownerEntropy"],[302,20,329,16],[302,23,329,16,"_prepareDecryptECMult2"],[302,45,329,16],[302,46,329,4,"ownerEntropy"],[302,58,329,16],[303,8,330,4,"ownerSalt"],[303,17,330,13],[303,20,330,13,"_prepareDecryptECMult2"],[303,42,330,13],[303,43,330,4,"ownerSalt"],[303,52,330,13],[304,8,331,4,"hasLotSeq"],[304,17,331,13],[304,20,331,13,"_prepareDecryptECMult2"],[304,42,331,13],[304,43,331,4,"hasLotSeq"],[304,52,331,13],[305,8,332,4,"compressed"],[305,18,332,14],[305,21,332,14,"_prepareDecryptECMult2"],[305,43,332,14],[305,44,332,4,"compressed"],[305,54,332,14],[306,8,333,4,"N"],[306,9,333,5],[306,12,333,5,"_prepareDecryptECMult2"],[306,34,333,5],[306,35,333,4,"N"],[306,36,333,5],[307,8,334,4,"r"],[307,9,334,5],[307,12,334,5,"_prepareDecryptECMult2"],[307,34,334,5],[307,35,334,4,"r"],[307,36,334,5],[308,8,335,4,"p"],[308,9,335,5],[308,12,335,5,"_prepareDecryptECMult2"],[308,34,335,5],[308,35,335,4,"p"],[308,36,335,5],[309,6,338,2],[309,10,338,6,"preFactor"],[309,19,338,15],[309,28,338,24,"scryptWrapper"],[309,41,338,37],[309,42,338,38,"passphrase"],[309,52,338,48],[309,54,338,50,"ownerSalt"],[309,63,338,59],[309,65,338,61,"N"],[309,66,338,62],[309,68,338,64,"r"],[309,69,338,65],[309,71,338,67,"p"],[309,72,338,68],[309,74,338,70],[309,76,338,72],[309,78,338,74,"progressCallback"],[309,94,338,90],[309,96,338,92,"promiseInterval"],[309,111,338,107],[309,112,338,108],[310,6,341,2],[310,10,341,2,"_getPassIntAndPoint2"],[310,30,341,2],[310,33,344,6,"getPassIntAndPoint"],[310,51,344,24],[310,52,344,25,"preFactor"],[310,61,344,34],[310,63,344,36,"ownerEntropy"],[310,75,344,48],[310,77,344,50,"hasLotSeq"],[310,86,344,59],[310,87,344,60],[311,8,342,4,"passInt"],[311,15,342,11],[311,18,342,11,"_getPassIntAndPoint2"],[311,38,342,11],[311,39,342,4,"passInt"],[311,46,342,11],[312,8,343,4,"passPoint"],[312,17,343,13],[312,20,343,13,"_getPassIntAndPoint2"],[312,40,343,13],[312,41,343,4,"passPoint"],[312,50,343,13],[313,6,346,2],[313,10,346,6,"seedBPass"],[313,19,346,15],[313,28,346,24,"scryptWrapper"],[313,41,346,37],[313,42,346,38,"passPoint"],[313,51,346,47],[313,53,346,49,"_$$_REQUIRE"],[313,64,346,49],[313,65,346,49,"_dependencyMap"],[313,79,346,49],[313,99,346,49,"Buffer"],[313,105,346,49],[313,106,346,56,"concat"],[313,112,346,62],[313,113,346,63],[313,114,346,64,"addressHash"],[313,125,346,75],[313,127,346,77,"ownerEntropy"],[313,139,346,89],[313,140,346,90],[313,141,346,91],[313,143,346,93],[313,147,346,97],[313,149,346,99],[313,150,346,100],[313,152,346,102],[313,153,346,103],[313,155,346,105],[313,157,346,107],[313,159,346,109,"undefined"],[313,168,346,118],[313,170,346,120,"promiseInterval"],[313,185,346,135],[313,186,346,136],[314,6,348,2],[314,10,348,8,"res"],[314,13,348,11],[314,16,348,14,"finishDecryptECMult"],[314,35,348,33],[314,36,348,34,"seedBPass"],[314,45,348,43],[314,47,348,45,"encryptedPart1"],[314,61,348,59],[314,63,348,61,"encryptedPart2"],[314,77,348,75],[314,79,348,77,"passInt"],[314,86,348,84],[314,88,348,86,"compressed"],[314,98,348,96],[314,99,348,97],[316,6,350,2],[317,6,351,2],[318,6,352,2],[318,10,352,6,"d"],[318,11,352,7],[318,14,352,10,"_$$_REQUIRE"],[318,25,352,10],[318,26,352,10,"_dependencyMap"],[318,40,352,10],[318,53,352,21,"fromBuffer"],[318,63,352,31],[318,64,352,32,"res"],[318,67,352,35],[318,68,352,36,"privateKey"],[318,78,352,46],[318,79,352,47],[319,6,353,2],[319,10,353,6,"address"],[319,17,353,13],[319,20,353,16,"getAddress"],[319,30,353,26],[319,31,353,27,"d"],[319,32,353,28],[319,34,353,30,"compressed"],[319,44,353,40],[319,45,353,41],[320,6,354,2],[320,10,354,6,"checksum"],[320,18,354,14],[320,21,354,17,"hash256"],[320,28,354,24],[320,29,354,25,"address"],[320,36,354,32],[320,37,354,33],[320,38,354,34,"slice"],[320,43,354,39],[320,44,354,40],[320,45,354,41],[320,47,354,43],[320,48,354,44],[320,49,354,45],[321,6,355,2],[321,10,355,6,"salt"],[321,14,355,10],[321,17,355,13,"buffer"],[321,23,355,19],[321,24,355,20,"slice"],[321,29,355,25],[321,30,355,26],[321,31,355,27],[321,33,355,29],[321,34,355,30],[321,35,355,31],[322,6,356,2,"_$$_REQUIRE"],[322,17,356,2],[322,18,356,2,"_dependencyMap"],[322,32,356,2],[322,48,356,9,"deepEqual"],[322,57,356,18],[322,58,356,19,"salt"],[322,62,356,23],[322,64,356,25,"checksum"],[322,72,356,33],[322,74,356,35],[322,97,356,58],[322,98,356,59],[323,6,358,2],[323,13,358,9,"res"],[323,16,358,12],[324,4,359,0],[324,5,359,1],[325,4,359,1],[325,11,359,1,"_decryptECMultAsync"],[325,30,359,1],[325,31,359,1,"apply"],[325,36,359,1],[325,43,359,1,"arguments"],[325,52,359,1],[326,2,359,1],[327,2,361,0],[327,11,361,9,"decryptECMult"],[327,24,361,22,"decryptECMult"],[327,25,361,24,"buffer"],[327,31,361,30],[327,33,361,32,"passphrase"],[327,43,361,42],[327,45,361,44,"progressCallback"],[327,61,361,60],[327,63,361,62,"scryptParams"],[327,75,361,74],[327,77,361,76],[328,4,362,2,"buffer"],[328,10,362,8],[328,13,362,11,"buffer"],[328,19,362,17],[328,20,362,18,"slice"],[328,25,362,23],[328,26,362,24],[328,27,362,25],[328,28,362,26],[328,30,362,27],[329,4,363,2,"passphrase"],[329,14,363,12],[329,17,363,15,"_$$_REQUIRE"],[329,28,363,15],[329,29,363,15,"_dependencyMap"],[329,43,363,15],[329,63,363,15,"Buffer"],[329,69,363,15],[329,70,363,22,"from"],[329,74,363,26],[329,75,363,27,"passphrase"],[329,85,363,37],[329,86,363,38,"normalize"],[329,95,363,47],[329,96,363,48],[329,101,363,53],[329,102,363,54],[329,104,363,56],[329,110,363,62],[329,111,363,63],[330,4,364,2,"scryptParams"],[330,16,364,14],[330,19,364,17,"scryptParams"],[330,31,364,29],[330,35,364,33,"SCRYPT_PARAMS"],[330,48,364,46],[331,4,365,2],[331,8,365,2,"_prepareDecryptECMult"],[331,29,365,2],[331,32,376,6,"prepareDecryptECMult"],[331,52,376,26],[331,53,376,27,"buffer"],[331,59,376,33],[331,61,376,35,"passphrase"],[331,71,376,45],[331,73,376,47,"progressCallback"],[331,89,376,63],[331,91,376,65,"scryptParams"],[331,103,376,77],[331,104,376,78],[332,6,366,4,"addressHash"],[332,17,366,15],[332,20,366,15,"_prepareDecryptECMult"],[332,41,366,15],[332,42,366,4,"addressHash"],[332,53,366,15],[333,6,367,4,"encryptedPart1"],[333,20,367,18],[333,23,367,18,"_prepareDecryptECMult"],[333,44,367,18],[333,45,367,4,"encryptedPart1"],[333,59,367,18],[334,6,368,4,"encryptedPart2"],[334,20,368,18],[334,23,368,18,"_prepareDecryptECMult"],[334,44,368,18],[334,45,368,4,"encryptedPart2"],[334,59,368,18],[335,6,369,4,"ownerEntropy"],[335,18,369,16],[335,21,369,16,"_prepareDecryptECMult"],[335,42,369,16],[335,43,369,4,"ownerEntropy"],[335,55,369,16],[336,6,370,4,"ownerSalt"],[336,15,370,13],[336,18,370,13,"_prepareDecryptECMult"],[336,39,370,13],[336,40,370,4,"ownerSalt"],[336,49,370,13],[337,6,371,4,"hasLotSeq"],[337,15,371,13],[337,18,371,13,"_prepareDecryptECMult"],[337,39,371,13],[337,40,371,4,"hasLotSeq"],[337,49,371,13],[338,6,372,4,"compressed"],[338,16,372,14],[338,19,372,14,"_prepareDecryptECMult"],[338,40,372,14],[338,41,372,4,"compressed"],[338,51,372,14],[339,6,373,4,"N"],[339,7,373,5],[339,10,373,5,"_prepareDecryptECMult"],[339,31,373,5],[339,32,373,4,"N"],[339,33,373,5],[340,6,374,4,"r"],[340,7,374,5],[340,10,374,5,"_prepareDecryptECMult"],[340,31,374,5],[340,32,374,4,"r"],[340,33,374,5],[341,6,375,4,"p"],[341,7,375,5],[341,10,375,5,"_prepareDecryptECMult"],[341,31,375,5],[341,32,375,4,"p"],[341,33,375,5],[342,4,377,2],[342,8,377,6,"preFactor"],[342,17,377,15],[342,20,377,18,"_$$_REQUIRE"],[342,31,377,18],[342,32,377,18,"_dependencyMap"],[342,46,377,18],[342,63,377,25,"passphrase"],[342,73,377,35],[342,75,377,37,"ownerSalt"],[342,84,377,46],[342,86,377,48,"N"],[342,87,377,49],[342,89,377,51,"r"],[342,90,377,52],[342,92,377,54,"p"],[342,93,377,55],[342,95,377,57],[342,97,377,59],[342,99,377,61,"progressCallback"],[342,115,377,77],[342,116,377,78],[343,4,379,2],[343,8,379,2,"_getPassIntAndPoint"],[343,27,379,2],[343,30,382,6,"getPassIntAndPoint"],[343,48,382,24],[343,49,382,25,"preFactor"],[343,58,382,34],[343,60,382,36,"ownerEntropy"],[343,72,382,48],[343,74,382,50,"hasLotSeq"],[343,83,382,59],[343,84,382,60],[344,6,380,4,"passInt"],[344,13,380,11],[344,16,380,11,"_getPassIntAndPoint"],[344,35,380,11],[344,36,380,4,"passInt"],[344,43,380,11],[345,6,381,4,"passPoint"],[345,15,381,13],[345,18,381,13,"_getPassIntAndPoint"],[345,37,381,13],[345,38,381,4,"passPoint"],[345,47,381,13],[346,4,384,2],[346,8,384,6,"seedBPass"],[346,17,384,15],[346,20,384,18,"_$$_REQUIRE"],[346,31,384,18],[346,32,384,18,"_dependencyMap"],[346,46,384,18],[346,63,384,25,"passPoint"],[346,72,384,34],[346,74,384,36,"_$$_REQUIRE"],[346,85,384,36],[346,86,384,36,"_dependencyMap"],[346,100,384,36],[346,120,384,36,"Buffer"],[346,126,384,36],[346,127,384,43,"concat"],[346,133,384,49],[346,134,384,50],[346,135,384,51,"addressHash"],[346,146,384,62],[346,148,384,64,"ownerEntropy"],[346,160,384,76],[346,161,384,77],[346,162,384,78],[346,164,384,80],[346,168,384,84],[346,170,384,86],[346,171,384,87],[346,173,384,89],[346,174,384,90],[346,176,384,92],[346,178,384,94],[346,179,384,95],[347,4,386,2],[347,11,386,9,"finishDecryptECMult"],[347,30,386,28],[347,31,386,29,"seedBPass"],[347,40,386,38],[347,42,386,40,"encryptedPart1"],[347,56,386,54],[347,58,386,56,"encryptedPart2"],[347,72,386,70],[347,74,386,72,"passInt"],[347,81,386,79],[347,83,386,81,"compressed"],[347,93,386,91],[347,94,386,92],[348,2,387,0],[349,2,389,0],[349,11,389,9,"verify"],[349,17,389,15,"verify"],[349,18,389,17,"string"],[349,24,389,23],[349,26,389,25],[350,4,390,2],[350,8,390,6,"decoded"],[350,15,390,13],[350,18,390,16,"_$$_REQUIRE"],[350,29,390,16],[350,30,390,16,"_dependencyMap"],[350,44,390,16],[350,62,390,26,"decodeUnsafe"],[350,74,390,38],[350,75,390,39,"string"],[350,81,390,45],[350,82,390,46],[351,4,391,2],[351,8,391,6],[351,9,391,7,"decoded"],[351,16,391,14],[351,18,391,16],[351,25,391,23],[351,30,391,28],[352,4,393,2],[352,8,393,6,"decoded"],[352,15,393,13],[352,16,393,14,"length"],[352,22,393,20],[352,27,393,25],[352,29,393,27],[352,31,393,29],[352,38,393,36],[352,43,393,41],[353,4,394,2],[353,8,394,6,"decoded"],[353,15,394,13],[353,16,394,14,"readUInt8"],[353,25,394,23],[353,26,394,24],[353,27,394,25],[353,28,394,26],[353,33,394,31],[353,37,394,35],[353,39,394,37],[353,46,394,44],[353,51,394,49],[354,4,396,2],[354,8,396,6,"type"],[354,12,396,10],[354,15,396,13,"decoded"],[354,22,396,20],[354,23,396,21,"readUInt8"],[354,32,396,30],[354,33,396,31],[354,34,396,32],[354,35,396,33],[355,4,397,2],[355,8,397,6,"flag"],[355,12,397,10],[355,15,397,13,"decoded"],[355,22,397,20],[355,23,397,21,"readUInt8"],[355,32,397,30],[355,33,397,31],[355,34,397,32],[355,35,397,33],[357,4,399,2],[358,4,400,2],[358,8,400,6,"type"],[358,12,400,10],[358,17,400,15],[358,21,400,19],[358,23,400,21],[359,6,401,4],[359,10,401,8,"flag"],[359,14,401,12],[359,19,401,17],[359,23,401,21],[359,27,401,25,"flag"],[359,31,401,29],[359,36,401,34],[359,40,401,38],[359,42,401,40],[359,49,401,47],[359,54,401,52],[361,6,403,2],[362,4,404,2],[362,5,404,3],[362,11,404,9],[362,15,404,13,"type"],[362,19,404,17],[362,24,404,22],[362,28,404,26],[362,30,404,28],[363,6,405,4],[363,10,405,9,"flag"],[363,14,405,13],[363,17,405,16],[363,18,405,17],[363,22,405,21],[363,24,405,24],[363,31,405,31],[363,36,405,36],[364,4,406,2],[364,5,406,3],[364,11,406,9],[365,6,407,4],[365,13,407,11],[365,18,407,16],[366,4,408,2],[367,4,410,2],[367,11,410,9],[367,15,410,13],[368,2,411,0],[370,2,413,0],[371,2,414,0,"module"],[371,8,414,6],[371,9,414,7,"exports"],[371,16,414,14],[371,19,414,17],[372,4,415,2],[373,4,416,2],[374,4,417,2],[375,4,418,2],[376,4,419,2],[377,4,420,2,"decryptAsync"],[377,16,420,14],[377,18,420,16,"decryptAsync"],[377,30,420,28],[378,4,421,2,"decryptECMultAsync"],[378,22,421,20],[378,24,421,22,"decryptECMultAsync"],[378,42,421,40],[379,4,422,2,"decryptRawAsync"],[379,19,422,17],[379,21,422,19,"decryptRawAsync"],[379,36,422,34],[380,4,423,2,"encryptAsync"],[380,16,423,14],[380,18,423,16,"encryptAsync"],[380,30,423,28],[381,4,424,2,"encryptRawAsync"],[381,19,424,17],[381,21,424,19,"encryptRawAsync"],[381,36,424,34],[382,4,425,2,"verify"],[382,10,425,8],[382,12,425,10,"verify"],[383,2,426,0],[383,3,426,1],[384,0,426,1],[384,3]],"functionMap":{"names":["<global>","hash160","hash256","getAddress","scryptWrapper","prepareEncryptRaw","finishEncryptRaw","encryptRawAsync","encryptRaw","encryptAsync","encrypt","prepareDecryptRaw","finishDecryptRaw","decryptRawAsync","decryptRaw","decryptAsync","decrypt","prepareDecryptECMult","getPassIntAndPoint","finishDecryptECMult","decryptECMultAsync","decryptECMult","verify"],"mappings":"AAA;ACsB;CDU;AEE;CFI;AGE;CHQ;AIE;CJU;AKE;CLmB;AME;CNoB;AOE;CPa;AQE;CRa;ASE;CTE;AUE;CVE;AWE;CX0B;AYE;CZsB;AaE;Cbc;AcG;Cda;AeE;CfE;AgBE;ChBE;AiBE;CjBsC;AkBE;ClBa;AmBE;CnB4B;AoBE;CpBsC;AqBE;CrB0B;AsBE;CtBsB"}},"type":"js/module"}]}