{"dependencies":[{"name":"../payments","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":20,"column":17,"index":604},"end":{"line":20,"column":39,"index":626}},{"start":{"line":20,"column":17,"index":604},"end":{"line":20,"column":39,"index":626}},{"start":{"line":20,"column":17,"index":604},"end":{"line":20,"column":39,"index":626}},{"start":{"line":20,"column":17,"index":604},"end":{"line":20,"column":39,"index":626}},{"start":{"line":20,"column":17,"index":604},"end":{"line":20,"column":39,"index":626}},{"start":{"line":20,"column":17,"index":604},"end":{"line":20,"column":39,"index":626}},{"start":{"line":20,"column":17,"index":604},"end":{"line":20,"column":39,"index":626}}],"key":"WSAUdGo/ePrG82HbWdGXFsBSzMA="}},{"name":"bip174/src/lib/converter/varint","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":16,"index":417},"end":{"line":16,"column":58,"index":459}},{"start":{"line":16,"column":16,"index":417},"end":{"line":16,"column":58,"index":459}}],"key":"WqBUbX5ejlk4QpY7GpLq5kE/73U="}},{"name":"../crypto","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":19,"column":17,"index":565},"end":{"line":19,"column":37,"index":585}}],"key":"TgS5uCpY5sqlRGD1wvu5hgVfKjo="}},{"name":"../script","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":17,"column":16,"index":477},"end":{"line":17,"column":36,"index":497}},{"start":{"line":17,"column":16,"index":477},"end":{"line":17,"column":36,"index":497}},{"start":{"line":17,"column":16,"index":477},"end":{"line":17,"column":36,"index":497}},{"start":{"line":17,"column":16,"index":477},"end":{"line":17,"column":36,"index":497}},{"start":{"line":17,"column":16,"index":477},"end":{"line":17,"column":36,"index":497}}],"key":"XOqjZpHZAfPtXF1u3MudqqFxY0c="}},{"name":"../transaction","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":18,"column":22,"index":521},"end":{"line":18,"column":47,"index":546}},{"start":{"line":18,"column":22,"index":521},"end":{"line":18,"column":47,"index":546}},{"start":{"line":18,"column":22,"index":521},"end":{"line":18,"column":47,"index":546}},{"start":{"line":18,"column":22,"index":521},"end":{"line":18,"column":47,"index":546}}],"key":"3PJ1d04jjGvYDErveZMfJokUzt8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.signatureBlocksAction = exports.checkInputForSig = exports.pubkeyInScript = exports.pubkeyPositionInScript = exports.witnessStackToScriptWitness = exports.isP2TR = exports.isP2SHScript = exports.isP2WSHScript = exports.isP2WPKH = exports.isP2PKH = exports.isP2PK = exports.isP2MS = void 0;\n  function isPaymentFactory(payment) {\n    return function (script) {\n      try {\n        payment({\n          output: script\n        });\n        return true;\n      } catch (err) {\n        return false;\n      }\n    };\n  }\n  exports.isP2MS = isPaymentFactory(_$$_REQUIRE(_dependencyMap[0], \"../payments\").p2ms);\n  exports.isP2PK = isPaymentFactory(_$$_REQUIRE(_dependencyMap[0], \"../payments\").p2pk);\n  exports.isP2PKH = isPaymentFactory(_$$_REQUIRE(_dependencyMap[0], \"../payments\").p2pkh);\n  exports.isP2WPKH = isPaymentFactory(_$$_REQUIRE(_dependencyMap[0], \"../payments\").p2wpkh);\n  exports.isP2WSHScript = isPaymentFactory(_$$_REQUIRE(_dependencyMap[0], \"../payments\").p2wsh);\n  exports.isP2SHScript = isPaymentFactory(_$$_REQUIRE(_dependencyMap[0], \"../payments\").p2sh);\n  exports.isP2TR = isPaymentFactory(_$$_REQUIRE(_dependencyMap[0], \"../payments\").p2tr);\n  /**\n   * Converts a witness stack to a script witness.\n   * @param witness The witness stack to convert.\n   * @returns The script witness as a Buffer.\n   */\n  /**\n   * Converts a witness stack to a script witness.\n   * @param witness The witness stack to convert.\n   * @returns The converted script witness.\n   */\n  function witnessStackToScriptWitness(witness) {\n    var buffer = Buffer.allocUnsafe(0);\n    function writeSlice(slice) {\n      buffer = Buffer.concat([buffer, Buffer.from(slice)]);\n    }\n    function writeVarInt(i) {\n      var currentLen = buffer.length;\n      var varintLen = _$$_REQUIRE(_dependencyMap[1], \"bip174/src/lib/converter/varint\").encodingLength(i);\n      buffer = Buffer.concat([buffer, Buffer.allocUnsafe(varintLen)]);\n      _$$_REQUIRE(_dependencyMap[1], \"bip174/src/lib/converter/varint\").encode(i, buffer, currentLen);\n    }\n    function writeVarSlice(slice) {\n      writeVarInt(slice.length);\n      writeSlice(slice);\n    }\n    function writeVector(vector) {\n      writeVarInt(vector.length);\n      vector.forEach(writeVarSlice);\n    }\n    writeVector(witness);\n    return buffer;\n  }\n  exports.witnessStackToScriptWitness = witnessStackToScriptWitness;\n  /**\n   * Finds the position of a public key in a script.\n   * @param pubkey The public key to search for.\n   * @param script The script to search in.\n   * @returns The index of the public key in the script, or -1 if not found.\n   * @throws {Error} If there is an unknown script error.\n   */\n  function pubkeyPositionInScript(pubkey, script) {\n    var pubkeyHash = (0, _$$_REQUIRE(_dependencyMap[2], \"../crypto\").hash160)(pubkey);\n    var pubkeyXOnly = pubkey.slice(1, 33); // slice before calling?\n    var decompiled = _$$_REQUIRE(_dependencyMap[3], \"../script\").decompile(script);\n    if (decompiled === null) throw new Error('Unknown script error');\n    return decompiled.findIndex(function (element) {\n      if (typeof element === 'number') return false;\n      return element.equals(pubkey) || element.equals(pubkeyHash) || element.equals(pubkeyXOnly);\n    });\n  }\n  exports.pubkeyPositionInScript = pubkeyPositionInScript;\n  /**\n   * Checks if a public key is present in a script.\n   * @param pubkey The public key to check.\n   * @param script The script to search in.\n   * @returns A boolean indicating whether the public key is present in the script.\n   */\n  function pubkeyInScript(pubkey, script) {\n    return pubkeyPositionInScript(pubkey, script) !== -1;\n  }\n  exports.pubkeyInScript = pubkeyInScript;\n  /**\n   * Checks if an input contains a signature for a specific action.\n   * @param input - The input to check.\n   * @param action - The action to check for.\n   * @returns A boolean indicating whether the input contains a signature for the specified action.\n   */\n  function checkInputForSig(input, action) {\n    var pSigs = extractPartialSigs(input);\n    return pSigs.some(function (pSig) {\n      return signatureBlocksAction(pSig, _$$_REQUIRE(_dependencyMap[3], \"../script\").signature.decode, action);\n    });\n  }\n  exports.checkInputForSig = checkInputForSig;\n  /**\n   * Determines if a given action is allowed for a signature block.\n   * @param signature - The signature block.\n   * @param signatureDecodeFn - The function used to decode the signature.\n   * @param action - The action to be checked.\n   * @returns True if the action is allowed, false otherwise.\n   */\n  function signatureBlocksAction(signature, signatureDecodeFn, action) {\n    var _signatureDecodeFn = signatureDecodeFn(signature),\n      hashType = _signatureDecodeFn.hashType;\n    var whitelist = [];\n    var isAnyoneCanPay = hashType & _$$_REQUIRE(_dependencyMap[4], \"../transaction\").Transaction.SIGHASH_ANYONECANPAY;\n    if (isAnyoneCanPay) whitelist.push('addInput');\n    var hashMod = hashType & 0x1f;\n    switch (hashMod) {\n      case _$$_REQUIRE(_dependencyMap[4], \"../transaction\").Transaction.SIGHASH_ALL:\n        break;\n      case _$$_REQUIRE(_dependencyMap[4], \"../transaction\").Transaction.SIGHASH_SINGLE:\n      case _$$_REQUIRE(_dependencyMap[4], \"../transaction\").Transaction.SIGHASH_NONE:\n        whitelist.push('addOutput');\n        whitelist.push('setInputSequence');\n        break;\n    }\n    if (whitelist.indexOf(action) === -1) {\n      return true;\n    }\n    return false;\n  }\n  exports.signatureBlocksAction = signatureBlocksAction;\n  /**\n   * Extracts the signatures from a PsbtInput object.\n   * If the input has partial signatures, it returns an array of the signatures.\n   * If the input does not have partial signatures, it checks if it has a finalScriptSig or finalScriptWitness.\n   * If it does, it extracts the signatures from the final scripts and returns them.\n   * If none of the above conditions are met, it returns an empty array.\n   *\n   * @param input - The PsbtInput object from which to extract the signatures.\n   * @returns An array of signatures extracted from the PsbtInput object.\n   */\n  function extractPartialSigs(input) {\n    var pSigs = [];\n    if ((input.partialSig || []).length === 0) {\n      if (!input.finalScriptSig && !input.finalScriptWitness) return [];\n      pSigs = getPsigsFromInputFinalScripts(input);\n    } else {\n      pSigs = input.partialSig;\n    }\n    return pSigs.map(function (p) {\n      return p.signature;\n    });\n  }\n  /**\n   * Retrieves the partial signatures (Psigs) from the input's final scripts.\n   * Psigs are extracted from both the final scriptSig and final scriptWitness of the input.\n   * Only canonical script signatures are considered.\n   *\n   * @param input - The PsbtInput object representing the input.\n   * @returns An array of PartialSig objects containing the extracted Psigs.\n   */\n  function getPsigsFromInputFinalScripts(input) {\n    var scriptItems = !input.finalScriptSig ? [] : _$$_REQUIRE(_dependencyMap[3], \"../script\").decompile(input.finalScriptSig) || [];\n    var witnessItems = !input.finalScriptWitness ? [] : _$$_REQUIRE(_dependencyMap[3], \"../script\").decompile(input.finalScriptWitness) || [];\n    return scriptItems.concat(witnessItems).filter(function (item) {\n      return Buffer.isBuffer(item) && _$$_REQUIRE(_dependencyMap[3], \"../script\").isCanonicalScriptSignature(item);\n    }).map(function (sig) {\n      return {\n        signature: sig\n      };\n    });\n  }\n});","lineCount":171,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"signatureBlocksAction"],[7,31,3,29],[7,34,4,2,"exports"],[7,41,4,9],[7,42,4,10,"checkInputForSig"],[7,58,4,26],[7,61,5,2,"exports"],[7,68,5,9],[7,69,5,10,"pubkeyInScript"],[7,83,5,24],[7,86,6,2,"exports"],[7,93,6,9],[7,94,6,10,"pubkeyPositionInScript"],[7,116,6,32],[7,119,7,2,"exports"],[7,126,7,9],[7,127,7,10,"witnessStackToScriptWitness"],[7,154,7,37],[7,157,8,2,"exports"],[7,164,8,9],[7,165,8,10,"isP2TR"],[7,171,8,16],[7,174,9,2,"exports"],[7,181,9,9],[7,182,9,10,"isP2SHScript"],[7,194,9,22],[7,197,10,2,"exports"],[7,204,10,9],[7,205,10,10,"isP2WSHScript"],[7,218,10,23],[7,221,11,2,"exports"],[7,228,11,9],[7,229,11,10,"isP2WPKH"],[7,237,11,18],[7,240,12,2,"exports"],[7,247,12,9],[7,248,12,10,"isP2PKH"],[7,255,12,17],[7,258,13,2,"exports"],[7,265,13,9],[7,266,13,10,"isP2PK"],[7,272,13,16],[7,275,14,2,"exports"],[7,282,14,9],[7,283,14,10,"isP2MS"],[7,289,14,16],[7,292,15,4],[7,297,15,9],[7,298,15,10],[8,2,21,0],[8,11,21,9,"isPaymentFactory"],[8,27,21,25,"isPaymentFactory"],[8,28,21,26,"payment"],[8,35,21,33],[8,37,21,35],[9,4,22,2],[9,11,22,9],[9,21,22,9,"script"],[9,27,22,15],[9,29,22,19],[10,6,23,4],[10,10,23,8],[11,8,24,6,"payment"],[11,15,24,13],[11,16,24,14],[12,10,24,16,"output"],[12,16,24,22],[12,18,24,24,"script"],[13,8,24,31],[13,9,24,32],[13,10,24,33],[14,8,25,6],[14,15,25,13],[14,19,25,17],[15,6,26,4],[15,7,26,5],[15,8,26,6],[15,15,26,13,"err"],[15,18,26,16],[15,20,26,18],[16,8,27,6],[16,15,27,13],[16,20,27,18],[17,6,28,4],[18,4,29,2],[18,5,29,3],[19,2,30,0],[20,2,31,0,"exports"],[20,9,31,7],[20,10,31,8,"isP2MS"],[20,16,31,14],[20,19,31,17,"isPaymentFactory"],[20,35,31,33],[20,36,31,34,"_$$_REQUIRE"],[20,47,31,34],[20,48,31,34,"_dependencyMap"],[20,62,31,34],[20,82,31,43,"p2ms"],[20,86,31,47],[20,87,31,48],[21,2,32,0,"exports"],[21,9,32,7],[21,10,32,8,"isP2PK"],[21,16,32,14],[21,19,32,17,"isPaymentFactory"],[21,35,32,33],[21,36,32,34,"_$$_REQUIRE"],[21,47,32,34],[21,48,32,34,"_dependencyMap"],[21,62,32,34],[21,82,32,43,"p2pk"],[21,86,32,47],[21,87,32,48],[22,2,33,0,"exports"],[22,9,33,7],[22,10,33,8,"isP2PKH"],[22,17,33,15],[22,20,33,18,"isPaymentFactory"],[22,36,33,34],[22,37,33,35,"_$$_REQUIRE"],[22,48,33,35],[22,49,33,35,"_dependencyMap"],[22,63,33,35],[22,83,33,44,"p2pkh"],[22,88,33,49],[22,89,33,50],[23,2,34,0,"exports"],[23,9,34,7],[23,10,34,8,"isP2WPKH"],[23,18,34,16],[23,21,34,19,"isPaymentFactory"],[23,37,34,35],[23,38,34,36,"_$$_REQUIRE"],[23,49,34,36],[23,50,34,36,"_dependencyMap"],[23,64,34,36],[23,84,34,45,"p2wpkh"],[23,90,34,51],[23,91,34,52],[24,2,35,0,"exports"],[24,9,35,7],[24,10,35,8,"isP2WSHScript"],[24,23,35,21],[24,26,35,24,"isPaymentFactory"],[24,42,35,40],[24,43,35,41,"_$$_REQUIRE"],[24,54,35,41],[24,55,35,41,"_dependencyMap"],[24,69,35,41],[24,89,35,50,"p2wsh"],[24,94,35,55],[24,95,35,56],[25,2,36,0,"exports"],[25,9,36,7],[25,10,36,8,"isP2SHScript"],[25,22,36,20],[25,25,36,23,"isPaymentFactory"],[25,41,36,39],[25,42,36,40,"_$$_REQUIRE"],[25,53,36,40],[25,54,36,40,"_dependencyMap"],[25,68,36,40],[25,88,36,49,"p2sh"],[25,92,36,53],[25,93,36,54],[26,2,37,0,"exports"],[26,9,37,7],[26,10,37,8,"isP2TR"],[26,16,37,14],[26,19,37,17,"isPaymentFactory"],[26,35,37,33],[26,36,37,34,"_$$_REQUIRE"],[26,47,37,34],[26,48,37,34,"_dependencyMap"],[26,62,37,34],[26,82,37,43,"p2tr"],[26,86,37,47],[26,87,37,48],[27,2,38,0],[28,0,39,0],[29,0,40,0],[30,0,41,0],[31,0,42,0],[32,2,43,0],[33,0,44,0],[34,0,45,0],[35,0,46,0],[36,0,47,0],[37,2,48,0],[37,11,48,9,"witnessStackToScriptWitness"],[37,38,48,36,"witnessStackToScriptWitness"],[37,39,48,37,"witness"],[37,46,48,44],[37,48,48,46],[38,4,49,2],[38,8,49,6,"buffer"],[38,14,49,12],[38,17,49,15,"Buffer"],[38,23,49,21],[38,24,49,22,"allocUnsafe"],[38,35,49,33],[38,36,49,34],[38,37,49,35],[38,38,49,36],[39,4,50,2],[39,13,50,11,"writeSlice"],[39,23,50,21,"writeSlice"],[39,24,50,22,"slice"],[39,29,50,27],[39,31,50,29],[40,6,51,4,"buffer"],[40,12,51,10],[40,15,51,13,"Buffer"],[40,21,51,19],[40,22,51,20,"concat"],[40,28,51,26],[40,29,51,27],[40,30,51,28,"buffer"],[40,36,51,34],[40,38,51,36,"Buffer"],[40,44,51,42],[40,45,51,43,"from"],[40,49,51,47],[40,50,51,48,"slice"],[40,55,51,53],[40,56,51,54],[40,57,51,55],[40,58,51,56],[41,4,52,2],[42,4,53,2],[42,13,53,11,"writeVarInt"],[42,24,53,22,"writeVarInt"],[42,25,53,23,"i"],[42,26,53,24],[42,28,53,26],[43,6,54,4],[43,10,54,10,"currentLen"],[43,20,54,20],[43,23,54,23,"buffer"],[43,29,54,29],[43,30,54,30,"length"],[43,36,54,36],[44,6,55,4],[44,10,55,10,"varintLen"],[44,19,55,19],[44,22,55,22,"_$$_REQUIRE"],[44,33,55,22],[44,34,55,22,"_dependencyMap"],[44,48,55,22],[44,88,55,30,"encodingLength"],[44,102,55,44],[44,103,55,45,"i"],[44,104,55,46],[44,105,55,47],[45,6,56,4,"buffer"],[45,12,56,10],[45,15,56,13,"Buffer"],[45,21,56,19],[45,22,56,20,"concat"],[45,28,56,26],[45,29,56,27],[45,30,56,28,"buffer"],[45,36,56,34],[45,38,56,36,"Buffer"],[45,44,56,42],[45,45,56,43,"allocUnsafe"],[45,56,56,54],[45,57,56,55,"varintLen"],[45,66,56,64],[45,67,56,65],[45,68,56,66],[45,69,56,67],[46,6,57,4,"_$$_REQUIRE"],[46,17,57,4],[46,18,57,4,"_dependencyMap"],[46,32,57,4],[46,72,57,12,"encode"],[46,78,57,18],[46,79,57,19,"i"],[46,80,57,20],[46,82,57,22,"buffer"],[46,88,57,28],[46,90,57,30,"currentLen"],[46,100,57,40],[46,101,57,41],[47,4,58,2],[48,4,59,2],[48,13,59,11,"writeVarSlice"],[48,26,59,24,"writeVarSlice"],[48,27,59,25,"slice"],[48,32,59,30],[48,34,59,32],[49,6,60,4,"writeVarInt"],[49,17,60,15],[49,18,60,16,"slice"],[49,23,60,21],[49,24,60,22,"length"],[49,30,60,28],[49,31,60,29],[50,6,61,4,"writeSlice"],[50,16,61,14],[50,17,61,15,"slice"],[50,22,61,20],[50,23,61,21],[51,4,62,2],[52,4,63,2],[52,13,63,11,"writeVector"],[52,24,63,22,"writeVector"],[52,25,63,23,"vector"],[52,31,63,29],[52,33,63,31],[53,6,64,4,"writeVarInt"],[53,17,64,15],[53,18,64,16,"vector"],[53,24,64,22],[53,25,64,23,"length"],[53,31,64,29],[53,32,64,30],[54,6,65,4,"vector"],[54,12,65,10],[54,13,65,11,"forEach"],[54,20,65,18],[54,21,65,19,"writeVarSlice"],[54,34,65,32],[54,35,65,33],[55,4,66,2],[56,4,67,2,"writeVector"],[56,15,67,13],[56,16,67,14,"witness"],[56,23,67,21],[56,24,67,22],[57,4,68,2],[57,11,68,9,"buffer"],[57,17,68,15],[58,2,69,0],[59,2,70,0,"exports"],[59,9,70,7],[59,10,70,8,"witnessStackToScriptWitness"],[59,37,70,35],[59,40,70,38,"witnessStackToScriptWitness"],[59,67,70,65],[60,2,71,0],[61,0,72,0],[62,0,73,0],[63,0,74,0],[64,0,75,0],[65,0,76,0],[66,0,77,0],[67,2,78,0],[67,11,78,9,"pubkeyPositionInScript"],[67,33,78,31,"pubkeyPositionInScript"],[67,34,78,32,"pubkey"],[67,40,78,38],[67,42,78,40,"script"],[67,48,78,46],[67,50,78,48],[68,4,79,2],[68,8,79,8,"pubkeyHash"],[68,18,79,18],[68,21,79,21],[68,22,79,22],[68,23,79,23],[68,25,79,25,"_$$_REQUIRE"],[68,36,79,25],[68,37,79,25,"_dependencyMap"],[68,51,79,25],[68,69,79,34,"hash160"],[68,76,79,41],[68,78,79,43,"pubkey"],[68,84,79,49],[68,85,79,50],[69,4,80,2],[69,8,80,8,"pubkeyXOnly"],[69,19,80,19],[69,22,80,22,"pubkey"],[69,28,80,28],[69,29,80,29,"slice"],[69,34,80,34],[69,35,80,35],[69,36,80,36],[69,38,80,38],[69,40,80,40],[69,41,80,41],[69,42,80,42],[69,43,80,43],[70,4,81,2],[70,8,81,8,"decompiled"],[70,18,81,18],[70,21,81,21,"_$$_REQUIRE"],[70,32,81,21],[70,33,81,21,"_dependencyMap"],[70,47,81,21],[70,65,81,29,"decompile"],[70,74,81,38],[70,75,81,39,"script"],[70,81,81,45],[70,82,81,46],[71,4,82,2],[71,8,82,6,"decompiled"],[71,18,82,16],[71,23,82,21],[71,27,82,25],[71,29,82,27],[71,35,82,33],[71,39,82,37,"Error"],[71,44,82,42],[71,45,82,43],[71,67,82,65],[71,68,82,66],[72,4,83,2],[72,11,83,9,"decompiled"],[72,21,83,19],[72,22,83,20,"findIndex"],[72,31,83,29],[72,32,83,30],[72,42,83,30,"element"],[72,49,83,37],[72,51,83,41],[73,6,84,4],[73,10,84,8],[73,17,84,15,"element"],[73,24,84,22],[73,29,84,27],[73,37,84,35],[73,39,84,37],[73,46,84,44],[73,51,84,49],[74,6,85,4],[74,13,86,6,"element"],[74,20,86,13],[74,21,86,14,"equals"],[74,27,86,20],[74,28,86,21,"pubkey"],[74,34,86,27],[74,35,86,28],[74,39,87,6,"element"],[74,46,87,13],[74,47,87,14,"equals"],[74,53,87,20],[74,54,87,21,"pubkeyHash"],[74,64,87,31],[74,65,87,32],[74,69,88,6,"element"],[74,76,88,13],[74,77,88,14,"equals"],[74,83,88,20],[74,84,88,21,"pubkeyXOnly"],[74,95,88,32],[74,96,88,33],[75,4,90,2],[75,5,90,3],[75,6,90,4],[76,2,91,0],[77,2,92,0,"exports"],[77,9,92,7],[77,10,92,8,"pubkeyPositionInScript"],[77,32,92,30],[77,35,92,33,"pubkeyPositionInScript"],[77,57,92,55],[78,2,93,0],[79,0,94,0],[80,0,95,0],[81,0,96,0],[82,0,97,0],[83,0,98,0],[84,2,99,0],[84,11,99,9,"pubkeyInScript"],[84,25,99,23,"pubkeyInScript"],[84,26,99,24,"pubkey"],[84,32,99,30],[84,34,99,32,"script"],[84,40,99,38],[84,42,99,40],[85,4,100,2],[85,11,100,9,"pubkeyPositionInScript"],[85,33,100,31],[85,34,100,32,"pubkey"],[85,40,100,38],[85,42,100,40,"script"],[85,48,100,46],[85,49,100,47],[85,54,100,52],[85,55,100,53],[85,56,100,54],[86,2,101,0],[87,2,102,0,"exports"],[87,9,102,7],[87,10,102,8,"pubkeyInScript"],[87,24,102,22],[87,27,102,25,"pubkeyInScript"],[87,41,102,39],[88,2,103,0],[89,0,104,0],[90,0,105,0],[91,0,106,0],[92,0,107,0],[93,0,108,0],[94,2,109,0],[94,11,109,9,"checkInputForSig"],[94,27,109,25,"checkInputForSig"],[94,28,109,26,"input"],[94,33,109,31],[94,35,109,33,"action"],[94,41,109,39],[94,43,109,41],[95,4,110,2],[95,8,110,8,"pSigs"],[95,13,110,13],[95,16,110,16,"extractPartialSigs"],[95,34,110,34],[95,35,110,35,"input"],[95,40,110,40],[95,41,110,41],[96,4,111,2],[96,11,111,9,"pSigs"],[96,16,111,14],[96,17,111,15,"some"],[96,21,111,19],[96,22,111,20],[96,32,111,20,"pSig"],[96,36,111,24],[97,6,111,24],[97,13,112,4,"signatureBlocksAction"],[97,34,112,25],[97,35,112,26,"pSig"],[97,39,112,30],[97,41,112,32,"_$$_REQUIRE"],[97,52,112,32],[97,53,112,32,"_dependencyMap"],[97,67,112,32],[97,85,112,40,"signature"],[97,94,112,49],[97,95,112,50,"decode"],[97,101,112,56],[97,103,112,58,"action"],[97,109,112,64],[97,110,112,65],[98,4,112,65],[98,5,113,2],[98,6,113,3],[99,2,114,0],[100,2,115,0,"exports"],[100,9,115,7],[100,10,115,8,"checkInputForSig"],[100,26,115,24],[100,29,115,27,"checkInputForSig"],[100,45,115,43],[101,2,116,0],[102,0,117,0],[103,0,118,0],[104,0,119,0],[105,0,120,0],[106,0,121,0],[107,0,122,0],[108,2,123,0],[108,11,123,9,"signatureBlocksAction"],[108,32,123,30,"signatureBlocksAction"],[108,33,123,31,"signature"],[108,42,123,40],[108,44,123,42,"signatureDecodeFn"],[108,61,123,59],[108,63,123,61,"action"],[108,69,123,67],[108,71,123,69],[109,4,124,2],[109,8,124,2,"_signatureDecodeFn"],[109,26,124,2],[109,29,124,23,"signatureDecodeFn"],[109,46,124,40],[109,47,124,41,"signature"],[109,56,124,50],[109,57,124,51],[110,6,124,10,"hashType"],[110,14,124,18],[110,17,124,18,"_signatureDecodeFn"],[110,35,124,18],[110,36,124,10,"hashType"],[110,44,124,18],[111,4,125,2],[111,8,125,8,"whitelist"],[111,17,125,17],[111,20,125,20],[111,22,125,22],[112,4,126,2],[112,8,126,8,"isAnyoneCanPay"],[112,22,126,22],[112,25,127,4,"hashType"],[112,33,127,12],[112,36,127,15,"_$$_REQUIRE"],[112,47,127,15],[112,48,127,15,"_dependencyMap"],[112,62,127,15],[112,85,127,29,"Transaction"],[112,96,127,40],[112,97,127,41,"SIGHASH_ANYONECANPAY"],[112,117,127,61],[113,4,128,2],[113,8,128,6,"isAnyoneCanPay"],[113,22,128,20],[113,24,128,22,"whitelist"],[113,33,128,31],[113,34,128,32,"push"],[113,38,128,36],[113,39,128,37],[113,49,128,47],[113,50,128,48],[114,4,129,2],[114,8,129,8,"hashMod"],[114,15,129,15],[114,18,129,18,"hashType"],[114,26,129,26],[114,29,129,29],[114,33,129,33],[115,4,130,2],[115,12,130,10,"hashMod"],[115,19,130,17],[116,6,131,4],[116,11,131,9,"_$$_REQUIRE"],[116,22,131,9],[116,23,131,9,"_dependencyMap"],[116,37,131,9],[116,60,131,23,"Transaction"],[116,71,131,34],[116,72,131,35,"SIGHASH_ALL"],[116,83,131,46],[117,8,132,6],[118,6,133,4],[118,11,133,9,"_$$_REQUIRE"],[118,22,133,9],[118,23,133,9,"_dependencyMap"],[118,37,133,9],[118,60,133,23,"Transaction"],[118,71,133,34],[118,72,133,35,"SIGHASH_SINGLE"],[118,86,133,49],[119,6,134,4],[119,11,134,9,"_$$_REQUIRE"],[119,22,134,9],[119,23,134,9,"_dependencyMap"],[119,37,134,9],[119,60,134,23,"Transaction"],[119,71,134,34],[119,72,134,35,"SIGHASH_NONE"],[119,84,134,47],[120,8,135,6,"whitelist"],[120,17,135,15],[120,18,135,16,"push"],[120,22,135,20],[120,23,135,21],[120,34,135,32],[120,35,135,33],[121,8,136,6,"whitelist"],[121,17,136,15],[121,18,136,16,"push"],[121,22,136,20],[121,23,136,21],[121,41,136,39],[121,42,136,40],[122,8,137,6],[123,4,138,2],[124,4,139,2],[124,8,139,6,"whitelist"],[124,17,139,15],[124,18,139,16,"indexOf"],[124,25,139,23],[124,26,139,24,"action"],[124,32,139,30],[124,33,139,31],[124,38,139,36],[124,39,139,37],[124,40,139,38],[124,42,139,40],[125,6,140,4],[125,13,140,11],[125,17,140,15],[126,4,141,2],[127,4,142,2],[127,11,142,9],[127,16,142,14],[128,2,143,0],[129,2,144,0,"exports"],[129,9,144,7],[129,10,144,8,"signatureBlocksAction"],[129,31,144,29],[129,34,144,32,"signatureBlocksAction"],[129,55,144,53],[130,2,145,0],[131,0,146,0],[132,0,147,0],[133,0,148,0],[134,0,149,0],[135,0,150,0],[136,0,151,0],[137,0,152,0],[138,0,153,0],[139,0,154,0],[140,2,155,0],[140,11,155,9,"extractPartialSigs"],[140,29,155,27,"extractPartialSigs"],[140,30,155,28,"input"],[140,35,155,33],[140,37,155,35],[141,4,156,2],[141,8,156,6,"pSigs"],[141,13,156,11],[141,16,156,14],[141,18,156,16],[142,4,157,2],[142,8,157,6],[142,9,157,7,"input"],[142,14,157,12],[142,15,157,13,"partialSig"],[142,25,157,23],[142,29,157,27],[142,31,157,29],[142,33,157,31,"length"],[142,39,157,37],[142,44,157,42],[142,45,157,43],[142,47,157,45],[143,6,158,4],[143,10,158,8],[143,11,158,9,"input"],[143,16,158,14],[143,17,158,15,"finalScriptSig"],[143,31,158,29],[143,35,158,33],[143,36,158,34,"input"],[143,41,158,39],[143,42,158,40,"finalScriptWitness"],[143,60,158,58],[143,62,158,60],[143,69,158,67],[143,71,158,69],[144,6,159,4,"pSigs"],[144,11,159,9],[144,14,159,12,"getPsigsFromInputFinalScripts"],[144,43,159,41],[144,44,159,42,"input"],[144,49,159,47],[144,50,159,48],[145,4,160,2],[145,5,160,3],[145,11,160,9],[146,6,161,4,"pSigs"],[146,11,161,9],[146,14,161,12,"input"],[146,19,161,17],[146,20,161,18,"partialSig"],[146,30,161,28],[147,4,162,2],[148,4,163,2],[148,11,163,9,"pSigs"],[148,16,163,14],[148,17,163,15,"map"],[148,20,163,18],[148,21,163,19],[148,31,163,19,"p"],[148,32,163,20],[149,6,163,20],[149,13,163,24,"p"],[149,14,163,25],[149,15,163,26,"signature"],[149,24,163,35],[150,4,163,35],[150,6,163,36],[151,2,164,0],[152,2,165,0],[153,0,166,0],[154,0,167,0],[155,0,168,0],[156,0,169,0],[157,0,170,0],[158,0,171,0],[159,0,172,0],[160,2,173,0],[160,11,173,9,"getPsigsFromInputFinalScripts"],[160,40,173,38,"getPsigsFromInputFinalScripts"],[160,41,173,39,"input"],[160,46,173,44],[160,48,173,46],[161,4,174,2],[161,8,174,8,"scriptItems"],[161,19,174,19],[161,22,174,22],[161,23,174,23,"input"],[161,28,174,28],[161,29,174,29,"finalScriptSig"],[161,43,174,43],[161,46,175,6],[161,48,175,8],[161,51,176,6,"_$$_REQUIRE"],[161,62,176,6],[161,63,176,6,"_dependencyMap"],[161,77,176,6],[161,95,176,14,"decompile"],[161,104,176,23],[161,105,176,24,"input"],[161,110,176,29],[161,111,176,30,"finalScriptSig"],[161,125,176,44],[161,126,176,45],[161,130,176,49],[161,132,176,51],[162,4,177,2],[162,8,177,8,"witnessItems"],[162,20,177,20],[162,23,177,23],[162,24,177,24,"input"],[162,29,177,29],[162,30,177,30,"finalScriptWitness"],[162,48,177,48],[162,51,178,6],[162,53,178,8],[162,56,179,6,"_$$_REQUIRE"],[162,67,179,6],[162,68,179,6,"_dependencyMap"],[162,82,179,6],[162,100,179,14,"decompile"],[162,109,179,23],[162,110,179,24,"input"],[162,115,179,29],[162,116,179,30,"finalScriptWitness"],[162,134,179,48],[162,135,179,49],[162,139,179,53],[162,141,179,55],[163,4,180,2],[163,11,180,9,"scriptItems"],[163,22,180,20],[163,23,181,5,"concat"],[163,29,181,11],[163,30,181,12,"witnessItems"],[163,42,181,24],[163,43,181,25],[163,44,182,5,"filter"],[163,50,182,11],[163,51,182,12],[163,61,182,12,"item"],[163,65,182,16],[163,67,182,20],[164,6,183,6],[164,13,183,13,"Buffer"],[164,19,183,19],[164,20,183,20,"isBuffer"],[164,28,183,28],[164,29,183,29,"item"],[164,33,183,33],[164,34,183,34],[164,38,183,38,"_$$_REQUIRE"],[164,49,183,38],[164,50,183,38,"_dependencyMap"],[164,64,183,38],[164,82,183,46,"isCanonicalScriptSignature"],[164,108,183,72],[164,109,183,73,"item"],[164,113,183,77],[164,114,183,78],[165,4,184,4],[165,5,184,5],[165,6,184,6],[165,7,185,5,"map"],[165,10,185,8],[165,11,185,9],[165,21,185,9,"sig"],[165,24,185,12],[166,6,185,12],[166,13,185,17],[167,8,185,19,"signature"],[167,17,185,28],[167,19,185,30,"sig"],[168,6,185,34],[168,7,185,35],[169,4,185,35],[169,5,185,36],[169,6,185,37],[170,2,186,0],[171,0,186,1],[171,3]],"functionMap":{"names":["<global>","isPaymentFactory","<anonymous>","witnessStackToScriptWitness","writeSlice","writeVarInt","writeVarSlice","writeVector","pubkeyPositionInScript","decompiled.findIndex$argument_0","pubkeyInScript","checkInputForSig","pSigs.some$argument_0","signatureBlocksAction","extractPartialSigs","pSigs.map$argument_0","getPsigsFromInputFinalScripts","scriptItems.concat.filter$argument_0","scriptItems.concat.filter.map$argument_0"],"mappings":"AAA;ACoB;SCC;GDO;CDC;AGkB;ECE;GDE;EEC;GFK;EGC;GHG;EIC;GJG;CHG;AQS;8BCK;GDO;CRC;AUQ;CVE;AWQ;oBCE;iEDC;CXE;AaS;CboB;AcY;mBCQ,gBD;CdC;AgBS;YCS;KDE;SEC,2BF;ChBC"}},"type":"js/module"}]}