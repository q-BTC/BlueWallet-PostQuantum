{"dependencies":[{"name":"bs58","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":29,"index":274},"end":{"line":7,"column":44,"index":289}}],"key":"PQqo2HgkPkXH2aPqmrA+CY8/cVs="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = default_1;\n  var bs58_1 = __importDefault(_$$_REQUIRE(_dependencyMap[0], \"bs58\"));\n  function default_1(checksumFn) {\n    // Encode a buffer as a base58-check encoded string\n    function encode(payload) {\n      var payloadU8 = Uint8Array.from(payload);\n      var checksum = checksumFn(payloadU8);\n      var length = payloadU8.length + 4;\n      var both = new Uint8Array(length);\n      both.set(payloadU8, 0);\n      both.set(checksum.subarray(0, 4), payloadU8.length);\n      return bs58_1.default.encode(both);\n    }\n    function decodeRaw(buffer) {\n      var payload = buffer.slice(0, -4);\n      var checksum = buffer.slice(-4);\n      var newChecksum = checksumFn(payload);\n      // eslint-disable-next-line\n      if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3]) return;\n      return payload;\n    }\n    // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n    function decodeUnsafe(str) {\n      var buffer = bs58_1.default.decodeUnsafe(str);\n      if (buffer == null) return;\n      return decodeRaw(buffer);\n    }\n    function decode(str) {\n      var buffer = bs58_1.default.decode(str);\n      var payload = decodeRaw(buffer);\n      if (payload == null) throw new Error('Invalid checksum');\n      return payload;\n    }\n    return {\n      encode: encode,\n      decode: decode,\n      decodeUnsafe: decodeUnsafe\n    };\n  }\n});","lineCount":51,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__importDefault"],[4,21,2,19],[4,24,2,23],[4,28,2,27],[4,32,2,31],[4,36,2,35],[4,37,2,36,"__importDefault"],[4,52,2,51],[4,56,2,56],[4,66,2,66,"mod"],[4,69,2,69],[4,71,2,71],[5,4,3,4],[5,11,3,12,"mod"],[5,14,3,15],[5,18,3,19,"mod"],[5,21,3,22],[5,22,3,23,"__esModule"],[5,32,3,33],[5,35,3,37,"mod"],[5,38,3,40],[5,41,3,43],[6,6,3,45],[6,15,3,54],[6,17,3,56,"mod"],[7,4,3,60],[7,5,3,61],[8,2,4,0],[8,3,4,1],[9,2,5,0,"Object"],[9,8,5,6],[9,9,5,7,"defineProperty"],[9,23,5,21],[9,24,5,22,"exports"],[9,31,5,29],[9,33,5,31],[9,45,5,43],[9,47,5,45],[10,4,5,47,"value"],[10,9,5,52],[10,11,5,54],[11,2,5,59],[11,3,5,60],[11,4,5,61],[12,2,6,0,"exports"],[12,9,6,7],[12,10,6,8,"default"],[12,17,6,15],[12,20,6,18,"default_1"],[12,29,6,27],[13,2,7,0],[13,6,7,4,"bs58_1"],[13,12,7,10],[13,15,7,13,"__importDefault"],[13,30,7,28],[13,31,7,29,"require"],[13,42,7,36],[13,43,7,36,"_dependencyMap"],[13,57,7,36],[13,68,7,43],[13,69,7,44],[13,70,7,45],[14,2,8,0],[14,11,8,9,"default_1"],[14,20,8,18,"default_1"],[14,21,8,19,"checksumFn"],[14,31,8,29],[14,33,8,31],[15,4,9,4],[16,4,10,4],[16,13,10,13,"encode"],[16,19,10,19,"encode"],[16,20,10,20,"payload"],[16,27,10,27],[16,29,10,29],[17,6,11,8],[17,10,11,12,"payloadU8"],[17,19,11,21],[17,22,11,24,"Uint8Array"],[17,32,11,34],[17,33,11,35,"from"],[17,37,11,39],[17,38,11,40,"payload"],[17,45,11,47],[17,46,11,48],[18,6,12,8],[18,10,12,12,"checksum"],[18,18,12,20],[18,21,12,23,"checksumFn"],[18,31,12,33],[18,32,12,34,"payloadU8"],[18,41,12,43],[18,42,12,44],[19,6,13,8],[19,10,13,12,"length"],[19,16,13,18],[19,19,13,21,"payloadU8"],[19,28,13,30],[19,29,13,31,"length"],[19,35,13,37],[19,38,13,40],[19,39,13,41],[20,6,14,8],[20,10,14,12,"both"],[20,14,14,16],[20,17,14,19],[20,21,14,23,"Uint8Array"],[20,31,14,33],[20,32,14,34,"length"],[20,38,14,40],[20,39,14,41],[21,6,15,8,"both"],[21,10,15,12],[21,11,15,13,"set"],[21,14,15,16],[21,15,15,17,"payloadU8"],[21,24,15,26],[21,26,15,28],[21,27,15,29],[21,28,15,30],[22,6,16,8,"both"],[22,10,16,12],[22,11,16,13,"set"],[22,14,16,16],[22,15,16,17,"checksum"],[22,23,16,25],[22,24,16,26,"subarray"],[22,32,16,34],[22,33,16,35],[22,34,16,36],[22,36,16,38],[22,37,16,39],[22,38,16,40],[22,40,16,42,"payloadU8"],[22,49,16,51],[22,50,16,52,"length"],[22,56,16,58],[22,57,16,59],[23,6,17,8],[23,13,17,15,"bs58_1"],[23,19,17,21],[23,20,17,22,"default"],[23,27,17,29],[23,28,17,30,"encode"],[23,34,17,36],[23,35,17,37,"both"],[23,39,17,41],[23,40,17,42],[24,4,18,4],[25,4,19,4],[25,13,19,13,"decodeRaw"],[25,22,19,22,"decodeRaw"],[25,23,19,23,"buffer"],[25,29,19,29],[25,31,19,31],[26,6,20,8],[26,10,20,12,"payload"],[26,17,20,19],[26,20,20,22,"buffer"],[26,26,20,28],[26,27,20,29,"slice"],[26,32,20,34],[26,33,20,35],[26,34,20,36],[26,36,20,38],[26,37,20,39],[26,38,20,40],[26,39,20,41],[27,6,21,8],[27,10,21,12,"checksum"],[27,18,21,20],[27,21,21,23,"buffer"],[27,27,21,29],[27,28,21,30,"slice"],[27,33,21,35],[27,34,21,36],[27,35,21,37],[27,36,21,38],[27,37,21,39],[28,6,22,8],[28,10,22,12,"newChecksum"],[28,21,22,23],[28,24,22,26,"checksumFn"],[28,34,22,36],[28,35,22,37,"payload"],[28,42,22,44],[28,43,22,45],[29,6,23,8],[30,6,24,8],[30,10,24,12,"checksum"],[30,18,24,20],[30,19,24,21],[30,20,24,22],[30,21,24,23],[30,24,24,26,"newChecksum"],[30,35,24,37],[30,36,24,38],[30,37,24,39],[30,38,24,40],[30,41,25,12,"checksum"],[30,49,25,20],[30,50,25,21],[30,51,25,22],[30,52,25,23],[30,55,25,26,"newChecksum"],[30,66,25,37],[30,67,25,38],[30,68,25,39],[30,69,25,40],[30,72,26,12,"checksum"],[30,80,26,20],[30,81,26,21],[30,82,26,22],[30,83,26,23],[30,86,26,26,"newChecksum"],[30,97,26,37],[30,98,26,38],[30,99,26,39],[30,100,26,40],[30,103,27,12,"checksum"],[30,111,27,20],[30,112,27,21],[30,113,27,22],[30,114,27,23],[30,117,27,26,"newChecksum"],[30,128,27,37],[30,129,27,38],[30,130,27,39],[30,131,27,40],[30,133,28,12],[31,6,29,8],[31,13,29,15,"payload"],[31,20,29,22],[32,4,30,4],[33,4,31,4],[34,4,32,4],[34,13,32,13,"decodeUnsafe"],[34,25,32,25,"decodeUnsafe"],[34,26,32,26,"str"],[34,29,32,29],[34,31,32,31],[35,6,33,8],[35,10,33,12,"buffer"],[35,16,33,18],[35,19,33,21,"bs58_1"],[35,25,33,27],[35,26,33,28,"default"],[35,33,33,35],[35,34,33,36,"decodeUnsafe"],[35,46,33,48],[35,47,33,49,"str"],[35,50,33,52],[35,51,33,53],[36,6,34,8],[36,10,34,12,"buffer"],[36,16,34,18],[36,20,34,22],[36,24,34,26],[36,26,35,12],[37,6,36,8],[37,13,36,15,"decodeRaw"],[37,22,36,24],[37,23,36,25,"buffer"],[37,29,36,31],[37,30,36,32],[38,4,37,4],[39,4,38,4],[39,13,38,13,"decode"],[39,19,38,19,"decode"],[39,20,38,20,"str"],[39,23,38,23],[39,25,38,25],[40,6,39,8],[40,10,39,12,"buffer"],[40,16,39,18],[40,19,39,21,"bs58_1"],[40,25,39,27],[40,26,39,28,"default"],[40,33,39,35],[40,34,39,36,"decode"],[40,40,39,42],[40,41,39,43,"str"],[40,44,39,46],[40,45,39,47],[41,6,40,8],[41,10,40,12,"payload"],[41,17,40,19],[41,20,40,22,"decodeRaw"],[41,29,40,31],[41,30,40,32,"buffer"],[41,36,40,38],[41,37,40,39],[42,6,41,8],[42,10,41,12,"payload"],[42,17,41,19],[42,21,41,23],[42,25,41,27],[42,27,42,12],[42,33,42,18],[42,37,42,22,"Error"],[42,42,42,27],[42,43,42,28],[42,61,42,46],[42,62,42,47],[43,6,43,8],[43,13,43,15,"payload"],[43,20,43,22],[44,4,44,4],[45,4,45,4],[45,11,45,11],[46,6,46,8,"encode"],[46,12,46,14],[46,14,46,16,"encode"],[46,20,46,22],[47,6,47,8,"decode"],[47,12,47,14],[47,14,47,16,"decode"],[47,20,47,22],[48,6,48,8,"decodeUnsafe"],[48,18,48,20],[48,20,48,22,"decodeUnsafe"],[49,4,49,4],[49,5,49,5],[50,2,50,0],[51,0,50,1],[51,3]],"functionMap":{"names":["<global>","<anonymous>","default_1","encode","decodeRaw","decodeUnsafe","decode"],"mappings":"AAA;wDCC;CDE;AEI;ICE;KDQ;IEC;KFW;IGE;KHK;IIC;KJM;CFM"}},"type":"js/module"}]}