{"dependencies":[{"name":"../../typeFields","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":21,"index":98},"end":{"line":3,"column":48,"index":125}},{"start":{"line":3,"column":21,"index":98},"end":{"line":3,"column":48,"index":125}}],"key":"JA6Y4U+9BJNyHBqSRMPAJW1YgVo="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function decode(keyVal) {\n    if (keyVal.key[0] !== _$$_REQUIRE(_dependencyMap[0], \"../../typeFields\").InputTypes.TAP_SCRIPT_SIG) {\n      throw new Error('Decode Error: could not decode tapScriptSig with key 0x' + keyVal.key.toString('hex'));\n    }\n    if (keyVal.key.length !== 65) {\n      throw new Error('Decode Error: tapScriptSig has invalid key 0x' + keyVal.key.toString('hex'));\n    }\n    if (keyVal.value.length !== 64 && keyVal.value.length !== 65) {\n      throw new Error('Decode Error: tapScriptSig has invalid signature in key 0x' + keyVal.key.toString('hex'));\n    }\n    var pubkey = keyVal.key.slice(1, 33);\n    var leafHash = keyVal.key.slice(33);\n    return {\n      pubkey: pubkey,\n      leafHash: leafHash,\n      signature: keyVal.value\n    };\n  }\n  exports.decode = decode;\n  function encode(tSig) {\n    var head = Buffer.from([_$$_REQUIRE(_dependencyMap[0], \"../../typeFields\").InputTypes.TAP_SCRIPT_SIG]);\n    return {\n      key: Buffer.concat([head, tSig.pubkey, tSig.leafHash]),\n      value: tSig.signature\n    };\n  }\n  exports.encode = encode;\n  exports.expected = '{ pubkey: Buffer; leafHash: Buffer; signature: Buffer; }';\n  function check(data) {\n    return Buffer.isBuffer(data.pubkey) && Buffer.isBuffer(data.leafHash) && Buffer.isBuffer(data.signature) && data.pubkey.length === 32 && data.leafHash.length === 32 && (data.signature.length === 64 || data.signature.length === 65);\n  }\n  exports.check = check;\n  function canAddToArray(array, item, dupeSet) {\n    var dupeString = item.pubkey.toString('hex') + item.leafHash.toString('hex');\n    if (dupeSet.has(dupeString)) return false;\n    dupeSet.add(dupeString);\n    return array.filter(function (v) {\n      return v.pubkey.equals(item.pubkey) && v.leafHash.equals(item.leafHash);\n    }).length === 0;\n  }\n  exports.canAddToArray = canAddToArray;\n});","lineCount":48,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,4,0],[7,11,4,9,"decode"],[7,17,4,15,"decode"],[7,18,4,16,"keyVal"],[7,24,4,22],[7,26,4,24],[8,4,5,2],[8,8,5,6,"keyVal"],[8,14,5,12],[8,15,5,13,"key"],[8,18,5,16],[8,19,5,17],[8,20,5,18],[8,21,5,19],[8,26,5,24,"_$$_REQUIRE"],[8,37,5,24],[8,38,5,24,"_dependencyMap"],[8,52,5,24],[8,77,5,37,"InputTypes"],[8,87,5,47],[8,88,5,48,"TAP_SCRIPT_SIG"],[8,102,5,62],[8,104,5,64],[9,6,6,4],[9,12,6,10],[9,16,6,14,"Error"],[9,21,6,19],[9,22,7,6],[9,79,7,63],[9,82,8,8,"keyVal"],[9,88,8,14],[9,89,8,15,"key"],[9,92,8,18],[9,93,8,19,"toString"],[9,101,8,27],[9,102,8,28],[9,107,8,33],[9,108,9,4],[9,109,9,5],[10,4,10,2],[11,4,11,2],[11,8,11,6,"keyVal"],[11,14,11,12],[11,15,11,13,"key"],[11,18,11,16],[11,19,11,17,"length"],[11,25,11,23],[11,30,11,28],[11,32,11,30],[11,34,11,32],[12,6,12,4],[12,12,12,10],[12,16,12,14,"Error"],[12,21,12,19],[12,22,13,6],[12,69,13,53],[12,72,14,8,"keyVal"],[12,78,14,14],[12,79,14,15,"key"],[12,82,14,18],[12,83,14,19,"toString"],[12,91,14,27],[12,92,14,28],[12,97,14,33],[12,98,15,4],[12,99,15,5],[13,4,16,2],[14,4,17,2],[14,8,17,6,"keyVal"],[14,14,17,12],[14,15,17,13,"value"],[14,20,17,18],[14,21,17,19,"length"],[14,27,17,25],[14,32,17,30],[14,34,17,32],[14,38,17,36,"keyVal"],[14,44,17,42],[14,45,17,43,"value"],[14,50,17,48],[14,51,17,49,"length"],[14,57,17,55],[14,62,17,60],[14,64,17,62],[14,66,17,64],[15,6,18,4],[15,12,18,10],[15,16,18,14,"Error"],[15,21,18,19],[15,22,19,6],[15,82,19,66],[15,85,20,8,"keyVal"],[15,91,20,14],[15,92,20,15,"key"],[15,95,20,18],[15,96,20,19,"toString"],[15,104,20,27],[15,105,20,28],[15,110,20,33],[15,111,21,4],[15,112,21,5],[16,4,22,2],[17,4,23,2],[17,8,23,8,"pubkey"],[17,14,23,14],[17,17,23,17,"keyVal"],[17,23,23,23],[17,24,23,24,"key"],[17,27,23,27],[17,28,23,28,"slice"],[17,33,23,33],[17,34,23,34],[17,35,23,35],[17,37,23,37],[17,39,23,39],[17,40,23,40],[18,4,24,2],[18,8,24,8,"leafHash"],[18,16,24,16],[18,19,24,19,"keyVal"],[18,25,24,25],[18,26,24,26,"key"],[18,29,24,29],[18,30,24,30,"slice"],[18,35,24,35],[18,36,24,36],[18,38,24,38],[18,39,24,39],[19,4,25,2],[19,11,25,9],[20,6,26,4,"pubkey"],[20,12,26,10],[20,14,26,4,"pubkey"],[20,20,26,10],[21,6,27,4,"leafHash"],[21,14,27,12],[21,16,27,4,"leafHash"],[21,24,27,12],[22,6,28,4,"signature"],[22,15,28,13],[22,17,28,15,"keyVal"],[22,23,28,21],[22,24,28,22,"value"],[23,4,29,2],[23,5,29,3],[24,2,30,0],[25,2,31,0,"exports"],[25,9,31,7],[25,10,31,8,"decode"],[25,16,31,14],[25,19,31,17,"decode"],[25,25,31,23],[26,2,32,0],[26,11,32,9,"encode"],[26,17,32,15,"encode"],[26,18,32,16,"tSig"],[26,22,32,20],[26,24,32,22],[27,4,33,2],[27,8,33,8,"head"],[27,12,33,12],[27,15,33,15,"Buffer"],[27,21,33,21],[27,22,33,22,"from"],[27,26,33,26],[27,27,33,27],[27,28,33,28,"_$$_REQUIRE"],[27,39,33,28],[27,40,33,28,"_dependencyMap"],[27,54,33,28],[27,79,33,41,"InputTypes"],[27,89,33,51],[27,90,33,52,"TAP_SCRIPT_SIG"],[27,104,33,66],[27,105,33,67],[27,106,33,68],[28,4,34,2],[28,11,34,9],[29,6,35,4,"key"],[29,9,35,7],[29,11,35,9,"Buffer"],[29,17,35,15],[29,18,35,16,"concat"],[29,24,35,22],[29,25,35,23],[29,26,35,24,"head"],[29,30,35,28],[29,32,35,30,"tSig"],[29,36,35,34],[29,37,35,35,"pubkey"],[29,43,35,41],[29,45,35,43,"tSig"],[29,49,35,47],[29,50,35,48,"leafHash"],[29,58,35,56],[29,59,35,57],[29,60,35,58],[30,6,36,4,"value"],[30,11,36,9],[30,13,36,11,"tSig"],[30,17,36,15],[30,18,36,16,"signature"],[31,4,37,2],[31,5,37,3],[32,2,38,0],[33,2,39,0,"exports"],[33,9,39,7],[33,10,39,8,"encode"],[33,16,39,14],[33,19,39,17,"encode"],[33,25,39,23],[34,2,40,0,"exports"],[34,9,40,7],[34,10,40,8,"expected"],[34,18,40,16],[34,21,40,19],[34,79,40,77],[35,2,41,0],[35,11,41,9,"check"],[35,16,41,14,"check"],[35,17,41,15,"data"],[35,21,41,19],[35,23,41,21],[36,4,42,2],[36,11,43,4,"Buffer"],[36,17,43,10],[36,18,43,11,"isBuffer"],[36,26,43,19],[36,27,43,20,"data"],[36,31,43,24],[36,32,43,25,"pubkey"],[36,38,43,31],[36,39,43,32],[36,43,44,4,"Buffer"],[36,49,44,10],[36,50,44,11,"isBuffer"],[36,58,44,19],[36,59,44,20,"data"],[36,63,44,24],[36,64,44,25,"leafHash"],[36,72,44,33],[36,73,44,34],[36,77,45,4,"Buffer"],[36,83,45,10],[36,84,45,11,"isBuffer"],[36,92,45,19],[36,93,45,20,"data"],[36,97,45,24],[36,98,45,25,"signature"],[36,107,45,34],[36,108,45,35],[36,112,46,4,"data"],[36,116,46,8],[36,117,46,9,"pubkey"],[36,123,46,15],[36,124,46,16,"length"],[36,130,46,22],[36,135,46,27],[36,137,46,29],[36,141,47,4,"data"],[36,145,47,8],[36,146,47,9,"leafHash"],[36,154,47,17],[36,155,47,18,"length"],[36,161,47,24],[36,166,47,29],[36,168,47,31],[36,173,48,5,"data"],[36,177,48,9],[36,178,48,10,"signature"],[36,187,48,19],[36,188,48,20,"length"],[36,194,48,26],[36,199,48,31],[36,201,48,33],[36,205,48,37,"data"],[36,209,48,41],[36,210,48,42,"signature"],[36,219,48,51],[36,220,48,52,"length"],[36,226,48,58],[36,231,48,63],[36,233,48,65],[36,234,48,66],[37,2,50,0],[38,2,51,0,"exports"],[38,9,51,7],[38,10,51,8,"check"],[38,15,51,13],[38,18,51,16,"check"],[38,23,51,21],[39,2,52,0],[39,11,52,9,"canAddToArray"],[39,24,52,22,"canAddToArray"],[39,25,52,23,"array"],[39,30,52,28],[39,32,52,30,"item"],[39,36,52,34],[39,38,52,36,"dupeSet"],[39,45,52,43],[39,47,52,45],[40,4,53,2],[40,8,53,8,"dupeString"],[40,18,53,18],[40,21,54,4,"item"],[40,25,54,8],[40,26,54,9,"pubkey"],[40,32,54,15],[40,33,54,16,"toString"],[40,41,54,24],[40,42,54,25],[40,47,54,30],[40,48,54,31],[40,51,54,34,"item"],[40,55,54,38],[40,56,54,39,"leafHash"],[40,64,54,47],[40,65,54,48,"toString"],[40,73,54,56],[40,74,54,57],[40,79,54,62],[40,80,54,63],[41,4,55,2],[41,8,55,6,"dupeSet"],[41,15,55,13],[41,16,55,14,"has"],[41,19,55,17],[41,20,55,18,"dupeString"],[41,30,55,28],[41,31,55,29],[41,33,55,31],[41,40,55,38],[41,45,55,43],[42,4,56,2,"dupeSet"],[42,11,56,9],[42,12,56,10,"add"],[42,15,56,13],[42,16,56,14,"dupeString"],[42,26,56,24],[42,27,56,25],[43,4,57,2],[43,11,58,4,"array"],[43,16,58,9],[43,17,58,10,"filter"],[43,23,58,16],[43,24,59,6],[43,34,59,6,"v"],[43,35,59,7],[44,6,59,7],[44,13,59,11,"v"],[44,14,59,12],[44,15,59,13,"pubkey"],[44,21,59,19],[44,22,59,20,"equals"],[44,28,59,26],[44,29,59,27,"item"],[44,33,59,31],[44,34,59,32,"pubkey"],[44,40,59,38],[44,41,59,39],[44,45,59,43,"v"],[44,46,59,44],[44,47,59,45,"leafHash"],[44,55,59,53],[44,56,59,54,"equals"],[44,62,59,60],[44,63,59,61,"item"],[44,67,59,65],[44,68,59,66,"leafHash"],[44,76,59,74],[44,77,59,75],[45,4,59,75],[45,5,60,4],[45,6,60,5],[45,7,60,6,"length"],[45,13,60,12],[45,18,60,17],[45,19,60,18],[46,2,62,0],[47,2,63,0,"exports"],[47,9,63,7],[47,10,63,8,"canAddToArray"],[47,23,63,21],[47,26,63,24,"canAddToArray"],[47,39,63,37],[48,0,63,38],[48,3]],"functionMap":{"names":["<global>","decode","encode","check","canAddToArray","array.filter$argument_0"],"mappings":"AAA;ACG;CD0B;AEE;CFM;AGG;CHS;AIE;MCO,qED;CJG"}},"type":"js/module"}]}