{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":649,"column":0,"index":21127}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":649,"column":0,"index":21127}}],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE="}},{"name":"@babel/runtime/helpers/objectWithoutProperties","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":649,"column":0,"index":21127}}],"key":"fnQVLibs90KHiJ7y48fLgPWzDS0="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":649,"column":0,"index":21127}}],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":649,"column":0,"index":21127}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":649,"column":0,"index":21127}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":649,"column":0,"index":21127}}],"key":"aU3Lrys8xTVpYSDJal2nhppojC8="}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":649,"column":0,"index":21127}}],"key":"4DwyfFXBA53CJWVTVj5w3kH1PUg="}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":649,"column":0,"index":21127}}],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA="}},{"name":"bignumber.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"+tJwKP0N5JISX+Ssl/Xk2Ffv6xc="}},{"name":"bitcoinjs-lib","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":38},"end":{"line":2,"column":41,"index":79}}],"key":"/nlroPCTcjBceL8E3aKsbjY7aTo="}},{"name":"bitcoinjs-message","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":80},"end":{"line":3,"column":47,"index":127}}],"key":"YR6HaIxUvhhcjQ/KRy08it5ax3k="}},{"name":"coinselect","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":128},"end":{"line":4,"column":99,"index":227}}],"key":"DNRYj+mmOVUWP/D3JhqYJ3/s/mQ="}},{"name":"coinselect/split","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":228},"end":{"line":5,"column":47,"index":275}}],"key":"N/NaM+6CxtC8HCojEXNteWe6Pvk="}},{"name":"../../blue_modules/BlueElectrum","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":336},"end":{"line":8,"column":64,"index":400}}],"key":"4YdrXI/cQIf9X1EFj5L/r0NpY3g="}},{"name":"../../blue_modules/noble_ecc","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":401},"end":{"line":9,"column":47,"index":448}}],"key":"Aqf0Vm30DplNvzAB1bhpm+uOhYU="}},{"name":"ecpair","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":276},"end":{"line":6,"column":58,"index":334}}],"key":"u6yWeivdFv15Am3FmwSfeX38wPs="}},{"name":"../rng","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":492},"end":{"line":11,"column":37,"index":529}}],"key":"m0IKNn9EGKw2Q1bQbchJk2wql64="}},{"name":"..","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":449},"end":{"line":10,"column":42,"index":491}}],"key":"ADngp6w+yuVzXdxwLcCl5wUt+mU="}},{"name":"./abstract-wallet","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":530},"end":{"line":12,"column":51,"index":581}}],"key":"yL6u2DFArR3ds5hEn0EkXJ5tiW4="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.LegacyWallet = void 0;\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/objectWithoutProperties\"));\n  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/createClass\"));\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"@babel/runtime/helpers/getPrototypeOf\"));\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"@babel/runtime/helpers/inherits\"));\n  var _bignumber = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9], \"bignumber.js\"));\n  var bitcoin = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10], \"bitcoinjs-lib\"));\n  var _bitcoinjsMessage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11], \"bitcoinjs-message\"));\n  var _coinselect = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12], \"coinselect\"));\n  var _split = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13], \"coinselect/split\"));\n  var BlueElectrum = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[14], \"../../blue_modules/BlueElectrum\"));\n  var _noble_ecc = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15], \"../../blue_modules/noble_ecc\"));\n  var _excluded = [\"vin\", \"vout\"],\n    _excluded2 = [\"vin\", \"vout\"];\n  function _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\n  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\n  var ECPair = (0, _$$_REQUIRE(_dependencyMap[16], \"ecpair\").ECPairFactory)(_noble_ecc.default);\n  bitcoin.initEccLib(_noble_ecc.default);\n\n  /**\n   *  Has private key and single address like \"1ABCD.....\"\n   *  (legacy P2PKH compressed)\n   */\n  var LegacyWallet = exports.LegacyWallet = /*#__PURE__*/function (_AbstractWallet) {\n    function LegacyWallet() {\n      var _this;\n      (0, _classCallCheck2.default)(this, LegacyWallet);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, LegacyWallet, [].concat(args));\n      // @ts-ignore: override\n      _this.type = LegacyWallet.type;\n      // @ts-ignore: override\n      _this.typeReadable = LegacyWallet.typeReadable;\n      _this._txs_by_external_index = [];\n      _this._txs_by_internal_index = [];\n      return _this;\n    }\n    (0, _inherits2.default)(LegacyWallet, _AbstractWallet);\n    return (0, _createClass2.default)(LegacyWallet, [{\n      key: \"timeToRefreshBalance\",\n      value:\n      /**\n       * Simple function which says that we havent tried to fetch balance\n       * for a long time\n       *\n       * @return {boolean}\n       */\n      function timeToRefreshBalance() {\n        if (+new Date() - this._lastBalanceFetch >= 5 * 60 * 1000) {\n          return true;\n        }\n        return false;\n      }\n\n      /**\n       * Simple function which says if we hve some low-confirmed transactions\n       * and we better fetch them\n       *\n       * @return {boolean}\n       */\n    }, {\n      key: \"timeToRefreshTransaction\",\n      value: function timeToRefreshTransaction() {\n        for (var tx of this.getTransactions()) {\n          var _tx$confirmations;\n          if (((_tx$confirmations = tx.confirmations) != null ? _tx$confirmations : 0) < 7 && this._lastTxFetch < +new Date() - 5 * 60 * 1000) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }, {\n      key: \"generate\",\n      value: function () {\n        var _generate = (0, _asyncToGenerator2.default)(function* () {\n          var buf = yield (0, _$$_REQUIRE(_dependencyMap[17], \"../rng\").randomBytes)(32);\n          this.secret = ECPair.makeRandom({\n            rng: function rng() {\n              return buf;\n            }\n          }).toWIF();\n        });\n        function generate() {\n          return _generate.apply(this, arguments);\n        }\n        return generate;\n      }()\n    }, {\n      key: \"generateFromEntropy\",\n      value: function () {\n        var _generateFromEntropy = (0, _asyncToGenerator2.default)(function* (user) {\n          if (user.length !== 32) {\n            throw new Error('Entropy should be 32 bytes');\n          }\n          this.secret = ECPair.fromPrivateKey(user).toWIF();\n        });\n        function generateFromEntropy(_x) {\n          return _generateFromEntropy.apply(this, arguments);\n        }\n        return generateFromEntropy;\n      }()\n    }, {\n      key: \"getAddress\",\n      value: function getAddress() {\n        if (this._address) return this._address;\n        var address;\n        try {\n          var keyPair = ECPair.fromWIF(this.secret);\n          address = bitcoin.payments.p2pkh({\n            pubkey: keyPair.publicKey\n          }).address;\n        } catch (err) {\n          return false;\n        }\n        this._address = address != null ? address : false;\n        return this._address;\n      }\n\n      /**\n       * @inheritDoc\n       */\n    }, {\n      key: \"getAllExternalAddresses\",\n      value: function getAllExternalAddresses() {\n        var address = this.getAddress();\n        return address ? [address] : [];\n      }\n\n      /**\n       * Fetches balance of the Wallet via API.\n       * Returns VOID. Get the actual balance via getter.\n       *\n       * @returns {Promise.<void>}\n       */\n    }, {\n      key: \"fetchBalance\",\n      value: (function () {\n        var _fetchBalance = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            var address = this.getAddress();\n            if (!address) throw new Error('LegacyWallet: Invalid address');\n            var balance = yield BlueElectrum.getBalanceByAddress(address);\n            this.balance = Number(balance.confirmed);\n            this.unconfirmed_balance = Number(balance.unconfirmed);\n            this._lastBalanceFetch = +new Date();\n          } catch (error) {\n            console.warn(error);\n          }\n        });\n        function fetchBalance() {\n          return _fetchBalance.apply(this, arguments);\n        }\n        return fetchBalance;\n      }()\n      /**\n       * Fetches UTXO from API. Returns VOID.\n       *\n       * @return {Promise.<void>}\n       */\n      )\n    }, {\n      key: \"fetchUtxo\",\n      value: (function () {\n        var _fetchUtxo = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            var address = this.getAddress();\n            if (!address) throw new Error('LegacyWallet: Invalid address');\n            var utxos = yield BlueElectrum.multiGetUtxoByAddress([address]);\n            this._utxo = [];\n            for (var arr of Object.values(utxos)) {\n              this._utxo = this._utxo.concat(arr);\n            }\n\n            // now we need to fetch txhash for each input as required by PSBT\n            if (LegacyWallet.type !== this.type) return; // but only for LEGACY single-address wallets\n            var txhexes = yield BlueElectrum.multiGetTransactionByTxid(this._utxo.map(function (u) {\n              return u.txid;\n            }), false);\n            var newUtxos = [];\n            for (var u of this._utxo) {\n              if (txhexes[u.txid]) u.txhex = txhexes[u.txid];\n              newUtxos.push(u);\n            }\n            this._utxo = newUtxos;\n          } catch (error) {\n            console.warn(error);\n          }\n        });\n        function fetchUtxo() {\n          return _fetchUtxo.apply(this, arguments);\n        }\n        return fetchUtxo;\n      }()\n      /**\n       * Getter for previously fetched UTXO. For example:\n       *     [ { height: 0,\n       *    value: 666,\n       *    address: 'string',\n       *    vout: 1,\n       *    txid: 'string',\n       *    wif: 'string',\n       *    confirmations: 0 } ]\n       *\n       * @param respectFrozen {boolean} Add Frozen outputs\n       * @returns {[]}\n       */\n      )\n    }, {\n      key: \"getUtxo\",\n      value: function getUtxo() {\n        var _this2 = this;\n        var respectFrozen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var ret = [];\n        for (var u of this._utxo) {\n          if (!u.confirmations && u.height) u.confirmations = BlueElectrum.estimateCurrentBlockheight() - u.height;\n          ret.push(u);\n        }\n        if (ret.length === 0) {\n          ret = this.getDerivedUtxoFromOurTransaction(); // oy vey, no stored utxo. lets attempt to derive it from stored transactions\n        }\n        if (!respectFrozen) {\n          ret = ret.filter(function (_ref) {\n            var txid = _ref.txid,\n              vout = _ref.vout;\n            return !txid || !_this2.getUTXOMetadata(txid, vout).frozen;\n          });\n        }\n        return ret;\n      }\n    }, {\n      key: \"getDerivedUtxoFromOurTransaction\",\n      value: function getDerivedUtxoFromOurTransaction() {\n        var returnSpentUtxoAsWell = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var utxos = [];\n        var ownedAddressesHashmap = {};\n        var addrs = this.getAddress();\n        if (addrs) ownedAddressesHashmap[addrs] = true;\n\n        /**\n         * below copypasted from\n         * @see AbstractHDElectrumWallet.getDerivedUtxoFromOurTransaction\n         */\n\n        for (var tx of this.getTransactions()) {\n          for (var output of tx.outputs) {\n            var address = false;\n            if (output.scriptPubKey && output.scriptPubKey.addresses && output.scriptPubKey.addresses[0]) {\n              address = output.scriptPubKey.addresses[0];\n            }\n            if (address && ownedAddressesHashmap[address]) {\n              var _tx$confirmations2;\n              var value = new _bignumber.default(output.value).multipliedBy(100000000).toNumber();\n              utxos.push({\n                txid: tx.txid,\n                vout: output.n,\n                address: address,\n                value: value,\n                confirmations: tx.confirmations,\n                wif: false,\n                height: BlueElectrum.estimateCurrentBlockheight() - ((_tx$confirmations2 = tx.confirmations) != null ? _tx$confirmations2 : 0)\n              });\n            }\n          }\n        }\n        if (returnSpentUtxoAsWell) return utxos;\n\n        // got all utxos we ever had. lets filter out the ones that are spent:\n        var ret = [];\n        for (var utxo of utxos) {\n          var spent = false;\n          for (var _tx of this.getTransactions()) {\n            for (var input of _tx.inputs) {\n              if (input.txid === utxo.txid && input.vout === utxo.vout) spent = true;\n              // utxo we got previously was actually spent right here ^^\n            }\n          }\n          if (!spent) {\n            ret.push(utxo);\n          }\n        }\n        return ret;\n      }\n\n      /**\n       * Fetches transactions via Electrum. Returns VOID.\n       * Use getter to get the actual list.   *\n       * @see AbstractHDElectrumWallet.fetchTransactions()\n       *\n       * @return {Promise.<void>}\n       */\n    }, {\n      key: \"fetchTransactions\",\n      value: (function () {\n        var _fetchTransactions = (0, _asyncToGenerator2.default)(function* () {\n          // Below is a simplified copypaste from HD electrum wallet\n          var _txsByExternalIndex = [];\n          var address = this.getAddress();\n          var addresses2fetch = address ? [address] : [];\n\n          // first: batch fetch for all addresses histories\n          var histories = yield BlueElectrum.multiGetHistoryByAddress(addresses2fetch);\n          var txs = {};\n          for (var history of Object.values(histories)) {\n            for (var tx of history) {\n              txs[tx.tx_hash] = tx;\n            }\n          }\n          if (this.getTransactions().length === 0 && Object.values(txs).length > 1000) throw new Error('Addresses with history of > 1000 transactions are not supported');\n          // we check existing transactions, so if there are any then user is just using his wallet and gradually reaching the theshold, which\n          // is safe because in that case our cache is filled\n\n          // next, batch fetching each txid we got\n          var txdatas = yield BlueElectrum.multiGetTransactionByTxid(Object.keys(txs), true);\n          var transactions = Object.values(txdatas);\n\n          // now, tricky part. we collect all transactions from inputs (vin), and batch fetch them too.\n          // then we combine all this data (we need inputs to see source addresses and amounts)\n          var vinTxids = [];\n          for (var txdata of transactions) {\n            for (var vin of txdata.vin) {\n              vin.txid && vinTxids.push(vin.txid);\n              // ^^^^ not all inputs have txid, some of them are Coinbase (newly-created coins)\n            }\n          }\n          var vintxdatas = yield BlueElectrum.multiGetTransactionByTxid(vinTxids, true);\n\n          // fetched all transactions from our inputs. now we need to combine it.\n          // iterating all _our_ transactions:\n          var transactionsWithInputValue = transactions.map(function (tx) {\n            return Object.assign({}, tx, {\n              vin: tx.vin.map(function (vin) {\n                var inpTxid = vin.txid;\n                var inpVout = vin.vout;\n                // got txid and output number of _previous_ transaction we shoud look into\n\n                if (vintxdatas[inpTxid] && vintxdatas[inpTxid].vout[inpVout]) {\n                  return Object.assign({}, vin, {\n                    addresses: vintxdatas[inpTxid].vout[inpVout].scriptPubKey.addresses,\n                    value: vintxdatas[inpTxid].vout[inpVout].value\n                  });\n                } else {\n                  return vin;\n                }\n              })\n            });\n          });\n\n          // now, we need to put transactions in all relevant `cells` of internal hashmaps: this.transactions_by_internal_index && this.transactions_by_external_index\n\n          for (var _tx2 of transactionsWithInputValue) {\n            for (var _vin of _tx2.vin) {\n              if ('addresses' in _vin && _vin.addresses && _vin.addresses.indexOf(address || '') !== -1) {\n                // this TX is related to our address\n                var vin2 = _tx2.vin,\n                  vout = _tx2.vout,\n                  txRest = (0, _objectWithoutProperties2.default)(_tx2, _excluded);\n                var clonedTx = Object.assign({}, txRest, {\n                  inputs: (0, _toConsumableArray2.default)(vin2),\n                  outputs: (0, _toConsumableArray2.default)(vout)\n                });\n                _txsByExternalIndex.push(clonedTx);\n              }\n            }\n            for (var _vout of _tx2.vout) {\n              if (_vout.scriptPubKey.addresses && _vout.scriptPubKey.addresses.indexOf(address || '') !== -1) {\n                // this TX is related to our address\n                var _vin2 = _tx2.vin,\n                  vout2 = _tx2.vout,\n                  _txRest = (0, _objectWithoutProperties2.default)(_tx2, _excluded2);\n                var _clonedTx = Object.assign({}, _txRest, {\n                  inputs: (0, _toConsumableArray2.default)(_vin2),\n                  outputs: (0, _toConsumableArray2.default)(vout2)\n                });\n                _txsByExternalIndex.push(_clonedTx);\n              }\n            }\n          }\n          this._txs_by_external_index = _txsByExternalIndex;\n          this._lastTxFetch = +new Date();\n        });\n        function fetchTransactions() {\n          return _fetchTransactions.apply(this, arguments);\n        }\n        return fetchTransactions;\n      }())\n    }, {\n      key: \"getTransactions\",\n      value: function getTransactions() {\n        // a hacky code reuse from electrum HD wallet:\n        this._txs_by_external_index = this._txs_by_external_index || [];\n        this._txs_by_internal_index = [];\n        var hd = new (_$$_REQUIRE(_dependencyMap[18], \"..\").HDSegwitBech32Wallet)();\n        return hd.getTransactions.apply(this);\n      }\n\n      /**\n       * Broadcast txhex. Can throw an exception if failed\n       *\n       * @param {String} txhex\n       * @returns {Promise<boolean>}\n       */\n    }, {\n      key: \"broadcastTx\",\n      value: (function () {\n        var _broadcastTx = (0, _asyncToGenerator2.default)(function* (txhex) {\n          var broadcast = yield BlueElectrum.broadcastV2(txhex);\n          console.log({\n            broadcast: broadcast\n          });\n          if (broadcast.indexOf('successfully') !== -1) return true;\n          return broadcast.length === 64; // this means return string is txid (precise length), so it was broadcasted ok\n        });\n        function broadcastTx(_x2) {\n          return _broadcastTx.apply(this, arguments);\n        }\n        return broadcastTx;\n      }())\n    }, {\n      key: \"coinselect\",\n      value: function coinselect(utxos, targets, feeRate) {\n        var algo = _coinselect.default;\n        // if targets has output without a value, we want send MAX to it\n        if (targets.some(function (i) {\n          return !('value' in i);\n        })) {\n          algo = _split.default;\n        }\n        var _utxos = JSON.parse(JSON.stringify(utxos));\n        var _targets = JSON.parse(JSON.stringify(targets));\n\n        // compensating for coinselect inability to deal with segwit inputs, and overriding script length for proper vbytes calculation\n        for (var u of _utxos) {\n          var _u$script;\n          if ((_u$script = u.script) != null && _u$script.length) {\n            continue;\n          }\n          if (this.segwitType === 'p2wpkh') {\n            u.script = {\n              length: 27\n            };\n          } else if (this.segwitType === 'p2sh(p2wpkh)') {\n            u.script = {\n              length: 50\n            };\n          }\n        }\n        for (var t of _targets) {\n          var _t$address, _t$script;\n          if ((_t$address = t.address) != null && _t$address.startsWith('bc1')) {\n            // in case address is non-typical and takes more bytes than coinselect library anticipates by default\n            t.script = {\n              length: bitcoin.address.toOutputScript(t.address).length + 3\n            };\n          }\n          if ((_t$script = t.script) != null && _t$script.hex) {\n            // setting length for coinselect lib manually as it is not aware of our field `hex`\n            t.script.length = t.script.hex.length / 2 - 4;\n          }\n        }\n        var _algo = algo(_utxos, _targets, feeRate),\n          inputs = _algo.inputs,\n          outputs = _algo.outputs,\n          fee = _algo.fee;\n\n        // .inputs and .outputs will be undefined if no solution was found\n        if (!inputs || !outputs) {\n          throw new Error('Not enough balance. Try sending smaller amount or decrease the fee.');\n        }\n        return {\n          inputs: inputs,\n          outputs: outputs,\n          fee: fee\n        };\n      }\n\n      /**\n       *\n       * @param utxos {Array.<{vout: Number, value: Number, txid: String, address: String, txhex: String, }>} List of spendable utxos\n       * @param targets {Array.<{value: Number, address: String}>} Where coins are going. If theres only 1 target and that target has no value - this will send MAX to that address (respecting fee rate)\n       * @param feeRate {Number} satoshi per byte\n       * @param changeAddress {String} Excessive coins will go back to that address\n       * @param sequence {Number} Used in RBF\n       * @param skipSigning {boolean} Whether we should skip signing, use returned `psbt` in that case\n       * @param masterFingerprint {number} Decimal number of wallet's master fingerprint\n       * @returns {{outputs: Array, tx: Transaction, inputs: Array, fee: Number, psbt: Psbt}}\n       */\n    }, {\n      key: \"createTransaction\",\n      value: function createTransaction(utxos, targets, feeRate, changeAddress, sequence) {\n        var skipSigning = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n        var masterFingerprint = arguments.length > 6 ? arguments[6] : undefined;\n        if (targets.length === 0) throw new Error('No destination provided');\n        var _this$coinselect = this.coinselect(utxos, targets, feeRate),\n          inputs = _this$coinselect.inputs,\n          outputs = _this$coinselect.outputs,\n          fee = _this$coinselect.fee;\n        sequence = sequence || 0xffffffff; // disable RBF by default\n        var psbt = new bitcoin.Psbt();\n        var c = 0;\n        var values = {};\n        var keyPair = null;\n        if (!skipSigning) {\n          // skiping signing related stuff\n          keyPair = ECPair.fromWIF(this.secret); // secret is WIF\n        }\n        inputs.forEach(function (input) {\n          values[c] = input.value;\n          c++;\n          if (!input.txhex) throw new Error('UTXO is missing txhex of the input, which is required by PSBT for non-segwit input');\n          psbt.addInput({\n            hash: input.txid,\n            index: input.vout,\n            sequence: sequence,\n            // non-segwit inputs now require passing the whole previous tx as Buffer\n            nonWitnessUtxo: Buffer.from(input.txhex, 'hex')\n          });\n        });\n        var sanitizedOutputs = outputs.map(function (output) {\n          var _output$address;\n          return Object.assign({}, output, {\n            // if output has no address - this is change output\n            address: (_output$address = output.address) != null ? _output$address : changeAddress\n          });\n        });\n        sanitizedOutputs.forEach(function (output) {\n          var outputData = {\n            address: output.address,\n            value: BigInt(output.value)\n          };\n          psbt.addOutput(outputData);\n        });\n        if (!skipSigning && keyPair) {\n          // skiping signing related stuff\n          for (var cc = 0; cc < c; cc++) {\n            psbt.signInput(cc, keyPair);\n          }\n        }\n        var tx;\n        if (!skipSigning) {\n          tx = psbt.finalizeAllInputs().extractTransaction();\n        }\n        return {\n          tx: tx,\n          inputs: inputs,\n          outputs: sanitizedOutputs,\n          fee: fee,\n          psbt: psbt\n        };\n      }\n    }, {\n      key: \"getLatestTransactionTime\",\n      value: function getLatestTransactionTime() {\n        if (this.getTransactions().length === 0) {\n          return 0;\n        }\n        var max = 0;\n        for (var tx of this.getTransactions()) {\n          var _tx$received;\n          max = Math.max(new Date((_tx$received = tx.received) != null ? _tx$received : 0).getTime(), max);\n        }\n        return new Date(max).toString();\n      }\n\n      /**\n       * Validates any address, including legacy, p2sh and bech32\n       *\n       * p2tr addresses have extra logic, rejecting all versions >1\n       * @see https://github.com/BlueWallet/BlueWallet/issues/3394\n       * @see https://github.com/bitcoinjs/bitcoinjs-lib/issues/1750\n       * @see https://github.com/bitcoin/bips/blob/edffe529056f6dfd33d8f716fb871467c3c09263/bip-0350.mediawiki#Addresses_for_segregated_witness_outputs\n       *\n       * @param address\n       * @returns {boolean}\n       */\n    }, {\n      key: \"isAddressValid\",\n      value: function isAddressValid(address) {\n        try {\n          bitcoin.address.toOutputScript(address); // throws, no?\n\n          if (!address.toLowerCase().startsWith('bc1')) return true;\n          var decoded = bitcoin.address.fromBech32(address);\n          if (decoded.version === 0) return true;\n          if (decoded.version === 1 && decoded.data.length !== 32) return false;\n          if (decoded.version === 1 && !_noble_ecc.default.isPoint(Buffer.concat([Buffer.from([2]), decoded.data]))) return false;\n          if (decoded.version > 1) return false;\n          // ^^^ some day, when versions above 1 will be actually utilized, we would need to unhardcode this\n          return true;\n        } catch (e) {\n          return false;\n        }\n      }\n\n      /**\n       * Converts script pub key to legacy address if it can. Returns FALSE if it cant.\n       *\n       * @param scriptPubKey\n       * @returns {boolean|string} Either p2pkh address or false\n       */\n    }, {\n      key: \"weOwnAddress\",\n      value: function weOwnAddress(address) {\n        if (!address) return false;\n        var cleanAddress = address;\n        if (this.segwitType === 'p2wpkh') {\n          cleanAddress = address.toLowerCase();\n        }\n        return this.getAddress() === cleanAddress || this._address === cleanAddress;\n      }\n    }, {\n      key: \"weOwnTransaction\",\n      value: function weOwnTransaction(txid) {\n        for (var tx of this.getTransactions()) {\n          if (tx && tx.txid && tx.txid === txid) return true;\n        }\n        return false;\n      }\n    }, {\n      key: \"allowSignVerifyMessage\",\n      value: function allowSignVerifyMessage() {\n        return true;\n      }\n\n      /**\n       * Check if address is a Change address. Needed for Coin control.\n       * Useless for Legacy wallets, so it is always false\n       *\n       * @param address\n       * @returns {Boolean} Either address is a change or not\n       */\n    }, {\n      key: \"addressIsChange\",\n      value: function addressIsChange(address) {\n        return false;\n      }\n\n      /**\n       * Finds WIF corresponding to address and returns it\n       *\n       * @param address {string} Address that belongs to this wallet\n       * @returns {string|false} WIF or false\n       */\n    }, {\n      key: \"_getWIFbyAddress\",\n      value: function _getWIFbyAddress(address) {\n        return this.getAddress() === address ? this.secret : false;\n      }\n\n      /**\n       * Signes text message using address private key and returs signature\n       *\n       * @param message {string}\n       * @param address {string}\n       * @returns {string} base64 encoded signature\n       */\n    }, {\n      key: \"signMessage\",\n      value: function signMessage(message, address) {\n        var useSegwit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        var wif = this._getWIFbyAddress(address);\n        if (!wif) throw new Error('Invalid address');\n        var keyPair = ECPair.fromWIF(wif);\n        var privateKey = keyPair.privateKey;\n        if (!privateKey) throw new Error('Invalid private key');\n        var options = this.segwitType && useSegwit ? {\n          segwitType: this.segwitType\n        } : undefined;\n        var signature = _bitcoinjsMessage.default.sign(message, Buffer.from(privateKey), keyPair.compressed, options);\n        return signature.toString('base64');\n      }\n\n      /**\n       * Verifies text message signature by address\n       *\n       * @param message {string}\n       * @param address {string}\n       * @param signature {string}\n       * @returns {boolean} base64 encoded signature\n       */\n    }, {\n      key: \"verifyMessage\",\n      value: function verifyMessage(message, address, signature) {\n        // undefined, true so it can verify Electrum signatures without errors\n        try {\n          return _bitcoinjsMessage.default.verify(message, address, signature, undefined, true);\n        } catch (e) {\n          if (e.message === 'checkSegwitAlways can only be used with a compressed pubkey signature flagbyte') {\n            // If message created with uncompressed private key, it will throw this error\n            // in this case we should re-try with checkSegwitAlways flag off\n            // node_modules/bitcoinjs-message/index.js:187\n            return _bitcoinjsMessage.default.verify(message, address, signature);\n          }\n          throw e;\n        }\n      }\n\n      /**\n       * Probes address for transactions, if there are any returns TRUE\n       *\n       * @returns {Promise<boolean>}\n       */\n    }, {\n      key: \"wasEverUsed\",\n      value: (function () {\n        var _wasEverUsed = (0, _asyncToGenerator2.default)(function* () {\n          var address = this.getAddress();\n          if (!address) return Promise.resolve(false);\n          var txs = yield BlueElectrum.getTransactionsByAddress(address);\n          return txs.length > 0;\n        });\n        function wasEverUsed() {\n          return _wasEverUsed.apply(this, arguments);\n        }\n        return wasEverUsed;\n      }())\n    }], [{\n      key: \"scriptPubKeyToAddress\",\n      value: function scriptPubKeyToAddress(scriptPubKey) {\n        try {\n          var _bitcoin$payments$p2p;\n          var scriptPubKey2 = Buffer.from(scriptPubKey, 'hex');\n          return (_bitcoin$payments$p2p = bitcoin.payments.p2pkh({\n            output: scriptPubKey2,\n            network: bitcoin.networks.bitcoin\n          }).address) != null ? _bitcoin$payments$p2p : false;\n        } catch (_) {\n          return false;\n        }\n      }\n    }]);\n  }(_$$_REQUIRE(_dependencyMap[19], \"./abstract-wallet\").AbstractWallet);\n  LegacyWallet.type = 'legacy';\n  LegacyWallet.typeReadable = 'Legacy (P2PKH)';\n});","lineCount":747,"map":[[15,2,1,0],[15,6,1,0,"_bignumber"],[15,16,1,0],[15,19,1,0,"_interopRequireDefault"],[15,41,1,0],[15,42,1,0,"_$$_REQUIRE"],[15,53,1,0],[15,54,1,0,"_dependencyMap"],[15,68,1,0],[16,2,2,0],[16,6,2,0,"bitcoin"],[16,13,2,0],[16,16,2,0,"_interopRequireWildcard"],[16,39,2,0],[16,40,2,0,"_$$_REQUIRE"],[16,51,2,0],[16,52,2,0,"_dependencyMap"],[16,66,2,0],[17,2,3,0],[17,6,3,0,"_bitcoinjsMessage"],[17,23,3,0],[17,26,3,0,"_interopRequireDefault"],[17,48,3,0],[17,49,3,0,"_$$_REQUIRE"],[17,60,3,0],[17,61,3,0,"_dependencyMap"],[17,75,3,0],[18,2,4,0],[18,6,4,0,"_coinselect"],[18,17,4,0],[18,20,4,0,"_interopRequireDefault"],[18,42,4,0],[18,43,4,0,"_$$_REQUIRE"],[18,54,4,0],[18,55,4,0,"_dependencyMap"],[18,69,4,0],[19,2,5,0],[19,6,5,0,"_split"],[19,12,5,0],[19,15,5,0,"_interopRequireDefault"],[19,37,5,0],[19,38,5,0,"_$$_REQUIRE"],[19,49,5,0],[19,50,5,0,"_dependencyMap"],[19,64,5,0],[20,2,8,0],[20,6,8,0,"BlueElectrum"],[20,18,8,0],[20,21,8,0,"_interopRequireWildcard"],[20,44,8,0],[20,45,8,0,"_$$_REQUIRE"],[20,56,8,0],[20,57,8,0,"_dependencyMap"],[20,71,8,0],[21,2,9,0],[21,6,9,0,"_noble_ecc"],[21,16,9,0],[21,19,9,0,"_interopRequireDefault"],[21,41,9,0],[21,42,9,0,"_$$_REQUIRE"],[21,53,9,0],[21,54,9,0,"_dependencyMap"],[21,68,9,0],[22,2,9,47],[22,6,9,47,"_excluded"],[22,15,9,47],[23,4,9,47,"_excluded2"],[23,14,9,47],[24,2,9,47],[24,11,9,47,"_getRequireWildcardCache"],[24,36,9,47,"e"],[24,37,9,47],[24,66,9,47,"WeakMap"],[24,73,9,47],[24,92,9,47,"r"],[24,93,9,47],[24,100,9,47,"WeakMap"],[24,107,9,47],[24,111,9,47,"t"],[24,112,9,47],[24,119,9,47,"WeakMap"],[24,126,9,47],[24,138,9,47,"_getRequireWildcardCache"],[24,162,9,47],[24,174,9,47,"_getRequireWildcardCache"],[24,199,9,47,"e"],[24,200,9,47],[24,211,9,47,"e"],[24,212,9,47],[24,215,9,47,"t"],[24,216,9,47],[24,219,9,47,"r"],[24,220,9,47],[24,225,9,47,"e"],[24,226,9,47],[25,2,9,47],[25,11,9,47,"_interopRequireWildcard"],[25,35,9,47,"e"],[25,36,9,47],[25,38,9,47,"r"],[25,39,9,47],[25,48,9,47,"r"],[25,49,9,47],[25,53,9,47,"e"],[25,54,9,47],[25,58,9,47,"e"],[25,59,9,47],[25,60,9,47,"__esModule"],[25,70,9,47],[25,79,9,47,"e"],[25,80,9,47],[25,95,9,47,"e"],[25,96,9,47],[25,119,9,47,"e"],[25,120,9,47],[25,145,9,47,"e"],[25,146,9,47],[25,157,9,47,"default"],[25,164,9,47],[25,166,9,47,"e"],[25,167,9,47],[25,175,9,47,"t"],[25,176,9,47],[25,179,9,47,"_getRequireWildcardCache"],[25,203,9,47],[25,204,9,47,"r"],[25,205,9,47],[25,212,9,47,"t"],[25,213,9,47],[25,217,9,47,"t"],[25,218,9,47],[25,219,9,47,"has"],[25,222,9,47],[25,223,9,47,"e"],[25,224,9,47],[25,234,9,47,"t"],[25,235,9,47],[25,236,9,47,"get"],[25,239,9,47],[25,240,9,47,"e"],[25,241,9,47],[25,248,9,47,"n"],[25,249,9,47],[25,254,9,47,"__proto__"],[25,263,9,47],[25,273,9,47,"a"],[25,274,9,47],[25,277,9,47,"Object"],[25,283,9,47],[25,284,9,47,"defineProperty"],[25,298,9,47],[25,302,9,47,"Object"],[25,308,9,47],[25,309,9,47,"getOwnPropertyDescriptor"],[25,333,9,47],[25,344,9,47,"u"],[25,345,9,47],[25,349,9,47,"e"],[25,350,9,47],[25,370,9,47,"u"],[25,371,9,47],[25,378,9,47,"hasOwnProperty"],[25,392,9,47],[25,393,9,47,"call"],[25,397,9,47],[25,398,9,47,"e"],[25,399,9,47],[25,401,9,47,"u"],[25,402,9,47],[25,411,9,47,"i"],[25,412,9,47],[25,415,9,47,"a"],[25,416,9,47],[25,419,9,47,"Object"],[25,425,9,47],[25,426,9,47,"getOwnPropertyDescriptor"],[25,450,9,47],[25,451,9,47,"e"],[25,452,9,47],[25,454,9,47,"u"],[25,455,9,47],[25,465,9,47,"i"],[25,466,9,47],[25,471,9,47,"i"],[25,472,9,47],[25,473,9,47,"get"],[25,476,9,47],[25,480,9,47,"i"],[25,481,9,47],[25,482,9,47,"set"],[25,485,9,47],[25,489,9,47,"Object"],[25,495,9,47],[25,496,9,47,"defineProperty"],[25,510,9,47],[25,511,9,47,"n"],[25,512,9,47],[25,514,9,47,"u"],[25,515,9,47],[25,517,9,47,"i"],[25,518,9,47],[25,522,9,47,"n"],[25,523,9,47],[25,524,9,47,"u"],[25,525,9,47],[25,529,9,47,"e"],[25,530,9,47],[25,531,9,47,"u"],[25,532,9,47],[25,544,9,47,"n"],[25,545,9,47],[25,546,9,47,"default"],[25,553,9,47],[25,556,9,47,"e"],[25,557,9,47],[25,559,9,47,"t"],[25,560,9,47],[25,564,9,47,"t"],[25,565,9,47],[25,566,9,47,"set"],[25,569,9,47],[25,570,9,47,"e"],[25,571,9,47],[25,573,9,47,"n"],[25,574,9,47],[25,577,9,47,"n"],[25,578,9,47],[26,2,9,47],[26,11,9,47,"_callSuper"],[26,22,9,47,"t"],[26,23,9,47],[26,25,9,47,"o"],[26,26,9,47],[26,28,9,47,"e"],[26,29,9,47],[26,40,9,47,"o"],[26,41,9,47],[26,48,9,47,"_getPrototypeOf2"],[26,64,9,47],[26,65,9,47,"default"],[26,72,9,47],[26,74,9,47,"o"],[26,75,9,47],[26,82,9,47,"_possibleConstructorReturn2"],[26,109,9,47],[26,110,9,47,"default"],[26,117,9,47],[26,119,9,47,"t"],[26,120,9,47],[26,122,9,47,"_isNativeReflectConstruct"],[26,147,9,47],[26,152,9,47,"Reflect"],[26,159,9,47],[26,160,9,47,"construct"],[26,169,9,47],[26,170,9,47,"o"],[26,171,9,47],[26,173,9,47,"e"],[26,174,9,47],[26,186,9,47,"_getPrototypeOf2"],[26,202,9,47],[26,203,9,47,"default"],[26,210,9,47],[26,212,9,47,"t"],[26,213,9,47],[26,215,9,47,"constructor"],[26,226,9,47],[26,230,9,47,"o"],[26,231,9,47],[26,232,9,47,"apply"],[26,237,9,47],[26,238,9,47,"t"],[26,239,9,47],[26,241,9,47,"e"],[26,242,9,47],[27,2,9,47],[27,11,9,47,"_isNativeReflectConstruct"],[27,37,9,47],[27,51,9,47,"t"],[27,52,9,47],[27,56,9,47,"Boolean"],[27,63,9,47],[27,64,9,47,"prototype"],[27,73,9,47],[27,74,9,47,"valueOf"],[27,81,9,47],[27,82,9,47,"call"],[27,86,9,47],[27,87,9,47,"Reflect"],[27,94,9,47],[27,95,9,47,"construct"],[27,104,9,47],[27,105,9,47,"Boolean"],[27,112,9,47],[27,145,9,47,"t"],[27,146,9,47],[27,159,9,47,"_isNativeReflectConstruct"],[27,184,9,47],[27,196,9,47,"_isNativeReflectConstruct"],[27,222,9,47],[27,235,9,47,"t"],[27,236,9,47],[28,2,14,0],[28,6,14,6,"ECPair"],[28,12,14,23],[28,15,14,26],[28,19,14,26,"ECPairFactory"],[28,50,14,26],[28,51,14,26,"ECPairFactory"],[28,74,14,39],[28,76,14,40,"ecc"],[28,94,14,43],[28,95,14,44],[29,2,15,0,"bitcoin"],[29,9,15,7],[29,10,15,8,"initEccLib"],[29,20,15,18],[29,21,15,19,"ecc"],[29,39,15,22],[29,40,15,23],[31,2,17,0],[32,0,18,0],[33,0,19,0],[34,0,20,0],[35,2,17,0],[35,6,21,13,"LegacyWallet"],[35,18,21,25],[35,21,21,25,"exports"],[35,28,21,25],[35,29,21,25,"LegacyWallet"],[35,41,21,25],[35,67,21,25,"_AbstractWallet"],[35,82,21,25],[36,4,21,25],[36,13,21,25,"LegacyWallet"],[36,26,21,25],[37,6,21,25],[37,10,21,25,"_this"],[37,15,21,25],[38,6,21,25],[38,10,21,25,"_classCallCheck2"],[38,26,21,25],[38,27,21,25,"default"],[38,34,21,25],[38,42,21,25,"LegacyWallet"],[38,54,21,25],[39,6,21,25],[39,15,21,25,"_len"],[39,19,21,25],[39,22,21,25,"arguments"],[39,31,21,25],[39,32,21,25,"length"],[39,38,21,25],[39,40,21,25,"args"],[39,44,21,25],[39,51,21,25,"Array"],[39,56,21,25],[39,57,21,25,"_len"],[39,61,21,25],[39,64,21,25,"_key"],[39,68,21,25],[39,74,21,25,"_key"],[39,78,21,25],[39,81,21,25,"_len"],[39,85,21,25],[39,87,21,25,"_key"],[39,91,21,25],[40,8,21,25,"args"],[40,12,21,25],[40,13,21,25,"_key"],[40,17,21,25],[40,21,21,25,"arguments"],[40,30,21,25],[40,31,21,25,"_key"],[40,35,21,25],[41,6,21,25],[42,6,21,25,"_this"],[42,11,21,25],[42,14,21,25,"_callSuper"],[42,24,21,25],[42,31,21,25,"LegacyWallet"],[42,43,21,25],[42,48,21,25,"concat"],[42,54,21,25],[42,55,21,25,"args"],[42,59,21,25],[43,6,24,2],[44,6,24,2,"_this"],[44,11,24,2],[44,12,25,18,"type"],[44,16,25,22],[44,19,25,25,"LegacyWallet"],[44,31,25,37],[44,32,25,38,"type"],[44,36,25,42],[45,6,26,2],[46,6,26,2,"_this"],[46,11,26,2],[46,12,27,18,"typeReadable"],[46,24,27,30],[46,27,27,33,"LegacyWallet"],[46,39,27,45],[46,40,27,46,"typeReadable"],[46,52,27,58],[47,6,27,58,"_this"],[47,11,27,58],[47,12,29,2,"_txs_by_external_index"],[47,34,29,24],[47,37,29,42],[47,39,29,44],[48,6,29,44,"_this"],[48,11,29,44],[48,12,30,2,"_txs_by_internal_index"],[48,34,30,24],[48,37,30,42],[48,39,30,44],[49,6,30,44],[49,13,30,44,"_this"],[49,18,30,44],[50,4,30,44],[51,4,30,44],[51,8,30,44,"_inherits2"],[51,18,30,44],[51,19,30,44,"default"],[51,26,30,44],[51,28,30,44,"LegacyWallet"],[51,40,30,44],[51,42,30,44,"_AbstractWallet"],[51,57,30,44],[52,4,30,44],[52,15,30,44,"_createClass2"],[52,28,30,44],[52,29,30,44,"default"],[52,36,30,44],[52,38,30,44,"LegacyWallet"],[52,50,30,44],[53,6,30,44,"key"],[53,9,30,44],[54,6,30,44,"value"],[54,11,30,44],[55,6,32,2],[56,0,33,0],[57,0,34,0],[58,0,35,0],[59,0,36,0],[60,0,37,0],[61,6,38,2],[61,15,38,2,"timeToRefreshBalance"],[61,35,38,22,"timeToRefreshBalance"],[61,36,38,22],[61,38,38,34],[62,8,39,4],[62,12,39,8],[62,13,39,9],[62,17,39,13,"Date"],[62,21,39,17],[62,22,39,18],[62,23,39,19],[62,26,39,22],[62,30,39,26],[62,31,39,27,"_lastBalanceFetch"],[62,48,39,44],[62,52,39,48],[62,53,39,49],[62,56,39,52],[62,58,39,54],[62,61,39,57],[62,65,39,61],[62,67,39,63],[63,10,40,6],[63,17,40,13],[63,21,40,17],[64,8,41,4],[65,8,42,4],[65,15,42,11],[65,20,42,16],[66,6,43,2],[68,6,45,2],[69,0,46,0],[70,0,47,0],[71,0,48,0],[72,0,49,0],[73,0,50,0],[74,4,45,2],[75,6,45,2,"key"],[75,9,45,2],[76,6,45,2,"value"],[76,11,45,2],[76,13,51,2],[76,22,51,2,"timeToRefreshTransaction"],[76,46,51,26,"timeToRefreshTransaction"],[76,47,51,26],[76,49,51,38],[77,8,52,4],[77,13,52,9],[77,17,52,15,"tx"],[77,19,52,17],[77,23,52,21],[77,27,52,25],[77,28,52,26,"getTransactions"],[77,43,52,41],[77,44,52,42],[77,45,52,43],[77,47,52,45],[78,10,52,45],[78,14,52,45,"_tx$confirmations"],[78,31,52,45],[79,10,53,6],[79,14,53,10],[79,16,53,10,"_tx$confirmations"],[79,33,53,10],[79,36,53,11,"tx"],[79,38,53,13],[79,39,53,14,"confirmations"],[79,52,53,27],[79,64,53,27,"_tx$confirmations"],[79,81,53,27],[79,84,53,31],[79,85,53,32],[79,89,53,36],[79,90,53,37],[79,94,53,41],[79,98,53,45],[79,99,53,46,"_lastTxFetch"],[79,111,53,58],[79,114,53,61],[79,115,53,62],[79,119,53,66,"Date"],[79,123,53,70],[79,124,53,71],[79,125,53,72],[79,128,53,75],[79,129,53,76],[79,132,53,79],[79,134,53,81],[79,137,53,84],[79,141,53,88],[79,143,53,90],[80,12,54,8],[80,19,54,15],[80,23,54,19],[81,10,55,6],[82,8,56,4],[83,8,57,4],[83,15,57,11],[83,20,57,16],[84,6,58,2],[85,4,58,3],[86,6,58,3,"key"],[86,9,58,3],[87,6,58,3,"value"],[87,11,58,3],[88,8,58,3],[88,12,58,3,"_generate"],[88,21,58,3],[88,28,58,3,"_asyncToGenerator2"],[88,46,58,3],[88,47,58,3,"default"],[88,54,58,3],[88,56,60,2],[88,69,60,34],[89,10,61,4],[89,14,61,10,"buf"],[89,17,61,13],[89,26,61,22],[89,30,61,22,"randomBytes"],[89,61,61,22],[89,62,61,22,"randomBytes"],[89,83,61,33],[89,85,61,34],[89,87,61,36],[89,88,61,37],[90,10,62,4],[90,14,62,8],[90,15,62,9,"secret"],[90,21,62,15],[90,24,62,18,"ECPair"],[90,30,62,24],[90,31,62,25,"makeRandom"],[90,41,62,35],[90,42,62,36],[91,12,62,38,"rng"],[91,15,62,41],[91,17,62,43],[91,26,62,38,"rng"],[91,29,62,41,"rng"],[91,30,62,41],[92,14,62,41],[92,21,62,49,"buf"],[92,24,62,52],[93,12,62,52],[94,10,62,53],[94,11,62,54],[94,12,62,55],[94,13,62,56,"toWIF"],[94,18,62,61],[94,19,62,62],[94,20,62,63],[95,8,63,2],[95,9,63,3],[96,8,63,3],[96,17,60,8,"generate"],[96,25,60,16,"generate"],[96,26,60,16],[97,10,60,16],[97,17,60,16,"_generate"],[97,26,60,16],[97,27,60,16,"apply"],[97,32,60,16],[97,39,60,16,"arguments"],[97,48,60,16],[98,8,60,16],[99,8,60,16],[99,15,60,8,"generate"],[99,23,60,16],[100,6,60,16],[101,4,60,16],[102,6,60,16,"key"],[102,9,60,16],[103,6,60,16,"value"],[103,11,60,16],[104,8,60,16],[104,12,60,16,"_generateFromEntropy"],[104,32,60,16],[104,39,60,16,"_asyncToGenerator2"],[104,57,60,16],[104,58,60,16,"default"],[104,65,60,16],[104,67,65,2],[104,78,65,28,"user"],[104,82,65,40],[104,84,65,57],[105,10,66,4],[105,14,66,8,"user"],[105,18,66,12],[105,19,66,13,"length"],[105,25,66,19],[105,30,66,24],[105,32,66,26],[105,34,66,28],[106,12,67,6],[106,18,67,12],[106,22,67,16,"Error"],[106,27,67,21],[106,28,67,22],[106,56,67,50],[106,57,67,51],[107,10,68,4],[108,10,69,4],[108,14,69,8],[108,15,69,9,"secret"],[108,21,69,15],[108,24,69,18,"ECPair"],[108,30,69,24],[108,31,69,25,"fromPrivateKey"],[108,45,69,39],[108,46,69,40,"user"],[108,50,69,44],[108,51,69,45],[108,52,69,46,"toWIF"],[108,57,69,51],[108,58,69,52],[108,59,69,53],[109,8,70,2],[109,9,70,3],[110,8,70,3],[110,17,65,8,"generateFromEntropy"],[110,36,65,27,"generateFromEntropy"],[110,37,65,27,"_x"],[110,39,65,27],[111,10,65,27],[111,17,65,27,"_generateFromEntropy"],[111,37,65,27],[111,38,65,27,"apply"],[111,43,65,27],[111,50,65,27,"arguments"],[111,59,65,27],[112,8,65,27],[113,8,65,27],[113,15,65,8,"generateFromEntropy"],[113,34,65,27],[114,6,65,27],[115,4,65,27],[116,6,65,27,"key"],[116,9,65,27],[117,6,65,27,"value"],[117,11,65,27],[117,13,72,2],[117,22,72,2,"getAddress"],[117,32,72,12,"getAddress"],[117,33,72,12],[117,35,72,31],[118,8,73,4],[118,12,73,8],[118,16,73,12],[118,17,73,13,"_address"],[118,25,73,21],[118,27,73,23],[118,34,73,30],[118,38,73,34],[118,39,73,35,"_address"],[118,47,73,43],[119,8,74,4],[119,12,74,8,"address"],[119,19,74,15],[120,8,75,4],[120,12,75,8],[121,10,76,6],[121,14,76,12,"keyPair"],[121,21,76,19],[121,24,76,22,"ECPair"],[121,30,76,28],[121,31,76,29,"fromWIF"],[121,38,76,36],[121,39,76,37],[121,43,76,41],[121,44,76,42,"secret"],[121,50,76,48],[121,51,76,49],[122,10,77,6,"address"],[122,17,77,13],[122,20,77,16,"bitcoin"],[122,27,77,23],[122,28,77,24,"payments"],[122,36,77,32],[122,37,77,33,"p2pkh"],[122,42,77,38],[122,43,77,39],[123,12,78,8,"pubkey"],[123,18,78,14],[123,20,78,16,"keyPair"],[123,27,78,23],[123,28,78,24,"publicKey"],[124,10,79,6],[124,11,79,7],[124,12,79,8],[124,13,79,9,"address"],[124,20,79,16],[125,8,80,4],[125,9,80,5],[125,10,80,6],[125,17,80,13,"err"],[125,20,80,16],[125,22,80,18],[126,10,81,6],[126,17,81,13],[126,22,81,18],[127,8,82,4],[128,8,83,4],[128,12,83,8],[128,13,83,9,"_address"],[128,21,83,17],[128,24,83,20,"address"],[128,31,83,27],[128,42,83,20,"address"],[128,49,83,27],[128,52,83,31],[128,57,83,36],[129,8,85,4],[129,15,85,11],[129,19,85,15],[129,20,85,16,"_address"],[129,28,85,24],[130,6,86,2],[132,6,88,2],[133,0,89,0],[134,0,90,0],[135,4,88,2],[136,6,88,2,"key"],[136,9,88,2],[137,6,88,2,"value"],[137,11,88,2],[137,13,91,2],[137,22,91,2,"getAllExternalAddresses"],[137,45,91,25,"getAllExternalAddresses"],[137,46,91,25],[137,48,91,38],[138,8,92,4],[138,12,92,10,"address"],[138,19,92,17],[138,22,92,20],[138,26,92,24],[138,27,92,25,"getAddress"],[138,37,92,35],[138,38,92,36],[138,39,92,37],[139,8,94,4],[139,15,94,11,"address"],[139,22,94,18],[139,25,94,21],[139,26,94,22,"address"],[139,33,94,29],[139,34,94,30],[139,37,94,33],[139,39,94,35],[140,6,95,2],[142,6,97,2],[143,0,98,0],[144,0,99,0],[145,0,100,0],[146,0,101,0],[147,0,102,0],[148,4,97,2],[149,6,97,2,"key"],[149,9,97,2],[150,6,97,2,"value"],[150,11,97,2],[151,8,97,2],[151,12,97,2,"_fetchBalance"],[151,25,97,2],[151,32,97,2,"_asyncToGenerator2"],[151,50,97,2],[151,51,97,2,"default"],[151,58,97,2],[151,60,103,2],[151,73,103,38],[152,10,104,4],[152,14,104,8],[153,12,105,6],[153,16,105,12,"address"],[153,23,105,19],[153,26,105,22],[153,30,105,26],[153,31,105,27,"getAddress"],[153,41,105,37],[153,42,105,38],[153,43,105,39],[154,12,106,6],[154,16,106,10],[154,17,106,11,"address"],[154,24,106,18],[154,26,106,20],[154,32,106,26],[154,36,106,30,"Error"],[154,41,106,35],[154,42,106,36],[154,73,106,67],[154,74,106,68],[155,12,107,6],[155,16,107,12,"balance"],[155,23,107,19],[155,32,107,28,"BlueElectrum"],[155,44,107,40],[155,45,107,41,"getBalanceByAddress"],[155,64,107,60],[155,65,107,61,"address"],[155,72,107,68],[155,73,107,69],[156,12,108,6],[156,16,108,10],[156,17,108,11,"balance"],[156,24,108,18],[156,27,108,21,"Number"],[156,33,108,27],[156,34,108,28,"balance"],[156,41,108,35],[156,42,108,36,"confirmed"],[156,51,108,45],[156,52,108,46],[157,12,109,6],[157,16,109,10],[157,17,109,11,"unconfirmed_balance"],[157,36,109,30],[157,39,109,33,"Number"],[157,45,109,39],[157,46,109,40,"balance"],[157,53,109,47],[157,54,109,48,"unconfirmed"],[157,65,109,59],[157,66,109,60],[158,12,110,6],[158,16,110,10],[158,17,110,11,"_lastBalanceFetch"],[158,34,110,28],[158,37,110,31],[158,38,110,32],[158,42,110,36,"Date"],[158,46,110,40],[158,47,110,41],[158,48,110,42],[159,10,111,4],[159,11,111,5],[159,12,111,6],[159,19,111,13,"error"],[159,24,111,18],[159,26,111,20],[160,12,112,6,"console"],[160,19,112,13],[160,20,112,14,"warn"],[160,24,112,18],[160,25,112,19,"error"],[160,30,112,24],[160,31,112,25],[161,10,113,4],[162,8,114,2],[162,9,114,3],[163,8,114,3],[163,17,103,8,"fetchBalance"],[163,29,103,20,"fetchBalance"],[163,30,103,20],[164,10,103,20],[164,17,103,20,"_fetchBalance"],[164,30,103,20],[164,31,103,20,"apply"],[164,36,103,20],[164,43,103,20,"arguments"],[164,52,103,20],[165,8,103,20],[166,8,103,20],[166,15,103,8,"fetchBalance"],[166,27,103,20],[167,6,103,20],[168,6,116,2],[169,0,117,0],[170,0,118,0],[171,0,119,0],[172,0,120,0],[173,6,116,2],[174,4,116,2],[175,6,116,2,"key"],[175,9,116,2],[176,6,116,2,"value"],[176,11,116,2],[177,8,116,2],[177,12,116,2,"_fetchUtxo"],[177,22,116,2],[177,29,116,2,"_asyncToGenerator2"],[177,47,116,2],[177,48,116,2,"default"],[177,55,116,2],[177,57,121,2],[177,70,121,35],[178,10,122,4],[178,14,122,8],[179,12,123,6],[179,16,123,12,"address"],[179,23,123,19],[179,26,123,22],[179,30,123,26],[179,31,123,27,"getAddress"],[179,41,123,37],[179,42,123,38],[179,43,123,39],[180,12,124,6],[180,16,124,10],[180,17,124,11,"address"],[180,24,124,18],[180,26,124,20],[180,32,124,26],[180,36,124,30,"Error"],[180,41,124,35],[180,42,124,36],[180,73,124,67],[180,74,124,68],[181,12,125,6],[181,16,125,12,"utxos"],[181,21,125,17],[181,30,125,26,"BlueElectrum"],[181,42,125,38],[181,43,125,39,"multiGetUtxoByAddress"],[181,64,125,60],[181,65,125,61],[181,66,125,62,"address"],[181,73,125,69],[181,74,125,70],[181,75,125,71],[182,12,126,6],[182,16,126,10],[182,17,126,11,"_utxo"],[182,22,126,16],[182,25,126,19],[182,27,126,21],[183,12,127,6],[183,17,127,11],[183,21,127,17,"arr"],[183,24,127,20],[183,28,127,24,"Object"],[183,34,127,30],[183,35,127,31,"values"],[183,41,127,37],[183,42,127,38,"utxos"],[183,47,127,43],[183,48,127,44],[183,50,127,46],[184,14,128,8],[184,18,128,12],[184,19,128,13,"_utxo"],[184,24,128,18],[184,27,128,21],[184,31,128,25],[184,32,128,26,"_utxo"],[184,37,128,31],[184,38,128,32,"concat"],[184,44,128,38],[184,45,128,39,"arr"],[184,48,128,42],[184,49,128,43],[185,12,129,6],[187,12,131,6],[188,12,132,6],[188,16,132,10,"LegacyWallet"],[188,28,132,22],[188,29,132,23,"type"],[188,33,132,27],[188,38,132,32],[188,42,132,36],[188,43,132,37,"type"],[188,47,132,41],[188,49,132,43],[188,56,132,50],[188,57,132,51],[189,12,133,6],[189,16,133,12,"txhexes"],[189,23,133,19],[189,32,133,28,"BlueElectrum"],[189,44,133,40],[189,45,133,41,"multiGetTransactionByTxid"],[189,70,133,66],[189,71,134,8],[189,75,134,12],[189,76,134,13,"_utxo"],[189,81,134,18],[189,82,134,19,"map"],[189,85,134,22],[189,86,134,23],[189,96,134,23,"u"],[189,97,134,24],[190,14,134,24],[190,21,134,28,"u"],[190,22,134,29],[190,23,134,30,"txid"],[190,27,134,34],[191,12,134,34],[191,14,134,35],[191,16,135,8],[191,21,136,6],[191,22,136,7],[192,12,138,6],[192,16,138,12,"newUtxos"],[192,24,138,20],[192,27,138,23],[192,29,138,25],[193,12,139,6],[193,17,139,11],[193,21,139,17,"u"],[193,22,139,18],[193,26,139,22],[193,30,139,26],[193,31,139,27,"_utxo"],[193,36,139,32],[193,38,139,34],[194,14,140,8],[194,18,140,12,"txhexes"],[194,25,140,19],[194,26,140,20,"u"],[194,27,140,21],[194,28,140,22,"txid"],[194,32,140,26],[194,33,140,27],[194,35,140,29,"u"],[194,36,140,30],[194,37,140,31,"txhex"],[194,42,140,36],[194,45,140,39,"txhexes"],[194,52,140,46],[194,53,140,47,"u"],[194,54,140,48],[194,55,140,49,"txid"],[194,59,140,53],[194,60,140,54],[195,14,141,8,"newUtxos"],[195,22,141,16],[195,23,141,17,"push"],[195,27,141,21],[195,28,141,22,"u"],[195,29,141,23],[195,30,141,24],[196,12,142,6],[197,12,144,6],[197,16,144,10],[197,17,144,11,"_utxo"],[197,22,144,16],[197,25,144,19,"newUtxos"],[197,33,144,27],[198,10,145,4],[198,11,145,5],[198,12,145,6],[198,19,145,13,"error"],[198,24,145,18],[198,26,145,20],[199,12,146,6,"console"],[199,19,146,13],[199,20,146,14,"warn"],[199,24,146,18],[199,25,146,19,"error"],[199,30,146,24],[199,31,146,25],[200,10,147,4],[201,8,148,2],[201,9,148,3],[202,8,148,3],[202,17,121,8,"fetchUtxo"],[202,26,121,17,"fetchUtxo"],[202,27,121,17],[203,10,121,17],[203,17,121,17,"_fetchUtxo"],[203,27,121,17],[203,28,121,17,"apply"],[203,33,121,17],[203,40,121,17,"arguments"],[203,49,121,17],[204,8,121,17],[205,8,121,17],[205,15,121,8,"fetchUtxo"],[205,24,121,17],[206,6,121,17],[207,6,150,2],[208,0,151,0],[209,0,152,0],[210,0,153,0],[211,0,154,0],[212,0,155,0],[213,0,156,0],[214,0,157,0],[215,0,158,0],[216,0,159,0],[217,0,160,0],[218,0,161,0],[219,0,162,0],[220,6,150,2],[221,4,150,2],[222,6,150,2,"key"],[222,9,150,2],[223,6,150,2,"value"],[223,11,150,2],[223,13,163,2],[223,22,163,2,"getUtxo"],[223,29,163,9,"getUtxo"],[223,30,163,9],[223,32,163,41],[224,8,163,41],[224,12,163,41,"_this2"],[224,18,163,41],[225,8,163,41],[225,12,163,10,"respectFrozen"],[225,25,163,23],[225,28,163,23,"arguments"],[225,37,163,23],[225,38,163,23,"length"],[225,44,163,23],[225,52,163,23,"arguments"],[225,61,163,23],[225,69,163,23,"undefined"],[225,78,163,23],[225,81,163,23,"arguments"],[225,90,163,23],[225,96,163,26],[225,101,163,31],[226,8,164,4],[226,12,164,8,"ret"],[226,15,164,19],[226,18,164,22],[226,20,164,24],[227,8,165,4],[227,13,165,9],[227,17,165,15,"u"],[227,18,165,16],[227,22,165,20],[227,26,165,24],[227,27,165,25,"_utxo"],[227,32,165,30],[227,34,165,32],[228,10,166,6],[228,14,166,10],[228,15,166,11,"u"],[228,16,166,12],[228,17,166,13,"confirmations"],[228,30,166,26],[228,34,166,30,"u"],[228,35,166,31],[228,36,166,32,"height"],[228,42,166,38],[228,44,166,40,"u"],[228,45,166,41],[228,46,166,42,"confirmations"],[228,59,166,55],[228,62,166,58,"BlueElectrum"],[228,74,166,70],[228,75,166,71,"estimateCurrentBlockheight"],[228,101,166,97],[228,102,166,98],[228,103,166,99],[228,106,166,102,"u"],[228,107,166,103],[228,108,166,104,"height"],[228,114,166,110],[229,10,167,6,"ret"],[229,13,167,9],[229,14,167,10,"push"],[229,18,167,14],[229,19,167,15,"u"],[229,20,167,16],[229,21,167,17],[230,8,168,4],[231,8,170,4],[231,12,170,8,"ret"],[231,15,170,11],[231,16,170,12,"length"],[231,22,170,18],[231,27,170,23],[231,28,170,24],[231,30,170,26],[232,10,171,6,"ret"],[232,13,171,9],[232,16,171,12],[232,20,171,16],[232,21,171,17,"getDerivedUtxoFromOurTransaction"],[232,53,171,49],[232,54,171,50],[232,55,171,51],[232,56,171,52],[232,57,171,53],[233,8,172,4],[234,8,174,4],[234,12,174,8],[234,13,174,9,"respectFrozen"],[234,26,174,22],[234,28,174,24],[235,10,175,6,"ret"],[235,13,175,9],[235,16,175,12,"ret"],[235,19,175,15],[235,20,175,16,"filter"],[235,26,175,22],[235,27,175,23],[235,37,175,23,"_ref"],[235,41,175,23],[236,12,175,23],[236,16,175,26,"txid"],[236,20,175,30],[236,23,175,30,"_ref"],[236,27,175,30],[236,28,175,26,"txid"],[236,32,175,30],[237,14,175,32,"vout"],[237,18,175,36],[237,21,175,36,"_ref"],[237,25,175,36],[237,26,175,32,"vout"],[237,30,175,36],[238,12,175,36],[238,19,175,43],[238,20,175,44,"txid"],[238,24,175,48],[238,28,175,52],[238,29,175,53,"_this2"],[238,35,175,57],[238,36,175,58,"getUTXOMetadata"],[238,51,175,73],[238,52,175,74,"txid"],[238,56,175,78],[238,58,175,80,"vout"],[238,62,175,84],[238,63,175,85],[238,64,175,86,"frozen"],[238,70,175,92],[239,10,175,92],[239,12,175,93],[240,8,176,4],[241,8,177,4],[241,15,177,11,"ret"],[241,18,177,14],[242,6,178,2],[243,4,178,3],[244,6,178,3,"key"],[244,9,178,3],[245,6,178,3,"value"],[245,11,178,3],[245,13,180,2],[245,22,180,2,"getDerivedUtxoFromOurTransaction"],[245,54,180,34,"getDerivedUtxoFromOurTransaction"],[245,55,180,34],[245,57,180,74],[246,8,180,74],[246,12,180,35,"returnSpentUtxoAsWell"],[246,33,180,56],[246,36,180,56,"arguments"],[246,45,180,56],[246,46,180,56,"length"],[246,52,180,56],[246,60,180,56,"arguments"],[246,69,180,56],[246,77,180,56,"undefined"],[246,86,180,56],[246,89,180,56,"arguments"],[246,98,180,56],[246,104,180,59],[246,109,180,64],[247,8,181,4],[247,12,181,10,"utxos"],[247,17,181,23],[247,20,181,26],[247,22,181,28],[248,8,183,4],[248,12,183,10,"ownedAddressesHashmap"],[248,33,183,56],[248,36,183,59],[248,37,183,60],[248,38,183,61],[249,8,184,4],[249,12,184,10,"addrs"],[249,17,184,15],[249,20,184,18],[249,24,184,22],[249,25,184,23,"getAddress"],[249,35,184,33],[249,36,184,34],[249,37,184,35],[250,8,185,4],[250,12,185,8,"addrs"],[250,17,185,13],[250,19,185,15,"ownedAddressesHashmap"],[250,40,185,36],[250,41,185,37,"addrs"],[250,46,185,42],[250,47,185,43],[250,50,185,46],[250,54,185,50],[252,8,187,4],[253,0,188,0],[254,0,189,0],[255,0,190,0],[257,8,192,4],[257,13,192,9],[257,17,192,15,"tx"],[257,19,192,17],[257,23,192,21],[257,27,192,25],[257,28,192,26,"getTransactions"],[257,43,192,41],[257,44,192,42],[257,45,192,43],[257,47,192,45],[258,10,193,6],[258,15,193,11],[258,19,193,17,"output"],[258,25,193,23],[258,29,193,27,"tx"],[258,31,193,29],[258,32,193,30,"outputs"],[258,39,193,37],[258,41,193,39],[259,12,194,8],[259,16,194,12,"address"],[259,23,194,35],[259,26,194,38],[259,31,194,43],[260,12,195,8],[260,16,195,12,"output"],[260,22,195,18],[260,23,195,19,"scriptPubKey"],[260,35,195,31],[260,39,195,35,"output"],[260,45,195,41],[260,46,195,42,"scriptPubKey"],[260,58,195,54],[260,59,195,55,"addresses"],[260,68,195,64],[260,72,195,68,"output"],[260,78,195,74],[260,79,195,75,"scriptPubKey"],[260,91,195,87],[260,92,195,88,"addresses"],[260,101,195,97],[260,102,195,98],[260,103,195,99],[260,104,195,100],[260,106,195,102],[261,14,196,10,"address"],[261,21,196,17],[261,24,196,20,"output"],[261,30,196,26],[261,31,196,27,"scriptPubKey"],[261,43,196,39],[261,44,196,40,"addresses"],[261,53,196,49],[261,54,196,50],[261,55,196,51],[261,56,196,52],[262,12,197,8],[263,12,198,8],[263,16,198,12,"address"],[263,23,198,19],[263,27,198,23,"ownedAddressesHashmap"],[263,48,198,44],[263,49,198,45,"address"],[263,56,198,52],[263,57,198,53],[263,59,198,55],[264,14,198,55],[264,18,198,55,"_tx$confirmations2"],[264,36,198,55],[265,14,199,10],[265,18,199,16,"value"],[265,23,199,21],[265,26,199,24],[265,30,199,28,"BigNumber"],[265,48,199,37],[265,49,199,38,"output"],[265,55,199,44],[265,56,199,45,"value"],[265,61,199,50],[265,62,199,51],[265,63,199,52,"multipliedBy"],[265,75,199,64],[265,76,199,65],[265,85,199,74],[265,86,199,75],[265,87,199,76,"toNumber"],[265,95,199,84],[265,96,199,85],[265,97,199,86],[266,14,200,10,"utxos"],[266,19,200,15],[266,20,200,16,"push"],[266,24,200,20],[266,25,200,21],[267,16,201,12,"txid"],[267,20,201,16],[267,22,201,18,"tx"],[267,24,201,20],[267,25,201,21,"txid"],[267,29,201,25],[268,16,202,12,"vout"],[268,20,202,16],[268,22,202,18,"output"],[268,28,202,24],[268,29,202,25,"n"],[268,30,202,26],[269,16,203,12,"address"],[269,23,203,19],[269,25,203,12,"address"],[269,32,203,19],[270,16,204,12,"value"],[270,21,204,17],[270,23,204,12,"value"],[270,28,204,17],[271,16,205,12,"confirmations"],[271,29,205,25],[271,31,205,27,"tx"],[271,33,205,29],[271,34,205,30,"confirmations"],[271,47,205,43],[272,16,206,12,"wif"],[272,19,206,15],[272,21,206,17],[272,26,206,22],[273,16,207,12,"height"],[273,22,207,18],[273,24,207,20,"BlueElectrum"],[273,36,207,32],[273,37,207,33,"estimateCurrentBlockheight"],[273,63,207,59],[273,64,207,60],[273,65,207,61],[273,70,207,61,"_tx$confirmations2"],[273,88,207,61],[273,91,207,65,"tx"],[273,93,207,67],[273,94,207,68,"confirmations"],[273,107,207,81],[273,119,207,81,"_tx$confirmations2"],[273,137,207,81],[273,140,207,85],[273,141,207,86],[274,14,208,10],[274,15,208,11],[274,16,208,12],[275,12,209,8],[276,10,210,6],[277,8,211,4],[278,8,213,4],[278,12,213,8,"returnSpentUtxoAsWell"],[278,33,213,29],[278,35,213,31],[278,42,213,38,"utxos"],[278,47,213,43],[280,8,215,4],[281,8,216,4],[281,12,216,10,"ret"],[281,15,216,13],[281,18,216,16],[281,20,216,18],[282,8,217,4],[282,13,217,9],[282,17,217,15,"utxo"],[282,21,217,19],[282,25,217,23,"utxos"],[282,30,217,28],[282,32,217,30],[283,10,218,6],[283,14,218,10,"spent"],[283,19,218,15],[283,22,218,18],[283,27,218,23],[284,10,219,6],[284,15,219,11],[284,19,219,17,"tx"],[284,22,219,19],[284,26,219,23],[284,30,219,27],[284,31,219,28,"getTransactions"],[284,46,219,43],[284,47,219,44],[284,48,219,45],[284,50,219,47],[285,12,220,8],[285,17,220,13],[285,21,220,19,"input"],[285,26,220,24],[285,30,220,28,"tx"],[285,33,220,30],[285,34,220,31,"inputs"],[285,40,220,37],[285,42,220,39],[286,14,221,10],[286,18,221,14,"input"],[286,23,221,19],[286,24,221,20,"txid"],[286,28,221,24],[286,33,221,29,"utxo"],[286,37,221,33],[286,38,221,34,"txid"],[286,42,221,38],[286,46,221,42,"input"],[286,51,221,47],[286,52,221,48,"vout"],[286,56,221,52],[286,61,221,57,"utxo"],[286,65,221,61],[286,66,221,62,"vout"],[286,70,221,66],[286,72,221,68,"spent"],[286,77,221,73],[286,80,221,76],[286,84,221,80],[287,14,222,10],[288,12,223,8],[289,10,224,6],[290,10,226,6],[290,14,226,10],[290,15,226,11,"spent"],[290,20,226,16],[290,22,226,18],[291,12,227,8,"ret"],[291,15,227,11],[291,16,227,12,"push"],[291,20,227,16],[291,21,227,17,"utxo"],[291,25,227,21],[291,26,227,22],[292,10,228,6],[293,8,229,4],[294,8,231,4],[294,15,231,11,"ret"],[294,18,231,14],[295,6,232,2],[297,6,234,2],[298,0,235,0],[299,0,236,0],[300,0,237,0],[301,0,238,0],[302,0,239,0],[303,0,240,0],[304,4,234,2],[305,6,234,2,"key"],[305,9,234,2],[306,6,234,2,"value"],[306,11,234,2],[307,8,234,2],[307,12,234,2,"_fetchTransactions"],[307,30,234,2],[307,37,234,2,"_asyncToGenerator2"],[307,55,234,2],[307,56,234,2,"default"],[307,63,234,2],[307,65,241,2],[307,78,241,43],[308,10,242,4],[309,10,243,4],[309,14,243,10,"_txsByExternalIndex"],[309,33,243,44],[309,36,243,47],[309,38,243,49],[310,10,244,4],[310,14,244,10,"address"],[310,21,244,17],[310,24,244,20],[310,28,244,24],[310,29,244,25,"getAddress"],[310,39,244,35],[310,40,244,36],[310,41,244,37],[311,10,245,4],[311,14,245,10,"addresses2fetch"],[311,29,245,25],[311,32,245,28,"address"],[311,39,245,35],[311,42,245,38],[311,43,245,39,"address"],[311,50,245,46],[311,51,245,47],[311,54,245,50],[311,56,245,52],[313,10,247,4],[314,10,248,4],[314,14,248,10,"histories"],[314,23,248,19],[314,32,248,28,"BlueElectrum"],[314,44,248,40],[314,45,248,41,"multiGetHistoryByAddress"],[314,69,248,65],[314,70,248,66,"addresses2fetch"],[314,85,248,81],[314,86,248,82],[315,10,249,4],[315,14,249,10,"txs"],[315,17,256,5],[315,20,256,8],[315,21,256,9],[315,22,256,10],[316,10,257,4],[316,15,257,9],[316,19,257,15,"history"],[316,26,257,22],[316,30,257,26,"Object"],[316,36,257,32],[316,37,257,33,"values"],[316,43,257,39],[316,44,257,40,"histories"],[316,53,257,49],[316,54,257,50],[316,56,257,52],[317,12,258,6],[317,17,258,11],[317,21,258,17,"tx"],[317,23,258,19],[317,27,258,23,"history"],[317,34,258,30],[317,36,258,32],[318,14,259,8,"txs"],[318,17,259,11],[318,18,259,12,"tx"],[318,20,259,14],[318,21,259,15,"tx_hash"],[318,28,259,22],[318,29,259,23],[318,32,259,26,"tx"],[318,34,259,28],[319,12,260,6],[320,10,261,4],[321,10,263,4],[321,14,263,8],[321,18,263,12],[321,19,263,13,"getTransactions"],[321,34,263,28],[321,35,263,29],[321,36,263,30],[321,37,263,31,"length"],[321,43,263,37],[321,48,263,42],[321,49,263,43],[321,53,263,47,"Object"],[321,59,263,53],[321,60,263,54,"values"],[321,66,263,60],[321,67,263,61,"txs"],[321,70,263,64],[321,71,263,65],[321,72,263,66,"length"],[321,78,263,72],[321,81,263,75],[321,85,263,79],[321,87,264,6],[321,93,264,12],[321,97,264,16,"Error"],[321,102,264,21],[321,103,264,22],[321,168,264,87],[321,169,264,88],[322,10,265,4],[323,10,266,4],[325,10,268,4],[326,10,269,4],[326,14,269,10,"txdatas"],[326,21,269,17],[326,30,269,26,"BlueElectrum"],[326,42,269,38],[326,43,269,39,"multiGetTransactionByTxid"],[326,68,269,64],[326,69,269,65,"Object"],[326,75,269,71],[326,76,269,72,"keys"],[326,80,269,76],[326,81,269,77,"txs"],[326,84,269,80],[326,85,269,81],[326,87,269,83],[326,91,269,87],[326,92,269,88],[327,10,270,4],[327,14,270,10,"transactions"],[327,26,270,22],[327,29,270,25,"Object"],[327,35,270,31],[327,36,270,32,"values"],[327,42,270,38],[327,43,270,39,"txdatas"],[327,50,270,46],[327,51,270,47],[329,10,272,4],[330,10,273,4],[331,10,274,4],[331,14,274,10,"vinTxids"],[331,22,274,18],[331,25,274,21],[331,27,274,23],[332,10,275,4],[332,15,275,9],[332,19,275,15,"txdata"],[332,25,275,21],[332,29,275,25,"transactions"],[332,41,275,37],[332,43,275,39],[333,12,276,6],[333,17,276,11],[333,21,276,17,"vin"],[333,24,276,20],[333,28,276,24,"txdata"],[333,34,276,30],[333,35,276,31,"vin"],[333,38,276,34],[333,40,276,36],[334,14,277,8,"vin"],[334,17,277,11],[334,18,277,12,"txid"],[334,22,277,16],[334,26,277,20,"vinTxids"],[334,34,277,28],[334,35,277,29,"push"],[334,39,277,33],[334,40,277,34,"vin"],[334,43,277,37],[334,44,277,38,"txid"],[334,48,277,42],[334,49,277,43],[335,14,278,8],[336,12,279,6],[337,10,280,4],[338,10,281,4],[338,14,281,10,"vintxdatas"],[338,24,281,20],[338,33,281,29,"BlueElectrum"],[338,45,281,41],[338,46,281,42,"multiGetTransactionByTxid"],[338,71,281,67],[338,72,281,68,"vinTxids"],[338,80,281,76],[338,82,281,78],[338,86,281,82],[338,87,281,83],[340,10,283,4],[341,10,284,4],[342,10,285,4],[342,14,285,10,"transactionsWithInputValue"],[342,40,285,36],[342,43,285,39,"transactions"],[342,55,285,51],[342,56,285,52,"map"],[342,59,285,55],[342,60,285,56],[342,70,285,56,"tx"],[342,72,285,58],[342,74,285,62],[343,12,286,6],[343,19,286,6,"Object"],[343,25,286,6],[343,26,286,6,"assign"],[343,32,286,6],[343,37,287,11,"tx"],[343,39,287,13],[344,14,288,8,"vin"],[344,17,288,11],[344,19,288,13,"tx"],[344,21,288,15],[344,22,288,16,"vin"],[344,25,288,19],[344,26,288,20,"map"],[344,29,288,23],[344,30,288,24],[344,40,288,24,"vin"],[344,43,288,27],[344,45,288,31],[345,16,289,10],[345,20,289,16,"inpTxid"],[345,27,289,23],[345,30,289,26,"vin"],[345,33,289,29],[345,34,289,30,"txid"],[345,38,289,34],[346,16,290,10],[346,20,290,16,"inpVout"],[346,27,290,23],[346,30,290,26,"vin"],[346,33,290,29],[346,34,290,30,"vout"],[346,38,290,34],[347,16,291,10],[349,16,293,10],[349,20,293,14,"vintxdatas"],[349,30,293,24],[349,31,293,25,"inpTxid"],[349,38,293,32],[349,39,293,33],[349,43,293,37,"vintxdatas"],[349,53,293,47],[349,54,293,48,"inpTxid"],[349,61,293,55],[349,62,293,56],[349,63,293,57,"vout"],[349,67,293,61],[349,68,293,62,"inpVout"],[349,75,293,69],[349,76,293,70],[349,78,293,72],[350,18,294,12],[350,25,294,12,"Object"],[350,31,294,12],[350,32,294,12,"assign"],[350,38,294,12],[350,43,295,17,"vin"],[350,46,295,20],[351,20,296,14,"addresses"],[351,29,296,23],[351,31,296,25,"vintxdatas"],[351,41,296,35],[351,42,296,36,"inpTxid"],[351,49,296,43],[351,50,296,44],[351,51,296,45,"vout"],[351,55,296,49],[351,56,296,50,"inpVout"],[351,63,296,57],[351,64,296,58],[351,65,296,59,"scriptPubKey"],[351,77,296,71],[351,78,296,72,"addresses"],[351,87,296,81],[352,20,297,14,"value"],[352,25,297,19],[352,27,297,21,"vintxdatas"],[352,37,297,31],[352,38,297,32,"inpTxid"],[352,45,297,39],[352,46,297,40],[352,47,297,41,"vout"],[352,51,297,45],[352,52,297,46,"inpVout"],[352,59,297,53],[352,60,297,54],[352,61,297,55,"value"],[353,18,297,60],[354,16,299,10],[354,17,299,11],[354,23,299,17],[355,18,300,12],[355,25,300,19,"vin"],[355,28,300,22],[356,16,301,10],[357,14,302,8],[357,15,302,9],[358,12,302,10],[359,10,304,4],[359,11,304,5],[359,12,304,6],[361,10,306,4],[363,10,308,4],[363,15,308,9],[363,19,308,15,"tx"],[363,23,308,17],[363,27,308,21,"transactionsWithInputValue"],[363,53,308,47],[363,55,308,49],[364,12,309,6],[364,17,309,11],[364,21,309,17,"vin"],[364,25,309,20],[364,29,309,24,"tx"],[364,33,309,26],[364,34,309,27,"vin"],[364,37,309,30],[364,39,309,32],[365,14,310,8],[365,18,310,12],[365,29,310,23],[365,33,310,27,"vin"],[365,37,310,30],[365,41,310,34,"vin"],[365,45,310,37],[365,46,310,38,"addresses"],[365,55,310,47],[365,59,310,51,"vin"],[365,63,310,54],[365,64,310,55,"addresses"],[365,73,310,64],[365,74,310,65,"indexOf"],[365,81,310,72],[365,82,310,73,"address"],[365,89,310,80],[365,93,310,84],[365,95,310,86],[365,96,310,87],[365,101,310,92],[365,102,310,93],[365,103,310,94],[365,105,310,96],[366,16,311,10],[367,16,312,10],[367,20,312,23,"vin2"],[367,24,312,27],[367,27,312,49,"tx"],[367,31,312,51],[367,32,312,18,"vin"],[367,35,312,21],[368,18,312,29,"vout"],[368,22,312,33],[368,25,312,49,"tx"],[368,29,312,51],[368,30,312,29,"vout"],[368,34,312,33],[369,18,312,38,"txRest"],[369,24,312,44],[369,31,312,44,"_objectWithoutProperties2"],[369,56,312,44],[369,57,312,44,"default"],[369,64,312,44],[369,66,312,49,"tx"],[369,70,312,51],[369,72,312,51,"_excluded"],[369,81,312,51],[370,16,313,10],[370,20,313,16,"clonedTx"],[370,28,313,37],[370,31,313,37,"Object"],[370,37,313,37],[370,38,313,37,"assign"],[370,44,313,37],[370,49,314,15,"txRest"],[370,55,314,21],[371,18,315,12,"inputs"],[371,24,315,18],[371,30,315,18,"_toConsumableArray2"],[371,49,315,18],[371,50,315,18,"default"],[371,57,315,18],[371,59,315,24,"vin2"],[371,63,315,28],[371,64,315,29],[372,18,316,12,"outputs"],[372,25,316,19],[372,31,316,19,"_toConsumableArray2"],[372,50,316,19],[372,51,316,19,"default"],[372,58,316,19],[372,60,316,25,"vout"],[372,64,316,29],[373,16,316,30],[373,18,317,11],[374,16,319,10,"_txsByExternalIndex"],[374,35,319,29],[374,36,319,30,"push"],[374,40,319,34],[374,41,319,35,"clonedTx"],[374,49,319,43],[374,50,319,44],[375,14,320,8],[376,12,321,6],[377,12,322,6],[377,17,322,11],[377,21,322,17,"vout"],[377,26,322,21],[377,30,322,25,"tx"],[377,34,322,27],[377,35,322,28,"vout"],[377,39,322,32],[377,41,322,34],[378,14,323,8],[378,18,323,12,"vout"],[378,23,323,16],[378,24,323,17,"scriptPubKey"],[378,36,323,29],[378,37,323,30,"addresses"],[378,46,323,39],[378,50,323,43,"vout"],[378,55,323,47],[378,56,323,48,"scriptPubKey"],[378,68,323,60],[378,69,323,61,"addresses"],[378,78,323,70],[378,79,323,71,"indexOf"],[378,86,323,78],[378,87,323,79,"address"],[378,94,323,86],[378,98,323,90],[378,100,323,92],[378,101,323,93],[378,106,323,98],[378,107,323,99],[378,108,323,100],[378,110,323,102],[379,16,324,10],[380,16,325,10],[380,20,325,18,"vin"],[380,25,325,21],[380,28,325,50,"tx"],[380,32,325,52],[380,33,325,18,"vin"],[380,36,325,21],[381,18,325,29,"vout2"],[381,23,325,34],[381,26,325,50,"tx"],[381,30,325,52],[381,31,325,23,"vout"],[381,35,325,27],[382,18,325,39,"txRest"],[382,25,325,45],[382,32,325,45,"_objectWithoutProperties2"],[382,57,325,45],[382,58,325,45,"default"],[382,65,325,45],[382,67,325,50,"tx"],[382,71,325,52],[382,73,325,52,"_excluded2"],[382,83,325,52],[383,16,326,10],[383,20,326,16,"clonedTx"],[383,29,326,37],[383,32,326,37,"Object"],[383,38,326,37],[383,39,326,37,"assign"],[383,45,326,37],[383,50,327,15,"txRest"],[383,57,327,21],[384,18,328,12,"inputs"],[384,24,328,18],[384,30,328,18,"_toConsumableArray2"],[384,49,328,18],[384,50,328,18,"default"],[384,57,328,18],[384,59,328,24,"vin"],[384,64,328,27],[384,65,328,28],[385,18,329,12,"outputs"],[385,25,329,19],[385,31,329,19,"_toConsumableArray2"],[385,50,329,19],[385,51,329,19,"default"],[385,58,329,19],[385,60,329,25,"vout2"],[385,65,329,30],[386,16,329,31],[386,18,330,11],[387,16,332,10,"_txsByExternalIndex"],[387,35,332,29],[387,36,332,30,"push"],[387,40,332,34],[387,41,332,35,"clonedTx"],[387,50,332,43],[387,51,332,44],[388,14,333,8],[389,12,334,6],[390,10,335,4],[391,10,337,4],[391,14,337,8],[391,15,337,9,"_txs_by_external_index"],[391,37,337,31],[391,40,337,34,"_txsByExternalIndex"],[391,59,337,53],[392,10,338,4],[392,14,338,8],[392,15,338,9,"_lastTxFetch"],[392,27,338,21],[392,30,338,24],[392,31,338,25],[392,35,338,29,"Date"],[392,39,338,33],[392,40,338,34],[392,41,338,35],[393,8,339,2],[393,9,339,3],[394,8,339,3],[394,17,241,8,"fetchTransactions"],[394,34,241,25,"fetchTransactions"],[394,35,241,25],[395,10,241,25],[395,17,241,25,"_fetchTransactions"],[395,35,241,25],[395,36,241,25,"apply"],[395,41,241,25],[395,48,241,25,"arguments"],[395,57,241,25],[396,8,241,25],[397,8,241,25],[397,15,241,8,"fetchTransactions"],[397,32,241,25],[398,6,241,25],[399,4,241,25],[400,6,241,25,"key"],[400,9,241,25],[401,6,241,25,"value"],[401,11,241,25],[401,13,341,2],[401,22,341,2,"getTransactions"],[401,37,341,17,"getTransactions"],[401,38,341,17],[401,40,341,35],[402,8,342,4],[403,8,343,4],[403,12,343,8],[403,13,343,9,"_txs_by_external_index"],[403,35,343,31],[403,38,343,34],[403,42,343,38],[403,43,343,39,"_txs_by_external_index"],[403,65,343,61],[403,69,343,65],[403,71,343,67],[404,8,344,4],[404,12,344,8],[404,13,344,9,"_txs_by_internal_index"],[404,35,344,31],[404,38,344,34],[404,40,344,36],[405,8,346,4],[405,12,346,10,"hd"],[405,14,346,12],[405,17,346,15],[405,22,346,19,"HDSegwitBech32Wallet"],[405,53,346,19],[405,54,346,19,"HDSegwitBech32Wallet"],[405,80,346,39],[405,82,346,40],[405,83,346,41],[406,8,347,4],[406,15,347,11,"hd"],[406,17,347,13],[406,18,347,14,"getTransactions"],[406,33,347,29],[406,34,347,30,"apply"],[406,39,347,35],[406,40,347,36],[406,44,347,40],[406,45,347,41],[407,6,348,2],[409,6,350,2],[410,0,351,0],[411,0,352,0],[412,0,353,0],[413,0,354,0],[414,0,355,0],[415,4,350,2],[416,6,350,2,"key"],[416,9,350,2],[417,6,350,2,"value"],[417,11,350,2],[418,8,350,2],[418,12,350,2,"_broadcastTx"],[418,24,350,2],[418,31,350,2,"_asyncToGenerator2"],[418,49,350,2],[418,50,350,2,"default"],[418,57,350,2],[418,59,356,2],[418,70,356,20,"txhex"],[418,75,356,33],[418,77,356,53],[419,10,357,4],[419,14,357,10,"broadcast"],[419,23,357,19],[419,32,357,28,"BlueElectrum"],[419,44,357,40],[419,45,357,41,"broadcastV2"],[419,56,357,52],[419,57,357,53,"txhex"],[419,62,357,58],[419,63,357,59],[420,10,358,4,"console"],[420,17,358,11],[420,18,358,12,"log"],[420,21,358,15],[420,22,358,16],[421,12,358,18,"broadcast"],[421,21,358,27],[421,23,358,18,"broadcast"],[422,10,358,28],[422,11,358,29],[422,12,358,30],[423,10,359,4],[423,14,359,8,"broadcast"],[423,23,359,17],[423,24,359,18,"indexOf"],[423,31,359,25],[423,32,359,26],[423,46,359,40],[423,47,359,41],[423,52,359,46],[423,53,359,47],[423,54,359,48],[423,56,359,50],[423,63,359,57],[423,67,359,61],[424,10,360,4],[424,17,360,11,"broadcast"],[424,26,360,20],[424,27,360,21,"length"],[424,33,360,27],[424,38,360,32],[424,40,360,34],[424,41,360,35],[424,42,360,36],[425,8,361,2],[425,9,361,3],[426,8,361,3],[426,17,356,8,"broadcastTx"],[426,28,356,19,"broadcastTx"],[426,29,356,19,"_x2"],[426,32,356,19],[427,10,356,19],[427,17,356,19,"_broadcastTx"],[427,29,356,19],[427,30,356,19,"apply"],[427,35,356,19],[427,42,356,19,"arguments"],[427,51,356,19],[428,8,356,19],[429,8,356,19],[429,15,356,8,"broadcastTx"],[429,26,356,19],[430,6,356,19],[431,4,356,19],[432,6,356,19,"key"],[432,9,356,19],[433,6,356,19,"value"],[433,11,356,19],[433,13,363,2],[433,22,363,2,"coinselect"],[433,32,363,12,"coinselect"],[433,33,364,4,"utxos"],[433,38,364,34],[433,40,365,4,"targets"],[433,47,365,38],[433,49,366,4,"feeRate"],[433,56,366,19],[433,58,371,4],[434,8,372,4],[434,12,372,8,"algo"],[434,16,372,12],[434,19,372,15,"coinSelect"],[434,38,372,25],[435,8,373,4],[436,8,374,4],[436,12,374,8,"targets"],[436,19,374,15],[436,20,374,16,"some"],[436,24,374,20],[436,25,374,21],[436,35,374,21,"i"],[436,36,374,22],[437,10,374,22],[437,17,374,26],[437,19,374,28],[437,26,374,35],[437,30,374,39,"i"],[437,31,374,40],[437,32,374,41],[438,8,374,41],[438,10,374,42],[438,12,374,44],[439,10,375,6,"algo"],[439,14,375,10],[439,17,375,13,"coinSelectSplit"],[439,31,375,28],[440,8,376,4],[441,8,378,4],[441,12,378,10,"_utxos"],[441,18,378,16],[441,21,378,19,"JSON"],[441,25,378,23],[441,26,378,24,"parse"],[441,31,378,29],[441,32,378,30,"JSON"],[441,36,378,34],[441,37,378,35,"stringify"],[441,46,378,44],[441,47,378,45,"utxos"],[441,52,378,50],[441,53,378,51],[441,54,378,79],[442,8,379,4],[442,12,379,10,"_targets"],[442,20,379,18],[442,23,379,21,"JSON"],[442,27,379,25],[442,28,379,26,"parse"],[442,33,379,31],[442,34,379,32,"JSON"],[442,38,379,36],[442,39,379,37,"stringify"],[442,48,379,46],[442,49,379,47,"targets"],[442,56,379,54],[442,57,379,55],[442,58,379,85],[444,8,381,4],[445,8,382,4],[445,13,382,9],[445,17,382,15,"u"],[445,18,382,16],[445,22,382,20,"_utxos"],[445,28,382,26],[445,30,382,28],[446,10,382,28],[446,14,382,28,"_u$script"],[446,23,382,28],[447,10,383,6],[447,15,383,6,"_u$script"],[447,24,383,6],[447,27,383,10,"u"],[447,28,383,11],[447,29,383,12,"script"],[447,35,383,18],[447,48,383,10,"_u$script"],[447,57,383,10],[447,58,383,20,"length"],[447,64,383,26],[447,66,383,28],[448,12,384,8],[449,10,385,6],[450,10,387,6],[450,14,387,10],[450,18,387,14],[450,19,387,15,"segwitType"],[450,29,387,25],[450,34,387,30],[450,42,387,38],[450,44,387,40],[451,12,388,8,"u"],[451,13,388,9],[451,14,388,10,"script"],[451,20,388,16],[451,23,388,19],[452,14,388,21,"length"],[452,20,388,27],[452,22,388,29],[453,12,388,32],[453,13,388,33],[454,10,389,6],[454,11,389,7],[454,17,389,13],[454,21,389,17],[454,25,389,21],[454,26,389,22,"segwitType"],[454,36,389,32],[454,41,389,37],[454,55,389,51],[454,57,389,53],[455,12,390,8,"u"],[455,13,390,9],[455,14,390,10,"script"],[455,20,390,16],[455,23,390,19],[456,14,390,21,"length"],[456,20,390,27],[456,22,390,29],[457,12,390,32],[457,13,390,33],[458,10,391,6],[459,8,392,4],[460,8,394,4],[460,13,394,9],[460,17,394,15,"t"],[460,18,394,16],[460,22,394,20,"_targets"],[460,30,394,28],[460,32,394,30],[461,10,394,30],[461,14,394,30,"_t$address"],[461,24,394,30],[461,26,394,30,"_t$script"],[461,35,394,30],[462,10,395,6],[462,15,395,6,"_t$address"],[462,25,395,6],[462,28,395,10,"t"],[462,29,395,11],[462,30,395,12,"address"],[462,37,395,19],[462,50,395,10,"_t$address"],[462,60,395,10],[462,61,395,21,"startsWith"],[462,71,395,31],[462,72,395,32],[462,77,395,37],[462,78,395,38],[462,80,395,40],[463,12,396,8],[464,12,397,8,"t"],[464,13,397,9],[464,14,397,10,"script"],[464,20,397,16],[464,23,397,19],[465,14,397,21,"length"],[465,20,397,27],[465,22,397,29,"bitcoin"],[465,29,397,36],[465,30,397,37,"address"],[465,37,397,44],[465,38,397,45,"toOutputScript"],[465,52,397,59],[465,53,397,60,"t"],[465,54,397,61],[465,55,397,62,"address"],[465,62,397,69],[465,63,397,70],[465,64,397,71,"length"],[465,70,397,77],[465,73,397,80],[466,12,397,82],[466,13,397,83],[467,10,398,6],[468,10,400,6],[468,15,400,6,"_t$script"],[468,24,400,6],[468,27,400,10,"t"],[468,28,400,11],[468,29,400,12,"script"],[468,35,400,18],[468,48,400,10,"_t$script"],[468,57,400,10],[468,58,400,20,"hex"],[468,61,400,23],[468,63,400,25],[469,12,401,8],[470,12,402,8,"t"],[470,13,402,9],[470,14,402,10,"script"],[470,20,402,16],[470,21,402,17,"length"],[470,27,402,23],[470,30,402,26,"t"],[470,31,402,27],[470,32,402,28,"script"],[470,38,402,34],[470,39,402,35,"hex"],[470,42,402,38],[470,43,402,39,"length"],[470,49,402,45],[470,52,402,48],[470,53,402,49],[470,56,402,52],[470,57,402,53],[471,10,403,6],[472,8,404,4],[473,8,406,4],[473,12,406,4,"_algo"],[473,17,406,4],[473,20,406,37,"algo"],[473,24,406,41],[473,25,406,42,"_utxos"],[473,31,406,48],[473,33,406,50,"_targets"],[473,41,406,58],[473,43,406,82,"feeRate"],[473,50,406,89],[473,51,406,90],[474,10,406,12,"inputs"],[474,16,406,18],[474,19,406,18,"_algo"],[474,24,406,18],[474,25,406,12,"inputs"],[474,31,406,18],[475,10,406,20,"outputs"],[475,17,406,27],[475,20,406,27,"_algo"],[475,25,406,27],[475,26,406,20,"outputs"],[475,33,406,27],[476,10,406,29,"fee"],[476,13,406,32],[476,16,406,32,"_algo"],[476,21,406,32],[476,22,406,29,"fee"],[476,25,406,32],[478,8,408,4],[479,8,409,4],[479,12,409,8],[479,13,409,9,"inputs"],[479,19,409,15],[479,23,409,19],[479,24,409,20,"outputs"],[479,31,409,27],[479,33,409,29],[480,10,410,6],[480,16,410,12],[480,20,410,16,"Error"],[480,25,410,21],[480,26,410,22],[480,95,410,91],[480,96,410,92],[481,8,411,4],[482,8,413,4],[482,15,413,11],[483,10,413,13,"inputs"],[483,16,413,19],[483,18,413,13,"inputs"],[483,24,413,19],[484,10,413,21,"outputs"],[484,17,413,28],[484,19,413,21,"outputs"],[484,26,413,28],[485,10,413,30,"fee"],[485,13,413,33],[485,15,413,30,"fee"],[486,8,413,34],[486,9,413,35],[487,6,414,2],[489,6,416,2],[490,0,417,0],[491,0,418,0],[492,0,419,0],[493,0,420,0],[494,0,421,0],[495,0,422,0],[496,0,423,0],[497,0,424,0],[498,0,425,0],[499,0,426,0],[500,4,416,2],[501,6,416,2,"key"],[501,9,416,2],[502,6,416,2,"value"],[502,11,416,2],[502,13,427,2],[502,22,427,2,"createTransaction"],[502,39,427,19,"createTransaction"],[502,40,428,4,"utxos"],[502,45,428,34],[502,47,429,4,"targets"],[502,54,429,31],[502,56,430,4,"feeRate"],[502,63,430,19],[502,65,431,4,"changeAddress"],[502,78,431,25],[502,80,432,4,"sequence"],[502,88,432,20],[502,90,435,29],[503,8,435,29],[503,12,433,4,"skipSigning"],[503,23,433,15],[503,26,433,15,"arguments"],[503,35,433,15],[503,36,433,15,"length"],[503,42,433,15],[503,50,433,15,"arguments"],[503,59,433,15],[503,67,433,15,"undefined"],[503,76,433,15],[503,79,433,15,"arguments"],[503,88,433,15],[503,94,433,18],[503,99,433,23],[504,8,433,23],[504,12,434,4,"masterFingerprint"],[504,29,434,29],[504,32,434,29,"arguments"],[504,41,434,29],[504,42,434,29,"length"],[504,48,434,29],[504,55,434,29,"arguments"],[504,64,434,29],[504,70,434,29,"undefined"],[504,79,434,29],[505,8,436,4],[505,12,436,8,"targets"],[505,19,436,15],[505,20,436,16,"length"],[505,26,436,22],[505,31,436,27],[505,32,436,28],[505,34,436,30],[505,40,436,36],[505,44,436,40,"Error"],[505,49,436,45],[505,50,436,46],[505,75,436,71],[505,76,436,72],[506,8,437,4],[506,12,437,4,"_this$coinselect"],[506,28,437,4],[506,31,437,37],[506,35,437,41],[506,36,437,42,"coinselect"],[506,46,437,52],[506,47,437,53,"utxos"],[506,52,437,58],[506,54,437,60,"targets"],[506,61,437,67],[506,63,437,69,"feeRate"],[506,70,437,76],[506,71,437,77],[507,10,437,12,"inputs"],[507,16,437,18],[507,19,437,18,"_this$coinselect"],[507,35,437,18],[507,36,437,12,"inputs"],[507,42,437,18],[508,10,437,20,"outputs"],[508,17,437,27],[508,20,437,27,"_this$coinselect"],[508,36,437,27],[508,37,437,20,"outputs"],[508,44,437,27],[509,10,437,29,"fee"],[509,13,437,32],[509,16,437,32,"_this$coinselect"],[509,32,437,32],[509,33,437,29,"fee"],[509,36,437,32],[510,8,438,4,"sequence"],[510,16,438,12],[510,19,438,15,"sequence"],[510,27,438,23],[510,31,438,27],[510,41,438,37],[510,42,438,38],[510,43,438,39],[511,8,439,4],[511,12,439,10,"psbt"],[511,16,439,14],[511,19,439,17],[511,23,439,21,"bitcoin"],[511,30,439,28],[511,31,439,29,"Psbt"],[511,35,439,33],[511,36,439,34],[511,37,439,35],[512,8,440,4],[512,12,440,8,"c"],[512,13,440,9],[512,16,440,12],[512,17,440,13],[513,8,441,4],[513,12,441,10,"values"],[513,18,441,40],[513,21,441,43],[513,22,441,44],[513,23,441,45],[514,8,442,4],[514,12,442,8,"keyPair"],[514,19,442,30],[514,22,442,33],[514,26,442,37],[515,8,444,4],[515,12,444,8],[515,13,444,9,"skipSigning"],[515,24,444,20],[515,26,444,22],[516,10,445,6],[517,10,446,6,"keyPair"],[517,17,446,13],[517,20,446,16,"ECPair"],[517,26,446,22],[517,27,446,23,"fromWIF"],[517,34,446,30],[517,35,446,31],[517,39,446,35],[517,40,446,36,"secret"],[517,46,446,42],[517,47,446,43],[517,48,446,44],[517,49,446,45],[518,8,447,4],[519,8,449,4,"inputs"],[519,14,449,10],[519,15,449,11,"forEach"],[519,22,449,18],[519,23,449,19],[519,33,449,19,"input"],[519,38,449,24],[519,40,449,28],[520,10,450,6,"values"],[520,16,450,12],[520,17,450,13,"c"],[520,18,450,14],[520,19,450,15],[520,22,450,18,"input"],[520,27,450,23],[520,28,450,24,"value"],[520,33,450,29],[521,10,451,6,"c"],[521,11,451,7],[521,13,451,9],[522,10,453,6],[522,14,453,10],[522,15,453,11,"input"],[522,20,453,16],[522,21,453,17,"txhex"],[522,26,453,22],[522,28,453,24],[522,34,453,30],[522,38,453,34,"Error"],[522,43,453,39],[522,44,453,40],[522,128,453,124],[522,129,453,125],[523,10,455,6,"psbt"],[523,14,455,10],[523,15,455,11,"addInput"],[523,23,455,19],[523,24,455,20],[524,12,456,8,"hash"],[524,16,456,12],[524,18,456,14,"input"],[524,23,456,19],[524,24,456,20,"txid"],[524,28,456,24],[525,12,457,8,"index"],[525,17,457,13],[525,19,457,15,"input"],[525,24,457,20],[525,25,457,21,"vout"],[525,29,457,25],[526,12,458,8,"sequence"],[526,20,458,16],[526,22,458,8,"sequence"],[526,30,458,16],[527,12,459,8],[528,12,460,8,"nonWitnessUtxo"],[528,26,460,22],[528,28,460,24,"Buffer"],[528,34,460,30],[528,35,460,31,"from"],[528,39,460,35],[528,40,460,36,"input"],[528,45,460,41],[528,46,460,42,"txhex"],[528,51,460,47],[528,53,460,49],[528,58,460,54],[529,10,461,6],[529,11,461,7],[529,12,461,8],[530,8,462,4],[530,9,462,5],[530,10,462,6],[531,8,464,4],[531,12,464,10,"sanitizedOutputs"],[531,28,464,26],[531,31,464,29,"outputs"],[531,38,464,36],[531,39,464,37,"map"],[531,42,464,40],[531,43,464,41],[531,53,464,41,"output"],[531,59,464,47],[532,10,464,47],[532,14,464,47,"_output$address"],[532,29,464,47],[533,10,464,47],[533,17,464,47,"Object"],[533,23,464,47],[533,24,464,47,"assign"],[533,30,464,47],[533,35,465,9,"output"],[533,41,465,15],[534,12,466,6],[535,12,467,6,"address"],[535,19,467,13],[535,22,467,13,"_output$address"],[535,37,467,13],[535,40,467,15,"output"],[535,46,467,21],[535,47,467,22,"address"],[535,54,467,29],[535,66,467,29,"_output$address"],[535,81,467,29],[535,84,467,33,"changeAddress"],[536,10,467,46],[537,8,467,46],[537,9,468,6],[537,10,468,7],[538,8,470,4,"sanitizedOutputs"],[538,24,470,20],[538,25,470,21,"forEach"],[538,32,470,28],[538,33,470,29],[538,43,470,29,"output"],[538,49,470,35],[538,51,470,39],[539,10,471,6],[539,14,471,12,"outputData"],[539,24,471,22],[539,27,471,25],[540,12,472,8,"address"],[540,19,472,15],[540,21,472,17,"output"],[540,27,472,23],[540,28,472,24,"address"],[540,35,472,31],[541,12,473,8,"value"],[541,17,473,13],[541,19,473,15,"BigInt"],[541,25,473,21],[541,26,473,22,"output"],[541,32,473,28],[541,33,473,29,"value"],[541,38,473,34],[542,10,474,6],[542,11,474,7],[543,10,476,6,"psbt"],[543,14,476,10],[543,15,476,11,"addOutput"],[543,24,476,20],[543,25,476,21,"outputData"],[543,35,476,31],[543,36,476,32],[544,8,477,4],[544,9,477,5],[544,10,477,6],[545,8,479,4],[545,12,479,8],[545,13,479,9,"skipSigning"],[545,24,479,20],[545,28,479,24,"keyPair"],[545,35,479,31],[545,37,479,33],[546,10,480,6],[547,10,481,6],[547,15,481,11],[547,19,481,15,"cc"],[547,21,481,17],[547,24,481,20],[547,25,481,21],[547,27,481,23,"cc"],[547,29,481,25],[547,32,481,28,"c"],[547,33,481,29],[547,35,481,31,"cc"],[547,37,481,33],[547,39,481,35],[547,41,481,37],[548,12,482,8,"psbt"],[548,16,482,12],[548,17,482,13,"signInput"],[548,26,482,22],[548,27,482,23,"cc"],[548,29,482,25],[548,31,482,27,"keyPair"],[548,38,482,34],[548,39,482,35],[549,10,483,6],[550,8,484,4],[551,8,486,4],[551,12,486,8,"tx"],[551,14,486,10],[552,8,487,4],[552,12,487,8],[552,13,487,9,"skipSigning"],[552,24,487,20],[552,26,487,22],[553,10,488,6,"tx"],[553,12,488,8],[553,15,488,11,"psbt"],[553,19,488,15],[553,20,488,16,"finalizeAllInputs"],[553,37,488,33],[553,38,488,34],[553,39,488,35],[553,40,488,36,"extractTransaction"],[553,58,488,54],[553,59,488,55],[553,60,488,56],[554,8,489,4],[555,8,490,4],[555,15,490,11],[556,10,490,13,"tx"],[556,12,490,15],[556,14,490,13,"tx"],[556,16,490,15],[557,10,490,17,"inputs"],[557,16,490,23],[557,18,490,17,"inputs"],[557,24,490,23],[558,10,490,25,"outputs"],[558,17,490,32],[558,19,490,34,"sanitizedOutputs"],[558,35,490,50],[559,10,490,52,"fee"],[559,13,490,55],[559,15,490,52,"fee"],[559,18,490,55],[560,10,490,57,"psbt"],[560,14,490,61],[560,16,490,57,"psbt"],[561,8,490,62],[561,9,490,63],[562,6,491,2],[563,4,491,3],[564,6,491,3,"key"],[564,9,491,3],[565,6,491,3,"value"],[565,11,491,3],[565,13,493,2],[565,22,493,2,"getLatestTransactionTime"],[565,46,493,26,"getLatestTransactionTime"],[565,47,493,26],[565,49,493,41],[566,8,494,4],[566,12,494,8],[566,16,494,12],[566,17,494,13,"getTransactions"],[566,32,494,28],[566,33,494,29],[566,34,494,30],[566,35,494,31,"length"],[566,41,494,37],[566,46,494,42],[566,47,494,43],[566,49,494,45],[567,10,495,6],[567,17,495,13],[567,18,495,14],[568,8,496,4],[569,8,497,4],[569,12,497,8,"max"],[569,15,497,11],[569,18,497,14],[569,19,497,15],[570,8,498,4],[570,13,498,9],[570,17,498,15,"tx"],[570,19,498,17],[570,23,498,21],[570,27,498,25],[570,28,498,26,"getTransactions"],[570,43,498,41],[570,44,498,42],[570,45,498,43],[570,47,498,45],[571,10,498,45],[571,14,498,45,"_tx$received"],[571,26,498,45],[572,10,499,6,"max"],[572,13,499,9],[572,16,499,12,"Math"],[572,20,499,16],[572,21,499,17,"max"],[572,24,499,20],[572,25,499,21],[572,29,499,25,"Date"],[572,33,499,29],[572,35,499,29,"_tx$received"],[572,47,499,29],[572,50,499,30,"tx"],[572,52,499,32],[572,53,499,33,"received"],[572,61,499,41],[572,73,499,41,"_tx$received"],[572,85,499,41],[572,88,499,45],[572,89,499,46],[572,90,499,47],[572,91,499,48,"getTime"],[572,98,499,55],[572,99,499,56],[572,100,499,57],[572,102,499,59,"max"],[572,105,499,62],[572,106,499,63],[573,8,500,4],[574,8,501,4],[574,15,501,11],[574,19,501,15,"Date"],[574,23,501,19],[574,24,501,20,"max"],[574,27,501,23],[574,28,501,24],[574,29,501,25,"toString"],[574,37,501,33],[574,38,501,34],[574,39,501,35],[575,6,502,2],[577,6,504,2],[578,0,505,0],[579,0,506,0],[580,0,507,0],[581,0,508,0],[582,0,509,0],[583,0,510,0],[584,0,511,0],[585,0,512,0],[586,0,513,0],[587,0,514,0],[588,4,504,2],[589,6,504,2,"key"],[589,9,504,2],[590,6,504,2,"value"],[590,11,504,2],[590,13,515,2],[590,22,515,2,"isAddressValid"],[590,36,515,16,"isAddressValid"],[590,37,515,17,"address"],[590,44,515,32],[590,46,515,43],[591,8,516,4],[591,12,516,8],[592,10,517,6,"bitcoin"],[592,17,517,13],[592,18,517,14,"address"],[592,25,517,21],[592,26,517,22,"toOutputScript"],[592,40,517,36],[592,41,517,37,"address"],[592,48,517,44],[592,49,517,45],[592,50,517,46],[592,51,517,47],[594,10,519,6],[594,14,519,10],[594,15,519,11,"address"],[594,22,519,18],[594,23,519,19,"toLowerCase"],[594,34,519,30],[594,35,519,31],[594,36,519,32],[594,37,519,33,"startsWith"],[594,47,519,43],[594,48,519,44],[594,53,519,49],[594,54,519,50],[594,56,519,52],[594,63,519,59],[594,67,519,63],[595,10,520,6],[595,14,520,12,"decoded"],[595,21,520,19],[595,24,520,22,"bitcoin"],[595,31,520,29],[595,32,520,30,"address"],[595,39,520,37],[595,40,520,38,"fromBech32"],[595,50,520,48],[595,51,520,49,"address"],[595,58,520,56],[595,59,520,57],[596,10,521,6],[596,14,521,10,"decoded"],[596,21,521,17],[596,22,521,18,"version"],[596,29,521,25],[596,34,521,30],[596,35,521,31],[596,37,521,33],[596,44,521,40],[596,48,521,44],[597,10,522,6],[597,14,522,10,"decoded"],[597,21,522,17],[597,22,522,18,"version"],[597,29,522,25],[597,34,522,30],[597,35,522,31],[597,39,522,35,"decoded"],[597,46,522,42],[597,47,522,43,"data"],[597,51,522,47],[597,52,522,48,"length"],[597,58,522,54],[597,63,522,59],[597,65,522,61],[597,67,522,63],[597,74,522,70],[597,79,522,75],[598,10,523,6],[598,14,523,10,"decoded"],[598,21,523,17],[598,22,523,18,"version"],[598,29,523,25],[598,34,523,30],[598,35,523,31],[598,39,523,35],[598,40,523,36,"ecc"],[598,58,523,39],[598,59,523,40,"isPoint"],[598,66,523,47],[598,67,523,48,"Buffer"],[598,73,523,54],[598,74,523,55,"concat"],[598,80,523,61],[598,81,523,62],[598,82,523,63,"Buffer"],[598,88,523,69],[598,89,523,70,"from"],[598,93,523,74],[598,94,523,75],[598,95,523,76],[598,96,523,77],[598,97,523,78],[598,98,523,79],[598,100,523,81,"decoded"],[598,107,523,88],[598,108,523,89,"data"],[598,112,523,93],[598,113,523,94],[598,114,523,95],[598,115,523,96],[598,117,523,98],[598,124,523,105],[598,129,523,110],[599,10,524,6],[599,14,524,10,"decoded"],[599,21,524,17],[599,22,524,18,"version"],[599,29,524,25],[599,32,524,28],[599,33,524,29],[599,35,524,31],[599,42,524,38],[599,47,524,43],[600,10,525,6],[601,10,526,6],[601,17,526,13],[601,21,526,17],[602,8,527,4],[602,9,527,5],[602,10,527,6],[602,17,527,13,"e"],[602,18,527,14],[602,20,527,16],[603,10,528,6],[603,17,528,13],[603,22,528,18],[604,8,529,4],[605,6,530,2],[607,6,532,2],[608,0,533,0],[609,0,534,0],[610,0,535,0],[611,0,536,0],[612,0,537,0],[613,4,532,2],[614,6,532,2,"key"],[614,9,532,2],[615,6,532,2,"value"],[615,11,532,2],[615,13,552,2],[615,22,552,2,"weOwnAddress"],[615,34,552,14,"weOwnAddress"],[615,35,552,15,"address"],[615,42,552,30],[615,44,552,41],[616,8,553,4],[616,12,553,8],[616,13,553,9,"address"],[616,20,553,16],[616,22,553,18],[616,29,553,25],[616,34,553,30],[617,8,554,4],[617,12,554,8,"cleanAddress"],[617,24,554,20],[617,27,554,23,"address"],[617,34,554,30],[618,8,556,4],[618,12,556,8],[618,16,556,12],[618,17,556,13,"segwitType"],[618,27,556,23],[618,32,556,28],[618,40,556,36],[618,42,556,38],[619,10,557,6,"cleanAddress"],[619,22,557,18],[619,25,557,21,"address"],[619,32,557,28],[619,33,557,29,"toLowerCase"],[619,44,557,40],[619,45,557,41],[619,46,557,42],[620,8,558,4],[621,8,560,4],[621,15,560,11],[621,19,560,15],[621,20,560,16,"getAddress"],[621,30,560,26],[621,31,560,27],[621,32,560,28],[621,37,560,33,"cleanAddress"],[621,49,560,45],[621,53,560,49],[621,57,560,53],[621,58,560,54,"_address"],[621,66,560,62],[621,71,560,67,"cleanAddress"],[621,83,560,79],[622,6,561,2],[623,4,561,3],[624,6,561,3,"key"],[624,9,561,3],[625,6,561,3,"value"],[625,11,561,3],[625,13,563,2],[625,22,563,2,"weOwnTransaction"],[625,38,563,18,"weOwnTransaction"],[625,39,563,19,"txid"],[625,43,563,31],[625,45,563,42],[626,8,564,4],[626,13,564,9],[626,17,564,15,"tx"],[626,19,564,17],[626,23,564,21],[626,27,564,25],[626,28,564,26,"getTransactions"],[626,43,564,41],[626,44,564,42],[626,45,564,43],[626,47,564,45],[627,10,565,6],[627,14,565,10,"tx"],[627,16,565,12],[627,20,565,16,"tx"],[627,22,565,18],[627,23,565,19,"txid"],[627,27,565,23],[627,31,565,27,"tx"],[627,33,565,29],[627,34,565,30,"txid"],[627,38,565,34],[627,43,565,39,"txid"],[627,47,565,43],[627,49,565,45],[627,56,565,52],[627,60,565,56],[628,8,566,4],[629,8,568,4],[629,15,568,11],[629,20,568,16],[630,6,569,2],[631,4,569,3],[632,6,569,3,"key"],[632,9,569,3],[633,6,569,3,"value"],[633,11,569,3],[633,13,571,2],[633,22,571,2,"allowSignVerifyMessage"],[633,44,571,24,"allowSignVerifyMessage"],[633,45,571,24],[633,47,571,36],[634,8,572,4],[634,15,572,11],[634,19,572,15],[635,6,573,2],[637,6,575,2],[638,0,576,0],[639,0,577,0],[640,0,578,0],[641,0,579,0],[642,0,580,0],[643,0,581,0],[644,4,575,2],[645,6,575,2,"key"],[645,9,575,2],[646,6,575,2,"value"],[646,11,575,2],[646,13,582,2],[646,22,582,2,"addressIsChange"],[646,37,582,17,"addressIsChange"],[646,38,582,18,"address"],[646,45,582,33],[646,47,582,44],[647,8,583,4],[647,15,583,11],[647,20,583,16],[648,6,584,2],[650,6,586,2],[651,0,587,0],[652,0,588,0],[653,0,589,0],[654,0,590,0],[655,0,591,0],[656,4,586,2],[657,6,586,2,"key"],[657,9,586,2],[658,6,586,2,"value"],[658,11,586,2],[658,13,592,2],[658,22,592,2,"_getWIFbyAddress"],[658,38,592,18,"_getWIFbyAddress"],[658,39,592,19,"address"],[658,46,592,34],[658,48,592,52],[659,8,593,4],[659,15,593,11],[659,19,593,15],[659,20,593,16,"getAddress"],[659,30,593,26],[659,31,593,27],[659,32,593,28],[659,37,593,33,"address"],[659,44,593,40],[659,47,593,43],[659,51,593,47],[659,52,593,48,"secret"],[659,58,593,54],[659,61,593,57],[659,66,593,62],[660,6,594,2],[662,6,596,2],[663,0,597,0],[664,0,598,0],[665,0,599,0],[666,0,600,0],[667,0,601,0],[668,0,602,0],[669,4,596,2],[670,6,596,2,"key"],[670,9,596,2],[671,6,596,2,"value"],[671,11,596,2],[671,13,603,2],[671,22,603,2,"signMessage"],[671,33,603,13,"signMessage"],[671,34,603,14,"message"],[671,41,603,29],[671,43,603,31,"address"],[671,50,603,46],[671,52,603,74],[672,8,603,74],[672,12,603,48,"useSegwit"],[672,21,603,57],[672,24,603,57,"arguments"],[672,33,603,57],[672,34,603,57,"length"],[672,40,603,57],[672,48,603,57,"arguments"],[672,57,603,57],[672,65,603,57,"undefined"],[672,74,603,57],[672,77,603,57,"arguments"],[672,86,603,57],[672,92,603,60],[672,96,603,64],[673,8,604,4],[673,12,604,10,"wif"],[673,15,604,13],[673,18,604,16],[673,22,604,20],[673,23,604,21,"_getWIFbyAddress"],[673,39,604,37],[673,40,604,38,"address"],[673,47,604,45],[673,48,604,46],[674,8,605,4],[674,12,605,8],[674,13,605,9,"wif"],[674,16,605,12],[674,18,605,14],[674,24,605,20],[674,28,605,24,"Error"],[674,33,605,29],[674,34,605,30],[674,51,605,47],[674,52,605,48],[675,8,606,4],[675,12,606,10,"keyPair"],[675,19,606,17],[675,22,606,20,"ECPair"],[675,28,606,26],[675,29,606,27,"fromWIF"],[675,36,606,34],[675,37,606,35,"wif"],[675,40,606,38],[675,41,606,39],[676,8,607,4],[676,12,607,10,"privateKey"],[676,22,607,20],[676,25,607,23,"keyPair"],[676,32,607,30],[676,33,607,31,"privateKey"],[676,43,607,41],[677,8,608,4],[677,12,608,8],[677,13,608,9,"privateKey"],[677,23,608,19],[677,25,608,21],[677,31,608,27],[677,35,608,31,"Error"],[677,40,608,36],[677,41,608,37],[677,62,608,58],[677,63,608,59],[678,8,609,4],[678,12,609,10,"options"],[678,19,609,17],[678,22,609,20],[678,26,609,24],[678,27,609,25,"segwitType"],[678,37,609,35],[678,41,609,39,"useSegwit"],[678,50,609,48],[678,53,609,51],[679,10,609,53,"segwitType"],[679,20,609,63],[679,22,609,65],[679,26,609,69],[679,27,609,70,"segwitType"],[680,8,609,81],[680,9,609,82],[680,12,609,85,"undefined"],[680,21,609,94],[681,8,610,4],[681,12,610,10,"signature"],[681,21,610,19],[681,24,610,22,"bitcoinMessage"],[681,49,610,36],[681,50,610,37,"sign"],[681,54,610,41],[681,55,610,42,"message"],[681,62,610,49],[681,64,610,51,"Buffer"],[681,70,610,57],[681,71,610,58,"from"],[681,75,610,62],[681,76,610,63,"privateKey"],[681,86,610,73],[681,87,610,74],[681,89,610,76,"keyPair"],[681,96,610,83],[681,97,610,84,"compressed"],[681,107,610,94],[681,109,610,96,"options"],[681,116,610,103],[681,117,610,104],[682,8,611,4],[682,15,611,11,"signature"],[682,24,611,20],[682,25,611,21,"toString"],[682,33,611,29],[682,34,611,30],[682,42,611,38],[682,43,611,39],[683,6,612,2],[685,6,614,2],[686,0,615,0],[687,0,616,0],[688,0,617,0],[689,0,618,0],[690,0,619,0],[691,0,620,0],[692,0,621,0],[693,4,614,2],[694,6,614,2,"key"],[694,9,614,2],[695,6,614,2,"value"],[695,11,614,2],[695,13,622,2],[695,22,622,2,"verifyMessage"],[695,35,622,15,"verifyMessage"],[695,36,622,16,"message"],[695,43,622,31],[695,45,622,33,"address"],[695,52,622,48],[695,54,622,50,"signature"],[695,63,622,67],[695,65,622,78],[696,8,623,4],[697,8,624,4],[697,12,624,8],[698,10,625,6],[698,17,625,13,"bitcoinMessage"],[698,42,625,27],[698,43,625,28,"verify"],[698,49,625,34],[698,50,625,35,"message"],[698,57,625,42],[698,59,625,44,"address"],[698,66,625,51],[698,68,625,53,"signature"],[698,77,625,62],[698,79,625,64,"undefined"],[698,88,625,73],[698,90,625,75],[698,94,625,79],[698,95,625,80],[699,8,626,4],[699,9,626,5],[699,10,626,6],[699,17,626,13,"e"],[699,18,626,19],[699,20,626,21],[700,10,627,6],[700,14,627,10,"e"],[700,15,627,11],[700,16,627,12,"message"],[700,23,627,19],[700,28,627,24],[700,108,627,104],[700,110,627,106],[701,12,628,8],[702,12,629,8],[703,12,630,8],[704,12,631,8],[704,19,631,15,"bitcoinMessage"],[704,44,631,29],[704,45,631,30,"verify"],[704,51,631,36],[704,52,631,37,"message"],[704,59,631,44],[704,61,631,46,"address"],[704,68,631,53],[704,70,631,55,"signature"],[704,79,631,64],[704,80,631,65],[705,10,632,6],[706,10,633,6],[706,16,633,12,"e"],[706,17,633,13],[707,8,634,4],[708,6,635,2],[710,6,637,2],[711,0,638,0],[712,0,639,0],[713,0,640,0],[714,0,641,0],[715,4,637,2],[716,6,637,2,"key"],[716,9,637,2],[717,6,637,2,"value"],[717,11,637,2],[718,8,637,2],[718,12,637,2,"_wasEverUsed"],[718,24,637,2],[718,31,637,2,"_asyncToGenerator2"],[718,49,637,2],[718,50,637,2,"default"],[718,57,637,2],[718,59,642,2],[718,72,642,40],[719,10,643,4],[719,14,643,10,"address"],[719,21,643,17],[719,24,643,20],[719,28,643,24],[719,29,643,25,"getAddress"],[719,39,643,35],[719,40,643,36],[719,41,643,37],[720,10,644,4],[720,14,644,8],[720,15,644,9,"address"],[720,22,644,16],[720,24,644,18],[720,31,644,25,"Promise"],[720,38,644,32],[720,39,644,33,"resolve"],[720,46,644,40],[720,47,644,41],[720,52,644,46],[720,53,644,47],[721,10,645,4],[721,14,645,10,"txs"],[721,17,645,13],[721,26,645,22,"BlueElectrum"],[721,38,645,34],[721,39,645,35,"getTransactionsByAddress"],[721,63,645,59],[721,64,645,60,"address"],[721,71,645,67],[721,72,645,68],[722,10,646,4],[722,17,646,11,"txs"],[722,20,646,14],[722,21,646,15,"length"],[722,27,646,21],[722,30,646,24],[722,31,646,25],[723,8,647,2],[723,9,647,3],[724,8,647,3],[724,17,642,8,"wasEverUsed"],[724,28,642,19,"wasEverUsed"],[724,29,642,19],[725,10,642,19],[725,17,642,19,"_wasEverUsed"],[725,29,642,19],[725,30,642,19,"apply"],[725,35,642,19],[725,42,642,19,"arguments"],[725,51,642,19],[726,8,642,19],[727,8,642,19],[727,15,642,8,"wasEverUsed"],[727,26,642,19],[728,6,642,19],[729,4,642,19],[730,6,642,19,"key"],[730,9,642,19],[731,6,642,19,"value"],[731,11,642,19],[731,13,538,2],[731,22,538,9,"scriptPubKeyToAddress"],[731,43,538,30,"scriptPubKeyToAddress"],[731,44,538,31,"scriptPubKey"],[731,56,538,51],[731,58,538,69],[732,8,539,4],[732,12,539,8],[733,10,539,8],[733,14,539,8,"_bitcoin$payments$p2p"],[733,35,539,8],[734,10,540,6],[734,14,540,12,"scriptPubKey2"],[734,27,540,25],[734,30,540,28,"Buffer"],[734,36,540,34],[734,37,540,35,"from"],[734,41,540,39],[734,42,540,40,"scriptPubKey"],[734,54,540,52],[734,56,540,54],[734,61,540,59],[734,62,540,60],[735,10,541,6],[735,18,541,6,"_bitcoin$payments$p2p"],[735,39,541,6],[735,42,542,8,"bitcoin"],[735,49,542,15],[735,50,542,16,"payments"],[735,58,542,24],[735,59,542,25,"p2pkh"],[735,64,542,30],[735,65,542,31],[736,12,543,10,"output"],[736,18,543,16],[736,20,543,18,"scriptPubKey2"],[736,33,543,31],[737,12,544,10,"network"],[737,19,544,17],[737,21,544,19,"bitcoin"],[737,28,544,26],[737,29,544,27,"networks"],[737,37,544,35],[737,38,544,36,"bitcoin"],[738,10,545,8],[738,11,545,9],[738,12,545,10],[738,13,545,11,"address"],[738,20,545,18],[738,32,545,18,"_bitcoin$payments$p2p"],[738,53,545,18],[738,56,545,22],[738,61,545,27],[739,8,547,4],[739,9,547,5],[739,10,547,6],[739,17,547,13,"_"],[739,18,547,14],[739,20,547,16],[740,10,548,6],[740,17,548,13],[740,22,548,18],[741,8,549,4],[742,6,550,2],[743,4,550,3],[744,2,550,3],[744,4,21,34,"AbstractWallet"],[744,35,21,34],[744,36,21,34,"AbstractWallet"],[744,71,21,48],[745,2,21,13,"LegacyWallet"],[745,14,21,25],[745,15,22,18,"type"],[745,19,22,22],[745,22,22,25],[745,30,22,33],[746,2,21,13,"LegacyWallet"],[746,14,21,25],[746,15,23,18,"typeReadable"],[746,27,23,30],[746,30,23,33],[746,46,23,49],[747,0,23,49],[747,3]],"functionMap":{"names":["<global>","LegacyWallet","LegacyWallet#timeToRefreshBalance","LegacyWallet#timeToRefreshTransaction","LegacyWallet#generate","ECPair.makeRandom$argument_0.rng","LegacyWallet#generateFromEntropy","LegacyWallet#getAddress","LegacyWallet#getAllExternalAddresses","LegacyWallet#fetchBalance","LegacyWallet#fetchUtxo","_utxo.map$argument_0","LegacyWallet#getUtxo","ret.filter$argument_0","LegacyWallet#getDerivedUtxoFromOurTransaction","LegacyWallet#fetchTransactions","transactions.map$argument_0","tx.vin.map$argument_0","LegacyWallet#getTransactions","LegacyWallet#broadcastTx","LegacyWallet#coinselect","targets.some$argument_0","LegacyWallet#createTransaction","inputs.forEach$argument_0","outputs.map$argument_0","sanitizedOutputs.forEach$argument_0","LegacyWallet#getLatestTransactionTime","LegacyWallet#isAddressValid","LegacyWallet.scriptPubKeyToAddress","LegacyWallet#weOwnAddress","LegacyWallet#weOwnTransaction","LegacyWallet#allowSignVerifyMessage","LegacyWallet#addressIsChange","LegacyWallet#_getWIFbyAddress","LegacyWallet#signMessage","LegacyWallet#verifyMessage","LegacyWallet#wasEverUsed"],"mappings":"AAA;OCoB;ECiB;GDK;EEQ;GFO;EGE;2CCE,SD;GHC;EKE;GLK;EME;GNc;EOK;GPI;EQQ;GRW;ESO;uBCa,WD;GTc;EWe;uBCY,qED;GXG;EaE;GboD;EcS;wDC4C;wBCG;SDc;KDE;GdmC;EiBE;GjBO;EkBQ;GlBK;EmBE;qBCW,oBD;GnBwC;EqBa;mBCsB;KDa;yCEE;MFI;6BGE;KHO;GrBc;EyBE;GzBS;E0Ba;G1Be;E2BQ;G3BY;E4BE;G5BS;E6BE;G7BM;E8BE;G9BE;E+BS;G/BE;EgCQ;GhCE;EiCS;GjCS;EkCU;GlCa;EmCO;GnCK;CDC"}},"type":"js/module"}]}