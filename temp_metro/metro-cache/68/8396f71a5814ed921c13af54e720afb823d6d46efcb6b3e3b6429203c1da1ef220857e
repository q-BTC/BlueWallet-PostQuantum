{"dependencies":[{"name":"./utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":12,"index":12},"end":{"line":1,"column":30,"index":30}},{"start":{"line":1,"column":12,"index":12},"end":{"line":1,"column":30,"index":30}},{"start":{"line":1,"column":12,"index":12},"end":{"line":1,"column":30,"index":30}},{"start":{"line":1,"column":12,"index":12},"end":{"line":1,"column":30,"index":30}},{"start":{"line":1,"column":12,"index":12},"end":{"line":1,"column":30,"index":30}},{"start":{"line":1,"column":12,"index":12},"end":{"line":1,"column":30,"index":30}},{"start":{"line":1,"column":12,"index":12},"end":{"line":1,"column":30,"index":30}}],"key":"Arg6QRuIuy5D/jfcnxX1qJiHjX8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // only add inputs if they don't bust the target value (aka, exact match)\n  // worst-case: O(n)\n  module.exports = function blackjack(utxos, outputs, feeRate) {\n    if (!isFinite(_$$_REQUIRE(_dependencyMap[0], \"./utils\").positiveNumOrNaN(feeRate))) return {};\n    var bytesAccum = _$$_REQUIRE(_dependencyMap[0], \"./utils\").transactionBytes([], outputs);\n    var inAccum = 0;\n    var inputs = [];\n    var outAccum = _$$_REQUIRE(_dependencyMap[0], \"./utils\").sumOrNaN(outputs);\n    var threshold = _$$_REQUIRE(_dependencyMap[0], \"./utils\").dustThreshold({}, feeRate);\n    for (var i = 0; i < utxos.length; ++i) {\n      var input = utxos[i];\n      var inputBytes = _$$_REQUIRE(_dependencyMap[0], \"./utils\").inputBytes(input);\n      var fee = feeRate * (bytesAccum + inputBytes);\n      var inputValue = _$$_REQUIRE(_dependencyMap[0], \"./utils\").uintOrNaN(input.value);\n\n      // would it waste value?\n      if (inAccum + inputValue > outAccum + fee + threshold) continue;\n      bytesAccum += inputBytes;\n      inAccum += inputValue;\n      inputs.push(input);\n\n      // go again?\n      if (inAccum < outAccum + fee) continue;\n      return _$$_REQUIRE(_dependencyMap[0], \"./utils\").finalize(inputs, outputs, feeRate);\n    }\n    return {\n      fee: feeRate * bytesAccum\n    };\n  };\n});","lineCount":31,"map":[[2,2,3,0],[3,2,4,0],[4,2,5,0,"module"],[4,8,5,6],[4,9,5,7,"exports"],[4,16,5,14],[4,19,5,17],[4,28,5,26,"blackjack"],[4,37,5,35,"blackjack"],[4,38,5,37,"utxos"],[4,43,5,42],[4,45,5,44,"outputs"],[4,52,5,51],[4,54,5,53,"feeRate"],[4,61,5,60],[4,63,5,62],[5,4,6,2],[5,8,6,6],[5,9,6,7,"isFinite"],[5,17,6,15],[5,18,6,16,"_$$_REQUIRE"],[5,29,6,16],[5,30,6,16,"_dependencyMap"],[5,44,6,16],[5,60,6,22,"positiveNumOrNaN"],[5,76,6,38],[5,77,6,39,"feeRate"],[5,84,6,46],[5,85,6,47],[5,86,6,48],[5,88,6,50],[5,95,6,57],[5,96,6,58],[5,97,6,59],[6,4,8,2],[6,8,8,6,"bytesAccum"],[6,18,8,16],[6,21,8,19,"_$$_REQUIRE"],[6,32,8,19],[6,33,8,19,"_dependencyMap"],[6,47,8,19],[6,63,8,25,"transactionBytes"],[6,79,8,41],[6,80,8,42],[6,82,8,44],[6,84,8,46,"outputs"],[6,91,8,53],[6,92,8,54],[7,4,10,2],[7,8,10,6,"inAccum"],[7,15,10,13],[7,18,10,16],[7,19,10,17],[8,4,11,2],[8,8,11,6,"inputs"],[8,14,11,12],[8,17,11,15],[8,19,11,17],[9,4,12,2],[9,8,12,6,"outAccum"],[9,16,12,14],[9,19,12,17,"_$$_REQUIRE"],[9,30,12,17],[9,31,12,17,"_dependencyMap"],[9,45,12,17],[9,61,12,23,"sumOrNaN"],[9,69,12,31],[9,70,12,32,"outputs"],[9,77,12,39],[9,78,12,40],[10,4,13,2],[10,8,13,6,"threshold"],[10,17,13,15],[10,20,13,18,"_$$_REQUIRE"],[10,31,13,18],[10,32,13,18,"_dependencyMap"],[10,46,13,18],[10,62,13,24,"dustThreshold"],[10,75,13,37],[10,76,13,38],[10,77,13,39],[10,78,13,40],[10,80,13,42,"feeRate"],[10,87,13,49],[10,88,13,50],[11,4,15,2],[11,9,15,7],[11,13,15,11,"i"],[11,14,15,12],[11,17,15,15],[11,18,15,16],[11,20,15,18,"i"],[11,21,15,19],[11,24,15,22,"utxos"],[11,29,15,27],[11,30,15,28,"length"],[11,36,15,34],[11,38,15,36],[11,40,15,38,"i"],[11,41,15,39],[11,43,15,41],[12,6,16,4],[12,10,16,8,"input"],[12,15,16,13],[12,18,16,16,"utxos"],[12,23,16,21],[12,24,16,22,"i"],[12,25,16,23],[12,26,16,24],[13,6,17,4],[13,10,17,8,"inputBytes"],[13,20,17,18],[13,23,17,21,"_$$_REQUIRE"],[13,34,17,21],[13,35,17,21,"_dependencyMap"],[13,49,17,21],[13,65,17,27,"inputBytes"],[13,75,17,37],[13,76,17,38,"input"],[13,81,17,43],[13,82,17,44],[14,6,18,4],[14,10,18,8,"fee"],[14,13,18,11],[14,16,18,14,"feeRate"],[14,23,18,21],[14,27,18,25,"bytesAccum"],[14,37,18,35],[14,40,18,38,"inputBytes"],[14,50,18,48],[14,51,18,49],[15,6,19,4],[15,10,19,8,"inputValue"],[15,20,19,18],[15,23,19,21,"_$$_REQUIRE"],[15,34,19,21],[15,35,19,21,"_dependencyMap"],[15,49,19,21],[15,65,19,27,"uintOrNaN"],[15,74,19,36],[15,75,19,37,"input"],[15,80,19,42],[15,81,19,43,"value"],[15,86,19,48],[15,87,19,49],[17,6,21,4],[18,6,22,4],[18,10,22,9,"inAccum"],[18,17,22,16],[18,20,22,19,"inputValue"],[18,30,22,29],[18,33,22,34,"outAccum"],[18,41,22,42],[18,44,22,45,"fee"],[18,47,22,48],[18,50,22,51,"threshold"],[18,59,22,61],[18,61,22,63],[19,6,24,4,"bytesAccum"],[19,16,24,14],[19,20,24,18,"inputBytes"],[19,30,24,28],[20,6,25,4,"inAccum"],[20,13,25,11],[20,17,25,15,"inputValue"],[20,27,25,25],[21,6,26,4,"inputs"],[21,12,26,10],[21,13,26,11,"push"],[21,17,26,15],[21,18,26,16,"input"],[21,23,26,21],[21,24,26,22],[23,6,28,4],[24,6,29,4],[24,10,29,8,"inAccum"],[24,17,29,15],[24,20,29,18,"outAccum"],[24,28,29,26],[24,31,29,29,"fee"],[24,34,29,32],[24,36,29,34],[25,6,31,4],[25,13,31,11,"_$$_REQUIRE"],[25,24,31,11],[25,25,31,11,"_dependencyMap"],[25,39,31,11],[25,55,31,17,"finalize"],[25,63,31,25],[25,64,31,26,"inputs"],[25,70,31,32],[25,72,31,34,"outputs"],[25,79,31,41],[25,81,31,43,"feeRate"],[25,88,31,50],[25,89,31,51],[26,4,32,2],[27,4,34,2],[27,11,34,9],[28,6,34,11,"fee"],[28,9,34,14],[28,11,34,16,"feeRate"],[28,18,34,23],[28,21,34,26,"bytesAccum"],[29,4,34,37],[29,5,34,38],[30,2,35,0],[30,3,35,1],[31,0,35,1],[31,3]],"functionMap":{"names":["<global>","blackjack"],"mappings":"AAA;iBCI;CD8B"}},"type":"js/module"}]}