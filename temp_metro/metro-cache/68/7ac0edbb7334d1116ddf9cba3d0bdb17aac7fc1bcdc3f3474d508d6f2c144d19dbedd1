{"dependencies":[{"name":"./bigi","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":17,"index":117},"end":{"line":3,"column":34,"index":134}},{"start":{"line":3,"column":17,"index":117},"end":{"line":3,"column":34,"index":134}},{"start":{"line":3,"column":17,"index":117},"end":{"line":3,"column":34,"index":134}},{"start":{"line":3,"column":17,"index":117},"end":{"line":3,"column":34,"index":134}},{"start":{"line":3,"column":17,"index":117},"end":{"line":3,"column":34,"index":134}},{"start":{"line":3,"column":17,"index":117},"end":{"line":3,"column":34,"index":134}},{"start":{"line":3,"column":17,"index":117},"end":{"line":3,"column":34,"index":134}},{"start":{"line":3,"column":17,"index":117},"end":{"line":3,"column":34,"index":134}},{"start":{"line":3,"column":17,"index":117},"end":{"line":3,"column":34,"index":134}},{"start":{"line":3,"column":17,"index":117},"end":{"line":3,"column":34,"index":134}},{"start":{"line":3,"column":17,"index":117},"end":{"line":3,"column":34,"index":134}},{"start":{"line":3,"column":17,"index":117},"end":{"line":3,"column":34,"index":134}},{"start":{"line":3,"column":17,"index":117},"end":{"line":3,"column":34,"index":134}},{"start":{"line":3,"column":17,"index":117},"end":{"line":3,"column":34,"index":134}},{"start":{"line":3,"column":17,"index":117},"end":{"line":3,"column":34,"index":134}},{"start":{"line":3,"column":17,"index":117},"end":{"line":3,"column":34,"index":134}}],"key":"riOsLHxo8ObxAvwOkZwioOg2EtM="}},{"name":"assert","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":13,"index":82},"end":{"line":2,"column":30,"index":99}},{"start":{"line":2,"column":13,"index":82},"end":{"line":2,"column":30,"index":99}}],"key":"Umsy3wQQm6DbjafRIeuw3teOkUU="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // FIXME: Kind of a weird way to throw exceptions, consider removing\n\n  /**\n   * Turns a byte array into a big integer.\n   *\n   * This function will interpret a byte array as a big integer in big\n   * endian notation.\n   */\n  _$$_REQUIRE(_dependencyMap[0], \"./bigi\").fromByteArrayUnsigned = function (byteArray) {\n    // BigInteger expects a DER integer conformant byte array\n    if (byteArray[0] & 0x80) {\n      return new (_$$_REQUIRE(_dependencyMap[0], \"./bigi\"))([0].concat(byteArray));\n    }\n    return new (_$$_REQUIRE(_dependencyMap[0], \"./bigi\"))(byteArray);\n  };\n\n  /**\n   * Returns a byte array representation of the big integer.\n   *\n   * This returns the absolute of the contained value in big endian\n   * form. A value of zero results in an empty array.\n   */\n  _$$_REQUIRE(_dependencyMap[0], \"./bigi\").prototype.toByteArrayUnsigned = function () {\n    var byteArray = this.toByteArray();\n    return byteArray[0] === 0 ? byteArray.slice(1) : byteArray;\n  };\n  _$$_REQUIRE(_dependencyMap[0], \"./bigi\").fromDERInteger = function (byteArray) {\n    return new (_$$_REQUIRE(_dependencyMap[0], \"./bigi\"))(byteArray);\n  };\n\n  /*\n   * Converts BigInteger to a DER integer representation.\n   *\n   * The format for this value uses the most significant bit as a sign\n   * bit.  If the most significant bit is already set and the integer is\n   * positive, a 0x00 is prepended.\n   *\n   * Examples:\n   *\n   *      0 =>     0x00\n   *      1 =>     0x01\n   *     -1 =>     0xff\n   *    127 =>     0x7f\n   *   -127 =>     0x81\n   *    128 =>   0x0080\n   *   -128 =>     0x80\n   *    255 =>   0x00ff\n   *   -255 =>   0xff01\n   *  16300 =>   0x3fac\n   * -16300 =>   0xc054\n   *  62300 => 0x00f35c\n   * -62300 => 0xff0ca4\n  */\n  _$$_REQUIRE(_dependencyMap[0], \"./bigi\").prototype.toDERInteger = _$$_REQUIRE(_dependencyMap[0], \"./bigi\").prototype.toByteArray;\n  _$$_REQUIRE(_dependencyMap[0], \"./bigi\").fromBuffer = function (buffer) {\n    // BigInteger expects a DER integer conformant byte array\n    if (buffer[0] & 0x80) {\n      var byteArray = Array.prototype.slice.call(buffer);\n      return new (_$$_REQUIRE(_dependencyMap[0], \"./bigi\"))([0].concat(byteArray));\n    }\n    return new (_$$_REQUIRE(_dependencyMap[0], \"./bigi\"))(buffer);\n  };\n  _$$_REQUIRE(_dependencyMap[0], \"./bigi\").fromHex = function (hex) {\n    if (hex === '') return _$$_REQUIRE(_dependencyMap[0], \"./bigi\").ZERO;\n    _$$_REQUIRE(_dependencyMap[1], \"assert\").equal(hex, hex.match(/^[A-Fa-f0-9]+/), 'Invalid hex string');\n    _$$_REQUIRE(_dependencyMap[1], \"assert\").equal(hex.length % 2, 0, 'Incomplete hex');\n    return new (_$$_REQUIRE(_dependencyMap[0], \"./bigi\"))(hex, 16);\n  };\n  _$$_REQUIRE(_dependencyMap[0], \"./bigi\").prototype.toBuffer = function (size) {\n    var byteArray = this.toByteArrayUnsigned();\n    var zeros = [];\n    var padding = size - byteArray.length;\n    while (zeros.length < padding) zeros.push(0);\n    return new Buffer(zeros.concat(byteArray));\n  };\n  _$$_REQUIRE(_dependencyMap[0], \"./bigi\").prototype.toHex = function (size) {\n    return this.toBuffer(size).toString('hex');\n  };\n});","lineCount":80,"map":[[2,2,1,0],[4,2,5,0],[5,0,6,0],[6,0,7,0],[7,0,8,0],[8,0,9,0],[9,0,10,0],[10,2,11,0,"_$$_REQUIRE"],[10,13,11,0],[10,14,11,0,"_dependencyMap"],[10,28,11,0],[10,43,11,11,"fromByteArrayUnsigned"],[10,64,11,32],[10,67,11,35],[10,77,11,44,"byteArray"],[10,86,11,53],[10,88,11,55],[11,4,12,2],[12,4,13,2],[12,8,13,6,"byteArray"],[12,17,13,15],[12,18,13,16],[12,19,13,17],[12,20,13,18],[12,23,13,21],[12,27,13,25],[12,29,13,27],[13,6,14,4],[13,13,14,11],[13,18,14,11,"_$$_REQUIRE"],[13,29,14,11],[13,30,14,11,"_dependencyMap"],[13,44,14,11],[13,60,14,26],[13,61,14,27],[13,62,14,28],[13,63,14,29],[13,64,14,30,"concat"],[13,70,14,36],[13,71,14,37,"byteArray"],[13,80,14,46],[13,81,14,47],[13,82,14,48],[14,4,15,2],[15,4,17,2],[15,11,17,9],[15,16,17,9,"_$$_REQUIRE"],[15,27,17,9],[15,28,17,9,"_dependencyMap"],[15,42,17,9],[15,58,17,24,"byteArray"],[15,67,17,33],[15,68,17,34],[16,2,18,0],[16,3,18,1],[18,2,20,0],[19,0,21,0],[20,0,22,0],[21,0,23,0],[22,0,24,0],[23,0,25,0],[24,2,26,0,"_$$_REQUIRE"],[24,13,26,0],[24,14,26,0,"_dependencyMap"],[24,28,26,0],[24,43,26,11,"prototype"],[24,52,26,20],[24,53,26,21,"toByteArrayUnsigned"],[24,72,26,40],[24,75,26,43],[24,87,26,54],[25,4,27,2],[25,8,27,6,"byteArray"],[25,17,27,15],[25,20,27,18],[25,24,27,22],[25,25,27,23,"toByteArray"],[25,36,27,34],[25,37,27,35],[25,38,27,36],[26,4,28,2],[26,11,28,9,"byteArray"],[26,20,28,18],[26,21,28,19],[26,22,28,20],[26,23,28,21],[26,28,28,26],[26,29,28,27],[26,32,28,30,"byteArray"],[26,41,28,39],[26,42,28,40,"slice"],[26,47,28,45],[26,48,28,46],[26,49,28,47],[26,50,28,48],[26,53,28,51,"byteArray"],[26,62,28,60],[27,2,29,0],[27,3,29,1],[28,2,31,0,"_$$_REQUIRE"],[28,13,31,0],[28,14,31,0,"_dependencyMap"],[28,28,31,0],[28,43,31,11,"fromDERInteger"],[28,57,31,25],[28,60,31,28],[28,70,31,37,"byteArray"],[28,79,31,46],[28,81,31,48],[29,4,32,2],[29,11,32,9],[29,16,32,9,"_$$_REQUIRE"],[29,27,32,9],[29,28,32,9,"_dependencyMap"],[29,42,32,9],[29,58,32,24,"byteArray"],[29,67,32,33],[29,68,32,34],[30,2,33,0],[30,3,33,1],[32,2,35,0],[33,0,36,0],[34,0,37,0],[35,0,38,0],[36,0,39,0],[37,0,40,0],[38,0,41,0],[39,0,42,0],[40,0,43,0],[41,0,44,0],[42,0,45,0],[43,0,46,0],[44,0,47,0],[45,0,48,0],[46,0,49,0],[47,0,50,0],[48,0,51,0],[49,0,52,0],[50,0,53,0],[51,0,54,0],[52,0,55,0],[53,0,56,0],[54,0,57,0],[55,2,58,0,"_$$_REQUIRE"],[55,13,58,0],[55,14,58,0,"_dependencyMap"],[55,28,58,0],[55,43,58,11,"prototype"],[55,52,58,20],[55,53,58,21,"toDERInteger"],[55,65,58,33],[55,68,58,36,"_$$_REQUIRE"],[55,79,58,36],[55,80,58,36,"_dependencyMap"],[55,94,58,36],[55,109,58,47,"prototype"],[55,118,58,56],[55,119,58,57,"toByteArray"],[55,130,58,68],[56,2,60,0,"_$$_REQUIRE"],[56,13,60,0],[56,14,60,0,"_dependencyMap"],[56,28,60,0],[56,43,60,11,"fromBuffer"],[56,53,60,21],[56,56,60,24],[56,66,60,33,"buffer"],[56,72,60,39],[56,74,60,41],[57,4,61,2],[58,4,62,2],[58,8,62,6,"buffer"],[58,14,62,12],[58,15,62,13],[58,16,62,14],[58,17,62,15],[58,20,62,18],[58,24,62,22],[58,26,62,24],[59,6,63,4],[59,10,63,8,"byteArray"],[59,19,63,17],[59,22,63,20,"Array"],[59,27,63,25],[59,28,63,26,"prototype"],[59,37,63,35],[59,38,63,36,"slice"],[59,43,63,41],[59,44,63,42,"call"],[59,48,63,46],[59,49,63,47,"buffer"],[59,55,63,53],[59,56,63,54],[60,6,65,4],[60,13,65,11],[60,18,65,11,"_$$_REQUIRE"],[60,29,65,11],[60,30,65,11,"_dependencyMap"],[60,44,65,11],[60,60,65,26],[60,61,65,27],[60,62,65,28],[60,63,65,29],[60,64,65,30,"concat"],[60,70,65,36],[60,71,65,37,"byteArray"],[60,80,65,46],[60,81,65,47],[60,82,65,48],[61,4,66,2],[62,4,68,2],[62,11,68,9],[62,16,68,9,"_$$_REQUIRE"],[62,27,68,9],[62,28,68,9,"_dependencyMap"],[62,42,68,9],[62,58,68,24,"buffer"],[62,64,68,30],[62,65,68,31],[63,2,69,0],[63,3,69,1],[64,2,71,0,"_$$_REQUIRE"],[64,13,71,0],[64,14,71,0,"_dependencyMap"],[64,28,71,0],[64,43,71,11,"fromHex"],[64,50,71,18],[64,53,71,21],[64,63,71,30,"hex"],[64,66,71,33],[64,68,71,35],[65,4,72,2],[65,8,72,6,"hex"],[65,11,72,9],[65,16,72,14],[65,18,72,16],[65,20,72,18],[65,27,72,25,"_$$_REQUIRE"],[65,38,72,25],[65,39,72,25,"_dependencyMap"],[65,53,72,25],[65,68,72,36,"ZERO"],[65,72,72,40],[66,4,74,2,"_$$_REQUIRE"],[66,15,74,2],[66,16,74,2,"_dependencyMap"],[66,30,74,2],[66,45,74,9,"equal"],[66,50,74,14],[66,51,74,15,"hex"],[66,54,74,18],[66,56,74,20,"hex"],[66,59,74,23],[66,60,74,24,"match"],[66,65,74,29],[66,66,74,30],[66,81,74,45],[66,82,74,46],[66,84,74,48],[66,104,74,68],[66,105,74,69],[67,4,75,2,"_$$_REQUIRE"],[67,15,75,2],[67,16,75,2,"_dependencyMap"],[67,30,75,2],[67,45,75,9,"equal"],[67,50,75,14],[67,51,75,15,"hex"],[67,54,75,18],[67,55,75,19,"length"],[67,61,75,25],[67,64,75,28],[67,65,75,29],[67,67,75,31],[67,68,75,32],[67,70,75,34],[67,86,75,50],[67,87,75,51],[68,4,76,2],[68,11,76,9],[68,16,76,9,"_$$_REQUIRE"],[68,27,76,9],[68,28,76,9,"_dependencyMap"],[68,42,76,9],[68,58,76,24,"hex"],[68,61,76,27],[68,63,76,29],[68,65,76,31],[68,66,76,32],[69,2,77,0],[69,3,77,1],[70,2,79,0,"_$$_REQUIRE"],[70,13,79,0],[70,14,79,0,"_dependencyMap"],[70,28,79,0],[70,43,79,11,"prototype"],[70,52,79,20],[70,53,79,21,"toBuffer"],[70,61,79,29],[70,64,79,32],[70,74,79,41,"size"],[70,78,79,45],[70,80,79,47],[71,4,80,2],[71,8,80,6,"byteArray"],[71,17,80,15],[71,20,80,18],[71,24,80,22],[71,25,80,23,"toByteArrayUnsigned"],[71,44,80,42],[71,45,80,43],[71,46,80,44],[72,4,81,2],[72,8,81,6,"zeros"],[72,13,81,11],[72,16,81,14],[72,18,81,16],[73,4,83,2],[73,8,83,6,"padding"],[73,15,83,13],[73,18,83,16,"size"],[73,22,83,20],[73,25,83,23,"byteArray"],[73,34,83,32],[73,35,83,33,"length"],[73,41,83,39],[74,4,84,2],[74,11,84,9,"zeros"],[74,16,84,14],[74,17,84,15,"length"],[74,23,84,21],[74,26,84,24,"padding"],[74,33,84,31],[74,35,84,33,"zeros"],[74,40,84,38],[74,41,84,39,"push"],[74,45,84,43],[74,46,84,44],[74,47,84,45],[74,48,84,46],[75,4,86,2],[75,11,86,9],[75,15,86,13,"Buffer"],[75,21,86,19],[75,22,86,20,"zeros"],[75,27,86,25],[75,28,86,26,"concat"],[75,34,86,32],[75,35,86,33,"byteArray"],[75,44,86,42],[75,45,86,43],[75,46,86,44],[76,2,87,0],[76,3,87,1],[77,2,89,0,"_$$_REQUIRE"],[77,13,89,0],[77,14,89,0,"_dependencyMap"],[77,28,89,0],[77,43,89,11,"prototype"],[77,52,89,20],[77,53,89,21,"toHex"],[77,58,89,26],[77,61,89,29],[77,71,89,38,"size"],[77,75,89,42],[77,77,89,44],[78,4,90,2],[78,11,90,9],[78,15,90,13],[78,16,90,14,"toBuffer"],[78,24,90,22],[78,25,90,23,"size"],[78,29,90,27],[78,30,90,28],[78,31,90,29,"toString"],[78,39,90,37],[78,40,90,38],[78,45,90,43],[78,46,90,44],[79,2,91,0],[79,3,91,1],[80,0,91,1],[80,3]],"functionMap":{"names":["<global>","BigInteger.fromByteArrayUnsigned","BigInteger.prototype.toByteArrayUnsigned","BigInteger.fromDERInteger","BigInteger.fromBuffer","BigInteger.fromHex","BigInteger.prototype.toBuffer","BigInteger.prototype.toHex"],"mappings":"AAA;mCCU;CDO;2CEQ;CFG;4BGE;CHE;wBI2B;CJS;qBKE;CLM;gCME;CNQ;6BOE;CPE"}},"type":"js/module"}]}