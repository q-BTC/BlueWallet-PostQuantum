{"dependencies":[{"name":"../utils/createCustomError","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":24,"index":24},"end":{"line":1,"column":61,"index":61}}],"key":"Uh/YY9D5uakJGlD6OhSCWr99jMw="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var MAX_LINE_LENGTH = 100;\n  var OFFSET_CORRECTION = 60;\n  var TAB_REPLACEMENT = '    ';\n  function sourceFragment(error, extraLines) {\n    function processLines(start, end) {\n      return lines.slice(start, end).map(function (line, idx) {\n        var num = String(start + idx + 1);\n        while (num.length < maxNumLength) {\n          num = ' ' + num;\n        }\n        return num + ' |' + line;\n      }).join('\\n');\n    }\n    var lines = error.source.split(/\\r\\n?|\\n|\\f/);\n    var line = error.line;\n    var column = error.column;\n    var startLine = Math.max(1, line - extraLines) - 1;\n    var endLine = Math.min(line + extraLines, lines.length + 1);\n    var maxNumLength = Math.max(4, String(endLine).length) + 1;\n    var cutLeft = 0;\n\n    // column correction according to replaced tab before column\n    column += (TAB_REPLACEMENT.length - 1) * (lines[line - 1].substr(0, column - 1).match(/\\t/g) || []).length;\n    if (column > MAX_LINE_LENGTH) {\n      cutLeft = column - OFFSET_CORRECTION + 3;\n      column = OFFSET_CORRECTION - 2;\n    }\n    for (var i = startLine; i <= endLine; i++) {\n      if (i >= 0 && i < lines.length) {\n        lines[i] = lines[i].replace(/\\t/g, TAB_REPLACEMENT);\n        lines[i] = (cutLeft > 0 && lines[i].length > cutLeft ? \"\\u2026\" : '') + lines[i].substr(cutLeft, MAX_LINE_LENGTH - 2) + (lines[i].length > cutLeft + MAX_LINE_LENGTH - 1 ? \"\\u2026\" : '');\n      }\n    }\n    return [processLines(startLine, line), new Array(column + maxNumLength + 2).join('-') + '^', processLines(line, endLine)].filter(Boolean).join('\\n');\n  }\n  var SyntaxError = function SyntaxError(message, source, offset, line, column) {\n    var error = _$$_REQUIRE(_dependencyMap[0], \"../utils/createCustomError\")('SyntaxError', message);\n    error.source = source;\n    error.offset = offset;\n    error.line = line;\n    error.column = column;\n    error.sourceFragment = function (extraLines) {\n      return sourceFragment(error, isNaN(extraLines) ? 0 : extraLines);\n    };\n    Object.defineProperty(error, 'formattedMessage', {\n      get: function get() {\n        return 'Parse error: ' + error.message + '\\n' + sourceFragment(error, 2);\n      }\n    });\n\n    // for backward capability\n    error.parseError = {\n      offset: offset,\n      line: line,\n      column: column\n    };\n    return error;\n  };\n  module.exports = SyntaxError;\n});","lineCount":61,"map":[[2,2,2,0],[2,6,2,4,"MAX_LINE_LENGTH"],[2,21,2,19],[2,24,2,22],[2,27,2,25],[3,2,3,0],[3,6,3,4,"OFFSET_CORRECTION"],[3,23,3,21],[3,26,3,24],[3,28,3,26],[4,2,4,0],[4,6,4,4,"TAB_REPLACEMENT"],[4,21,4,19],[4,24,4,22],[4,30,4,28],[5,2,6,0],[5,11,6,9,"sourceFragment"],[5,25,6,23,"sourceFragment"],[5,26,6,24,"error"],[5,31,6,29],[5,33,6,31,"extraLines"],[5,43,6,41],[5,45,6,43],[6,4,7,4],[6,13,7,13,"processLines"],[6,25,7,25,"processLines"],[6,26,7,26,"start"],[6,31,7,31],[6,33,7,33,"end"],[6,36,7,36],[6,38,7,38],[7,6,8,8],[7,13,8,15,"lines"],[7,18,8,20],[7,19,8,21,"slice"],[7,24,8,26],[7,25,8,27,"start"],[7,30,8,32],[7,32,8,34,"end"],[7,35,8,37],[7,36,8,38],[7,37,8,39,"map"],[7,40,8,42],[7,41,8,43],[7,51,8,52,"line"],[7,55,8,56],[7,57,8,58,"idx"],[7,60,8,61],[7,62,8,63],[8,8,9,12],[8,12,9,16,"num"],[8,15,9,19],[8,18,9,22,"String"],[8,24,9,28],[8,25,9,29,"start"],[8,30,9,34],[8,33,9,37,"idx"],[8,36,9,40],[8,39,9,43],[8,40,9,44],[8,41,9,45],[9,8,11,12],[9,15,11,19,"num"],[9,18,11,22],[9,19,11,23,"length"],[9,25,11,29],[9,28,11,32,"maxNumLength"],[9,40,11,44],[9,42,11,46],[10,10,12,16,"num"],[10,13,12,19],[10,16,12,22],[10,19,12,25],[10,22,12,28,"num"],[10,25,12,31],[11,8,13,12],[12,8,15,12],[12,15,15,19,"num"],[12,18,15,22],[12,21,15,25],[12,25,15,29],[12,28,15,32,"line"],[12,32,15,36],[13,6,16,8],[13,7,16,9],[13,8,16,10],[13,9,16,11,"join"],[13,13,16,15],[13,14,16,16],[13,18,16,20],[13,19,16,21],[14,4,17,4],[15,4,19,4],[15,8,19,8,"lines"],[15,13,19,13],[15,16,19,16,"error"],[15,21,19,21],[15,22,19,22,"source"],[15,28,19,28],[15,29,19,29,"split"],[15,34,19,34],[15,35,19,35],[15,48,19,48],[15,49,19,49],[16,4,20,4],[16,8,20,8,"line"],[16,12,20,12],[16,15,20,15,"error"],[16,20,20,20],[16,21,20,21,"line"],[16,25,20,25],[17,4,21,4],[17,8,21,8,"column"],[17,14,21,14],[17,17,21,17,"error"],[17,22,21,22],[17,23,21,23,"column"],[17,29,21,29],[18,4,22,4],[18,8,22,8,"startLine"],[18,17,22,17],[18,20,22,20,"Math"],[18,24,22,24],[18,25,22,25,"max"],[18,28,22,28],[18,29,22,29],[18,30,22,30],[18,32,22,32,"line"],[18,36,22,36],[18,39,22,39,"extraLines"],[18,49,22,49],[18,50,22,50],[18,53,22,53],[18,54,22,54],[19,4,23,4],[19,8,23,8,"endLine"],[19,15,23,15],[19,18,23,18,"Math"],[19,22,23,22],[19,23,23,23,"min"],[19,26,23,26],[19,27,23,27,"line"],[19,31,23,31],[19,34,23,34,"extraLines"],[19,44,23,44],[19,46,23,46,"lines"],[19,51,23,51],[19,52,23,52,"length"],[19,58,23,58],[19,61,23,61],[19,62,23,62],[19,63,23,63],[20,4,24,4],[20,8,24,8,"maxNumLength"],[20,20,24,20],[20,23,24,23,"Math"],[20,27,24,27],[20,28,24,28,"max"],[20,31,24,31],[20,32,24,32],[20,33,24,33],[20,35,24,35,"String"],[20,41,24,41],[20,42,24,42,"endLine"],[20,49,24,49],[20,50,24,50],[20,51,24,51,"length"],[20,57,24,57],[20,58,24,58],[20,61,24,61],[20,62,24,62],[21,4,25,4],[21,8,25,8,"cutLeft"],[21,15,25,15],[21,18,25,18],[21,19,25,19],[23,4,27,4],[24,4,28,4,"column"],[24,10,28,10],[24,14,28,14],[24,15,28,15,"TAB_REPLACEMENT"],[24,30,28,30],[24,31,28,31,"length"],[24,37,28,37],[24,40,28,40],[24,41,28,41],[24,45,28,45],[24,46,28,46,"lines"],[24,51,28,51],[24,52,28,52,"line"],[24,56,28,56],[24,59,28,59],[24,60,28,60],[24,61,28,61],[24,62,28,62,"substr"],[24,68,28,68],[24,69,28,69],[24,70,28,70],[24,72,28,72,"column"],[24,78,28,78],[24,81,28,81],[24,82,28,82],[24,83,28,83],[24,84,28,84,"match"],[24,89,28,89],[24,90,28,90],[24,95,28,95],[24,96,28,96],[24,100,28,100],[24,102,28,102],[24,104,28,104,"length"],[24,110,28,110],[25,4,30,4],[25,8,30,8,"column"],[25,14,30,14],[25,17,30,17,"MAX_LINE_LENGTH"],[25,32,30,32],[25,34,30,34],[26,6,31,8,"cutLeft"],[26,13,31,15],[26,16,31,18,"column"],[26,22,31,24],[26,25,31,27,"OFFSET_CORRECTION"],[26,42,31,44],[26,45,31,47],[26,46,31,48],[27,6,32,8,"column"],[27,12,32,14],[27,15,32,17,"OFFSET_CORRECTION"],[27,32,32,34],[27,35,32,37],[27,36,32,38],[28,4,33,4],[29,4,35,4],[29,9,35,9],[29,13,35,13,"i"],[29,14,35,14],[29,17,35,17,"startLine"],[29,26,35,26],[29,28,35,28,"i"],[29,29,35,29],[29,33,35,33,"endLine"],[29,40,35,40],[29,42,35,42,"i"],[29,43,35,43],[29,45,35,45],[29,47,35,47],[30,6,36,8],[30,10,36,12,"i"],[30,11,36,13],[30,15,36,17],[30,16,36,18],[30,20,36,22,"i"],[30,21,36,23],[30,24,36,26,"lines"],[30,29,36,31],[30,30,36,32,"length"],[30,36,36,38],[30,38,36,40],[31,8,37,12,"lines"],[31,13,37,17],[31,14,37,18,"i"],[31,15,37,19],[31,16,37,20],[31,19,37,23,"lines"],[31,24,37,28],[31,25,37,29,"i"],[31,26,37,30],[31,27,37,31],[31,28,37,32,"replace"],[31,35,37,39],[31,36,37,40],[31,41,37,45],[31,43,37,47,"TAB_REPLACEMENT"],[31,58,37,62],[31,59,37,63],[32,8,38,12,"lines"],[32,13,38,17],[32,14,38,18,"i"],[32,15,38,19],[32,16,38,20],[32,19,39,16],[32,20,39,17,"cutLeft"],[32,27,39,24],[32,30,39,27],[32,31,39,28],[32,35,39,32,"lines"],[32,40,39,37],[32,41,39,38,"i"],[32,42,39,39],[32,43,39,40],[32,44,39,41,"length"],[32,50,39,47],[32,53,39,50,"cutLeft"],[32,60,39,57],[32,63,39,60],[32,71,39,68],[32,74,39,71],[32,76,39,73],[32,80,40,16,"lines"],[32,85,40,21],[32,86,40,22,"i"],[32,87,40,23],[32,88,40,24],[32,89,40,25,"substr"],[32,95,40,31],[32,96,40,32,"cutLeft"],[32,103,40,39],[32,105,40,41,"MAX_LINE_LENGTH"],[32,120,40,56],[32,123,40,59],[32,124,40,60],[32,125,40,61],[32,129,41,17,"lines"],[32,134,41,22],[32,135,41,23,"i"],[32,136,41,24],[32,137,41,25],[32,138,41,26,"length"],[32,144,41,32],[32,147,41,35,"cutLeft"],[32,154,41,42],[32,157,41,45,"MAX_LINE_LENGTH"],[32,172,41,60],[32,175,41,63],[32,176,41,64],[32,179,41,67],[32,187,41,75],[32,190,41,78],[32,192,41,80],[32,193,41,81],[33,6,42,8],[34,4,43,4],[35,4,45,4],[35,11,45,11],[35,12,46,8,"processLines"],[35,24,46,20],[35,25,46,21,"startLine"],[35,34,46,30],[35,36,46,32,"line"],[35,40,46,36],[35,41,46,37],[35,43,47,8],[35,47,47,12,"Array"],[35,52,47,17],[35,53,47,18,"column"],[35,59,47,24],[35,62,47,27,"maxNumLength"],[35,74,47,39],[35,77,47,42],[35,78,47,43],[35,79,47,44],[35,80,47,45,"join"],[35,84,47,49],[35,85,47,50],[35,88,47,53],[35,89,47,54],[35,92,47,57],[35,95,47,60],[35,97,48,8,"processLines"],[35,109,48,20],[35,110,48,21,"line"],[35,114,48,25],[35,116,48,27,"endLine"],[35,123,48,34],[35,124,48,35],[35,125,49,5],[35,126,49,6,"filter"],[35,132,49,12],[35,133,49,13,"Boolean"],[35,140,49,20],[35,141,49,21],[35,142,49,22,"join"],[35,146,49,26],[35,147,49,27],[35,151,49,31],[35,152,49,32],[36,2,50,0],[37,2,52,0],[37,6,52,4,"SyntaxError"],[37,17,52,15],[37,20,52,18],[37,29,52,4,"SyntaxError"],[37,40,52,15,"SyntaxError"],[37,41,52,27,"message"],[37,48,52,34],[37,50,52,36,"source"],[37,56,52,42],[37,58,52,44,"offset"],[37,64,52,50],[37,66,52,52,"line"],[37,70,52,56],[37,72,52,58,"column"],[37,78,52,64],[37,80,52,66],[38,4,53,4],[38,8,53,8,"error"],[38,13,53,13],[38,16,53,16,"_$$_REQUIRE"],[38,27,53,16],[38,28,53,16,"_dependencyMap"],[38,42,53,16],[38,77,53,34],[38,90,53,47],[38,92,53,49,"message"],[38,99,53,56],[38,100,53,57],[39,4,55,4,"error"],[39,9,55,9],[39,10,55,10,"source"],[39,16,55,16],[39,19,55,19,"source"],[39,25,55,25],[40,4,56,4,"error"],[40,9,56,9],[40,10,56,10,"offset"],[40,16,56,16],[40,19,56,19,"offset"],[40,25,56,25],[41,4,57,4,"error"],[41,9,57,9],[41,10,57,10,"line"],[41,14,57,14],[41,17,57,17,"line"],[41,21,57,21],[42,4,58,4,"error"],[42,9,58,9],[42,10,58,10,"column"],[42,16,58,16],[42,19,58,19,"column"],[42,25,58,25],[43,4,60,4,"error"],[43,9,60,9],[43,10,60,10,"sourceFragment"],[43,24,60,24],[43,27,60,27],[43,37,60,36,"extraLines"],[43,47,60,46],[43,49,60,48],[44,6,61,8],[44,13,61,15,"sourceFragment"],[44,27,61,29],[44,28,61,30,"error"],[44,33,61,35],[44,35,61,37,"isNaN"],[44,40,61,42],[44,41,61,43,"extraLines"],[44,51,61,53],[44,52,61,54],[44,55,61,57],[44,56,61,58],[44,59,61,61,"extraLines"],[44,69,61,71],[44,70,61,72],[45,4,62,4],[45,5,62,5],[46,4,63,4,"Object"],[46,10,63,10],[46,11,63,11,"defineProperty"],[46,25,63,25],[46,26,63,26,"error"],[46,31,63,31],[46,33,63,33],[46,51,63,51],[46,53,63,53],[47,6,64,8,"get"],[47,9,64,11],[47,11,64,13],[47,20,64,8,"get"],[47,23,64,11,"get"],[47,24,64,11],[47,26,64,24],[48,8,65,12],[48,15,66,16],[48,30,66,31],[48,33,66,34,"error"],[48,38,66,39],[48,39,66,40,"message"],[48,46,66,47],[48,49,66,50],[48,53,66,54],[48,56,67,16,"sourceFragment"],[48,70,67,30],[48,71,67,31,"error"],[48,76,67,36],[48,78,67,38],[48,79,67,39],[48,80,67,40],[49,6,69,8],[50,4,70,4],[50,5,70,5],[50,6,70,6],[52,4,72,4],[53,4,73,4,"error"],[53,9,73,9],[53,10,73,10,"parseError"],[53,20,73,20],[53,23,73,23],[54,6,74,8,"offset"],[54,12,74,14],[54,14,74,16,"offset"],[54,20,74,22],[55,6,75,8,"line"],[55,10,75,12],[55,12,75,14,"line"],[55,16,75,18],[56,6,76,8,"column"],[56,12,76,14],[56,14,76,16,"column"],[57,4,77,4],[57,5,77,5],[58,4,79,4],[58,11,79,11,"error"],[58,16,79,16],[59,2,80,0],[59,3,80,1],[60,2,82,0,"module"],[60,8,82,6],[60,9,82,7,"exports"],[60,16,82,14],[60,19,82,17,"SyntaxError"],[60,30,82,28],[61,0,82,29],[61,3]],"functionMap":{"names":["<global>","sourceFragment","processLines","lines.slice.map$argument_0","SyntaxError","error.sourceFragment","Object.defineProperty$argument_2.get"],"mappings":"AAA;ACK;ICC;2CCC;SDQ;KDC;CDiC;kBIE;2BCQ;KDE;aEE;SFK;CJW"}},"type":"js/module"}]}