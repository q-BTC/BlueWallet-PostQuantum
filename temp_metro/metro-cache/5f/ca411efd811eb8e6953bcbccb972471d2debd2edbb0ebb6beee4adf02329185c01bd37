{"dependencies":[{"name":"../assert","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}},{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}},{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}},{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}},{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}},{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}},{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}},{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}},{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}},{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}},{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}},{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}},{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}},{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}},{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}},{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}},{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}},{"start":{"line":21,"column":17,"index":939},"end":{"line":21,"column":37,"index":959}}],"key":"EqNBW+769mc/j/kMnDe9BBrECKc="}},{"name":"../indirect","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":23,"column":19,"index":1019},"end":{"line":23,"column":41,"index":1041}}],"key":"YcIxxttZukaXUzCreGQftriG5Ys="}},{"name":"../errors","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":22,"column":17,"index":978},"end":{"line":22,"column":37,"index":998}},{"start":{"line":22,"column":17,"index":978},"end":{"line":22,"column":37,"index":998}},{"start":{"line":22,"column":17,"index":978},"end":{"line":22,"column":37,"index":998}}],"key":"iI2wDtrGlKjO3ksFzW75fbTNGvA="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  ////////////////////////////////////////////////////////////////////////////\n  //\n  // Copyright 2023 Realm Inc.\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  // http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n  //\n  ////////////////////////////////////////////////////////////////////////////\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.validatePropertySchema = exports.validateObjectSchema = exports.validateRealmSchema = void 0;\n  // Need to use `CanonicalObjectSchema` rather than `ObjectSchema` due to some\n  // integration tests using `openRealmHook()`. That function sets `this.realm`\n  // to the opened realm whose schema is a `CanonicalObjectSchema[]`. Consequently,\n  // the key `\"ctor\"` (which doesn't exist on `ObjectSchema`) also needs to be allowed.\n  var OBJECT_SCHEMA_KEYS = new Set([\"name\", \"primaryKey\", \"embedded\", \"asymmetric\", \"properties\",\n  // Not part of `ObjectSchema`\n  \"ctor\"]);\n  // Need to use `CanonicalPropertySchema` rather than `PropertySchema`\n  // due to the same reasons as above.\n  var PROPERTY_SCHEMA_KEYS = new Set([\"type\", \"objectType\", \"presentation\", \"property\", \"default\", \"optional\", \"indexed\", \"mapTo\",\n  // Not part of `PropertySchema`\n  \"name\"]);\n  /**\n   * Validate the data types of the fields of a user-provided realm schema.\n   */\n  function validateRealmSchema(realmSchema) {\n    _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert.array(realmSchema, \"realm schema\");\n    for (var objectSchema of realmSchema) {\n      validateObjectSchema(objectSchema);\n    }\n    // TODO: Assert that backlinks point to object schemas that are actually declared\n  }\n  exports.validateRealmSchema = validateRealmSchema;\n  /**\n   * Validate the data types of the fields of a user-provided object schema.\n   */\n  function validateObjectSchema(objectSchema) {\n    try {\n      // Schema is passed via a class based model (RealmObjectConstructor)\n      if (typeof objectSchema === \"function\") {\n        var clazz = objectSchema;\n        // We assert this later, but want a custom error message\n        if (!(objectSchema.prototype instanceof _$$_REQUIRE(_dependencyMap[1], \"../indirect\").indirect.Object)) {\n          var schemaName = clazz.schema && clazz.schema.name;\n          if (typeof schemaName === \"string\" && schemaName !== objectSchema.name) {\n            throw new TypeError(`Class '${objectSchema.name}' (declaring '${schemaName}' schema) must extend Realm.Object`);\n          } else {\n            throw new TypeError(`Class '${objectSchema.name}' must extend Realm.Object`);\n          }\n        }\n        _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert.object(clazz.schema, \"schema static\");\n        validateObjectSchema(clazz.schema);\n      }\n      // Schema is passed as an object (ObjectSchema)\n      else {\n        _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert.object(objectSchema, \"object schema\", {\n          allowArrays: false\n        });\n        var objectName = objectSchema.name,\n          properties = objectSchema.properties,\n          primaryKey = objectSchema.primaryKey,\n          asymmetric = objectSchema.asymmetric,\n          embedded = objectSchema.embedded;\n        _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert.string(objectName, \"'name' on object schema\");\n        _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert.object(properties, `'properties' on '${objectName}'`, {\n          allowArrays: false\n        });\n        if (primaryKey !== undefined) {\n          _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert.string(primaryKey, `'primaryKey' on '${objectName}'`);\n        }\n        if (embedded !== undefined) {\n          _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert.boolean(embedded, `'embedded' on '${objectName}'`);\n        }\n        if (asymmetric !== undefined) {\n          _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert.boolean(asymmetric, `'asymmetric' on '${objectName}'`);\n        }\n        var invalidKeysUsed = filterInvalidKeys(objectSchema, OBJECT_SCHEMA_KEYS);\n        (0, _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert)(!invalidKeysUsed.length, `Unexpected field(s) found on the schema for object '${objectName}': '${invalidKeysUsed.join(\"', '\")}'.`);\n        for (var propertyName in properties) {\n          var propertySchema = properties[propertyName];\n          var isUsingShorthand = typeof propertySchema === \"string\";\n          if (!isUsingShorthand) {\n            validatePropertySchema(objectName, propertyName, propertySchema);\n          }\n        }\n      }\n    } catch (err) {\n      // Rethrow as SchemaParseError(s) rather than a mix of Error, TypeError,\n      // TypeAssertionError, or AssertionError.\n      if (err instanceof _$$_REQUIRE(_dependencyMap[2], \"../errors\").PropertySchemaParseError) {\n        throw err;\n      } else if (err instanceof Error) {\n        // This first line is a workaround to satisfy TS. Runtime check needs to be\n        // `const objectName = objectSchema?.name || \"\"` where either `objectSchema`\n        // or `objectSchema.name` can be undefined or an incorrect type.\n        var _objectName = (objectSchema == null ? void 0 : objectSchema.name) || \"\";\n        throw new (_$$_REQUIRE(_dependencyMap[2], \"../errors\").ObjectSchemaParseError)(err.message, {\n          objectName: _objectName\n        });\n      }\n      throw err;\n    }\n  }\n  exports.validateObjectSchema = validateObjectSchema;\n  /**\n   * Validate the data types of a user-provided property schema that ought to use the\n   * relaxed object notation.\n   */\n  function validatePropertySchema(objectName, propertyName, propertySchema) {\n    try {\n      _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert.object(propertySchema, `'${propertyName}' on '${objectName}'`, {\n        allowArrays: false\n      });\n      var type = propertySchema.type,\n        objectType = propertySchema.objectType,\n        presentation = propertySchema.presentation,\n        optional = propertySchema.optional,\n        property = propertySchema.property,\n        indexed = propertySchema.indexed,\n        mapTo = propertySchema.mapTo;\n      _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert.string(type, `'${propertyName}.type' on '${objectName}'`);\n      if (objectType !== undefined) {\n        _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert.string(objectType, `'${propertyName}.objectType' on '${objectName}'`);\n      }\n      if (presentation !== undefined) {\n        _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert.string(presentation, `'${propertyName}.presentation' on '${objectName}'`);\n      }\n      if (optional !== undefined) {\n        _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert.boolean(optional, `'${propertyName}.optional' on '${objectName}'`);\n      }\n      if (property !== undefined) {\n        _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert.string(property, `'${propertyName}.property' on '${objectName}'`);\n      }\n      if (indexed !== undefined) {\n        (0, _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert)(typeof indexed === \"boolean\" || indexed === \"full-text\", `Expected '${propertyName}.indexed' on '${objectName}' to be a boolean or 'full-text'.`);\n      }\n      if (mapTo !== undefined) {\n        _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert.string(mapTo, `'${propertyName}.mapTo' on '${objectName}'`);\n      }\n      var invalidKeysUsed = filterInvalidKeys(propertySchema, PROPERTY_SCHEMA_KEYS);\n      (0, _$$_REQUIRE(_dependencyMap[0], \"../assert\").assert)(!invalidKeysUsed.length, `Unexpected field(s) found on the schema for property '${propertyName}' on '${objectName}': '${invalidKeysUsed.join(\"', '\")}'.`);\n    } catch (err) {\n      if (err instanceof Error) {\n        throw new (_$$_REQUIRE(_dependencyMap[2], \"../errors\").PropertySchemaParseError)(err.message, {\n          objectName: objectName,\n          propertyName: propertyName\n        });\n      }\n      throw err;\n    }\n  }\n  exports.validatePropertySchema = validatePropertySchema;\n  /**\n   * Get the keys of an object that are not part of the provided valid keys.\n   */\n  function filterInvalidKeys(object, validKeys) {\n    return Object.keys(object).filter(function (key) {\n      return !validKeys.has(key);\n    });\n  }\n});","lineCount":175,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,2,3,0],[6,2,4,0],[7,2,5,0],[8,2,6,0],[9,2,7,0],[10,2,8,0],[11,2,9,0],[12,2,10,0],[13,2,11,0],[14,2,12,0],[15,2,13,0],[16,2,14,0],[17,2,15,0],[18,2,16,0],[19,2,17,0],[20,2,18,0],[21,2,19,0,"Object"],[21,8,19,6],[21,9,19,7,"defineProperty"],[21,23,19,21],[21,24,19,22,"exports"],[21,31,19,29],[21,33,19,31],[21,45,19,43],[21,47,19,45],[22,4,19,47,"value"],[22,9,19,52],[22,11,19,54],[23,2,19,59],[23,3,19,60],[23,4,19,61],[24,2,20,0,"exports"],[24,9,20,7],[24,10,20,8,"validatePropertySchema"],[24,32,20,30],[24,35,20,33,"exports"],[24,42,20,40],[24,43,20,41,"validateObjectSchema"],[24,63,20,61],[24,66,20,64,"exports"],[24,73,20,71],[24,74,20,72,"validateRealmSchema"],[24,93,20,91],[24,96,20,94],[24,101,20,99],[24,102,20,100],[25,2,24,0],[26,2,25,0],[27,2,26,0],[28,2,27,0],[29,2,28,0],[29,6,28,6,"OBJECT_SCHEMA_KEYS"],[29,24,28,24],[29,27,28,27],[29,31,28,31,"Set"],[29,34,28,34],[29,35,28,35],[29,36,29,4],[29,42,29,10],[29,44,30,4],[29,56,30,16],[29,58,31,4],[29,68,31,14],[29,70,32,4],[29,82,32,16],[29,84,33,4],[29,96,33,16],[30,2,34,4],[31,2,35,4],[31,8,35,10],[31,9,36,1],[31,10,36,2],[32,2,37,0],[33,2,38,0],[34,2,39,0],[34,6,39,6,"PROPERTY_SCHEMA_KEYS"],[34,26,39,26],[34,29,39,29],[34,33,39,33,"Set"],[34,36,39,36],[34,37,39,37],[34,38,40,4],[34,44,40,10],[34,46,41,4],[34,58,41,16],[34,60,42,4],[34,74,42,18],[34,76,43,4],[34,86,43,14],[34,88,44,4],[34,97,44,13],[34,99,45,4],[34,109,45,14],[34,111,46,4],[34,120,46,13],[34,122,47,4],[34,129,47,11],[35,2,48,4],[36,2,49,4],[36,8,49,10],[36,9,50,1],[36,10,50,2],[37,2,51,0],[38,0,52,0],[39,0,53,0],[40,2,54,0],[40,11,54,9,"validateRealmSchema"],[40,30,54,28,"validateRealmSchema"],[40,31,54,29,"realmSchema"],[40,42,54,40],[40,44,54,42],[41,4,55,4,"_$$_REQUIRE"],[41,15,55,4],[41,16,55,4,"_dependencyMap"],[41,30,55,4],[41,48,55,13,"assert"],[41,54,55,19],[41,55,55,20,"array"],[41,60,55,25],[41,61,55,26,"realmSchema"],[41,72,55,37],[41,74,55,39],[41,88,55,53],[41,89,55,54],[42,4,56,4],[42,9,56,9],[42,13,56,15,"objectSchema"],[42,25,56,27],[42,29,56,31,"realmSchema"],[42,40,56,42],[42,42,56,44],[43,6,57,8,"validateObjectSchema"],[43,26,57,28],[43,27,57,29,"objectSchema"],[43,39,57,41],[43,40,57,42],[44,4,58,4],[45,4,59,4],[46,2,60,0],[47,2,61,0,"exports"],[47,9,61,7],[47,10,61,8,"validateRealmSchema"],[47,29,61,27],[47,32,61,30,"validateRealmSchema"],[47,51,61,49],[48,2,62,0],[49,0,63,0],[50,0,64,0],[51,2,65,0],[51,11,65,9,"validateObjectSchema"],[51,31,65,29,"validateObjectSchema"],[51,32,65,30,"objectSchema"],[51,44,65,42],[51,46,65,44],[52,4,66,4],[52,8,66,8],[53,6,67,8],[54,6,68,8],[54,10,68,12],[54,17,68,19,"objectSchema"],[54,29,68,31],[54,34,68,36],[54,44,68,46],[54,46,68,48],[55,8,69,12],[55,12,69,18,"clazz"],[55,17,69,23],[55,20,69,26,"objectSchema"],[55,32,69,38],[56,8,70,12],[57,8,71,12],[57,12,71,16],[57,14,71,18,"objectSchema"],[57,26,71,30],[57,27,71,31,"prototype"],[57,36,71,40],[57,48,71,52,"_$$_REQUIRE"],[57,59,71,52],[57,60,71,52,"_dependencyMap"],[57,74,71,52],[57,94,71,63,"indirect"],[57,102,71,71],[57,103,71,72,"Object"],[57,109,71,78],[57,110,71,79],[57,112,71,81],[58,10,72,16],[58,14,72,22,"schemaName"],[58,24,72,32],[58,27,72,35,"clazz"],[58,32,72,40],[58,33,72,41,"schema"],[58,39,72,47],[58,43,72,51,"clazz"],[58,48,72,56],[58,49,72,57,"schema"],[58,55,72,63],[58,56,72,64,"name"],[58,60,72,68],[59,10,73,16],[59,14,73,20],[59,21,73,27,"schemaName"],[59,31,73,37],[59,36,73,42],[59,44,73,50],[59,48,73,54,"schemaName"],[59,58,73,64],[59,63,73,69,"objectSchema"],[59,75,73,81],[59,76,73,82,"name"],[59,80,73,86],[59,82,73,88],[60,12,74,20],[60,18,74,26],[60,22,74,30,"TypeError"],[60,31,74,39],[60,32,74,40],[60,42,74,50,"objectSchema"],[60,54,74,62],[60,55,74,63,"name"],[60,59,74,67],[60,76,74,84,"schemaName"],[60,86,74,94],[60,122,74,130],[60,123,74,131],[61,10,75,16],[61,11,75,17],[61,17,76,21],[62,12,77,20],[62,18,77,26],[62,22,77,30,"TypeError"],[62,31,77,39],[62,32,77,40],[62,42,77,50,"objectSchema"],[62,54,77,62],[62,55,77,63,"name"],[62,59,77,67],[62,87,77,95],[62,88,77,96],[63,10,78,16],[64,8,79,12],[65,8,80,12,"_$$_REQUIRE"],[65,19,80,12],[65,20,80,12,"_dependencyMap"],[65,34,80,12],[65,52,80,21,"assert"],[65,58,80,27],[65,59,80,28,"object"],[65,65,80,34],[65,66,80,35,"clazz"],[65,71,80,40],[65,72,80,41,"schema"],[65,78,80,47],[65,80,80,49],[65,95,80,64],[65,96,80,65],[66,8,81,12,"validateObjectSchema"],[66,28,81,32],[66,29,81,33,"clazz"],[66,34,81,38],[66,35,81,39,"schema"],[66,41,81,45],[66,42,81,46],[67,6,82,8],[68,6,83,8],[69,6,83,8],[69,11,84,13],[70,8,85,12,"_$$_REQUIRE"],[70,19,85,12],[70,20,85,12,"_dependencyMap"],[70,34,85,12],[70,52,85,21,"assert"],[70,58,85,27],[70,59,85,28,"object"],[70,65,85,34],[70,66,85,35,"objectSchema"],[70,78,85,47],[70,80,85,49],[70,95,85,64],[70,97,85,66],[71,10,85,68,"allowArrays"],[71,21,85,79],[71,23,85,81],[72,8,85,87],[72,9,85,88],[72,10,85,89],[73,8,86,12],[73,12,86,26,"objectName"],[73,22,86,36],[73,25,86,87,"objectSchema"],[73,37,86,99],[73,38,86,20,"name"],[73,42,86,24],[74,10,86,38,"properties"],[74,20,86,48],[74,23,86,87,"objectSchema"],[74,35,86,99],[74,36,86,38,"properties"],[74,46,86,48],[75,10,86,50,"primaryKey"],[75,20,86,60],[75,23,86,87,"objectSchema"],[75,35,86,99],[75,36,86,50,"primaryKey"],[75,46,86,60],[76,10,86,62,"asymmetric"],[76,20,86,72],[76,23,86,87,"objectSchema"],[76,35,86,99],[76,36,86,62,"asymmetric"],[76,46,86,72],[77,10,86,74,"embedded"],[77,18,86,82],[77,21,86,87,"objectSchema"],[77,33,86,99],[77,34,86,74,"embedded"],[77,42,86,82],[78,8,87,12,"_$$_REQUIRE"],[78,19,87,12],[78,20,87,12,"_dependencyMap"],[78,34,87,12],[78,52,87,21,"assert"],[78,58,87,27],[78,59,87,28,"string"],[78,65,87,34],[78,66,87,35,"objectName"],[78,76,87,45],[78,78,87,47],[78,103,87,72],[78,104,87,73],[79,8,88,12,"_$$_REQUIRE"],[79,19,88,12],[79,20,88,12,"_dependencyMap"],[79,34,88,12],[79,52,88,21,"assert"],[79,58,88,27],[79,59,88,28,"object"],[79,65,88,34],[79,66,88,35,"properties"],[79,76,88,45],[79,78,88,47],[79,98,88,67,"objectName"],[79,108,88,77],[79,111,88,80],[79,113,88,82],[80,10,88,84,"allowArrays"],[80,21,88,95],[80,23,88,97],[81,8,88,103],[81,9,88,104],[81,10,88,105],[82,8,89,12],[82,12,89,16,"primaryKey"],[82,22,89,26],[82,27,89,31,"undefined"],[82,36,89,40],[82,38,89,42],[83,10,90,16,"_$$_REQUIRE"],[83,21,90,16],[83,22,90,16,"_dependencyMap"],[83,36,90,16],[83,54,90,25,"assert"],[83,60,90,31],[83,61,90,32,"string"],[83,67,90,38],[83,68,90,39,"primaryKey"],[83,78,90,49],[83,80,90,51],[83,100,90,71,"objectName"],[83,110,90,81],[83,113,90,84],[83,114,90,85],[84,8,91,12],[85,8,92,12],[85,12,92,16,"embedded"],[85,20,92,24],[85,25,92,29,"undefined"],[85,34,92,38],[85,36,92,40],[86,10,93,16,"_$$_REQUIRE"],[86,21,93,16],[86,22,93,16,"_dependencyMap"],[86,36,93,16],[86,54,93,25,"assert"],[86,60,93,31],[86,61,93,32,"boolean"],[86,68,93,39],[86,69,93,40,"embedded"],[86,77,93,48],[86,79,93,50],[86,97,93,68,"objectName"],[86,107,93,78],[86,110,93,81],[86,111,93,82],[87,8,94,12],[88,8,95,12],[88,12,95,16,"asymmetric"],[88,22,95,26],[88,27,95,31,"undefined"],[88,36,95,40],[88,38,95,42],[89,10,96,16,"_$$_REQUIRE"],[89,21,96,16],[89,22,96,16,"_dependencyMap"],[89,36,96,16],[89,54,96,25,"assert"],[89,60,96,31],[89,61,96,32,"boolean"],[89,68,96,39],[89,69,96,40,"asymmetric"],[89,79,96,50],[89,81,96,52],[89,101,96,72,"objectName"],[89,111,96,82],[89,114,96,85],[89,115,96,86],[90,8,97,12],[91,8,98,12],[91,12,98,18,"invalidKeysUsed"],[91,27,98,33],[91,30,98,36,"filterInvalidKeys"],[91,47,98,53],[91,48,98,54,"objectSchema"],[91,60,98,66],[91,62,98,68,"OBJECT_SCHEMA_KEYS"],[91,80,98,86],[91,81,98,87],[92,8,99,12],[92,9,99,13],[92,10,99,14],[92,12,99,16,"_$$_REQUIRE"],[92,23,99,16],[92,24,99,16,"_dependencyMap"],[92,38,99,16],[92,56,99,25,"assert"],[92,62,99,31],[92,64,99,33],[92,65,99,34,"invalidKeysUsed"],[92,80,99,49],[92,81,99,50,"length"],[92,87,99,56],[92,89,99,58],[92,144,99,113,"objectName"],[92,154,99,123],[92,161,99,130,"invalidKeysUsed"],[92,176,99,145],[92,177,99,146,"join"],[92,181,99,150],[92,182,99,151],[92,188,99,157],[92,189,99,158],[92,193,99,162],[92,194,99,163],[93,8,100,12],[93,13,100,17],[93,17,100,23,"propertyName"],[93,29,100,35],[93,33,100,39,"properties"],[93,43,100,49],[93,45,100,51],[94,10,101,16],[94,14,101,22,"propertySchema"],[94,28,101,36],[94,31,101,39,"properties"],[94,41,101,49],[94,42,101,50,"propertyName"],[94,54,101,62],[94,55,101,63],[95,10,102,16],[95,14,102,22,"isUsingShorthand"],[95,30,102,38],[95,33,102,41],[95,40,102,48,"propertySchema"],[95,54,102,62],[95,59,102,67],[95,67,102,75],[96,10,103,16],[96,14,103,20],[96,15,103,21,"isUsingShorthand"],[96,31,103,37],[96,33,103,39],[97,12,104,20,"validatePropertySchema"],[97,34,104,42],[97,35,104,43,"objectName"],[97,45,104,53],[97,47,104,55,"propertyName"],[97,59,104,67],[97,61,104,69,"propertySchema"],[97,75,104,83],[97,76,104,84],[98,10,105,16],[99,8,106,12],[100,6,107,8],[101,4,108,4],[101,5,108,5],[101,6,109,4],[101,13,109,11,"err"],[101,16,109,14],[101,18,109,16],[102,6,110,8],[103,6,111,8],[104,6,112,8],[104,10,112,12,"err"],[104,13,112,15],[104,25,112,27,"_$$_REQUIRE"],[104,36,112,27],[104,37,112,27,"_dependencyMap"],[104,51,112,27],[104,69,112,36,"PropertySchemaParseError"],[104,93,112,60],[104,95,112,62],[105,8,113,12],[105,14,113,18,"err"],[105,17,113,21],[106,6,114,8],[106,7,114,9],[106,13,115,13],[106,17,115,17,"err"],[106,20,115,20],[106,32,115,32,"Error"],[106,37,115,37],[106,39,115,39],[107,8,116,12],[108,8,117,12],[109,8,118,12],[110,8,119,12],[110,12,119,18,"objectName"],[110,23,119,28],[110,26,119,31],[110,27,119,31,"objectSchema"],[110,39,119,43],[110,59,119,31,"objectSchema"],[110,71,119,43],[110,72,119,45,"name"],[110,76,119,49],[110,81,119,53],[110,83,119,55],[111,8,120,12],[111,14,120,18],[111,19,120,22,"_$$_REQUIRE"],[111,30,120,22],[111,31,120,22,"_dependencyMap"],[111,45,120,22],[111,63,120,31,"ObjectSchemaParseError"],[111,85,120,53],[111,87,120,54,"err"],[111,90,120,57],[111,91,120,58,"message"],[111,98,120,65],[111,100,120,67],[112,10,120,69,"objectName"],[112,20,120,79],[112,22,120,69,"objectName"],[113,8,120,80],[113,9,120,81],[113,10,120,82],[114,6,121,8],[115,6,122,8],[115,12,122,14,"err"],[115,15,122,17],[116,4,123,4],[117,2,124,0],[118,2,125,0,"exports"],[118,9,125,7],[118,10,125,8,"validateObjectSchema"],[118,30,125,28],[118,33,125,31,"validateObjectSchema"],[118,53,125,51],[119,2,126,0],[120,0,127,0],[121,0,128,0],[122,0,129,0],[123,2,130,0],[123,11,130,9,"validatePropertySchema"],[123,33,130,31,"validatePropertySchema"],[123,34,130,32,"objectName"],[123,44,130,42],[123,46,130,44,"propertyName"],[123,58,130,56],[123,60,130,58,"propertySchema"],[123,74,130,72],[123,76,130,74],[124,4,131,4],[124,8,131,8],[125,6,132,8,"_$$_REQUIRE"],[125,17,132,8],[125,18,132,8,"_dependencyMap"],[125,32,132,8],[125,50,132,17,"assert"],[125,56,132,23],[125,57,132,24,"object"],[125,63,132,30],[125,64,132,31,"propertySchema"],[125,78,132,45],[125,80,132,47],[125,84,132,51,"propertyName"],[125,96,132,63],[125,105,132,72,"objectName"],[125,115,132,82],[125,118,132,85],[125,120,132,87],[126,8,132,89,"allowArrays"],[126,19,132,100],[126,21,132,102],[127,6,132,108],[127,7,132,109],[127,8,132,110],[128,6,133,8],[128,10,133,16,"type"],[128,14,133,20],[128,17,133,87,"propertySchema"],[128,31,133,101],[128,32,133,16,"type"],[128,36,133,20],[129,8,133,22,"objectType"],[129,18,133,32],[129,21,133,87,"propertySchema"],[129,35,133,101],[129,36,133,22,"objectType"],[129,46,133,32],[130,8,133,34,"presentation"],[130,20,133,46],[130,23,133,87,"propertySchema"],[130,37,133,101],[130,38,133,34,"presentation"],[130,50,133,46],[131,8,133,48,"optional"],[131,16,133,56],[131,19,133,87,"propertySchema"],[131,33,133,101],[131,34,133,48,"optional"],[131,42,133,56],[132,8,133,58,"property"],[132,16,133,66],[132,19,133,87,"propertySchema"],[132,33,133,101],[132,34,133,58,"property"],[132,42,133,66],[133,8,133,68,"indexed"],[133,15,133,75],[133,18,133,87,"propertySchema"],[133,32,133,101],[133,33,133,68,"indexed"],[133,40,133,75],[134,8,133,77,"mapTo"],[134,13,133,82],[134,16,133,87,"propertySchema"],[134,30,133,101],[134,31,133,77,"mapTo"],[134,36,133,82],[135,6,134,8,"_$$_REQUIRE"],[135,17,134,8],[135,18,134,8,"_dependencyMap"],[135,32,134,8],[135,50,134,17,"assert"],[135,56,134,23],[135,57,134,24,"string"],[135,63,134,30],[135,64,134,31,"type"],[135,68,134,35],[135,70,134,37],[135,74,134,41,"propertyName"],[135,86,134,53],[135,100,134,67,"objectName"],[135,110,134,77],[135,113,134,80],[135,114,134,81],[136,6,135,8],[136,10,135,12,"objectType"],[136,20,135,22],[136,25,135,27,"undefined"],[136,34,135,36],[136,36,135,38],[137,8,136,12,"_$$_REQUIRE"],[137,19,136,12],[137,20,136,12,"_dependencyMap"],[137,34,136,12],[137,52,136,21,"assert"],[137,58,136,27],[137,59,136,28,"string"],[137,65,136,34],[137,66,136,35,"objectType"],[137,76,136,45],[137,78,136,47],[137,82,136,51,"propertyName"],[137,94,136,63],[137,114,136,83,"objectName"],[137,124,136,93],[137,127,136,96],[137,128,136,97],[138,6,137,8],[139,6,138,8],[139,10,138,12,"presentation"],[139,22,138,24],[139,27,138,29,"undefined"],[139,36,138,38],[139,38,138,40],[140,8,139,12,"_$$_REQUIRE"],[140,19,139,12],[140,20,139,12,"_dependencyMap"],[140,34,139,12],[140,52,139,21,"assert"],[140,58,139,27],[140,59,139,28,"string"],[140,65,139,34],[140,66,139,35,"presentation"],[140,78,139,47],[140,80,139,49],[140,84,139,53,"propertyName"],[140,96,139,65],[140,118,139,87,"objectName"],[140,128,139,97],[140,131,139,100],[140,132,139,101],[141,6,140,8],[142,6,141,8],[142,10,141,12,"optional"],[142,18,141,20],[142,23,141,25,"undefined"],[142,32,141,34],[142,34,141,36],[143,8,142,12,"_$$_REQUIRE"],[143,19,142,12],[143,20,142,12,"_dependencyMap"],[143,34,142,12],[143,52,142,21,"assert"],[143,58,142,27],[143,59,142,28,"boolean"],[143,66,142,35],[143,67,142,36,"optional"],[143,75,142,44],[143,77,142,46],[143,81,142,50,"propertyName"],[143,93,142,62],[143,111,142,80,"objectName"],[143,121,142,90],[143,124,142,93],[143,125,142,94],[144,6,143,8],[145,6,144,8],[145,10,144,12,"property"],[145,18,144,20],[145,23,144,25,"undefined"],[145,32,144,34],[145,34,144,36],[146,8,145,12,"_$$_REQUIRE"],[146,19,145,12],[146,20,145,12,"_dependencyMap"],[146,34,145,12],[146,52,145,21,"assert"],[146,58,145,27],[146,59,145,28,"string"],[146,65,145,34],[146,66,145,35,"property"],[146,74,145,43],[146,76,145,45],[146,80,145,49,"propertyName"],[146,92,145,61],[146,110,145,79,"objectName"],[146,120,145,89],[146,123,145,92],[146,124,145,93],[147,6,146,8],[148,6,147,8],[148,10,147,12,"indexed"],[148,17,147,19],[148,22,147,24,"undefined"],[148,31,147,33],[148,33,147,35],[149,8,148,12],[149,9,148,13],[149,10,148,14],[149,12,148,16,"_$$_REQUIRE"],[149,23,148,16],[149,24,148,16,"_dependencyMap"],[149,38,148,16],[149,56,148,25,"assert"],[149,62,148,31],[149,64,148,33],[149,71,148,40,"indexed"],[149,78,148,47],[149,83,148,52],[149,92,148,61],[149,96,148,65,"indexed"],[149,103,148,72],[149,108,148,77],[149,119,148,88],[149,121,148,90],[149,134,148,103,"propertyName"],[149,146,148,115],[149,163,148,132,"objectName"],[149,173,148,142],[149,208,148,177],[149,209,148,178],[150,6,149,8],[151,6,150,8],[151,10,150,12,"mapTo"],[151,15,150,17],[151,20,150,22,"undefined"],[151,29,150,31],[151,31,150,33],[152,8,151,12,"_$$_REQUIRE"],[152,19,151,12],[152,20,151,12,"_dependencyMap"],[152,34,151,12],[152,52,151,21,"assert"],[152,58,151,27],[152,59,151,28,"string"],[152,65,151,34],[152,66,151,35,"mapTo"],[152,71,151,40],[152,73,151,42],[152,77,151,46,"propertyName"],[152,89,151,58],[152,104,151,73,"objectName"],[152,114,151,83],[152,117,151,86],[152,118,151,87],[153,6,152,8],[154,6,153,8],[154,10,153,14,"invalidKeysUsed"],[154,25,153,29],[154,28,153,32,"filterInvalidKeys"],[154,45,153,49],[154,46,153,50,"propertySchema"],[154,60,153,64],[154,62,153,66,"PROPERTY_SCHEMA_KEYS"],[154,82,153,86],[154,83,153,87],[155,6,154,8],[155,7,154,9],[155,8,154,10],[155,10,154,12,"_$$_REQUIRE"],[155,21,154,12],[155,22,154,12,"_dependencyMap"],[155,36,154,12],[155,54,154,21,"assert"],[155,60,154,27],[155,62,154,29],[155,63,154,30,"invalidKeysUsed"],[155,78,154,45],[155,79,154,46,"length"],[155,85,154,52],[155,87,154,54],[155,144,154,111,"propertyName"],[155,156,154,123],[155,165,154,132,"objectName"],[155,175,154,142],[155,182,154,149,"invalidKeysUsed"],[155,197,154,164],[155,198,154,165,"join"],[155,202,154,169],[155,203,154,170],[155,209,154,176],[155,210,154,177],[155,214,154,181],[155,215,154,182],[156,4,155,4],[156,5,155,5],[156,6,156,4],[156,13,156,11,"err"],[156,16,156,14],[156,18,156,16],[157,6,157,8],[157,10,157,12,"err"],[157,13,157,15],[157,25,157,27,"Error"],[157,30,157,32],[157,32,157,34],[158,8,158,12],[158,14,158,18],[158,19,158,22,"_$$_REQUIRE"],[158,30,158,22],[158,31,158,22,"_dependencyMap"],[158,45,158,22],[158,63,158,31,"PropertySchemaParseError"],[158,87,158,55],[158,89,158,56,"err"],[158,92,158,59],[158,93,158,60,"message"],[158,100,158,67],[158,102,158,69],[159,10,158,71,"objectName"],[159,20,158,81],[159,22,158,71,"objectName"],[159,32,158,81],[160,10,158,83,"propertyName"],[160,22,158,95],[160,24,158,83,"propertyName"],[161,8,158,96],[161,9,158,97],[161,10,158,98],[162,6,159,8],[163,6,160,8],[163,12,160,14,"err"],[163,15,160,17],[164,4,161,4],[165,2,162,0],[166,2,163,0,"exports"],[166,9,163,7],[166,10,163,8,"validatePropertySchema"],[166,32,163,30],[166,35,163,33,"validatePropertySchema"],[166,57,163,55],[167,2,164,0],[168,0,165,0],[169,0,166,0],[170,2,167,0],[170,11,167,9,"filterInvalidKeys"],[170,28,167,26,"filterInvalidKeys"],[170,29,167,27,"object"],[170,35,167,33],[170,37,167,35,"validKeys"],[170,46,167,44],[170,48,167,46],[171,4,168,4],[171,11,168,11,"Object"],[171,17,168,17],[171,18,168,18,"keys"],[171,22,168,22],[171,23,168,23,"object"],[171,29,168,29],[171,30,168,30],[171,31,168,31,"filter"],[171,37,168,37],[171,38,168,38],[171,48,168,39,"key"],[171,51,168,42],[172,6,168,42],[172,13,168,47],[172,14,168,48,"validKeys"],[172,23,168,57],[172,24,168,58,"has"],[172,27,168,61],[172,28,168,62,"key"],[172,31,168,65],[172,32,168,66],[173,4,168,66],[173,6,168,67],[174,2,169,0],[175,0,169,1],[175,3]],"functionMap":{"names":["<global>","validateRealmSchema","validateObjectSchema","validatePropertySchema","filterInvalidKeys","Object.keys.filter$argument_0"],"mappings":"AAA;ACqD;CDM;AEK;CF2D;AGM;CHgC;AIK;sCCC,4BD;CJC"}},"type":"js/module"}]}