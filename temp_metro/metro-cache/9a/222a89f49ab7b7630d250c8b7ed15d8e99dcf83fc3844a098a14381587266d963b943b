{"dependencies":[{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":67,"column":0,"index":2133}}],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE="}},{"name":"varuint-bitcoin","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":14,"column":29,"index":407},"end":{"line":14,"column":55,"index":433}}],"key":"d/MLbboLwipJSIgxTfEgzKAp95s="}},{"name":"uint8array-tools","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":15,"column":27,"index":463},"end":{"line":15,"column":54,"index":490}}],"key":"d9z2uhLIsbEZR4MIqnLfYd/zTK8="}},{"name":"./bip32Derivation.cjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":37,"index":530},"end":{"line":16,"column":69,"index":562}}],"key":"Q6Sit2YrUwzlHyN9WlSrwU4QsgA="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/toConsumableArray\");\n  var __importStar = this && this.__importStar || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result['default'] = mod;\n    return result;\n  };\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  var varuint = __importStar(_$$_REQUIRE(_dependencyMap[1], \"varuint-bitcoin\"));\n  var tools = __importStar(_$$_REQUIRE(_dependencyMap[2], \"uint8array-tools\"));\n  var bip32Derivation = __importStar(_$$_REQUIRE(_dependencyMap[3], \"./bip32Derivation.cjs\"));\n  var isValidBIP340Key = function isValidBIP340Key(pubkey) {\n    return pubkey.length === 32;\n  };\n  function makeConverter(TYPE_BYTE) {\n    var parent = bip32Derivation.makeConverter(TYPE_BYTE, isValidBIP340Key);\n    function decode(keyVal) {\n      var _varuint$decode = varuint.decode(keyVal.value),\n        nHashes = _varuint$decode.numberValue,\n        nHashesLen = _varuint$decode.bytes;\n      var base = parent.decode({\n        key: keyVal.key,\n        value: keyVal.value.slice(nHashesLen + Number(nHashes) * 32)\n      });\n      var leafHashes = new Array(Number(nHashes));\n      for (var i = 0, _offset = nHashesLen; i < nHashes; i++, _offset += 32) {\n        leafHashes[i] = keyVal.value.slice(_offset, _offset + 32);\n      }\n      return Object.assign({}, base, {\n        leafHashes: leafHashes\n      });\n    }\n    function encode(data) {\n      var base = parent.encode(data);\n      var nHashesLen = varuint.encodingLength(data.leafHashes.length);\n      var nHashesBuf = new Uint8Array(nHashesLen);\n      varuint.encode(data.leafHashes.length, nHashesBuf);\n      var value = tools.concat([nHashesBuf].concat(_toConsumableArray(data.leafHashes), [base.value]));\n      return Object.assign({}, base, {\n        value: value\n      });\n    }\n    var expected = '{ ' + 'masterFingerprint: Uint8Array; ' + 'pubkey: Uint8Array; ' + 'path: string; ' + 'leafHashes: Uint8Array[]; ' + '}';\n    function check(data) {\n      return Array.isArray(data.leafHashes) && data.leafHashes.every(function (leafHash) {\n        return leafHash instanceof Uint8Array && leafHash.length === 32;\n      }) && parent.check(data);\n    }\n    return {\n      decode: decode,\n      encode: encode,\n      check: check,\n      expected: expected,\n      canAddToArray: parent.canAddToArray\n    };\n  }\n  exports.makeConverter = makeConverter;\n});","lineCount":64,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_toConsumableArray"],[4,24,1,13],[4,27,1,13,"_$$_REQUIRE"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,2,0],[5,6,2,4,"__importStar"],[5,18,2,16],[5,21,3,3],[5,25,3,7],[5,29,3,11],[5,33,3,15],[5,34,3,16,"__importStar"],[5,46,3,28],[5,50,4,2],[5,60,4,11,"mod"],[5,63,4,14],[5,65,4,16],[6,4,5,4],[6,8,5,8,"mod"],[6,11,5,11],[6,15,5,15,"mod"],[6,18,5,18],[6,19,5,19,"__esModule"],[6,29,5,29],[6,31,5,31],[6,38,5,38,"mod"],[6,41,5,41],[7,4,6,4],[7,8,6,8,"result"],[7,14,6,14],[7,17,6,17],[7,18,6,18],[7,19,6,19],[8,4,7,4],[8,8,7,8,"mod"],[8,11,7,11],[8,15,7,15],[8,19,7,19],[8,21,8,6],[8,26,8,11],[8,30,8,15,"k"],[8,31,8,16],[8,35,8,20,"mod"],[8,38,8,23],[8,40,9,8],[8,44,9,12,"Object"],[8,50,9,18],[8,51,9,19,"hasOwnProperty"],[8,65,9,33],[8,66,9,34,"call"],[8,70,9,38],[8,71,9,39,"mod"],[8,74,9,42],[8,76,9,44,"k"],[8,77,9,45],[8,78,9,46],[8,80,9,48,"result"],[8,86,9,54],[8,87,9,55,"k"],[8,88,9,56],[8,89,9,57],[8,92,9,60,"mod"],[8,95,9,63],[8,96,9,64,"k"],[8,97,9,65],[8,98,9,66],[9,4,10,4,"result"],[9,10,10,10],[9,11,10,11],[9,20,10,20],[9,21,10,21],[9,24,10,24,"mod"],[9,27,10,27],[10,4,11,4],[10,11,11,11,"result"],[10,17,11,17],[11,2,12,2],[11,3,12,3],[12,2,13,0,"Object"],[12,8,13,6],[12,9,13,7,"defineProperty"],[12,23,13,21],[12,24,13,22,"exports"],[12,31,13,29],[12,33,13,31],[12,45,13,43],[12,47,13,45],[13,4,13,47,"value"],[13,9,13,52],[13,11,13,54],[14,2,13,59],[14,3,13,60],[14,4,13,61],[15,2,14,0],[15,6,14,6,"varuint"],[15,13,14,13],[15,16,14,16,"__importStar"],[15,28,14,28],[15,29,14,29,"require"],[15,40,14,36],[15,41,14,36,"_dependencyMap"],[15,55,14,36],[15,77,14,54],[15,78,14,55],[15,79,14,56],[16,2,15,0],[16,6,15,6,"tools"],[16,11,15,11],[16,14,15,14,"__importStar"],[16,26,15,26],[16,27,15,27,"require"],[16,38,15,34],[16,39,15,34,"_dependencyMap"],[16,53,15,34],[16,76,15,53],[16,77,15,54],[16,78,15,55],[17,2,16,0],[17,6,16,6,"bip32Derivation"],[17,21,16,21],[17,24,16,24,"__importStar"],[17,36,16,36],[17,37,16,37,"require"],[17,48,16,44],[17,49,16,44,"_dependencyMap"],[17,63,16,44],[17,91,16,68],[17,92,16,69],[17,93,16,70],[18,2,17,0],[18,6,17,6,"isValidBIP340Key"],[18,22,17,22],[18,25,17,25],[18,34,17,6,"isValidBIP340Key"],[18,50,17,22,"isValidBIP340Key"],[18,51,17,25,"pubkey"],[18,57,17,31],[19,4,17,31],[19,11,17,35,"pubkey"],[19,17,17,41],[19,18,17,42,"length"],[19,24,17,48],[19,29,17,53],[19,31,17,55],[20,2,17,55],[21,2,18,0],[21,11,18,9,"makeConverter"],[21,24,18,22,"makeConverter"],[21,25,18,23,"TYPE_BYTE"],[21,34,18,32],[21,36,18,34],[22,4,19,2],[22,8,19,8,"parent"],[22,14,19,14],[22,17,19,17,"bip32Derivation"],[22,32,19,32],[22,33,19,33,"makeConverter"],[22,46,19,46],[22,47,19,47,"TYPE_BYTE"],[22,56,19,56],[22,58,19,58,"isValidBIP340Key"],[22,74,19,74],[22,75,19,75],[23,4,20,2],[23,13,20,11,"decode"],[23,19,20,17,"decode"],[23,20,20,18,"keyVal"],[23,26,20,24],[23,28,20,26],[24,6,21,4],[24,10,21,4,"_varuint$decode"],[24,25,21,4],[24,28,21,56,"varuint"],[24,35,21,63],[24,36,21,64,"decode"],[24,42,21,70],[24,43,22,6,"keyVal"],[24,49,22,12],[24,50,22,13,"value"],[24,55,23,4],[24,56,23,5],[25,8,21,25,"nHashes"],[25,15,21,32],[25,18,21,32,"_varuint$decode"],[25,33,21,32],[25,34,21,12,"numberValue"],[25,45,21,23],[26,8,21,41,"nHashesLen"],[26,18,21,51],[26,21,21,51,"_varuint$decode"],[26,36,21,51],[26,37,21,34,"bytes"],[26,42,21,39],[27,6,24,4],[27,10,24,10,"base"],[27,14,24,14],[27,17,24,17,"parent"],[27,23,24,23],[27,24,24,24,"decode"],[27,30,24,30],[27,31,24,31],[28,8,25,6,"key"],[28,11,25,9],[28,13,25,11,"keyVal"],[28,19,25,17],[28,20,25,18,"key"],[28,23,25,21],[29,8,26,6,"value"],[29,13,26,11],[29,15,26,13,"keyVal"],[29,21,26,19],[29,22,26,20,"value"],[29,27,26,25],[29,28,26,26,"slice"],[29,33,26,31],[29,34,26,32,"nHashesLen"],[29,44,26,42],[29,47,26,45,"Number"],[29,53,26,51],[29,54,26,52,"nHashes"],[29,61,26,59],[29,62,26,60],[29,65,26,63],[29,67,26,65],[30,6,27,4],[30,7,27,5],[30,8,27,6],[31,6,28,4],[31,10,28,10,"leafHashes"],[31,20,28,20],[31,23,28,23],[31,27,28,27,"Array"],[31,32,28,32],[31,33,28,33,"Number"],[31,39,28,39],[31,40,28,40,"nHashes"],[31,47,28,47],[31,48,28,48],[31,49,28,49],[32,6,29,4],[32,11,29,9],[32,15,29,13,"i"],[32,16,29,14],[32,19,29,17],[32,20,29,18],[32,22,29,20,"_offset"],[32,29,29,27],[32,32,29,30,"nHashesLen"],[32,42,29,40],[32,44,29,42,"i"],[32,45,29,43],[32,48,29,46,"nHashes"],[32,55,29,53],[32,57,29,55,"i"],[32,58,29,56],[32,60,29,58],[32,62,29,60,"_offset"],[32,69,29,67],[32,73,29,71],[32,75,29,73],[32,77,29,75],[33,8,30,6,"leafHashes"],[33,18,30,16],[33,19,30,17,"i"],[33,20,30,18],[33,21,30,19],[33,24,30,22,"keyVal"],[33,30,30,28],[33,31,30,29,"value"],[33,36,30,34],[33,37,30,35,"slice"],[33,42,30,40],[33,43,30,41,"_offset"],[33,50,30,48],[33,52,30,50,"_offset"],[33,59,30,57],[33,62,30,60],[33,64,30,62],[33,65,30,63],[34,6,31,4],[35,6,32,4],[35,13,32,4,"Object"],[35,19,32,4],[35,20,32,4,"assign"],[35,26,32,4],[35,31,32,16,"base"],[35,35,32,20],[36,8,32,22,"leafHashes"],[36,18,32,32],[36,20,32,22,"leafHashes"],[37,6,32,32],[38,4,33,2],[39,4,34,2],[39,13,34,11,"encode"],[39,19,34,17,"encode"],[39,20,34,18,"data"],[39,24,34,22],[39,26,34,24],[40,6,35,4],[40,10,35,10,"base"],[40,14,35,14],[40,17,35,17,"parent"],[40,23,35,23],[40,24,35,24,"encode"],[40,30,35,30],[40,31,35,31,"data"],[40,35,35,35],[40,36,35,36],[41,6,36,4],[41,10,36,10,"nHashesLen"],[41,20,36,20],[41,23,36,23,"varuint"],[41,30,36,30],[41,31,36,31,"encodingLength"],[41,45,36,45],[41,46,36,46,"data"],[41,50,36,50],[41,51,36,51,"leafHashes"],[41,61,36,61],[41,62,36,62,"length"],[41,68,36,68],[41,69,36,69],[42,6,37,4],[42,10,37,10,"nHashesBuf"],[42,20,37,20],[42,23,37,23],[42,27,37,27,"Uint8Array"],[42,37,37,37],[42,38,37,38,"nHashesLen"],[42,48,37,48],[42,49,37,49],[43,6,38,4,"varuint"],[43,13,38,11],[43,14,38,12,"encode"],[43,20,38,18],[43,21,38,19,"data"],[43,25,38,23],[43,26,38,24,"leafHashes"],[43,36,38,34],[43,37,38,35,"length"],[43,43,38,41],[43,45,38,43,"nHashesBuf"],[43,55,38,53],[43,56,38,54],[44,6,39,4],[44,10,39,10,"value"],[44,15,39,15],[44,18,39,18,"tools"],[44,23,39,23],[44,24,39,24,"concat"],[44,30,39,30],[44,32,39,32,"nHashesBuf"],[44,42,39,42],[44,44,39,42,"concat"],[44,50,39,42],[44,51,39,42,"_toConsumableArray"],[44,69,39,42],[44,70,39,47,"data"],[44,74,39,51],[44,75,39,52,"leafHashes"],[44,85,39,62],[44,89,39,64,"base"],[44,93,39,68],[44,94,39,69,"value"],[44,99,39,74],[44,101,39,75],[44,102,39,76],[45,6,40,4],[45,13,40,4,"Object"],[45,19,40,4],[45,20,40,4,"assign"],[45,26,40,4],[45,31,40,16,"base"],[45,35,40,20],[46,8,40,22,"value"],[46,13,40,27],[46,15,40,22,"value"],[47,6,40,27],[48,4,41,2],[49,4,42,2],[49,8,42,8,"expected"],[49,16,42,16],[49,19,43,4],[49,23,43,8],[49,26,44,4],[49,59,44,37],[49,62,45,4],[49,84,45,26],[49,87,46,4],[49,103,46,20],[49,106,47,4],[49,134,47,32],[49,137,48,4],[49,140,48,7],[50,4,49,2],[50,13,49,11,"check"],[50,18,49,16,"check"],[50,19,49,17,"data"],[50,23,49,21],[50,25,49,23],[51,6,50,4],[51,13,51,6,"Array"],[51,18,51,11],[51,19,51,12,"isArray"],[51,26,51,19],[51,27,51,20,"data"],[51,31,51,24],[51,32,51,25,"leafHashes"],[51,42,51,35],[51,43,51,36],[51,47,52,6,"data"],[51,51,52,10],[51,52,52,11,"leafHashes"],[51,62,52,21],[51,63,52,22,"every"],[51,68,52,27],[51,69,53,8],[51,79,53,8,"leafHash"],[51,87,53,16],[52,8,53,16],[52,15,53,20,"leafHash"],[52,23,53,28],[52,35,53,40,"Uint8Array"],[52,45,53,50],[52,49,53,54,"leafHash"],[52,57,53,62],[52,58,53,63,"length"],[52,64,53,69],[52,69,53,74],[52,71,53,76],[53,6,53,76],[53,7,54,6],[53,8,54,7],[53,12,55,6,"parent"],[53,18,55,12],[53,19,55,13,"check"],[53,24,55,18],[53,25,55,19,"data"],[53,29,55,23],[53,30,55,24],[54,4,57,2],[55,4,58,2],[55,11,58,9],[56,6,59,4,"decode"],[56,12,59,10],[56,14,59,4,"decode"],[56,20,59,10],[57,6,60,4,"encode"],[57,12,60,10],[57,14,60,4,"encode"],[57,20,60,10],[58,6,61,4,"check"],[58,11,61,9],[58,13,61,4,"check"],[58,18,61,9],[59,6,62,4,"expected"],[59,14,62,12],[59,16,62,4,"expected"],[59,24,62,12],[60,6,63,4,"canAddToArray"],[60,19,63,17],[60,21,63,19,"parent"],[60,27,63,25],[60,28,63,26,"canAddToArray"],[61,4,64,2],[61,5,64,3],[62,2,65,0],[63,2,66,0,"exports"],[63,9,66,7],[63,10,66,8,"makeConverter"],[63,23,66,21],[63,26,66,24,"makeConverter"],[63,39,66,37],[64,0,66,38],[64,3]],"functionMap":{"names":["<global>","<anonymous>","isValidBIP340Key","makeConverter","decode","encode","check","data.leafHashes.every$argument_0"],"mappings":"AAA;ECG;GDQ;yBEK,8BF;AGC;ECE;GDa;EEC;GFO;EGQ;QCI,oED;GHI;CHQ"}},"type":"js/module"}]}