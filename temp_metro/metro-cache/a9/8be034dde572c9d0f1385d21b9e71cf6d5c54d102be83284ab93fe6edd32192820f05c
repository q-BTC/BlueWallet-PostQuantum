{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":144,"column":0,"index":4177}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":144,"column":0,"index":4177}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"typeforce","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":18,"index":129},"end":{"line":4,"column":38,"index":149}},{"start":{"line":4,"column":18,"index":129},"end":{"line":4,"column":38,"index":149}}],"key":"oCEA5RW0Ha+xwR9ueiGUwAxq7Z8="}},{"name":"./types","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":14,"index":91},"end":{"line":3,"column":32,"index":109}},{"start":{"line":3,"column":14,"index":91},"end":{"line":3,"column":32,"index":109}},{"start":{"line":3,"column":14,"index":91},"end":{"line":3,"column":32,"index":109}},{"start":{"line":3,"column":14,"index":91},"end":{"line":3,"column":32,"index":109}},{"start":{"line":3,"column":14,"index":91},"end":{"line":3,"column":32,"index":109}},{"start":{"line":3,"column":14,"index":91},"end":{"line":3,"column":32,"index":109}}],"key":"iU0PUTt27rZ09z7DeRf4jWGkzmo="}},{"name":"varuint-bitcoin","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":16,"index":167},"end":{"line":5,"column":42,"index":193}},{"start":{"line":5,"column":16,"index":167},"end":{"line":5,"column":42,"index":193}},{"start":{"line":5,"column":16,"index":167},"end":{"line":5,"column":42,"index":193}},{"start":{"line":5,"column":16,"index":167},"end":{"line":5,"column":42,"index":193}}],"key":"d/MLbboLwipJSIgxTfEgzKAp95s="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  // https://github.com/feross/buffer/blob/master/index.js#L1127\n  function verifuint(value, max) {\n    if (typeof value !== 'number') throw new Error('cannot write a non-number as a number');\n    if (value < 0) throw new Error('specified a negative value for writing an unsigned value');\n    if (value > max) throw new Error('RangeError: value out of range');\n    if (Math.floor(value) !== value) throw new Error('value has a fractional component');\n  }\n  function readUInt64LE(buffer, offset) {\n    var a = buffer.readUInt32LE(offset);\n    var b = buffer.readUInt32LE(offset + 4);\n    b *= 0x100000000;\n    verifuint(b + a, 0x001fffffffffffff);\n    return b + a;\n  }\n  exports.readUInt64LE = readUInt64LE;\n  function writeUInt64LE(buffer, value, offset) {\n    verifuint(value, 0x001fffffffffffff);\n    buffer.writeInt32LE(value & -1, offset);\n    buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4);\n    return offset + 8;\n  }\n  exports.writeUInt64LE = writeUInt64LE;\n  function reverseBuffer(buffer) {\n    if (buffer.length < 1) return buffer;\n    var j = buffer.length - 1;\n    var tmp = 0;\n    for (var i = 0; i < buffer.length / 2; i++) {\n      tmp = buffer[i];\n      buffer[i] = buffer[j];\n      buffer[j] = tmp;\n      j--;\n    }\n    return buffer;\n  }\n  exports.reverseBuffer = reverseBuffer;\n  function cloneBuffer(buffer) {\n    var clone = Buffer.allocUnsafe(buffer.length);\n    buffer.copy(clone);\n    return clone;\n  }\n  exports.cloneBuffer = cloneBuffer;\n  /**\n   * Helper class for serialization of bitcoin data types into a pre-allocated buffer.\n   */\n  var BufferWriter = /*#__PURE__*/function () {\n    function BufferWriter(buffer) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      _classCallCheck(this, BufferWriter);\n      this.buffer = buffer;\n      this.offset = offset;\n      _$$_REQUIRE(_dependencyMap[2], \"typeforce\")(_$$_REQUIRE(_dependencyMap[3], \"./types\").tuple(_$$_REQUIRE(_dependencyMap[3], \"./types\").Buffer, _$$_REQUIRE(_dependencyMap[3], \"./types\").UInt32), [buffer, offset]);\n    }\n    return _createClass(BufferWriter, [{\n      key: \"writeUInt8\",\n      value: function writeUInt8(i) {\n        this.offset = this.buffer.writeUInt8(i, this.offset);\n      }\n    }, {\n      key: \"writeInt32\",\n      value: function writeInt32(i) {\n        this.offset = this.buffer.writeInt32LE(i, this.offset);\n      }\n    }, {\n      key: \"writeUInt32\",\n      value: function writeUInt32(i) {\n        this.offset = this.buffer.writeUInt32LE(i, this.offset);\n      }\n    }, {\n      key: \"writeUInt64\",\n      value: function writeUInt64(i) {\n        this.offset = writeUInt64LE(this.buffer, i, this.offset);\n      }\n    }, {\n      key: \"writeVarInt\",\n      value: function writeVarInt(i) {\n        _$$_REQUIRE(_dependencyMap[4], \"varuint-bitcoin\").encode(i, this.buffer, this.offset);\n        this.offset += _$$_REQUIRE(_dependencyMap[4], \"varuint-bitcoin\").encode.bytes;\n      }\n    }, {\n      key: \"writeSlice\",\n      value: function writeSlice(slice) {\n        if (this.buffer.length < this.offset + slice.length) {\n          throw new Error('Cannot write slice out of bounds');\n        }\n        this.offset += slice.copy(this.buffer, this.offset);\n      }\n    }, {\n      key: \"writeVarSlice\",\n      value: function writeVarSlice(slice) {\n        this.writeVarInt(slice.length);\n        this.writeSlice(slice);\n      }\n    }, {\n      key: \"writeVector\",\n      value: function writeVector(vector) {\n        var _this = this;\n        this.writeVarInt(vector.length);\n        vector.forEach(function (buf) {\n          return _this.writeVarSlice(buf);\n        });\n      }\n    }]);\n  }();\n  exports.BufferWriter = BufferWriter;\n  /**\n   * Helper class for reading of bitcoin data types from a buffer.\n   */\n  var BufferReader = /*#__PURE__*/function () {\n    function BufferReader(buffer) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      _classCallCheck(this, BufferReader);\n      this.buffer = buffer;\n      this.offset = offset;\n      _$$_REQUIRE(_dependencyMap[2], \"typeforce\")(_$$_REQUIRE(_dependencyMap[3], \"./types\").tuple(_$$_REQUIRE(_dependencyMap[3], \"./types\").Buffer, _$$_REQUIRE(_dependencyMap[3], \"./types\").UInt32), [buffer, offset]);\n    }\n    return _createClass(BufferReader, [{\n      key: \"readUInt8\",\n      value: function readUInt8() {\n        var result = this.buffer.readUInt8(this.offset);\n        this.offset++;\n        return result;\n      }\n    }, {\n      key: \"readInt32\",\n      value: function readInt32() {\n        var result = this.buffer.readInt32LE(this.offset);\n        this.offset += 4;\n        return result;\n      }\n    }, {\n      key: \"readUInt32\",\n      value: function readUInt32() {\n        var result = this.buffer.readUInt32LE(this.offset);\n        this.offset += 4;\n        return result;\n      }\n    }, {\n      key: \"readUInt64\",\n      value: function readUInt64() {\n        var result = readUInt64LE(this.buffer, this.offset);\n        this.offset += 8;\n        return result;\n      }\n    }, {\n      key: \"readVarInt\",\n      value: function readVarInt() {\n        var vi = _$$_REQUIRE(_dependencyMap[4], \"varuint-bitcoin\").decode(this.buffer, this.offset);\n        this.offset += _$$_REQUIRE(_dependencyMap[4], \"varuint-bitcoin\").decode.bytes;\n        return vi;\n      }\n    }, {\n      key: \"readSlice\",\n      value: function readSlice(n) {\n        if (this.buffer.length < this.offset + n) {\n          throw new Error('Cannot read slice out of bounds');\n        }\n        var result = this.buffer.slice(this.offset, this.offset + n);\n        this.offset += n;\n        return result;\n      }\n    }, {\n      key: \"readVarSlice\",\n      value: function readVarSlice() {\n        return this.readSlice(this.readVarInt());\n      }\n    }, {\n      key: \"readVector\",\n      value: function readVector() {\n        var count = this.readVarInt();\n        var vector = [];\n        for (var i = 0; i < count; i++) vector.push(this.readVarSlice());\n        return vector;\n      }\n    }]);\n  }();\n  exports.BufferReader = BufferReader;\n});","lineCount":185,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"_$$_REQUIRE"],[4,35,1,13],[4,36,1,13,"_dependencyMap"],[4,50,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"_$$_REQUIRE"],[5,32,1,13],[5,33,1,13,"_dependencyMap"],[5,47,1,13],[6,2,2,0,"Object"],[6,8,2,6],[6,9,2,7,"defineProperty"],[6,23,2,21],[6,24,2,22,"exports"],[6,31,2,29],[6,33,2,31],[6,45,2,43],[6,47,2,45],[7,4,2,47,"value"],[7,9,2,52],[7,11,2,54],[8,2,2,59],[8,3,2,60],[8,4,2,61],[9,2,6,0],[10,2,7,0],[10,11,7,9,"verifuint"],[10,20,7,18,"verifuint"],[10,21,7,19,"value"],[10,26,7,24],[10,28,7,26,"max"],[10,31,7,29],[10,33,7,31],[11,4,8,2],[11,8,8,6],[11,15,8,13,"value"],[11,20,8,18],[11,25,8,23],[11,33,8,31],[11,35,9,4],[11,41,9,10],[11,45,9,14,"Error"],[11,50,9,19],[11,51,9,20],[11,90,9,59],[11,91,9,60],[12,4,10,2],[12,8,10,6,"value"],[12,13,10,11],[12,16,10,14],[12,17,10,15],[12,19,11,4],[12,25,11,10],[12,29,11,14,"Error"],[12,34,11,19],[12,35,11,20],[12,93,11,78],[12,94,11,79],[13,4,12,2],[13,8,12,6,"value"],[13,13,12,11],[13,16,12,14,"max"],[13,19,12,17],[13,21,12,19],[13,27,12,25],[13,31,12,29,"Error"],[13,36,12,34],[13,37,12,35],[13,69,12,67],[13,70,12,68],[14,4,13,2],[14,8,13,6,"Math"],[14,12,13,10],[14,13,13,11,"floor"],[14,18,13,16],[14,19,13,17,"value"],[14,24,13,22],[14,25,13,23],[14,30,13,28,"value"],[14,35,13,33],[14,37,14,4],[14,43,14,10],[14,47,14,14,"Error"],[14,52,14,19],[14,53,14,20],[14,87,14,54],[14,88,14,55],[15,2,15,0],[16,2,16,0],[16,11,16,9,"readUInt64LE"],[16,23,16,21,"readUInt64LE"],[16,24,16,22,"buffer"],[16,30,16,28],[16,32,16,30,"offset"],[16,38,16,36],[16,40,16,38],[17,4,17,2],[17,8,17,8,"a"],[17,9,17,9],[17,12,17,12,"buffer"],[17,18,17,18],[17,19,17,19,"readUInt32LE"],[17,31,17,31],[17,32,17,32,"offset"],[17,38,17,38],[17,39,17,39],[18,4,18,2],[18,8,18,6,"b"],[18,9,18,7],[18,12,18,10,"buffer"],[18,18,18,16],[18,19,18,17,"readUInt32LE"],[18,31,18,29],[18,32,18,30,"offset"],[18,38,18,36],[18,41,18,39],[18,42,18,40],[18,43,18,41],[19,4,19,2,"b"],[19,5,19,3],[19,9,19,7],[19,20,19,18],[20,4,20,2,"verifuint"],[20,13,20,11],[20,14,20,12,"b"],[20,15,20,13],[20,18,20,16,"a"],[20,19,20,17],[20,21,20,19],[20,39,20,37],[20,40,20,38],[21,4,21,2],[21,11,21,9,"b"],[21,12,21,10],[21,15,21,13,"a"],[21,16,21,14],[22,2,22,0],[23,2,23,0,"exports"],[23,9,23,7],[23,10,23,8,"readUInt64LE"],[23,22,23,20],[23,25,23,23,"readUInt64LE"],[23,37,23,35],[24,2,24,0],[24,11,24,9,"writeUInt64LE"],[24,24,24,22,"writeUInt64LE"],[24,25,24,23,"buffer"],[24,31,24,29],[24,33,24,31,"value"],[24,38,24,36],[24,40,24,38,"offset"],[24,46,24,44],[24,48,24,46],[25,4,25,2,"verifuint"],[25,13,25,11],[25,14,25,12,"value"],[25,19,25,17],[25,21,25,19],[25,39,25,37],[25,40,25,38],[26,4,26,2,"buffer"],[26,10,26,8],[26,11,26,9,"writeInt32LE"],[26,23,26,21],[26,24,26,22,"value"],[26,29,26,27],[26,32,26,30],[26,33,26,31],[26,34,26,32],[26,36,26,34,"offset"],[26,42,26,40],[26,43,26,41],[27,4,27,2,"buffer"],[27,10,27,8],[27,11,27,9,"writeUInt32LE"],[27,24,27,22],[27,25,27,23,"Math"],[27,29,27,27],[27,30,27,28,"floor"],[27,35,27,33],[27,36,27,34,"value"],[27,41,27,39],[27,44,27,42],[27,55,27,53],[27,56,27,54],[27,58,27,56,"offset"],[27,64,27,62],[27,67,27,65],[27,68,27,66],[27,69,27,67],[28,4,28,2],[28,11,28,9,"offset"],[28,17,28,15],[28,20,28,18],[28,21,28,19],[29,2,29,0],[30,2,30,0,"exports"],[30,9,30,7],[30,10,30,8,"writeUInt64LE"],[30,23,30,21],[30,26,30,24,"writeUInt64LE"],[30,39,30,37],[31,2,31,0],[31,11,31,9,"reverseBuffer"],[31,24,31,22,"reverseBuffer"],[31,25,31,23,"buffer"],[31,31,31,29],[31,33,31,31],[32,4,32,2],[32,8,32,6,"buffer"],[32,14,32,12],[32,15,32,13,"length"],[32,21,32,19],[32,24,32,22],[32,25,32,23],[32,27,32,25],[32,34,32,32,"buffer"],[32,40,32,38],[33,4,33,2],[33,8,33,6,"j"],[33,9,33,7],[33,12,33,10,"buffer"],[33,18,33,16],[33,19,33,17,"length"],[33,25,33,23],[33,28,33,26],[33,29,33,27],[34,4,34,2],[34,8,34,6,"tmp"],[34,11,34,9],[34,14,34,12],[34,15,34,13],[35,4,35,2],[35,9,35,7],[35,13,35,11,"i"],[35,14,35,12],[35,17,35,15],[35,18,35,16],[35,20,35,18,"i"],[35,21,35,19],[35,24,35,22,"buffer"],[35,30,35,28],[35,31,35,29,"length"],[35,37,35,35],[35,40,35,38],[35,41,35,39],[35,43,35,41,"i"],[35,44,35,42],[35,46,35,44],[35,48,35,46],[36,6,36,4,"tmp"],[36,9,36,7],[36,12,36,10,"buffer"],[36,18,36,16],[36,19,36,17,"i"],[36,20,36,18],[36,21,36,19],[37,6,37,4,"buffer"],[37,12,37,10],[37,13,37,11,"i"],[37,14,37,12],[37,15,37,13],[37,18,37,16,"buffer"],[37,24,37,22],[37,25,37,23,"j"],[37,26,37,24],[37,27,37,25],[38,6,38,4,"buffer"],[38,12,38,10],[38,13,38,11,"j"],[38,14,38,12],[38,15,38,13],[38,18,38,16,"tmp"],[38,21,38,19],[39,6,39,4,"j"],[39,7,39,5],[39,9,39,7],[40,4,40,2],[41,4,41,2],[41,11,41,9,"buffer"],[41,17,41,15],[42,2,42,0],[43,2,43,0,"exports"],[43,9,43,7],[43,10,43,8,"reverseBuffer"],[43,23,43,21],[43,26,43,24,"reverseBuffer"],[43,39,43,37],[44,2,44,0],[44,11,44,9,"cloneBuffer"],[44,22,44,20,"cloneBuffer"],[44,23,44,21,"buffer"],[44,29,44,27],[44,31,44,29],[45,4,45,2],[45,8,45,8,"clone"],[45,13,45,13],[45,16,45,16,"Buffer"],[45,22,45,22],[45,23,45,23,"allocUnsafe"],[45,34,45,34],[45,35,45,35,"buffer"],[45,41,45,41],[45,42,45,42,"length"],[45,48,45,48],[45,49,45,49],[46,4,46,2,"buffer"],[46,10,46,8],[46,11,46,9,"copy"],[46,15,46,13],[46,16,46,14,"clone"],[46,21,46,19],[46,22,46,20],[47,4,47,2],[47,11,47,9,"clone"],[47,16,47,14],[48,2,48,0],[49,2,49,0,"exports"],[49,9,49,7],[49,10,49,8,"cloneBuffer"],[49,21,49,19],[49,24,49,22,"cloneBuffer"],[49,35,49,33],[50,2,50,0],[51,0,51,0],[52,0,52,0],[53,2,50,0],[53,6,53,6,"BufferWriter"],[53,18,53,18],[54,4,54,2],[54,13,54,2,"BufferWriter"],[54,26,54,14,"buffer"],[54,32,54,20],[54,34,54,34],[55,6,54,34],[55,10,54,22,"offset"],[55,16,54,28],[55,19,54,28,"arguments"],[55,28,54,28],[55,29,54,28,"length"],[55,35,54,28],[55,43,54,28,"arguments"],[55,52,54,28],[55,60,54,28,"undefined"],[55,69,54,28],[55,72,54,28,"arguments"],[55,81,54,28],[55,87,54,31],[55,88,54,32],[56,6,54,32,"_classCallCheck"],[56,21,54,32],[56,28,54,32,"BufferWriter"],[56,40,54,32],[57,6,55,4],[57,10,55,8],[57,11,55,9,"buffer"],[57,17,55,15],[57,20,55,18,"buffer"],[57,26,55,24],[58,6,56,4],[58,10,56,8],[58,11,56,9,"offset"],[58,17,56,15],[58,20,56,18,"offset"],[58,26,56,24],[59,6,57,4,"_$$_REQUIRE"],[59,17,57,4],[59,18,57,4,"_dependencyMap"],[59,32,57,4],[59,50,57,14,"_$$_REQUIRE"],[59,61,57,14],[59,62,57,14,"_dependencyMap"],[59,76,57,14],[59,92,57,20,"tuple"],[59,97,57,25],[59,98,57,26,"_$$_REQUIRE"],[59,109,57,26],[59,110,57,26,"_dependencyMap"],[59,124,57,26],[59,140,57,32,"Buffer"],[59,146,57,38],[59,148,57,40,"_$$_REQUIRE"],[59,159,57,40],[59,160,57,40,"_dependencyMap"],[59,174,57,40],[59,190,57,46,"UInt32"],[59,196,57,52],[59,197,57,53],[59,199,57,55],[59,200,57,56,"buffer"],[59,206,57,62],[59,208,57,64,"offset"],[59,214,57,70],[59,215,57,71],[59,216,57,72],[60,4,58,2],[61,4,58,3],[61,11,58,3,"_createClass"],[61,23,58,3],[61,24,58,3,"BufferWriter"],[61,36,58,3],[62,6,58,3,"key"],[62,9,58,3],[63,6,58,3,"value"],[63,11,58,3],[63,13,59,2],[63,22,59,2,"writeUInt8"],[63,32,59,12,"writeUInt8"],[63,33,59,13,"i"],[63,34,59,14],[63,36,59,16],[64,8,60,4],[64,12,60,8],[64,13,60,9,"offset"],[64,19,60,15],[64,22,60,18],[64,26,60,22],[64,27,60,23,"buffer"],[64,33,60,29],[64,34,60,30,"writeUInt8"],[64,44,60,40],[64,45,60,41,"i"],[64,46,60,42],[64,48,60,44],[64,52,60,48],[64,53,60,49,"offset"],[64,59,60,55],[64,60,60,56],[65,6,61,2],[66,4,61,3],[67,6,61,3,"key"],[67,9,61,3],[68,6,61,3,"value"],[68,11,61,3],[68,13,62,2],[68,22,62,2,"writeInt32"],[68,32,62,12,"writeInt32"],[68,33,62,13,"i"],[68,34,62,14],[68,36,62,16],[69,8,63,4],[69,12,63,8],[69,13,63,9,"offset"],[69,19,63,15],[69,22,63,18],[69,26,63,22],[69,27,63,23,"buffer"],[69,33,63,29],[69,34,63,30,"writeInt32LE"],[69,46,63,42],[69,47,63,43,"i"],[69,48,63,44],[69,50,63,46],[69,54,63,50],[69,55,63,51,"offset"],[69,61,63,57],[69,62,63,58],[70,6,64,2],[71,4,64,3],[72,6,64,3,"key"],[72,9,64,3],[73,6,64,3,"value"],[73,11,64,3],[73,13,65,2],[73,22,65,2,"writeUInt32"],[73,33,65,13,"writeUInt32"],[73,34,65,14,"i"],[73,35,65,15],[73,37,65,17],[74,8,66,4],[74,12,66,8],[74,13,66,9,"offset"],[74,19,66,15],[74,22,66,18],[74,26,66,22],[74,27,66,23,"buffer"],[74,33,66,29],[74,34,66,30,"writeUInt32LE"],[74,47,66,43],[74,48,66,44,"i"],[74,49,66,45],[74,51,66,47],[74,55,66,51],[74,56,66,52,"offset"],[74,62,66,58],[74,63,66,59],[75,6,67,2],[76,4,67,3],[77,6,67,3,"key"],[77,9,67,3],[78,6,67,3,"value"],[78,11,67,3],[78,13,68,2],[78,22,68,2,"writeUInt64"],[78,33,68,13,"writeUInt64"],[78,34,68,14,"i"],[78,35,68,15],[78,37,68,17],[79,8,69,4],[79,12,69,8],[79,13,69,9,"offset"],[79,19,69,15],[79,22,69,18,"writeUInt64LE"],[79,35,69,31],[79,36,69,32],[79,40,69,36],[79,41,69,37,"buffer"],[79,47,69,43],[79,49,69,45,"i"],[79,50,69,46],[79,52,69,48],[79,56,69,52],[79,57,69,53,"offset"],[79,63,69,59],[79,64,69,60],[80,6,70,2],[81,4,70,3],[82,6,70,3,"key"],[82,9,70,3],[83,6,70,3,"value"],[83,11,70,3],[83,13,71,2],[83,22,71,2,"writeVarInt"],[83,33,71,13,"writeVarInt"],[83,34,71,14,"i"],[83,35,71,15],[83,37,71,17],[84,8,72,4,"_$$_REQUIRE"],[84,19,72,4],[84,20,72,4,"_dependencyMap"],[84,34,72,4],[84,58,72,12,"encode"],[84,64,72,18],[84,65,72,19,"i"],[84,66,72,20],[84,68,72,22],[84,72,72,26],[84,73,72,27,"buffer"],[84,79,72,33],[84,81,72,35],[84,85,72,39],[84,86,72,40,"offset"],[84,92,72,46],[84,93,72,47],[85,8,73,4],[85,12,73,8],[85,13,73,9,"offset"],[85,19,73,15],[85,23,73,19,"_$$_REQUIRE"],[85,34,73,19],[85,35,73,19,"_dependencyMap"],[85,49,73,19],[85,73,73,27,"encode"],[85,79,73,33],[85,80,73,34,"bytes"],[85,85,73,39],[86,6,74,2],[87,4,74,3],[88,6,74,3,"key"],[88,9,74,3],[89,6,74,3,"value"],[89,11,74,3],[89,13,75,2],[89,22,75,2,"writeSlice"],[89,32,75,12,"writeSlice"],[89,33,75,13,"slice"],[89,38,75,18],[89,40,75,20],[90,8,76,4],[90,12,76,8],[90,16,76,12],[90,17,76,13,"buffer"],[90,23,76,19],[90,24,76,20,"length"],[90,30,76,26],[90,33,76,29],[90,37,76,33],[90,38,76,34,"offset"],[90,44,76,40],[90,47,76,43,"slice"],[90,52,76,48],[90,53,76,49,"length"],[90,59,76,55],[90,61,76,57],[91,10,77,6],[91,16,77,12],[91,20,77,16,"Error"],[91,25,77,21],[91,26,77,22],[91,60,77,56],[91,61,77,57],[92,8,78,4],[93,8,79,4],[93,12,79,8],[93,13,79,9,"offset"],[93,19,79,15],[93,23,79,19,"slice"],[93,28,79,24],[93,29,79,25,"copy"],[93,33,79,29],[93,34,79,30],[93,38,79,34],[93,39,79,35,"buffer"],[93,45,79,41],[93,47,79,43],[93,51,79,47],[93,52,79,48,"offset"],[93,58,79,54],[93,59,79,55],[94,6,80,2],[95,4,80,3],[96,6,80,3,"key"],[96,9,80,3],[97,6,80,3,"value"],[97,11,80,3],[97,13,81,2],[97,22,81,2,"writeVarSlice"],[97,35,81,15,"writeVarSlice"],[97,36,81,16,"slice"],[97,41,81,21],[97,43,81,23],[98,8,82,4],[98,12,82,8],[98,13,82,9,"writeVarInt"],[98,24,82,20],[98,25,82,21,"slice"],[98,30,82,26],[98,31,82,27,"length"],[98,37,82,33],[98,38,82,34],[99,8,83,4],[99,12,83,8],[99,13,83,9,"writeSlice"],[99,23,83,19],[99,24,83,20,"slice"],[99,29,83,25],[99,30,83,26],[100,6,84,2],[101,4,84,3],[102,6,84,3,"key"],[102,9,84,3],[103,6,84,3,"value"],[103,11,84,3],[103,13,85,2],[103,22,85,2,"writeVector"],[103,33,85,13,"writeVector"],[103,34,85,14,"vector"],[103,40,85,20],[103,42,85,22],[104,8,85,22],[104,12,85,22,"_this"],[104,17,85,22],[105,8,86,4],[105,12,86,8],[105,13,86,9,"writeVarInt"],[105,24,86,20],[105,25,86,21,"vector"],[105,31,86,27],[105,32,86,28,"length"],[105,38,86,34],[105,39,86,35],[106,8,87,4,"vector"],[106,14,87,10],[106,15,87,11,"forEach"],[106,22,87,18],[106,23,87,19],[106,33,87,19,"buf"],[106,36,87,22],[107,10,87,22],[107,17,87,26,"_this"],[107,22,87,30],[107,23,87,31,"writeVarSlice"],[107,36,87,44],[107,37,87,45,"buf"],[107,40,87,48],[107,41,87,49],[108,8,87,49],[108,10,87,50],[109,6,88,2],[110,4,88,3],[111,2,88,3],[112,2,90,0,"exports"],[112,9,90,7],[112,10,90,8,"BufferWriter"],[112,22,90,20],[112,25,90,23,"BufferWriter"],[112,37,90,35],[113,2,91,0],[114,0,92,0],[115,0,93,0],[116,2,91,0],[116,6,94,6,"BufferReader"],[116,18,94,18],[117,4,95,2],[117,13,95,2,"BufferReader"],[117,26,95,14,"buffer"],[117,32,95,20],[117,34,95,34],[118,6,95,34],[118,10,95,22,"offset"],[118,16,95,28],[118,19,95,28,"arguments"],[118,28,95,28],[118,29,95,28,"length"],[118,35,95,28],[118,43,95,28,"arguments"],[118,52,95,28],[118,60,95,28,"undefined"],[118,69,95,28],[118,72,95,28,"arguments"],[118,81,95,28],[118,87,95,31],[118,88,95,32],[119,6,95,32,"_classCallCheck"],[119,21,95,32],[119,28,95,32,"BufferReader"],[119,40,95,32],[120,6,96,4],[120,10,96,8],[120,11,96,9,"buffer"],[120,17,96,15],[120,20,96,18,"buffer"],[120,26,96,24],[121,6,97,4],[121,10,97,8],[121,11,97,9,"offset"],[121,17,97,15],[121,20,97,18,"offset"],[121,26,97,24],[122,6,98,4,"_$$_REQUIRE"],[122,17,98,4],[122,18,98,4,"_dependencyMap"],[122,32,98,4],[122,50,98,14,"_$$_REQUIRE"],[122,61,98,14],[122,62,98,14,"_dependencyMap"],[122,76,98,14],[122,92,98,20,"tuple"],[122,97,98,25],[122,98,98,26,"_$$_REQUIRE"],[122,109,98,26],[122,110,98,26,"_dependencyMap"],[122,124,98,26],[122,140,98,32,"Buffer"],[122,146,98,38],[122,148,98,40,"_$$_REQUIRE"],[122,159,98,40],[122,160,98,40,"_dependencyMap"],[122,174,98,40],[122,190,98,46,"UInt32"],[122,196,98,52],[122,197,98,53],[122,199,98,55],[122,200,98,56,"buffer"],[122,206,98,62],[122,208,98,64,"offset"],[122,214,98,70],[122,215,98,71],[122,216,98,72],[123,4,99,2],[124,4,99,3],[124,11,99,3,"_createClass"],[124,23,99,3],[124,24,99,3,"BufferReader"],[124,36,99,3],[125,6,99,3,"key"],[125,9,99,3],[126,6,99,3,"value"],[126,11,99,3],[126,13,100,2],[126,22,100,2,"readUInt8"],[126,31,100,11,"readUInt8"],[126,32,100,11],[126,34,100,14],[127,8,101,4],[127,12,101,10,"result"],[127,18,101,16],[127,21,101,19],[127,25,101,23],[127,26,101,24,"buffer"],[127,32,101,30],[127,33,101,31,"readUInt8"],[127,42,101,40],[127,43,101,41],[127,47,101,45],[127,48,101,46,"offset"],[127,54,101,52],[127,55,101,53],[128,8,102,4],[128,12,102,8],[128,13,102,9,"offset"],[128,19,102,15],[128,21,102,17],[129,8,103,4],[129,15,103,11,"result"],[129,21,103,17],[130,6,104,2],[131,4,104,3],[132,6,104,3,"key"],[132,9,104,3],[133,6,104,3,"value"],[133,11,104,3],[133,13,105,2],[133,22,105,2,"readInt32"],[133,31,105,11,"readInt32"],[133,32,105,11],[133,34,105,14],[134,8,106,4],[134,12,106,10,"result"],[134,18,106,16],[134,21,106,19],[134,25,106,23],[134,26,106,24,"buffer"],[134,32,106,30],[134,33,106,31,"readInt32LE"],[134,44,106,42],[134,45,106,43],[134,49,106,47],[134,50,106,48,"offset"],[134,56,106,54],[134,57,106,55],[135,8,107,4],[135,12,107,8],[135,13,107,9,"offset"],[135,19,107,15],[135,23,107,19],[135,24,107,20],[136,8,108,4],[136,15,108,11,"result"],[136,21,108,17],[137,6,109,2],[138,4,109,3],[139,6,109,3,"key"],[139,9,109,3],[140,6,109,3,"value"],[140,11,109,3],[140,13,110,2],[140,22,110,2,"readUInt32"],[140,32,110,12,"readUInt32"],[140,33,110,12],[140,35,110,15],[141,8,111,4],[141,12,111,10,"result"],[141,18,111,16],[141,21,111,19],[141,25,111,23],[141,26,111,24,"buffer"],[141,32,111,30],[141,33,111,31,"readUInt32LE"],[141,45,111,43],[141,46,111,44],[141,50,111,48],[141,51,111,49,"offset"],[141,57,111,55],[141,58,111,56],[142,8,112,4],[142,12,112,8],[142,13,112,9,"offset"],[142,19,112,15],[142,23,112,19],[142,24,112,20],[143,8,113,4],[143,15,113,11,"result"],[143,21,113,17],[144,6,114,2],[145,4,114,3],[146,6,114,3,"key"],[146,9,114,3],[147,6,114,3,"value"],[147,11,114,3],[147,13,115,2],[147,22,115,2,"readUInt64"],[147,32,115,12,"readUInt64"],[147,33,115,12],[147,35,115,15],[148,8,116,4],[148,12,116,10,"result"],[148,18,116,16],[148,21,116,19,"readUInt64LE"],[148,33,116,31],[148,34,116,32],[148,38,116,36],[148,39,116,37,"buffer"],[148,45,116,43],[148,47,116,45],[148,51,116,49],[148,52,116,50,"offset"],[148,58,116,56],[148,59,116,57],[149,8,117,4],[149,12,117,8],[149,13,117,9,"offset"],[149,19,117,15],[149,23,117,19],[149,24,117,20],[150,8,118,4],[150,15,118,11,"result"],[150,21,118,17],[151,6,119,2],[152,4,119,3],[153,6,119,3,"key"],[153,9,119,3],[154,6,119,3,"value"],[154,11,119,3],[154,13,120,2],[154,22,120,2,"readVarInt"],[154,32,120,12,"readVarInt"],[154,33,120,12],[154,35,120,15],[155,8,121,4],[155,12,121,10,"vi"],[155,14,121,12],[155,17,121,15,"_$$_REQUIRE"],[155,28,121,15],[155,29,121,15,"_dependencyMap"],[155,43,121,15],[155,67,121,23,"decode"],[155,73,121,29],[155,74,121,30],[155,78,121,34],[155,79,121,35,"buffer"],[155,85,121,41],[155,87,121,43],[155,91,121,47],[155,92,121,48,"offset"],[155,98,121,54],[155,99,121,55],[156,8,122,4],[156,12,122,8],[156,13,122,9,"offset"],[156,19,122,15],[156,23,122,19,"_$$_REQUIRE"],[156,34,122,19],[156,35,122,19,"_dependencyMap"],[156,49,122,19],[156,73,122,27,"decode"],[156,79,122,33],[156,80,122,34,"bytes"],[156,85,122,39],[157,8,123,4],[157,15,123,11,"vi"],[157,17,123,13],[158,6,124,2],[159,4,124,3],[160,6,124,3,"key"],[160,9,124,3],[161,6,124,3,"value"],[161,11,124,3],[161,13,125,2],[161,22,125,2,"readSlice"],[161,31,125,11,"readSlice"],[161,32,125,12,"n"],[161,33,125,13],[161,35,125,15],[162,8,126,4],[162,12,126,8],[162,16,126,12],[162,17,126,13,"buffer"],[162,23,126,19],[162,24,126,20,"length"],[162,30,126,26],[162,33,126,29],[162,37,126,33],[162,38,126,34,"offset"],[162,44,126,40],[162,47,126,43,"n"],[162,48,126,44],[162,50,126,46],[163,10,127,6],[163,16,127,12],[163,20,127,16,"Error"],[163,25,127,21],[163,26,127,22],[163,59,127,55],[163,60,127,56],[164,8,128,4],[165,8,129,4],[165,12,129,10,"result"],[165,18,129,16],[165,21,129,19],[165,25,129,23],[165,26,129,24,"buffer"],[165,32,129,30],[165,33,129,31,"slice"],[165,38,129,36],[165,39,129,37],[165,43,129,41],[165,44,129,42,"offset"],[165,50,129,48],[165,52,129,50],[165,56,129,54],[165,57,129,55,"offset"],[165,63,129,61],[165,66,129,64,"n"],[165,67,129,65],[165,68,129,66],[166,8,130,4],[166,12,130,8],[166,13,130,9,"offset"],[166,19,130,15],[166,23,130,19,"n"],[166,24,130,20],[167,8,131,4],[167,15,131,11,"result"],[167,21,131,17],[168,6,132,2],[169,4,132,3],[170,6,132,3,"key"],[170,9,132,3],[171,6,132,3,"value"],[171,11,132,3],[171,13,133,2],[171,22,133,2,"readVarSlice"],[171,34,133,14,"readVarSlice"],[171,35,133,14],[171,37,133,17],[172,8,134,4],[172,15,134,11],[172,19,134,15],[172,20,134,16,"readSlice"],[172,29,134,25],[172,30,134,26],[172,34,134,30],[172,35,134,31,"readVarInt"],[172,45,134,41],[172,46,134,42],[172,47,134,43],[172,48,134,44],[173,6,135,2],[174,4,135,3],[175,6,135,3,"key"],[175,9,135,3],[176,6,135,3,"value"],[176,11,135,3],[176,13,136,2],[176,22,136,2,"readVector"],[176,32,136,12,"readVector"],[176,33,136,12],[176,35,136,15],[177,8,137,4],[177,12,137,10,"count"],[177,17,137,15],[177,20,137,18],[177,24,137,22],[177,25,137,23,"readVarInt"],[177,35,137,33],[177,36,137,34],[177,37,137,35],[178,8,138,4],[178,12,138,10,"vector"],[178,18,138,16],[178,21,138,19],[178,23,138,21],[179,8,139,4],[179,13,139,9],[179,17,139,13,"i"],[179,18,139,14],[179,21,139,17],[179,22,139,18],[179,24,139,20,"i"],[179,25,139,21],[179,28,139,24,"count"],[179,33,139,29],[179,35,139,31,"i"],[179,36,139,32],[179,38,139,34],[179,40,139,36,"vector"],[179,46,139,42],[179,47,139,43,"push"],[179,51,139,47],[179,52,139,48],[179,56,139,52],[179,57,139,53,"readVarSlice"],[179,69,139,65],[179,70,139,66],[179,71,139,67],[179,72,139,68],[180,8,140,4],[180,15,140,11,"vector"],[180,21,140,17],[181,6,141,2],[182,4,141,3],[183,2,141,3],[184,2,143,0,"exports"],[184,9,143,7],[184,10,143,8,"BufferReader"],[184,22,143,20],[184,25,143,23,"BufferReader"],[184,37,143,35],[185,0,143,36],[185,3]],"functionMap":{"names":["<global>","verifuint","readUInt64LE","writeUInt64LE","reverseBuffer","cloneBuffer","BufferWriter","BufferWriter#constructor","BufferWriter#writeUInt8","BufferWriter#writeInt32","BufferWriter#writeUInt32","BufferWriter#writeUInt64","BufferWriter#writeVarInt","BufferWriter#writeSlice","BufferWriter#writeVarSlice","BufferWriter#writeVector","vector.forEach$argument_0","BufferReader","BufferReader#constructor","BufferReader#readUInt8","BufferReader#readInt32","BufferReader#readUInt32","BufferReader#readUInt64","BufferReader#readVarInt","BufferReader#readSlice","BufferReader#readVarSlice","BufferReader#readVector"],"mappings":"AAA;ACM;CDQ;AEC;CFM;AGE;CHK;AIE;CJW;AKE;CLI;AMK;ECC;GDI;EEC;GFE;EGC;GHE;EIC;GJE;EKC;GLE;EMC;GNG;EOC;GPK;EQC;GRG;ESC;mBCE,8BD;GTC;CNC;AiBK;ECC;GDI;EEC;GFI;EGC;GHI;EIC;GJI;EKC;GLI;EMC;GNI;EOC;GPO;EQC;GRE;ESC;GTK;CjBC"}},"type":"js/module"}]}