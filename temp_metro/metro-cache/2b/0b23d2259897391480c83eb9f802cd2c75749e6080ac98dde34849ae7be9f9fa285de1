{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.encode = exports.decode = void 0;\n  /**\n   * Decodes a script number from a buffer.\n   *\n   * @param buffer - The buffer containing the script number.\n   * @param maxLength - The maximum length of the script number. Defaults to 4.\n   * @param minimal - Whether the script number should be minimal. Defaults to true.\n   * @returns The decoded script number.\n   * @throws {TypeError} If the script number overflows the maximum length.\n   * @throws {Error} If the script number is not minimally encoded when minimal is true.\n   */\n  function decode(buffer, maxLength, minimal) {\n    maxLength = maxLength || 4;\n    minimal = minimal === undefined ? true : minimal;\n    var length = buffer.length;\n    if (length === 0) return 0;\n    if (length > maxLength) throw new TypeError('Script number overflow');\n    if (minimal) {\n      if ((buffer[length - 1] & 0x7f) === 0) {\n        if (length <= 1 || (buffer[length - 2] & 0x80) === 0) throw new Error('Non-minimally encoded script number');\n      }\n    }\n    // 40-bit\n    if (length === 5) {\n      var a = buffer.readUInt32LE(0);\n      var b = buffer.readUInt8(4);\n      if (b & 0x80) return -((b & ~0x80) * 0x100000000 + a);\n      return b * 0x100000000 + a;\n    }\n    // 32-bit / 24-bit / 16-bit / 8-bit\n    var result = 0;\n    for (var i = 0; i < length; ++i) {\n      result |= buffer[i] << 8 * i;\n    }\n    if (buffer[length - 1] & 0x80) return -(result & ~(0x80 << 8 * (length - 1)));\n    return result;\n  }\n  exports.decode = decode;\n  function scriptNumSize(i) {\n    return i > 0x7fffffff ? 5 : i > 0x7fffff ? 4 : i > 0x7fff ? 3 : i > 0x7f ? 2 : i > 0x00 ? 1 : 0;\n  }\n  /**\n   * Encodes a number into a Buffer using a specific format.\n   *\n   * @param _number - The number to encode.\n   * @returns The encoded number as a Buffer.\n   */\n  function encode(_number) {\n    var value = Math.abs(_number);\n    var size = scriptNumSize(value);\n    var buffer = Buffer.allocUnsafe(size);\n    var negative = _number < 0;\n    for (var i = 0; i < size; ++i) {\n      buffer.writeUInt8(value & 0xff, i);\n      value >>= 8;\n    }\n    if (buffer[size - 1] & 0x80) {\n      buffer.writeUInt8(negative ? 0x80 : 0x00, size - 1);\n    } else if (negative) {\n      buffer[size - 1] |= 0x80;\n    }\n    return buffer;\n  }\n  exports.encode = encode;\n});","lineCount":71,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"encode"],[7,16,3,14],[7,19,3,17,"exports"],[7,26,3,24],[7,27,3,25,"decode"],[7,33,3,31],[7,36,3,34],[7,41,3,39],[7,42,3,40],[8,2,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,2,14,0],[18,11,14,9,"decode"],[18,17,14,15,"decode"],[18,18,14,16,"buffer"],[18,24,14,22],[18,26,14,24,"maxLength"],[18,35,14,33],[18,37,14,35,"minimal"],[18,44,14,42],[18,46,14,44],[19,4,15,2,"maxLength"],[19,13,15,11],[19,16,15,14,"maxLength"],[19,25,15,23],[19,29,15,27],[19,30,15,28],[20,4,16,2,"minimal"],[20,11,16,9],[20,14,16,12,"minimal"],[20,21,16,19],[20,26,16,24,"undefined"],[20,35,16,33],[20,38,16,36],[20,42,16,40],[20,45,16,43,"minimal"],[20,52,16,50],[21,4,17,2],[21,8,17,8,"length"],[21,14,17,14],[21,17,17,17,"buffer"],[21,23,17,23],[21,24,17,24,"length"],[21,30,17,30],[22,4,18,2],[22,8,18,6,"length"],[22,14,18,12],[22,19,18,17],[22,20,18,18],[22,22,18,20],[22,29,18,27],[22,30,18,28],[23,4,19,2],[23,8,19,6,"length"],[23,14,19,12],[23,17,19,15,"maxLength"],[23,26,19,24],[23,28,19,26],[23,34,19,32],[23,38,19,36,"TypeError"],[23,47,19,45],[23,48,19,46],[23,72,19,70],[23,73,19,71],[24,4,20,2],[24,8,20,6,"minimal"],[24,15,20,13],[24,17,20,15],[25,6,21,4],[25,10,21,8],[25,11,21,9,"buffer"],[25,17,21,15],[25,18,21,16,"length"],[25,24,21,22],[25,27,21,25],[25,28,21,26],[25,29,21,27],[25,32,21,30],[25,36,21,34],[25,42,21,40],[25,43,21,41],[25,45,21,43],[26,8,22,6],[26,12,22,10,"length"],[26,18,22,16],[26,22,22,20],[26,23,22,21],[26,27,22,25],[26,28,22,26,"buffer"],[26,34,22,32],[26,35,22,33,"length"],[26,41,22,39],[26,44,22,42],[26,45,22,43],[26,46,22,44],[26,49,22,47],[26,53,22,51],[26,59,22,57],[26,60,22,58],[26,62,23,8],[26,68,23,14],[26,72,23,18,"Error"],[26,77,23,23],[26,78,23,24],[26,115,23,61],[26,116,23,62],[27,6,24,4],[28,4,25,2],[29,4,26,2],[30,4,27,2],[30,8,27,6,"length"],[30,14,27,12],[30,19,27,17],[30,20,27,18],[30,22,27,20],[31,6,28,4],[31,10,28,10,"a"],[31,11,28,11],[31,14,28,14,"buffer"],[31,20,28,20],[31,21,28,21,"readUInt32LE"],[31,33,28,33],[31,34,28,34],[31,35,28,35],[31,36,28,36],[32,6,29,4],[32,10,29,10,"b"],[32,11,29,11],[32,14,29,14,"buffer"],[32,20,29,20],[32,21,29,21,"readUInt8"],[32,30,29,30],[32,31,29,31],[32,32,29,32],[32,33,29,33],[33,6,30,4],[33,10,30,8,"b"],[33,11,30,9],[33,14,30,12],[33,18,30,16],[33,20,30,18],[33,27,30,25],[33,29,30,27],[33,30,30,28,"b"],[33,31,30,29],[33,34,30,32],[33,35,30,33],[33,39,30,37],[33,43,30,41],[33,54,30,52],[33,57,30,55,"a"],[33,58,30,56],[33,59,30,57],[34,6,31,4],[34,13,31,11,"b"],[34,14,31,12],[34,17,31,15],[34,28,31,26],[34,31,31,29,"a"],[34,32,31,30],[35,4,32,2],[36,4,33,2],[37,4,34,2],[37,8,34,6,"result"],[37,14,34,12],[37,17,34,15],[37,18,34,16],[38,4,35,2],[38,9,35,7],[38,13,35,11,"i"],[38,14,35,12],[38,17,35,15],[38,18,35,16],[38,20,35,18,"i"],[38,21,35,19],[38,24,35,22,"length"],[38,30,35,28],[38,32,35,30],[38,34,35,32,"i"],[38,35,35,33],[38,37,35,35],[39,6,36,4,"result"],[39,12,36,10],[39,16,36,14,"buffer"],[39,22,36,20],[39,23,36,21,"i"],[39,24,36,22],[39,25,36,23],[39,29,36,28],[39,30,36,29],[39,33,36,32,"i"],[39,34,36,34],[40,4,37,2],[41,4,38,2],[41,8,38,6,"buffer"],[41,14,38,12],[41,15,38,13,"length"],[41,21,38,19],[41,24,38,22],[41,25,38,23],[41,26,38,24],[41,29,38,27],[41,33,38,31],[41,35,39,4],[41,42,39,11],[41,44,39,13,"result"],[41,50,39,19],[41,53,39,22],[41,55,39,24],[41,59,39,28],[41,63,39,33],[41,64,39,34],[41,68,39,38,"length"],[41,74,39,44],[41,77,39,47],[41,78,39,48],[41,79,39,50],[41,80,39,51],[41,81,39,52],[42,4,40,2],[42,11,40,9,"result"],[42,17,40,15],[43,2,41,0],[44,2,42,0,"exports"],[44,9,42,7],[44,10,42,8,"decode"],[44,16,42,14],[44,19,42,17,"decode"],[44,25,42,23],[45,2,43,0],[45,11,43,9,"scriptNumSize"],[45,24,43,22,"scriptNumSize"],[45,25,43,23,"i"],[45,26,43,24],[45,28,43,26],[46,4,44,2],[46,11,44,9,"i"],[46,12,44,10],[46,15,44,13],[46,25,44,23],[46,28,45,6],[46,29,45,7],[46,32,46,6,"i"],[46,33,46,7],[46,36,46,10],[46,44,46,18],[46,47,47,6],[46,48,47,7],[46,51,48,6,"i"],[46,52,48,7],[46,55,48,10],[46,61,48,16],[46,64,49,6],[46,65,49,7],[46,68,50,6,"i"],[46,69,50,7],[46,72,50,10],[46,76,50,14],[46,79,51,6],[46,80,51,7],[46,83,52,6,"i"],[46,84,52,7],[46,87,52,10],[46,91,52,14],[46,94,53,6],[46,95,53,7],[46,98,54,6],[46,99,54,7],[47,2,55,0],[48,2,56,0],[49,0,57,0],[50,0,58,0],[51,0,59,0],[52,0,60,0],[53,0,61,0],[54,2,62,0],[54,11,62,9,"encode"],[54,17,62,15,"encode"],[54,18,62,16,"_number"],[54,25,62,23],[54,27,62,25],[55,4,63,2],[55,8,63,6,"value"],[55,13,63,11],[55,16,63,14,"Math"],[55,20,63,18],[55,21,63,19,"abs"],[55,24,63,22],[55,25,63,23,"_number"],[55,32,63,30],[55,33,63,31],[56,4,64,2],[56,8,64,8,"size"],[56,12,64,12],[56,15,64,15,"scriptNumSize"],[56,28,64,28],[56,29,64,29,"value"],[56,34,64,34],[56,35,64,35],[57,4,65,2],[57,8,65,8,"buffer"],[57,14,65,14],[57,17,65,17,"Buffer"],[57,23,65,23],[57,24,65,24,"allocUnsafe"],[57,35,65,35],[57,36,65,36,"size"],[57,40,65,40],[57,41,65,41],[58,4,66,2],[58,8,66,8,"negative"],[58,16,66,16],[58,19,66,19,"_number"],[58,26,66,26],[58,29,66,29],[58,30,66,30],[59,4,67,2],[59,9,67,7],[59,13,67,11,"i"],[59,14,67,12],[59,17,67,15],[59,18,67,16],[59,20,67,18,"i"],[59,21,67,19],[59,24,67,22,"size"],[59,28,67,26],[59,30,67,28],[59,32,67,30,"i"],[59,33,67,31],[59,35,67,33],[60,6,68,4,"buffer"],[60,12,68,10],[60,13,68,11,"writeUInt8"],[60,23,68,21],[60,24,68,22,"value"],[60,29,68,27],[60,32,68,30],[60,36,68,34],[60,38,68,36,"i"],[60,39,68,37],[60,40,68,38],[61,6,69,4,"value"],[61,11,69,9],[61,16,69,14],[61,17,69,15],[62,4,70,2],[63,4,71,2],[63,8,71,6,"buffer"],[63,14,71,12],[63,15,71,13,"size"],[63,19,71,17],[63,22,71,20],[63,23,71,21],[63,24,71,22],[63,27,71,25],[63,31,71,29],[63,33,71,31],[64,6,72,4,"buffer"],[64,12,72,10],[64,13,72,11,"writeUInt8"],[64,23,72,21],[64,24,72,22,"negative"],[64,32,72,30],[64,35,72,33],[64,39,72,37],[64,42,72,40],[64,46,72,44],[64,48,72,46,"size"],[64,52,72,50],[64,55,72,53],[64,56,72,54],[64,57,72,55],[65,4,73,2],[65,5,73,3],[65,11,73,9],[65,15,73,13,"negative"],[65,23,73,21],[65,25,73,23],[66,6,74,4,"buffer"],[66,12,74,10],[66,13,74,11,"size"],[66,17,74,15],[66,20,74,18],[66,21,74,19],[66,22,74,20],[66,26,74,24],[66,30,74,28],[67,4,75,2],[68,4,76,2],[68,11,76,9,"buffer"],[68,17,76,15],[69,2,77,0],[70,2,78,0,"exports"],[70,9,78,7],[70,10,78,8,"encode"],[70,16,78,14],[70,19,78,17,"encode"],[70,25,78,23],[71,0,78,24],[71,3]],"functionMap":{"names":["<global>","decode","scriptNumSize","encode"],"mappings":"AAA;ACa;CD2B;AEE;CFY;AGO;CHe"}},"type":"js/module"}]}