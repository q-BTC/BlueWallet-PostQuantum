{"dependencies":[{"name":"bs58check","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":34,"index":332},"end":{"line":7,"column":54,"index":352}}],"key":"4OUKwPALIMTasKbVl6WljOsf4WA="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.encode = exports.decode = exports.encodeRaw = exports.decodeRaw = void 0;\n  var bs58check_1 = __importDefault(_$$_REQUIRE(_dependencyMap[0], \"bs58check\"));\n  function decodeRaw(buffer, version) {\n    // check version only if defined\n    if (version !== undefined && buffer[0] !== version) throw new Error('Invalid network version');\n    // uncompressed\n    if (buffer.length === 33) {\n      return {\n        version: buffer[0],\n        privateKey: buffer.slice(1, 33),\n        compressed: false\n      };\n    }\n    // invalid length\n    if (buffer.length !== 34) throw new Error('Invalid WIF length');\n    // invalid compression flag\n    if (buffer[33] !== 0x01) throw new Error('Invalid compression flag');\n    return {\n      version: buffer[0],\n      privateKey: buffer.slice(1, 33),\n      compressed: true\n    };\n  }\n  exports.decodeRaw = decodeRaw;\n  function encodeRaw(version, privateKey, compressed) {\n    if (privateKey.length !== 32) throw new TypeError('Invalid privateKey length');\n    var result = new Uint8Array(compressed ? 34 : 33);\n    var view = new DataView(result.buffer);\n    view.setUint8(0, version);\n    result.set(privateKey, 1);\n    if (compressed) {\n      result[33] = 0x01;\n    }\n    return result;\n  }\n  exports.encodeRaw = encodeRaw;\n  function decode(str, version) {\n    return decodeRaw(bs58check_1.default.decode(str), version);\n  }\n  exports.decode = decode;\n  function encode(wif) {\n    return bs58check_1.default.encode(encodeRaw(wif.version, wif.privateKey, wif.compressed));\n  }\n  exports.encode = encode;\n});","lineCount":56,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__importDefault"],[4,21,2,19],[4,24,2,23],[4,28,2,27],[4,32,2,31],[4,36,2,35],[4,37,2,36,"__importDefault"],[4,52,2,51],[4,56,2,56],[4,66,2,66,"mod"],[4,69,2,69],[4,71,2,71],[5,4,3,4],[5,11,3,12,"mod"],[5,14,3,15],[5,18,3,19,"mod"],[5,21,3,22],[5,22,3,23,"__esModule"],[5,32,3,33],[5,35,3,37,"mod"],[5,38,3,40],[5,41,3,43],[6,6,3,45],[6,15,3,54],[6,17,3,56,"mod"],[7,4,3,60],[7,5,3,61],[8,2,4,0],[8,3,4,1],[9,2,5,0,"Object"],[9,8,5,6],[9,9,5,7,"defineProperty"],[9,23,5,21],[9,24,5,22,"exports"],[9,31,5,29],[9,33,5,31],[9,45,5,43],[9,47,5,45],[10,4,5,47,"value"],[10,9,5,52],[10,11,5,54],[11,2,5,59],[11,3,5,60],[11,4,5,61],[12,2,6,0,"exports"],[12,9,6,7],[12,10,6,8,"encode"],[12,16,6,14],[12,19,6,17,"exports"],[12,26,6,24],[12,27,6,25,"decode"],[12,33,6,31],[12,36,6,34,"exports"],[12,43,6,41],[12,44,6,42,"encodeRaw"],[12,53,6,51],[12,56,6,54,"exports"],[12,63,6,61],[12,64,6,62,"decodeRaw"],[12,73,6,71],[12,76,6,74],[12,81,6,79],[12,82,6,80],[13,2,7,0],[13,6,7,4,"bs58check_1"],[13,17,7,15],[13,20,7,18,"__importDefault"],[13,35,7,33],[13,36,7,34,"require"],[13,47,7,41],[13,48,7,41,"_dependencyMap"],[13,62,7,41],[13,78,7,53],[13,79,7,54],[13,80,7,55],[14,2,8,0],[14,11,8,9,"decodeRaw"],[14,20,8,18,"decodeRaw"],[14,21,8,19,"buffer"],[14,27,8,25],[14,29,8,27,"version"],[14,36,8,34],[14,38,8,36],[15,4,9,4],[16,4,10,4],[16,8,10,8,"version"],[16,15,10,15],[16,20,10,20,"undefined"],[16,29,10,29],[16,33,10,33,"buffer"],[16,39,10,39],[16,40,10,40],[16,41,10,41],[16,42,10,42],[16,47,10,47,"version"],[16,54,10,54],[16,56,11,8],[16,62,11,14],[16,66,11,18,"Error"],[16,71,11,23],[16,72,11,24],[16,97,11,49],[16,98,11,50],[17,4,12,4],[18,4,13,4],[18,8,13,8,"buffer"],[18,14,13,14],[18,15,13,15,"length"],[18,21,13,21],[18,26,13,26],[18,28,13,28],[18,30,13,30],[19,6,14,8],[19,13,14,15],[20,8,15,12,"version"],[20,15,15,19],[20,17,15,21,"buffer"],[20,23,15,27],[20,24,15,28],[20,25,15,29],[20,26,15,30],[21,8,16,12,"privateKey"],[21,18,16,22],[21,20,16,24,"buffer"],[21,26,16,30],[21,27,16,31,"slice"],[21,32,16,36],[21,33,16,37],[21,34,16,38],[21,36,16,40],[21,38,16,42],[21,39,16,43],[22,8,17,12,"compressed"],[22,18,17,22],[22,20,17,24],[23,6,18,8],[23,7,18,9],[24,4,19,4],[25,4,20,4],[26,4,21,4],[26,8,21,8,"buffer"],[26,14,21,14],[26,15,21,15,"length"],[26,21,21,21],[26,26,21,26],[26,28,21,28],[26,30,22,8],[26,36,22,14],[26,40,22,18,"Error"],[26,45,22,23],[26,46,22,24],[26,66,22,44],[26,67,22,45],[27,4,23,4],[28,4,24,4],[28,8,24,8,"buffer"],[28,14,24,14],[28,15,24,15],[28,17,24,17],[28,18,24,18],[28,23,24,23],[28,27,24,27],[28,29,25,8],[28,35,25,14],[28,39,25,18,"Error"],[28,44,25,23],[28,45,25,24],[28,71,25,50],[28,72,25,51],[29,4,26,4],[29,11,26,11],[30,6,27,8,"version"],[30,13,27,15],[30,15,27,17,"buffer"],[30,21,27,23],[30,22,27,24],[30,23,27,25],[30,24,27,26],[31,6,28,8,"privateKey"],[31,16,28,18],[31,18,28,20,"buffer"],[31,24,28,26],[31,25,28,27,"slice"],[31,30,28,32],[31,31,28,33],[31,32,28,34],[31,34,28,36],[31,36,28,38],[31,37,28,39],[32,6,29,8,"compressed"],[32,16,29,18],[32,18,29,20],[33,4,30,4],[33,5,30,5],[34,2,31,0],[35,2,32,0,"exports"],[35,9,32,7],[35,10,32,8,"decodeRaw"],[35,19,32,17],[35,22,32,20,"decodeRaw"],[35,31,32,29],[36,2,33,0],[36,11,33,9,"encodeRaw"],[36,20,33,18,"encodeRaw"],[36,21,33,19,"version"],[36,28,33,26],[36,30,33,28,"privateKey"],[36,40,33,38],[36,42,33,40,"compressed"],[36,52,33,50],[36,54,33,52],[37,4,34,4],[37,8,34,8,"privateKey"],[37,18,34,18],[37,19,34,19,"length"],[37,25,34,25],[37,30,34,30],[37,32,34,32],[37,34,35,8],[37,40,35,14],[37,44,35,18,"TypeError"],[37,53,35,27],[37,54,35,28],[37,81,35,55],[37,82,35,56],[38,4,36,4],[38,8,36,8,"result"],[38,14,36,14],[38,17,36,17],[38,21,36,21,"Uint8Array"],[38,31,36,31],[38,32,36,32,"compressed"],[38,42,36,42],[38,45,36,45],[38,47,36,47],[38,50,36,50],[38,52,36,52],[38,53,36,53],[39,4,37,4],[39,8,37,8,"view"],[39,12,37,12],[39,15,37,15],[39,19,37,19,"DataView"],[39,27,37,27],[39,28,37,28,"result"],[39,34,37,34],[39,35,37,35,"buffer"],[39,41,37,41],[39,42,37,42],[40,4,38,4,"view"],[40,8,38,8],[40,9,38,9,"setUint8"],[40,17,38,17],[40,18,38,18],[40,19,38,19],[40,21,38,21,"version"],[40,28,38,28],[40,29,38,29],[41,4,39,4,"result"],[41,10,39,10],[41,11,39,11,"set"],[41,14,39,14],[41,15,39,15,"privateKey"],[41,25,39,25],[41,27,39,27],[41,28,39,28],[41,29,39,29],[42,4,40,4],[42,8,40,8,"compressed"],[42,18,40,18],[42,20,40,20],[43,6,41,8,"result"],[43,12,41,14],[43,13,41,15],[43,15,41,17],[43,16,41,18],[43,19,41,21],[43,23,41,25],[44,4,42,4],[45,4,43,4],[45,11,43,11,"result"],[45,17,43,17],[46,2,44,0],[47,2,45,0,"exports"],[47,9,45,7],[47,10,45,8,"encodeRaw"],[47,19,45,17],[47,22,45,20,"encodeRaw"],[47,31,45,29],[48,2,46,0],[48,11,46,9,"decode"],[48,17,46,15,"decode"],[48,18,46,16,"str"],[48,21,46,19],[48,23,46,21,"version"],[48,30,46,28],[48,32,46,30],[49,4,47,4],[49,11,47,11,"decodeRaw"],[49,20,47,20],[49,21,47,21,"bs58check_1"],[49,32,47,32],[49,33,47,33,"default"],[49,40,47,40],[49,41,47,41,"decode"],[49,47,47,47],[49,48,47,48,"str"],[49,51,47,51],[49,52,47,52],[49,54,47,54,"version"],[49,61,47,61],[49,62,47,62],[50,2,48,0],[51,2,49,0,"exports"],[51,9,49,7],[51,10,49,8,"decode"],[51,16,49,14],[51,19,49,17,"decode"],[51,25,49,23],[52,2,50,0],[52,11,50,9,"encode"],[52,17,50,15,"encode"],[52,18,50,16,"wif"],[52,21,50,19],[52,23,50,21],[53,4,51,4],[53,11,51,11,"bs58check_1"],[53,22,51,22],[53,23,51,23,"default"],[53,30,51,30],[53,31,51,31,"encode"],[53,37,51,37],[53,38,51,38,"encodeRaw"],[53,47,51,47],[53,48,51,48,"wif"],[53,51,51,51],[53,52,51,52,"version"],[53,59,51,59],[53,61,51,61,"wif"],[53,64,51,64],[53,65,51,65,"privateKey"],[53,75,51,75],[53,77,51,77,"wif"],[53,80,51,80],[53,81,51,81,"compressed"],[53,91,51,91],[53,92,51,92],[53,93,51,93],[54,2,52,0],[55,2,53,0,"exports"],[55,9,53,7],[55,10,53,8,"encode"],[55,16,53,14],[55,19,53,17,"encode"],[55,25,53,23],[56,0,53,24],[56,3]],"functionMap":{"names":["<global>","<anonymous>","decodeRaw","encodeRaw","decode","encode"],"mappings":"AAA;wDCC;CDE;AEI;CFuB;AGE;CHW;AIE;CJE;AKE;CLE"}},"type":"js/module"}]}