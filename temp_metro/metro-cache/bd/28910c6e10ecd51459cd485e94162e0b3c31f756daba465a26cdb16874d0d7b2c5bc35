{"dependencies":[{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":557,"column":0,"index":19624}}],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE="}},{"name":"uint8array-tools","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":63,"column":27,"index":2134},"end":{"line":63,"column":54,"index":2161}}],"key":"d9z2uhLIsbEZR4MIqnLfYd/zTK8="}},{"name":"./psbtutils.cjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":60,"column":23,"index":1971},"end":{"line":60,"column":49,"index":1997}},{"start":{"line":60,"column":23,"index":1971},"end":{"line":60,"column":49,"index":1997}},{"start":{"line":60,"column":23,"index":1971},"end":{"line":60,"column":49,"index":1997}},{"start":{"line":64,"column":23,"index":2187},"end":{"line":64,"column":49,"index":2213}},{"start":{"line":60,"column":23,"index":1971},"end":{"line":60,"column":49,"index":1997}}],"key":"u2K9QG5lgvMYhAtZUtcSp/+V7ZI=","isOptional":false}},{"name":"../payments/index.cjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":62,"column":19,"index":2073},"end":{"line":62,"column":51,"index":2105}}],"key":"zQv57pkeD7hOiJCsh5yEfs3DQZ0="}},{"name":"../payments/bip341.cjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":61,"column":20,"index":2019},"end":{"line":61,"column":53,"index":2052}},{"start":{"line":61,"column":20,"index":2019},"end":{"line":61,"column":53,"index":2052}},{"start":{"line":61,"column":20,"index":2019},"end":{"line":61,"column":53,"index":2052}},{"start":{"line":61,"column":20,"index":2019},"end":{"line":61,"column":53,"index":2052}},{"start":{"line":61,"column":20,"index":2019},"end":{"line":61,"column":53,"index":2052}},{"start":{"line":61,"column":20,"index":2019},"end":{"line":61,"column":53,"index":2052}},{"start":{"line":61,"column":20,"index":2019},"end":{"line":61,"column":53,"index":2052}},{"start":{"line":61,"column":20,"index":2019},"end":{"line":61,"column":53,"index":2052}}],"key":"2vkM+v1a1w+fnbvzMsZz4QKvtXI="}},{"name":"../types.cjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":58,"column":19,"index":1867},"end":{"line":58,"column":42,"index":1890}},{"start":{"line":58,"column":19,"index":1867},"end":{"line":58,"column":42,"index":1890}},{"start":{"line":58,"column":19,"index":1867},"end":{"line":58,"column":42,"index":1890}}],"key":"fEWP9g3yw1tvmzSUSkgsecUHZn0="}},{"name":"../transaction.cjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":59,"column":25,"index":1917},"end":{"line":59,"column":54,"index":1946}}],"key":"l1kBmVeDYzhPP7LUFmlbbqY3lSw="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/toConsumableArray\");\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function get() {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, 'default', {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o['default'] = v;\n  });\n  var __importStar = this && this.__importStar || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.toXOnly = void 0;\n  exports.tapScriptFinalizer = tapScriptFinalizer;\n  exports.serializeTaprootSignature = serializeTaprootSignature;\n  exports.isTaprootInput = isTaprootInput;\n  exports.isTaprootOutput = isTaprootOutput;\n  exports.checkTaprootInputFields = checkTaprootInputFields;\n  exports.checkTaprootOutputFields = checkTaprootOutputFields;\n  exports.tweakInternalPubKey = tweakInternalPubKey;\n  exports.tapTreeToList = tapTreeToList;\n  exports.tapTreeFromList = tapTreeFromList;\n  exports.checkTaprootInputForSigs = checkTaprootInputForSigs;\n  var tools = __importStar(_$$_REQUIRE(_dependencyMap[1], \"uint8array-tools\"));\n  /**\n   * Converts a public key to an X-only public key.\n   * @param pubKey The public key to convert.\n   * @returns The X-only public key.\n   */\n  var toXOnly = function toXOnly(pubKey) {\n    return pubKey.length === 32 ? pubKey : pubKey.slice(1, 33);\n  };\n  exports.toXOnly = toXOnly;\n  /**\n   * Default tapscript finalizer. It searches for the `tapLeafHashToFinalize` if provided.\n   * Otherwise it will search for the tapleaf that has at least one signature and has the shortest path.\n   * @param inputIndex the position of the PSBT input.\n   * @param input the PSBT input.\n   * @param tapLeafHashToFinalize optional, if provided the finalizer will search for a tapleaf that has this hash\n   *                              and will try to build the finalScriptWitness.\n   * @returns the finalScriptWitness or throws an exception if no tapleaf found.\n   */\n  function tapScriptFinalizer(inputIndex, input, tapLeafHashToFinalize) {\n    var tapLeaf = findTapLeafToFinalize(input, inputIndex, tapLeafHashToFinalize);\n    try {\n      var sigs = sortSignatures(input, tapLeaf);\n      var witness = sigs.concat(tapLeaf.script).concat(tapLeaf.controlBlock);\n      return {\n        finalScriptWitness: (0, _$$_REQUIRE(_dependencyMap[2], \"./psbtutils.cjs\").witnessStackToScriptWitness)(witness)\n      };\n    } catch (err) {\n      throw new Error(`Can not finalize taproot input #${inputIndex}: ${err}`);\n    }\n  }\n  /**\n   * Serializes a taproot signature.\n   * @param sig The signature to serialize.\n   * @param sighashType The sighash type. Optional.\n   * @returns The serialized taproot signature.\n   */\n  function serializeTaprootSignature(sig, sighashType) {\n    var sighashTypeByte = sighashType ? Uint8Array.from([sighashType]) : Uint8Array.from([]);\n    return tools.concat([sig, sighashTypeByte]);\n  }\n  /**\n   * Checks if a PSBT input is a taproot input.\n   * @param input The PSBT input to check.\n   * @returns True if the input is a taproot input, false otherwise.\n   */\n  function isTaprootInput(input) {\n    return input && !!(input.tapInternalKey || input.tapMerkleRoot || input.tapLeafScript && input.tapLeafScript.length || input.tapBip32Derivation && input.tapBip32Derivation.length || input.witnessUtxo && (0, _$$_REQUIRE(_dependencyMap[2], \"./psbtutils.cjs\").isP2TR)(input.witnessUtxo.script));\n  }\n  /**\n   * Checks if a PSBT output is a taproot output.\n   * @param output The PSBT output to check.\n   * @param script The script to check. Optional.\n   * @returns True if the output is a taproot output, false otherwise.\n   */\n  function isTaprootOutput(output, script) {\n    return output && !!(output.tapInternalKey || output.tapTree || output.tapBip32Derivation && output.tapBip32Derivation.length || script && (0, _$$_REQUIRE(_dependencyMap[2], \"./psbtutils.cjs\").isP2TR)(script));\n  }\n  /**\n   * Checks the taproot input fields for consistency.\n   * @param inputData The original input data.\n   * @param newInputData The new input data.\n   * @param action The action being performed.\n   * @throws Throws an error if the input fields are inconsistent.\n   */\n  function checkTaprootInputFields(inputData, newInputData, action) {\n    checkMixedTaprootAndNonTaprootInputFields(inputData, newInputData, action);\n    checkIfTapLeafInTree(inputData, newInputData, action);\n  }\n  /**\n   * Checks the taproot output fields for consistency.\n   * @param outputData The original output data.\n   * @param newOutputData The new output data.\n   * @param action The action being performed.\n   * @throws Throws an error if the output fields are inconsistent.\n   */\n  function checkTaprootOutputFields(outputData, newOutputData, action) {\n    checkMixedTaprootAndNonTaprootOutputFields(outputData, newOutputData, action);\n    checkTaprootScriptPubkey(outputData, newOutputData);\n  }\n  function checkTaprootScriptPubkey(outputData, newOutputData) {\n    if (!newOutputData.tapTree && !newOutputData.tapInternalKey) return;\n    var tapInternalKey = newOutputData.tapInternalKey || outputData.tapInternalKey;\n    var tapTree = newOutputData.tapTree || outputData.tapTree;\n    if (tapInternalKey) {\n      var scriptPubkey = outputData.script;\n      var script = getTaprootScripPubkey(tapInternalKey, tapTree);\n      if (scriptPubkey && tools.compare(script, scriptPubkey) !== 0) throw new Error('Error adding output. Script or address mismatch.');\n    }\n  }\n  /**\n   * Returns the Taproot script public key.\n   *\n   * @param tapInternalKey - The Taproot internal key.\n   * @param tapTree - The Taproot tree (optional).\n   * @returns The Taproot script public key.\n   */\n  function getTaprootScripPubkey(tapInternalKey, tapTree) {\n    var scriptTree = tapTree && tapTreeFromList(tapTree.leaves);\n    var _ref = (0, _$$_REQUIRE(_dependencyMap[3], \"../payments/index.cjs\").p2tr)({\n        internalPubkey: tapInternalKey,\n        scriptTree: scriptTree\n      }),\n      output = _ref.output;\n    return output;\n  }\n  /**\n   * Tweak the internal public key for a specific input.\n   * @param inputIndex - The index of the input.\n   * @param input - The PsbtInput object representing the input.\n   * @returns The tweaked internal public key.\n   * @throws Error if the tap internal key cannot be tweaked.\n   */\n  function tweakInternalPubKey(inputIndex, input) {\n    var tapInternalKey = input.tapInternalKey;\n    var outputKey = tapInternalKey && (0, _$$_REQUIRE(_dependencyMap[4], \"../payments/bip341.cjs\").tweakKey)(tapInternalKey, input.tapMerkleRoot);\n    if (!outputKey) throw new Error(`Cannot tweak tap internal key for input #${inputIndex}. Public key: ${\n    // tapInternalKey && tapInternalKey.toString('hex')\n    tapInternalKey && tools.toHex(tapInternalKey)}`);\n    return outputKey.x;\n  }\n  /**\n   * Convert a binary tree to a BIP371 type list. Each element of the list is (according to BIP371):\n   * One or more tuples representing the depth, leaf version, and script for a leaf in the Taproot tree,\n   * allowing the entire tree to be reconstructed. The tuples must be in depth first search order so that\n   * the tree is correctly reconstructed.\n   * @param tree the binary tap tree\n   * @returns a list of BIP 371 tapleaves\n   */\n  function tapTreeToList(tree) {\n    if (!(0, _$$_REQUIRE(_dependencyMap[5], \"../types.cjs\").isTaptree)(tree)) throw new Error('Cannot convert taptree to tapleaf list. Expecting a tapree structure.');\n    return _tapTreeToList(tree);\n  }\n  /**\n   * Convert a BIP371 TapLeaf list to a TapTree (binary).\n   * @param leaves a list of tapleaves where each element of the list is (according to BIP371):\n   * One or more tuples representing the depth, leaf version, and script for a leaf in the Taproot tree,\n   * allowing the entire tree to be reconstructed. The tuples must be in depth first search order so that\n   * the tree is correctly reconstructed.\n   * @returns the corresponding taptree, or throws an exception if the tree cannot be reconstructed\n   */\n  function tapTreeFromList() {\n    var leaves = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    if (leaves.length === 1 && leaves[0].depth === 0) return {\n      output: leaves[0].script,\n      version: leaves[0].leafVersion\n    };\n    return instertLeavesInTree(leaves);\n  }\n  /**\n   * Checks the taproot input for signatures.\n   * @param input The PSBT input to check.\n   * @param action The action being performed.\n   * @returns True if the input has taproot signatures, false otherwise.\n   */\n  function checkTaprootInputForSigs(input, action) {\n    var sigs = extractTaprootSigs(input);\n    return sigs.some(function (sig) {\n      return (0, _$$_REQUIRE(_dependencyMap[2], \"./psbtutils.cjs\").signatureBlocksAction)(sig, decodeSchnorrSignature, action);\n    });\n  }\n  /**\n   * Decodes a Schnorr signature.\n   * @param signature The signature to decode.\n   * @returns The decoded Schnorr signature.\n   */\n  function decodeSchnorrSignature(signature) {\n    return {\n      signature: signature.slice(0, 64),\n      hashType: signature.slice(64)[0] || _$$_REQUIRE(_dependencyMap[6], \"../transaction.cjs\").Transaction.SIGHASH_DEFAULT\n    };\n  }\n  /**\n   * Extracts taproot signatures from a PSBT input.\n   * @param input The PSBT input to extract signatures from.\n   * @returns An array of taproot signatures.\n   */\n  function extractTaprootSigs(input) {\n    var sigs = [];\n    if (input.tapKeySig) sigs.push(input.tapKeySig);\n    if (input.tapScriptSig) sigs.push.apply(sigs, _toConsumableArray(input.tapScriptSig.map(function (s) {\n      return s.signature;\n    })));\n    if (!sigs.length) {\n      var finalTapKeySig = getTapKeySigFromWithness(input.finalScriptWitness);\n      if (finalTapKeySig) sigs.push(finalTapKeySig);\n    }\n    return sigs;\n  }\n  /**\n   * Gets the taproot signature from the witness.\n   * @param finalScriptWitness The final script witness.\n   * @returns The taproot signature, or undefined if not found.\n   */\n  function getTapKeySigFromWithness(finalScriptWitness) {\n    if (!finalScriptWitness) return;\n    var witness = finalScriptWitness.slice(2);\n    // todo: add schnorr signature validation\n    if (witness.length === 64 || witness.length === 65) return witness;\n  }\n  /**\n   * Converts a binary tree to a BIP371 type list.\n   * @param tree The binary tap tree.\n   * @param leaves A list of tapleaves. Optional.\n   * @param depth The current depth. Optional.\n   * @returns A list of BIP 371 tapleaves.\n   * @throws Throws an error if the taptree cannot be converted to a tapleaf list.\n   */\n  function _tapTreeToList(tree) {\n    var leaves = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    if (depth > _$$_REQUIRE(_dependencyMap[4], \"../payments/bip341.cjs\").MAX_TAPTREE_DEPTH) throw new Error('Max taptree depth exceeded.');\n    if (!tree) return [];\n    if ((0, _$$_REQUIRE(_dependencyMap[5], \"../types.cjs\").isTapleaf)(tree)) {\n      leaves.push({\n        depth: depth,\n        leafVersion: tree.version || _$$_REQUIRE(_dependencyMap[4], \"../payments/bip341.cjs\").LEAF_VERSION_TAPSCRIPT,\n        script: tree.output\n      });\n      return leaves;\n    }\n    if (tree[0]) _tapTreeToList(tree[0], leaves, depth + 1);\n    if (tree[1]) _tapTreeToList(tree[1], leaves, depth + 1);\n    return leaves;\n  }\n  /**\n   * Inserts the tapleaves into the taproot tree.\n   * @param leaves The tapleaves to insert.\n   * @returns The taproot tree.\n   * @throws Throws an error if there is no room left to insert a tapleaf in the tree.\n   */\n  function instertLeavesInTree(leaves) {\n    var tree;\n    for (var leaf of leaves) {\n      tree = instertLeafInTree(leaf, tree);\n      if (!tree) throw new Error(`No room left to insert tapleaf in tree`);\n    }\n    return tree;\n  }\n  /**\n   * Inserts a tapleaf into the taproot tree.\n   * @param leaf The tapleaf to insert.\n   * @param tree The taproot tree.\n   * @param depth The current depth. Optional.\n   * @returns The updated taproot tree.\n   */\n  function instertLeafInTree(leaf, tree) {\n    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    if (depth > _$$_REQUIRE(_dependencyMap[4], \"../payments/bip341.cjs\").MAX_TAPTREE_DEPTH) throw new Error('Max taptree depth exceeded.');\n    if (leaf.depth === depth) {\n      if (!tree) return {\n        output: leaf.script,\n        version: leaf.leafVersion\n      };\n      return;\n    }\n    if ((0, _$$_REQUIRE(_dependencyMap[5], \"../types.cjs\").isTapleaf)(tree)) return;\n    var leftSide = instertLeafInTree(leaf, tree && tree[0], depth + 1);\n    if (leftSide) return [leftSide, tree && tree[1]];\n    var rightSide = instertLeafInTree(leaf, tree && tree[1], depth + 1);\n    if (rightSide) return [tree && tree[0], rightSide];\n  }\n  /**\n   * Checks the input fields for mixed taproot and non-taproot fields.\n   * @param inputData The original input data.\n   * @param newInputData The new input data.\n   * @param action The action being performed.\n   * @throws Throws an error if the input fields are inconsistent.\n   */\n  function checkMixedTaprootAndNonTaprootInputFields(inputData, newInputData, action) {\n    var isBadTaprootUpdate = isTaprootInput(inputData) && hasNonTaprootFields(newInputData);\n    var isBadNonTaprootUpdate = hasNonTaprootFields(inputData) && isTaprootInput(newInputData);\n    var hasMixedFields = inputData === newInputData && isTaprootInput(newInputData) && hasNonTaprootFields(newInputData); // todo: bad? use !===\n    if (isBadTaprootUpdate || isBadNonTaprootUpdate || hasMixedFields) throw new Error(`Invalid arguments for Psbt.${action}. ` + `Cannot use both taproot and non-taproot fields.`);\n  }\n  /**\n   * Checks the output fields for mixed taproot and non-taproot fields.\n   * @param inputData The original output data.\n   * @param newInputData The new output data.\n   * @param action The action being performed.\n   * @throws Throws an error if the output fields are inconsistent.\n   */\n  function checkMixedTaprootAndNonTaprootOutputFields(inputData, newInputData, action) {\n    var isBadTaprootUpdate = isTaprootOutput(inputData) && hasNonTaprootFields(newInputData);\n    var isBadNonTaprootUpdate = hasNonTaprootFields(inputData) && isTaprootOutput(newInputData);\n    var hasMixedFields = inputData === newInputData && isTaprootOutput(newInputData) && hasNonTaprootFields(newInputData);\n    if (isBadTaprootUpdate || isBadNonTaprootUpdate || hasMixedFields) throw new Error(`Invalid arguments for Psbt.${action}. ` + `Cannot use both taproot and non-taproot fields.`);\n  }\n  /**\n   * Checks if the tap leaf is part of the tap tree for the given input data.\n   * Throws an error if the tap leaf is not part of the tap tree.\n   * @param inputData - The original PsbtInput data.\n   * @param newInputData - The new PsbtInput data.\n   * @param action - The action being performed.\n   * @throws {Error} - If the tap leaf is not part of the tap tree.\n   */\n  function checkIfTapLeafInTree(inputData, newInputData, action) {\n    if (newInputData.tapMerkleRoot) {\n      var newLeafsInTree = (newInputData.tapLeafScript || []).every(function (l) {\n        return isTapLeafInTree(l, newInputData.tapMerkleRoot);\n      });\n      var oldLeafsInTree = (inputData.tapLeafScript || []).every(function (l) {\n        return isTapLeafInTree(l, newInputData.tapMerkleRoot);\n      });\n      if (!newLeafsInTree || !oldLeafsInTree) throw new Error(`Invalid arguments for Psbt.${action}. Tapleaf not part of taptree.`);\n    } else if (inputData.tapMerkleRoot) {\n      var _newLeafsInTree = (newInputData.tapLeafScript || []).every(function (l) {\n        return isTapLeafInTree(l, inputData.tapMerkleRoot);\n      });\n      if (!_newLeafsInTree) throw new Error(`Invalid arguments for Psbt.${action}. Tapleaf not part of taptree.`);\n    }\n  }\n  /**\n   * Checks if a TapLeafScript is present in a Merkle tree.\n   * @param tapLeaf The TapLeafScript to check.\n   * @param merkleRoot The Merkle root of the tree. If not provided, the function assumes the TapLeafScript is present.\n   * @returns A boolean indicating whether the TapLeafScript is present in the tree.\n   */\n  function isTapLeafInTree(tapLeaf, merkleRoot) {\n    if (!merkleRoot) return true;\n    var leafHash = (0, _$$_REQUIRE(_dependencyMap[4], \"../payments/bip341.cjs\").tapleafHash)({\n      output: tapLeaf.script,\n      version: tapLeaf.leafVersion\n    });\n    var rootHash = (0, _$$_REQUIRE(_dependencyMap[4], \"../payments/bip341.cjs\").rootHashFromPath)(tapLeaf.controlBlock, leafHash);\n    return tools.compare(rootHash, merkleRoot) === 0;\n  }\n  /**\n   * Sorts the signatures in the input's tapScriptSig array based on their position in the tapLeaf script.\n   *\n   * @param input - The PsbtInput object.\n   * @param tapLeaf - The TapLeafScript object.\n   * @returns An array of sorted signatures as Buffers.\n   */\n  function sortSignatures(input, tapLeaf) {\n    var leafHash = (0, _$$_REQUIRE(_dependencyMap[4], \"../payments/bip341.cjs\").tapleafHash)({\n      output: tapLeaf.script,\n      version: tapLeaf.leafVersion\n    });\n    return (input.tapScriptSig || []\n    // .filter(tss => tss.leafHash.equals(leafHash))\n    ).filter(function (tss) {\n      return tools.compare(tss.leafHash, leafHash) === 0;\n    }).map(function (tss) {\n      return addPubkeyPositionInScript(tapLeaf.script, tss);\n    }).sort(function (t1, t2) {\n      return t2.positionInScript - t1.positionInScript;\n    }).map(function (t) {\n      return t.signature;\n    });\n  }\n  /**\n   * Adds the position of a public key in a script to a TapScriptSig object.\n   * @param script The script in which to find the position of the public key.\n   * @param tss The TapScriptSig object to add the position to.\n   * @returns A TapScriptSigWitPosition object with the added position.\n   */\n  function addPubkeyPositionInScript(script, tss) {\n    return Object.assign({\n      positionInScript: (0, _$$_REQUIRE(_dependencyMap[2], \"./psbtutils.cjs\").pubkeyPositionInScript)(tss.pubkey, script)\n    }, tss);\n  }\n  /**\n   * Find tapleaf by hash, or get the signed tapleaf with the shortest path.\n   */\n  function findTapLeafToFinalize(input, inputIndex, leafHashToFinalize) {\n    if (!input.tapScriptSig || !input.tapScriptSig.length) throw new Error(`Can not finalize taproot input #${inputIndex}. No tapleaf script signature provided.`);\n    var tapLeaf = (input.tapLeafScript || []).sort(function (a, b) {\n      return a.controlBlock.length - b.controlBlock.length;\n    }).find(function (leaf) {\n      return canFinalizeLeaf(leaf, input.tapScriptSig, leafHashToFinalize);\n    });\n    if (!tapLeaf) throw new Error(`Can not finalize taproot input #${inputIndex}. Signature for tapleaf script not found.`);\n    return tapLeaf;\n  }\n  /**\n   * Determines whether a TapLeafScript can be finalized.\n   *\n   * @param leaf - The TapLeafScript to check.\n   * @param tapScriptSig - The array of TapScriptSig objects.\n   * @param hash - The optional hash to compare with the leaf hash.\n   * @returns A boolean indicating whether the TapLeafScript can be finalized.\n   */\n  function canFinalizeLeaf(leaf, tapScriptSig, hash) {\n    var leafHash = (0, _$$_REQUIRE(_dependencyMap[4], \"../payments/bip341.cjs\").tapleafHash)({\n      output: leaf.script,\n      version: leaf.leafVersion\n    });\n    var whiteListedHash = !hash || tools.compare(leafHash, hash) === 0;\n    return whiteListedHash && tapScriptSig.find(function (tss) {\n      return tools.compare(tss.leafHash, leafHash) === 0;\n    }) !== undefined;\n  }\n  /**\n   * Checks if the given PsbtInput or PsbtOutput has non-taproot fields.\n   * Non-taproot fields include redeemScript, witnessScript, and bip32Derivation.\n   * @param io The PsbtInput or PsbtOutput to check.\n   * @returns A boolean indicating whether the given input or output has non-taproot fields.\n   */\n  function hasNonTaprootFields(io) {\n    return io && !!(io.redeemScript || io.witnessScript || io.bip32Derivation && io.bip32Derivation.length);\n  }\n});","lineCount":452,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_toConsumableArray"],[4,24,1,13],[4,27,1,13,"_$$_REQUIRE"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,2,0],[5,6,2,4,"__createBinding"],[5,21,2,19],[5,24,3,3],[5,28,3,7],[5,32,3,11],[5,36,3,15],[5,37,3,16,"__createBinding"],[5,52,3,31],[5,57,4,3,"Object"],[5,63,4,9],[5,64,4,10,"create"],[5,70,4,16],[5,73,5,6],[5,83,5,16,"o"],[5,84,5,17],[5,86,5,19,"m"],[5,87,5,20],[5,89,5,22,"k"],[5,90,5,23],[5,92,5,25,"k2"],[5,94,5,27],[5,96,5,29],[6,4,6,8],[6,8,6,12,"k2"],[6,10,6,14],[6,15,6,19,"undefined"],[6,24,6,28],[6,26,6,30,"k2"],[6,28,6,32],[6,31,6,35,"k"],[6,32,6,36],[7,4,7,8],[7,8,7,12,"desc"],[7,12,7,16],[7,15,7,19,"Object"],[7,21,7,25],[7,22,7,26,"getOwnPropertyDescriptor"],[7,46,7,50],[7,47,7,51,"m"],[7,48,7,52],[7,50,7,54,"k"],[7,51,7,55],[7,52,7,56],[8,4,8,8],[8,8,9,10],[8,9,9,11,"desc"],[8,13,9,15],[8,18,10,11],[8,23,10,16],[8,27,10,20,"desc"],[8,31,10,24],[8,34,10,27],[8,35,10,28,"m"],[8,36,10,29],[8,37,10,30,"__esModule"],[8,47,10,40],[8,50,10,43,"desc"],[8,54,10,47],[8,55,10,48,"writable"],[8,63,10,56],[8,67,10,60,"desc"],[8,71,10,64],[8,72,10,65,"configurable"],[8,84,10,77],[8,85,10,78],[8,87,11,10],[9,6,12,10,"desc"],[9,10,12,14],[9,13,12,17],[10,8,13,12,"enumerable"],[10,18,13,22],[10,20,13,24],[10,24,13,28],[11,8,14,12,"get"],[11,11,14,15],[11,13,14,17],[11,22,14,12,"get"],[11,25,14,15,"get"],[11,26,14,15],[11,28,14,29],[12,10,15,14],[12,17,15,21,"m"],[12,18,15,22],[12,19,15,23,"k"],[12,20,15,24],[12,21,15,25],[13,8,16,12],[14,6,17,10],[14,7,17,11],[15,4,18,8],[16,4,19,8,"Object"],[16,10,19,14],[16,11,19,15,"defineProperty"],[16,25,19,29],[16,26,19,30,"o"],[16,27,19,31],[16,29,19,33,"k2"],[16,31,19,35],[16,33,19,37,"desc"],[16,37,19,41],[16,38,19,42],[17,2,20,6],[17,3,20,7],[17,6,21,6],[17,16,21,16,"o"],[17,17,21,17],[17,19,21,19,"m"],[17,20,21,20],[17,22,21,22,"k"],[17,23,21,23],[17,25,21,25,"k2"],[17,27,21,27],[17,29,21,29],[18,4,22,8],[18,8,22,12,"k2"],[18,10,22,14],[18,15,22,19,"undefined"],[18,24,22,28],[18,26,22,30,"k2"],[18,28,22,32],[18,31,22,35,"k"],[18,32,22,36],[19,4,23,8,"o"],[19,5,23,9],[19,6,23,10,"k2"],[19,8,23,12],[19,9,23,13],[19,12,23,16,"m"],[19,13,23,17],[19,14,23,18,"k"],[19,15,23,19],[19,16,23,20],[20,2,24,6],[20,3,24,7],[20,4,24,8],[21,2,25,0],[21,6,25,4,"__setModuleDefault"],[21,24,25,22],[21,27,26,3],[21,31,26,7],[21,35,26,11],[21,39,26,15],[21,40,26,16,"__setModuleDefault"],[21,58,26,34],[21,63,27,3,"Object"],[21,69,27,9],[21,70,27,10,"create"],[21,76,27,16],[21,79,28,6],[21,89,28,16,"o"],[21,90,28,17],[21,92,28,19,"v"],[21,93,28,20],[21,95,28,22],[22,4,29,8,"Object"],[22,10,29,14],[22,11,29,15,"defineProperty"],[22,25,29,29],[22,26,29,30,"o"],[22,27,29,31],[22,29,29,33],[22,38,29,42],[22,40,29,44],[23,6,29,46,"enumerable"],[23,16,29,56],[23,18,29,58],[23,22,29,62],[24,6,29,64,"value"],[24,11,29,69],[24,13,29,71,"v"],[25,4,29,73],[25,5,29,74],[25,6,29,75],[26,2,30,6],[26,3,30,7],[26,6,31,6],[26,16,31,16,"o"],[26,17,31,17],[26,19,31,19,"v"],[26,20,31,20],[26,22,31,22],[27,4,32,8,"o"],[27,5,32,9],[27,6,32,10],[27,15,32,19],[27,16,32,20],[27,19,32,23,"v"],[27,20,32,24],[28,2,33,6],[28,3,33,7],[28,4,33,8],[29,2,34,0],[29,6,34,4,"__importStar"],[29,18,34,16],[29,21,35,3],[29,25,35,7],[29,29,35,11],[29,33,35,15],[29,34,35,16,"__importStar"],[29,46,35,28],[29,50,36,2],[29,60,36,12,"mod"],[29,63,36,15],[29,65,36,17],[30,4,37,4],[30,8,37,8,"mod"],[30,11,37,11],[30,15,37,15,"mod"],[30,18,37,18],[30,19,37,19,"__esModule"],[30,29,37,29],[30,31,37,31],[30,38,37,38,"mod"],[30,41,37,41],[31,4,38,4],[31,8,38,8,"result"],[31,14,38,14],[31,17,38,17],[31,18,38,18],[31,19,38,19],[32,4,39,4],[32,8,39,8,"mod"],[32,11,39,11],[32,15,39,15],[32,19,39,19],[32,21,40,6],[32,26,40,11],[32,30,40,15,"k"],[32,31,40,16],[32,35,40,20,"mod"],[32,38,40,23],[32,40,41,8],[32,44,41,12,"k"],[32,45,41,13],[32,50,41,18],[32,59,41,27],[32,63,41,31,"Object"],[32,69,41,37],[32,70,41,38,"prototype"],[32,79,41,47],[32,80,41,48,"hasOwnProperty"],[32,94,41,62],[32,95,41,63,"call"],[32,99,41,67],[32,100,41,68,"mod"],[32,103,41,71],[32,105,41,73,"k"],[32,106,41,74],[32,107,41,75],[32,109,42,10,"__createBinding"],[32,124,42,25],[32,125,42,26,"result"],[32,131,42,32],[32,133,42,34,"mod"],[32,136,42,37],[32,138,42,39,"k"],[32,139,42,40],[32,140,42,41],[33,4,43,4,"__setModuleDefault"],[33,22,43,22],[33,23,43,23,"result"],[33,29,43,29],[33,31,43,31,"mod"],[33,34,43,34],[33,35,43,35],[34,4,44,4],[34,11,44,11,"result"],[34,17,44,17],[35,2,45,2],[35,3,45,3],[36,2,46,0,"Object"],[36,8,46,6],[36,9,46,7,"defineProperty"],[36,23,46,21],[36,24,46,22,"exports"],[36,31,46,29],[36,33,46,31],[36,45,46,43],[36,47,46,45],[37,4,46,47,"value"],[37,9,46,52],[37,11,46,54],[38,2,46,59],[38,3,46,60],[38,4,46,61],[39,2,47,0,"exports"],[39,9,47,7],[39,10,47,8,"toXOnly"],[39,17,47,15],[39,20,47,18],[39,25,47,23],[39,26,47,24],[40,2,48,0,"exports"],[40,9,48,7],[40,10,48,8,"tapScriptFinalizer"],[40,28,48,26],[40,31,48,29,"tapScriptFinalizer"],[40,49,48,47],[41,2,49,0,"exports"],[41,9,49,7],[41,10,49,8,"serializeTaprootSignature"],[41,35,49,33],[41,38,49,36,"serializeTaprootSignature"],[41,63,49,61],[42,2,50,0,"exports"],[42,9,50,7],[42,10,50,8,"isTaprootInput"],[42,24,50,22],[42,27,50,25,"isTaprootInput"],[42,41,50,39],[43,2,51,0,"exports"],[43,9,51,7],[43,10,51,8,"isTaprootOutput"],[43,25,51,23],[43,28,51,26,"isTaprootOutput"],[43,43,51,41],[44,2,52,0,"exports"],[44,9,52,7],[44,10,52,8,"checkTaprootInputFields"],[44,33,52,31],[44,36,52,34,"checkTaprootInputFields"],[44,59,52,57],[45,2,53,0,"exports"],[45,9,53,7],[45,10,53,8,"checkTaprootOutputFields"],[45,34,53,32],[45,37,53,35,"checkTaprootOutputFields"],[45,61,53,59],[46,2,54,0,"exports"],[46,9,54,7],[46,10,54,8,"tweakInternalPubKey"],[46,29,54,27],[46,32,54,30,"tweakInternalPubKey"],[46,51,54,49],[47,2,55,0,"exports"],[47,9,55,7],[47,10,55,8,"tapTreeToList"],[47,23,55,21],[47,26,55,24,"tapTreeToList"],[47,39,55,37],[48,2,56,0,"exports"],[48,9,56,7],[48,10,56,8,"tapTreeFromList"],[48,25,56,23],[48,28,56,26,"tapTreeFromList"],[48,43,56,41],[49,2,57,0,"exports"],[49,9,57,7],[49,10,57,8,"checkTaprootInputForSigs"],[49,34,57,32],[49,37,57,35,"checkTaprootInputForSigs"],[49,61,57,59],[50,2,63,0],[50,6,63,6,"tools"],[50,11,63,11],[50,14,63,14,"__importStar"],[50,26,63,26],[50,27,63,27,"require"],[50,38,63,34],[50,39,63,34,"_dependencyMap"],[50,53,63,34],[50,76,63,53],[50,77,63,54],[50,78,63,55],[51,2,65,0],[52,0,66,0],[53,0,67,0],[54,0,68,0],[55,0,69,0],[56,2,70,0],[56,6,70,6,"toXOnly"],[56,13,70,13],[56,16,70,16],[56,25,70,6,"toXOnly"],[56,32,70,13,"toXOnly"],[56,33,70,16,"pubKey"],[56,39,70,22],[57,4,70,22],[57,11,70,27,"pubKey"],[57,17,70,33],[57,18,70,34,"length"],[57,24,70,40],[57,29,70,45],[57,31,70,47],[57,34,70,50,"pubKey"],[57,40,70,56],[57,43,70,59,"pubKey"],[57,49,70,65],[57,50,70,66,"slice"],[57,55,70,71],[57,56,70,72],[57,57,70,73],[57,59,70,75],[57,61,70,77],[57,62,70,78],[58,2,70,78],[58,3,70,79],[59,2,71,0,"exports"],[59,9,71,7],[59,10,71,8,"toXOnly"],[59,17,71,15],[59,20,71,18,"toXOnly"],[59,27,71,25],[60,2,72,0],[61,0,73,0],[62,0,74,0],[63,0,75,0],[64,0,76,0],[65,0,77,0],[66,0,78,0],[67,0,79,0],[68,0,80,0],[69,2,81,0],[69,11,81,9,"tapScriptFinalizer"],[69,29,81,27,"tapScriptFinalizer"],[69,30,81,28,"inputIndex"],[69,40,81,38],[69,42,81,40,"input"],[69,47,81,45],[69,49,81,47,"tapLeafHashToFinalize"],[69,70,81,68],[69,72,81,70],[70,4,82,2],[70,8,82,8,"tapLeaf"],[70,15,82,15],[70,18,82,18,"findTapLeafToFinalize"],[70,39,82,39],[70,40,83,4,"input"],[70,45,83,9],[70,47,84,4,"inputIndex"],[70,57,84,14],[70,59,85,4,"tapLeafHashToFinalize"],[70,80,86,2],[70,81,86,3],[71,4,87,2],[71,8,87,6],[72,6,88,4],[72,10,88,10,"sigs"],[72,14,88,14],[72,17,88,17,"sortSignatures"],[72,31,88,31],[72,32,88,32,"input"],[72,37,88,37],[72,39,88,39,"tapLeaf"],[72,46,88,46],[72,47,88,47],[73,6,89,4],[73,10,89,10,"witness"],[73,17,89,17],[73,20,89,20,"sigs"],[73,24,89,24],[73,25,89,25,"concat"],[73,31,89,31],[73,32,89,32,"tapLeaf"],[73,39,89,39],[73,40,89,40,"script"],[73,46,89,46],[73,47,89,47],[73,48,89,48,"concat"],[73,54,89,54],[73,55,89,55,"tapLeaf"],[73,62,89,62],[73,63,89,63,"controlBlock"],[73,75,89,75],[73,76,89,76],[74,6,90,4],[74,13,90,11],[75,8,91,6,"finalScriptWitness"],[75,26,91,24],[75,28,91,26],[75,29,91,27],[75,30,91,28],[75,32,91,30,"_$$_REQUIRE"],[75,43,91,30],[75,44,91,30,"_dependencyMap"],[75,58,91,30],[75,82,91,45,"witnessStackToScriptWitness"],[75,109,91,72],[75,111,92,8,"witness"],[75,118,93,6],[76,6,94,4],[76,7,94,5],[77,4,95,2],[77,5,95,3],[77,6,95,4],[77,13,95,11,"err"],[77,16,95,14],[77,18,95,16],[78,6,96,4],[78,12,96,10],[78,16,96,14,"Error"],[78,21,96,19],[78,22,96,20],[78,57,96,55,"inputIndex"],[78,67,96,65],[78,72,96,70,"err"],[78,75,96,73],[78,77,96,75],[78,78,96,76],[79,4,97,2],[80,2,98,0],[81,2,99,0],[82,0,100,0],[83,0,101,0],[84,0,102,0],[85,0,103,0],[86,0,104,0],[87,2,105,0],[87,11,105,9,"serializeTaprootSignature"],[87,36,105,34,"serializeTaprootSignature"],[87,37,105,35,"sig"],[87,40,105,38],[87,42,105,40,"sighashType"],[87,53,105,51],[87,55,105,53],[88,4,106,2],[88,8,106,8,"sighashTypeByte"],[88,23,106,23],[88,26,106,26,"sighashType"],[88,37,106,37],[88,40,107,6,"Uint8Array"],[88,50,107,16],[88,51,107,17,"from"],[88,55,107,21],[88,56,107,22],[88,57,107,23,"sighashType"],[88,68,107,34],[88,69,107,35],[88,70,107,36],[88,73,108,6,"Uint8Array"],[88,83,108,16],[88,84,108,17,"from"],[88,88,108,21],[88,89,108,22],[88,91,108,24],[88,92,108,25],[89,4,109,2],[89,11,109,9,"tools"],[89,16,109,14],[89,17,109,15,"concat"],[89,23,109,21],[89,24,109,22],[89,25,109,23,"sig"],[89,28,109,26],[89,30,109,28,"sighashTypeByte"],[89,45,109,43],[89,46,109,44],[89,47,109,45],[90,2,110,0],[91,2,111,0],[92,0,112,0],[93,0,113,0],[94,0,114,0],[95,0,115,0],[96,2,116,0],[96,11,116,9,"isTaprootInput"],[96,25,116,23,"isTaprootInput"],[96,26,116,24,"input"],[96,31,116,29],[96,33,116,31],[97,4,117,2],[97,11,118,4,"input"],[97,16,118,9],[97,20,119,4],[97,21,119,5],[97,23,120,6,"input"],[97,28,120,11],[97,29,120,12,"tapInternalKey"],[97,43,120,26],[97,47,121,6,"input"],[97,52,121,11],[97,53,121,12,"tapMerkleRoot"],[97,66,121,25],[97,70,122,7,"input"],[97,75,122,12],[97,76,122,13,"tapLeafScript"],[97,89,122,26],[97,93,122,30,"input"],[97,98,122,35],[97,99,122,36,"tapLeafScript"],[97,112,122,49],[97,113,122,50,"length"],[97,119,122,57],[97,123,123,7,"input"],[97,128,123,12],[97,129,123,13,"tapBip32Derivation"],[97,147,123,31],[97,151,123,35,"input"],[97,156,123,40],[97,157,123,41,"tapBip32Derivation"],[97,175,123,59],[97,176,123,60,"length"],[97,182,123,67],[97,186,124,7,"input"],[97,191,124,12],[97,192,124,13,"witnessUtxo"],[97,203,124,24],[97,207,125,8],[97,208,125,9],[97,209,125,10],[97,211,125,12,"_$$_REQUIRE"],[97,222,125,12],[97,223,125,12,"_dependencyMap"],[97,237,125,12],[97,261,125,27,"isP2TR"],[97,267,125,33],[97,269,125,35,"input"],[97,274,125,40],[97,275,125,41,"witnessUtxo"],[97,286,125,52],[97,287,125,53,"script"],[97,293,125,59],[97,294,125,61],[97,295,126,5],[98,2,128,0],[99,2,129,0],[100,0,130,0],[101,0,131,0],[102,0,132,0],[103,0,133,0],[104,0,134,0],[105,2,135,0],[105,11,135,9,"isTaprootOutput"],[105,26,135,24,"isTaprootOutput"],[105,27,135,25,"output"],[105,33,135,31],[105,35,135,33,"script"],[105,41,135,39],[105,43,135,41],[106,4,136,2],[106,11,137,4,"output"],[106,17,137,10],[106,21,138,4],[106,22,138,5],[106,24,139,6,"output"],[106,30,139,12],[106,31,139,13,"tapInternalKey"],[106,45,139,27],[106,49,140,6,"output"],[106,55,140,12],[106,56,140,13,"tapTree"],[106,63,140,20],[106,67,141,7,"output"],[106,73,141,13],[106,74,141,14,"tapBip32Derivation"],[106,92,141,32],[106,96,141,36,"output"],[106,102,141,42],[106,103,141,43,"tapBip32Derivation"],[106,121,141,61],[106,122,141,62,"length"],[106,128,141,69],[106,132,142,7,"script"],[106,138,142,13],[106,142,142,17],[106,143,142,18],[106,144,142,19],[106,146,142,21,"_$$_REQUIRE"],[106,157,142,21],[106,158,142,21,"_dependencyMap"],[106,172,142,21],[106,196,142,36,"isP2TR"],[106,202,142,42],[106,204,142,44,"script"],[106,210,142,50],[106,211,142,52],[106,212,143,5],[107,2,145,0],[108,2,146,0],[109,0,147,0],[110,0,148,0],[111,0,149,0],[112,0,150,0],[113,0,151,0],[114,0,152,0],[115,2,153,0],[115,11,153,9,"checkTaprootInputFields"],[115,34,153,32,"checkTaprootInputFields"],[115,35,153,33,"inputData"],[115,44,153,42],[115,46,153,44,"newInputData"],[115,58,153,56],[115,60,153,58,"action"],[115,66,153,64],[115,68,153,66],[116,4,154,2,"checkMixedTaprootAndNonTaprootInputFields"],[116,45,154,43],[116,46,154,44,"inputData"],[116,55,154,53],[116,57,154,55,"newInputData"],[116,69,154,67],[116,71,154,69,"action"],[116,77,154,75],[116,78,154,76],[117,4,155,2,"checkIfTapLeafInTree"],[117,24,155,22],[117,25,155,23,"inputData"],[117,34,155,32],[117,36,155,34,"newInputData"],[117,48,155,46],[117,50,155,48,"action"],[117,56,155,54],[117,57,155,55],[118,2,156,0],[119,2,157,0],[120,0,158,0],[121,0,159,0],[122,0,160,0],[123,0,161,0],[124,0,162,0],[125,0,163,0],[126,2,164,0],[126,11,164,9,"checkTaprootOutputFields"],[126,35,164,33,"checkTaprootOutputFields"],[126,36,164,34,"outputData"],[126,46,164,44],[126,48,164,46,"newOutputData"],[126,61,164,59],[126,63,164,61,"action"],[126,69,164,67],[126,71,164,69],[127,4,165,2,"checkMixedTaprootAndNonTaprootOutputFields"],[127,46,165,44],[127,47,165,45,"outputData"],[127,57,165,55],[127,59,165,57,"newOutputData"],[127,72,165,70],[127,74,165,72,"action"],[127,80,165,78],[127,81,165,79],[128,4,166,2,"checkTaprootScriptPubkey"],[128,28,166,26],[128,29,166,27,"outputData"],[128,39,166,37],[128,41,166,39,"newOutputData"],[128,54,166,52],[128,55,166,53],[129,2,167,0],[130,2,168,0],[130,11,168,9,"checkTaprootScriptPubkey"],[130,35,168,33,"checkTaprootScriptPubkey"],[130,36,168,34,"outputData"],[130,46,168,44],[130,48,168,46,"newOutputData"],[130,61,168,59],[130,63,168,61],[131,4,169,2],[131,8,169,6],[131,9,169,7,"newOutputData"],[131,22,169,20],[131,23,169,21,"tapTree"],[131,30,169,28],[131,34,169,32],[131,35,169,33,"newOutputData"],[131,48,169,46],[131,49,169,47,"tapInternalKey"],[131,63,169,61],[131,65,169,63],[132,4,170,2],[132,8,170,8,"tapInternalKey"],[132,22,170,22],[132,25,171,4,"newOutputData"],[132,38,171,17],[132,39,171,18,"tapInternalKey"],[132,53,171,32],[132,57,171,36,"outputData"],[132,67,171,46],[132,68,171,47,"tapInternalKey"],[132,82,171,61],[133,4,172,2],[133,8,172,8,"tapTree"],[133,15,172,15],[133,18,172,18,"newOutputData"],[133,31,172,31],[133,32,172,32,"tapTree"],[133,39,172,39],[133,43,172,43,"outputData"],[133,53,172,53],[133,54,172,54,"tapTree"],[133,61,172,61],[134,4,173,2],[134,8,173,6,"tapInternalKey"],[134,22,173,20],[134,24,173,22],[135,6,174,4],[135,10,174,20,"scriptPubkey"],[135,22,174,32],[135,25,174,37,"outputData"],[135,35,174,47],[135,36,174,12,"script"],[135,42,174,18],[136,6,175,4],[136,10,175,10,"script"],[136,16,175,16],[136,19,175,19,"getTaprootScripPubkey"],[136,40,175,40],[136,41,175,41,"tapInternalKey"],[136,55,175,55],[136,57,175,57,"tapTree"],[136,64,175,64],[136,65,175,65],[137,6,176,4],[137,10,176,8,"scriptPubkey"],[137,22,176,20],[137,26,176,24,"tools"],[137,31,176,29],[137,32,176,30,"compare"],[137,39,176,37],[137,40,176,38,"script"],[137,46,176,44],[137,48,176,46,"scriptPubkey"],[137,60,176,58],[137,61,176,59],[137,66,176,64],[137,67,176,65],[137,69,177,6],[137,75,177,12],[137,79,177,16,"Error"],[137,84,177,21],[137,85,177,22],[137,135,177,72],[137,136,177,73],[138,4,178,2],[139,2,179,0],[140,2,180,0],[141,0,181,0],[142,0,182,0],[143,0,183,0],[144,0,184,0],[145,0,185,0],[146,0,186,0],[147,2,187,0],[147,11,187,9,"getTaprootScripPubkey"],[147,32,187,30,"getTaprootScripPubkey"],[147,33,187,31,"tapInternalKey"],[147,47,187,45],[147,49,187,47,"tapTree"],[147,56,187,54],[147,58,187,56],[148,4,188,2],[148,8,188,8,"scriptTree"],[148,18,188,18],[148,21,188,21,"tapTree"],[148,28,188,28],[148,32,188,32,"tapTreeFromList"],[148,47,188,47],[148,48,188,48,"tapTree"],[148,55,188,55],[148,56,188,56,"leaves"],[148,62,188,62],[148,63,188,63],[149,4,189,2],[149,8,189,2,"_ref"],[149,12,189,2],[149,15,189,21],[149,16,189,22],[149,17,189,23],[149,19,189,25,"_$$_REQUIRE"],[149,30,189,25],[149,31,189,25,"_dependencyMap"],[149,45,189,25],[149,75,189,36,"p2tr"],[149,79,189,40],[149,81,189,42],[150,8,190,4,"internalPubkey"],[150,22,190,18],[150,24,190,20,"tapInternalKey"],[150,38,190,34],[151,8,191,4,"scriptTree"],[151,18,191,14],[151,20,191,4,"scriptTree"],[152,6,192,2],[152,7,192,3],[152,8,192,4],[153,6,189,10,"output"],[153,12,189,16],[153,15,189,16,"_ref"],[153,19,189,16],[153,20,189,10,"output"],[153,26,189,16],[154,4,193,2],[154,11,193,9,"output"],[154,17,193,15],[155,2,194,0],[156,2,195,0],[157,0,196,0],[158,0,197,0],[159,0,198,0],[160,0,199,0],[161,0,200,0],[162,0,201,0],[163,2,202,0],[163,11,202,9,"tweakInternalPubKey"],[163,30,202,28,"tweakInternalPubKey"],[163,31,202,29,"inputIndex"],[163,41,202,39],[163,43,202,41,"input"],[163,48,202,46],[163,50,202,48],[164,4,203,2],[164,8,203,8,"tapInternalKey"],[164,22,203,22],[164,25,203,25,"input"],[164,30,203,30],[164,31,203,31,"tapInternalKey"],[164,45,203,45],[165,4,204,2],[165,8,204,8,"outputKey"],[165,17,204,17],[165,20,205,4,"tapInternalKey"],[165,34,205,18],[165,38,206,4],[165,39,206,5],[165,40,206,6],[165,42,206,8,"_$$_REQUIRE"],[165,53,206,8],[165,54,206,8,"_dependencyMap"],[165,68,206,8],[165,99,206,20,"tweakKey"],[165,107,206,28],[165,109,206,30,"tapInternalKey"],[165,123,206,44],[165,125,206,46,"input"],[165,130,206,51],[165,131,206,52,"tapMerkleRoot"],[165,144,206,65],[165,145,206,66],[166,4,207,2],[166,8,207,6],[166,9,207,7,"outputKey"],[166,18,207,16],[166,20,208,4],[166,26,208,10],[166,30,208,14,"Error"],[166,35,208,19],[166,36,209,6],[166,80,209,50,"inputIndex"],[166,90,209,60],[167,4,210,8],[168,4,211,8,"tapInternalKey"],[168,18,211,22],[168,22,211,26,"tools"],[168,27,211,31],[168,28,211,32,"toHex"],[168,33,211,37],[168,34,211,38,"tapInternalKey"],[168,48,211,52],[168,49,211,53],[168,51,213,4],[168,52,213,5],[169,4,214,2],[169,11,214,9,"outputKey"],[169,20,214,18],[169,21,214,19,"x"],[169,22,214,20],[170,2,215,0],[171,2,216,0],[172,0,217,0],[173,0,218,0],[174,0,219,0],[175,0,220,0],[176,0,221,0],[177,0,222,0],[178,0,223,0],[179,2,224,0],[179,11,224,9,"tapTreeToList"],[179,24,224,22,"tapTreeToList"],[179,25,224,23,"tree"],[179,29,224,27],[179,31,224,29],[180,4,225,2],[180,8,225,6],[180,9,225,7],[180,10,225,8],[180,11,225,9],[180,13,225,11,"_$$_REQUIRE"],[180,24,225,11],[180,25,225,11,"_dependencyMap"],[180,39,225,11],[180,60,225,22,"isTaptree"],[180,69,225,31],[180,71,225,33,"tree"],[180,75,225,37],[180,76,225,38],[180,78,226,4],[180,84,226,10],[180,88,226,14,"Error"],[180,93,226,19],[180,94,227,6],[180,165,228,4],[180,166,228,5],[181,4,229,2],[181,11,229,9,"_tapTreeToList"],[181,25,229,23],[181,26,229,24,"tree"],[181,30,229,28],[181,31,229,29],[182,2,230,0],[183,2,231,0],[184,0,232,0],[185,0,233,0],[186,0,234,0],[187,0,235,0],[188,0,236,0],[189,0,237,0],[190,0,238,0],[191,2,239,0],[191,11,239,9,"tapTreeFromList"],[191,26,239,24,"tapTreeFromList"],[191,27,239,24],[191,29,239,38],[192,4,239,38],[192,8,239,25,"leaves"],[192,14,239,31],[192,17,239,31,"arguments"],[192,26,239,31],[192,27,239,31,"length"],[192,33,239,31],[192,41,239,31,"arguments"],[192,50,239,31],[192,58,239,31,"undefined"],[192,67,239,31],[192,70,239,31,"arguments"],[192,79,239,31],[192,85,239,34],[192,87,239,36],[193,4,240,2],[193,8,240,6,"leaves"],[193,14,240,12],[193,15,240,13,"length"],[193,21,240,19],[193,26,240,24],[193,27,240,25],[193,31,240,29,"leaves"],[193,37,240,35],[193,38,240,36],[193,39,240,37],[193,40,240,38],[193,41,240,39,"depth"],[193,46,240,44],[193,51,240,49],[193,52,240,50],[193,54,241,4],[193,61,241,11],[194,6,242,6,"output"],[194,12,242,12],[194,14,242,14,"leaves"],[194,20,242,20],[194,21,242,21],[194,22,242,22],[194,23,242,23],[194,24,242,24,"script"],[194,30,242,30],[195,6,243,6,"version"],[195,13,243,13],[195,15,243,15,"leaves"],[195,21,243,21],[195,22,243,22],[195,23,243,23],[195,24,243,24],[195,25,243,25,"leafVersion"],[196,4,244,4],[196,5,244,5],[197,4,245,2],[197,11,245,9,"instertLeavesInTree"],[197,30,245,28],[197,31,245,29,"leaves"],[197,37,245,35],[197,38,245,36],[198,2,246,0],[199,2,247,0],[200,0,248,0],[201,0,249,0],[202,0,250,0],[203,0,251,0],[204,0,252,0],[205,2,253,0],[205,11,253,9,"checkTaprootInputForSigs"],[205,35,253,33,"checkTaprootInputForSigs"],[205,36,253,34,"input"],[205,41,253,39],[205,43,253,41,"action"],[205,49,253,47],[205,51,253,49],[206,4,254,2],[206,8,254,8,"sigs"],[206,12,254,12],[206,15,254,15,"extractTaprootSigs"],[206,33,254,33],[206,34,254,34,"input"],[206,39,254,39],[206,40,254,40],[207,4,255,2],[207,11,255,9,"sigs"],[207,15,255,13],[207,16,255,14,"some"],[207,20,255,18],[207,21,255,19],[207,31,255,19,"sig"],[207,34,255,22],[208,6,255,22],[208,13,256,4],[208,14,256,5],[208,15,256,6],[208,17,256,8,"_$$_REQUIRE"],[208,28,256,8],[208,29,256,8,"_dependencyMap"],[208,43,256,8],[208,67,256,23,"signatureBlocksAction"],[208,88,256,44],[208,90,257,6,"sig"],[208,93,257,9],[208,95,258,6,"decodeSchnorrSignature"],[208,117,258,28],[208,119,259,6,"action"],[208,125,260,4],[208,126,260,5],[209,4,260,5],[209,5,261,2],[209,6,261,3],[210,2,262,0],[211,2,263,0],[212,0,264,0],[213,0,265,0],[214,0,266,0],[215,0,267,0],[216,2,268,0],[216,11,268,9,"decodeSchnorrSignature"],[216,33,268,31,"decodeSchnorrSignature"],[216,34,268,32,"signature"],[216,43,268,41],[216,45,268,43],[217,4,269,2],[217,11,269,9],[218,6,270,4,"signature"],[218,15,270,13],[218,17,270,15,"signature"],[218,26,270,24],[218,27,270,25,"slice"],[218,32,270,30],[218,33,270,31],[218,34,270,32],[218,36,270,34],[218,38,270,36],[218,39,270,37],[219,6,271,4,"hashType"],[219,14,271,12],[219,16,272,6,"signature"],[219,25,272,15],[219,26,272,16,"slice"],[219,31,272,21],[219,32,272,22],[219,34,272,24],[219,35,272,25],[219,36,272,26],[219,37,272,27],[219,38,272,28],[219,42,272,32,"_$$_REQUIRE"],[219,53,272,32],[219,54,272,32,"_dependencyMap"],[219,68,272,32],[219,95,272,49,"Transaction"],[219,106,272,60],[219,107,272,61,"SIGHASH_DEFAULT"],[220,4,273,2],[220,5,273,3],[221,2,274,0],[222,2,275,0],[223,0,276,0],[224,0,277,0],[225,0,278,0],[226,0,279,0],[227,2,280,0],[227,11,280,9,"extractTaprootSigs"],[227,29,280,27,"extractTaprootSigs"],[227,30,280,28,"input"],[227,35,280,33],[227,37,280,35],[228,4,281,2],[228,8,281,8,"sigs"],[228,12,281,12],[228,15,281,15],[228,17,281,17],[229,4,282,2],[229,8,282,6,"input"],[229,13,282,11],[229,14,282,12,"tapKeySig"],[229,23,282,21],[229,25,282,23,"sigs"],[229,29,282,27],[229,30,282,28,"push"],[229,34,282,32],[229,35,282,33,"input"],[229,40,282,38],[229,41,282,39,"tapKeySig"],[229,50,282,48],[229,51,282,49],[230,4,283,2],[230,8,283,6,"input"],[230,13,283,11],[230,14,283,12,"tapScriptSig"],[230,26,283,24],[230,28,284,4,"sigs"],[230,32,284,8],[230,33,284,9,"push"],[230,37,284,13],[230,38,284,13,"apply"],[230,43,284,13],[230,44,284,4,"sigs"],[230,48,284,8],[230,50,284,8,"_toConsumableArray"],[230,68,284,8],[230,69,284,17,"input"],[230,74,284,22],[230,75,284,23,"tapScriptSig"],[230,87,284,35],[230,88,284,36,"map"],[230,91,284,39],[230,92,284,40],[230,102,284,40,"s"],[230,103,284,41],[231,6,284,41],[231,13,284,45,"s"],[231,14,284,46],[231,15,284,47,"signature"],[231,24,284,56],[232,4,284,56],[232,6,284,57],[232,8,284,58],[233,4,285,2],[233,8,285,6],[233,9,285,7,"sigs"],[233,13,285,11],[233,14,285,12,"length"],[233,20,285,18],[233,22,285,20],[234,6,286,4],[234,10,286,10,"finalTapKeySig"],[234,24,286,24],[234,27,286,27,"getTapKeySigFromWithness"],[234,51,286,51],[234,52,286,52,"input"],[234,57,286,57],[234,58,286,58,"finalScriptWitness"],[234,76,286,76],[234,77,286,77],[235,6,287,4],[235,10,287,8,"finalTapKeySig"],[235,24,287,22],[235,26,287,24,"sigs"],[235,30,287,28],[235,31,287,29,"push"],[235,35,287,33],[235,36,287,34,"finalTapKeySig"],[235,50,287,48],[235,51,287,49],[236,4,288,2],[237,4,289,2],[237,11,289,9,"sigs"],[237,15,289,13],[238,2,290,0],[239,2,291,0],[240,0,292,0],[241,0,293,0],[242,0,294,0],[243,0,295,0],[244,2,296,0],[244,11,296,9,"getTapKeySigFromWithness"],[244,35,296,33,"getTapKeySigFromWithness"],[244,36,296,34,"finalScriptWitness"],[244,54,296,52],[244,56,296,54],[245,4,297,2],[245,8,297,6],[245,9,297,7,"finalScriptWitness"],[245,27,297,25],[245,29,297,27],[246,4,298,2],[246,8,298,8,"witness"],[246,15,298,15],[246,18,298,18,"finalScriptWitness"],[246,36,298,36],[246,37,298,37,"slice"],[246,42,298,42],[246,43,298,43],[246,44,298,44],[246,45,298,45],[247,4,299,2],[248,4,300,2],[248,8,300,6,"witness"],[248,15,300,13],[248,16,300,14,"length"],[248,22,300,20],[248,27,300,25],[248,29,300,27],[248,33,300,31,"witness"],[248,40,300,38],[248,41,300,39,"length"],[248,47,300,45],[248,52,300,50],[248,54,300,52],[248,56,300,54],[248,63,300,61,"witness"],[248,70,300,68],[249,2,301,0],[250,2,302,0],[251,0,303,0],[252,0,304,0],[253,0,305,0],[254,0,306,0],[255,0,307,0],[256,0,308,0],[257,0,309,0],[258,2,310,0],[258,11,310,9,"_tapTreeToList"],[258,25,310,23,"_tapTreeToList"],[258,26,310,24,"tree"],[258,30,310,28],[258,32,310,54],[259,4,310,54],[259,8,310,30,"leaves"],[259,14,310,36],[259,17,310,36,"arguments"],[259,26,310,36],[259,27,310,36,"length"],[259,33,310,36],[259,41,310,36,"arguments"],[259,50,310,36],[259,58,310,36,"undefined"],[259,67,310,36],[259,70,310,36,"arguments"],[259,79,310,36],[259,85,310,39],[259,87,310,41],[260,4,310,41],[260,8,310,43,"depth"],[260,13,310,48],[260,16,310,48,"arguments"],[260,25,310,48],[260,26,310,48,"length"],[260,32,310,48],[260,40,310,48,"arguments"],[260,49,310,48],[260,57,310,48,"undefined"],[260,66,310,48],[260,69,310,48,"arguments"],[260,78,310,48],[260,84,310,51],[260,85,310,52],[261,4,311,2],[261,8,311,6,"depth"],[261,13,311,11],[261,16,311,14,"_$$_REQUIRE"],[261,27,311,14],[261,28,311,14,"_dependencyMap"],[261,42,311,14],[261,73,311,26,"MAX_TAPTREE_DEPTH"],[261,90,311,43],[261,92,312,4],[261,98,312,10],[261,102,312,14,"Error"],[261,107,312,19],[261,108,312,20],[261,137,312,49],[261,138,312,50],[262,4,313,2],[262,8,313,6],[262,9,313,7,"tree"],[262,13,313,11],[262,15,313,13],[262,22,313,20],[262,24,313,22],[263,4,314,2],[263,8,314,6],[263,9,314,7],[263,10,314,8],[263,12,314,10,"_$$_REQUIRE"],[263,23,314,10],[263,24,314,10,"_dependencyMap"],[263,38,314,10],[263,59,314,21,"isTapleaf"],[263,68,314,30],[263,70,314,32,"tree"],[263,74,314,36],[263,75,314,37],[263,77,314,39],[264,6,315,4,"leaves"],[264,12,315,10],[264,13,315,11,"push"],[264,17,315,15],[264,18,315,16],[265,8,316,6,"depth"],[265,13,316,11],[265,15,316,6,"depth"],[265,20,316,11],[266,8,317,6,"leafVersion"],[266,19,317,17],[266,21,317,19,"tree"],[266,25,317,23],[266,26,317,24,"version"],[266,33,317,31],[266,37,317,35,"_$$_REQUIRE"],[266,48,317,35],[266,49,317,35,"_dependencyMap"],[266,63,317,35],[266,94,317,47,"LEAF_VERSION_TAPSCRIPT"],[266,116,317,69],[267,8,318,6,"script"],[267,14,318,12],[267,16,318,14,"tree"],[267,20,318,18],[267,21,318,19,"output"],[268,6,319,4],[268,7,319,5],[268,8,319,6],[269,6,320,4],[269,13,320,11,"leaves"],[269,19,320,17],[270,4,321,2],[271,4,322,2],[271,8,322,6,"tree"],[271,12,322,10],[271,13,322,11],[271,14,322,12],[271,15,322,13],[271,17,322,15,"_tapTreeToList"],[271,31,322,29],[271,32,322,30,"tree"],[271,36,322,34],[271,37,322,35],[271,38,322,36],[271,39,322,37],[271,41,322,39,"leaves"],[271,47,322,45],[271,49,322,47,"depth"],[271,54,322,52],[271,57,322,55],[271,58,322,56],[271,59,322,57],[272,4,323,2],[272,8,323,6,"tree"],[272,12,323,10],[272,13,323,11],[272,14,323,12],[272,15,323,13],[272,17,323,15,"_tapTreeToList"],[272,31,323,29],[272,32,323,30,"tree"],[272,36,323,34],[272,37,323,35],[272,38,323,36],[272,39,323,37],[272,41,323,39,"leaves"],[272,47,323,45],[272,49,323,47,"depth"],[272,54,323,52],[272,57,323,55],[272,58,323,56],[272,59,323,57],[273,4,324,2],[273,11,324,9,"leaves"],[273,17,324,15],[274,2,325,0],[275,2,326,0],[276,0,327,0],[277,0,328,0],[278,0,329,0],[279,0,330,0],[280,0,331,0],[281,2,332,0],[281,11,332,9,"instertLeavesInTree"],[281,30,332,28,"instertLeavesInTree"],[281,31,332,29,"leaves"],[281,37,332,35],[281,39,332,37],[282,4,333,2],[282,8,333,6,"tree"],[282,12,333,10],[283,4,334,2],[283,9,334,7],[283,13,334,13,"leaf"],[283,17,334,17],[283,21,334,21,"leaves"],[283,27,334,27],[283,29,334,29],[284,6,335,4,"tree"],[284,10,335,8],[284,13,335,11,"instertLeafInTree"],[284,30,335,28],[284,31,335,29,"leaf"],[284,35,335,33],[284,37,335,35,"tree"],[284,41,335,39],[284,42,335,40],[285,6,336,4],[285,10,336,8],[285,11,336,9,"tree"],[285,15,336,13],[285,17,336,15],[285,23,336,21],[285,27,336,25,"Error"],[285,32,336,30],[285,33,336,31],[285,73,336,71],[285,74,336,72],[286,4,337,2],[287,4,338,2],[287,11,338,9,"tree"],[287,15,338,13],[288,2,339,0],[289,2,340,0],[290,0,341,0],[291,0,342,0],[292,0,343,0],[293,0,344,0],[294,0,345,0],[295,0,346,0],[296,2,347,0],[296,11,347,9,"instertLeafInTree"],[296,28,347,26,"instertLeafInTree"],[296,29,347,27,"leaf"],[296,33,347,31],[296,35,347,33,"tree"],[296,39,347,37],[296,41,347,50],[297,4,347,50],[297,8,347,39,"depth"],[297,13,347,44],[297,16,347,44,"arguments"],[297,25,347,44],[297,26,347,44,"length"],[297,32,347,44],[297,40,347,44,"arguments"],[297,49,347,44],[297,57,347,44,"undefined"],[297,66,347,44],[297,69,347,44,"arguments"],[297,78,347,44],[297,84,347,47],[297,85,347,48],[298,4,348,2],[298,8,348,6,"depth"],[298,13,348,11],[298,16,348,14,"_$$_REQUIRE"],[298,27,348,14],[298,28,348,14,"_dependencyMap"],[298,42,348,14],[298,73,348,26,"MAX_TAPTREE_DEPTH"],[298,90,348,43],[298,92,349,4],[298,98,349,10],[298,102,349,14,"Error"],[298,107,349,19],[298,108,349,20],[298,137,349,49],[298,138,349,50],[299,4,350,2],[299,8,350,6,"leaf"],[299,12,350,10],[299,13,350,11,"depth"],[299,18,350,16],[299,23,350,21,"depth"],[299,28,350,26],[299,30,350,28],[300,6,351,4],[300,10,351,8],[300,11,351,9,"tree"],[300,15,351,13],[300,17,352,6],[300,24,352,13],[301,8,353,8,"output"],[301,14,353,14],[301,16,353,16,"leaf"],[301,20,353,20],[301,21,353,21,"script"],[301,27,353,27],[302,8,354,8,"version"],[302,15,354,15],[302,17,354,17,"leaf"],[302,21,354,21],[302,22,354,22,"leafVersion"],[303,6,355,6],[303,7,355,7],[304,6,356,4],[305,4,357,2],[306,4,358,2],[306,8,358,6],[306,9,358,7],[306,10,358,8],[306,12,358,10,"_$$_REQUIRE"],[306,23,358,10],[306,24,358,10,"_dependencyMap"],[306,38,358,10],[306,59,358,21,"isTapleaf"],[306,68,358,30],[306,70,358,32,"tree"],[306,74,358,36],[306,75,358,37],[306,77,358,39],[307,4,359,2],[307,8,359,8,"leftSide"],[307,16,359,16],[307,19,359,19,"instertLeafInTree"],[307,36,359,36],[307,37,359,37,"leaf"],[307,41,359,41],[307,43,359,43,"tree"],[307,47,359,47],[307,51,359,51,"tree"],[307,55,359,55],[307,56,359,56],[307,57,359,57],[307,58,359,58],[307,60,359,60,"depth"],[307,65,359,65],[307,68,359,68],[307,69,359,69],[307,70,359,70],[308,4,360,2],[308,8,360,6,"leftSide"],[308,16,360,14],[308,18,360,16],[308,25,360,23],[308,26,360,24,"leftSide"],[308,34,360,32],[308,36,360,34,"tree"],[308,40,360,38],[308,44,360,42,"tree"],[308,48,360,46],[308,49,360,47],[308,50,360,48],[308,51,360,49],[308,52,360,50],[309,4,361,2],[309,8,361,8,"rightSide"],[309,17,361,17],[309,20,361,20,"instertLeafInTree"],[309,37,361,37],[309,38,361,38,"leaf"],[309,42,361,42],[309,44,361,44,"tree"],[309,48,361,48],[309,52,361,52,"tree"],[309,56,361,56],[309,57,361,57],[309,58,361,58],[309,59,361,59],[309,61,361,61,"depth"],[309,66,361,66],[309,69,361,69],[309,70,361,70],[309,71,361,71],[310,4,362,2],[310,8,362,6,"rightSide"],[310,17,362,15],[310,19,362,17],[310,26,362,24],[310,27,362,25,"tree"],[310,31,362,29],[310,35,362,33,"tree"],[310,39,362,37],[310,40,362,38],[310,41,362,39],[310,42,362,40],[310,44,362,42,"rightSide"],[310,53,362,51],[310,54,362,52],[311,2,363,0],[312,2,364,0],[313,0,365,0],[314,0,366,0],[315,0,367,0],[316,0,368,0],[317,0,369,0],[318,0,370,0],[319,2,371,0],[319,11,371,9,"checkMixedTaprootAndNonTaprootInputFields"],[319,52,371,50,"checkMixedTaprootAndNonTaprootInputFields"],[319,53,372,2,"inputData"],[319,62,372,11],[319,64,373,2,"newInputData"],[319,76,373,14],[319,78,374,2,"action"],[319,84,374,8],[319,86,375,2],[320,4,376,2],[320,8,376,8,"isBadTaprootUpdate"],[320,26,376,26],[320,29,377,4,"isTaprootInput"],[320,43,377,18],[320,44,377,19,"inputData"],[320,53,377,28],[320,54,377,29],[320,58,377,33,"hasNonTaprootFields"],[320,77,377,52],[320,78,377,53,"newInputData"],[320,90,377,65],[320,91,377,66],[321,4,378,2],[321,8,378,8,"isBadNonTaprootUpdate"],[321,29,378,29],[321,32,379,4,"hasNonTaprootFields"],[321,51,379,23],[321,52,379,24,"inputData"],[321,61,379,33],[321,62,379,34],[321,66,379,38,"isTaprootInput"],[321,80,379,52],[321,81,379,53,"newInputData"],[321,93,379,65],[321,94,379,66],[322,4,380,2],[322,8,380,8,"hasMixedFields"],[322,22,380,22],[322,25,381,4,"inputData"],[322,34,381,13],[322,39,381,18,"newInputData"],[322,51,381,30],[322,55,382,4,"isTaprootInput"],[322,69,382,18],[322,70,382,19,"newInputData"],[322,82,382,31],[322,83,382,32],[322,87,383,4,"hasNonTaprootFields"],[322,106,383,23],[322,107,383,24,"newInputData"],[322,119,383,36],[322,120,383,37],[322,121,383,38],[322,122,383,39],[323,4,384,2],[323,8,384,6,"isBadTaprootUpdate"],[323,26,384,24],[323,30,384,28,"isBadNonTaprootUpdate"],[323,51,384,49],[323,55,384,53,"hasMixedFields"],[323,69,384,67],[323,71,385,4],[323,77,385,10],[323,81,385,14,"Error"],[323,86,385,19],[323,87,386,6],[323,117,386,36,"action"],[323,123,386,42],[323,127,386,46],[323,130,387,8],[323,179,388,4],[323,180,388,5],[324,2,389,0],[325,2,390,0],[326,0,391,0],[327,0,392,0],[328,0,393,0],[329,0,394,0],[330,0,395,0],[331,0,396,0],[332,2,397,0],[332,11,397,9,"checkMixedTaprootAndNonTaprootOutputFields"],[332,53,397,51,"checkMixedTaprootAndNonTaprootOutputFields"],[332,54,398,2,"inputData"],[332,63,398,11],[332,65,399,2,"newInputData"],[332,77,399,14],[332,79,400,2,"action"],[332,85,400,8],[332,87,401,2],[333,4,402,2],[333,8,402,8,"isBadTaprootUpdate"],[333,26,402,26],[333,29,403,4,"isTaprootOutput"],[333,44,403,19],[333,45,403,20,"inputData"],[333,54,403,29],[333,55,403,30],[333,59,403,34,"hasNonTaprootFields"],[333,78,403,53],[333,79,403,54,"newInputData"],[333,91,403,66],[333,92,403,67],[334,4,404,2],[334,8,404,8,"isBadNonTaprootUpdate"],[334,29,404,29],[334,32,405,4,"hasNonTaprootFields"],[334,51,405,23],[334,52,405,24,"inputData"],[334,61,405,33],[334,62,405,34],[334,66,405,38,"isTaprootOutput"],[334,81,405,53],[334,82,405,54,"newInputData"],[334,94,405,66],[334,95,405,67],[335,4,406,2],[335,8,406,8,"hasMixedFields"],[335,22,406,22],[335,25,407,4,"inputData"],[335,34,407,13],[335,39,407,18,"newInputData"],[335,51,407,30],[335,55,408,4,"isTaprootOutput"],[335,70,408,19],[335,71,408,20,"newInputData"],[335,83,408,32],[335,84,408,33],[335,88,409,4,"hasNonTaprootFields"],[335,107,409,23],[335,108,409,24,"newInputData"],[335,120,409,36],[335,121,409,37],[336,4,410,2],[336,8,410,6,"isBadTaprootUpdate"],[336,26,410,24],[336,30,410,28,"isBadNonTaprootUpdate"],[336,51,410,49],[336,55,410,53,"hasMixedFields"],[336,69,410,67],[336,71,411,4],[336,77,411,10],[336,81,411,14,"Error"],[336,86,411,19],[336,87,412,6],[336,117,412,36,"action"],[336,123,412,42],[336,127,412,46],[336,130,413,8],[336,179,414,4],[336,180,414,5],[337,2,415,0],[338,2,416,0],[339,0,417,0],[340,0,418,0],[341,0,419,0],[342,0,420,0],[343,0,421,0],[344,0,422,0],[345,0,423,0],[346,2,424,0],[346,11,424,9,"checkIfTapLeafInTree"],[346,31,424,29,"checkIfTapLeafInTree"],[346,32,424,30,"inputData"],[346,41,424,39],[346,43,424,41,"newInputData"],[346,55,424,53],[346,57,424,55,"action"],[346,63,424,61],[346,65,424,63],[347,4,425,2],[347,8,425,6,"newInputData"],[347,20,425,18],[347,21,425,19,"tapMerkleRoot"],[347,34,425,32],[347,36,425,34],[348,6,426,4],[348,10,426,10,"newLeafsInTree"],[348,24,426,24],[348,27,426,27],[348,28,426,28,"newInputData"],[348,40,426,40],[348,41,426,41,"tapLeafScript"],[348,54,426,54],[348,58,426,58],[348,60,426,60],[348,62,426,62,"every"],[348,67,426,67],[348,68,426,68],[348,78,426,68,"l"],[348,79,426,69],[349,8,426,69],[349,15,427,6,"isTapLeafInTree"],[349,30,427,21],[349,31,427,22,"l"],[349,32,427,23],[349,34,427,25,"newInputData"],[349,46,427,37],[349,47,427,38,"tapMerkleRoot"],[349,60,427,51],[349,61,427,52],[350,6,427,52],[350,7,428,4],[350,8,428,5],[351,6,429,4],[351,10,429,10,"oldLeafsInTree"],[351,24,429,24],[351,27,429,27],[351,28,429,28,"inputData"],[351,37,429,37],[351,38,429,38,"tapLeafScript"],[351,51,429,51],[351,55,429,55],[351,57,429,57],[351,59,429,59,"every"],[351,64,429,64],[351,65,429,65],[351,75,429,65,"l"],[351,76,429,66],[352,8,429,66],[352,15,430,6,"isTapLeafInTree"],[352,30,430,21],[352,31,430,22,"l"],[352,32,430,23],[352,34,430,25,"newInputData"],[352,46,430,37],[352,47,430,38,"tapMerkleRoot"],[352,60,430,51],[352,61,430,52],[353,6,430,52],[353,7,431,4],[353,8,431,5],[354,6,432,4],[354,10,432,8],[354,11,432,9,"newLeafsInTree"],[354,25,432,23],[354,29,432,27],[354,30,432,28,"oldLeafsInTree"],[354,44,432,42],[354,46,433,6],[354,52,433,12],[354,56,433,16,"Error"],[354,61,433,21],[354,62,434,8],[354,92,434,38,"action"],[354,98,434,44],[354,130,435,6],[354,131,435,7],[355,4,436,2],[355,5,436,3],[355,11,436,9],[355,15,436,13,"inputData"],[355,24,436,22],[355,25,436,23,"tapMerkleRoot"],[355,38,436,36],[355,40,436,38],[356,6,437,4],[356,10,437,10,"newLeafsInTree"],[356,25,437,24],[356,28,437,27],[356,29,437,28,"newInputData"],[356,41,437,40],[356,42,437,41,"tapLeafScript"],[356,55,437,54],[356,59,437,58],[356,61,437,60],[356,63,437,62,"every"],[356,68,437,67],[356,69,437,68],[356,79,437,68,"l"],[356,80,437,69],[357,8,437,69],[357,15,438,6,"isTapLeafInTree"],[357,30,438,21],[357,31,438,22,"l"],[357,32,438,23],[357,34,438,25,"inputData"],[357,43,438,34],[357,44,438,35,"tapMerkleRoot"],[357,57,438,48],[357,58,438,49],[358,6,438,49],[358,7,439,4],[358,8,439,5],[359,6,440,4],[359,10,440,8],[359,11,440,9,"newLeafsInTree"],[359,26,440,23],[359,28,441,6],[359,34,441,12],[359,38,441,16,"Error"],[359,43,441,21],[359,44,442,8],[359,74,442,38,"action"],[359,80,442,44],[359,112,443,6],[359,113,443,7],[360,4,444,2],[361,2,445,0],[362,2,446,0],[363,0,447,0],[364,0,448,0],[365,0,449,0],[366,0,450,0],[367,0,451,0],[368,2,452,0],[368,11,452,9,"isTapLeafInTree"],[368,26,452,24,"isTapLeafInTree"],[368,27,452,25,"tapLeaf"],[368,34,452,32],[368,36,452,34,"merkleRoot"],[368,46,452,44],[368,48,452,46],[369,4,453,2],[369,8,453,6],[369,9,453,7,"merkleRoot"],[369,19,453,17],[369,21,453,19],[369,28,453,26],[369,32,453,30],[370,4,454,2],[370,8,454,8,"leafHash"],[370,16,454,16],[370,19,454,19],[370,20,454,20],[370,21,454,21],[370,23,454,23,"_$$_REQUIRE"],[370,34,454,23],[370,35,454,23,"_dependencyMap"],[370,49,454,23],[370,80,454,35,"tapleafHash"],[370,91,454,46],[370,93,454,48],[371,6,455,4,"output"],[371,12,455,10],[371,14,455,12,"tapLeaf"],[371,21,455,19],[371,22,455,20,"script"],[371,28,455,26],[372,6,456,4,"version"],[372,13,456,11],[372,15,456,13,"tapLeaf"],[372,22,456,20],[372,23,456,21,"leafVersion"],[373,4,457,2],[373,5,457,3],[373,6,457,4],[374,4,458,2],[374,8,458,8,"rootHash"],[374,16,458,16],[374,19,458,19],[374,20,458,20],[374,21,458,21],[374,23,458,23,"_$$_REQUIRE"],[374,34,458,23],[374,35,458,23,"_dependencyMap"],[374,49,458,23],[374,80,458,35,"rootHashFromPath"],[374,96,458,51],[374,98,459,4,"tapLeaf"],[374,105,459,11],[374,106,459,12,"controlBlock"],[374,118,459,24],[374,120,460,4,"leafHash"],[374,128,461,2],[374,129,461,3],[375,4,462,2],[375,11,462,9,"tools"],[375,16,462,14],[375,17,462,15,"compare"],[375,24,462,22],[375,25,462,23,"rootHash"],[375,33,462,31],[375,35,462,33,"merkleRoot"],[375,45,462,43],[375,46,462,44],[375,51,462,49],[375,52,462,50],[376,2,463,0],[377,2,464,0],[378,0,465,0],[379,0,466,0],[380,0,467,0],[381,0,468,0],[382,0,469,0],[383,0,470,0],[384,2,471,0],[384,11,471,9,"sortSignatures"],[384,25,471,23,"sortSignatures"],[384,26,471,24,"input"],[384,31,471,29],[384,33,471,31,"tapLeaf"],[384,40,471,38],[384,42,471,40],[385,4,472,2],[385,8,472,8,"leafHash"],[385,16,472,16],[385,19,472,19],[385,20,472,20],[385,21,472,21],[385,23,472,23,"_$$_REQUIRE"],[385,34,472,23],[385,35,472,23,"_dependencyMap"],[385,49,472,23],[385,80,472,35,"tapleafHash"],[385,91,472,46],[385,93,472,48],[386,6,473,4,"output"],[386,12,473,10],[386,14,473,12,"tapLeaf"],[386,21,473,19],[386,22,473,20,"script"],[386,28,473,26],[387,6,474,4,"version"],[387,13,474,11],[387,15,474,13,"tapLeaf"],[387,22,474,20],[387,23,474,21,"leafVersion"],[388,4,475,2],[388,5,475,3],[388,6,475,4],[389,4,476,2],[389,11,477,4],[389,12,477,5,"input"],[389,17,477,10],[389,18,477,11,"tapScriptSig"],[389,30,477,23],[389,34,477,27],[390,4,478,6],[391,4,478,6],[391,6,479,7,"filter"],[391,12,479,13],[391,13,479,14],[391,23,479,14,"tss"],[391,26,479,17],[392,6,479,17],[392,13,479,21,"tools"],[392,18,479,26],[392,19,479,27,"compare"],[392,26,479,34],[392,27,479,35,"tss"],[392,30,479,38],[392,31,479,39,"leafHash"],[392,39,479,47],[392,41,479,49,"leafHash"],[392,49,479,57],[392,50,479,58],[392,55,479,63],[392,56,479,64],[393,4,479,64],[393,6,479,65],[393,7,480,7,"map"],[393,10,480,10],[393,11,480,11],[393,21,480,11,"tss"],[393,24,480,14],[394,6,480,14],[394,13,480,18,"addPubkeyPositionInScript"],[394,38,480,43],[394,39,480,44,"tapLeaf"],[394,46,480,51],[394,47,480,52,"script"],[394,53,480,58],[394,55,480,60,"tss"],[394,58,480,63],[394,59,480,64],[395,4,480,64],[395,6,480,65],[395,7,481,7,"sort"],[395,11,481,11],[395,12,481,12],[395,22,481,13,"t1"],[395,24,481,15],[395,26,481,17,"t2"],[395,28,481,19],[396,6,481,19],[396,13,481,24,"t2"],[396,15,481,26],[396,16,481,27,"positionInScript"],[396,32,481,43],[396,35,481,46,"t1"],[396,37,481,48],[396,38,481,49,"positionInScript"],[396,54,481,65],[397,4,481,65],[397,6,481,66],[397,7,482,7,"map"],[397,10,482,10],[397,11,482,11],[397,21,482,11,"t"],[397,22,482,12],[398,6,482,12],[398,13,482,16,"t"],[398,14,482,17],[398,15,482,18,"signature"],[398,24,482,27],[399,4,482,27],[399,6,482,28],[400,2,484,0],[401,2,485,0],[402,0,486,0],[403,0,487,0],[404,0,488,0],[405,0,489,0],[406,0,490,0],[407,2,491,0],[407,11,491,9,"addPubkeyPositionInScript"],[407,36,491,34,"addPubkeyPositionInScript"],[407,37,491,35,"script"],[407,43,491,41],[407,45,491,43,"tss"],[407,48,491,46],[407,50,491,48],[408,4,492,2],[408,11,492,9,"Object"],[408,17,492,15],[408,18,492,16,"assign"],[408,24,492,22],[408,25,493,4],[409,6,494,6,"positionInScript"],[409,22,494,22],[409,24,494,24],[409,25,494,25],[409,26,494,26],[409,28,494,28,"_$$_REQUIRE"],[409,39,494,28],[409,40,494,28,"_dependencyMap"],[409,54,494,28],[409,78,494,43,"pubkeyPositionInScript"],[409,100,494,65],[409,102,495,8,"tss"],[409,105,495,11],[409,106,495,12,"pubkey"],[409,112,495,18],[409,114,496,8,"script"],[409,120,497,6],[410,4,498,4],[410,5,498,5],[410,7,499,4,"tss"],[410,10,500,2],[410,11,500,3],[411,2,501,0],[412,2,502,0],[413,0,503,0],[414,0,504,0],[415,2,505,0],[415,11,505,9,"findTapLeafToFinalize"],[415,32,505,30,"findTapLeafToFinalize"],[415,33,505,31,"input"],[415,38,505,36],[415,40,505,38,"inputIndex"],[415,50,505,48],[415,52,505,50,"leafHashToFinalize"],[415,70,505,68],[415,72,505,70],[416,4,506,2],[416,8,506,6],[416,9,506,7,"input"],[416,14,506,12],[416,15,506,13,"tapScriptSig"],[416,27,506,25],[416,31,506,29],[416,32,506,30,"input"],[416,37,506,35],[416,38,506,36,"tapScriptSig"],[416,50,506,48],[416,51,506,49,"length"],[416,57,506,55],[416,59,507,4],[416,65,507,10],[416,69,507,14,"Error"],[416,74,507,19],[416,75,508,6],[416,110,508,41,"inputIndex"],[416,120,508,51],[416,161,509,4],[416,162,509,5],[417,4,510,2],[417,8,510,8,"tapLeaf"],[417,15,510,15],[417,18,510,18],[417,19,510,19,"input"],[417,24,510,24],[417,25,510,25,"tapLeafScript"],[417,38,510,38],[417,42,510,42],[417,44,510,44],[417,46,511,5,"sort"],[417,50,511,9],[417,51,511,10],[417,61,511,11,"a"],[417,62,511,12],[417,64,511,14,"b"],[417,65,511,15],[418,6,511,15],[418,13,511,20,"a"],[418,14,511,21],[418,15,511,22,"controlBlock"],[418,27,511,34],[418,28,511,35,"length"],[418,34,511,41],[418,37,511,44,"b"],[418,38,511,45],[418,39,511,46,"controlBlock"],[418,51,511,58],[418,52,511,59,"length"],[418,58,511,65],[419,4,511,65],[419,6,511,66],[419,7,512,5,"find"],[419,11,512,9],[419,12,512,10],[419,22,512,10,"leaf"],[419,26,512,14],[420,6,512,14],[420,13,513,6,"canFinalizeLeaf"],[420,28,513,21],[420,29,513,22,"leaf"],[420,33,513,26],[420,35,513,28,"input"],[420,40,513,33],[420,41,513,34,"tapScriptSig"],[420,53,513,46],[420,55,513,48,"leafHashToFinalize"],[420,73,513,66],[420,74,513,67],[421,4,513,67],[421,5,514,4],[421,6,514,5],[422,4,515,2],[422,8,515,6],[422,9,515,7,"tapLeaf"],[422,16,515,14],[422,18,516,4],[422,24,516,10],[422,28,516,14,"Error"],[422,33,516,19],[422,34,517,6],[422,69,517,41,"inputIndex"],[422,79,517,51],[422,122,518,4],[422,123,518,5],[423,4,519,2],[423,11,519,9,"tapLeaf"],[423,18,519,16],[424,2,520,0],[425,2,521,0],[426,0,522,0],[427,0,523,0],[428,0,524,0],[429,0,525,0],[430,0,526,0],[431,0,527,0],[432,0,528,0],[433,2,529,0],[433,11,529,9,"canFinalizeLeaf"],[433,26,529,24,"canFinalizeLeaf"],[433,27,529,25,"leaf"],[433,31,529,29],[433,33,529,31,"tapScriptSig"],[433,45,529,43],[433,47,529,45,"hash"],[433,51,529,49],[433,53,529,51],[434,4,530,2],[434,8,530,8,"leafHash"],[434,16,530,16],[434,19,530,19],[434,20,530,20],[434,21,530,21],[434,23,530,23,"_$$_REQUIRE"],[434,34,530,23],[434,35,530,23,"_dependencyMap"],[434,49,530,23],[434,80,530,35,"tapleafHash"],[434,91,530,46],[434,93,530,48],[435,6,531,4,"output"],[435,12,531,10],[435,14,531,12,"leaf"],[435,18,531,16],[435,19,531,17,"script"],[435,25,531,23],[436,6,532,4,"version"],[436,13,532,11],[436,15,532,13,"leaf"],[436,19,532,17],[436,20,532,18,"leafVersion"],[437,4,533,2],[437,5,533,3],[437,6,533,4],[438,4,534,2],[438,8,534,8,"whiteListedHash"],[438,23,534,23],[438,26,534,26],[438,27,534,27,"hash"],[438,31,534,31],[438,35,534,35,"tools"],[438,40,534,40],[438,41,534,41,"compare"],[438,48,534,48],[438,49,534,49,"leafHash"],[438,57,534,57],[438,59,534,59,"hash"],[438,63,534,63],[438,64,534,64],[438,69,534,69],[438,70,534,70],[439,4,535,2],[439,11,536,4,"whiteListedHash"],[439,26,536,19],[439,30,537,4,"tapScriptSig"],[439,42,537,16],[439,43,537,17,"find"],[439,47,537,21],[439,48,537,22],[439,58,537,22,"tss"],[439,61,537,25],[440,6,537,25],[440,13,537,29,"tools"],[440,18,537,34],[440,19,537,35,"compare"],[440,26,537,42],[440,27,537,43,"tss"],[440,30,537,46],[440,31,537,47,"leafHash"],[440,39,537,55],[440,41,537,57,"leafHash"],[440,49,537,65],[440,50,537,66],[440,55,537,71],[440,56,537,72],[441,4,537,72],[441,6,537,73],[441,11,538,6,"undefined"],[441,20,538,15],[442,2,540,0],[443,2,541,0],[444,0,542,0],[445,0,543,0],[446,0,544,0],[447,0,545,0],[448,0,546,0],[449,2,547,0],[449,11,547,9,"hasNonTaprootFields"],[449,30,547,28,"hasNonTaprootFields"],[449,31,547,29,"io"],[449,33,547,31],[449,35,547,33],[450,4,548,2],[450,11,549,4,"io"],[450,13,549,6],[450,17,550,4],[450,18,550,5],[450,20,551,6,"io"],[450,22,551,8],[450,23,551,9,"redeemScript"],[450,35,551,21],[450,39,552,6,"io"],[450,41,552,8],[450,42,552,9,"witnessScript"],[450,55,552,22],[450,59,553,7,"io"],[450,61,553,9],[450,62,553,10,"bip32Derivation"],[450,77,553,25],[450,81,553,29,"io"],[450,83,553,31],[450,84,553,32,"bip32Derivation"],[450,99,553,47],[450,100,553,48,"length"],[450,106,553,55],[450,107,554,5],[451,2,556,0],[452,0,556,1],[452,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","toXOnly","tapScriptFinalizer","serializeTaprootSignature","isTaprootInput","isTaprootOutput","checkTaprootInputFields","checkTaprootOutputFields","checkTaprootScriptPubkey","getTaprootScripPubkey","tweakInternalPubKey","tapTreeToList","tapTreeFromList","checkTaprootInputForSigs","sigs.some$argument_0","decodeSchnorrSignature","extractTaprootSigs","input.tapScriptSig.map$argument_0","getTapKeySigFromWithness","_tapTreeToList","instertLeavesInTree","instertLeafInTree","checkMixedTaprootAndNonTaprootInputFields","checkMixedTaprootAndNonTaprootOutputFields","checkIfTapLeafInTree","every$argument_0","isTapLeafInTree","sortSignatures","filter$argument_0","filter.map$argument_0","filter.map.sort$argument_0","filter.map.sort.map$argument_0","addPubkeyPositionInScript","findTapLeafToFinalize","sort$argument_0","sort.find$argument_0","canFinalizeLeaf","tapScriptSig.find$argument_0","hasNonTaprootFields"],"mappings":"AAA;MCI;iBCS;aDE;ODI;MCC;ODG;MCI;ODE;MCC;ODE;ECG;GDS;gBGyB,+DH;AIW;CJiB;AKO;CLK;AMM;CNY;AOO;CPU;AQQ;CRG;ASQ;CTG;AUC;CVW;AWQ;CXO;AYQ;CZa;AaS;CbM;AcS;CdO;AeO;mBCE;KDK;CfE;AiBM;CjBM;AkBM;wCCI,gBD;ClBM;AoBM;CpBK;AqBS;CrBe;AsBO;CtBO;AuBQ;CvBgB;AwBQ;CxBkB;AyBQ;CzBkB;A0BS;oECE;oDDC;iECE;oDDC;oECO;iDDC;C1BO;A4BO;C5BW;A6BQ;cCQ,kDD;WEC,qDF;YGC,qDH;WIC,gBJ;C7BE;AkCO;ClCU;AmCI;UCM,uDD;UEC;mEFC;CnCO;AsCS;sBCQ,kDD;CtCG;AwCO;CxCS"}},"type":"js/module"}]}