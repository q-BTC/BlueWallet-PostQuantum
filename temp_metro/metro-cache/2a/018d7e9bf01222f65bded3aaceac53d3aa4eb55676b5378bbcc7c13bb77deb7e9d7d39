{"dependencies":[{"name":"./ops","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":14,"index":158},"end":{"line":4,"column":30,"index":174}},{"start":{"line":4,"column":14,"index":158},"end":{"line":4,"column":30,"index":174}},{"start":{"line":4,"column":14,"index":158},"end":{"line":4,"column":30,"index":174}},{"start":{"line":4,"column":14,"index":158},"end":{"line":4,"column":30,"index":174}},{"start":{"line":4,"column":14,"index":158},"end":{"line":4,"column":30,"index":174}},{"start":{"line":4,"column":14,"index":158},"end":{"line":4,"column":30,"index":174}},{"start":{"line":4,"column":14,"index":158},"end":{"line":4,"column":30,"index":174}},{"start":{"line":4,"column":14,"index":158},"end":{"line":4,"column":30,"index":174}}],"key":"MT3kXv0VjBXn/v9Gl9mmB0slN1I="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.decode = exports.encode = exports.encodingLength = void 0;\n  /**\n   * Calculates the encoding length of a number used for push data in Bitcoin transactions.\n   * @param i The number to calculate the encoding length for.\n   * @returns The encoding length of the number.\n   */\n  function encodingLength(i) {\n    return i < _$$_REQUIRE(_dependencyMap[0], \"./ops\").OPS.OP_PUSHDATA1 ? 1 : i <= 0xff ? 2 : i <= 0xffff ? 3 : 5;\n  }\n  exports.encodingLength = encodingLength;\n  /**\n   * Encodes a number into a buffer using a variable-length encoding scheme.\n   * The encoded buffer is written starting at the specified offset.\n   * Returns the size of the encoded buffer.\n   *\n   * @param buffer - The buffer to write the encoded data into.\n   * @param num - The number to encode.\n   * @param offset - The offset at which to start writing the encoded buffer.\n   * @returns The size of the encoded buffer.\n   */\n  function encode(buffer, num, offset) {\n    var size = encodingLength(num);\n    // ~6 bit\n    if (size === 1) {\n      buffer.writeUInt8(num, offset);\n      // 8 bit\n    } else if (size === 2) {\n      buffer.writeUInt8(_$$_REQUIRE(_dependencyMap[0], \"./ops\").OPS.OP_PUSHDATA1, offset);\n      buffer.writeUInt8(num, offset + 1);\n      // 16 bit\n    } else if (size === 3) {\n      buffer.writeUInt8(_$$_REQUIRE(_dependencyMap[0], \"./ops\").OPS.OP_PUSHDATA2, offset);\n      buffer.writeUInt16LE(num, offset + 1);\n      // 32 bit\n    } else {\n      buffer.writeUInt8(_$$_REQUIRE(_dependencyMap[0], \"./ops\").OPS.OP_PUSHDATA4, offset);\n      buffer.writeUInt32LE(num, offset + 1);\n    }\n    return size;\n  }\n  exports.encode = encode;\n  /**\n   * Decodes a buffer and returns information about the opcode, number, and size.\n   * @param buffer - The buffer to decode.\n   * @param offset - The offset within the buffer to start decoding.\n   * @returns An object containing the opcode, number, and size, or null if decoding fails.\n   */\n  function decode(buffer, offset) {\n    var opcode = buffer.readUInt8(offset);\n    var num;\n    var size;\n    // ~6 bit\n    if (opcode < _$$_REQUIRE(_dependencyMap[0], \"./ops\").OPS.OP_PUSHDATA1) {\n      num = opcode;\n      size = 1;\n      // 8 bit\n    } else if (opcode === _$$_REQUIRE(_dependencyMap[0], \"./ops\").OPS.OP_PUSHDATA1) {\n      if (offset + 2 > buffer.length) return null;\n      num = buffer.readUInt8(offset + 1);\n      size = 2;\n      // 16 bit\n    } else if (opcode === _$$_REQUIRE(_dependencyMap[0], \"./ops\").OPS.OP_PUSHDATA2) {\n      if (offset + 3 > buffer.length) return null;\n      num = buffer.readUInt16LE(offset + 1);\n      size = 3;\n      // 32 bit\n    } else {\n      if (offset + 5 > buffer.length) return null;\n      if (opcode !== _$$_REQUIRE(_dependencyMap[0], \"./ops\").OPS.OP_PUSHDATA4) throw new Error('Unexpected opcode');\n      num = buffer.readUInt32LE(offset + 1);\n      size = 5;\n    }\n    return {\n      opcode: opcode,\n      number: num,\n      size: size\n    };\n  }\n  exports.decode = decode;\n});","lineCount":86,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"decode"],[7,16,3,14],[7,19,3,17,"exports"],[7,26,3,24],[7,27,3,25,"encode"],[7,33,3,31],[7,36,3,34,"exports"],[7,43,3,41],[7,44,3,42,"encodingLength"],[7,58,3,56],[7,61,3,59],[7,66,3,64],[7,67,3,65],[8,2,5,0],[9,0,6,0],[10,0,7,0],[11,0,8,0],[12,0,9,0],[13,2,10,0],[13,11,10,9,"encodingLength"],[13,25,10,23,"encodingLength"],[13,26,10,24,"i"],[13,27,10,25],[13,29,10,27],[14,4,11,2],[14,11,11,9,"i"],[14,12,11,10],[14,15,11,13,"_$$_REQUIRE"],[14,26,11,13],[14,27,11,13,"_dependencyMap"],[14,41,11,13],[14,55,11,19,"OPS"],[14,58,11,22],[14,59,11,23,"OP_PUSHDATA1"],[14,71,11,35],[14,74,11,38],[14,75,11,39],[14,78,11,42,"i"],[14,79,11,43],[14,83,11,47],[14,87,11,51],[14,90,11,54],[14,91,11,55],[14,94,11,58,"i"],[14,95,11,59],[14,99,11,63],[14,105,11,69],[14,108,11,72],[14,109,11,73],[14,112,11,76],[14,113,11,77],[15,2,12,0],[16,2,13,0,"exports"],[16,9,13,7],[16,10,13,8,"encodingLength"],[16,24,13,22],[16,27,13,25,"encodingLength"],[16,41,13,39],[17,2,14,0],[18,0,15,0],[19,0,16,0],[20,0,17,0],[21,0,18,0],[22,0,19,0],[23,0,20,0],[24,0,21,0],[25,0,22,0],[26,0,23,0],[27,2,24,0],[27,11,24,9,"encode"],[27,17,24,15,"encode"],[27,18,24,16,"buffer"],[27,24,24,22],[27,26,24,24,"num"],[27,29,24,27],[27,31,24,29,"offset"],[27,37,24,35],[27,39,24,37],[28,4,25,2],[28,8,25,8,"size"],[28,12,25,12],[28,15,25,15,"encodingLength"],[28,29,25,29],[28,30,25,30,"num"],[28,33,25,33],[28,34,25,34],[29,4,26,2],[30,4,27,2],[30,8,27,6,"size"],[30,12,27,10],[30,17,27,15],[30,18,27,16],[30,20,27,18],[31,6,28,4,"buffer"],[31,12,28,10],[31,13,28,11,"writeUInt8"],[31,23,28,21],[31,24,28,22,"num"],[31,27,28,25],[31,29,28,27,"offset"],[31,35,28,33],[31,36,28,34],[32,6,29,4],[33,4,30,2],[33,5,30,3],[33,11,30,9],[33,15,30,13,"size"],[33,19,30,17],[33,24,30,22],[33,25,30,23],[33,27,30,25],[34,6,31,4,"buffer"],[34,12,31,10],[34,13,31,11,"writeUInt8"],[34,23,31,21],[34,24,31,22,"_$$_REQUIRE"],[34,35,31,22],[34,36,31,22,"_dependencyMap"],[34,50,31,22],[34,64,31,28,"OPS"],[34,67,31,31],[34,68,31,32,"OP_PUSHDATA1"],[34,80,31,44],[34,82,31,46,"offset"],[34,88,31,52],[34,89,31,53],[35,6,32,4,"buffer"],[35,12,32,10],[35,13,32,11,"writeUInt8"],[35,23,32,21],[35,24,32,22,"num"],[35,27,32,25],[35,29,32,27,"offset"],[35,35,32,33],[35,38,32,36],[35,39,32,37],[35,40,32,38],[36,6,33,4],[37,4,34,2],[37,5,34,3],[37,11,34,9],[37,15,34,13,"size"],[37,19,34,17],[37,24,34,22],[37,25,34,23],[37,27,34,25],[38,6,35,4,"buffer"],[38,12,35,10],[38,13,35,11,"writeUInt8"],[38,23,35,21],[38,24,35,22,"_$$_REQUIRE"],[38,35,35,22],[38,36,35,22,"_dependencyMap"],[38,50,35,22],[38,64,35,28,"OPS"],[38,67,35,31],[38,68,35,32,"OP_PUSHDATA2"],[38,80,35,44],[38,82,35,46,"offset"],[38,88,35,52],[38,89,35,53],[39,6,36,4,"buffer"],[39,12,36,10],[39,13,36,11,"writeUInt16LE"],[39,26,36,24],[39,27,36,25,"num"],[39,30,36,28],[39,32,36,30,"offset"],[39,38,36,36],[39,41,36,39],[39,42,36,40],[39,43,36,41],[40,6,37,4],[41,4,38,2],[41,5,38,3],[41,11,38,9],[42,6,39,4,"buffer"],[42,12,39,10],[42,13,39,11,"writeUInt8"],[42,23,39,21],[42,24,39,22,"_$$_REQUIRE"],[42,35,39,22],[42,36,39,22,"_dependencyMap"],[42,50,39,22],[42,64,39,28,"OPS"],[42,67,39,31],[42,68,39,32,"OP_PUSHDATA4"],[42,80,39,44],[42,82,39,46,"offset"],[42,88,39,52],[42,89,39,53],[43,6,40,4,"buffer"],[43,12,40,10],[43,13,40,11,"writeUInt32LE"],[43,26,40,24],[43,27,40,25,"num"],[43,30,40,28],[43,32,40,30,"offset"],[43,38,40,36],[43,41,40,39],[43,42,40,40],[43,43,40,41],[44,4,41,2],[45,4,42,2],[45,11,42,9,"size"],[45,15,42,13],[46,2,43,0],[47,2,44,0,"exports"],[47,9,44,7],[47,10,44,8,"encode"],[47,16,44,14],[47,19,44,17,"encode"],[47,25,44,23],[48,2,45,0],[49,0,46,0],[50,0,47,0],[51,0,48,0],[52,0,49,0],[53,0,50,0],[54,2,51,0],[54,11,51,9,"decode"],[54,17,51,15,"decode"],[54,18,51,16,"buffer"],[54,24,51,22],[54,26,51,24,"offset"],[54,32,51,30],[54,34,51,32],[55,4,52,2],[55,8,52,8,"opcode"],[55,14,52,14],[55,17,52,17,"buffer"],[55,23,52,23],[55,24,52,24,"readUInt8"],[55,33,52,33],[55,34,52,34,"offset"],[55,40,52,40],[55,41,52,41],[56,4,53,2],[56,8,53,6,"num"],[56,11,53,9],[57,4,54,2],[57,8,54,6,"size"],[57,12,54,10],[58,4,55,2],[59,4,56,2],[59,8,56,6,"opcode"],[59,14,56,12],[59,17,56,15,"_$$_REQUIRE"],[59,28,56,15],[59,29,56,15,"_dependencyMap"],[59,43,56,15],[59,57,56,21,"OPS"],[59,60,56,24],[59,61,56,25,"OP_PUSHDATA1"],[59,73,56,37],[59,75,56,39],[60,6,57,4,"num"],[60,9,57,7],[60,12,57,10,"opcode"],[60,18,57,16],[61,6,58,4,"size"],[61,10,58,8],[61,13,58,11],[61,14,58,12],[62,6,59,4],[63,4,60,2],[63,5,60,3],[63,11,60,9],[63,15,60,13,"opcode"],[63,21,60,19],[63,26,60,24,"_$$_REQUIRE"],[63,37,60,24],[63,38,60,24,"_dependencyMap"],[63,52,60,24],[63,66,60,30,"OPS"],[63,69,60,33],[63,70,60,34,"OP_PUSHDATA1"],[63,82,60,46],[63,84,60,48],[64,6,61,4],[64,10,61,8,"offset"],[64,16,61,14],[64,19,61,17],[64,20,61,18],[64,23,61,21,"buffer"],[64,29,61,27],[64,30,61,28,"length"],[64,36,61,34],[64,38,61,36],[64,45,61,43],[64,49,61,47],[65,6,62,4,"num"],[65,9,62,7],[65,12,62,10,"buffer"],[65,18,62,16],[65,19,62,17,"readUInt8"],[65,28,62,26],[65,29,62,27,"offset"],[65,35,62,33],[65,38,62,36],[65,39,62,37],[65,40,62,38],[66,6,63,4,"size"],[66,10,63,8],[66,13,63,11],[66,14,63,12],[67,6,64,4],[68,4,65,2],[68,5,65,3],[68,11,65,9],[68,15,65,13,"opcode"],[68,21,65,19],[68,26,65,24,"_$$_REQUIRE"],[68,37,65,24],[68,38,65,24,"_dependencyMap"],[68,52,65,24],[68,66,65,30,"OPS"],[68,69,65,33],[68,70,65,34,"OP_PUSHDATA2"],[68,82,65,46],[68,84,65,48],[69,6,66,4],[69,10,66,8,"offset"],[69,16,66,14],[69,19,66,17],[69,20,66,18],[69,23,66,21,"buffer"],[69,29,66,27],[69,30,66,28,"length"],[69,36,66,34],[69,38,66,36],[69,45,66,43],[69,49,66,47],[70,6,67,4,"num"],[70,9,67,7],[70,12,67,10,"buffer"],[70,18,67,16],[70,19,67,17,"readUInt16LE"],[70,31,67,29],[70,32,67,30,"offset"],[70,38,67,36],[70,41,67,39],[70,42,67,40],[70,43,67,41],[71,6,68,4,"size"],[71,10,68,8],[71,13,68,11],[71,14,68,12],[72,6,69,4],[73,4,70,2],[73,5,70,3],[73,11,70,9],[74,6,71,4],[74,10,71,8,"offset"],[74,16,71,14],[74,19,71,17],[74,20,71,18],[74,23,71,21,"buffer"],[74,29,71,27],[74,30,71,28,"length"],[74,36,71,34],[74,38,71,36],[74,45,71,43],[74,49,71,47],[75,6,72,4],[75,10,72,8,"opcode"],[75,16,72,14],[75,21,72,19,"_$$_REQUIRE"],[75,32,72,19],[75,33,72,19,"_dependencyMap"],[75,47,72,19],[75,61,72,25,"OPS"],[75,64,72,28],[75,65,72,29,"OP_PUSHDATA4"],[75,77,72,41],[75,79,72,43],[75,85,72,49],[75,89,72,53,"Error"],[75,94,72,58],[75,95,72,59],[75,114,72,78],[75,115,72,79],[76,6,73,4,"num"],[76,9,73,7],[76,12,73,10,"buffer"],[76,18,73,16],[76,19,73,17,"readUInt32LE"],[76,31,73,29],[76,32,73,30,"offset"],[76,38,73,36],[76,41,73,39],[76,42,73,40],[76,43,73,41],[77,6,74,4,"size"],[77,10,74,8],[77,13,74,11],[77,14,74,12],[78,4,75,2],[79,4,76,2],[79,11,76,9],[80,6,77,4,"opcode"],[80,12,77,10],[80,14,77,4,"opcode"],[80,20,77,10],[81,6,78,4,"number"],[81,12,78,10],[81,14,78,12,"num"],[81,17,78,15],[82,6,79,4,"size"],[82,10,79,8],[82,12,79,4,"size"],[83,4,80,2],[83,5,80,3],[84,2,81,0],[85,2,82,0,"exports"],[85,9,82,7],[85,10,82,8,"decode"],[85,16,82,14],[85,19,82,17,"decode"],[85,25,82,23],[86,0,82,24],[86,3]],"functionMap":{"names":["<global>","encodingLength","encode","decode"],"mappings":"AAA;ACS;CDE;AEY;CFmB;AGQ;CH8B"}},"type":"js/module"}]}