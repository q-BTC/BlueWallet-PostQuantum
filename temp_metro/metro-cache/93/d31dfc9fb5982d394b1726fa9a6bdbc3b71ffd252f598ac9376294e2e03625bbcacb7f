{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":949,"column":33,"index":41384}}],"key":"5y7e5+zC7teYEEC6niD9f5zII1M="}},{"name":"@babel/runtime/helpers/readOnlyError","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":949,"column":33,"index":41384}}],"key":"tW9vjPH6bEH6zBBMaoehmzXhDcQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":949,"column":33,"index":41384}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":949,"column":33,"index":41384}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"./debug","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":47,"column":16,"index":2003},"end":{"line":47,"column":34,"index":2021}}],"key":"TxAI1NjbyH9rczJWabibJU6Zawg="}},{"name":"./RealmListeners","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":60,"column":25,"index":2554},"end":{"line":60,"column":52,"index":2581}},{"start":{"line":60,"column":25,"index":2554},"end":{"line":60,"column":52,"index":2581}},{"start":{"line":60,"column":25,"index":2554},"end":{"line":60,"column":52,"index":2581}},{"start":{"line":60,"column":25,"index":2554},"end":{"line":60,"column":52,"index":2581}},{"start":{"line":60,"column":25,"index":2554},"end":{"line":60,"column":52,"index":2581}},{"start":{"line":60,"column":25,"index":2554},"end":{"line":60,"column":52,"index":2581}},{"start":{"line":60,"column":25,"index":2554},"end":{"line":60,"column":52,"index":2581}},{"start":{"line":60,"column":25,"index":2554},"end":{"line":60,"column":52,"index":2581}},{"start":{"line":60,"column":25,"index":2554},"end":{"line":60,"column":52,"index":2581}},{"start":{"line":60,"column":25,"index":2554},"end":{"line":60,"column":52,"index":2581}},{"start":{"line":60,"column":25,"index":2554},"end":{"line":60,"column":52,"index":2581}},{"start":{"line":60,"column":25,"index":2554},"end":{"line":60,"column":52,"index":2581}},{"start":{"line":60,"column":25,"index":2554},"end":{"line":60,"column":52,"index":2581}}],"key":"IihrTmMSKhH3W0LBc9hu+L8W07g="}},{"name":"./errors","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":46,"column":17,"index":1966},"end":{"line":46,"column":36,"index":1985}}],"key":"GlkDztMSsNRYmp31iO+V/Albin8="}},{"name":"./assert","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}},{"start":{"line":45,"column":17,"index":1928},"end":{"line":45,"column":36,"index":1947}}],"key":"PRSWv9Op+8jXiipitv94+qE/Tqo="}},{"name":"./Configuration","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":55,"column":24,"index":2325},"end":{"line":55,"column":50,"index":2351}},{"start":{"line":55,"column":24,"index":2325},"end":{"line":55,"column":50,"index":2351}},{"start":{"line":55,"column":24,"index":2325},"end":{"line":55,"column":50,"index":2351}},{"start":{"line":55,"column":24,"index":2325},"end":{"line":55,"column":50,"index":2351}}],"key":"qqnrb41OWDuP3s5DrQn/dt4SuZE="}},{"name":"./platform","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":50,"column":19,"index":2120},"end":{"line":50,"column":40,"index":2141}},{"start":{"line":50,"column":19,"index":2120},"end":{"line":50,"column":40,"index":2141}},{"start":{"line":50,"column":19,"index":2120},"end":{"line":50,"column":40,"index":2141}},{"start":{"line":50,"column":19,"index":2120},"end":{"line":50,"column":40,"index":2141}},{"start":{"line":50,"column":19,"index":2120},"end":{"line":50,"column":40,"index":2141}},{"start":{"line":50,"column":19,"index":2120},"end":{"line":50,"column":40,"index":2141}},{"start":{"line":50,"column":19,"index":2120},"end":{"line":50,"column":40,"index":2141}},{"start":{"line":50,"column":19,"index":2120},"end":{"line":50,"column":40,"index":2141}},{"start":{"line":50,"column":19,"index":2120},"end":{"line":50,"column":40,"index":2141}},{"start":{"line":50,"column":19,"index":2120},"end":{"line":50,"column":40,"index":2141}},{"start":{"line":50,"column":19,"index":2120},"end":{"line":50,"column":40,"index":2141}},{"start":{"line":50,"column":19,"index":2120},"end":{"line":50,"column":40,"index":2141}},{"start":{"line":50,"column":19,"index":2120},"end":{"line":50,"column":40,"index":2141}},{"start":{"line":50,"column":19,"index":2120},"end":{"line":50,"column":40,"index":2141}}],"key":"5d+mydt6uZvYV4jul+vjS1FZAE8="}},{"name":"./binding","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}},{"start":{"line":44,"column":18,"index":1889},"end":{"line":44,"column":38,"index":1909}}],"key":"OjrA0Bxm3t0WtSdWtaEky0moQW8="}},{"name":"./flags","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":48,"column":16,"index":2039},"end":{"line":48,"column":34,"index":2057}},{"start":{"line":48,"column":16,"index":2039},"end":{"line":48,"column":34,"index":2057}}],"key":"n0WP4GhqtGGf9NpeD2G/jTx3Xak="}},{"name":"./ClassMap","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":54,"column":19,"index":2278},"end":{"line":54,"column":40,"index":2299}},{"start":{"line":54,"column":19,"index":2278},"end":{"line":54,"column":40,"index":2299}}],"key":"HefDSMpL/D6ed38KQI3TPi8QZQA="}},{"name":"./schema","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":53,"column":17,"index":2238},"end":{"line":53,"column":36,"index":2257}},{"start":{"line":53,"column":17,"index":2238},"end":{"line":53,"column":36,"index":2257}},{"start":{"line":53,"column":17,"index":2238},"end":{"line":53,"column":36,"index":2257}},{"start":{"line":53,"column":17,"index":2238},"end":{"line":53,"column":36,"index":2257}},{"start":{"line":53,"column":17,"index":2238},"end":{"line":53,"column":36,"index":2257}},{"start":{"line":53,"column":17,"index":2238},"end":{"line":53,"column":36,"index":2257}},{"start":{"line":53,"column":17,"index":2238},"end":{"line":53,"column":36,"index":2257}},{"start":{"line":53,"column":17,"index":2238},"end":{"line":53,"column":36,"index":2257}}],"key":"W26pFxeC1eoZg5NMFFVJmgEOTqQ="}},{"name":"./Object","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":59,"column":17,"index":2508},"end":{"line":59,"column":36,"index":2527}},{"start":{"line":59,"column":17,"index":2508},"end":{"line":59,"column":36,"index":2527}},{"start":{"line":59,"column":17,"index":2508},"end":{"line":59,"column":36,"index":2527}},{"start":{"line":51,"column":17,"index":2160},"end":{"line":51,"column":36,"index":2179}},{"start":{"line":59,"column":17,"index":2508},"end":{"line":59,"column":36,"index":2527}},{"start":{"line":59,"column":17,"index":2508},"end":{"line":59,"column":36,"index":2527}},{"start":{"line":59,"column":17,"index":2508},"end":{"line":59,"column":36,"index":2527}},{"start":{"line":59,"column":17,"index":2508},"end":{"line":59,"column":36,"index":2527}},{"start":{"line":51,"column":17,"index":2160},"end":{"line":51,"column":36,"index":2179}},{"start":{"line":51,"column":17,"index":2160},"end":{"line":51,"column":36,"index":2179}},{"start":{"line":51,"column":17,"index":2160},"end":{"line":51,"column":36,"index":2179}},{"start":{"line":51,"column":17,"index":2160},"end":{"line":51,"column":36,"index":2179}}],"key":"IEcpXnD68e1FXBEPXZ0M6SKXBj4="}},{"name":"./symbols","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":62,"column":18,"index":2664},"end":{"line":62,"column":38,"index":2684}},{"start":{"line":62,"column":18,"index":2664},"end":{"line":62,"column":38,"index":2684}},{"start":{"line":62,"column":18,"index":2664},"end":{"line":62,"column":38,"index":2684}},{"start":{"line":62,"column":18,"index":2664},"end":{"line":62,"column":38,"index":2684}},{"start":{"line":62,"column":18,"index":2664},"end":{"line":62,"column":38,"index":2684}},{"start":{"line":62,"column":18,"index":2664},"end":{"line":62,"column":38,"index":2684}}],"key":"ab2m4Asmhdk58sCF6nygJvPWckI="}},{"name":"./List","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":57,"column":15,"index":2406},"end":{"line":57,"column":32,"index":2423}}],"key":"EURKWCHUyAcP08wje5ywtrxvFeM="}},{"name":"./Results","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":52,"column":18,"index":2199},"end":{"line":52,"column":38,"index":2219}},{"start":{"line":52,"column":18,"index":2199},"end":{"line":52,"column":38,"index":2219}}],"key":"BrlhqttqNV6zdBRsFmoNgLLd5ac="}},{"name":"./collection-accessors/Results","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":63,"column":18,"index":2704},"end":{"line":63,"column":59,"index":2745}}],"key":"iCk25Vic0sR8BAxm4z6trJmyqZQ="}},{"name":"./Logger","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":56,"column":17,"index":2370},"end":{"line":56,"column":36,"index":2389}},{"start":{"line":56,"column":17,"index":2370},"end":{"line":56,"column":36,"index":2389}},{"start":{"line":56,"column":17,"index":2370},"end":{"line":56,"column":36,"index":2389}},{"start":{"line":56,"column":17,"index":2370},"end":{"line":56,"column":36,"index":2389}},{"start":{"line":56,"column":17,"index":2370},"end":{"line":56,"column":36,"index":2389}}],"key":"GgaoAMvcSOWuK+KeK4ZJlNiPYEg="}},{"name":"./ProgressRealmPromise","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":58,"column":31,"index":2456},"end":{"line":58,"column":64,"index":2489}},{"start":{"line":58,"column":31,"index":2456},"end":{"line":58,"column":64,"index":2489}}],"key":"KYHKVGOf5Msfv1QCrvhYe3tpRpk="}},{"name":"./type-helpers/array-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":61,"column":23,"index":2606},"end":{"line":61,"column":61,"index":2644}}],"key":"V0mEbGcbkBztl08p+aOMDFyERvo="}},{"name":"./indirect","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":49,"column":19,"index":2078},"end":{"line":49,"column":40,"index":2099}}],"key":"cYlSegnhnQg7iiD9MQpYQJJgaGk="}},{"name":"./namespace","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":915,"column":24,"index":40039},"end":{"line":915,"column":46,"index":40061}}],"key":"u0P7tC+K1OWBPm2ZPzGRIU5NEKE="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  ////////////////////////////////////////////////////////////////////////////\n  //\n  // Copyright 2022 Realm Inc.\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  // http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n  //\n  ////////////////////////////////////////////////////////////////////////////\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _readOnlyError = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/readOnlyError\");\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/createClass\");\n  var _Realm;\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function get() {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Realm = void 0;\n  var debug = (0, _$$_REQUIRE(_dependencyMap[4], \"./debug\").extendDebug)(\"Realm\");\n  /**\n   * Asserts the event passed as string is a valid RealmEvent value.\n   * @throws A {@link TypeAssertionError} if an unexpected name is passed via {@link name}.\n   * @param name - The name of the event.\n   * @internal\n   */\n  function assertRealmEvent(name) {\n    var values = Object.values(_$$_REQUIRE(_dependencyMap[5], \"./RealmListeners\").RealmEvent);\n    if (!values.includes(name)) {\n      throw new (_$$_REQUIRE(_dependencyMap[6], \"./errors\").TypeAssertionError)(\"One of \" + values.join(\", \"), name);\n    }\n  }\n  /**\n   * The Realm database.\n   */\n  var Realm = /*#__PURE__*/function () {\n    /** @internal */\n\n    function Realm(arg) {\n      var _this = this;\n      var internalConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      _classCallCheck(this, Realm);\n      this.schemaExtras = {};\n      this.changeListeners = new (_$$_REQUIRE(_dependencyMap[5], \"./RealmListeners\").RealmListeners)(this, _$$_REQUIRE(_dependencyMap[5], \"./RealmListeners\").RealmEvent.Change);\n      this.beforeNotifyListeners = new (_$$_REQUIRE(_dependencyMap[5], \"./RealmListeners\").RealmListeners)(this, _$$_REQUIRE(_dependencyMap[5], \"./RealmListeners\").RealmEvent.BeforeNotify);\n      this.schemaListeners = new (_$$_REQUIRE(_dependencyMap[5], \"./RealmListeners\").RealmListeners)(this, _$$_REQUIRE(_dependencyMap[5], \"./RealmListeners\").RealmEvent.Schema);\n      var config = typeof arg === \"string\" ? {\n        path: arg\n      } : arg || {};\n      if (arg !== null) {\n        var _internalConfig$inter;\n        (0, _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert)(!internalConfig.schemaExtras, \"Expected either a configuration or schemaExtras\");\n        (0, _$$_REQUIRE(_dependencyMap[8], \"./Configuration\").validateConfiguration)(config);\n        var _Realm$transformConfi = Realm.transformConfig(config),\n          bindingConfig = _Realm$transformConfi.bindingConfig,\n          schemaExtras = _Realm$transformConfi.schemaExtras;\n        debug(\"open\", bindingConfig);\n        this.schemaExtras = schemaExtras;\n        _$$_REQUIRE(_dependencyMap[9], \"./platform\").fs.ensureDirectoryForFile(bindingConfig.path);\n        this.internal = (_internalConfig$inter = internalConfig.internal) != null ? _internalConfig$inter : _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Realm.getSharedRealm(bindingConfig);\n        if (_$$_REQUIRE(_dependencyMap[11], \"./flags\").flags.ALLOW_CLEAR_TEST_STATE) {\n          Realm.internals.add(new (_$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.WeakRef)(this.internal));\n        }\n        _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Helpers.setBindingContext(this.internal, {\n          didChange: function didChange(r) {\n            r.verifyOpen();\n            _this.changeListeners.notify();\n          },\n          schemaDidChange: function schemaDidChange(r) {\n            r.verifyOpen();\n            _this.classes = new (_$$_REQUIRE(_dependencyMap[12], \"./ClassMap\").ClassMap)(_this, _this.internal.schema, _this.schema);\n            _this.schemaListeners.notify(_this.schema);\n          },\n          beforeNotify: function beforeNotify(r) {\n            r.verifyOpen();\n            _this.beforeNotifyListeners.notify();\n          }\n        });\n      } else {\n        var internal = internalConfig.internal,\n          _schemaExtras = internalConfig.schemaExtras;\n        _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.instanceOf(internal, _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Realm, \"internal\");\n        this.internal = internal;\n        this.schemaExtras = _schemaExtras || {};\n      }\n      // Optionally: Exclude or include Realm files from iCloud backup\n      var excludeFromIcloudBackup = config.excludeFromIcloudBackup;\n      if (typeof excludeFromIcloudBackup === \"boolean\") {\n        var realmPath = this.internal.config.path;\n        for (var fileNameSuffix of [\"\", \".lock\", \".note\", \".management\"]) {\n          var filePath = realmPath + fileNameSuffix;\n          _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.JsPlatformHelpers.excludeFromIcloudBackup(filePath, excludeFromIcloudBackup);\n        }\n      }\n      Object.defineProperty(this, \"classes\", {\n        enumerable: false,\n        configurable: false,\n        writable: true\n      });\n      Object.defineProperty(this, \"internal\", {\n        enumerable: false,\n        configurable: false,\n        writable: false\n      });\n      this.classes = new (_$$_REQUIRE(_dependencyMap[12], \"./ClassMap\").ClassMap)(this, this.internal.schema, this.schema);\n    }\n    /**\n     * Indicates if this Realm contains any objects.\n     * @returns `true` if empty, `false` otherwise.\n     * @readonly\n     * @since 1.10.0\n     */\n    return _createClass(Realm, [{\n      key: \"isEmpty\",\n      get: function get() {\n        return this.internal.isEmpty;\n      }\n      /**\n       * The path to the file where this Realm is stored.\n       * @returns A string containing the path to the file where this Realm is stored.\n       * @readonly\n       * @since 0.12.0\n       */\n    }, {\n      key: \"path\",\n      get: function get() {\n        return this.internal.config.path;\n      }\n      /**\n       * Indicates if this Realm was opened as read-only.\n       * @returns `true` if this Realm is read-only, `false` otherwise.\n       * @readonly\n       * @since 0.12.0\n       */\n    }, {\n      key: \"isReadOnly\",\n      get: function get() {\n        return this.internal.config.schemaMode === 1 /* binding.SchemaMode.Immutable */;\n      }\n      /**\n       * Indicates if this Realm was opened in-memory.\n       * @returns `true` if this Realm is in-memory, `false` otherwise.\n       * @readonly\n       */\n    }, {\n      key: \"isInMemory\",\n      get: function get() {\n        return this.internal.config.inMemory;\n      }\n      /**\n       * A normalized representation of the schema provided in the {@link Configuration} when this Realm was constructed.\n       * @returns An array of {@link CanonicalObjectSchema} describing all objects in this Realm.\n       * @readonly\n       * @since 0.12.0\n       */\n    }, {\n      key: \"schema\",\n      get: function get() {\n        var schemas = (0, _$$_REQUIRE(_dependencyMap[13], \"./schema\").fromBindingRealmSchema)(this.internal.schema);\n        // Stitch in the constructors and defaults stored in this.schemaExtras\n        for (var objectSchema of schemas) {\n          var extras = this.schemaExtras[objectSchema.name];\n          if (extras) {\n            objectSchema.ctor = extras.constructor;\n          }\n          for (var property of Object.values(objectSchema.properties)) {\n            property.default = extras ? extras.defaults[property.name] : undefined;\n            property.presentation = extras ? extras.presentations[property.name] : undefined;\n          }\n        }\n        return schemas;\n      }\n      /**\n       * The current schema version of the Realm.\n       * @returns The schema version of this Realm, as a `number`.\n       * @readonly\n       * @since 0.12.0\n       */\n    }, {\n      key: \"schemaVersion\",\n      get: function get() {\n        return Number(this.internal.schemaVersion);\n      }\n      /**\n       * Indicates if this Realm is in a write transaction.\n       * @returns `true` if in a write transaction, `false` otherwise.\n       * @readonly\n       * @since 1.10.3\n       */\n    }, {\n      key: \"isInTransaction\",\n      get: function get() {\n        // TODO: Consider keeping a local state in JS for this\n        return this.internal.isInTransaction;\n      }\n      /**\n       * Indicates if this Realm is in migration.\n       * @returns `true` if in migration, `false` otherwise\n       * @readonly\n       * @since 12.3.0\n       */\n    }, {\n      key: \"isInMigration\",\n      get: function get() {\n        // TODO: Consider keeping a local state in JS for this\n        return this.internal.isInMigration;\n      }\n      /**\n       * Indicates if this Realm has been closed.\n       * @returns `true` if closed, `false` otherwise.\n       * @readonly\n       * @since 2.1.0\n       */\n    }, {\n      key: \"isClosed\",\n      get: function get() {\n        // TODO: Consider keeping a local state in JS for this\n        return this.internal.isClosed;\n      }\n      /**\n       * Closes this Realm so it may be re-opened with a newer schema version.\n       * All objects and collections from this Realm are no longer valid after calling this method.\n       * The method is idempotent.\n       */\n    }, {\n      key: \"close\",\n      value: function close() {\n        this.internal.close();\n      }\n    }, {\n      key: \"create\",\n      value: function create(type, values) {\n        var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _$$_REQUIRE(_dependencyMap[14], \"./Object\").UpdateMode.Never;\n        // Supporting a boolean overload for mode\n        if (mode === true) {\n          mode = _$$_REQUIRE(_dependencyMap[14], \"./Object\").UpdateMode.All;\n        } else if (mode === false) {\n          mode = _$$_REQUIRE(_dependencyMap[14], \"./Object\").UpdateMode.Never;\n        }\n        // Implements https://github.com/realm/realm-js/blob/v11/src/js_realm.hpp#L1260-L1321\n        if (values instanceof _$$_REQUIRE(_dependencyMap[14], \"./Object\").RealmObject && !values[_$$_REQUIRE(_dependencyMap[15], \"./symbols\").OBJECT_INTERNAL]) {\n          throw new Error(\"Cannot create an object from a detached RealmObject instance\");\n        }\n        if (!Object.values(_$$_REQUIRE(_dependencyMap[14], \"./Object\").UpdateMode).includes(mode)) {\n          throw new Error(`Unsupported 'updateMode'. Only '${_$$_REQUIRE(_dependencyMap[14], \"./Object\").UpdateMode.Never}', '${_$$_REQUIRE(_dependencyMap[14], \"./Object\").UpdateMode.Modified}' or '${_$$_REQUIRE(_dependencyMap[14], \"./Object\").UpdateMode.All}' is supported.`);\n        }\n        this.internal.verifyOpen();\n        var helpers = this.classes.getHelpers(type);\n        this.currentUpdateMode = mode;\n        var realmObject;\n        try {\n          realmObject = _$$_REQUIRE(_dependencyMap[14], \"./Object\").RealmObject.create(this, values, mode, {\n            helpers: helpers\n          });\n        } finally {\n          this.currentUpdateMode = undefined;\n        }\n        return isAsymmetric(helpers.objectSchema) ? undefined : realmObject;\n      }\n      //FIXME: any should not be used, but we are staying compatible with previous versions\n      /**\n       * Deletes the provided Realm object, or each one inside the provided collection.\n       * @param subject - The Realm object to delete, or a collection containing multiple Realm objects to delete.\n       */\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, {\n      key: \"delete\",\n      value: function _delete(subject) {\n        _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.inTransaction(this, \"Can only delete objects within a transaction.\");\n        _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.object(subject, \"subject\");\n        if (subject instanceof _$$_REQUIRE(_dependencyMap[14], \"./Object\").RealmObject) {\n          _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.isSameRealm(subject[_$$_REQUIRE(_dependencyMap[15], \"./symbols\").OBJECT_REALM].internal, this.internal, \"Can't delete an object from another Realm\");\n          var _this$classes$getHelp = this.classes.getHelpers(subject),\n            objectSchema = _this$classes$getHelp.objectSchema;\n          var obj = subject[_$$_REQUIRE(_dependencyMap[15], \"./symbols\").OBJECT_INTERNAL];\n          _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.isValid(obj, \"Object is invalid. Either it has been previously deleted or the Realm it belongs to has been closed.\");\n          var table = _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Helpers.getTable(this.internal, objectSchema.tableKey);\n          table.removeObject(obj.key);\n        } else if (subject instanceof _$$_REQUIRE(_dependencyMap[16], \"./List\").List) {\n          subject.internal.deleteAll();\n        } else if (subject instanceof _$$_REQUIRE(_dependencyMap[17], \"./Results\").Results) {\n          subject.internal.clear();\n        } else if (Array.isArray(subject) || Symbol.iterator in subject) {\n          //@ts-expect-error the above check is good enough\n          for (var object of subject) {\n            _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.instanceOf(object, _$$_REQUIRE(_dependencyMap[14], \"./Object\").RealmObject);\n            _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.isSameRealm(object[_$$_REQUIRE(_dependencyMap[15], \"./symbols\").OBJECT_REALM].internal, this.internal, \"Can't delete an object from another Realm\");\n            var _this$classes$getHelp2 = this.classes.getHelpers(object),\n              _objectSchema = _this$classes$getHelp2.objectSchema;\n            var _table = _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Helpers.getTable(this.internal, _objectSchema.tableKey);\n            _table.removeObject(object[_$$_REQUIRE(_dependencyMap[15], \"./symbols\").OBJECT_INTERNAL].key);\n          }\n        } else {\n          throw new Error(\"Can only delete objects, lists and results.\");\n        }\n      }\n      /**\n       * Deletes a Realm model, including all of its objects.\n       * If called outside a migration function, {@link schema} and {@link schemaVersion} are updated.\n       * @param name - The model name.\n       */\n    }, {\n      key: \"deleteModel\",\n      value: function deleteModel(name) {\n        _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.inTransaction(this, \"Can only delete objects within a transaction.\");\n        _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Helpers.deleteDataForObject(this.internal, name);\n        if (!this.internal.isInMigration) {\n          var newSchema = this.internal.schema.filter(function (objectSchema) {\n            return objectSchema.name !== name;\n          });\n          this.internal.updateSchema(newSchema, _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Int64.add(this.internal.schemaVersion, _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Int64.numToInt(1)), null, null, true);\n        }\n      }\n      /**\n       * **WARNING:** This will delete **all** objects in the Realm!\n       */\n    }, {\n      key: \"deleteAll\",\n      value: function deleteAll() {\n        _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.inTransaction(this, \"Can only delete objects within a transaction.\");\n        for (var objectSchema of this.internal.schema) {\n          var table = _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Helpers.getTable(this.internal, objectSchema.tableKey);\n          table.clear();\n        }\n      }\n    }, {\n      key: \"objectForPrimaryKey\",\n      value: function objectForPrimaryKey(type, primaryKey) {\n        // Implements https://github.com/realm/realm-js/blob/v11/src/js_realm.hpp#L1240-L1258\n        var _this$classes$getHelp3 = this.classes.getHelpers(type),\n          objectSchema = _this$classes$getHelp3.objectSchema,\n          properties = _this$classes$getHelp3.properties,\n          wrapObject = _this$classes$getHelp3.wrapObject;\n        if (!objectSchema.primaryKey) {\n          throw new Error(`Expected a primary key on '${objectSchema.name}'`);\n        }\n        if (isAsymmetric(objectSchema)) {\n          throw new Error(\"You cannot query an asymmetric object.\");\n        }\n        var table = _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Helpers.getTable(this.internal, objectSchema.tableKey);\n        var value = properties.get(objectSchema.primaryKey).toBinding(primaryKey);\n        try {\n          var objKey = table.findPrimaryKey(value);\n          if (_$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.isEmptyObjKey(objKey)) {\n            return null;\n          } else {\n            var obj = table.getObject(objKey);\n            return wrapObject(obj);\n          }\n        } catch (err) {\n          // TODO: Match on something else than the error message, when exposed by the binding\n          if (err instanceof Error && err.message.startsWith(\"No object with key\")) {\n            throw new Error(`No '${objectSchema.name}' with key '${primaryKey}'`);\n          } else {\n            throw err;\n          }\n        }\n      }\n    }, {\n      key: \"_objectForObjectKey\",\n      value: function _objectForObjectKey(type, objectKey) {\n        var _this$classes$getHelp4 = this.classes.getHelpers(type),\n          objectSchema = _this$classes$getHelp4.objectSchema,\n          wrapObject = _this$classes$getHelp4.wrapObject;\n        if (isEmbedded(objectSchema)) {\n          throw new Error(\"You cannot query an embedded object.\");\n        } else if (isAsymmetric(objectSchema)) {\n          throw new Error(\"You cannot query an asymmetric object.\");\n        }\n        _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.numericString(objectKey);\n        var table = _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Helpers.getTable(this.internal, objectSchema.tableKey);\n        try {\n          var objKey = _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.stringToObjKey(objectKey);\n          var obj = table.tryGetObject(objKey);\n          var result = obj && wrapObject(obj);\n          return result === null ? undefined : result;\n        } catch (err) {\n          if (err instanceof _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.InvalidObjKey) {\n            return undefined;\n          } else {\n            throw err;\n          }\n        }\n      }\n    }, {\n      key: \"objects\",\n      value: function objects(type) {\n        var internal = this.internal,\n          classes = this.classes;\n        var _classes$getHelpers = classes.getHelpers(type),\n          objectSchema = _classes$getHelpers.objectSchema,\n          wrapObject = _classes$getHelpers.wrapObject;\n        if (isEmbedded(objectSchema)) {\n          throw new Error(\"You cannot query an embedded object.\");\n        } else if (isAsymmetric(objectSchema)) {\n          throw new Error(\"You cannot query an asymmetric object.\");\n        }\n        var table = _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Helpers.getTable(internal, objectSchema.tableKey);\n        var results = _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Results.fromTable(internal, table);\n        var typeHelpers = {\n          fromBinding: function fromBinding(value) {\n            return wrapObject(value);\n          },\n          toBinding: function toBinding(value) {\n            _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.instanceOf(value, _$$_REQUIRE(_dependencyMap[14], \"./Object\").RealmObject);\n            return value[_$$_REQUIRE(_dependencyMap[15], \"./symbols\").OBJECT_INTERNAL];\n          }\n        };\n        var accessor = (0, _$$_REQUIRE(_dependencyMap[18], \"./collection-accessors/Results\").createResultsAccessor)({\n          realm: this,\n          typeHelpers: typeHelpers,\n          itemType: 7 /* binding.PropertyType.Object */\n        });\n        return new (_$$_REQUIRE(_dependencyMap[17], \"./Results\").Results)(this, results, accessor, typeHelpers);\n      }\n      /**\n       * Add a listener {@link callback} for the specified {@link eventName}.\n       * @param eventName - The name of event that should cause the callback to be called.\n       * @param callback - Function to be called when a change event occurs.\n       * Each callback will only be called once per event, regardless of the number of times\n       * it was added.\n       * @throws An {@link Error} if an invalid event {@link eventName} is supplied, if Realm is closed or if {@link callback} is not a function.\n       */\n    }, {\n      key: \"addListener\",\n      value: function addListener(eventName, callback) {\n        _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.open(this);\n        _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.function(callback);\n        if (eventName === \"change\") {\n          this.changeListeners.add(callback);\n        } else if (eventName === \"schema\") {\n          this.schemaListeners.add(callback);\n        } else if (eventName === \"beforenotify\") {\n          this.beforeNotifyListeners.add(callback);\n        } else {\n          throw new Error(`Unknown event name '${eventName}': only 'change', 'schema' and 'beforenotify' are supported.`);\n        }\n      }\n      /**\n       * Remove the listener {@link callback} for the specified event {@link eventName}.\n       * @param eventName - The event name.\n       * @param callback - Function that was previously added as a listener for this event through the {@link addListener} method.\n       * @throws an {@link Error} If an invalid event {@link eventName} is supplied, if Realm is closed or if {@link callback} is not a function.\n       */\n    }, {\n      key: \"removeListener\",\n      value: function removeListener(eventName, callback) {\n        _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.open(this);\n        _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.function(callback);\n        assertRealmEvent(eventName);\n        if (eventName === _$$_REQUIRE(_dependencyMap[5], \"./RealmListeners\").RealmEvent.Change) {\n          this.changeListeners.remove(callback);\n        } else if (eventName === _$$_REQUIRE(_dependencyMap[5], \"./RealmListeners\").RealmEvent.Schema) {\n          this.schemaListeners.remove(callback);\n        } else if (eventName === _$$_REQUIRE(_dependencyMap[5], \"./RealmListeners\").RealmEvent.BeforeNotify) {\n          this.beforeNotifyListeners.remove(callback);\n        } else {\n          _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.never(eventName, \"eventName\");\n        }\n      }\n      /**\n       * Remove all event listeners (restricted to the event {@link eventName}, if provided).\n       * @param eventName - The name of the event whose listeners should be removed.\n       * @throws An {@link Error} when invalid event {@link eventName} is supplied.\n       */\n    }, {\n      key: \"removeAllListeners\",\n      value: function removeAllListeners(eventName) {\n        _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.open(this);\n        if (typeof eventName === \"undefined\") {\n          this.changeListeners.removeAll();\n          this.schemaListeners.removeAll();\n          this.beforeNotifyListeners.removeAll();\n        } else {\n          _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.string(eventName, \"eventName\");\n          assertRealmEvent(eventName);\n          if (eventName === _$$_REQUIRE(_dependencyMap[5], \"./RealmListeners\").RealmEvent.Change) {\n            this.changeListeners.removeAll();\n          } else if (eventName === _$$_REQUIRE(_dependencyMap[5], \"./RealmListeners\").RealmEvent.Schema) {\n            this.schemaListeners.removeAll();\n          } else if (eventName === _$$_REQUIRE(_dependencyMap[5], \"./RealmListeners\").RealmEvent.BeforeNotify) {\n            this.beforeNotifyListeners.removeAll();\n          } else {\n            _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.never(eventName, \"eventName\");\n          }\n        }\n      }\n      /**\n       * Synchronously call the provided {@link callback} inside a write transaction. If an exception happens inside a transaction,\n       * you’ll lose the changes in that transaction, but the Realm itself won’t be affected (or corrupted).\n       * More precisely, {@link beginTransaction} and {@link commitTransaction} will be called\n       * automatically. If any exception is thrown during the transaction {@link cancelTransaction} will\n       * be called instead of {@link commitTransaction} and the exception will be re-thrown to the caller of {@link write}.\n       *\n       * Nested transactions (calling {@link write} within {@link write}) is not possible.\n       * @param callback - Function to be called inside a write transaction.\n       * @returns Returned value from the callback.\n       */\n    }, {\n      key: \"write\",\n      value: function write(callback) {\n        var result = undefined;\n        this.internal.beginTransaction();\n        try {\n          result = callback();\n        } catch (err) {\n          this.internal.cancelTransaction();\n          throw err;\n        }\n        this.internal.commitTransaction();\n        return result;\n      }\n      /**\n       * Initiate a write transaction.\n       *\n       * When doing a transaction, it is highly recommended to do error handling.\n       * If you don't handle errors, your data might become inconsistent. Error handling\n       * will often involve canceling the transaction.\n       * @throws An {@link Error} if already in write transaction\n       * @see {@link cancelTransaction}\n       * @see {@link commitTransaction}\n       * @example\n       * realm.beginTransaction();\n       * try {\n       *   realm.create('Person', { name: 'Arthur Dent',  origin: 'Earth' });\n       *   realm.create('Person', { name: 'Ford Prefect', origin: 'Betelgeuse Five' });\n       *   realm.commitTransaction();\n       * } catch (e) {\n       *   realm.cancelTransaction();\n       *   throw e;\n       * }\n       */\n    }, {\n      key: \"beginTransaction\",\n      value: function beginTransaction() {\n        this.internal.beginTransaction();\n      }\n      /**\n       * Commit a write transaction.\n       * @see {@link beginTransaction}\n       */\n    }, {\n      key: \"commitTransaction\",\n      value: function commitTransaction() {\n        this.internal.commitTransaction();\n      }\n      /**\n       * Cancel a write transaction.\n       * @see {@link beginTransaction}\n       */\n    }, {\n      key: \"cancelTransaction\",\n      value: function cancelTransaction() {\n        this.internal.cancelTransaction();\n      }\n      /**\n       * Replaces all string columns in this Realm with a string enumeration column and compacts the\n       * database file.\n       *\n       * Cannot be called from a write transaction.\n       *\n       * Compaction will not occur if other {@link Realm} instances exist.\n       *\n       * While compaction is in progress, attempts by other threads or processes to open the database will\n       * wait.\n       *\n       * Be warned that resource requirements for compaction is proportional to the amount of live data in\n       * the database. Compaction works by writing the database contents to a temporary database file and\n       * then replacing the database with the temporary one.\n       * @returns `true` if compaction succeeds, `false` if not.\n       */\n    }, {\n      key: \"compact\",\n      value: function compact() {\n        _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.outTransaction(this, \"Cannot compact a Realm within a transaction.\");\n        return this.internal.compact();\n      }\n      /**\n       * Writes a compacted copy of the Realm with the given configuration.\n       *\n       * The destination file cannot already exist.\n       * All conversions between synced and non-synced Realms are supported, and will be\n       * performed according to the {@link config} parameter, which describes the desired output.\n       *\n       * Note that if this method is called from within a write transaction, the current data is written,\n       * not the data from the point when the previous write transaction was committed.\n       * @param config - Realm configuration that describes the output realm.\n       */\n    }, {\n      key: \"writeCopyTo\",\n      value: function writeCopyTo(config) {\n        _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.outTransaction(this, \"Can only convert Realms outside a transaction.\");\n        (0, _$$_REQUIRE(_dependencyMap[8], \"./Configuration\").validateConfiguration)(config);\n        var _Realm$transformConfi2 = Realm.transformConfig(config),\n          bindingConfig = _Realm$transformConfi2.bindingConfig;\n        this.internal.convert(bindingConfig);\n      }\n      /**\n       * Update the schema of the Realm.\n       * @param schema The schema which the Realm should be updated to use.\n       * @internal\n       */\n    }, {\n      key: \"_updateSchema\",\n      value: function _updateSchema(schema) {\n        (0, _$$_REQUIRE(_dependencyMap[13], \"./schema\").validateRealmSchema)(schema);\n        var normalizedSchema = (0, _$$_REQUIRE(_dependencyMap[13], \"./schema\").normalizeRealmSchema)(schema);\n        var bindingSchema = (0, _$$_REQUIRE(_dependencyMap[13], \"./schema\").toBindingSchema)(normalizedSchema);\n        if (!this.isInTransaction) {\n          throw new Error(\"Can only create object schema within a transaction.\");\n        }\n        this.internal.updateSchema(bindingSchema, _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Int64.add(this.internal.schemaVersion, _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Int64.numToInt(1)), null, null, true);\n        // Note: The schema change listener is fired immediately after the call to\n        //       `this.internal.updateSchema()` (thus before `_updateSchema()` has\n        //       returned). Therefore, `this.classes` is updated in the `schemaDidChange`\n        //       callback and not here.\n      }\n      /** @internal */\n    }, {\n      key: \"getClassHelpers\",\n      value: function getClassHelpers(arg) {\n        return this.classes.getHelpers(arg);\n      }\n    }], [{\n      key: \"setLogLevel\",\n      value:\n      /**\n       * Sets the log level.\n       * @param level - The log level to be used by the logger. The default value is `info`.\n       * @param category - The category to set the log level for. If omitted, the log level is set for all categories (`\"Realm\"`).\n       * @note The log level can be changed during the lifetime of the application.\n       * @since 12.0.0\n       * @example\n       * Realm.setLogLevel(\"all\");\n       */\n      function setLogLevel(level) {\n        var category = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Realm\";\n        (0, _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert)(_$$_REQUIRE(_dependencyMap[19], \"./Logger\").LOG_CATEGORIES.includes(category), `Unexpected log category: '${category}'`);\n        var categoryRef = _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.LogCategoryRef.getCategory(category);\n        categoryRef.setDefaultLevelThreshold((0, _$$_REQUIRE(_dependencyMap[19], \"./Logger\").toBindingLoggerLevel)(level));\n      }\n    }, {\n      key: \"setLogger\",\n      value: function setLogger(loggerCallback) {\n        _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.function(loggerCallback);\n        _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Logger.setDefaultLogger((0, _$$_REQUIRE(_dependencyMap[19], \"./Logger\").toBindingLogger)(loggerCallback));\n      }\n      /**\n       * Closes all Realms, cancels all pending {@link Realm.open} calls, clears internal caches, resets the logger and collects garbage.\n       * Call this method to free up the event loop and allow Node.js to perform a graceful exit.\n       */\n    }, {\n      key: \"shutdown\",\n      value: function shutdown() {\n        // Close any realms not already closed\n        for (var realmRef of Realm.internals) {\n          var realm = realmRef.deref();\n          if (realm && !realm.isClosed) {\n            realm.close();\n          }\n        }\n        Realm.internals.clear();\n        _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.RealmCoordinator.clearAllCaches();\n        _$$_REQUIRE(_dependencyMap[20], \"./ProgressRealmPromise\").ProgressRealmPromise.cancelAll();\n        _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Logger.setDefaultLogger(null);\n        _$$_REQUIRE(_dependencyMap[9], \"./platform\").garbageCollection.collect();\n      }\n      /**\n       * Clears the state by closing and deleting any Realm in the default directory and logout all users.\n       * NOTE: Not a part of the public API and it's primarily used from the library's tests.\n       * @private\n       */\n    }, {\n      key: \"clearTestState\",\n      value: function clearTestState() {\n        (0, _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert)(_$$_REQUIRE(_dependencyMap[11], \"./flags\").flags.ALLOW_CLEAR_TEST_STATE, \"Set the flags.ALLOW_CLEAR_TEST_STATE = true before calling this.\");\n        Realm.shutdown();\n        // Delete all Realm files in the default directory\n        var defaultDirectoryPath = _$$_REQUIRE(_dependencyMap[9], \"./platform\").fs.getDefaultDirectoryPath();\n        _$$_REQUIRE(_dependencyMap[9], \"./platform\").fs.removeRealmFilesFromDirectory(defaultDirectoryPath);\n      }\n      /**\n       * Delete the Realm file for the given configuration.\n       * @param config - The configuration for the Realm being deleted.\n       * @throws An {@link Error} if anything in the provided {@link config} is invalid.\n       */\n    }, {\n      key: \"deleteFile\",\n      value: function deleteFile(config) {\n        (0, _$$_REQUIRE(_dependencyMap[8], \"./Configuration\").validateConfiguration)(config);\n        var path = Realm.determinePath(config);\n        _$$_REQUIRE(_dependencyMap[9], \"./platform\").fs.removeFile(path);\n        _$$_REQUIRE(_dependencyMap[9], \"./platform\").fs.removeFile(path + \".lock\");\n        _$$_REQUIRE(_dependencyMap[9], \"./platform\").fs.removeFile(path + \".fresh.lock\");\n        _$$_REQUIRE(_dependencyMap[9], \"./platform\").fs.removeFile(path + \".note\");\n        _$$_REQUIRE(_dependencyMap[9], \"./platform\").fs.removeDirectory(path + \".management\");\n      }\n    }, {\n      key: \"exists\",\n      value: function exists() {\n        var arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var config = typeof arg === \"string\" ? {\n          path: arg\n        } : arg;\n        (0, _$$_REQUIRE(_dependencyMap[8], \"./Configuration\").validateConfiguration)(config);\n        var path = Realm.determinePath(config);\n        return _$$_REQUIRE(_dependencyMap[9], \"./platform\").fs.exists(path);\n      }\n    }, {\n      key: \"open\",\n      value: function open() {\n        var arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var config = typeof arg === \"string\" ? {\n          path: arg\n        } : arg;\n        return new (_$$_REQUIRE(_dependencyMap[20], \"./ProgressRealmPromise\").ProgressRealmPromise)(config);\n      }\n      /**\n       * Get the current schema version of the Realm at the given path.\n       * @param path - The path to the file where the Realm database is stored.\n       * @param encryptionKey - Required only when accessing encrypted Realms.\n       * @throws An {@link Error} if passing an invalid or non-matching encryption key.\n       * @returns Version of the schema as an integer, or `-1` if no Realm exists at {@link path}.\n       * @since 0.11.0\n       */\n    }, {\n      key: \"schemaVersion\",\n      value: function schemaVersion(path, encryptionKey) {\n        var notFound = \"18446744073709551615\"; // std::numeric_limit<uint64_t>::max() = 0xffffffffffffffff as string\n        var config = {\n          path: path\n        };\n        var absolutePath = Realm.determinePath(config);\n        var schemaVersion = _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Realm.getSchemaVersion({\n          path: absolutePath,\n          encryptionKey: Realm.determineEncryptionKey(encryptionKey)\n        });\n        // no easy way to compare uint64_t in TypeScript\n        return notFound === schemaVersion.toString() ? -1 : _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Int64.intToNum(schemaVersion);\n      }\n      /**\n       * Creates a template object for a Realm model class where all optional fields are undefined\n       * and all required fields have the default value for the given data type, either the value\n       * set by the default property in the schema or the default value for the datatype if the schema\n       * doesn't specify one, i.e. 0, false and \"\".\n       * @param objectSchema - Schema describing the object that should be created.\n       */\n    }, {\n      key: \"createTemplateObject\",\n      value: function createTemplateObject(objectSchema) {\n        (0, _$$_REQUIRE(_dependencyMap[13], \"./schema\").validateObjectSchema)(objectSchema);\n        var normalizedSchema = (0, _$$_REQUIRE(_dependencyMap[13], \"./schema\").normalizeObjectSchema)(objectSchema);\n        var result = {};\n        for (var _ref of Object.entries(normalizedSchema.properties)) {\n          var _ref2 = _slicedToArray(_ref, 2);\n          var key = _ref2[0];\n          var property = _ref2[1];\n          // If a default value is explicitly set, always set the property\n          if (typeof property.default !== \"undefined\") {\n            result[key] = property.default;\n            continue;\n          }\n          // if optional is set, it wil take precedence over any `?` set on the type parameter\n          if (property.optional) {\n            continue;\n          }\n          // Set the default value for all required primitive types.\n          // Lists are always treated as empty if not specified and references to objects are always optional\n          switch (property.type) {\n            case \"bool\":\n              result[key] = false;\n              break;\n            case \"int\":\n              result[key] = 0;\n              break;\n            case \"float\":\n              result[key] = 0.0;\n              break;\n            case \"double\":\n              result[key] = 0.0;\n              break;\n            case \"string\":\n              result[key] = \"\";\n              break;\n            case \"data\":\n              result[key] = new ArrayBuffer(0);\n              break;\n            case \"date\":\n              result[key] = new Date(0);\n              break;\n          }\n        }\n        return result;\n      }\n      /**\n       * Copy any Realm files  (i.e. `*.realm`) bundled with the application from the application\n       * directory into the application's documents directory, so that they can be opened and used\n       * by Realm. If the file already exists in the documents directory, it will not be\n       * overwritten, so this can safely be called multiple times.\n       *\n       * This should be called before opening the Realm, in order to move the bundled Realm\n       * files into a place where they can be written to.\n       * @example\n       * ```\n       * // Given a bundled file, example.realm, this will copy example.realm (and any other .realm files)\n       * // from the app bundle into the app's documents directory. If the file already exists, it will\n       * // not be overwritten, so it is safe to call this every time the app starts.\n       * Realm.copyBundledRealmFiles();\n       *\n       * const realm = await Realm.open({\n       * // This will open example.realm from the documents directory, with the bundled data in.\n       * path: \"example.realm\"\n       * });\n       * ```\n       *\n       * This is only implemented for React Native.\n       * @throws an {@link Error} If an I/O error occurred or method is not implemented.\n       */\n    }, {\n      key: \"copyBundledRealmFiles\",\n      value: function copyBundledRealmFiles() {\n        _$$_REQUIRE(_dependencyMap[9], \"./platform\").fs.copyBundledRealmFiles();\n      }\n      /**\n       * TODO: Consider breaking this by ensuring a \".realm\" suffix (coordinating with other SDK teams in the process)\n       */\n    }, {\n      key: \"normalizePath\",\n      value: function normalizePath(path) {\n        if (typeof path === \"undefined\") {\n          return Realm.defaultPath;\n        } else if (path.length === 0) {\n          throw new Error(\"Unexpected empty path\");\n        } else if (_$$_REQUIRE(_dependencyMap[9], \"./platform\").fs.isAbsolutePath(path)) {\n          return path;\n        } else {\n          return _$$_REQUIRE(_dependencyMap[9], \"./platform\").fs.joinPaths(_$$_REQUIRE(_dependencyMap[9], \"./platform\").fs.getDefaultDirectoryPath(), path);\n        }\n      }\n      /**\n       * @note When the path is relative and the config contains a sync object, Core will replace any existing file extension\n       * or add the \".realm\" suffix.\n       */\n    }, {\n      key: \"determinePath\",\n      value: function determinePath(config) {\n        _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert.undefined(config.sync, \"config.sync\");\n        return Realm.normalizePath(config.path);\n      }\n    }, {\n      key: \"determineEncryptionKey\",\n      value: function determineEncryptionKey(encryptionKey) {\n        if (typeof encryptionKey === \"undefined\") {\n          return encryptionKey;\n        } else {\n          return (0, _$$_REQUIRE(_dependencyMap[21], \"./type-helpers/array-buffer\").toArrayBuffer)(encryptionKey, false);\n        }\n      }\n    }, {\n      key: \"extractRealmSchemaExtras\",\n      value: function extractRealmSchemaExtras(schemas) {\n        var extras = {};\n        for (var schema of schemas) {\n          extras[schema.name] = this.extractObjectSchemaExtras(schema);\n        }\n        return extras;\n      }\n      /** @internal */\n    }, {\n      key: \"extractObjectSchemaExtras\",\n      value: function extractObjectSchemaExtras(schema) {\n        var defaults = {};\n        var presentations = {};\n        for (var _ref3 of Object.entries(schema.properties)) {\n          var _ref4 = _slicedToArray(_ref3, 2);\n          var name = _ref4[0];\n          var propertySchema = _ref4[1];\n          defaults[name] = propertySchema.default;\n          presentations[name] = propertySchema.presentation;\n        }\n        return {\n          constructor: schema.ctor,\n          defaults: defaults,\n          presentations: presentations\n        };\n      }\n      /** @internal */\n    }, {\n      key: \"transformConfig\",\n      value: function transformConfig(config) {\n        var _config$migrationOpti, _config$migrationOpti2;\n        var normalizedSchema = config.schema && (0, _$$_REQUIRE(_dependencyMap[13], \"./schema\").normalizeRealmSchema)(config.schema);\n        var schemaExtras = Realm.extractRealmSchemaExtras(normalizedSchema || []);\n        var path = Realm.determinePath(config);\n        var fifoFilesFallbackPath = config.fifoFilesFallbackPath,\n          shouldCompact = config.shouldCompact,\n          inMemory = config.inMemory;\n        var bindingSchema = normalizedSchema && (0, _$$_REQUIRE(_dependencyMap[13], \"./schema\").toBindingSchema)(normalizedSchema);\n        return {\n          schemaExtras: schemaExtras,\n          bindingConfig: {\n            path: path,\n            cache: true,\n            fifoFilesFallbackPath: fifoFilesFallbackPath,\n            schema: bindingSchema,\n            inMemory: inMemory === true,\n            schemaMode: Realm.determineSchemaMode(config),\n            schemaVersion: config.schema ? _$$_REQUIRE(_dependencyMap[10], \"./binding\").binding.Int64.numToInt(typeof config.schemaVersion === \"number\" ? config.schemaVersion : 0) : undefined,\n            migrationFunction: config.onMigration ? Realm.wrapMigration(schemaExtras, config.onMigration) : undefined,\n            shouldCompactOnLaunchFunction: shouldCompact ? function (totalBytes, usedBytes) {\n              return shouldCompact(Number(totalBytes), Number(usedBytes));\n            } : undefined,\n            disableFormatUpgrade: config.disableFormatUpgrade,\n            encryptionKey: Realm.determineEncryptionKey(config.encryptionKey),\n            automaticallyHandleBacklinksInMigrations: (_config$migrationOpti = (_config$migrationOpti2 = config.migrationOptions) == null ? void 0 : _config$migrationOpti2.resolveEmbeddedConstraints) != null ? _config$migrationOpti : false\n          }\n        };\n      }\n    }, {\n      key: \"determineSchemaMode\",\n      value: function determineSchemaMode(config) {\n        var readOnly = config.readOnly,\n          deleteRealmIfMigrationNeeded = config.deleteRealmIfMigrationNeeded,\n          onMigration = config.onMigration,\n          sync = config.sync;\n        (0, _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert)(!readOnly || !deleteRealmIfMigrationNeeded, \"Cannot set 'deleteRealmIfMigrationNeeded' when 'readOnly' is set.\");\n        (0, _$$_REQUIRE(_dependencyMap[7], \"./assert\").assert)(!onMigration || !deleteRealmIfMigrationNeeded, \"Cannot set 'deleteRealmIfMigrationNeeded' when 'onMigration' is set.\");\n        if (readOnly) {\n          return 1 /* binding.SchemaMode.Immutable */;\n        } else if (deleteRealmIfMigrationNeeded) {\n          return 3 /* binding.SchemaMode.SoftResetFile */;\n        } else if (sync) {\n          return 6 /* binding.SchemaMode.AdditiveExplicit */;\n        } else {\n          return undefined;\n        }\n      }\n    }, {\n      key: \"wrapMigration\",\n      value: function wrapMigration(schemaExtras, onMigration) {\n        return function (oldRealmInternal, newRealmInternal) {\n          try {\n            var oldRealm = new Realm(null, {\n              internal: oldRealmInternal,\n              schemaExtras: schemaExtras\n            });\n            var newRealm = new Realm(null, {\n              internal: newRealmInternal,\n              schemaExtras: schemaExtras\n            });\n            onMigration(oldRealm, newRealm);\n          } finally {\n            oldRealmInternal.close();\n            oldRealmInternal.$resetSharedPtr();\n            newRealmInternal.$resetSharedPtr();\n          }\n        };\n      }\n      /**\n       * The Realms's representation in the binding.\n       * @internal\n       */\n    }]);\n  }();\n  _Realm = Realm;\n  Realm.defaultPath = _Realm.normalizePath(\"default.realm\");\n  Realm.internals = new Set();\n  exports.Realm = Realm;\n  (0, _$$_REQUIRE(_dependencyMap[22], \"./indirect\").injectIndirect)(\"Realm\", Realm);\n  /**\n   * @param objectSchema - The schema of the object.\n   * @returns `true` if the object is marked for asymmetric sync, otherwise `false`.\n   */\n  function isAsymmetric(objectSchema) {\n    return objectSchema.tableType === 2 /* binding.TableType.TopLevelAsymmetric */;\n  }\n  /**\n   * @param objectSchema - The schema of the object.\n   * @returns `true` if the object is marked as embedded, otherwise `false`.\n   */\n  function isEmbedded(objectSchema) {\n    return objectSchema.tableType === 1 /* binding.TableType.Embedded */;\n  }\n  // Declare the Realm namespace for backwards compatibility\n  // This declaration needs to happen in the same file which declares \"Realm\"\n  // @see https://www.typescriptlang.org/docs/handbook/declaration-merging.html#merging-namespaces-with-classes-functions-and-enums\n  var ns = __importStar(_$$_REQUIRE(_dependencyMap[23], \"./namespace\"));\n  // Needed to avoid complaints about a self-reference\n  var RealmItself = Realm;\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  (function (Realm) {\n    Realm.Realm = RealmItself;\n    Realm.flags = ns.flags;\n    Realm.Object = ns.RealmObject;\n    Realm.BSON = ns.BSON;\n    Realm.Types = ns.Types;\n    Realm.index = ns.index;\n    Realm.mapTo = ns.mapTo;\n    Realm.kmToRadians = ns.kmToRadians;\n    Realm.miToRadians = ns.miToRadians;\n    Realm.AssertionError = ns.AssertionError;\n    Realm.Collection = ns.Collection;\n    Realm.Counter = ns.Counter;\n    Realm.Dictionary = ns.Dictionary;\n    Realm.List = ns.List;\n    Realm.NumericLogLevel = ns.NumericLogLevel;\n    Realm.OrderedCollection = ns.OrderedCollection;\n    Realm.ProgressRealmPromise = ns.ProgressRealmPromise;\n    Realm.PropertySchemaParseError = ns.PropertySchemaParseError;\n    Realm.RealmEvent = ns.RealmEvent;\n    Realm.Results = ns.Results;\n    Realm.SchemaParseError = ns.SchemaParseError;\n    Realm.Set = ns.RealmSet;\n    Realm.TypeAssertionError = ns.TypeAssertionError;\n    Realm.UpdateMode = ns.UpdateMode;\n  })(Realm = exports.Realm || (exports.Realm = {}));\n  exports.Realm = Realm;\n  // Set default logger and log level.\n  Realm.setLogger(_$$_REQUIRE(_dependencyMap[19], \"./Logger\").defaultLogger);\n  Realm.setLogLevel(_$$_REQUIRE(_dependencyMap[19], \"./Logger\").defaultLoggerLevel);\n});","lineCount":1062,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,2,3,0],[6,2,4,0],[7,2,5,0],[8,2,6,0],[9,2,7,0],[10,2,8,0],[11,2,9,0],[12,2,10,0],[13,2,11,0],[14,2,12,0],[15,2,13,0],[16,2,14,0],[17,2,15,0],[18,2,16,0],[19,2,17,0],[20,2,18,0],[21,2,18,0],[21,6,18,0,"_slicedToArray"],[21,20,18,0],[21,23,18,0,"_$$_REQUIRE"],[21,34,18,0],[21,35,18,0,"_dependencyMap"],[21,49,18,0],[22,2,18,0],[22,6,18,0,"_readOnlyError"],[22,20,18,0],[22,23,18,0,"_$$_REQUIRE"],[22,34,18,0],[22,35,18,0,"_dependencyMap"],[22,49,18,0],[23,2,18,0],[23,6,18,0,"_classCallCheck"],[23,21,18,0],[23,24,18,0,"_$$_REQUIRE"],[23,35,18,0],[23,36,18,0,"_dependencyMap"],[23,50,18,0],[24,2,18,0],[24,6,18,0,"_createClass"],[24,18,18,0],[24,21,18,0,"_$$_REQUIRE"],[24,32,18,0],[24,33,18,0,"_dependencyMap"],[24,47,18,0],[25,2,18,0],[25,6,18,0,"_Realm"],[25,12,18,0],[26,2,19,0],[26,6,19,4,"__createBinding"],[26,21,19,19],[26,24,19,23],[26,28,19,27],[26,32,19,31],[26,36,19,35],[26,37,19,36,"__createBinding"],[26,52,19,51],[26,57,19,57,"Object"],[26,63,19,63],[26,64,19,64,"create"],[26,70,19,70],[26,73,19,74],[26,83,19,83,"o"],[26,84,19,84],[26,86,19,86,"m"],[26,87,19,87],[26,89,19,89,"k"],[26,90,19,90],[26,92,19,92,"k2"],[26,94,19,94],[26,96,19,96],[27,4,20,4],[27,8,20,8,"k2"],[27,10,20,10],[27,15,20,15,"undefined"],[27,24,20,24],[27,26,20,26,"k2"],[27,28,20,28],[27,31,20,31,"k"],[27,32,20,32],[28,4,21,4],[28,8,21,8,"desc"],[28,12,21,12],[28,15,21,15,"Object"],[28,21,21,21],[28,22,21,22,"getOwnPropertyDescriptor"],[28,46,21,46],[28,47,21,47,"m"],[28,48,21,48],[28,50,21,50,"k"],[28,51,21,51],[28,52,21,52],[29,4,22,4],[29,8,22,8],[29,9,22,9,"desc"],[29,13,22,13],[29,18,22,18],[29,23,22,23],[29,27,22,27,"desc"],[29,31,22,31],[29,34,22,34],[29,35,22,35,"m"],[29,36,22,36],[29,37,22,37,"__esModule"],[29,47,22,47],[29,50,22,50,"desc"],[29,54,22,54],[29,55,22,55,"writable"],[29,63,22,63],[29,67,22,67,"desc"],[29,71,22,71],[29,72,22,72,"configurable"],[29,84,22,84],[29,85,22,85],[29,87,22,87],[30,6,23,6,"desc"],[30,10,23,10],[30,13,23,13],[31,8,23,15,"enumerable"],[31,18,23,25],[31,20,23,27],[31,24,23,31],[32,8,23,33,"get"],[32,11,23,36],[32,13,23,38],[32,22,23,33,"get"],[32,25,23,36,"get"],[32,26,23,36],[32,28,23,49],[33,10,23,51],[33,17,23,58,"m"],[33,18,23,59],[33,19,23,60,"k"],[33,20,23,61],[33,21,23,62],[34,8,23,64],[35,6,23,66],[35,7,23,67],[36,4,24,4],[37,4,25,4,"Object"],[37,10,25,10],[37,11,25,11,"defineProperty"],[37,25,25,25],[37,26,25,26,"o"],[37,27,25,27],[37,29,25,29,"k2"],[37,31,25,31],[37,33,25,33,"desc"],[37,37,25,37],[37,38,25,38],[38,2,26,0],[38,3,26,1],[38,6,26,6],[38,16,26,15,"o"],[38,17,26,16],[38,19,26,18,"m"],[38,20,26,19],[38,22,26,21,"k"],[38,23,26,22],[38,25,26,24,"k2"],[38,27,26,26],[38,29,26,28],[39,4,27,4],[39,8,27,8,"k2"],[39,10,27,10],[39,15,27,15,"undefined"],[39,24,27,24],[39,26,27,26,"k2"],[39,28,27,28],[39,31,27,31,"k"],[39,32,27,32],[40,4,28,4,"o"],[40,5,28,5],[40,6,28,6,"k2"],[40,8,28,8],[40,9,28,9],[40,12,28,12,"m"],[40,13,28,13],[40,14,28,14,"k"],[40,15,28,15],[40,16,28,16],[41,2,29,0],[41,3,29,2],[41,4,29,3],[42,2,30,0],[42,6,30,4,"__setModuleDefault"],[42,24,30,22],[42,27,30,26],[42,31,30,30],[42,35,30,34],[42,39,30,38],[42,40,30,39,"__setModuleDefault"],[42,58,30,57],[42,63,30,63,"Object"],[42,69,30,69],[42,70,30,70,"create"],[42,76,30,76],[42,79,30,80],[42,89,30,89,"o"],[42,90,30,90],[42,92,30,92,"v"],[42,93,30,93],[42,95,30,95],[43,4,31,4,"Object"],[43,10,31,10],[43,11,31,11,"defineProperty"],[43,25,31,25],[43,26,31,26,"o"],[43,27,31,27],[43,29,31,29],[43,38,31,38],[43,40,31,40],[44,6,31,42,"enumerable"],[44,16,31,52],[44,18,31,54],[44,22,31,58],[45,6,31,60,"value"],[45,11,31,65],[45,13,31,67,"v"],[46,4,31,69],[46,5,31,70],[46,6,31,71],[47,2,32,0],[47,3,32,1],[47,6,32,5],[47,16,32,14,"o"],[47,17,32,15],[47,19,32,17,"v"],[47,20,32,18],[47,22,32,20],[48,4,33,4,"o"],[48,5,33,5],[48,6,33,6],[48,15,33,15],[48,16,33,16],[48,19,33,19,"v"],[48,20,33,20],[49,2,34,0],[49,3,34,1],[49,4,34,2],[50,2,35,0],[50,6,35,4,"__importStar"],[50,18,35,16],[50,21,35,20],[50,25,35,24],[50,29,35,28],[50,33,35,32],[50,34,35,33,"__importStar"],[50,46,35,45],[50,50,35,50],[50,60,35,60,"mod"],[50,63,35,63],[50,65,35,65],[51,4,36,4],[51,8,36,8,"mod"],[51,11,36,11],[51,15,36,15,"mod"],[51,18,36,18],[51,19,36,19,"__esModule"],[51,29,36,29],[51,31,36,31],[51,38,36,38,"mod"],[51,41,36,41],[52,4,37,4],[52,8,37,8,"result"],[52,14,37,14],[52,17,37,17],[52,18,37,18],[52,19,37,19],[53,4,38,4],[53,8,38,8,"mod"],[53,11,38,11],[53,15,38,15],[53,19,38,19],[53,21,38,21],[53,26,38,26],[53,30,38,30,"k"],[53,31,38,31],[53,35,38,35,"mod"],[53,38,38,38],[53,40,38,40],[53,44,38,44,"k"],[53,45,38,45],[53,50,38,50],[53,59,38,59],[53,63,38,63,"Object"],[53,69,38,69],[53,70,38,70,"prototype"],[53,79,38,79],[53,80,38,80,"hasOwnProperty"],[53,94,38,94],[53,95,38,95,"call"],[53,99,38,99],[53,100,38,100,"mod"],[53,103,38,103],[53,105,38,105,"k"],[53,106,38,106],[53,107,38,107],[53,109,38,109,"__createBinding"],[53,124,38,124],[53,125,38,125,"result"],[53,131,38,131],[53,133,38,133,"mod"],[53,136,38,136],[53,138,38,138,"k"],[53,139,38,139],[53,140,38,140],[54,4,39,4,"__setModuleDefault"],[54,22,39,22],[54,23,39,23,"result"],[54,29,39,29],[54,31,39,31,"mod"],[54,34,39,34],[54,35,39,35],[55,4,40,4],[55,11,40,11,"result"],[55,17,40,17],[56,2,41,0],[56,3,41,1],[57,2,42,0,"Object"],[57,8,42,6],[57,9,42,7,"defineProperty"],[57,23,42,21],[57,24,42,22,"exports"],[57,31,42,29],[57,33,42,31],[57,45,42,43],[57,47,42,45],[58,4,42,47,"value"],[58,9,42,52],[58,11,42,54],[59,2,42,59],[59,3,42,60],[59,4,42,61],[60,2,43,0,"exports"],[60,9,43,7],[60,10,43,8,"Realm"],[60,15,43,13],[60,18,43,16],[60,23,43,21],[60,24,43,22],[61,2,64,0],[61,6,64,6,"debug"],[61,11,64,11],[61,14,64,14],[61,15,64,15],[61,16,64,16],[61,18,64,18,"_$$_REQUIRE"],[61,29,64,18],[61,30,64,18,"_dependencyMap"],[61,44,64,18],[61,60,64,26,"extendDebug"],[61,71,64,37],[61,73,64,39],[61,80,64,46],[61,81,64,47],[62,2,65,0],[63,0,66,0],[64,0,67,0],[65,0,68,0],[66,0,69,0],[67,0,70,0],[68,2,71,0],[68,11,71,9,"assertRealmEvent"],[68,27,71,25,"assertRealmEvent"],[68,28,71,26,"name"],[68,32,71,30],[68,34,71,32],[69,4,72,4],[69,8,72,10,"values"],[69,14,72,16],[69,17,72,19,"Object"],[69,23,72,25],[69,24,72,26,"values"],[69,30,72,32],[69,31,72,33,"_$$_REQUIRE"],[69,42,72,33],[69,43,72,33,"_dependencyMap"],[69,57,72,33],[69,82,72,50,"RealmEvent"],[69,92,72,60],[69,93,72,61],[70,4,73,4],[70,8,73,8],[70,9,73,9,"values"],[70,15,73,15],[70,16,73,16,"includes"],[70,24,73,24],[70,25,73,25,"name"],[70,29,73,29],[70,30,73,30],[70,32,73,32],[71,6,74,8],[71,12,74,14],[71,17,74,18,"_$$_REQUIRE"],[71,28,74,18],[71,29,74,18,"_dependencyMap"],[71,43,74,18],[71,60,74,27,"TypeAssertionError"],[71,78,74,45],[71,80,74,46],[71,89,74,55],[71,92,74,58,"values"],[71,98,74,64],[71,99,74,65,"join"],[71,103,74,69],[71,104,74,70],[71,108,74,74],[71,109,74,75],[71,111,74,77,"name"],[71,115,74,81],[71,116,74,82],[72,4,75,4],[73,2,76,0],[74,2,77,0],[75,0,78,0],[76,0,79,0],[77,2,77,0],[77,6,80,6,"Realm"],[77,11,80,11],[78,4,372,4],[80,4,374,4],[80,13,374,4,"Realm"],[80,19,374,16,"arg"],[80,22,374,19],[80,24,374,42],[81,6,374,42],[81,10,374,42,"_this"],[81,15,374,42],[82,6,374,42],[82,10,374,21,"internalConfig"],[82,24,374,35],[82,27,374,35,"arguments"],[82,36,374,35],[82,37,374,35,"length"],[82,43,374,35],[82,51,374,35,"arguments"],[82,60,374,35],[82,68,374,35,"undefined"],[82,77,374,35],[82,80,374,35,"arguments"],[82,89,374,35],[82,95,374,38],[82,96,374,39],[82,97,374,40],[83,6,374,40,"_classCallCheck"],[83,21,374,40],[83,28,374,40,"Realm"],[83,33,374,40],[84,6,374,40],[84,11,367,4,"schemaExtras"],[84,23,367,16],[84,26,367,19],[84,27,367,20],[84,28,367,21],[85,6,367,21],[85,11,369,4,"changeListeners"],[85,26,369,19],[85,29,369,22],[85,34,369,26,"_$$_REQUIRE"],[85,45,369,26],[85,46,369,26,"_dependencyMap"],[85,60,369,26],[85,85,369,43,"RealmListeners"],[85,99,369,57],[85,101,369,58],[85,105,369,62],[85,107,369,64,"_$$_REQUIRE"],[85,118,369,64],[85,119,369,64,"_dependencyMap"],[85,133,369,64],[85,158,369,81,"RealmEvent"],[85,168,369,91],[85,169,369,92,"Change"],[85,175,369,98],[85,176,369,99],[86,6,369,99],[86,11,370,4,"beforeNotifyListeners"],[86,32,370,25],[86,35,370,28],[86,40,370,32,"_$$_REQUIRE"],[86,51,370,32],[86,52,370,32,"_dependencyMap"],[86,66,370,32],[86,91,370,49,"RealmListeners"],[86,105,370,63],[86,107,370,64],[86,111,370,68],[86,113,370,70,"_$$_REQUIRE"],[86,124,370,70],[86,125,370,70,"_dependencyMap"],[86,139,370,70],[86,164,370,87,"RealmEvent"],[86,174,370,97],[86,175,370,98,"BeforeNotify"],[86,187,370,110],[86,188,370,111],[87,6,370,111],[87,11,371,4,"schemaListeners"],[87,26,371,19],[87,29,371,22],[87,34,371,26,"_$$_REQUIRE"],[87,45,371,26],[87,46,371,26,"_dependencyMap"],[87,60,371,26],[87,85,371,43,"RealmListeners"],[87,99,371,57],[87,101,371,58],[87,105,371,62],[87,107,371,64,"_$$_REQUIRE"],[87,118,371,64],[87,119,371,64,"_dependencyMap"],[87,133,371,64],[87,158,371,81,"RealmEvent"],[87,168,371,91],[87,169,371,92,"Schema"],[87,175,371,98],[87,176,371,99],[88,6,375,8],[88,10,375,14,"config"],[88,16,375,20],[88,19,375,23],[88,26,375,30,"arg"],[88,29,375,33],[88,34,375,38],[88,42,375,46],[88,45,375,49],[89,8,375,51,"path"],[89,12,375,55],[89,14,375,57,"arg"],[90,6,375,61],[90,7,375,62],[90,10,375,65,"arg"],[90,13,375,68],[90,17,375,72],[90,18,375,73],[90,19,375,74],[91,6,376,8],[91,10,376,12,"arg"],[91,13,376,15],[91,18,376,20],[91,22,376,24],[91,24,376,26],[92,8,376,26],[92,12,376,26,"_internalConfig$inter"],[92,33,376,26],[93,8,377,12],[93,9,377,13],[93,10,377,14],[93,12,377,16,"_$$_REQUIRE"],[93,23,377,16],[93,24,377,16,"_dependencyMap"],[93,38,377,16],[93,55,377,25,"assert"],[93,61,377,31],[93,63,377,33],[93,64,377,34,"internalConfig"],[93,78,377,48],[93,79,377,49,"schemaExtras"],[93,91,377,61],[93,93,377,63],[93,142,377,112],[93,143,377,113],[94,8,378,12],[94,9,378,13],[94,10,378,14],[94,12,378,16,"_$$_REQUIRE"],[94,23,378,16],[94,24,378,16,"_dependencyMap"],[94,38,378,16],[94,62,378,32,"validateConfiguration"],[94,83,378,53],[94,85,378,55,"config"],[94,91,378,61],[94,92,378,62],[95,8,379,12],[95,12,379,12,"_Realm$transformConfi"],[95,33,379,12],[95,36,379,52,"Realm"],[95,41,379,57],[95,42,379,58,"transformConfig"],[95,57,379,73],[95,58,379,74,"config"],[95,64,379,80],[95,65,379,81],[96,10,379,20,"bindingConfig"],[96,23,379,33],[96,26,379,33,"_Realm$transformConfi"],[96,47,379,33],[96,48,379,20,"bindingConfig"],[96,61,379,33],[97,10,379,35,"schemaExtras"],[97,22,379,47],[97,25,379,47,"_Realm$transformConfi"],[97,46,379,47],[97,47,379,35,"schemaExtras"],[97,59,379,47],[98,8,380,12,"debug"],[98,13,380,17],[98,14,380,18],[98,20,380,24],[98,22,380,26,"bindingConfig"],[98,35,380,39],[98,36,380,40],[99,8,381,12],[99,12,381,16],[99,13,381,17,"schemaExtras"],[99,25,381,29],[99,28,381,32,"schemaExtras"],[99,40,381,44],[100,8,382,12,"_$$_REQUIRE"],[100,19,382,12],[100,20,382,12,"_dependencyMap"],[100,34,382,12],[100,53,382,23,"fs"],[100,55,382,25],[100,56,382,26,"ensureDirectoryForFile"],[100,78,382,48],[100,79,382,49,"bindingConfig"],[100,92,382,62],[100,93,382,63,"path"],[100,97,382,67],[100,98,382,68],[101,8,383,12],[101,12,383,16],[101,13,383,17,"internal"],[101,21,383,25],[101,25,383,25,"_internalConfig$inter"],[101,46,383,25],[101,49,383,28,"internalConfig"],[101,63,383,42],[101,64,383,43,"internal"],[101,72,383,51],[101,84,383,51,"_internalConfig$inter"],[101,105,383,51],[101,108,383,55,"_$$_REQUIRE"],[101,119,383,55],[101,120,383,55,"_dependencyMap"],[101,134,383,55],[101,153,383,65,"binding"],[101,160,383,72],[101,161,383,73,"Realm"],[101,166,383,78],[101,167,383,79,"getSharedRealm"],[101,181,383,93],[101,182,383,94,"bindingConfig"],[101,195,383,107],[101,196,383,108],[102,8,384,12],[102,12,384,16,"_$$_REQUIRE"],[102,23,384,16],[102,24,384,16,"_dependencyMap"],[102,38,384,16],[102,55,384,24,"flags"],[102,60,384,29],[102,61,384,30,"ALLOW_CLEAR_TEST_STATE"],[102,83,384,52],[102,85,384,54],[103,10,385,16,"Realm"],[103,15,385,21],[103,16,385,22,"internals"],[103,25,385,31],[103,26,385,32,"add"],[103,29,385,35],[103,30,385,36],[103,35,385,40,"_$$_REQUIRE"],[103,46,385,40],[103,47,385,40,"_dependencyMap"],[103,61,385,40],[103,80,385,50,"binding"],[103,87,385,57],[103,88,385,58,"WeakRef"],[103,95,385,65],[103,97,385,66],[103,101,385,70],[103,102,385,71,"internal"],[103,110,385,79],[103,111,385,80],[103,112,385,81],[104,8,386,12],[105,8,387,12,"_$$_REQUIRE"],[105,19,387,12],[105,20,387,12,"_dependencyMap"],[105,34,387,12],[105,53,387,22,"binding"],[105,60,387,29],[105,61,387,30,"Helpers"],[105,68,387,37],[105,69,387,38,"setBindingContext"],[105,86,387,55],[105,87,387,56],[105,91,387,60],[105,92,387,61,"internal"],[105,100,387,69],[105,102,387,71],[106,10,388,16,"didChange"],[106,19,388,25],[106,21,388,27],[106,30,388,16,"didChange"],[106,39,388,25,"didChange"],[106,40,388,28,"r"],[106,41,388,29],[106,43,388,34],[107,12,389,20,"r"],[107,13,389,21],[107,14,389,22,"verifyOpen"],[107,24,389,32],[107,25,389,33],[107,26,389,34],[108,12,390,20,"_this"],[108,17,390,24],[108,18,390,25,"changeListeners"],[108,33,390,40],[108,34,390,41,"notify"],[108,40,390,47],[108,41,390,48],[108,42,390,49],[109,10,391,16],[109,11,391,17],[110,10,392,16,"schemaDidChange"],[110,25,392,31],[110,27,392,33],[110,36,392,16,"schemaDidChange"],[110,51,392,31,"schemaDidChange"],[110,52,392,34,"r"],[110,53,392,35],[110,55,392,40],[111,12,393,20,"r"],[111,13,393,21],[111,14,393,22,"verifyOpen"],[111,24,393,32],[111,25,393,33],[111,26,393,34],[112,12,394,20,"_this"],[112,17,394,24],[112,18,394,25,"classes"],[112,25,394,32],[112,28,394,35],[112,33,394,39,"_$$_REQUIRE"],[112,44,394,39],[112,45,394,39,"_dependencyMap"],[112,59,394,39],[112,79,394,50,"ClassMap"],[112,87,394,58],[112,89,394,59,"_this"],[112,94,394,63],[112,96,394,65,"_this"],[112,101,394,69],[112,102,394,70,"internal"],[112,110,394,78],[112,111,394,79,"schema"],[112,117,394,85],[112,119,394,87,"_this"],[112,124,394,91],[112,125,394,92,"schema"],[112,131,394,98],[112,132,394,99],[113,12,395,20,"_this"],[113,17,395,24],[113,18,395,25,"schemaListeners"],[113,33,395,40],[113,34,395,41,"notify"],[113,40,395,47],[113,41,395,48,"_this"],[113,46,395,52],[113,47,395,53,"schema"],[113,53,395,59],[113,54,395,60],[114,10,396,16],[114,11,396,17],[115,10,397,16,"beforeNotify"],[115,22,397,28],[115,24,397,30],[115,33,397,16,"beforeNotify"],[115,45,397,28,"beforeNotify"],[115,46,397,31,"r"],[115,47,397,32],[115,49,397,37],[116,12,398,20,"r"],[116,13,398,21],[116,14,398,22,"verifyOpen"],[116,24,398,32],[116,25,398,33],[116,26,398,34],[117,12,399,20,"_this"],[117,17,399,24],[117,18,399,25,"beforeNotifyListeners"],[117,39,399,46],[117,40,399,47,"notify"],[117,46,399,53],[117,47,399,54],[117,48,399,55],[118,10,400,16],[119,8,401,12],[119,9,401,13],[119,10,401,14],[120,6,402,8],[120,7,402,9],[120,13,403,13],[121,8,404,12],[121,12,404,20,"internal"],[121,20,404,28],[121,23,404,47,"internalConfig"],[121,37,404,61],[121,38,404,20,"internal"],[121,46,404,28],[122,10,404,30,"schemaExtras"],[122,23,404,42],[122,26,404,47,"internalConfig"],[122,40,404,61],[122,41,404,30,"schemaExtras"],[122,53,404,42],[123,8,405,12,"_$$_REQUIRE"],[123,19,405,12],[123,20,405,12,"_dependencyMap"],[123,34,405,12],[123,51,405,21,"assert"],[123,57,405,27],[123,58,405,28,"instanceOf"],[123,68,405,38],[123,69,405,39,"internal"],[123,77,405,47],[123,79,405,49,"_$$_REQUIRE"],[123,90,405,49],[123,91,405,49,"_dependencyMap"],[123,105,405,49],[123,124,405,59,"binding"],[123,131,405,66],[123,132,405,67,"Realm"],[123,137,405,72],[123,139,405,74],[123,149,405,84],[123,150,405,85],[124,8,406,12],[124,12,406,16],[124,13,406,17,"internal"],[124,21,406,25],[124,24,406,28,"internal"],[124,32,406,36],[125,8,407,12],[125,12,407,16],[125,13,407,17,"schemaExtras"],[125,25,407,29],[125,28,407,32,"schemaExtras"],[125,41,407,44],[125,45,407,48],[125,46,407,49],[125,47,407,50],[126,6,408,8],[127,6,409,8],[128,6,410,8],[128,10,410,16,"excludeFromIcloudBackup"],[128,33,410,39],[128,36,410,44,"config"],[128,42,410,50],[128,43,410,16,"excludeFromIcloudBackup"],[128,66,410,39],[129,6,411,8],[129,10,411,12],[129,17,411,19,"excludeFromIcloudBackup"],[129,40,411,42],[129,45,411,47],[129,54,411,56],[129,56,411,58],[130,8,412,12],[130,12,412,18,"realmPath"],[130,21,412,27],[130,24,412,30],[130,28,412,34],[130,29,412,35,"internal"],[130,37,412,43],[130,38,412,44,"config"],[130,44,412,50],[130,45,412,51,"path"],[130,49,412,55],[131,8,413,12],[131,13,413,17],[131,17,413,23,"fileNameSuffix"],[131,31,413,37],[131,35,413,41],[131,36,413,42],[131,38,413,44],[131,40,413,46],[131,47,413,53],[131,49,413,55],[131,56,413,62],[131,58,413,64],[131,71,413,77],[131,72,413,78],[131,74,413,80],[132,10,414,16],[132,14,414,22,"filePath"],[132,22,414,30],[132,25,414,33,"realmPath"],[132,34,414,42],[132,37,414,45,"fileNameSuffix"],[132,51,414,59],[133,10,415,16,"_$$_REQUIRE"],[133,21,415,16],[133,22,415,16,"_dependencyMap"],[133,36,415,16],[133,55,415,26,"binding"],[133,62,415,33],[133,63,415,34,"JsPlatformHelpers"],[133,80,415,51],[133,81,415,52,"excludeFromIcloudBackup"],[133,104,415,75],[133,105,415,76,"filePath"],[133,113,415,84],[133,115,415,86,"excludeFromIcloudBackup"],[133,138,415,109],[133,139,415,110],[134,8,416,12],[135,6,417,8],[136,6,418,8,"Object"],[136,12,418,14],[136,13,418,15,"defineProperty"],[136,27,418,29],[136,28,418,30],[136,32,418,34],[136,34,418,36],[136,43,418,45],[136,45,418,47],[137,8,419,12,"enumerable"],[137,18,419,22],[137,20,419,24],[137,25,419,29],[138,8,420,12,"configurable"],[138,20,420,24],[138,22,420,26],[138,27,420,31],[139,8,421,12,"writable"],[139,16,421,20],[139,18,421,22],[140,6,422,8],[140,7,422,9],[140,8,422,10],[141,6,423,8,"Object"],[141,12,423,14],[141,13,423,15,"defineProperty"],[141,27,423,29],[141,28,423,30],[141,32,423,34],[141,34,423,36],[141,44,423,46],[141,46,423,48],[142,8,424,12,"enumerable"],[142,18,424,22],[142,20,424,24],[142,25,424,29],[143,8,425,12,"configurable"],[143,20,425,24],[143,22,425,26],[143,27,425,31],[144,8,426,12,"writable"],[144,16,426,20],[144,18,426,22],[145,6,427,8],[145,7,427,9],[145,8,427,10],[146,6,428,8],[146,10,428,12],[146,11,428,13,"classes"],[146,18,428,20],[146,21,428,23],[146,26,428,27,"_$$_REQUIRE"],[146,37,428,27],[146,38,428,27,"_dependencyMap"],[146,52,428,27],[146,72,428,38,"ClassMap"],[146,80,428,46],[146,82,428,47],[146,86,428,51],[146,88,428,53],[146,92,428,57],[146,93,428,58,"internal"],[146,101,428,66],[146,102,428,67,"schema"],[146,108,428,73],[146,110,428,75],[146,114,428,79],[146,115,428,80,"schema"],[146,121,428,86],[146,122,428,87],[147,4,429,4],[148,4,430,4],[149,0,431,0],[150,0,432,0],[151,0,433,0],[152,0,434,0],[153,0,435,0],[154,4,430,4],[154,11,430,4,"_createClass"],[154,23,430,4],[154,24,430,4,"Realm"],[154,29,430,4],[155,6,430,4,"key"],[155,9,430,4],[156,6,430,4,"get"],[156,9,430,4],[156,11,436,4],[156,20,436,4,"get"],[156,24,436,4],[156,26,436,18],[157,8,437,8],[157,15,437,15],[157,19,437,19],[157,20,437,20,"internal"],[157,28,437,28],[157,29,437,29,"isEmpty"],[157,36,437,36],[158,6,438,4],[159,6,439,4],[160,0,440,0],[161,0,441,0],[162,0,442,0],[163,0,443,0],[164,0,444,0],[165,4,439,4],[166,6,439,4,"key"],[166,9,439,4],[167,6,439,4,"get"],[167,9,439,4],[167,11,445,4],[167,20,445,4,"get"],[167,24,445,4],[167,26,445,15],[168,8,446,8],[168,15,446,15],[168,19,446,19],[168,20,446,20,"internal"],[168,28,446,28],[168,29,446,29,"config"],[168,35,446,35],[168,36,446,36,"path"],[168,40,446,40],[169,6,447,4],[170,6,448,4],[171,0,449,0],[172,0,450,0],[173,0,451,0],[174,0,452,0],[175,0,453,0],[176,4,448,4],[177,6,448,4,"key"],[177,9,448,4],[178,6,448,4,"get"],[178,9,448,4],[178,11,454,4],[178,20,454,4,"get"],[178,24,454,4],[178,26,454,21],[179,8,455,8],[179,15,455,15],[179,19,455,19],[179,20,455,20,"internal"],[179,28,455,28],[179,29,455,29,"config"],[179,35,455,35],[179,36,455,36,"schemaMode"],[179,46,455,46],[179,51,455,51],[179,52,455,52],[179,53,455,53],[180,6,456,4],[181,6,457,4],[182,0,458,0],[183,0,459,0],[184,0,460,0],[185,0,461,0],[186,4,457,4],[187,6,457,4,"key"],[187,9,457,4],[188,6,457,4,"get"],[188,9,457,4],[188,11,462,4],[188,20,462,4,"get"],[188,24,462,4],[188,26,462,21],[189,8,463,8],[189,15,463,15],[189,19,463,19],[189,20,463,20,"internal"],[189,28,463,28],[189,29,463,29,"config"],[189,35,463,35],[189,36,463,36,"inMemory"],[189,44,463,44],[190,6,464,4],[191,6,465,4],[192,0,466,0],[193,0,467,0],[194,0,468,0],[195,0,469,0],[196,0,470,0],[197,4,465,4],[198,6,465,4,"key"],[198,9,465,4],[199,6,465,4,"get"],[199,9,465,4],[199,11,471,4],[199,20,471,4,"get"],[199,24,471,4],[199,26,471,17],[200,8,472,8],[200,12,472,14,"schemas"],[200,19,472,21],[200,22,472,24],[200,23,472,25],[200,24,472,26],[200,26,472,28,"_$$_REQUIRE"],[200,37,472,28],[200,38,472,28,"_dependencyMap"],[200,52,472,28],[200,70,472,37,"fromBindingRealmSchema"],[200,92,472,59],[200,94,472,61],[200,98,472,65],[200,99,472,66,"internal"],[200,107,472,74],[200,108,472,75,"schema"],[200,114,472,81],[200,115,472,82],[201,8,473,8],[202,8,474,8],[202,13,474,13],[202,17,474,19,"objectSchema"],[202,29,474,31],[202,33,474,35,"schemas"],[202,40,474,42],[202,42,474,44],[203,10,475,12],[203,14,475,18,"extras"],[203,20,475,24],[203,23,475,27],[203,27,475,31],[203,28,475,32,"schemaExtras"],[203,40,475,44],[203,41,475,45,"objectSchema"],[203,53,475,57],[203,54,475,58,"name"],[203,58,475,62],[203,59,475,63],[204,10,476,12],[204,14,476,16,"extras"],[204,20,476,22],[204,22,476,24],[205,12,477,16,"objectSchema"],[205,24,477,28],[205,25,477,29,"ctor"],[205,29,477,33],[205,32,477,36,"extras"],[205,38,477,42],[205,39,477,43,"constructor"],[205,50,477,54],[206,10,478,12],[207,10,479,12],[207,15,479,17],[207,19,479,23,"property"],[207,27,479,31],[207,31,479,35,"Object"],[207,37,479,41],[207,38,479,42,"values"],[207,44,479,48],[207,45,479,49,"objectSchema"],[207,57,479,61],[207,58,479,62,"properties"],[207,68,479,72],[207,69,479,73],[207,71,479,75],[208,12,480,16,"property"],[208,20,480,24],[208,21,480,25,"default"],[208,28,480,32],[208,31,480,35,"extras"],[208,37,480,41],[208,40,480,44,"extras"],[208,46,480,50],[208,47,480,51,"defaults"],[208,55,480,59],[208,56,480,60,"property"],[208,64,480,68],[208,65,480,69,"name"],[208,69,480,73],[208,70,480,74],[208,73,480,77,"undefined"],[208,82,480,86],[209,12,481,16,"property"],[209,20,481,24],[209,21,481,25,"presentation"],[209,33,481,37],[209,36,481,40,"extras"],[209,42,481,46],[209,45,481,49,"extras"],[209,51,481,55],[209,52,481,56,"presentations"],[209,65,481,69],[209,66,481,70,"property"],[209,74,481,78],[209,75,481,79,"name"],[209,79,481,83],[209,80,481,84],[209,83,481,87,"undefined"],[209,92,481,96],[210,10,482,12],[211,8,483,8],[212,8,484,8],[212,15,484,15,"schemas"],[212,22,484,22],[213,6,485,4],[214,6,486,4],[215,0,487,0],[216,0,488,0],[217,0,489,0],[218,0,490,0],[219,0,491,0],[220,4,486,4],[221,6,486,4,"key"],[221,9,486,4],[222,6,486,4,"get"],[222,9,486,4],[222,11,492,4],[222,20,492,4,"get"],[222,24,492,4],[222,26,492,24],[223,8,493,8],[223,15,493,15,"Number"],[223,21,493,21],[223,22,493,22],[223,26,493,26],[223,27,493,27,"internal"],[223,35,493,35],[223,36,493,36,"schemaVersion"],[223,49,493,49],[223,50,493,50],[224,6,494,4],[225,6,495,4],[226,0,496,0],[227,0,497,0],[228,0,498,0],[229,0,499,0],[230,0,500,0],[231,4,495,4],[232,6,495,4,"key"],[232,9,495,4],[233,6,495,4,"get"],[233,9,495,4],[233,11,501,4],[233,20,501,4,"get"],[233,24,501,4],[233,26,501,26],[234,8,502,8],[235,8,503,8],[235,15,503,15],[235,19,503,19],[235,20,503,20,"internal"],[235,28,503,28],[235,29,503,29,"isInTransaction"],[235,44,503,44],[236,6,504,4],[237,6,505,4],[238,0,506,0],[239,0,507,0],[240,0,508,0],[241,0,509,0],[242,0,510,0],[243,4,505,4],[244,6,505,4,"key"],[244,9,505,4],[245,6,505,4,"get"],[245,9,505,4],[245,11,511,4],[245,20,511,4,"get"],[245,24,511,4],[245,26,511,24],[246,8,512,8],[247,8,513,8],[247,15,513,15],[247,19,513,19],[247,20,513,20,"internal"],[247,28,513,28],[247,29,513,29,"isInMigration"],[247,42,513,42],[248,6,514,4],[249,6,515,4],[250,0,516,0],[251,0,517,0],[252,0,518,0],[253,0,519,0],[254,0,520,0],[255,4,515,4],[256,6,515,4,"key"],[256,9,515,4],[257,6,515,4,"get"],[257,9,515,4],[257,11,521,4],[257,20,521,4,"get"],[257,24,521,4],[257,26,521,19],[258,8,522,8],[259,8,523,8],[259,15,523,15],[259,19,523,19],[259,20,523,20,"internal"],[259,28,523,28],[259,29,523,29,"isClosed"],[259,37,523,37],[260,6,524,4],[261,6,525,4],[262,0,526,0],[263,0,527,0],[264,0,528,0],[265,0,529,0],[266,4,525,4],[267,6,525,4,"key"],[267,9,525,4],[268,6,525,4,"value"],[268,11,525,4],[268,13,530,4],[268,22,530,4,"close"],[268,27,530,9,"close"],[268,28,530,9],[268,30,530,12],[269,8,531,8],[269,12,531,12],[269,13,531,13,"internal"],[269,21,531,21],[269,22,531,22,"close"],[269,27,531,27],[269,28,531,28],[269,29,531,29],[270,6,532,4],[271,4,532,5],[272,6,532,5,"key"],[272,9,532,5],[273,6,532,5,"value"],[273,11,532,5],[273,13,533,4],[273,22,533,4,"create"],[273,28,533,10,"create"],[273,29,533,11,"type"],[273,33,533,15],[273,35,533,17,"values"],[273,41,533,23],[273,43,533,59],[274,8,533,59],[274,12,533,25,"mode"],[274,16,533,29],[274,19,533,29,"arguments"],[274,28,533,29],[274,29,533,29,"length"],[274,35,533,29],[274,43,533,29,"arguments"],[274,52,533,29],[274,60,533,29,"undefined"],[274,69,533,29],[274,72,533,29,"arguments"],[274,81,533,29],[274,87,533,32,"_$$_REQUIRE"],[274,98,533,32],[274,99,533,32,"_dependencyMap"],[274,113,533,32],[274,131,533,41,"UpdateMode"],[274,141,533,51],[274,142,533,52,"Never"],[274,147,533,57],[275,8,534,8],[276,8,535,8],[276,12,535,12,"mode"],[276,16,535,16],[276,21,535,21],[276,25,535,25],[276,27,535,27],[277,10,536,12,"mode"],[277,14,536,16],[277,17,536,19,"_$$_REQUIRE"],[277,28,536,19],[277,29,536,19,"_dependencyMap"],[277,43,536,19],[277,61,536,28,"UpdateMode"],[277,71,536,38],[277,72,536,39,"All"],[277,75,536,42],[278,8,537,8],[278,9,537,9],[278,15,538,13],[278,19,538,17,"mode"],[278,23,538,21],[278,28,538,26],[278,33,538,31],[278,35,538,33],[279,10,539,12,"mode"],[279,14,539,16],[279,17,539,19,"_$$_REQUIRE"],[279,28,539,19],[279,29,539,19,"_dependencyMap"],[279,43,539,19],[279,61,539,28,"UpdateMode"],[279,71,539,38],[279,72,539,39,"Never"],[279,77,539,44],[280,8,540,8],[281,8,541,8],[282,8,542,8],[282,12,542,12,"values"],[282,18,542,18],[282,30,542,30,"_$$_REQUIRE"],[282,41,542,30],[282,42,542,30,"_dependencyMap"],[282,56,542,30],[282,74,542,39,"RealmObject"],[282,85,542,50],[282,89,542,54],[282,90,542,55,"values"],[282,96,542,61],[282,97,542,62,"_$$_REQUIRE"],[282,108,542,62],[282,109,542,62,"_dependencyMap"],[282,123,542,62],[282,142,542,72,"OBJECT_INTERNAL"],[282,157,542,87],[282,158,542,88],[282,160,542,90],[283,10,543,12],[283,16,543,18],[283,20,543,22,"Error"],[283,25,543,27],[283,26,543,28],[283,88,543,90],[283,89,543,91],[284,8,544,8],[285,8,545,8],[285,12,545,12],[285,13,545,13,"Object"],[285,19,545,19],[285,20,545,20,"values"],[285,26,545,26],[285,27,545,27,"_$$_REQUIRE"],[285,38,545,27],[285,39,545,27,"_dependencyMap"],[285,53,545,27],[285,71,545,36,"UpdateMode"],[285,81,545,46],[285,82,545,47],[285,83,545,48,"includes"],[285,91,545,56],[285,92,545,57,"mode"],[285,96,545,61],[285,97,545,62],[285,99,545,64],[286,10,546,12],[286,16,546,18],[286,20,546,22,"Error"],[286,25,546,27],[286,26,546,28],[286,61,546,63,"_$$_REQUIRE"],[286,72,546,63],[286,73,546,63,"_dependencyMap"],[286,87,546,63],[286,105,546,72,"UpdateMode"],[286,115,546,82],[286,116,546,83,"Never"],[286,121,546,88],[286,128,546,95,"_$$_REQUIRE"],[286,139,546,95],[286,140,546,95,"_dependencyMap"],[286,154,546,95],[286,172,546,104,"UpdateMode"],[286,182,546,114],[286,183,546,115,"Modified"],[286,191,546,123],[286,200,546,132,"_$$_REQUIRE"],[286,211,546,132],[286,212,546,132,"_dependencyMap"],[286,226,546,132],[286,244,546,141,"UpdateMode"],[286,254,546,151],[286,255,546,152,"All"],[286,258,546,155],[286,275,546,172],[286,276,546,173],[287,8,547,8],[288,8,548,8],[288,12,548,12],[288,13,548,13,"internal"],[288,21,548,21],[288,22,548,22,"verifyOpen"],[288,32,548,32],[288,33,548,33],[288,34,548,34],[289,8,549,8],[289,12,549,14,"helpers"],[289,19,549,21],[289,22,549,24],[289,26,549,28],[289,27,549,29,"classes"],[289,34,549,36],[289,35,549,37,"getHelpers"],[289,45,549,47],[289,46,549,48,"type"],[289,50,549,52],[289,51,549,53],[290,8,550,8],[290,12,550,12],[290,13,550,13,"currentUpdateMode"],[290,30,550,30],[290,33,550,33,"mode"],[290,37,550,37],[291,8,551,8],[291,12,551,12,"realmObject"],[291,23,551,23],[292,8,552,8],[292,12,552,12],[293,10,553,12,"realmObject"],[293,21,553,23],[293,24,553,26,"_$$_REQUIRE"],[293,35,553,26],[293,36,553,26,"_dependencyMap"],[293,50,553,26],[293,68,553,35,"RealmObject"],[293,79,553,46],[293,80,553,47,"create"],[293,86,553,53],[293,87,553,54],[293,91,553,58],[293,93,553,60,"values"],[293,99,553,66],[293,101,553,68,"mode"],[293,105,553,72],[293,107,553,74],[294,12,553,76,"helpers"],[294,19,553,83],[294,21,553,76,"helpers"],[295,10,553,84],[295,11,553,85],[295,12,553,86],[296,8,554,8],[296,9,554,9],[296,18,555,16],[297,10,556,12],[297,14,556,16],[297,15,556,17,"currentUpdateMode"],[297,32,556,34],[297,35,556,37,"undefined"],[297,44,556,46],[298,8,557,8],[299,8,558,8],[299,15,558,15,"isAsymmetric"],[299,27,558,27],[299,28,558,28,"helpers"],[299,35,558,35],[299,36,558,36,"objectSchema"],[299,48,558,48],[299,49,558,49],[299,52,558,52,"undefined"],[299,61,558,61],[299,64,558,64,"realmObject"],[299,75,558,75],[300,6,559,4],[301,6,560,4],[302,6,561,4],[303,0,562,0],[304,0,563,0],[305,0,564,0],[306,6,565,4],[307,4,565,4],[308,6,565,4,"key"],[308,9,565,4],[309,6,565,4,"value"],[309,11,565,4],[309,13,566,4],[309,22,566,4,"delete"],[309,29,566,10,"delete"],[309,30,566,11,"subject"],[309,37,566,18],[309,39,566,20],[310,8,567,8,"_$$_REQUIRE"],[310,19,567,8],[310,20,567,8,"_dependencyMap"],[310,34,567,8],[310,51,567,17,"assert"],[310,57,567,23],[310,58,567,24,"inTransaction"],[310,71,567,37],[310,72,567,38],[310,76,567,42],[310,78,567,44],[310,125,567,91],[310,126,567,92],[311,8,568,8,"_$$_REQUIRE"],[311,19,568,8],[311,20,568,8,"_dependencyMap"],[311,34,568,8],[311,51,568,17,"assert"],[311,57,568,23],[311,58,568,24,"object"],[311,64,568,30],[311,65,568,31,"subject"],[311,72,568,38],[311,74,568,40],[311,83,568,49],[311,84,568,50],[312,8,569,8],[312,12,569,12,"subject"],[312,19,569,19],[312,31,569,31,"_$$_REQUIRE"],[312,42,569,31],[312,43,569,31,"_dependencyMap"],[312,57,569,31],[312,75,569,40,"RealmObject"],[312,86,569,51],[312,88,569,53],[313,10,570,12,"_$$_REQUIRE"],[313,21,570,12],[313,22,570,12,"_dependencyMap"],[313,36,570,12],[313,53,570,21,"assert"],[313,59,570,27],[313,60,570,28,"isSameRealm"],[313,71,570,39],[313,72,570,40,"subject"],[313,79,570,47],[313,80,570,48,"_$$_REQUIRE"],[313,91,570,48],[313,92,570,48,"_dependencyMap"],[313,106,570,48],[313,125,570,58,"OBJECT_REALM"],[313,137,570,70],[313,138,570,71],[313,139,570,72,"internal"],[313,147,570,80],[313,149,570,82],[313,153,570,86],[313,154,570,87,"internal"],[313,162,570,95],[313,164,570,97],[313,207,570,140],[313,208,570,141],[314,10,571,12],[314,14,571,12,"_this$classes$getHelp"],[314,35,571,12],[314,38,571,37],[314,42,571,41],[314,43,571,42,"classes"],[314,50,571,49],[314,51,571,50,"getHelpers"],[314,61,571,60],[314,62,571,61,"subject"],[314,69,571,68],[314,70,571,69],[315,12,571,20,"objectSchema"],[315,24,571,32],[315,27,571,32,"_this$classes$getHelp"],[315,48,571,32],[315,49,571,20,"objectSchema"],[315,61,571,32],[316,10,572,12],[316,14,572,18,"obj"],[316,17,572,21],[316,20,572,24,"subject"],[316,27,572,31],[316,28,572,32,"_$$_REQUIRE"],[316,39,572,32],[316,40,572,32,"_dependencyMap"],[316,54,572,32],[316,73,572,42,"OBJECT_INTERNAL"],[316,88,572,57],[316,89,572,58],[317,10,573,12,"_$$_REQUIRE"],[317,21,573,12],[317,22,573,12,"_dependencyMap"],[317,36,573,12],[317,53,573,21,"assert"],[317,59,573,27],[317,60,573,28,"isValid"],[317,67,573,35],[317,68,573,36,"obj"],[317,71,573,39],[317,73,573,41],[317,175,573,143],[317,176,573,144],[318,10,574,12],[318,14,574,18,"table"],[318,19,574,23],[318,22,574,26,"_$$_REQUIRE"],[318,33,574,26],[318,34,574,26,"_dependencyMap"],[318,48,574,26],[318,67,574,36,"binding"],[318,74,574,43],[318,75,574,44,"Helpers"],[318,82,574,51],[318,83,574,52,"getTable"],[318,91,574,60],[318,92,574,61],[318,96,574,65],[318,97,574,66,"internal"],[318,105,574,74],[318,107,574,76,"objectSchema"],[318,119,574,88],[318,120,574,89,"tableKey"],[318,128,574,97],[318,129,574,98],[319,10,575,12,"table"],[319,15,575,17],[319,16,575,18,"removeObject"],[319,28,575,30],[319,29,575,31,"obj"],[319,32,575,34],[319,33,575,35,"key"],[319,36,575,38],[319,37,575,39],[320,8,576,8],[320,9,576,9],[320,15,577,13],[320,19,577,17,"subject"],[320,26,577,24],[320,38,577,36,"_$$_REQUIRE"],[320,49,577,36],[320,50,577,36,"_dependencyMap"],[320,64,577,36],[320,80,577,43,"List"],[320,84,577,47],[320,86,577,49],[321,10,578,12,"subject"],[321,17,578,19],[321,18,578,20,"internal"],[321,26,578,28],[321,27,578,29,"deleteAll"],[321,36,578,38],[321,37,578,39],[321,38,578,40],[322,8,579,8],[322,9,579,9],[322,15,580,13],[322,19,580,17,"subject"],[322,26,580,24],[322,38,580,36,"_$$_REQUIRE"],[322,49,580,36],[322,50,580,36,"_dependencyMap"],[322,64,580,36],[322,83,580,46,"Results"],[322,90,580,53],[322,92,580,55],[323,10,581,12,"subject"],[323,17,581,19],[323,18,581,20,"internal"],[323,26,581,28],[323,27,581,29,"clear"],[323,32,581,34],[323,33,581,35],[323,34,581,36],[324,8,582,8],[324,9,582,9],[324,15,583,13],[324,19,583,17,"Array"],[324,24,583,22],[324,25,583,23,"isArray"],[324,32,583,30],[324,33,583,31,"subject"],[324,40,583,38],[324,41,583,39],[324,45,583,43,"Symbol"],[324,51,583,49],[324,52,583,50,"iterator"],[324,60,583,58],[324,64,583,62,"subject"],[324,71,583,69],[324,73,583,71],[325,10,584,12],[326,10,585,12],[326,15,585,17],[326,19,585,23,"object"],[326,25,585,29],[326,29,585,33,"subject"],[326,36,585,40],[326,38,585,42],[327,12,586,16,"_$$_REQUIRE"],[327,23,586,16],[327,24,586,16,"_dependencyMap"],[327,38,586,16],[327,55,586,25,"assert"],[327,61,586,31],[327,62,586,32,"instanceOf"],[327,72,586,42],[327,73,586,43,"object"],[327,79,586,49],[327,81,586,51,"_$$_REQUIRE"],[327,92,586,51],[327,93,586,51,"_dependencyMap"],[327,107,586,51],[327,125,586,60,"RealmObject"],[327,136,586,71],[327,137,586,72],[328,12,587,16,"_$$_REQUIRE"],[328,23,587,16],[328,24,587,16,"_dependencyMap"],[328,38,587,16],[328,55,587,25,"assert"],[328,61,587,31],[328,62,587,32,"isSameRealm"],[328,73,587,43],[328,74,587,44,"object"],[328,80,587,50],[328,81,587,51,"_$$_REQUIRE"],[328,92,587,51],[328,93,587,51,"_dependencyMap"],[328,107,587,51],[328,126,587,61,"OBJECT_REALM"],[328,138,587,73],[328,139,587,74],[328,140,587,75,"internal"],[328,148,587,83],[328,150,587,85],[328,154,587,89],[328,155,587,90,"internal"],[328,163,587,98],[328,165,587,100],[328,208,587,143],[328,209,587,144],[329,12,588,16],[329,16,588,16,"_this$classes$getHelp2"],[329,38,588,16],[329,41,588,41],[329,45,588,45],[329,46,588,46,"classes"],[329,53,588,53],[329,54,588,54,"getHelpers"],[329,64,588,64],[329,65,588,65,"object"],[329,71,588,71],[329,72,588,72],[330,14,588,24,"objectSchema"],[330,27,588,36],[330,30,588,36,"_this$classes$getHelp2"],[330,52,588,36],[330,53,588,24,"objectSchema"],[330,65,588,36],[331,12,589,16],[331,16,589,22,"table"],[331,22,589,27],[331,25,589,30,"_$$_REQUIRE"],[331,36,589,30],[331,37,589,30,"_dependencyMap"],[331,51,589,30],[331,70,589,40,"binding"],[331,77,589,47],[331,78,589,48,"Helpers"],[331,85,589,55],[331,86,589,56,"getTable"],[331,94,589,64],[331,95,589,65],[331,99,589,69],[331,100,589,70,"internal"],[331,108,589,78],[331,110,589,80,"objectSchema"],[331,123,589,92],[331,124,589,93,"tableKey"],[331,132,589,101],[331,133,589,102],[332,12,590,16,"table"],[332,18,590,21],[332,19,590,22,"removeObject"],[332,31,590,34],[332,32,590,35,"object"],[332,38,590,41],[332,39,590,42,"_$$_REQUIRE"],[332,50,590,42],[332,51,590,42,"_dependencyMap"],[332,65,590,42],[332,84,590,52,"OBJECT_INTERNAL"],[332,99,590,67],[332,100,590,68],[332,101,590,69,"key"],[332,104,590,72],[332,105,590,73],[333,10,591,12],[334,8,592,8],[334,9,592,9],[334,15,593,13],[335,10,594,12],[335,16,594,18],[335,20,594,22,"Error"],[335,25,594,27],[335,26,594,28],[335,71,594,73],[335,72,594,74],[336,8,595,8],[337,6,596,4],[338,6,597,4],[339,0,598,0],[340,0,599,0],[341,0,600,0],[342,0,601,0],[343,4,597,4],[344,6,597,4,"key"],[344,9,597,4],[345,6,597,4,"value"],[345,11,597,4],[345,13,602,4],[345,22,602,4,"deleteModel"],[345,33,602,15,"deleteModel"],[345,34,602,16,"name"],[345,38,602,20],[345,40,602,22],[346,8,603,8,"_$$_REQUIRE"],[346,19,603,8],[346,20,603,8,"_dependencyMap"],[346,34,603,8],[346,51,603,17,"assert"],[346,57,603,23],[346,58,603,24,"inTransaction"],[346,71,603,37],[346,72,603,38],[346,76,603,42],[346,78,603,44],[346,125,603,91],[346,126,603,92],[347,8,604,8,"_$$_REQUIRE"],[347,19,604,8],[347,20,604,8,"_dependencyMap"],[347,34,604,8],[347,53,604,18,"binding"],[347,60,604,25],[347,61,604,26,"Helpers"],[347,68,604,33],[347,69,604,34,"deleteDataForObject"],[347,88,604,53],[347,89,604,54],[347,93,604,58],[347,94,604,59,"internal"],[347,102,604,67],[347,104,604,69,"name"],[347,108,604,73],[347,109,604,74],[348,8,605,8],[348,12,605,12],[348,13,605,13],[348,17,605,17],[348,18,605,18,"internal"],[348,26,605,26],[348,27,605,27,"isInMigration"],[348,40,605,40],[348,42,605,42],[349,10,606,12],[349,14,606,18,"newSchema"],[349,23,606,27],[349,26,606,30],[349,30,606,34],[349,31,606,35,"internal"],[349,39,606,43],[349,40,606,44,"schema"],[349,46,606,50],[349,47,606,51,"filter"],[349,53,606,57],[349,54,606,58],[349,64,606,59,"objectSchema"],[349,76,606,71],[350,12,606,71],[350,19,606,76,"objectSchema"],[350,31,606,88],[350,32,606,89,"name"],[350,36,606,93],[350,41,606,98,"name"],[350,45,606,102],[351,10,606,102],[351,12,606,103],[352,10,607,12],[352,14,607,16],[352,15,607,17,"internal"],[352,23,607,25],[352,24,607,26,"updateSchema"],[352,36,607,38],[352,37,607,39,"newSchema"],[352,46,607,48],[352,48,607,50,"_$$_REQUIRE"],[352,59,607,50],[352,60,607,50,"_dependencyMap"],[352,74,607,50],[352,93,607,60,"binding"],[352,100,607,67],[352,101,607,68,"Int64"],[352,106,607,73],[352,107,607,74,"add"],[352,110,607,77],[352,111,607,78],[352,115,607,82],[352,116,607,83,"internal"],[352,124,607,91],[352,125,607,92,"schemaVersion"],[352,138,607,105],[352,140,607,107,"_$$_REQUIRE"],[352,151,607,107],[352,152,607,107,"_dependencyMap"],[352,166,607,107],[352,185,607,117,"binding"],[352,192,607,124],[352,193,607,125,"Int64"],[352,198,607,130],[352,199,607,131,"numToInt"],[352,207,607,139],[352,208,607,140],[352,209,607,141],[352,210,607,142],[352,211,607,143],[352,213,607,145],[352,217,607,149],[352,219,607,151],[352,223,607,155],[352,225,607,157],[352,229,607,161],[352,230,607,162],[353,8,608,8],[354,6,609,4],[355,6,610,4],[356,0,611,0],[357,0,612,0],[358,4,610,4],[359,6,610,4,"key"],[359,9,610,4],[360,6,610,4,"value"],[360,11,610,4],[360,13,613,4],[360,22,613,4,"deleteAll"],[360,31,613,13,"deleteAll"],[360,32,613,13],[360,34,613,16],[361,8,614,8,"_$$_REQUIRE"],[361,19,614,8],[361,20,614,8,"_dependencyMap"],[361,34,614,8],[361,51,614,17,"assert"],[361,57,614,23],[361,58,614,24,"inTransaction"],[361,71,614,37],[361,72,614,38],[361,76,614,42],[361,78,614,44],[361,125,614,91],[361,126,614,92],[362,8,615,8],[362,13,615,13],[362,17,615,19,"objectSchema"],[362,29,615,31],[362,33,615,35],[362,37,615,39],[362,38,615,40,"internal"],[362,46,615,48],[362,47,615,49,"schema"],[362,53,615,55],[362,55,615,57],[363,10,616,12],[363,14,616,18,"table"],[363,19,616,23],[363,22,616,26,"_$$_REQUIRE"],[363,33,616,26],[363,34,616,26,"_dependencyMap"],[363,48,616,26],[363,67,616,36,"binding"],[363,74,616,43],[363,75,616,44,"Helpers"],[363,82,616,51],[363,83,616,52,"getTable"],[363,91,616,60],[363,92,616,61],[363,96,616,65],[363,97,616,66,"internal"],[363,105,616,74],[363,107,616,76,"objectSchema"],[363,119,616,88],[363,120,616,89,"tableKey"],[363,128,616,97],[363,129,616,98],[364,10,617,12,"table"],[364,15,617,17],[364,16,617,18,"clear"],[364,21,617,23],[364,22,617,24],[364,23,617,25],[365,8,618,8],[366,6,619,4],[367,4,619,5],[368,6,619,5,"key"],[368,9,619,5],[369,6,619,5,"value"],[369,11,619,5],[369,13,620,4],[369,22,620,4,"objectForPrimaryKey"],[369,41,620,23,"objectForPrimaryKey"],[369,42,620,24,"type"],[369,46,620,28],[369,48,620,30,"primaryKey"],[369,58,620,40],[369,60,620,42],[370,8,621,8],[371,8,622,8],[371,12,622,8,"_this$classes$getHelp3"],[371,34,622,8],[371,37,622,57],[371,41,622,61],[371,42,622,62,"classes"],[371,49,622,69],[371,50,622,70,"getHelpers"],[371,60,622,80],[371,61,622,81,"type"],[371,65,622,85],[371,66,622,86],[372,10,622,16,"objectSchema"],[372,22,622,28],[372,25,622,28,"_this$classes$getHelp3"],[372,47,622,28],[372,48,622,16,"objectSchema"],[372,60,622,28],[373,10,622,30,"properties"],[373,20,622,40],[373,23,622,40,"_this$classes$getHelp3"],[373,45,622,40],[373,46,622,30,"properties"],[373,56,622,40],[374,10,622,42,"wrapObject"],[374,20,622,52],[374,23,622,52,"_this$classes$getHelp3"],[374,45,622,52],[374,46,622,42,"wrapObject"],[374,56,622,52],[375,8,623,8],[375,12,623,12],[375,13,623,13,"objectSchema"],[375,25,623,25],[375,26,623,26,"primaryKey"],[375,36,623,36],[375,38,623,38],[376,10,624,12],[376,16,624,18],[376,20,624,22,"Error"],[376,25,624,27],[376,26,624,28],[376,56,624,58,"objectSchema"],[376,68,624,70],[376,69,624,71,"name"],[376,73,624,75],[376,76,624,78],[376,77,624,79],[377,8,625,8],[378,8,626,8],[378,12,626,12,"isAsymmetric"],[378,24,626,24],[378,25,626,25,"objectSchema"],[378,37,626,37],[378,38,626,38],[378,40,626,40],[379,10,627,12],[379,16,627,18],[379,20,627,22,"Error"],[379,25,627,27],[379,26,627,28],[379,66,627,68],[379,67,627,69],[380,8,628,8],[381,8,629,8],[381,12,629,14,"table"],[381,17,629,19],[381,20,629,22,"_$$_REQUIRE"],[381,31,629,22],[381,32,629,22,"_dependencyMap"],[381,46,629,22],[381,65,629,32,"binding"],[381,72,629,39],[381,73,629,40,"Helpers"],[381,80,629,47],[381,81,629,48,"getTable"],[381,89,629,56],[381,90,629,57],[381,94,629,61],[381,95,629,62,"internal"],[381,103,629,70],[381,105,629,72,"objectSchema"],[381,117,629,84],[381,118,629,85,"tableKey"],[381,126,629,93],[381,127,629,94],[382,8,630,8],[382,12,630,14,"value"],[382,17,630,19],[382,20,630,22,"properties"],[382,30,630,32],[382,31,630,33,"get"],[382,34,630,36],[382,35,630,37,"objectSchema"],[382,47,630,49],[382,48,630,50,"primaryKey"],[382,58,630,60],[382,59,630,61],[382,60,630,62,"toBinding"],[382,69,630,71],[382,70,630,72,"primaryKey"],[382,80,630,82],[382,81,630,83],[383,8,631,8],[383,12,631,12],[384,10,632,12],[384,14,632,18,"objKey"],[384,20,632,24],[384,23,632,27,"table"],[384,28,632,32],[384,29,632,33,"findPrimaryKey"],[384,43,632,47],[384,44,632,48,"value"],[384,49,632,53],[384,50,632,54],[385,10,633,12],[385,14,633,16,"_$$_REQUIRE"],[385,25,633,16],[385,26,633,16,"_dependencyMap"],[385,40,633,16],[385,59,633,26,"binding"],[385,66,633,33],[385,67,633,34,"isEmptyObjKey"],[385,80,633,47],[385,81,633,48,"objKey"],[385,87,633,54],[385,88,633,55],[385,90,633,57],[386,12,634,16],[386,19,634,23],[386,23,634,27],[387,10,635,12],[387,11,635,13],[387,17,636,17],[388,12,637,16],[388,16,637,22,"obj"],[388,19,637,25],[388,22,637,28,"table"],[388,27,637,33],[388,28,637,34,"getObject"],[388,37,637,43],[388,38,637,44,"objKey"],[388,44,637,50],[388,45,637,51],[389,12,638,16],[389,19,638,23,"wrapObject"],[389,29,638,33],[389,30,638,34,"obj"],[389,33,638,37],[389,34,638,38],[390,10,639,12],[391,8,640,8],[391,9,640,9],[391,10,641,8],[391,17,641,15,"err"],[391,20,641,18],[391,22,641,20],[392,10,642,12],[393,10,643,12],[393,14,643,16,"err"],[393,17,643,19],[393,29,643,31,"Error"],[393,34,643,36],[393,38,643,40,"err"],[393,41,643,43],[393,42,643,44,"message"],[393,49,643,51],[393,50,643,52,"startsWith"],[393,60,643,62],[393,61,643,63],[393,81,643,83],[393,82,643,84],[393,84,643,86],[394,12,644,16],[394,18,644,22],[394,22,644,26,"Error"],[394,27,644,31],[394,28,644,32],[394,35,644,39,"objectSchema"],[394,47,644,51],[394,48,644,52,"name"],[394,52,644,56],[394,67,644,71,"primaryKey"],[394,77,644,81],[394,80,644,84],[394,81,644,85],[395,10,645,12],[395,11,645,13],[395,17,646,17],[396,12,647,16],[396,18,647,22,"err"],[396,21,647,25],[397,10,648,12],[398,8,649,8],[399,6,650,4],[400,4,650,5],[401,6,650,5,"key"],[401,9,650,5],[402,6,650,5,"value"],[402,11,650,5],[402,13,651,4],[402,22,651,4,"_objectForObjectKey"],[402,41,651,23,"_objectForObjectKey"],[402,42,651,24,"type"],[402,46,651,28],[402,48,651,30,"objectKey"],[402,57,651,39],[402,59,651,41],[403,8,652,8],[403,12,652,8,"_this$classes$getHelp4"],[403,34,652,8],[403,37,652,45],[403,41,652,49],[403,42,652,50,"classes"],[403,49,652,57],[403,50,652,58,"getHelpers"],[403,60,652,68],[403,61,652,69,"type"],[403,65,652,73],[403,66,652,74],[404,10,652,16,"objectSchema"],[404,22,652,28],[404,25,652,28,"_this$classes$getHelp4"],[404,47,652,28],[404,48,652,16,"objectSchema"],[404,60,652,28],[405,10,652,30,"wrapObject"],[405,20,652,40],[405,23,652,40,"_this$classes$getHelp4"],[405,45,652,40],[405,46,652,30,"wrapObject"],[405,56,652,40],[406,8,653,8],[406,12,653,12,"isEmbedded"],[406,22,653,22],[406,23,653,23,"objectSchema"],[406,35,653,35],[406,36,653,36],[406,38,653,38],[407,10,654,12],[407,16,654,18],[407,20,654,22,"Error"],[407,25,654,27],[407,26,654,28],[407,64,654,66],[407,65,654,67],[408,8,655,8],[408,9,655,9],[408,15,656,13],[408,19,656,17,"isAsymmetric"],[408,31,656,29],[408,32,656,30,"objectSchema"],[408,44,656,42],[408,45,656,43],[408,47,656,45],[409,10,657,12],[409,16,657,18],[409,20,657,22,"Error"],[409,25,657,27],[409,26,657,28],[409,66,657,68],[409,67,657,69],[410,8,658,8],[411,8,659,8,"_$$_REQUIRE"],[411,19,659,8],[411,20,659,8,"_dependencyMap"],[411,34,659,8],[411,51,659,17,"assert"],[411,57,659,23],[411,58,659,24,"numericString"],[411,71,659,37],[411,72,659,38,"objectKey"],[411,81,659,47],[411,82,659,48],[412,8,660,8],[412,12,660,14,"table"],[412,17,660,19],[412,20,660,22,"_$$_REQUIRE"],[412,31,660,22],[412,32,660,22,"_dependencyMap"],[412,46,660,22],[412,65,660,32,"binding"],[412,72,660,39],[412,73,660,40,"Helpers"],[412,80,660,47],[412,81,660,48,"getTable"],[412,89,660,56],[412,90,660,57],[412,94,660,61],[412,95,660,62,"internal"],[412,103,660,70],[412,105,660,72,"objectSchema"],[412,117,660,84],[412,118,660,85,"tableKey"],[412,126,660,93],[412,127,660,94],[413,8,661,8],[413,12,661,12],[414,10,662,12],[414,14,662,18,"objKey"],[414,20,662,24],[414,23,662,27,"_$$_REQUIRE"],[414,34,662,27],[414,35,662,27,"_dependencyMap"],[414,49,662,27],[414,68,662,37,"binding"],[414,75,662,44],[414,76,662,45,"stringToObjKey"],[414,90,662,59],[414,91,662,60,"objectKey"],[414,100,662,69],[414,101,662,70],[415,10,663,12],[415,14,663,18,"obj"],[415,17,663,21],[415,20,663,24,"table"],[415,25,663,29],[415,26,663,30,"tryGetObject"],[415,38,663,42],[415,39,663,43,"objKey"],[415,45,663,49],[415,46,663,50],[416,10,664,12],[416,14,664,18,"result"],[416,20,664,24],[416,23,664,27,"obj"],[416,26,664,30],[416,30,664,34,"wrapObject"],[416,40,664,44],[416,41,664,45,"obj"],[416,44,664,48],[416,45,664,49],[417,10,665,12],[417,17,665,19,"result"],[417,23,665,25],[417,28,665,30],[417,32,665,34],[417,35,665,37,"undefined"],[417,44,665,46],[417,47,665,49,"result"],[417,53,665,55],[418,8,666,8],[418,9,666,9],[418,10,667,8],[418,17,667,15,"err"],[418,20,667,18],[418,22,667,20],[419,10,668,12],[419,14,668,16,"err"],[419,17,668,19],[419,29,668,31,"_$$_REQUIRE"],[419,40,668,31],[419,41,668,31,"_dependencyMap"],[419,55,668,31],[419,74,668,41,"binding"],[419,81,668,48],[419,82,668,49,"InvalidObjKey"],[419,95,668,62],[419,97,668,64],[420,12,669,16],[420,19,669,23,"undefined"],[420,28,669,32],[421,10,670,12],[421,11,670,13],[421,17,671,17],[422,12,672,16],[422,18,672,22,"err"],[422,21,672,25],[423,10,673,12],[424,8,674,8],[425,6,675,4],[426,4,675,5],[427,6,675,5,"key"],[427,9,675,5],[428,6,675,5,"value"],[428,11,675,5],[428,13,676,4],[428,22,676,4,"objects"],[428,29,676,11,"objects"],[428,30,676,12,"type"],[428,34,676,16],[428,36,676,18],[429,8,677,8],[429,12,677,16,"internal"],[429,20,677,24],[429,23,677,38],[429,27,677,42],[429,28,677,16,"internal"],[429,36,677,24],[430,10,677,26,"classes"],[430,17,677,33],[430,20,677,38],[430,24,677,42],[430,25,677,26,"classes"],[430,32,677,33],[431,8,678,8],[431,12,678,8,"_classes$getHelpers"],[431,31,678,8],[431,34,678,45,"classes"],[431,41,678,52],[431,42,678,53,"getHelpers"],[431,52,678,63],[431,53,678,64,"type"],[431,57,678,68],[431,58,678,69],[432,10,678,16,"objectSchema"],[432,22,678,28],[432,25,678,28,"_classes$getHelpers"],[432,44,678,28],[432,45,678,16,"objectSchema"],[432,57,678,28],[433,10,678,30,"wrapObject"],[433,20,678,40],[433,23,678,40,"_classes$getHelpers"],[433,42,678,40],[433,43,678,30,"wrapObject"],[433,53,678,40],[434,8,679,8],[434,12,679,12,"isEmbedded"],[434,22,679,22],[434,23,679,23,"objectSchema"],[434,35,679,35],[434,36,679,36],[434,38,679,38],[435,10,680,12],[435,16,680,18],[435,20,680,22,"Error"],[435,25,680,27],[435,26,680,28],[435,64,680,66],[435,65,680,67],[436,8,681,8],[436,9,681,9],[436,15,682,13],[436,19,682,17,"isAsymmetric"],[436,31,682,29],[436,32,682,30,"objectSchema"],[436,44,682,42],[436,45,682,43],[436,47,682,45],[437,10,683,12],[437,16,683,18],[437,20,683,22,"Error"],[437,25,683,27],[437,26,683,28],[437,66,683,68],[437,67,683,69],[438,8,684,8],[439,8,685,8],[439,12,685,14,"table"],[439,17,685,19],[439,20,685,22,"_$$_REQUIRE"],[439,31,685,22],[439,32,685,22,"_dependencyMap"],[439,46,685,22],[439,65,685,32,"binding"],[439,72,685,39],[439,73,685,40,"Helpers"],[439,80,685,47],[439,81,685,48,"getTable"],[439,89,685,56],[439,90,685,57,"internal"],[439,98,685,65],[439,100,685,67,"objectSchema"],[439,112,685,79],[439,113,685,80,"tableKey"],[439,121,685,88],[439,122,685,89],[440,8,686,8],[440,12,686,14,"results"],[440,19,686,21],[440,22,686,24,"_$$_REQUIRE"],[440,33,686,24],[440,34,686,24,"_dependencyMap"],[440,48,686,24],[440,67,686,34,"binding"],[440,74,686,41],[440,75,686,42,"Results"],[440,82,686,49],[440,83,686,50,"fromTable"],[440,92,686,59],[440,93,686,60,"internal"],[440,101,686,68],[440,103,686,70,"table"],[440,108,686,75],[440,109,686,76],[441,8,687,8],[441,12,687,14,"typeHelpers"],[441,23,687,25],[441,26,687,28],[442,10,688,12,"fromBinding"],[442,21,688,23],[442,32,688,12,"fromBinding"],[442,43,688,23,"fromBinding"],[442,44,688,24,"value"],[442,49,688,29],[442,51,688,31],[443,12,689,16],[443,19,689,23,"wrapObject"],[443,29,689,33],[443,30,689,34,"value"],[443,35,689,39],[443,36,689,40],[444,10,690,12],[444,11,690,13],[445,10,691,12,"toBinding"],[445,19,691,21],[445,30,691,12,"toBinding"],[445,39,691,21,"toBinding"],[445,40,691,22,"value"],[445,45,691,27],[445,47,691,29],[446,12,692,16,"_$$_REQUIRE"],[446,23,692,16],[446,24,692,16,"_dependencyMap"],[446,38,692,16],[446,55,692,25,"assert"],[446,61,692,31],[446,62,692,32,"instanceOf"],[446,72,692,42],[446,73,692,43,"value"],[446,78,692,48],[446,80,692,50,"_$$_REQUIRE"],[446,91,692,50],[446,92,692,50,"_dependencyMap"],[446,106,692,50],[446,124,692,59,"RealmObject"],[446,135,692,70],[446,136,692,71],[447,12,693,16],[447,19,693,23,"value"],[447,24,693,28],[447,25,693,29,"_$$_REQUIRE"],[447,36,693,29],[447,37,693,29,"_dependencyMap"],[447,51,693,29],[447,70,693,39,"OBJECT_INTERNAL"],[447,85,693,54],[447,86,693,55],[448,10,694,12],[449,8,695,8],[449,9,695,9],[450,8,696,8],[450,12,696,14,"accessor"],[450,20,696,22],[450,23,696,25],[450,24,696,26],[450,25,696,27],[450,27,696,29,"_$$_REQUIRE"],[450,38,696,29],[450,39,696,29,"_dependencyMap"],[450,53,696,29],[450,93,696,39,"createResultsAccessor"],[450,114,696,60],[450,116,696,62],[451,10,696,64,"realm"],[451,15,696,69],[451,17,696,71],[451,21,696,75],[452,10,696,77,"typeHelpers"],[452,21,696,88],[452,23,696,77,"typeHelpers"],[452,34,696,88],[453,10,696,90,"itemType"],[453,18,696,98],[453,20,696,100],[453,21,696,101],[453,22,696,102],[454,8,696,136],[454,9,696,137],[454,10,696,138],[455,8,697,8],[455,15,697,15],[455,20,697,19,"_$$_REQUIRE"],[455,31,697,19],[455,32,697,19,"_dependencyMap"],[455,46,697,19],[455,65,697,29,"Results"],[455,72,697,36],[455,74,697,37],[455,78,697,41],[455,80,697,43,"results"],[455,87,697,50],[455,89,697,52,"accessor"],[455,97,697,60],[455,99,697,62,"typeHelpers"],[455,110,697,73],[455,111,697,74],[456,6,698,4],[457,6,699,4],[458,0,700,0],[459,0,701,0],[460,0,702,0],[461,0,703,0],[462,0,704,0],[463,0,705,0],[464,0,706,0],[465,4,699,4],[466,6,699,4,"key"],[466,9,699,4],[467,6,699,4,"value"],[467,11,699,4],[467,13,707,4],[467,22,707,4,"addListener"],[467,33,707,15,"addListener"],[467,34,707,16,"eventName"],[467,43,707,25],[467,45,707,27,"callback"],[467,53,707,35],[467,55,707,37],[468,8,708,8,"_$$_REQUIRE"],[468,19,708,8],[468,20,708,8,"_dependencyMap"],[468,34,708,8],[468,51,708,17,"assert"],[468,57,708,23],[468,58,708,24,"open"],[468,62,708,28],[468,63,708,29],[468,67,708,33],[468,68,708,34],[469,8,709,8,"_$$_REQUIRE"],[469,19,709,8],[469,20,709,8,"_dependencyMap"],[469,34,709,8],[469,51,709,17,"assert"],[469,57,709,23],[469,58,709,24,"function"],[469,66,709,32],[469,67,709,33,"callback"],[469,75,709,41],[469,76,709,42],[470,8,710,8],[470,12,710,12,"eventName"],[470,21,710,21],[470,26,710,26],[470,34,710,34],[470,36,710,36],[471,10,711,12],[471,14,711,16],[471,15,711,17,"changeListeners"],[471,30,711,32],[471,31,711,33,"add"],[471,34,711,36],[471,35,711,37,"callback"],[471,43,711,45],[471,44,711,46],[472,8,712,8],[472,9,712,9],[472,15,713,13],[472,19,713,17,"eventName"],[472,28,713,26],[472,33,713,31],[472,41,713,39],[472,43,713,41],[473,10,714,12],[473,14,714,16],[473,15,714,17,"schemaListeners"],[473,30,714,32],[473,31,714,33,"add"],[473,34,714,36],[473,35,714,37,"callback"],[473,43,714,45],[473,44,714,46],[474,8,715,8],[474,9,715,9],[474,15,716,13],[474,19,716,17,"eventName"],[474,28,716,26],[474,33,716,31],[474,47,716,45],[474,49,716,47],[475,10,717,12],[475,14,717,16],[475,15,717,17,"beforeNotifyListeners"],[475,36,717,38],[475,37,717,39,"add"],[475,40,717,42],[475,41,717,43,"callback"],[475,49,717,51],[475,50,717,52],[476,8,718,8],[476,9,718,9],[476,15,719,13],[477,10,720,12],[477,16,720,18],[477,20,720,22,"Error"],[477,25,720,27],[477,26,720,28],[477,49,720,51,"eventName"],[477,58,720,60],[477,120,720,122],[477,121,720,123],[478,8,721,8],[479,6,722,4],[480,6,723,4],[481,0,724,0],[482,0,725,0],[483,0,726,0],[484,0,727,0],[485,0,728,0],[486,4,723,4],[487,6,723,4,"key"],[487,9,723,4],[488,6,723,4,"value"],[488,11,723,4],[488,13,729,4],[488,22,729,4,"removeListener"],[488,36,729,18,"removeListener"],[488,37,729,19,"eventName"],[488,46,729,28],[488,48,729,30,"callback"],[488,56,729,38],[488,58,729,40],[489,8,730,8,"_$$_REQUIRE"],[489,19,730,8],[489,20,730,8,"_dependencyMap"],[489,34,730,8],[489,51,730,17,"assert"],[489,57,730,23],[489,58,730,24,"open"],[489,62,730,28],[489,63,730,29],[489,67,730,33],[489,68,730,34],[490,8,731,8,"_$$_REQUIRE"],[490,19,731,8],[490,20,731,8,"_dependencyMap"],[490,34,731,8],[490,51,731,17,"assert"],[490,57,731,23],[490,58,731,24,"function"],[490,66,731,32],[490,67,731,33,"callback"],[490,75,731,41],[490,76,731,42],[491,8,732,8,"assertRealmEvent"],[491,24,732,24],[491,25,732,25,"eventName"],[491,34,732,34],[491,35,732,35],[492,8,733,8],[492,12,733,12,"eventName"],[492,21,733,21],[492,26,733,26,"_$$_REQUIRE"],[492,37,733,26],[492,38,733,26,"_dependencyMap"],[492,52,733,26],[492,77,733,43,"RealmEvent"],[492,87,733,53],[492,88,733,54,"Change"],[492,94,733,60],[492,96,733,62],[493,10,734,12],[493,14,734,16],[493,15,734,17,"changeListeners"],[493,30,734,32],[493,31,734,33,"remove"],[493,37,734,39],[493,38,734,40,"callback"],[493,46,734,48],[493,47,734,49],[494,8,735,8],[494,9,735,9],[494,15,736,13],[494,19,736,17,"eventName"],[494,28,736,26],[494,33,736,31,"_$$_REQUIRE"],[494,44,736,31],[494,45,736,31,"_dependencyMap"],[494,59,736,31],[494,84,736,48,"RealmEvent"],[494,94,736,58],[494,95,736,59,"Schema"],[494,101,736,65],[494,103,736,67],[495,10,737,12],[495,14,737,16],[495,15,737,17,"schemaListeners"],[495,30,737,32],[495,31,737,33,"remove"],[495,37,737,39],[495,38,737,40,"callback"],[495,46,737,48],[495,47,737,49],[496,8,738,8],[496,9,738,9],[496,15,739,13],[496,19,739,17,"eventName"],[496,28,739,26],[496,33,739,31,"_$$_REQUIRE"],[496,44,739,31],[496,45,739,31,"_dependencyMap"],[496,59,739,31],[496,84,739,48,"RealmEvent"],[496,94,739,58],[496,95,739,59,"BeforeNotify"],[496,107,739,71],[496,109,739,73],[497,10,740,12],[497,14,740,16],[497,15,740,17,"beforeNotifyListeners"],[497,36,740,38],[497,37,740,39,"remove"],[497,43,740,45],[497,44,740,46,"callback"],[497,52,740,54],[497,53,740,55],[498,8,741,8],[498,9,741,9],[498,15,742,13],[499,10,743,12,"_$$_REQUIRE"],[499,21,743,12],[499,22,743,12,"_dependencyMap"],[499,36,743,12],[499,53,743,21,"assert"],[499,59,743,27],[499,60,743,28,"never"],[499,65,743,33],[499,66,743,34,"eventName"],[499,75,743,43],[499,77,743,45],[499,88,743,56],[499,89,743,57],[500,8,744,8],[501,6,745,4],[502,6,746,4],[503,0,747,0],[504,0,748,0],[505,0,749,0],[506,0,750,0],[507,4,746,4],[508,6,746,4,"key"],[508,9,746,4],[509,6,746,4,"value"],[509,11,746,4],[509,13,751,4],[509,22,751,4,"removeAllListeners"],[509,40,751,22,"removeAllListeners"],[509,41,751,23,"eventName"],[509,50,751,32],[509,52,751,34],[510,8,752,8,"_$$_REQUIRE"],[510,19,752,8],[510,20,752,8,"_dependencyMap"],[510,34,752,8],[510,51,752,17,"assert"],[510,57,752,23],[510,58,752,24,"open"],[510,62,752,28],[510,63,752,29],[510,67,752,33],[510,68,752,34],[511,8,753,8],[511,12,753,12],[511,19,753,19,"eventName"],[511,28,753,28],[511,33,753,33],[511,44,753,44],[511,46,753,46],[512,10,754,12],[512,14,754,16],[512,15,754,17,"changeListeners"],[512,30,754,32],[512,31,754,33,"removeAll"],[512,40,754,42],[512,41,754,43],[512,42,754,44],[513,10,755,12],[513,14,755,16],[513,15,755,17,"schemaListeners"],[513,30,755,32],[513,31,755,33,"removeAll"],[513,40,755,42],[513,41,755,43],[513,42,755,44],[514,10,756,12],[514,14,756,16],[514,15,756,17,"beforeNotifyListeners"],[514,36,756,38],[514,37,756,39,"removeAll"],[514,46,756,48],[514,47,756,49],[514,48,756,50],[515,8,757,8],[515,9,757,9],[515,15,758,13],[516,10,759,12,"_$$_REQUIRE"],[516,21,759,12],[516,22,759,12,"_dependencyMap"],[516,36,759,12],[516,53,759,21,"assert"],[516,59,759,27],[516,60,759,28,"string"],[516,66,759,34],[516,67,759,35,"eventName"],[516,76,759,44],[516,78,759,46],[516,89,759,57],[516,90,759,58],[517,10,760,12,"assertRealmEvent"],[517,26,760,28],[517,27,760,29,"eventName"],[517,36,760,38],[517,37,760,39],[518,10,761,12],[518,14,761,16,"eventName"],[518,23,761,25],[518,28,761,30,"_$$_REQUIRE"],[518,39,761,30],[518,40,761,30,"_dependencyMap"],[518,54,761,30],[518,79,761,47,"RealmEvent"],[518,89,761,57],[518,90,761,58,"Change"],[518,96,761,64],[518,98,761,66],[519,12,762,16],[519,16,762,20],[519,17,762,21,"changeListeners"],[519,32,762,36],[519,33,762,37,"removeAll"],[519,42,762,46],[519,43,762,47],[519,44,762,48],[520,10,763,12],[520,11,763,13],[520,17,764,17],[520,21,764,21,"eventName"],[520,30,764,30],[520,35,764,35,"_$$_REQUIRE"],[520,46,764,35],[520,47,764,35,"_dependencyMap"],[520,61,764,35],[520,86,764,52,"RealmEvent"],[520,96,764,62],[520,97,764,63,"Schema"],[520,103,764,69],[520,105,764,71],[521,12,765,16],[521,16,765,20],[521,17,765,21,"schemaListeners"],[521,32,765,36],[521,33,765,37,"removeAll"],[521,42,765,46],[521,43,765,47],[521,44,765,48],[522,10,766,12],[522,11,766,13],[522,17,767,17],[522,21,767,21,"eventName"],[522,30,767,30],[522,35,767,35,"_$$_REQUIRE"],[522,46,767,35],[522,47,767,35,"_dependencyMap"],[522,61,767,35],[522,86,767,52,"RealmEvent"],[522,96,767,62],[522,97,767,63,"BeforeNotify"],[522,109,767,75],[522,111,767,77],[523,12,768,16],[523,16,768,20],[523,17,768,21,"beforeNotifyListeners"],[523,38,768,42],[523,39,768,43,"removeAll"],[523,48,768,52],[523,49,768,53],[523,50,768,54],[524,10,769,12],[524,11,769,13],[524,17,770,17],[525,12,771,16,"_$$_REQUIRE"],[525,23,771,16],[525,24,771,16,"_dependencyMap"],[525,38,771,16],[525,55,771,25,"assert"],[525,61,771,31],[525,62,771,32,"never"],[525,67,771,37],[525,68,771,38,"eventName"],[525,77,771,47],[525,79,771,49],[525,90,771,60],[525,91,771,61],[526,10,772,12],[527,8,773,8],[528,6,774,4],[529,6,775,4],[530,0,776,0],[531,0,777,0],[532,0,778,0],[533,0,779,0],[534,0,780,0],[535,0,781,0],[536,0,782,0],[537,0,783,0],[538,0,784,0],[539,0,785,0],[540,4,775,4],[541,6,775,4,"key"],[541,9,775,4],[542,6,775,4,"value"],[542,11,775,4],[542,13,786,4],[542,22,786,4,"write"],[542,27,786,9,"write"],[542,28,786,10,"callback"],[542,36,786,18],[542,38,786,20],[543,8,787,8],[543,12,787,12,"result"],[543,18,787,18],[543,21,787,21,"undefined"],[543,30,787,30],[544,8,788,8],[544,12,788,12],[544,13,788,13,"internal"],[544,21,788,21],[544,22,788,22,"beginTransaction"],[544,38,788,38],[544,39,788,39],[544,40,788,40],[545,8,789,8],[545,12,789,12],[546,10,790,12,"result"],[546,16,790,18],[546,19,790,21,"callback"],[546,27,790,29],[546,28,790,30],[546,29,790,31],[547,8,791,8],[547,9,791,9],[547,10,792,8],[547,17,792,15,"err"],[547,20,792,18],[547,22,792,20],[548,10,793,12],[548,14,793,16],[548,15,793,17,"internal"],[548,23,793,25],[548,24,793,26,"cancelTransaction"],[548,41,793,43],[548,42,793,44],[548,43,793,45],[549,10,794,12],[549,16,794,18,"err"],[549,19,794,21],[550,8,795,8],[551,8,796,8],[551,12,796,12],[551,13,796,13,"internal"],[551,21,796,21],[551,22,796,22,"commitTransaction"],[551,39,796,39],[551,40,796,40],[551,41,796,41],[552,8,797,8],[552,15,797,15,"result"],[552,21,797,21],[553,6,798,4],[554,6,799,4],[555,0,800,0],[556,0,801,0],[557,0,802,0],[558,0,803,0],[559,0,804,0],[560,0,805,0],[561,0,806,0],[562,0,807,0],[563,0,808,0],[564,0,809,0],[565,0,810,0],[566,0,811,0],[567,0,812,0],[568,0,813,0],[569,0,814,0],[570,0,815,0],[571,0,816,0],[572,0,817,0],[573,0,818,0],[574,4,799,4],[575,6,799,4,"key"],[575,9,799,4],[576,6,799,4,"value"],[576,11,799,4],[576,13,819,4],[576,22,819,4,"beginTransaction"],[576,38,819,20,"beginTransaction"],[576,39,819,20],[576,41,819,23],[577,8,820,8],[577,12,820,12],[577,13,820,13,"internal"],[577,21,820,21],[577,22,820,22,"beginTransaction"],[577,38,820,38],[577,39,820,39],[577,40,820,40],[578,6,821,4],[579,6,822,4],[580,0,823,0],[581,0,824,0],[582,0,825,0],[583,4,822,4],[584,6,822,4,"key"],[584,9,822,4],[585,6,822,4,"value"],[585,11,822,4],[585,13,826,4],[585,22,826,4,"commitTransaction"],[585,39,826,21,"commitTransaction"],[585,40,826,21],[585,42,826,24],[586,8,827,8],[586,12,827,12],[586,13,827,13,"internal"],[586,21,827,21],[586,22,827,22,"commitTransaction"],[586,39,827,39],[586,40,827,40],[586,41,827,41],[587,6,828,4],[588,6,829,4],[589,0,830,0],[590,0,831,0],[591,0,832,0],[592,4,829,4],[593,6,829,4,"key"],[593,9,829,4],[594,6,829,4,"value"],[594,11,829,4],[594,13,833,4],[594,22,833,4,"cancelTransaction"],[594,39,833,21,"cancelTransaction"],[594,40,833,21],[594,42,833,24],[595,8,834,8],[595,12,834,12],[595,13,834,13,"internal"],[595,21,834,21],[595,22,834,22,"cancelTransaction"],[595,39,834,39],[595,40,834,40],[595,41,834,41],[596,6,835,4],[597,6,836,4],[598,0,837,0],[599,0,838,0],[600,0,839,0],[601,0,840,0],[602,0,841,0],[603,0,842,0],[604,0,843,0],[605,0,844,0],[606,0,845,0],[607,0,846,0],[608,0,847,0],[609,0,848,0],[610,0,849,0],[611,0,850,0],[612,0,851,0],[613,4,836,4],[614,6,836,4,"key"],[614,9,836,4],[615,6,836,4,"value"],[615,11,836,4],[615,13,852,4],[615,22,852,4,"compact"],[615,29,852,11,"compact"],[615,30,852,11],[615,32,852,14],[616,8,853,8,"_$$_REQUIRE"],[616,19,853,8],[616,20,853,8,"_dependencyMap"],[616,34,853,8],[616,51,853,17,"assert"],[616,57,853,23],[616,58,853,24,"outTransaction"],[616,72,853,38],[616,73,853,39],[616,77,853,43],[616,79,853,45],[616,125,853,91],[616,126,853,92],[617,8,854,8],[617,15,854,15],[617,19,854,19],[617,20,854,20,"internal"],[617,28,854,28],[617,29,854,29,"compact"],[617,36,854,36],[617,37,854,37],[617,38,854,38],[618,6,855,4],[619,6,856,4],[620,0,857,0],[621,0,858,0],[622,0,859,0],[623,0,860,0],[624,0,861,0],[625,0,862,0],[626,0,863,0],[627,0,864,0],[628,0,865,0],[629,0,866,0],[630,4,856,4],[631,6,856,4,"key"],[631,9,856,4],[632,6,856,4,"value"],[632,11,856,4],[632,13,867,4],[632,22,867,4,"writeCopyTo"],[632,33,867,15,"writeCopyTo"],[632,34,867,16,"config"],[632,40,867,22],[632,42,867,24],[633,8,868,8,"_$$_REQUIRE"],[633,19,868,8],[633,20,868,8,"_dependencyMap"],[633,34,868,8],[633,51,868,17,"assert"],[633,57,868,23],[633,58,868,24,"outTransaction"],[633,72,868,38],[633,73,868,39],[633,77,868,43],[633,79,868,45],[633,127,868,93],[633,128,868,94],[634,8,869,8],[634,9,869,9],[634,10,869,10],[634,12,869,12,"_$$_REQUIRE"],[634,23,869,12],[634,24,869,12,"_dependencyMap"],[634,38,869,12],[634,62,869,28,"validateConfiguration"],[634,83,869,49],[634,85,869,51,"config"],[634,91,869,57],[634,92,869,58],[635,8,870,8],[635,12,870,8,"_Realm$transformConfi2"],[635,34,870,8],[635,37,870,34,"Realm"],[635,42,870,39],[635,43,870,40,"transformConfig"],[635,58,870,55],[635,59,870,56,"config"],[635,65,870,62],[635,66,870,63],[636,10,870,16,"bindingConfig"],[636,23,870,29],[636,26,870,29,"_Realm$transformConfi2"],[636,48,870,29],[636,49,870,16,"bindingConfig"],[636,62,870,29],[637,8,871,8],[637,12,871,12],[637,13,871,13,"internal"],[637,21,871,21],[637,22,871,22,"convert"],[637,29,871,29],[637,30,871,30,"bindingConfig"],[637,43,871,43],[637,44,871,44],[638,6,872,4],[639,6,873,4],[640,0,874,0],[641,0,875,0],[642,0,876,0],[643,0,877,0],[644,4,873,4],[645,6,873,4,"key"],[645,9,873,4],[646,6,873,4,"value"],[646,11,873,4],[646,13,878,4],[646,22,878,4,"_updateSchema"],[646,35,878,17,"_updateSchema"],[646,36,878,18,"schema"],[646,42,878,24],[646,44,878,26],[647,8,879,8],[647,9,879,9],[647,10,879,10],[647,12,879,12,"_$$_REQUIRE"],[647,23,879,12],[647,24,879,12,"_dependencyMap"],[647,38,879,12],[647,56,879,21,"validateRealmSchema"],[647,75,879,40],[647,77,879,42,"schema"],[647,83,879,48],[647,84,879,49],[648,8,880,8],[648,12,880,14,"normalizedSchema"],[648,28,880,30],[648,31,880,33],[648,32,880,34],[648,33,880,35],[648,35,880,37,"_$$_REQUIRE"],[648,46,880,37],[648,47,880,37,"_dependencyMap"],[648,61,880,37],[648,79,880,46,"normalizeRealmSchema"],[648,99,880,66],[648,101,880,68,"schema"],[648,107,880,74],[648,108,880,75],[649,8,881,8],[649,12,881,14,"bindingSchema"],[649,25,881,27],[649,28,881,30],[649,29,881,31],[649,30,881,32],[649,32,881,34,"_$$_REQUIRE"],[649,43,881,34],[649,44,881,34,"_dependencyMap"],[649,58,881,34],[649,76,881,43,"toBindingSchema"],[649,91,881,58],[649,93,881,60,"normalizedSchema"],[649,109,881,76],[649,110,881,77],[650,8,882,8],[650,12,882,12],[650,13,882,13],[650,17,882,17],[650,18,882,18,"isInTransaction"],[650,33,882,33],[650,35,882,35],[651,10,883,12],[651,16,883,18],[651,20,883,22,"Error"],[651,25,883,27],[651,26,883,28],[651,79,883,81],[651,80,883,82],[652,8,884,8],[653,8,885,8],[653,12,885,12],[653,13,885,13,"internal"],[653,21,885,21],[653,22,885,22,"updateSchema"],[653,34,885,34],[653,35,885,35,"bindingSchema"],[653,48,885,48],[653,50,885,50,"_$$_REQUIRE"],[653,61,885,50],[653,62,885,50,"_dependencyMap"],[653,76,885,50],[653,95,885,60,"binding"],[653,102,885,67],[653,103,885,68,"Int64"],[653,108,885,73],[653,109,885,74,"add"],[653,112,885,77],[653,113,885,78],[653,117,885,82],[653,118,885,83,"internal"],[653,126,885,91],[653,127,885,92,"schemaVersion"],[653,140,885,105],[653,142,885,107,"_$$_REQUIRE"],[653,153,885,107],[653,154,885,107,"_dependencyMap"],[653,168,885,107],[653,187,885,117,"binding"],[653,194,885,124],[653,195,885,125,"Int64"],[653,200,885,130],[653,201,885,131,"numToInt"],[653,209,885,139],[653,210,885,140],[653,211,885,141],[653,212,885,142],[653,213,885,143],[653,215,885,145],[653,219,885,149],[653,221,885,151],[653,225,885,155],[653,227,885,157],[653,231,885,161],[653,232,885,162],[654,8,886,8],[655,8,887,8],[656,8,888,8],[657,8,889,8],[658,6,890,4],[659,6,891,4],[660,4,891,4],[661,6,891,4,"key"],[661,9,891,4],[662,6,891,4,"value"],[662,11,891,4],[662,13,892,4],[662,22,892,4,"getClassHelpers"],[662,37,892,19,"getClassHelpers"],[662,38,892,20,"arg"],[662,41,892,23],[662,43,892,25],[663,8,893,8],[663,15,893,15],[663,19,893,19],[663,20,893,20,"classes"],[663,27,893,27],[663,28,893,28,"getHelpers"],[663,38,893,38],[663,39,893,39,"arg"],[663,42,893,42],[663,43,893,43],[664,6,894,4],[665,4,894,5],[666,6,894,5,"key"],[666,9,894,5],[667,6,894,5,"value"],[667,11,894,5],[668,6,83,4],[669,0,84,0],[670,0,85,0],[671,0,86,0],[672,0,87,0],[673,0,88,0],[674,0,89,0],[675,0,90,0],[676,0,91,0],[677,6,92,4],[677,15,92,11,"setLogLevel"],[677,26,92,22,"setLogLevel"],[677,27,92,23,"level"],[677,32,92,28],[677,34,92,50],[678,8,92,50],[678,12,92,30,"category"],[678,20,92,38],[678,23,92,38,"arguments"],[678,32,92,38],[678,33,92,38,"length"],[678,39,92,38],[678,47,92,38,"arguments"],[678,56,92,38],[678,64,92,38,"undefined"],[678,73,92,38],[678,76,92,38,"arguments"],[678,85,92,38],[678,91,92,41],[678,98,92,48],[679,8,93,8],[679,9,93,9],[679,10,93,10],[679,12,93,12,"_$$_REQUIRE"],[679,23,93,12],[679,24,93,12,"_dependencyMap"],[679,38,93,12],[679,55,93,21,"assert"],[679,61,93,27],[679,63,93,29,"_$$_REQUIRE"],[679,74,93,29],[679,75,93,29,"_dependencyMap"],[679,89,93,29],[679,107,93,38,"LOG_CATEGORIES"],[679,121,93,52],[679,122,93,53,"includes"],[679,130,93,61],[679,131,93,62,"category"],[679,139,93,70],[679,140,93,71],[679,142,93,73],[679,171,93,102,"category"],[679,179,93,110],[679,182,93,113],[679,183,93,114],[680,8,94,8],[680,12,94,14,"categoryRef"],[680,23,94,25],[680,26,94,28,"_$$_REQUIRE"],[680,37,94,28],[680,38,94,28,"_dependencyMap"],[680,52,94,28],[680,71,94,38,"binding"],[680,78,94,45],[680,79,94,46,"LogCategoryRef"],[680,93,94,60],[680,94,94,61,"getCategory"],[680,105,94,72],[680,106,94,73,"category"],[680,114,94,81],[680,115,94,82],[681,8,95,8,"categoryRef"],[681,19,95,19],[681,20,95,20,"setDefaultLevelThreshold"],[681,44,95,44],[681,45,95,45],[681,46,95,46],[681,47,95,47],[681,49,95,49,"_$$_REQUIRE"],[681,60,95,49],[681,61,95,49,"_dependencyMap"],[681,75,95,49],[681,93,95,58,"toBindingLoggerLevel"],[681,113,95,78],[681,115,95,80,"level"],[681,120,95,85],[681,121,95,86],[681,122,95,87],[682,6,96,4],[683,4,96,5],[684,6,96,5,"key"],[684,9,96,5],[685,6,96,5,"value"],[685,11,96,5],[685,13,97,4],[685,22,97,11,"setLogger"],[685,31,97,20,"setLogger"],[685,32,97,21,"loggerCallback"],[685,46,97,35],[685,48,97,37],[686,8,98,8,"_$$_REQUIRE"],[686,19,98,8],[686,20,98,8,"_dependencyMap"],[686,34,98,8],[686,51,98,17,"assert"],[686,57,98,23],[686,58,98,24,"function"],[686,66,98,32],[686,67,98,33,"loggerCallback"],[686,81,98,47],[686,82,98,48],[687,8,99,8,"_$$_REQUIRE"],[687,19,99,8],[687,20,99,8,"_dependencyMap"],[687,34,99,8],[687,53,99,18,"binding"],[687,60,99,25],[687,61,99,26,"Logger"],[687,67,99,32],[687,68,99,33,"setDefaultLogger"],[687,84,99,49],[687,85,99,50],[687,86,99,51],[687,87,99,52],[687,89,99,54,"_$$_REQUIRE"],[687,100,99,54],[687,101,99,54,"_dependencyMap"],[687,115,99,54],[687,133,99,63,"toBindingLogger"],[687,148,99,78],[687,150,99,80,"loggerCallback"],[687,164,99,94],[687,165,99,95],[687,166,99,96],[688,6,100,4],[689,6,101,4],[690,0,102,0],[691,0,103,0],[692,0,104,0],[693,4,101,4],[694,6,101,4,"key"],[694,9,101,4],[695,6,101,4,"value"],[695,11,101,4],[695,13,105,4],[695,22,105,11,"shutdown"],[695,30,105,19,"shutdown"],[695,31,105,19],[695,33,105,22],[696,8,106,8],[697,8,107,8],[697,13,107,13],[697,17,107,19,"realmRef"],[697,25,107,27],[697,29,107,31,"Realm"],[697,34,107,36],[697,35,107,37,"internals"],[697,44,107,46],[697,46,107,48],[698,10,108,12],[698,14,108,18,"realm"],[698,19,108,23],[698,22,108,26,"realmRef"],[698,30,108,34],[698,31,108,35,"deref"],[698,36,108,40],[698,37,108,41],[698,38,108,42],[699,10,109,12],[699,14,109,16,"realm"],[699,19,109,21],[699,23,109,25],[699,24,109,26,"realm"],[699,29,109,31],[699,30,109,32,"isClosed"],[699,38,109,40],[699,40,109,42],[700,12,110,16,"realm"],[700,17,110,21],[700,18,110,22,"close"],[700,23,110,27],[700,24,110,28],[700,25,110,29],[701,10,111,12],[702,8,112,8],[703,8,113,8,"Realm"],[703,13,113,13],[703,14,113,14,"internals"],[703,23,113,23],[703,24,113,24,"clear"],[703,29,113,29],[703,30,113,30],[703,31,113,31],[704,8,114,8,"_$$_REQUIRE"],[704,19,114,8],[704,20,114,8,"_dependencyMap"],[704,34,114,8],[704,53,114,18,"binding"],[704,60,114,25],[704,61,114,26,"RealmCoordinator"],[704,77,114,42],[704,78,114,43,"clearAllCaches"],[704,92,114,57],[704,93,114,58],[704,94,114,59],[705,8,115,8,"_$$_REQUIRE"],[705,19,115,8],[705,20,115,8,"_dependencyMap"],[705,34,115,8],[705,66,115,31,"ProgressRealmPromise"],[705,86,115,51],[705,87,115,52,"cancelAll"],[705,96,115,61],[705,97,115,62],[705,98,115,63],[706,8,116,8,"_$$_REQUIRE"],[706,19,116,8],[706,20,116,8,"_dependencyMap"],[706,34,116,8],[706,53,116,18,"binding"],[706,60,116,25],[706,61,116,26,"Logger"],[706,67,116,32],[706,68,116,33,"setDefaultLogger"],[706,84,116,49],[706,85,116,50],[706,89,116,54],[706,90,116,55],[707,8,117,8,"_$$_REQUIRE"],[707,19,117,8],[707,20,117,8,"_dependencyMap"],[707,34,117,8],[707,53,117,19,"garbageCollection"],[707,70,117,36],[707,71,117,37,"collect"],[707,78,117,44],[707,79,117,45],[707,80,117,46],[708,6,118,4],[709,6,119,4],[710,0,120,0],[711,0,121,0],[712,0,122,0],[713,0,123,0],[714,4,119,4],[715,6,119,4,"key"],[715,9,119,4],[716,6,119,4,"value"],[716,11,119,4],[716,13,124,4],[716,22,124,11,"clearTestState"],[716,36,124,25,"clearTestState"],[716,37,124,25],[716,39,124,28],[717,8,125,8],[717,9,125,9],[717,10,125,10],[717,12,125,12,"_$$_REQUIRE"],[717,23,125,12],[717,24,125,12,"_dependencyMap"],[717,38,125,12],[717,55,125,21,"assert"],[717,61,125,27],[717,63,125,29,"_$$_REQUIRE"],[717,74,125,29],[717,75,125,29,"_dependencyMap"],[717,89,125,29],[717,106,125,37,"flags"],[717,111,125,42],[717,112,125,43,"ALLOW_CLEAR_TEST_STATE"],[717,134,125,65],[717,136,125,67],[717,202,125,133],[717,203,125,134],[718,8,126,8,"Realm"],[718,13,126,13],[718,14,126,14,"shutdown"],[718,22,126,22],[718,23,126,23],[718,24,126,24],[719,8,127,8],[720,8,128,8],[720,12,128,14,"defaultDirectoryPath"],[720,32,128,34],[720,35,128,37,"_$$_REQUIRE"],[720,46,128,37],[720,47,128,37,"_dependencyMap"],[720,61,128,37],[720,80,128,48,"fs"],[720,82,128,50],[720,83,128,51,"getDefaultDirectoryPath"],[720,106,128,74],[720,107,128,75],[720,108,128,76],[721,8,129,8,"_$$_REQUIRE"],[721,19,129,8],[721,20,129,8,"_dependencyMap"],[721,34,129,8],[721,53,129,19,"fs"],[721,55,129,21],[721,56,129,22,"removeRealmFilesFromDirectory"],[721,85,129,51],[721,86,129,52,"defaultDirectoryPath"],[721,106,129,72],[721,107,129,73],[722,6,130,4],[723,6,131,4],[724,0,132,0],[725,0,133,0],[726,0,134,0],[727,0,135,0],[728,4,131,4],[729,6,131,4,"key"],[729,9,131,4],[730,6,131,4,"value"],[730,11,131,4],[730,13,136,4],[730,22,136,11,"deleteFile"],[730,32,136,21,"deleteFile"],[730,33,136,22,"config"],[730,39,136,28],[730,41,136,30],[731,8,137,8],[731,9,137,9],[731,10,137,10],[731,12,137,12,"_$$_REQUIRE"],[731,23,137,12],[731,24,137,12,"_dependencyMap"],[731,38,137,12],[731,62,137,28,"validateConfiguration"],[731,83,137,49],[731,85,137,51,"config"],[731,91,137,57],[731,92,137,58],[732,8,138,8],[732,12,138,14,"path"],[732,16,138,18],[732,19,138,21,"Realm"],[732,24,138,26],[732,25,138,27,"determinePath"],[732,38,138,40],[732,39,138,41,"config"],[732,45,138,47],[732,46,138,48],[733,8,139,8,"_$$_REQUIRE"],[733,19,139,8],[733,20,139,8,"_dependencyMap"],[733,34,139,8],[733,53,139,19,"fs"],[733,55,139,21],[733,56,139,22,"removeFile"],[733,66,139,32],[733,67,139,33,"path"],[733,71,139,37],[733,72,139,38],[734,8,140,8,"_$$_REQUIRE"],[734,19,140,8],[734,20,140,8,"_dependencyMap"],[734,34,140,8],[734,53,140,19,"fs"],[734,55,140,21],[734,56,140,22,"removeFile"],[734,66,140,32],[734,67,140,33,"path"],[734,71,140,37],[734,74,140,40],[734,81,140,47],[734,82,140,48],[735,8,141,8,"_$$_REQUIRE"],[735,19,141,8],[735,20,141,8,"_dependencyMap"],[735,34,141,8],[735,53,141,19,"fs"],[735,55,141,21],[735,56,141,22,"removeFile"],[735,66,141,32],[735,67,141,33,"path"],[735,71,141,37],[735,74,141,40],[735,87,141,53],[735,88,141,54],[736,8,142,8,"_$$_REQUIRE"],[736,19,142,8],[736,20,142,8,"_dependencyMap"],[736,34,142,8],[736,53,142,19,"fs"],[736,55,142,21],[736,56,142,22,"removeFile"],[736,66,142,32],[736,67,142,33,"path"],[736,71,142,37],[736,74,142,40],[736,81,142,47],[736,82,142,48],[737,8,143,8,"_$$_REQUIRE"],[737,19,143,8],[737,20,143,8,"_dependencyMap"],[737,34,143,8],[737,53,143,19,"fs"],[737,55,143,21],[737,56,143,22,"removeDirectory"],[737,71,143,37],[737,72,143,38,"path"],[737,76,143,42],[737,79,143,45],[737,92,143,58],[737,93,143,59],[738,6,144,4],[739,4,144,5],[740,6,144,5,"key"],[740,9,144,5],[741,6,144,5,"value"],[741,11,144,5],[741,13,145,4],[741,22,145,11,"exists"],[741,28,145,17,"exists"],[741,29,145,17],[741,31,145,28],[742,8,145,28],[742,12,145,18,"arg"],[742,15,145,21],[742,18,145,21,"arguments"],[742,27,145,21],[742,28,145,21,"length"],[742,34,145,21],[742,42,145,21,"arguments"],[742,51,145,21],[742,59,145,21,"undefined"],[742,68,145,21],[742,71,145,21,"arguments"],[742,80,145,21],[742,86,145,24],[742,87,145,25],[742,88,145,26],[743,8,146,8],[743,12,146,14,"config"],[743,18,146,20],[743,21,146,23],[743,28,146,30,"arg"],[743,31,146,33],[743,36,146,38],[743,44,146,46],[743,47,146,49],[744,10,146,51,"path"],[744,14,146,55],[744,16,146,57,"arg"],[745,8,146,61],[745,9,146,62],[745,12,146,65,"arg"],[745,15,146,68],[746,8,147,8],[746,9,147,9],[746,10,147,10],[746,12,147,12,"_$$_REQUIRE"],[746,23,147,12],[746,24,147,12,"_dependencyMap"],[746,38,147,12],[746,62,147,28,"validateConfiguration"],[746,83,147,49],[746,85,147,51,"config"],[746,91,147,57],[746,92,147,58],[747,8,148,8],[747,12,148,14,"path"],[747,16,148,18],[747,19,148,21,"Realm"],[747,24,148,26],[747,25,148,27,"determinePath"],[747,38,148,40],[747,39,148,41,"config"],[747,45,148,47],[747,46,148,48],[748,8,149,8],[748,15,149,15,"_$$_REQUIRE"],[748,26,149,15],[748,27,149,15,"_dependencyMap"],[748,41,149,15],[748,60,149,26,"fs"],[748,62,149,28],[748,63,149,29,"exists"],[748,69,149,35],[748,70,149,36,"path"],[748,74,149,40],[748,75,149,41],[749,6,150,4],[750,4,150,5],[751,6,150,5,"key"],[751,9,150,5],[752,6,150,5,"value"],[752,11,150,5],[752,13,151,4],[752,22,151,11,"open"],[752,26,151,15,"open"],[752,27,151,15],[752,29,151,26],[753,8,151,26],[753,12,151,16,"arg"],[753,15,151,19],[753,18,151,19,"arguments"],[753,27,151,19],[753,28,151,19,"length"],[753,34,151,19],[753,42,151,19,"arguments"],[753,51,151,19],[753,59,151,19,"undefined"],[753,68,151,19],[753,71,151,19,"arguments"],[753,80,151,19],[753,86,151,22],[753,87,151,23],[753,88,151,24],[754,8,152,8],[754,12,152,14,"config"],[754,18,152,20],[754,21,152,23],[754,28,152,30,"arg"],[754,31,152,33],[754,36,152,38],[754,44,152,46],[754,47,152,49],[755,10,152,51,"path"],[755,14,152,55],[755,16,152,57,"arg"],[756,8,152,61],[756,9,152,62],[756,12,152,65,"arg"],[756,15,152,68],[757,8,153,8],[757,15,153,15],[757,20,153,19,"_$$_REQUIRE"],[757,31,153,19],[757,32,153,19,"_dependencyMap"],[757,46,153,19],[757,78,153,42,"ProgressRealmPromise"],[757,98,153,62],[757,100,153,63,"config"],[757,106,153,69],[757,107,153,70],[758,6,154,4],[759,6,155,4],[760,0,156,0],[761,0,157,0],[762,0,158,0],[763,0,159,0],[764,0,160,0],[765,0,161,0],[766,0,162,0],[767,4,155,4],[768,6,155,4,"key"],[768,9,155,4],[769,6,155,4,"value"],[769,11,155,4],[769,13,163,4],[769,22,163,11,"schemaVersion"],[769,35,163,24,"schemaVersion"],[769,36,163,25,"path"],[769,40,163,29],[769,42,163,31,"encryptionKey"],[769,55,163,44],[769,57,163,46],[770,8,164,8],[770,12,164,14,"notFound"],[770,20,164,22],[770,23,164,25],[770,45,164,47],[770,46,164,48],[770,47,164,49],[771,8,165,8],[771,12,165,14,"config"],[771,18,165,20],[771,21,165,23],[772,10,165,25,"path"],[772,14,165,29],[772,16,165,25,"path"],[773,8,165,30],[773,9,165,31],[774,8,166,8],[774,12,166,14,"absolutePath"],[774,24,166,26],[774,27,166,29,"Realm"],[774,32,166,34],[774,33,166,35,"determinePath"],[774,46,166,48],[774,47,166,49,"config"],[774,53,166,55],[774,54,166,56],[775,8,167,8],[775,12,167,14,"schemaVersion"],[775,25,167,27],[775,28,167,30,"_$$_REQUIRE"],[775,39,167,30],[775,40,167,30,"_dependencyMap"],[775,54,167,30],[775,73,167,40,"binding"],[775,80,167,47],[775,81,167,48,"Realm"],[775,86,167,53],[775,87,167,54,"getSchemaVersion"],[775,103,167,70],[775,104,167,71],[776,10,168,12,"path"],[776,14,168,16],[776,16,168,18,"absolutePath"],[776,28,168,30],[777,10,169,12,"encryptionKey"],[777,23,169,25],[777,25,169,27,"Realm"],[777,30,169,32],[777,31,169,33,"determineEncryptionKey"],[777,53,169,55],[777,54,169,56,"encryptionKey"],[777,67,169,69],[778,8,170,8],[778,9,170,9],[778,10,170,10],[779,8,171,8],[780,8,172,8],[780,15,172,15,"notFound"],[780,23,172,23],[780,28,172,28,"schemaVersion"],[780,41,172,41],[780,42,172,42,"toString"],[780,50,172,50],[780,51,172,51],[780,52,172,52],[780,55,172,55],[780,56,172,56],[780,57,172,57],[780,60,172,60,"_$$_REQUIRE"],[780,71,172,60],[780,72,172,60,"_dependencyMap"],[780,86,172,60],[780,105,172,70,"binding"],[780,112,172,77],[780,113,172,78,"Int64"],[780,118,172,83],[780,119,172,84,"intToNum"],[780,127,172,92],[780,128,172,93,"schemaVersion"],[780,141,172,106],[780,142,172,107],[781,6,173,4],[782,6,174,4],[783,0,175,0],[784,0,176,0],[785,0,177,0],[786,0,178,0],[787,0,179,0],[788,0,180,0],[789,4,174,4],[790,6,174,4,"key"],[790,9,174,4],[791,6,174,4,"value"],[791,11,174,4],[791,13,181,4],[791,22,181,11,"createTemplateObject"],[791,42,181,31,"createTemplateObject"],[791,43,181,32,"objectSchema"],[791,55,181,44],[791,57,181,46],[792,8,182,8],[792,9,182,9],[792,10,182,10],[792,12,182,12,"_$$_REQUIRE"],[792,23,182,12],[792,24,182,12,"_dependencyMap"],[792,38,182,12],[792,56,182,21,"validateObjectSchema"],[792,76,182,41],[792,78,182,43,"objectSchema"],[792,90,182,55],[792,91,182,56],[793,8,183,8],[793,12,183,14,"normalizedSchema"],[793,28,183,30],[793,31,183,33],[793,32,183,34],[793,33,183,35],[793,35,183,37,"_$$_REQUIRE"],[793,46,183,37],[793,47,183,37,"_dependencyMap"],[793,61,183,37],[793,79,183,46,"normalizeObjectSchema"],[793,100,183,67],[793,102,183,69,"objectSchema"],[793,114,183,81],[793,115,183,82],[794,8,184,8],[794,12,184,14,"result"],[794,18,184,20],[794,21,184,23],[794,22,184,24],[794,23,184,25],[795,8,185,8],[795,17,185,8,"_ref"],[795,21,185,8],[795,25,185,38,"Object"],[795,31,185,44],[795,32,185,45,"entries"],[795,39,185,52],[795,40,185,53,"normalizedSchema"],[795,56,185,69],[795,57,185,70,"properties"],[795,67,185,80],[795,68,185,81],[795,70,185,83],[796,10,185,83],[796,14,185,83,"_ref2"],[796,19,185,83],[796,22,185,83,"_slicedToArray"],[796,36,185,83],[796,37,185,83,"_ref"],[796,41,185,83],[797,10,185,83],[797,14,185,20,"key"],[797,17,185,23],[797,20,185,23,"_ref2"],[797,25,185,23],[798,10,185,23],[798,14,185,25,"property"],[798,22,185,33],[798,25,185,33,"_ref2"],[798,30,185,33],[799,10,186,12],[800,10,187,12],[800,14,187,16],[800,21,187,23,"property"],[800,29,187,31],[800,30,187,32,"default"],[800,37,187,39],[800,42,187,44],[800,53,187,55],[800,55,187,57],[801,12,188,16,"result"],[801,18,188,22],[801,19,188,23,"key"],[801,22,188,26],[801,23,188,27],[801,26,188,30,"property"],[801,34,188,38],[801,35,188,39,"default"],[801,42,188,46],[802,12,189,16],[803,10,190,12],[804,10,191,12],[805,10,192,12],[805,14,192,16,"property"],[805,22,192,24],[805,23,192,25,"optional"],[805,31,192,33],[805,33,192,35],[806,12,193,16],[807,10,194,12],[808,10,195,12],[809,10,196,12],[810,10,197,12],[810,18,197,20,"property"],[810,26,197,28],[810,27,197,29,"type"],[810,31,197,33],[811,12,198,16],[811,17,198,21],[811,23,198,27],[812,14,199,20,"result"],[812,20,199,26],[812,21,199,27,"key"],[812,24,199,30],[812,25,199,31],[812,28,199,34],[812,33,199,39],[813,14,200,20],[814,12,201,16],[814,17,201,21],[814,22,201,26],[815,14,202,20,"result"],[815,20,202,26],[815,21,202,27,"key"],[815,24,202,30],[815,25,202,31],[815,28,202,34],[815,29,202,35],[816,14,203,20],[817,12,204,16],[817,17,204,21],[817,24,204,28],[818,14,205,20,"result"],[818,20,205,26],[818,21,205,27,"key"],[818,24,205,30],[818,25,205,31],[818,28,205,34],[818,31,205,37],[819,14,206,20],[820,12,207,16],[820,17,207,21],[820,25,207,29],[821,14,208,20,"result"],[821,20,208,26],[821,21,208,27,"key"],[821,24,208,30],[821,25,208,31],[821,28,208,34],[821,31,208,37],[822,14,209,20],[823,12,210,16],[823,17,210,21],[823,25,210,29],[824,14,211,20,"result"],[824,20,211,26],[824,21,211,27,"key"],[824,24,211,30],[824,25,211,31],[824,28,211,34],[824,30,211,36],[825,14,212,20],[826,12,213,16],[826,17,213,21],[826,23,213,27],[827,14,214,20,"result"],[827,20,214,26],[827,21,214,27,"key"],[827,24,214,30],[827,25,214,31],[827,28,214,34],[827,32,214,38,"ArrayBuffer"],[827,43,214,49],[827,44,214,50],[827,45,214,51],[827,46,214,52],[828,14,215,20],[829,12,216,16],[829,17,216,21],[829,23,216,27],[830,14,217,20,"result"],[830,20,217,26],[830,21,217,27,"key"],[830,24,217,30],[830,25,217,31],[830,28,217,34],[830,32,217,38,"Date"],[830,36,217,42],[830,37,217,43],[830,38,217,44],[830,39,217,45],[831,14,218,20],[832,10,219,12],[833,8,220,8],[834,8,221,8],[834,15,221,15,"result"],[834,21,221,21],[835,6,222,4],[836,6,223,4],[837,0,224,0],[838,0,225,0],[839,0,226,0],[840,0,227,0],[841,0,228,0],[842,0,229,0],[843,0,230,0],[844,0,231,0],[845,0,232,0],[846,0,233,0],[847,0,234,0],[848,0,235,0],[849,0,236,0],[850,0,237,0],[851,0,238,0],[852,0,239,0],[853,0,240,0],[854,0,241,0],[855,0,242,0],[856,0,243,0],[857,0,244,0],[858,0,245,0],[859,0,246,0],[860,4,223,4],[861,6,223,4,"key"],[861,9,223,4],[862,6,223,4,"value"],[862,11,223,4],[862,13,247,4],[862,22,247,11,"copyBundledRealmFiles"],[862,43,247,32,"copyBundledRealmFiles"],[862,44,247,32],[862,46,247,35],[863,8,248,8,"_$$_REQUIRE"],[863,19,248,8],[863,20,248,8,"_dependencyMap"],[863,34,248,8],[863,53,248,19,"fs"],[863,55,248,21],[863,56,248,22,"copyBundledRealmFiles"],[863,77,248,43],[863,78,248,44],[863,79,248,45],[864,6,249,4],[865,6,250,4],[866,0,251,0],[867,0,252,0],[868,4,250,4],[869,6,250,4,"key"],[869,9,250,4],[870,6,250,4,"value"],[870,11,250,4],[870,13,253,4],[870,22,253,11,"normalizePath"],[870,35,253,24,"normalizePath"],[870,36,253,25,"path"],[870,40,253,29],[870,42,253,31],[871,8,254,8],[871,12,254,12],[871,19,254,19,"path"],[871,23,254,23],[871,28,254,28],[871,39,254,39],[871,41,254,41],[872,10,255,12],[872,17,255,19,"Realm"],[872,22,255,24],[872,23,255,25,"defaultPath"],[872,34,255,36],[873,8,256,8],[873,9,256,9],[873,15,257,13],[873,19,257,17,"path"],[873,23,257,21],[873,24,257,22,"length"],[873,30,257,28],[873,35,257,33],[873,36,257,34],[873,38,257,36],[874,10,258,12],[874,16,258,18],[874,20,258,22,"Error"],[874,25,258,27],[874,26,258,28],[874,49,258,51],[874,50,258,52],[875,8,259,8],[875,9,259,9],[875,15,260,13],[875,19,260,17,"_$$_REQUIRE"],[875,30,260,17],[875,31,260,17,"_dependencyMap"],[875,45,260,17],[875,64,260,28,"fs"],[875,66,260,30],[875,67,260,31,"isAbsolutePath"],[875,81,260,45],[875,82,260,46,"path"],[875,86,260,50],[875,87,260,51],[875,89,260,53],[876,10,261,12],[876,17,261,19,"path"],[876,21,261,23],[877,8,262,8],[877,9,262,9],[877,15,263,13],[878,10,264,12],[878,17,264,19,"_$$_REQUIRE"],[878,28,264,19],[878,29,264,19,"_dependencyMap"],[878,43,264,19],[878,62,264,30,"fs"],[878,64,264,32],[878,65,264,33,"joinPaths"],[878,74,264,42],[878,75,264,43,"_$$_REQUIRE"],[878,86,264,43],[878,87,264,43,"_dependencyMap"],[878,101,264,43],[878,120,264,54,"fs"],[878,122,264,56],[878,123,264,57,"getDefaultDirectoryPath"],[878,146,264,80],[878,147,264,81],[878,148,264,82],[878,150,264,84,"path"],[878,154,264,88],[878,155,264,89],[879,8,265,8],[880,6,266,4],[881,6,267,4],[882,0,268,0],[883,0,269,0],[884,0,270,0],[885,4,267,4],[886,6,267,4,"key"],[886,9,267,4],[887,6,267,4,"value"],[887,11,267,4],[887,13,271,4],[887,22,271,11,"determinePath"],[887,35,271,24,"determinePath"],[887,36,271,25,"config"],[887,42,271,31],[887,44,271,33],[888,8,272,8,"_$$_REQUIRE"],[888,19,272,8],[888,20,272,8,"_dependencyMap"],[888,34,272,8],[888,51,272,17,"assert"],[888,57,272,23],[888,58,272,24,"undefined"],[888,67,272,33],[888,68,272,34,"config"],[888,74,272,40],[888,75,272,41,"sync"],[888,79,272,45],[888,81,272,47],[888,94,272,60],[888,95,272,61],[889,8,273,8],[889,15,273,15,"Realm"],[889,20,273,20],[889,21,273,21,"normalizePath"],[889,34,273,34],[889,35,273,35,"config"],[889,41,273,41],[889,42,273,42,"path"],[889,46,273,46],[889,47,273,47],[890,6,274,4],[891,4,274,5],[892,6,274,5,"key"],[892,9,274,5],[893,6,274,5,"value"],[893,11,274,5],[893,13,275,4],[893,22,275,11,"determineEncryptionKey"],[893,44,275,33,"determineEncryptionKey"],[893,45,275,34,"encryptionKey"],[893,58,275,47],[893,60,275,49],[894,8,276,8],[894,12,276,12],[894,19,276,19,"encryptionKey"],[894,32,276,32],[894,37,276,37],[894,48,276,48],[894,50,276,50],[895,10,277,12],[895,17,277,19,"encryptionKey"],[895,30,277,32],[896,8,278,8],[896,9,278,9],[896,15,279,13],[897,10,280,12],[897,17,280,19],[897,18,280,20],[897,19,280,21],[897,21,280,23,"_$$_REQUIRE"],[897,32,280,23],[897,33,280,23,"_dependencyMap"],[897,47,280,23],[897,84,280,38,"toArrayBuffer"],[897,97,280,51],[897,99,280,53,"encryptionKey"],[897,112,280,66],[897,114,280,68],[897,119,280,73],[897,120,280,74],[898,8,281,8],[899,6,282,4],[900,4,282,5],[901,6,282,5,"key"],[901,9,282,5],[902,6,282,5,"value"],[902,11,282,5],[902,13,283,4],[902,22,283,11,"extractRealmSchemaExtras"],[902,46,283,35,"extractRealmSchemaExtras"],[902,47,283,36,"schemas"],[902,54,283,43],[902,56,283,45],[903,8,284,8],[903,12,284,14,"extras"],[903,18,284,20],[903,21,284,23],[903,22,284,24],[903,23,284,25],[904,8,285,8],[904,13,285,13],[904,17,285,19,"schema"],[904,23,285,25],[904,27,285,29,"schemas"],[904,34,285,36],[904,36,285,38],[905,10,286,12,"extras"],[905,16,286,18],[905,17,286,19,"schema"],[905,23,286,25],[905,24,286,26,"name"],[905,28,286,30],[905,29,286,31],[905,32,286,34],[905,36,286,38],[905,37,286,39,"extractObjectSchemaExtras"],[905,62,286,64],[905,63,286,65,"schema"],[905,69,286,71],[905,70,286,72],[906,8,287,8],[907,8,288,8],[907,15,288,15,"extras"],[907,21,288,21],[908,6,289,4],[909,6,290,4],[910,4,290,4],[911,6,290,4,"key"],[911,9,290,4],[912,6,290,4,"value"],[912,11,290,4],[912,13,291,4],[912,22,291,11,"extractObjectSchemaExtras"],[912,47,291,36,"extractObjectSchemaExtras"],[912,48,291,37,"schema"],[912,54,291,43],[912,56,291,45],[913,8,292,8],[913,12,292,14,"defaults"],[913,20,292,22],[913,23,292,25],[913,24,292,26],[913,25,292,27],[914,8,293,8],[914,12,293,14,"presentations"],[914,25,293,27],[914,28,293,30],[914,29,293,31],[914,30,293,32],[915,8,294,8],[915,17,294,8,"_ref3"],[915,22,294,8],[915,26,294,45,"Object"],[915,32,294,51],[915,33,294,52,"entries"],[915,40,294,59],[915,41,294,60,"schema"],[915,47,294,66],[915,48,294,67,"properties"],[915,58,294,77],[915,59,294,78],[915,61,294,80],[916,10,294,80],[916,14,294,80,"_ref4"],[916,19,294,80],[916,22,294,80,"_slicedToArray"],[916,36,294,80],[916,37,294,80,"_ref3"],[916,42,294,80],[917,10,294,80],[917,14,294,20,"name"],[917,18,294,24],[917,21,294,24,"_ref4"],[917,26,294,24],[918,10,294,24],[918,14,294,26,"propertySchema"],[918,28,294,40],[918,31,294,40,"_ref4"],[918,36,294,40],[919,10,295,12,"defaults"],[919,18,295,20],[919,19,295,21,"name"],[919,23,295,25],[919,24,295,26],[919,27,295,29,"propertySchema"],[919,41,295,43],[919,42,295,44,"default"],[919,49,295,51],[920,10,296,12,"presentations"],[920,23,296,25],[920,24,296,26,"name"],[920,28,296,30],[920,29,296,31],[920,32,296,34,"propertySchema"],[920,46,296,48],[920,47,296,49,"presentation"],[920,59,296,61],[921,8,297,8],[922,8,298,8],[922,15,298,15],[923,10,298,17,"constructor"],[923,21,298,28],[923,23,298,30,"schema"],[923,29,298,36],[923,30,298,37,"ctor"],[923,34,298,41],[924,10,298,43,"defaults"],[924,18,298,51],[924,20,298,43,"defaults"],[924,28,298,51],[925,10,298,53,"presentations"],[925,23,298,66],[925,25,298,53,"presentations"],[926,8,298,67],[926,9,298,68],[927,6,299,4],[928,6,300,4],[929,4,300,4],[930,6,300,4,"key"],[930,9,300,4],[931,6,300,4,"value"],[931,11,300,4],[931,13,301,4],[931,22,301,11,"transformConfig"],[931,37,301,26,"transformConfig"],[931,38,301,27,"config"],[931,44,301,33],[931,46,301,35],[932,8,301,35],[932,12,301,35,"_config$migrationOpti"],[932,33,301,35],[932,35,301,35,"_config$migrationOpti2"],[932,57,301,35],[933,8,302,8],[933,12,302,14,"normalizedSchema"],[933,28,302,30],[933,31,302,33,"config"],[933,37,302,39],[933,38,302,40,"schema"],[933,44,302,46],[933,48,302,50],[933,49,302,51],[933,50,302,52],[933,52,302,54,"_$$_REQUIRE"],[933,63,302,54],[933,64,302,54,"_dependencyMap"],[933,78,302,54],[933,96,302,63,"normalizeRealmSchema"],[933,116,302,83],[933,118,302,85,"config"],[933,124,302,91],[933,125,302,92,"schema"],[933,131,302,98],[933,132,302,99],[934,8,303,8],[934,12,303,14,"schemaExtras"],[934,24,303,26],[934,27,303,29,"Realm"],[934,32,303,34],[934,33,303,35,"extractRealmSchemaExtras"],[934,57,303,59],[934,58,303,60,"normalizedSchema"],[934,74,303,76],[934,78,303,80],[934,80,303,82],[934,81,303,83],[935,8,304,8],[935,12,304,14,"path"],[935,16,304,18],[935,19,304,21,"Realm"],[935,24,304,26],[935,25,304,27,"determinePath"],[935,38,304,40],[935,39,304,41,"config"],[935,45,304,47],[935,46,304,48],[936,8,305,8],[936,12,305,16,"fifoFilesFallbackPath"],[936,33,305,37],[936,36,305,67,"config"],[936,42,305,73],[936,43,305,16,"fifoFilesFallbackPath"],[936,64,305,37],[937,10,305,39,"shouldCompact"],[937,23,305,52],[937,26,305,67,"config"],[937,32,305,73],[937,33,305,39,"shouldCompact"],[937,46,305,52],[938,10,305,54,"inMemory"],[938,18,305,62],[938,21,305,67,"config"],[938,27,305,73],[938,28,305,54,"inMemory"],[938,36,305,62],[939,8,306,8],[939,12,306,14,"bindingSchema"],[939,25,306,27],[939,28,306,30,"normalizedSchema"],[939,44,306,46],[939,48,306,50],[939,49,306,51],[939,50,306,52],[939,52,306,54,"_$$_REQUIRE"],[939,63,306,54],[939,64,306,54,"_dependencyMap"],[939,78,306,54],[939,96,306,63,"toBindingSchema"],[939,111,306,78],[939,113,306,80,"normalizedSchema"],[939,129,306,96],[939,130,306,97],[940,8,307,8],[940,15,307,15],[941,10,308,12,"schemaExtras"],[941,22,308,24],[941,24,308,12,"schemaExtras"],[941,36,308,24],[942,10,309,12,"bindingConfig"],[942,23,309,25],[942,25,309,27],[943,12,310,16,"path"],[943,16,310,20],[943,18,310,16,"path"],[943,22,310,20],[944,12,311,16,"cache"],[944,17,311,21],[944,19,311,23],[944,23,311,27],[945,12,312,16,"fifoFilesFallbackPath"],[945,33,312,37],[945,35,312,16,"fifoFilesFallbackPath"],[945,56,312,37],[946,12,313,16,"schema"],[946,18,313,22],[946,20,313,24,"bindingSchema"],[946,33,313,37],[947,12,314,16,"inMemory"],[947,20,314,24],[947,22,314,26,"inMemory"],[947,30,314,34],[947,35,314,39],[947,39,314,43],[948,12,315,16,"schemaMode"],[948,22,315,26],[948,24,315,28,"Realm"],[948,29,315,33],[948,30,315,34,"determineSchemaMode"],[948,49,315,53],[948,50,315,54,"config"],[948,56,315,60],[948,57,315,61],[949,12,316,16,"schemaVersion"],[949,25,316,29],[949,27,316,31,"config"],[949,33,316,37],[949,34,316,38,"schema"],[949,40,316,44],[949,43,317,22,"_$$_REQUIRE"],[949,54,317,22],[949,55,317,22,"_dependencyMap"],[949,69,317,22],[949,88,317,32,"binding"],[949,95,317,39],[949,96,317,40,"Int64"],[949,101,317,45],[949,102,317,46,"numToInt"],[949,110,317,54],[949,111,317,55],[949,118,317,62,"config"],[949,124,317,68],[949,125,317,69,"schemaVersion"],[949,138,317,82],[949,143,317,87],[949,151,317,95],[949,154,317,98,"config"],[949,160,317,104],[949,161,317,105,"schemaVersion"],[949,174,317,118],[949,177,317,121],[949,178,317,122],[949,179,317,123],[949,182,318,22,"undefined"],[949,191,318,31],[950,12,319,16,"migrationFunction"],[950,29,319,33],[950,31,319,35,"config"],[950,37,319,41],[950,38,319,42,"onMigration"],[950,49,319,53],[950,52,319,56,"Realm"],[950,57,319,61],[950,58,319,62,"wrapMigration"],[950,71,319,75],[950,72,319,76,"schemaExtras"],[950,84,319,88],[950,86,319,90,"config"],[950,92,319,96],[950,93,319,97,"onMigration"],[950,104,319,108],[950,105,319,109],[950,108,319,112,"undefined"],[950,117,319,121],[951,12,320,16,"shouldCompactOnLaunchFunction"],[951,41,320,45],[951,43,320,47,"shouldCompact"],[951,56,320,60],[951,59,321,22],[951,69,321,23,"totalBytes"],[951,79,321,33],[951,81,321,35,"usedBytes"],[951,90,321,44],[951,92,321,49],[952,14,322,24],[952,21,322,31,"shouldCompact"],[952,34,322,44],[952,35,322,45,"Number"],[952,41,322,51],[952,42,322,52,"totalBytes"],[952,52,322,62],[952,53,322,63],[952,55,322,65,"Number"],[952,61,322,71],[952,62,322,72,"usedBytes"],[952,71,322,81],[952,72,322,82],[952,73,322,83],[953,12,323,20],[953,13,323,21],[953,16,324,22,"undefined"],[953,25,324,31],[954,12,325,16,"disableFormatUpgrade"],[954,32,325,36],[954,34,325,38,"config"],[954,40,325,44],[954,41,325,45,"disableFormatUpgrade"],[954,61,325,65],[955,12,326,16,"encryptionKey"],[955,25,326,29],[955,27,326,31,"Realm"],[955,32,326,36],[955,33,326,37,"determineEncryptionKey"],[955,55,326,59],[955,56,326,60,"config"],[955,62,326,66],[955,63,326,67,"encryptionKey"],[955,76,326,80],[955,77,326,81],[956,12,327,16,"automaticallyHandleBacklinksInMigrations"],[956,52,327,56],[956,55,327,56,"_config$migrationOpti"],[956,76,327,56],[956,80,327,56,"_config$migrationOpti2"],[956,102,327,56],[956,105,327,58,"config"],[956,111,327,64],[956,112,327,65,"migrationOptions"],[956,128,327,81],[956,149,327,58,"_config$migrationOpti2"],[956,171,327,58],[956,172,327,83,"resolveEmbeddedConstraints"],[956,198,327,109],[956,210,327,109,"_config$migrationOpti"],[956,231,327,109],[956,234,327,113],[957,10,328,12],[958,8,329,8],[958,9,329,9],[959,6,330,4],[960,4,330,5],[961,6,330,5,"key"],[961,9,330,5],[962,6,330,5,"value"],[962,11,330,5],[962,13,331,4],[962,22,331,11,"determineSchemaMode"],[962,41,331,30,"determineSchemaMode"],[962,42,331,31,"config"],[962,48,331,37],[962,50,331,39],[963,8,332,8],[963,12,332,16,"readOnly"],[963,20,332,24],[963,23,332,78,"config"],[963,29,332,84],[963,30,332,16,"readOnly"],[963,38,332,24],[964,10,332,26,"deleteRealmIfMigrationNeeded"],[964,38,332,54],[964,41,332,78,"config"],[964,47,332,84],[964,48,332,26,"deleteRealmIfMigrationNeeded"],[964,76,332,54],[965,10,332,56,"onMigration"],[965,21,332,67],[965,24,332,78,"config"],[965,30,332,84],[965,31,332,56,"onMigration"],[965,42,332,67],[966,10,332,69,"sync"],[966,14,332,73],[966,17,332,78,"config"],[966,23,332,84],[966,24,332,69,"sync"],[966,28,332,73],[967,8,333,8],[967,9,333,9],[967,10,333,10],[967,12,333,12,"_$$_REQUIRE"],[967,23,333,12],[967,24,333,12,"_dependencyMap"],[967,38,333,12],[967,55,333,21,"assert"],[967,61,333,27],[967,63,333,29],[967,64,333,30,"readOnly"],[967,72,333,38],[967,76,333,42],[967,77,333,43,"deleteRealmIfMigrationNeeded"],[967,105,333,71],[967,107,333,73],[967,174,333,140],[967,175,333,141],[968,8,334,8],[968,9,334,9],[968,10,334,10],[968,12,334,12,"_$$_REQUIRE"],[968,23,334,12],[968,24,334,12,"_dependencyMap"],[968,38,334,12],[968,55,334,21,"assert"],[968,61,334,27],[968,63,334,29],[968,64,334,30,"onMigration"],[968,75,334,41],[968,79,334,45],[968,80,334,46,"deleteRealmIfMigrationNeeded"],[968,108,334,74],[968,110,334,76],[968,180,334,146],[968,181,334,147],[969,8,335,8],[969,12,335,12,"readOnly"],[969,20,335,20],[969,22,335,22],[970,10,336,12],[970,17,336,19],[970,18,336,20],[970,19,336,21],[971,8,337,8],[971,9,337,9],[971,15,338,13],[971,19,338,17,"deleteRealmIfMigrationNeeded"],[971,47,338,45],[971,49,338,47],[972,10,339,12],[972,17,339,19],[972,18,339,20],[972,19,339,21],[973,8,340,8],[973,9,340,9],[973,15,341,13],[973,19,341,17,"sync"],[973,23,341,21],[973,25,341,23],[974,10,342,12],[974,17,342,19],[974,18,342,20],[974,19,342,21],[975,8,343,8],[975,9,343,9],[975,15,344,13],[976,10,345,12],[976,17,345,19,"undefined"],[976,26,345,28],[977,8,346,8],[978,6,347,4],[979,4,347,5],[980,6,347,5,"key"],[980,9,347,5],[981,6,347,5,"value"],[981,11,347,5],[981,13,348,4],[981,22,348,11,"wrapMigration"],[981,35,348,24,"wrapMigration"],[981,36,348,25,"schemaExtras"],[981,48,348,37],[981,50,348,39,"onMigration"],[981,61,348,50],[981,63,348,52],[982,8,349,8],[982,15,349,15],[982,25,349,16,"oldRealmInternal"],[982,41,349,32],[982,43,349,34,"newRealmInternal"],[982,59,349,50],[982,61,349,55],[983,10,350,12],[983,14,350,16],[984,12,351,16],[984,16,351,22,"oldRealm"],[984,24,351,30],[984,27,351,33],[984,31,351,37,"Realm"],[984,36,351,42],[984,37,351,43],[984,41,351,47],[984,43,351,49],[985,14,351,51,"internal"],[985,22,351,59],[985,24,351,61,"oldRealmInternal"],[985,40,351,77],[986,14,351,79,"schemaExtras"],[986,26,351,91],[986,28,351,79,"schemaExtras"],[987,12,351,92],[987,13,351,93],[987,14,351,94],[988,12,352,16],[988,16,352,22,"newRealm"],[988,24,352,30],[988,27,352,33],[988,31,352,37,"Realm"],[988,36,352,42],[988,37,352,43],[988,41,352,47],[988,43,352,49],[989,14,352,51,"internal"],[989,22,352,59],[989,24,352,61,"newRealmInternal"],[989,40,352,77],[990,14,352,79,"schemaExtras"],[990,26,352,91],[990,28,352,79,"schemaExtras"],[991,12,352,92],[991,13,352,93],[991,14,352,94],[992,12,353,16,"onMigration"],[992,23,353,27],[992,24,353,28,"oldRealm"],[992,32,353,36],[992,34,353,38,"newRealm"],[992,42,353,46],[992,43,353,47],[993,10,354,12],[993,11,354,13],[993,20,355,20],[994,12,356,16,"oldRealmInternal"],[994,28,356,32],[994,29,356,33,"close"],[994,34,356,38],[994,35,356,39],[994,36,356,40],[995,12,357,16,"oldRealmInternal"],[995,28,357,32],[995,29,357,33,"$resetSharedPtr"],[995,44,357,48],[995,45,357,49],[995,46,357,50],[996,12,358,16,"newRealmInternal"],[996,28,358,32],[996,29,358,33,"$resetSharedPtr"],[996,44,358,48],[996,45,358,49],[996,46,358,50],[997,10,359,12],[998,8,360,8],[998,9,360,9],[999,6,361,4],[1000,6,362,4],[1001,0,363,0],[1002,0,364,0],[1003,0,365,0],[1004,4,362,4],[1005,2,362,4],[1006,2,362,4,"_Realm"],[1006,8,362,4],[1006,11,80,6,"Realm"],[1006,16,80,11],[1007,2,80,6,"Realm"],[1007,7,80,11],[1007,8,81,11,"defaultPath"],[1007,19,81,22],[1007,22,81,25,"Realm"],[1007,28,81,30],[1007,29,81,31,"normalizePath"],[1007,42,81,44],[1007,43,81,45],[1007,58,81,60],[1007,59,81,61],[1008,2,80,6,"Realm"],[1008,7,80,11],[1008,8,82,11,"internals"],[1008,17,82,20],[1008,20,82,23],[1008,24,82,27,"Set"],[1008,27,82,30],[1008,28,82,31],[1008,29,82,32],[1009,2,896,0,"exports"],[1009,9,896,7],[1009,10,896,8,"Realm"],[1009,15,896,13],[1009,18,896,16,"Realm"],[1009,23,896,21],[1010,2,897,0],[1010,3,897,1],[1010,4,897,2],[1010,6,897,4,"_$$_REQUIRE"],[1010,17,897,4],[1010,18,897,4,"_dependencyMap"],[1010,32,897,4],[1010,52,897,15,"injectIndirect"],[1010,66,897,29],[1010,68,897,31],[1010,75,897,38],[1010,77,897,40,"Realm"],[1010,82,897,45],[1010,83,897,46],[1011,2,898,0],[1012,0,899,0],[1013,0,900,0],[1014,0,901,0],[1015,2,902,0],[1015,11,902,9,"isAsymmetric"],[1015,23,902,21,"isAsymmetric"],[1015,24,902,22,"objectSchema"],[1015,36,902,34],[1015,38,902,36],[1016,4,903,4],[1016,11,903,11,"objectSchema"],[1016,23,903,23],[1016,24,903,24,"tableType"],[1016,33,903,33],[1016,38,903,38],[1016,39,903,39],[1016,40,903,40],[1017,2,904,0],[1018,2,905,0],[1019,0,906,0],[1020,0,907,0],[1021,0,908,0],[1022,2,909,0],[1022,11,909,9,"isEmbedded"],[1022,21,909,19,"isEmbedded"],[1022,22,909,20,"objectSchema"],[1022,34,909,32],[1022,36,909,34],[1023,4,910,4],[1023,11,910,11,"objectSchema"],[1023,23,910,23],[1023,24,910,24,"tableType"],[1023,33,910,33],[1023,38,910,38],[1023,39,910,39],[1023,40,910,40],[1024,2,911,0],[1025,2,912,0],[1026,2,913,0],[1027,2,914,0],[1028,2,915,0],[1028,6,915,6,"ns"],[1028,8,915,8],[1028,11,915,11,"__importStar"],[1028,23,915,23],[1028,24,915,24,"require"],[1028,35,915,31],[1028,36,915,31,"_dependencyMap"],[1028,50,915,31],[1028,69,915,45],[1028,70,915,46],[1028,71,915,47],[1029,2,916,0],[1030,2,917,0],[1030,6,917,4,"RealmItself"],[1030,17,917,15],[1030,20,917,18,"Realm"],[1030,25,917,23],[1031,2,918,0],[1032,2,919,0],[1032,3,919,1],[1032,13,919,11,"Realm"],[1032,18,919,16],[1032,20,919,18],[1033,4,920,4,"Realm"],[1033,9,920,9],[1033,10,920,10,"Realm"],[1033,15,920,15],[1033,18,920,18,"RealmItself"],[1033,29,920,29],[1034,4,921,4,"Realm"],[1034,9,921,9],[1034,10,921,10,"flags"],[1034,15,921,15],[1034,18,921,18,"ns"],[1034,20,921,20],[1034,21,921,21,"flags"],[1034,26,921,26],[1035,4,922,4,"Realm"],[1035,9,922,9],[1035,10,922,10,"Object"],[1035,16,922,16],[1035,19,922,19,"ns"],[1035,21,922,21],[1035,22,922,22,"RealmObject"],[1035,33,922,33],[1036,4,923,4,"Realm"],[1036,9,923,9],[1036,10,923,10,"BSON"],[1036,14,923,14],[1036,17,923,17,"ns"],[1036,19,923,19],[1036,20,923,20,"BSON"],[1036,24,923,24],[1037,4,924,4,"Realm"],[1037,9,924,9],[1037,10,924,10,"Types"],[1037,15,924,15],[1037,18,924,18,"ns"],[1037,20,924,20],[1037,21,924,21,"Types"],[1037,26,924,26],[1038,4,925,4,"Realm"],[1038,9,925,9],[1038,10,925,10,"index"],[1038,15,925,15],[1038,18,925,18,"ns"],[1038,20,925,20],[1038,21,925,21,"index"],[1038,26,925,26],[1039,4,926,4,"Realm"],[1039,9,926,9],[1039,10,926,10,"mapTo"],[1039,15,926,15],[1039,18,926,18,"ns"],[1039,20,926,20],[1039,21,926,21,"mapTo"],[1039,26,926,26],[1040,4,927,4,"Realm"],[1040,9,927,9],[1040,10,927,10,"kmToRadians"],[1040,21,927,21],[1040,24,927,24,"ns"],[1040,26,927,26],[1040,27,927,27,"kmToRadians"],[1040,38,927,38],[1041,4,928,4,"Realm"],[1041,9,928,9],[1041,10,928,10,"miToRadians"],[1041,21,928,21],[1041,24,928,24,"ns"],[1041,26,928,26],[1041,27,928,27,"miToRadians"],[1041,38,928,38],[1042,4,929,4,"Realm"],[1042,9,929,9],[1042,10,929,10,"AssertionError"],[1042,24,929,24],[1042,27,929,27,"ns"],[1042,29,929,29],[1042,30,929,30,"AssertionError"],[1042,44,929,44],[1043,4,930,4,"Realm"],[1043,9,930,9],[1043,10,930,10,"Collection"],[1043,20,930,20],[1043,23,930,23,"ns"],[1043,25,930,25],[1043,26,930,26,"Collection"],[1043,36,930,36],[1044,4,931,4,"Realm"],[1044,9,931,9],[1044,10,931,10,"Counter"],[1044,17,931,17],[1044,20,931,20,"ns"],[1044,22,931,22],[1044,23,931,23,"Counter"],[1044,30,931,30],[1045,4,932,4,"Realm"],[1045,9,932,9],[1045,10,932,10,"Dictionary"],[1045,20,932,20],[1045,23,932,23,"ns"],[1045,25,932,25],[1045,26,932,26,"Dictionary"],[1045,36,932,36],[1046,4,933,4,"Realm"],[1046,9,933,9],[1046,10,933,10,"List"],[1046,14,933,14],[1046,17,933,17,"ns"],[1046,19,933,19],[1046,20,933,20,"List"],[1046,24,933,24],[1047,4,934,4,"Realm"],[1047,9,934,9],[1047,10,934,10,"NumericLogLevel"],[1047,25,934,25],[1047,28,934,28,"ns"],[1047,30,934,30],[1047,31,934,31,"NumericLogLevel"],[1047,46,934,46],[1048,4,935,4,"Realm"],[1048,9,935,9],[1048,10,935,10,"OrderedCollection"],[1048,27,935,27],[1048,30,935,30,"ns"],[1048,32,935,32],[1048,33,935,33,"OrderedCollection"],[1048,50,935,50],[1049,4,936,4,"Realm"],[1049,9,936,9],[1049,10,936,10,"ProgressRealmPromise"],[1049,30,936,30],[1049,33,936,33,"ns"],[1049,35,936,35],[1049,36,936,36,"ProgressRealmPromise"],[1049,56,936,56],[1050,4,937,4,"Realm"],[1050,9,937,9],[1050,10,937,10,"PropertySchemaParseError"],[1050,34,937,34],[1050,37,937,37,"ns"],[1050,39,937,39],[1050,40,937,40,"PropertySchemaParseError"],[1050,64,937,64],[1051,4,938,4,"Realm"],[1051,9,938,9],[1051,10,938,10,"RealmEvent"],[1051,20,938,20],[1051,23,938,23,"ns"],[1051,25,938,25],[1051,26,938,26,"RealmEvent"],[1051,36,938,36],[1052,4,939,4,"Realm"],[1052,9,939,9],[1052,10,939,10,"Results"],[1052,17,939,17],[1052,20,939,20,"ns"],[1052,22,939,22],[1052,23,939,23,"Results"],[1052,30,939,30],[1053,4,940,4,"Realm"],[1053,9,940,9],[1053,10,940,10,"SchemaParseError"],[1053,26,940,26],[1053,29,940,29,"ns"],[1053,31,940,31],[1053,32,940,32,"SchemaParseError"],[1053,48,940,48],[1054,4,941,4,"Realm"],[1054,9,941,9],[1054,10,941,10,"Set"],[1054,13,941,13],[1054,16,941,16,"ns"],[1054,18,941,18],[1054,19,941,19,"RealmSet"],[1054,27,941,27],[1055,4,942,4,"Realm"],[1055,9,942,9],[1055,10,942,10,"TypeAssertionError"],[1055,28,942,28],[1055,31,942,31,"ns"],[1055,33,942,33],[1055,34,942,34,"TypeAssertionError"],[1055,52,942,52],[1056,4,943,4,"Realm"],[1056,9,943,9],[1056,10,943,10,"UpdateMode"],[1056,20,943,20],[1056,23,943,23,"ns"],[1056,25,943,25],[1056,26,943,26,"UpdateMode"],[1056,36,943,36],[1057,2,944,0],[1057,3,944,1],[1057,5,944,3,"Realm"],[1057,10,944,8],[1057,13,944,11,"exports"],[1057,20,944,18],[1057,21,944,19,"Realm"],[1057,26,944,24],[1057,31,944,29,"exports"],[1057,38,944,36],[1057,39,944,37,"Realm"],[1057,44,944,42],[1057,47,944,45],[1057,48,944,46],[1057,49,944,47],[1057,50,944,48],[1057,51,944,49],[1058,2,945,0,"exports"],[1058,9,945,7],[1058,10,945,8,"Realm"],[1058,15,945,13],[1058,18,945,16,"Realm"],[1058,23,945,21],[1059,2,946,0],[1060,2,947,0,"Realm"],[1060,7,947,5],[1060,8,947,6,"setLogger"],[1060,17,947,15],[1060,18,947,16,"_$$_REQUIRE"],[1060,29,947,16],[1060,30,947,16,"_dependencyMap"],[1060,44,947,16],[1060,62,947,25,"defaultLogger"],[1060,75,947,38],[1060,76,947,39],[1061,2,948,0,"Realm"],[1061,7,948,5],[1061,8,948,6,"setLogLevel"],[1061,19,948,17],[1061,20,948,18,"_$$_REQUIRE"],[1061,31,948,18],[1061,32,948,18,"_dependencyMap"],[1061,46,948,18],[1061,64,948,27,"defaultLoggerLevel"],[1061,82,948,45],[1061,83,948,46],[1062,0,948,47],[1062,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","assertRealmEvent","Realm","setLogLevel","setLogger","shutdown","clearTestState","deleteFile","exists","open","schemaVersion","createTemplateObject","copyBundledRealmFiles","normalizePath","determinePath","determineEncryptionKey","extractRealmSchemaExtras","extractObjectSchemaExtras","transformConfig","determineSchemaMode","wrapMigration","constructor","binding_1.binding.Helpers.setBindingContext$argument_1.didChange","binding_1.binding.Helpers.setBindingContext$argument_1.schemaDidChange","binding_1.binding.Helpers.setBindingContext$argument_1.beforeNotify","get__isEmpty","get__path","get__isReadOnly","get__isInMemory","get__schema","get__schemaVersion","get__isInTransaction","get__isInMigration","get__isClosed","close","create","_delete","deleteModel","internal.schema.filter$argument_0","deleteAll","objectForPrimaryKey","_objectForObjectKey","objects","typeHelpers.fromBinding","typeHelpers.toBinding","addListener","removeListener","removeAllListeners","write","beginTransaction","commitTransaction","cancelTransaction","compact","writeCopyTo","_updateSchema","getClassHelpers","isAsymmetric","isEmbedded"],"mappings":"AAA;0ECkB;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;kDCC;CDM;AG8B;CHK;AII;ICY;KDI;IEC;KFG;IGK;KHa;IIM;KJM;IKM;KLQ;IMC;KNK;IOC;KPG;IQS;KRU;ISQ;KTyC;IUyB;KVE;IWI;KXa;IYK;KZG;IaC;KbO;IcC;KdM;IeE;KfQ;IgBE;sBnBoB;qBmBE;KhBO;IiBC;KjBgB;IkBC;erBC;SqBW;KlBC;ImBa;2BCc;iBDG;iCEC;iBFI;8BGC;iBHG;KnB6B;IuBO;KvBE;IwBO;KxBE;IyBO;KzBE;I0BM;K1BE;I2BO;K3Bc;I4BO;K5BE;I6BO;K7BG;I8BO;K9BG;I+BO;K/BG;IgCM;KhCE;IiCC;KjC0B;IkCO;KlC8B;ImCM;0DCI,4CD;KnCG;IqCI;KrCM;IsCC;KtC8B;IuCC;KvCwB;IwCC;YCY;aDE;YEC;aFG;KxCI;I2CS;K3Ce;I4CO;K5CgB;I6CM;K7CuB;I8CY;K9CY;I+CqB;K/CE;IgDK;KhDE;IiDK;KjDE;IkDiB;KlDG;ImDY;KnDK;IoDM;KpDY;IqDE;KrDE;CJC;A0DO;C1DE;A2DK;C3DE;CCQ;CDyB"}},"type":"js/module"}]}