{"dependencies":[{"name":"../tokenizer/const","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":11,"index":222},"end":{"line":6,"column":45,"index":256}},{"start":{"line":6,"column":11,"index":222},"end":{"line":6,"column":45,"index":256}},{"start":{"line":6,"column":11,"index":222},"end":{"line":6,"column":45,"index":256}},{"start":{"line":6,"column":11,"index":222},"end":{"line":6,"column":45,"index":256}},{"start":{"line":6,"column":11,"index":222},"end":{"line":6,"column":45,"index":256}},{"start":{"line":6,"column":11,"index":222},"end":{"line":6,"column":45,"index":256}},{"start":{"line":6,"column":11,"index":222},"end":{"line":6,"column":45,"index":256}},{"start":{"line":6,"column":11,"index":222},"end":{"line":6,"column":45,"index":256}},{"start":{"line":6,"column":11,"index":222},"end":{"line":6,"column":45,"index":256}},{"start":{"line":6,"column":11,"index":222},"end":{"line":6,"column":45,"index":256}},{"start":{"line":6,"column":11,"index":222},"end":{"line":6,"column":45,"index":256}},{"start":{"line":6,"column":11,"index":222},"end":{"line":6,"column":45,"index":256}},{"start":{"line":6,"column":11,"index":222},"end":{"line":6,"column":45,"index":256}},{"start":{"line":6,"column":11,"index":222},"end":{"line":6,"column":45,"index":256}}],"key":"6b/ARb+ibumpbmC11sZY9D+4SmM="}},{"name":"./match-graph","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":15,"index":142},"end":{"line":4,"column":34,"index":161}},{"start":{"line":5,"column":21,"index":184},"end":{"line":5,"column":46,"index":209}},{"start":{"line":4,"column":15,"index":142},"end":{"line":4,"column":34,"index":161}},{"start":{"line":3,"column":12,"index":109},"end":{"line":3,"column":28,"index":125}},{"start":{"line":4,"column":15,"index":142},"end":{"line":4,"column":34,"index":161}},{"start":{"line":3,"column":12,"index":109},"end":{"line":3,"column":28,"index":125}},{"start":{"line":4,"column":15,"index":142},"end":{"line":4,"column":34,"index":161}},{"start":{"line":3,"column":12,"index":109},"end":{"line":3,"column":28,"index":125}},{"start":{"line":3,"column":12,"index":109},"end":{"line":3,"column":28,"index":125}},{"start":{"line":4,"column":15,"index":142},"end":{"line":4,"column":34,"index":161}},{"start":{"line":3,"column":12,"index":109},"end":{"line":3,"column":28,"index":125}},{"start":{"line":4,"column":15,"index":142},"end":{"line":4,"column":34,"index":161}},{"start":{"line":4,"column":15,"index":142},"end":{"line":4,"column":34,"index":161}},{"start":{"line":3,"column":12,"index":109},"end":{"line":3,"column":28,"index":125}},{"start":{"line":4,"column":15,"index":142},"end":{"line":4,"column":34,"index":161}},{"start":{"line":3,"column":12,"index":109},"end":{"line":3,"column":28,"index":125}},{"start":{"line":4,"column":15,"index":142},"end":{"line":4,"column":34,"index":161}},{"start":{"line":3,"column":12,"index":109},"end":{"line":3,"column":28,"index":125}},{"start":{"line":4,"column":15,"index":142},"end":{"line":4,"column":34,"index":161}},{"start":{"line":4,"column":15,"index":142},"end":{"line":4,"column":34,"index":161}},{"start":{"line":4,"column":15,"index":142},"end":{"line":4,"column":34,"index":161}},{"start":{"line":3,"column":12,"index":109},"end":{"line":3,"column":28,"index":125}},{"start":{"line":3,"column":12,"index":109},"end":{"line":3,"column":28,"index":125}},{"start":{"line":4,"column":15,"index":142},"end":{"line":4,"column":34,"index":161}},{"start":{"line":3,"column":12,"index":109},"end":{"line":3,"column":28,"index":125}},{"start":{"line":4,"column":15,"index":142},"end":{"line":4,"column":34,"index":161}}],"key":"FCZvlNKlTD5d7PCxUNzj1QfxgE4="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  var STUB = 0;\n  var TOKEN = 1;\n  var OPEN_SYNTAX = 2;\n  var CLOSE_SYNTAX = 3;\n  var EXIT_REASON_MATCH = 'Match';\n  var EXIT_REASON_MISMATCH = 'Mismatch';\n  var EXIT_REASON_ITERATION_LIMIT = 'Maximum iteration number exceeded (please fill an issue on https://github.com/csstree/csstree/issues)';\n  var ITERATION_LIMIT = 15000;\n  var totalIterationCount = 0;\n  function reverseList(list) {\n    var prev = null;\n    var next = null;\n    var item = list;\n    while (item !== null) {\n      next = item.prev;\n      item.prev = prev;\n      prev = item;\n      item = next;\n    }\n    return prev;\n  }\n  function areStringsEqualCaseInsensitive(testStr, referenceStr) {\n    if (testStr.length !== referenceStr.length) {\n      return false;\n    }\n    for (var i = 0; i < testStr.length; i++) {\n      var testCode = testStr.charCodeAt(i);\n      var referenceCode = referenceStr.charCodeAt(i);\n\n      // testCode.toLowerCase() for U+0041 LATIN CAPITAL LETTER A (A) .. U+005A LATIN CAPITAL LETTER Z (Z).\n      if (testCode >= 0x0041 && testCode <= 0x005A) {\n        testCode = testCode | 32;\n      }\n      if (testCode !== referenceCode) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function isContextEdgeDelim(token) {\n    if (token.type !== _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.Delim) {\n      return false;\n    }\n\n    // Fix matching for unicode-range: U+30??, U+FF00-FF9F\n    // Probably we need to check out previous match instead\n    return token.value !== '?';\n  }\n  function isCommaContextStart(token) {\n    if (token === null) {\n      return true;\n    }\n    return token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.Comma || token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.Function || token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.LeftParenthesis || token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.LeftSquareBracket || token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.LeftCurlyBracket || isContextEdgeDelim(token);\n  }\n  function isCommaContextEnd(token) {\n    if (token === null) {\n      return true;\n    }\n    return token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.RightParenthesis || token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.RightSquareBracket || token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.RightCurlyBracket || token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.Delim;\n  }\n  function internalMatch(tokens, state, syntaxes) {\n    function moveToNextToken() {\n      do {\n        tokenIndex++;\n        token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;\n      } while (token !== null && (token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.WhiteSpace || token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.Comment));\n    }\n    function getNextToken(offset) {\n      var nextIndex = tokenIndex + offset;\n      return nextIndex < tokens.length ? tokens[nextIndex] : null;\n    }\n    function stateSnapshotFromSyntax(nextState, prev) {\n      return {\n        nextState: nextState,\n        matchStack: matchStack,\n        syntaxStack: syntaxStack,\n        thenStack: thenStack,\n        tokenIndex: tokenIndex,\n        prev: prev\n      };\n    }\n    function pushThenStack(nextState) {\n      thenStack = {\n        nextState: nextState,\n        matchStack: matchStack,\n        syntaxStack: syntaxStack,\n        prev: thenStack\n      };\n    }\n    function pushElseStack(nextState) {\n      elseStack = stateSnapshotFromSyntax(nextState, elseStack);\n    }\n    function addTokenToMatch() {\n      matchStack = {\n        type: TOKEN,\n        syntax: state.syntax,\n        token: token,\n        prev: matchStack\n      };\n      moveToNextToken();\n      syntaxStash = null;\n      if (tokenIndex > longestMatch) {\n        longestMatch = tokenIndex;\n      }\n    }\n    function openSyntax() {\n      syntaxStack = {\n        syntax: state.syntax,\n        opts: state.syntax.opts || syntaxStack !== null && syntaxStack.opts || null,\n        prev: syntaxStack\n      };\n      matchStack = {\n        type: OPEN_SYNTAX,\n        syntax: state.syntax,\n        token: matchStack.token,\n        prev: matchStack\n      };\n    }\n    function closeSyntax() {\n      if (matchStack.type === OPEN_SYNTAX) {\n        matchStack = matchStack.prev;\n      } else {\n        matchStack = {\n          type: CLOSE_SYNTAX,\n          syntax: syntaxStack.syntax,\n          token: matchStack.token,\n          prev: matchStack\n        };\n      }\n      syntaxStack = syntaxStack.prev;\n    }\n    var syntaxStack = null;\n    var thenStack = null;\n    var elseStack = null;\n\n    // null – stashing allowed, nothing stashed\n    // false – stashing disabled, nothing stashed\n    // anithing else – fail stashable syntaxes, some syntax stashed\n    var syntaxStash = null;\n    var iterationCount = 0; // count iterations and prevent infinite loop\n    var exitReason = null;\n    var token = null;\n    var tokenIndex = -1;\n    var longestMatch = 0;\n    var matchStack = {\n      type: STUB,\n      syntax: null,\n      token: null,\n      prev: null\n    };\n    moveToNextToken();\n    while (exitReason === null && ++iterationCount < ITERATION_LIMIT) {\n      // function mapList(list, fn) {\n      //     var result = [];\n      //     while (list) {\n      //         result.unshift(fn(list));\n      //         list = list.prev;\n      //     }\n      //     return result;\n      // }\n      // console.log('--\\n',\n      //     '#' + iterationCount,\n      //     require('util').inspect({\n      //         match: mapList(matchStack, x => x.type === TOKEN ? x.token && x.token.value : x.syntax ? ({ [OPEN_SYNTAX]: '<', [CLOSE_SYNTAX]: '</' }[x.type] || x.type) + '!' + x.syntax.name : null),\n      //         token: token && token.value,\n      //         tokenIndex,\n      //         syntax: syntax.type + (syntax.id ? ' #' + syntax.id : '')\n      //     }, { depth: null })\n      // );\n      switch (state.type) {\n        case 'Match':\n          if (thenStack === null) {\n            // turn to MISMATCH when some tokens left unmatched\n            if (token !== null) {\n              // doesn't mismatch if just one token left and it's an IE hack\n              if (tokenIndex !== tokens.length - 1 || token.value !== '\\\\0' && token.value !== '\\\\9') {\n                state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n                break;\n              }\n            }\n\n            // break the main loop, return a result - MATCH\n            exitReason = EXIT_REASON_MATCH;\n            break;\n          }\n\n          // go to next syntax (`then` branch)\n          state = thenStack.nextState;\n\n          // check match is not empty\n          if (state === _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").DISALLOW_EMPTY) {\n            if (thenStack.matchStack === matchStack) {\n              state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n              break;\n            } else {\n              state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n            }\n          }\n\n          // close syntax if needed\n          while (thenStack.syntaxStack !== syntaxStack) {\n            closeSyntax();\n          }\n\n          // pop stack\n          thenStack = thenStack.prev;\n          break;\n        case 'Mismatch':\n          // when some syntax is stashed\n          if (syntaxStash !== null && syntaxStash !== false) {\n            // there is no else branches or a branch reduce match stack\n            if (elseStack === null || tokenIndex > elseStack.tokenIndex) {\n              // restore state from the stash\n              elseStack = syntaxStash;\n              syntaxStash = false; // disable stashing\n            }\n          } else if (elseStack === null) {\n            // no else branches -> break the main loop\n            // return a result - MISMATCH\n            exitReason = EXIT_REASON_MISMATCH;\n            break;\n          }\n\n          // go to next syntax (`else` branch)\n          state = elseStack.nextState;\n\n          // restore all the rest stack states\n          thenStack = elseStack.thenStack;\n          syntaxStack = elseStack.syntaxStack;\n          matchStack = elseStack.matchStack;\n          tokenIndex = elseStack.tokenIndex;\n          token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;\n\n          // pop stack\n          elseStack = elseStack.prev;\n          break;\n        case 'MatchGraph':\n          state = state.match;\n          break;\n        case 'If':\n          // IMPORTANT: else stack push must go first,\n          // since it stores the state of thenStack before changes\n          if (state.else !== _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH) {\n            pushElseStack(state.else);\n          }\n          if (state.then !== _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH) {\n            pushThenStack(state.then);\n          }\n          state = state.match;\n          break;\n        case 'MatchOnce':\n          state = {\n            type: 'MatchOnceBuffer',\n            syntax: state,\n            index: 0,\n            mask: 0\n          };\n          break;\n        case 'MatchOnceBuffer':\n          var terms = state.syntax.terms;\n          if (state.index === terms.length) {\n            // no matches at all or it's required all terms to be matched\n            if (state.mask === 0 || state.syntax.all) {\n              state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n              break;\n            }\n\n            // a partial match is ok\n            state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n            break;\n          }\n\n          // all terms are matched\n          if (state.mask === (1 << terms.length) - 1) {\n            state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n            break;\n          }\n          for (; state.index < terms.length; state.index++) {\n            var matchFlag = 1 << state.index;\n            if ((state.mask & matchFlag) === 0) {\n              // IMPORTANT: else stack push must go first,\n              // since it stores the state of thenStack before changes\n              pushElseStack(state);\n              pushThenStack({\n                type: 'AddMatchOnce',\n                syntax: state.syntax,\n                mask: state.mask | matchFlag\n              });\n\n              // match\n              state = terms[state.index++];\n              break;\n            }\n          }\n          break;\n        case 'AddMatchOnce':\n          state = {\n            type: 'MatchOnceBuffer',\n            syntax: state.syntax,\n            index: 0,\n            mask: state.mask\n          };\n          break;\n        case 'Enum':\n          if (token !== null) {\n            var name = token.value.toLowerCase();\n\n            // drop \\0 and \\9 hack from keyword name\n            if (name.indexOf('\\\\') !== -1) {\n              name = name.replace(/\\\\[09].*$/, '');\n            }\n            if (hasOwnProperty.call(state.map, name)) {\n              state = state.map[name];\n              break;\n            }\n          }\n          state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n          break;\n        case 'Generic':\n          var opts = syntaxStack !== null ? syntaxStack.opts : null;\n          var lastTokenIndex = tokenIndex + Math.floor(state.fn(token, getNextToken, opts));\n          if (!isNaN(lastTokenIndex) && lastTokenIndex > tokenIndex) {\n            while (tokenIndex < lastTokenIndex) {\n              addTokenToMatch();\n            }\n            state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n          } else {\n            state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n          }\n          break;\n        case 'Type':\n        case 'Property':\n          var syntaxDict = state.type === 'Type' ? 'types' : 'properties';\n          var dictSyntax = hasOwnProperty.call(syntaxes, syntaxDict) ? syntaxes[syntaxDict][state.name] : null;\n          if (!dictSyntax || !dictSyntax.match) {\n            throw new Error('Bad syntax reference: ' + (state.type === 'Type' ? '<' + state.name + '>' : '<\\'' + state.name + '\\'>'));\n          }\n\n          // stash a syntax for types with low priority\n          if (syntaxStash !== false && token !== null && state.type === 'Type') {\n            var lowPriorityMatching =\n            // https://drafts.csswg.org/css-values-4/#custom-idents\n            // When parsing positionally-ambiguous keywords in a property value, a <custom-ident> production\n            // can only claim the keyword if no other unfulfilled production can claim it.\n            state.name === 'custom-ident' && token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.Ident ||\n            // https://drafts.csswg.org/css-values-4/#lengths\n            // ... if a `0` could be parsed as either a <number> or a <length> in a property (such as line-height),\n            // it must parse as a <number>\n            state.name === 'length' && token.value === '0';\n            if (lowPriorityMatching) {\n              if (syntaxStash === null) {\n                syntaxStash = stateSnapshotFromSyntax(state, elseStack);\n              }\n              state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n              break;\n            }\n          }\n          openSyntax();\n          state = dictSyntax.match;\n          break;\n        case 'Keyword':\n          var name = state.name;\n          if (token !== null) {\n            var keywordName = token.value;\n\n            // drop \\0 and \\9 hack from keyword name\n            if (keywordName.indexOf('\\\\') !== -1) {\n              keywordName = keywordName.replace(/\\\\[09].*$/, '');\n            }\n            if (areStringsEqualCaseInsensitive(keywordName, name)) {\n              addTokenToMatch();\n              state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n              break;\n            }\n          }\n          state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n          break;\n        case 'AtKeyword':\n        case 'Function':\n          if (token !== null && areStringsEqualCaseInsensitive(token.value, state.name)) {\n            addTokenToMatch();\n            state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n            break;\n          }\n          state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n          break;\n        case 'Token':\n          if (token !== null && token.value === state.value) {\n            addTokenToMatch();\n            state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n            break;\n          }\n          state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n          break;\n        case 'Comma':\n          if (token !== null && token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.Comma) {\n            if (isCommaContextStart(matchStack.token)) {\n              state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n            } else {\n              addTokenToMatch();\n              state = isCommaContextEnd(token) ? _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH : _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n            }\n          } else {\n            state = isCommaContextStart(matchStack.token) || isCommaContextEnd(token) ? _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH : _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n          }\n          break;\n        case 'String':\n          var string = '';\n          for (var lastTokenIndex = tokenIndex; lastTokenIndex < tokens.length && string.length < state.value.length; lastTokenIndex++) {\n            string += tokens[lastTokenIndex].value;\n          }\n          if (areStringsEqualCaseInsensitive(string, state.value)) {\n            while (tokenIndex < lastTokenIndex) {\n              addTokenToMatch();\n            }\n            state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n          } else {\n            state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n          }\n          break;\n        default:\n          throw new Error('Unknown node type: ' + state.type);\n      }\n    }\n    totalIterationCount += iterationCount;\n    switch (exitReason) {\n      case null:\n        console.warn('[csstree-match] BREAK after ' + ITERATION_LIMIT + ' iterations');\n        exitReason = EXIT_REASON_ITERATION_LIMIT;\n        matchStack = null;\n        break;\n      case EXIT_REASON_MATCH:\n        while (syntaxStack !== null) {\n          closeSyntax();\n        }\n        break;\n      default:\n        matchStack = null;\n    }\n    return {\n      tokens: tokens,\n      reason: exitReason,\n      iterations: iterationCount,\n      match: matchStack,\n      longestMatch: longestMatch\n    };\n  }\n  function matchAsList(tokens, matchGraph, syntaxes) {\n    var matchResult = internalMatch(tokens, matchGraph, syntaxes || {});\n    if (matchResult.match !== null) {\n      var item = reverseList(matchResult.match).prev;\n      matchResult.match = [];\n      while (item !== null) {\n        switch (item.type) {\n          case STUB:\n            break;\n          case OPEN_SYNTAX:\n          case CLOSE_SYNTAX:\n            matchResult.match.push({\n              type: item.type,\n              syntax: item.syntax\n            });\n            break;\n          default:\n            matchResult.match.push({\n              token: item.token.value,\n              node: item.token.node\n            });\n            break;\n        }\n        item = item.prev;\n      }\n    }\n    return matchResult;\n  }\n  function matchAsTree(tokens, matchGraph, syntaxes) {\n    var matchResult = internalMatch(tokens, matchGraph, syntaxes || {});\n    if (matchResult.match === null) {\n      return matchResult;\n    }\n    var item = matchResult.match;\n    var host = matchResult.match = {\n      syntax: matchGraph.syntax || null,\n      match: []\n    };\n    var hostStack = [host];\n\n    // revert a list and start with 2nd item since 1st is a stub item\n    item = reverseList(item).prev;\n\n    // build a tree\n    while (item !== null) {\n      switch (item.type) {\n        case OPEN_SYNTAX:\n          host.match.push(host = {\n            syntax: item.syntax,\n            match: []\n          });\n          hostStack.push(host);\n          break;\n        case CLOSE_SYNTAX:\n          hostStack.pop();\n          host = hostStack[hostStack.length - 1];\n          break;\n        default:\n          host.match.push({\n            syntax: item.syntax || null,\n            token: item.token.value,\n            node: item.token.node\n          });\n      }\n      item = item.prev;\n    }\n    return matchResult;\n  }\n  module.exports = {\n    matchAsList: matchAsList,\n    matchAsTree: matchAsTree,\n    getTotalIterationCount: function getTotalIterationCount() {\n      return totalIterationCount;\n    }\n  };\n});","lineCount":525,"map":[[2,2,1,0],[2,6,1,4,"hasOwnProperty"],[2,20,1,18],[2,23,1,21,"Object"],[2,29,1,27],[2,30,1,28,"prototype"],[2,39,1,37],[2,40,1,38,"hasOwnProperty"],[2,54,1,52],[3,2,8,0],[3,6,8,4,"STUB"],[3,10,8,8],[3,13,8,11],[3,14,8,12],[4,2,9,0],[4,6,9,4,"TOKEN"],[4,11,9,9],[4,14,9,12],[4,15,9,13],[5,2,10,0],[5,6,10,4,"OPEN_SYNTAX"],[5,17,10,15],[5,20,10,18],[5,21,10,19],[6,2,11,0],[6,6,11,4,"CLOSE_SYNTAX"],[6,18,11,16],[6,21,11,19],[6,22,11,20],[7,2,13,0],[7,6,13,4,"EXIT_REASON_MATCH"],[7,23,13,21],[7,26,13,24],[7,33,13,31],[8,2,14,0],[8,6,14,4,"EXIT_REASON_MISMATCH"],[8,26,14,24],[8,29,14,27],[8,39,14,37],[9,2,15,0],[9,6,15,4,"EXIT_REASON_ITERATION_LIMIT"],[9,33,15,31],[9,36,15,34],[9,139,15,137],[10,2,17,0],[10,6,17,4,"ITERATION_LIMIT"],[10,21,17,19],[10,24,17,22],[10,29,17,27],[11,2,18,0],[11,6,18,4,"totalIterationCount"],[11,25,18,23],[11,28,18,26],[11,29,18,27],[12,2,20,0],[12,11,20,9,"reverseList"],[12,22,20,20,"reverseList"],[12,23,20,21,"list"],[12,27,20,25],[12,29,20,27],[13,4,21,4],[13,8,21,8,"prev"],[13,12,21,12],[13,15,21,15],[13,19,21,19],[14,4,22,4],[14,8,22,8,"next"],[14,12,22,12],[14,15,22,15],[14,19,22,19],[15,4,23,4],[15,8,23,8,"item"],[15,12,23,12],[15,15,23,15,"list"],[15,19,23,19],[16,4,25,4],[16,11,25,11,"item"],[16,15,25,15],[16,20,25,20],[16,24,25,24],[16,26,25,26],[17,6,26,8,"next"],[17,10,26,12],[17,13,26,15,"item"],[17,17,26,19],[17,18,26,20,"prev"],[17,22,26,24],[18,6,27,8,"item"],[18,10,27,12],[18,11,27,13,"prev"],[18,15,27,17],[18,18,27,20,"prev"],[18,22,27,24],[19,6,28,8,"prev"],[19,10,28,12],[19,13,28,15,"item"],[19,17,28,19],[20,6,29,8,"item"],[20,10,29,12],[20,13,29,15,"next"],[20,17,29,19],[21,4,30,4],[22,4,32,4],[22,11,32,11,"prev"],[22,15,32,15],[23,2,33,0],[24,2,35,0],[24,11,35,9,"areStringsEqualCaseInsensitive"],[24,41,35,39,"areStringsEqualCaseInsensitive"],[24,42,35,40,"testStr"],[24,49,35,47],[24,51,35,49,"referenceStr"],[24,63,35,61],[24,65,35,63],[25,4,36,4],[25,8,36,8,"testStr"],[25,15,36,15],[25,16,36,16,"length"],[25,22,36,22],[25,27,36,27,"referenceStr"],[25,39,36,39],[25,40,36,40,"length"],[25,46,36,46],[25,48,36,48],[26,6,37,8],[26,13,37,15],[26,18,37,20],[27,4,38,4],[28,4,40,4],[28,9,40,9],[28,13,40,13,"i"],[28,14,40,14],[28,17,40,17],[28,18,40,18],[28,20,40,20,"i"],[28,21,40,21],[28,24,40,24,"testStr"],[28,31,40,31],[28,32,40,32,"length"],[28,38,40,38],[28,40,40,40,"i"],[28,41,40,41],[28,43,40,43],[28,45,40,45],[29,6,41,8],[29,10,41,12,"testCode"],[29,18,41,20],[29,21,41,23,"testStr"],[29,28,41,30],[29,29,41,31,"charCodeAt"],[29,39,41,41],[29,40,41,42,"i"],[29,41,41,43],[29,42,41,44],[30,6,42,8],[30,10,42,12,"referenceCode"],[30,23,42,25],[30,26,42,28,"referenceStr"],[30,38,42,40],[30,39,42,41,"charCodeAt"],[30,49,42,51],[30,50,42,52,"i"],[30,51,42,53],[30,52,42,54],[32,6,44,8],[33,6,45,8],[33,10,45,12,"testCode"],[33,18,45,20],[33,22,45,24],[33,28,45,30],[33,32,45,34,"testCode"],[33,40,45,42],[33,44,45,46],[33,50,45,52],[33,52,45,54],[34,8,46,12,"testCode"],[34,16,46,20],[34,19,46,23,"testCode"],[34,27,46,31],[34,30,46,34],[34,32,46,36],[35,6,47,8],[36,6,49,8],[36,10,49,12,"testCode"],[36,18,49,20],[36,23,49,25,"referenceCode"],[36,36,49,38],[36,38,49,40],[37,8,50,12],[37,15,50,19],[37,20,50,24],[38,6,51,8],[39,4,52,4],[40,4,54,4],[40,11,54,11],[40,15,54,15],[41,2,55,0],[42,2,57,0],[42,11,57,9,"isContextEdgeDelim"],[42,29,57,27,"isContextEdgeDelim"],[42,30,57,28,"token"],[42,35,57,33],[42,37,57,35],[43,4,58,4],[43,8,58,8,"token"],[43,13,58,13],[43,14,58,14,"type"],[43,18,58,18],[43,23,58,23,"_$$_REQUIRE"],[43,34,58,23],[43,35,58,23,"_dependencyMap"],[43,49,58,23],[43,76,58,23,"TYPE"],[43,80,58,23],[43,81,58,28,"Delim"],[43,86,58,33],[43,88,58,35],[44,6,59,8],[44,13,59,15],[44,18,59,20],[45,4,60,4],[47,4,62,4],[48,4,63,4],[49,4,64,4],[49,11,64,11,"token"],[49,16,64,16],[49,17,64,17,"value"],[49,22,64,22],[49,27,64,27],[49,30,64,30],[50,2,65,0],[51,2,67,0],[51,11,67,9,"isCommaContextStart"],[51,30,67,28,"isCommaContextStart"],[51,31,67,29,"token"],[51,36,67,34],[51,38,67,36],[52,4,68,4],[52,8,68,8,"token"],[52,13,68,13],[52,18,68,18],[52,22,68,22],[52,24,68,24],[53,6,69,8],[53,13,69,15],[53,17,69,19],[54,4,70,4],[55,4,72,4],[55,11,73,8,"token"],[55,16,73,13],[55,17,73,14,"type"],[55,21,73,18],[55,26,73,23,"_$$_REQUIRE"],[55,37,73,23],[55,38,73,23,"_dependencyMap"],[55,52,73,23],[55,79,73,23,"TYPE"],[55,83,73,23],[55,84,73,28,"Comma"],[55,89,73,33],[55,93,74,8,"token"],[55,98,74,13],[55,99,74,14,"type"],[55,103,74,18],[55,108,74,23,"_$$_REQUIRE"],[55,119,74,23],[55,120,74,23,"_dependencyMap"],[55,134,74,23],[55,161,74,23,"TYPE"],[55,165,74,23],[55,166,74,28,"Function"],[55,174,74,36],[55,178,75,8,"token"],[55,183,75,13],[55,184,75,14,"type"],[55,188,75,18],[55,193,75,23,"_$$_REQUIRE"],[55,204,75,23],[55,205,75,23,"_dependencyMap"],[55,219,75,23],[55,246,75,23,"TYPE"],[55,250,75,23],[55,251,75,28,"LeftParenthesis"],[55,266,75,43],[55,270,76,8,"token"],[55,275,76,13],[55,276,76,14,"type"],[55,280,76,18],[55,285,76,23,"_$$_REQUIRE"],[55,296,76,23],[55,297,76,23,"_dependencyMap"],[55,311,76,23],[55,338,76,23,"TYPE"],[55,342,76,23],[55,343,76,28,"LeftSquareBracket"],[55,360,76,45],[55,364,77,8,"token"],[55,369,77,13],[55,370,77,14,"type"],[55,374,77,18],[55,379,77,23,"_$$_REQUIRE"],[55,390,77,23],[55,391,77,23,"_dependencyMap"],[55,405,77,23],[55,432,77,23,"TYPE"],[55,436,77,23],[55,437,77,28,"LeftCurlyBracket"],[55,453,77,44],[55,457,78,8,"isContextEdgeDelim"],[55,475,78,26],[55,476,78,27,"token"],[55,481,78,32],[55,482,78,33],[56,2,80,0],[57,2,82,0],[57,11,82,9,"isCommaContextEnd"],[57,28,82,26,"isCommaContextEnd"],[57,29,82,27,"token"],[57,34,82,32],[57,36,82,34],[58,4,83,4],[58,8,83,8,"token"],[58,13,83,13],[58,18,83,18],[58,22,83,22],[58,24,83,24],[59,6,84,8],[59,13,84,15],[59,17,84,19],[60,4,85,4],[61,4,87,4],[61,11,88,8,"token"],[61,16,88,13],[61,17,88,14,"type"],[61,21,88,18],[61,26,88,23,"_$$_REQUIRE"],[61,37,88,23],[61,38,88,23,"_dependencyMap"],[61,52,88,23],[61,79,88,23,"TYPE"],[61,83,88,23],[61,84,88,28,"RightParenthesis"],[61,100,88,44],[61,104,89,8,"token"],[61,109,89,13],[61,110,89,14,"type"],[61,114,89,18],[61,119,89,23,"_$$_REQUIRE"],[61,130,89,23],[61,131,89,23,"_dependencyMap"],[61,145,89,23],[61,172,89,23,"TYPE"],[61,176,89,23],[61,177,89,28,"RightSquareBracket"],[61,195,89,46],[61,199,90,8,"token"],[61,204,90,13],[61,205,90,14,"type"],[61,209,90,18],[61,214,90,23,"_$$_REQUIRE"],[61,225,90,23],[61,226,90,23,"_dependencyMap"],[61,240,90,23],[61,267,90,23,"TYPE"],[61,271,90,23],[61,272,90,28,"RightCurlyBracket"],[61,289,90,45],[61,293,91,8,"token"],[61,298,91,13],[61,299,91,14,"type"],[61,303,91,18],[61,308,91,23,"_$$_REQUIRE"],[61,319,91,23],[61,320,91,23,"_dependencyMap"],[61,334,91,23],[61,361,91,23,"TYPE"],[61,365,91,23],[61,366,91,28,"Delim"],[61,371,91,33],[62,2,93,0],[63,2,95,0],[63,11,95,9,"internalMatch"],[63,24,95,22,"internalMatch"],[63,25,95,23,"tokens"],[63,31,95,29],[63,33,95,31,"state"],[63,38,95,36],[63,40,95,38,"syntaxes"],[63,48,95,46],[63,50,95,48],[64,4,96,4],[64,13,96,13,"moveToNextToken"],[64,28,96,28,"moveToNextToken"],[64,29,96,28],[64,31,96,31],[65,6,97,8],[65,9,97,11],[66,8,98,12,"tokenIndex"],[66,18,98,22],[66,20,98,24],[67,8,99,12,"token"],[67,13,99,17],[67,16,99,20,"tokenIndex"],[67,26,99,30],[67,29,99,33,"tokens"],[67,35,99,39],[67,36,99,40,"length"],[67,42,99,46],[67,45,99,49,"tokens"],[67,51,99,55],[67,52,99,56,"tokenIndex"],[67,62,99,66],[67,63,99,67],[67,66,99,70],[67,70,99,74],[68,6,100,8],[68,7,100,9],[68,15,100,17,"token"],[68,20,100,22],[68,25,100,27],[68,29,100,31],[68,34,100,36,"token"],[68,39,100,41],[68,40,100,42,"type"],[68,44,100,46],[68,49,100,51,"_$$_REQUIRE"],[68,60,100,51],[68,61,100,51,"_dependencyMap"],[68,75,100,51],[68,102,100,51,"TYPE"],[68,106,100,51],[68,107,100,56,"WhiteSpace"],[68,117,100,66],[68,121,100,70,"token"],[68,126,100,75],[68,127,100,76,"type"],[68,131,100,80],[68,136,100,85,"_$$_REQUIRE"],[68,147,100,85],[68,148,100,85,"_dependencyMap"],[68,162,100,85],[68,189,100,85,"TYPE"],[68,193,100,85],[68,194,100,90,"Comment"],[68,201,100,97],[68,202,100,98],[69,4,101,4],[70,4,103,4],[70,13,103,13,"getNextToken"],[70,25,103,25,"getNextToken"],[70,26,103,26,"offset"],[70,32,103,32],[70,34,103,34],[71,6,104,8],[71,10,104,12,"nextIndex"],[71,19,104,21],[71,22,104,24,"tokenIndex"],[71,32,104,34],[71,35,104,37,"offset"],[71,41,104,43],[72,6,106,8],[72,13,106,15,"nextIndex"],[72,22,106,24],[72,25,106,27,"tokens"],[72,31,106,33],[72,32,106,34,"length"],[72,38,106,40],[72,41,106,43,"tokens"],[72,47,106,49],[72,48,106,50,"nextIndex"],[72,57,106,59],[72,58,106,60],[72,61,106,63],[72,65,106,67],[73,4,107,4],[74,4,109,4],[74,13,109,13,"stateSnapshotFromSyntax"],[74,36,109,36,"stateSnapshotFromSyntax"],[74,37,109,37,"nextState"],[74,46,109,46],[74,48,109,48,"prev"],[74,52,109,52],[74,54,109,54],[75,6,110,8],[75,13,110,15],[76,8,111,12,"nextState"],[76,17,111,21],[76,19,111,23,"nextState"],[76,28,111,32],[77,8,112,12,"matchStack"],[77,18,112,22],[77,20,112,24,"matchStack"],[77,30,112,34],[78,8,113,12,"syntaxStack"],[78,19,113,23],[78,21,113,25,"syntaxStack"],[78,32,113,36],[79,8,114,12,"thenStack"],[79,17,114,21],[79,19,114,23,"thenStack"],[79,28,114,32],[80,8,115,12,"tokenIndex"],[80,18,115,22],[80,20,115,24,"tokenIndex"],[80,30,115,34],[81,8,116,12,"prev"],[81,12,116,16],[81,14,116,18,"prev"],[82,6,117,8],[82,7,117,9],[83,4,118,4],[84,4,120,4],[84,13,120,13,"pushThenStack"],[84,26,120,26,"pushThenStack"],[84,27,120,27,"nextState"],[84,36,120,36],[84,38,120,38],[85,6,121,8,"thenStack"],[85,15,121,17],[85,18,121,20],[86,8,122,12,"nextState"],[86,17,122,21],[86,19,122,23,"nextState"],[86,28,122,32],[87,8,123,12,"matchStack"],[87,18,123,22],[87,20,123,24,"matchStack"],[87,30,123,34],[88,8,124,12,"syntaxStack"],[88,19,124,23],[88,21,124,25,"syntaxStack"],[88,32,124,36],[89,8,125,12,"prev"],[89,12,125,16],[89,14,125,18,"thenStack"],[90,6,126,8],[90,7,126,9],[91,4,127,4],[92,4,129,4],[92,13,129,13,"pushElseStack"],[92,26,129,26,"pushElseStack"],[92,27,129,27,"nextState"],[92,36,129,36],[92,38,129,38],[93,6,130,8,"elseStack"],[93,15,130,17],[93,18,130,20,"stateSnapshotFromSyntax"],[93,41,130,43],[93,42,130,44,"nextState"],[93,51,130,53],[93,53,130,55,"elseStack"],[93,62,130,64],[93,63,130,65],[94,4,131,4],[95,4,133,4],[95,13,133,13,"addTokenToMatch"],[95,28,133,28,"addTokenToMatch"],[95,29,133,28],[95,31,133,31],[96,6,134,8,"matchStack"],[96,16,134,18],[96,19,134,21],[97,8,135,12,"type"],[97,12,135,16],[97,14,135,18,"TOKEN"],[97,19,135,23],[98,8,136,12,"syntax"],[98,14,136,18],[98,16,136,20,"state"],[98,21,136,25],[98,22,136,26,"syntax"],[98,28,136,32],[99,8,137,12,"token"],[99,13,137,17],[99,15,137,19,"token"],[99,20,137,24],[100,8,138,12,"prev"],[100,12,138,16],[100,14,138,18,"matchStack"],[101,6,139,8],[101,7,139,9],[102,6,141,8,"moveToNextToken"],[102,21,141,23],[102,22,141,24],[102,23,141,25],[103,6,142,8,"syntaxStash"],[103,17,142,19],[103,20,142,22],[103,24,142,26],[104,6,144,8],[104,10,144,12,"tokenIndex"],[104,20,144,22],[104,23,144,25,"longestMatch"],[104,35,144,37],[104,37,144,39],[105,8,145,12,"longestMatch"],[105,20,145,24],[105,23,145,27,"tokenIndex"],[105,33,145,37],[106,6,146,8],[107,4,147,4],[108,4,149,4],[108,13,149,13,"openSyntax"],[108,23,149,23,"openSyntax"],[108,24,149,23],[108,26,149,26],[109,6,150,8,"syntaxStack"],[109,17,150,19],[109,20,150,22],[110,8,151,12,"syntax"],[110,14,151,18],[110,16,151,20,"state"],[110,21,151,25],[110,22,151,26,"syntax"],[110,28,151,32],[111,8,152,12,"opts"],[111,12,152,16],[111,14,152,18,"state"],[111,19,152,23],[111,20,152,24,"syntax"],[111,26,152,30],[111,27,152,31,"opts"],[111,31,152,35],[111,35,152,40,"syntaxStack"],[111,46,152,51],[111,51,152,56],[111,55,152,60],[111,59,152,64,"syntaxStack"],[111,70,152,75],[111,71,152,76,"opts"],[111,75,152,81],[111,79,152,85],[111,83,152,89],[112,8,153,12,"prev"],[112,12,153,16],[112,14,153,18,"syntaxStack"],[113,6,154,8],[113,7,154,9],[114,6,156,8,"matchStack"],[114,16,156,18],[114,19,156,21],[115,8,157,12,"type"],[115,12,157,16],[115,14,157,18,"OPEN_SYNTAX"],[115,25,157,29],[116,8,158,12,"syntax"],[116,14,158,18],[116,16,158,20,"state"],[116,21,158,25],[116,22,158,26,"syntax"],[116,28,158,32],[117,8,159,12,"token"],[117,13,159,17],[117,15,159,19,"matchStack"],[117,25,159,29],[117,26,159,30,"token"],[117,31,159,35],[118,8,160,12,"prev"],[118,12,160,16],[118,14,160,18,"matchStack"],[119,6,161,8],[119,7,161,9],[120,4,162,4],[121,4,164,4],[121,13,164,13,"closeSyntax"],[121,24,164,24,"closeSyntax"],[121,25,164,24],[121,27,164,27],[122,6,165,8],[122,10,165,12,"matchStack"],[122,20,165,22],[122,21,165,23,"type"],[122,25,165,27],[122,30,165,32,"OPEN_SYNTAX"],[122,41,165,43],[122,43,165,45],[123,8,166,12,"matchStack"],[123,18,166,22],[123,21,166,25,"matchStack"],[123,31,166,35],[123,32,166,36,"prev"],[123,36,166,40],[124,6,167,8],[124,7,167,9],[124,13,167,15],[125,8,168,12,"matchStack"],[125,18,168,22],[125,21,168,25],[126,10,169,16,"type"],[126,14,169,20],[126,16,169,22,"CLOSE_SYNTAX"],[126,28,169,34],[127,10,170,16,"syntax"],[127,16,170,22],[127,18,170,24,"syntaxStack"],[127,29,170,35],[127,30,170,36,"syntax"],[127,36,170,42],[128,10,171,16,"token"],[128,15,171,21],[128,17,171,23,"matchStack"],[128,27,171,33],[128,28,171,34,"token"],[128,33,171,39],[129,10,172,16,"prev"],[129,14,172,20],[129,16,172,22,"matchStack"],[130,8,173,12],[130,9,173,13],[131,6,174,8],[132,6,176,8,"syntaxStack"],[132,17,176,19],[132,20,176,22,"syntaxStack"],[132,31,176,33],[132,32,176,34,"prev"],[132,36,176,38],[133,4,177,4],[134,4,179,4],[134,8,179,8,"syntaxStack"],[134,19,179,19],[134,22,179,22],[134,26,179,26],[135,4,180,4],[135,8,180,8,"thenStack"],[135,17,180,17],[135,20,180,20],[135,24,180,24],[136,4,181,4],[136,8,181,8,"elseStack"],[136,17,181,17],[136,20,181,20],[136,24,181,24],[138,4,183,4],[139,4,184,4],[140,4,185,4],[141,4,186,4],[141,8,186,8,"syntaxStash"],[141,19,186,19],[141,22,186,22],[141,26,186,26],[142,4,188,4],[142,8,188,8,"iterationCount"],[142,22,188,22],[142,25,188,25],[142,26,188,26],[142,27,188,27],[142,28,188,28],[143,4,189,4],[143,8,189,8,"exitReason"],[143,18,189,18],[143,21,189,21],[143,25,189,25],[144,4,191,4],[144,8,191,8,"token"],[144,13,191,13],[144,16,191,16],[144,20,191,20],[145,4,192,4],[145,8,192,8,"tokenIndex"],[145,18,192,18],[145,21,192,21],[145,22,192,22],[145,23,192,23],[146,4,193,4],[146,8,193,8,"longestMatch"],[146,20,193,20],[146,23,193,23],[146,24,193,24],[147,4,194,4],[147,8,194,8,"matchStack"],[147,18,194,18],[147,21,194,21],[148,6,195,8,"type"],[148,10,195,12],[148,12,195,14,"STUB"],[148,16,195,18],[149,6,196,8,"syntax"],[149,12,196,14],[149,14,196,16],[149,18,196,20],[150,6,197,8,"token"],[150,11,197,13],[150,13,197,15],[150,17,197,19],[151,6,198,8,"prev"],[151,10,198,12],[151,12,198,14],[152,4,199,4],[152,5,199,5],[153,4,201,4,"moveToNextToken"],[153,19,201,19],[153,20,201,20],[153,21,201,21],[154,4,203,4],[154,11,203,11,"exitReason"],[154,21,203,21],[154,26,203,26],[154,30,203,30],[154,34,203,34],[154,36,203,36,"iterationCount"],[154,50,203,50],[154,53,203,53,"ITERATION_LIMIT"],[154,68,203,68],[154,70,203,70],[155,6,204,8],[156,6,205,8],[157,6,206,8],[158,6,207,8],[159,6,208,8],[160,6,209,8],[161,6,210,8],[162,6,211,8],[163,6,212,8],[164,6,213,8],[165,6,214,8],[166,6,215,8],[167,6,216,8],[168,6,217,8],[169,6,218,8],[170,6,219,8],[171,6,220,8],[172,6,221,8],[172,14,221,16,"state"],[172,19,221,21],[172,20,221,22,"type"],[172,24,221,26],[173,8,222,12],[173,13,222,17],[173,20,222,24],[174,10,223,16],[174,14,223,20,"thenStack"],[174,23,223,29],[174,28,223,34],[174,32,223,38],[174,34,223,40],[175,12,224,20],[176,12,225,20],[176,16,225,24,"token"],[176,21,225,29],[176,26,225,34],[176,30,225,38],[176,32,225,40],[177,14,226,24],[178,14,227,24],[178,18,227,28,"tokenIndex"],[178,28,227,38],[178,33,227,43,"tokens"],[178,39,227,49],[178,40,227,50,"length"],[178,46,227,56],[178,49,227,59],[178,50,227,60],[178,54,227,65,"token"],[178,59,227,70],[178,60,227,71,"value"],[178,65,227,76],[178,70,227,81],[178,75,227,86],[178,79,227,90,"token"],[178,84,227,95],[178,85,227,96,"value"],[178,90,227,101],[178,95,227,106],[178,100,227,112],[178,102,227,114],[179,16,228,28,"state"],[179,21,228,33],[179,24,228,33,"_$$_REQUIRE"],[179,35,228,33],[179,36,228,33,"_dependencyMap"],[179,50,228,33],[179,72,228,33,"MISMATCH"],[179,80,228,44],[180,16,229,28],[181,14,230,24],[182,12,231,20],[184,12,233,20],[185,12,234,20,"exitReason"],[185,22,234,30],[185,25,234,33,"EXIT_REASON_MATCH"],[185,42,234,50],[186,12,235,20],[187,10,236,16],[189,10,238,16],[190,10,239,16,"state"],[190,15,239,21],[190,18,239,24,"thenStack"],[190,27,239,33],[190,28,239,34,"nextState"],[190,37,239,43],[192,10,241,16],[193,10,242,16],[193,14,242,20,"state"],[193,19,242,25],[193,24,242,25,"_$$_REQUIRE"],[193,35,242,25],[193,36,242,25,"_dependencyMap"],[193,50,242,25],[193,72,242,25,"DISALLOW_EMPTY"],[193,86,242,44],[193,88,242,46],[194,12,243,20],[194,16,243,24,"thenStack"],[194,25,243,33],[194,26,243,34,"matchStack"],[194,36,243,44],[194,41,243,49,"matchStack"],[194,51,243,59],[194,53,243,61],[195,14,244,24,"state"],[195,19,244,29],[195,22,244,29,"_$$_REQUIRE"],[195,33,244,29],[195,34,244,29,"_dependencyMap"],[195,48,244,29],[195,70,244,29,"MISMATCH"],[195,78,244,40],[196,14,245,24],[197,12,246,20],[197,13,246,21],[197,19,246,27],[198,14,247,24,"state"],[198,19,247,29],[198,22,247,29,"_$$_REQUIRE"],[198,33,247,29],[198,34,247,29,"_dependencyMap"],[198,48,247,29],[198,70,247,29,"MATCH"],[198,75,247,37],[199,12,248,20],[200,10,249,16],[202,10,251,16],[203,10,252,16],[203,17,252,23,"thenStack"],[203,26,252,32],[203,27,252,33,"syntaxStack"],[203,38,252,44],[203,43,252,49,"syntaxStack"],[203,54,252,60],[203,56,252,62],[204,12,253,20,"closeSyntax"],[204,23,253,31],[204,24,253,32],[204,25,253,33],[205,10,254,16],[207,10,256,16],[208,10,257,16,"thenStack"],[208,19,257,25],[208,22,257,28,"thenStack"],[208,31,257,37],[208,32,257,38,"prev"],[208,36,257,42],[209,10,258,16],[210,8,260,12],[210,13,260,17],[210,23,260,27],[211,10,261,16],[212,10,262,16],[212,14,262,20,"syntaxStash"],[212,25,262,31],[212,30,262,36],[212,34,262,40],[212,38,262,44,"syntaxStash"],[212,49,262,55],[212,54,262,60],[212,59,262,65],[212,61,262,67],[213,12,263,20],[214,12,264,20],[214,16,264,24,"elseStack"],[214,25,264,33],[214,30,264,38],[214,34,264,42],[214,38,264,46,"tokenIndex"],[214,48,264,56],[214,51,264,59,"elseStack"],[214,60,264,68],[214,61,264,69,"tokenIndex"],[214,71,264,79],[214,73,264,81],[215,14,265,24],[216,14,266,24,"elseStack"],[216,23,266,33],[216,26,266,36,"syntaxStash"],[216,37,266,47],[217,14,267,24,"syntaxStash"],[217,25,267,35],[217,28,267,38],[217,33,267,43],[217,34,267,44],[217,35,267,45],[218,12,268,20],[219,10,269,16],[219,11,269,17],[219,17,269,23],[219,21,269,27,"elseStack"],[219,30,269,36],[219,35,269,41],[219,39,269,45],[219,41,269,47],[220,12,270,20],[221,12,271,20],[222,12,272,20,"exitReason"],[222,22,272,30],[222,25,272,33,"EXIT_REASON_MISMATCH"],[222,45,272,53],[223,12,273,20],[224,10,274,16],[226,10,276,16],[227,10,277,16,"state"],[227,15,277,21],[227,18,277,24,"elseStack"],[227,27,277,33],[227,28,277,34,"nextState"],[227,37,277,43],[229,10,279,16],[230,10,280,16,"thenStack"],[230,19,280,25],[230,22,280,28,"elseStack"],[230,31,280,37],[230,32,280,38,"thenStack"],[230,41,280,47],[231,10,281,16,"syntaxStack"],[231,21,281,27],[231,24,281,30,"elseStack"],[231,33,281,39],[231,34,281,40,"syntaxStack"],[231,45,281,51],[232,10,282,16,"matchStack"],[232,20,282,26],[232,23,282,29,"elseStack"],[232,32,282,38],[232,33,282,39,"matchStack"],[232,43,282,49],[233,10,283,16,"tokenIndex"],[233,20,283,26],[233,23,283,29,"elseStack"],[233,32,283,38],[233,33,283,39,"tokenIndex"],[233,43,283,49],[234,10,284,16,"token"],[234,15,284,21],[234,18,284,24,"tokenIndex"],[234,28,284,34],[234,31,284,37,"tokens"],[234,37,284,43],[234,38,284,44,"length"],[234,44,284,50],[234,47,284,53,"tokens"],[234,53,284,59],[234,54,284,60,"tokenIndex"],[234,64,284,70],[234,65,284,71],[234,68,284,74],[234,72,284,78],[236,10,286,16],[237,10,287,16,"elseStack"],[237,19,287,25],[237,22,287,28,"elseStack"],[237,31,287,37],[237,32,287,38,"prev"],[237,36,287,42],[238,10,288,16],[239,8,290,12],[239,13,290,17],[239,25,290,29],[240,10,291,16,"state"],[240,15,291,21],[240,18,291,24,"state"],[240,23,291,29],[240,24,291,30,"match"],[240,29,291,35],[241,10,292,16],[242,8,294,12],[242,13,294,17],[242,17,294,21],[243,10,295,16],[244,10,296,16],[245,10,297,16],[245,14,297,20,"state"],[245,19,297,25],[245,20,297,26,"else"],[245,24,297,30],[245,29,297,30,"_$$_REQUIRE"],[245,40,297,30],[245,41,297,30,"_dependencyMap"],[245,55,297,30],[245,77,297,30,"MISMATCH"],[245,85,297,43],[245,87,297,45],[246,12,298,20,"pushElseStack"],[246,25,298,33],[246,26,298,34,"state"],[246,31,298,39],[246,32,298,40,"else"],[246,36,298,44],[246,37,298,45],[247,10,299,16],[248,10,301,16],[248,14,301,20,"state"],[248,19,301,25],[248,20,301,26,"then"],[248,24,301,30],[248,29,301,30,"_$$_REQUIRE"],[248,40,301,30],[248,41,301,30,"_dependencyMap"],[248,55,301,30],[248,77,301,30,"MATCH"],[248,82,301,40],[248,84,301,42],[249,12,302,20,"pushThenStack"],[249,25,302,33],[249,26,302,34,"state"],[249,31,302,39],[249,32,302,40,"then"],[249,36,302,44],[249,37,302,45],[250,10,303,16],[251,10,305,16,"state"],[251,15,305,21],[251,18,305,24,"state"],[251,23,305,29],[251,24,305,30,"match"],[251,29,305,35],[252,10,306,16],[253,8,308,12],[253,13,308,17],[253,24,308,28],[254,10,309,16,"state"],[254,15,309,21],[254,18,309,24],[255,12,310,20,"type"],[255,16,310,24],[255,18,310,26],[255,35,310,43],[256,12,311,20,"syntax"],[256,18,311,26],[256,20,311,28,"state"],[256,25,311,33],[257,12,312,20,"index"],[257,17,312,25],[257,19,312,27],[257,20,312,28],[258,12,313,20,"mask"],[258,16,313,24],[258,18,313,26],[259,10,314,16],[259,11,314,17],[260,10,315,16],[261,8,317,12],[261,13,317,17],[261,30,317,34],[262,10,318,16],[262,14,318,20,"terms"],[262,19,318,25],[262,22,318,28,"state"],[262,27,318,33],[262,28,318,34,"syntax"],[262,34,318,40],[262,35,318,41,"terms"],[262,40,318,46],[263,10,320,16],[263,14,320,20,"state"],[263,19,320,25],[263,20,320,26,"index"],[263,25,320,31],[263,30,320,36,"terms"],[263,35,320,41],[263,36,320,42,"length"],[263,42,320,48],[263,44,320,50],[264,12,321,20],[265,12,322,20],[265,16,322,24,"state"],[265,21,322,29],[265,22,322,30,"mask"],[265,26,322,34],[265,31,322,39],[265,32,322,40],[265,36,322,44,"state"],[265,41,322,49],[265,42,322,50,"syntax"],[265,48,322,56],[265,49,322,57,"all"],[265,52,322,60],[265,54,322,62],[266,14,323,24,"state"],[266,19,323,29],[266,22,323,29,"_$$_REQUIRE"],[266,33,323,29],[266,34,323,29,"_dependencyMap"],[266,48,323,29],[266,70,323,29,"MISMATCH"],[266,78,323,40],[267,14,324,24],[268,12,325,20],[270,12,327,20],[271,12,328,20,"state"],[271,17,328,25],[271,20,328,25,"_$$_REQUIRE"],[271,31,328,25],[271,32,328,25,"_dependencyMap"],[271,46,328,25],[271,68,328,25,"MATCH"],[271,73,328,33],[272,12,329,20],[273,10,330,16],[275,10,332,16],[276,10,333,16],[276,14,333,20,"state"],[276,19,333,25],[276,20,333,26,"mask"],[276,24,333,30],[276,29,333,35],[276,30,333,36],[276,31,333,37],[276,35,333,41,"terms"],[276,40,333,46],[276,41,333,47,"length"],[276,47,333,53],[276,51,333,57],[276,52,333,58],[276,54,333,60],[277,12,334,20,"state"],[277,17,334,25],[277,20,334,25,"_$$_REQUIRE"],[277,31,334,25],[277,32,334,25,"_dependencyMap"],[277,46,334,25],[277,68,334,25,"MATCH"],[277,73,334,33],[278,12,335,20],[279,10,336,16],[280,10,338,16],[280,17,338,23,"state"],[280,22,338,28],[280,23,338,29,"index"],[280,28,338,34],[280,31,338,37,"terms"],[280,36,338,42],[280,37,338,43,"length"],[280,43,338,49],[280,45,338,51,"state"],[280,50,338,56],[280,51,338,57,"index"],[280,56,338,62],[280,58,338,64],[280,60,338,66],[281,12,339,20],[281,16,339,24,"matchFlag"],[281,25,339,33],[281,28,339,36],[281,29,339,37],[281,33,339,41,"state"],[281,38,339,46],[281,39,339,47,"index"],[281,44,339,52],[282,12,341,20],[282,16,341,24],[282,17,341,25,"state"],[282,22,341,30],[282,23,341,31,"mask"],[282,27,341,35],[282,30,341,38,"matchFlag"],[282,39,341,47],[282,45,341,53],[282,46,341,54],[282,48,341,56],[283,14,342,24],[284,14,343,24],[285,14,344,24,"pushElseStack"],[285,27,344,37],[285,28,344,38,"state"],[285,33,344,43],[285,34,344,44],[286,14,345,24,"pushThenStack"],[286,27,345,37],[286,28,345,38],[287,16,346,28,"type"],[287,20,346,32],[287,22,346,34],[287,36,346,48],[288,16,347,28,"syntax"],[288,22,347,34],[288,24,347,36,"state"],[288,29,347,41],[288,30,347,42,"syntax"],[288,36,347,48],[289,16,348,28,"mask"],[289,20,348,32],[289,22,348,34,"state"],[289,27,348,39],[289,28,348,40,"mask"],[289,32,348,44],[289,35,348,47,"matchFlag"],[290,14,349,24],[290,15,349,25],[290,16,349,26],[292,14,351,24],[293,14,352,24,"state"],[293,19,352,29],[293,22,352,32,"terms"],[293,27,352,37],[293,28,352,38,"state"],[293,33,352,43],[293,34,352,44,"index"],[293,39,352,49],[293,41,352,51],[293,42,352,52],[294,14,353,24],[295,12,354,20],[296,10,355,16],[297,10,356,16],[298,8,358,12],[298,13,358,17],[298,27,358,31],[299,10,359,16,"state"],[299,15,359,21],[299,18,359,24],[300,12,360,20,"type"],[300,16,360,24],[300,18,360,26],[300,35,360,43],[301,12,361,20,"syntax"],[301,18,361,26],[301,20,361,28,"state"],[301,25,361,33],[301,26,361,34,"syntax"],[301,32,361,40],[302,12,362,20,"index"],[302,17,362,25],[302,19,362,27],[302,20,362,28],[303,12,363,20,"mask"],[303,16,363,24],[303,18,363,26,"state"],[303,23,363,31],[303,24,363,32,"mask"],[304,10,364,16],[304,11,364,17],[305,10,365,16],[306,8,367,12],[306,13,367,17],[306,19,367,23],[307,10,368,16],[307,14,368,20,"token"],[307,19,368,25],[307,24,368,30],[307,28,368,34],[307,30,368,36],[308,12,369,20],[308,16,369,24,"name"],[308,20,369,28],[308,23,369,31,"token"],[308,28,369,36],[308,29,369,37,"value"],[308,34,369,42],[308,35,369,43,"toLowerCase"],[308,46,369,54],[308,47,369,55],[308,48,369,56],[310,12,371,20],[311,12,372,20],[311,16,372,24,"name"],[311,20,372,28],[311,21,372,29,"indexOf"],[311,28,372,36],[311,29,372,37],[311,33,372,41],[311,34,372,42],[311,39,372,47],[311,40,372,48],[311,41,372,49],[311,43,372,51],[312,14,373,24,"name"],[312,18,373,28],[312,21,373,31,"name"],[312,25,373,35],[312,26,373,36,"replace"],[312,33,373,43],[312,34,373,44],[312,45,373,55],[312,47,373,57],[312,49,373,59],[312,50,373,60],[313,12,374,20],[314,12,376,20],[314,16,376,24,"hasOwnProperty"],[314,30,376,38],[314,31,376,39,"call"],[314,35,376,43],[314,36,376,44,"state"],[314,41,376,49],[314,42,376,50,"map"],[314,45,376,53],[314,47,376,55,"name"],[314,51,376,59],[314,52,376,60],[314,54,376,62],[315,14,377,24,"state"],[315,19,377,29],[315,22,377,32,"state"],[315,27,377,37],[315,28,377,38,"map"],[315,31,377,41],[315,32,377,42,"name"],[315,36,377,46],[315,37,377,47],[316,14,378,24],[317,12,379,20],[318,10,380,16],[319,10,382,16,"state"],[319,15,382,21],[319,18,382,21,"_$$_REQUIRE"],[319,29,382,21],[319,30,382,21,"_dependencyMap"],[319,44,382,21],[319,66,382,21,"MISMATCH"],[319,74,382,32],[320,10,383,16],[321,8,385,12],[321,13,385,17],[321,22,385,26],[322,10,386,16],[322,14,386,20,"opts"],[322,18,386,24],[322,21,386,27,"syntaxStack"],[322,32,386,38],[322,37,386,43],[322,41,386,47],[322,44,386,50,"syntaxStack"],[322,55,386,61],[322,56,386,62,"opts"],[322,60,386,66],[322,63,386,69],[322,67,386,73],[323,10,387,16],[323,14,387,20,"lastTokenIndex"],[323,28,387,34],[323,31,387,37,"tokenIndex"],[323,41,387,47],[323,44,387,50,"Math"],[323,48,387,54],[323,49,387,55,"floor"],[323,54,387,60],[323,55,387,61,"state"],[323,60,387,66],[323,61,387,67,"fn"],[323,63,387,69],[323,64,387,70,"token"],[323,69,387,75],[323,71,387,77,"getNextToken"],[323,83,387,89],[323,85,387,91,"opts"],[323,89,387,95],[323,90,387,96],[323,91,387,97],[324,10,389,16],[324,14,389,20],[324,15,389,21,"isNaN"],[324,20,389,26],[324,21,389,27,"lastTokenIndex"],[324,35,389,41],[324,36,389,42],[324,40,389,46,"lastTokenIndex"],[324,54,389,60],[324,57,389,63,"tokenIndex"],[324,67,389,73],[324,69,389,75],[325,12,390,20],[325,19,390,27,"tokenIndex"],[325,29,390,37],[325,32,390,40,"lastTokenIndex"],[325,46,390,54],[325,48,390,56],[326,14,391,24,"addTokenToMatch"],[326,29,391,39],[326,30,391,40],[326,31,391,41],[327,12,392,20],[328,12,394,20,"state"],[328,17,394,25],[328,20,394,25,"_$$_REQUIRE"],[328,31,394,25],[328,32,394,25,"_dependencyMap"],[328,46,394,25],[328,68,394,25,"MATCH"],[328,73,394,33],[329,10,395,16],[329,11,395,17],[329,17,395,23],[330,12,396,20,"state"],[330,17,396,25],[330,20,396,25,"_$$_REQUIRE"],[330,31,396,25],[330,32,396,25,"_dependencyMap"],[330,46,396,25],[330,68,396,25,"MISMATCH"],[330,76,396,36],[331,10,397,16],[332,10,399,16],[333,8,401,12],[333,13,401,17],[333,19,401,23],[334,8,402,12],[334,13,402,17],[334,23,402,27],[335,10,403,16],[335,14,403,20,"syntaxDict"],[335,24,403,30],[335,27,403,33,"state"],[335,32,403,38],[335,33,403,39,"type"],[335,37,403,43],[335,42,403,48],[335,48,403,54],[335,51,403,57],[335,58,403,64],[335,61,403,67],[335,73,403,79],[336,10,404,16],[336,14,404,20,"dictSyntax"],[336,24,404,30],[336,27,404,33,"hasOwnProperty"],[336,41,404,47],[336,42,404,48,"call"],[336,46,404,52],[336,47,404,53,"syntaxes"],[336,55,404,61],[336,57,404,63,"syntaxDict"],[336,67,404,73],[336,68,404,74],[336,71,404,77,"syntaxes"],[336,79,404,85],[336,80,404,86,"syntaxDict"],[336,90,404,96],[336,91,404,97],[336,92,404,98,"state"],[336,97,404,103],[336,98,404,104,"name"],[336,102,404,108],[336,103,404,109],[336,106,404,112],[336,110,404,116],[337,10,406,16],[337,14,406,20],[337,15,406,21,"dictSyntax"],[337,25,406,31],[337,29,406,35],[337,30,406,36,"dictSyntax"],[337,40,406,46],[337,41,406,47,"match"],[337,46,406,52],[337,48,406,54],[338,12,407,20],[338,18,407,26],[338,22,407,30,"Error"],[338,27,407,35],[338,28,408,24],[338,52,408,48],[338,56,409,25,"state"],[338,61,409,30],[338,62,409,31,"type"],[338,66,409,35],[338,71,409,40],[338,77,409,46],[338,80,410,30],[338,83,410,33],[338,86,410,36,"state"],[338,91,410,41],[338,92,410,42,"name"],[338,96,410,46],[338,99,410,49],[338,102,410,52],[338,105,411,30],[338,110,411,35],[338,113,411,38,"state"],[338,118,411,43],[338,119,411,44,"name"],[338,123,411,48],[338,126,411,51],[338,131,411,56],[338,132,412,20],[338,133,412,21],[339,10,413,16],[341,10,415,16],[342,10,416,16],[342,14,416,20,"syntaxStash"],[342,25,416,31],[342,30,416,36],[342,35,416,41],[342,39,416,45,"token"],[342,44,416,50],[342,49,416,55],[342,53,416,59],[342,57,416,63,"state"],[342,62,416,68],[342,63,416,69,"type"],[342,67,416,73],[342,72,416,78],[342,78,416,84],[342,80,416,86],[343,12,417,20],[343,16,417,24,"lowPriorityMatching"],[343,35,417,43],[344,12,418,24],[345,12,419,24],[346,12,420,24],[347,12,421,25,"state"],[347,17,421,30],[347,18,421,31,"name"],[347,22,421,35],[347,27,421,40],[347,41,421,54],[347,45,421,58,"token"],[347,50,421,63],[347,51,421,64,"type"],[347,55,421,68],[347,60,421,73,"_$$_REQUIRE"],[347,71,421,73],[347,72,421,73,"_dependencyMap"],[347,86,421,73],[347,113,421,73,"TYPE"],[347,117,421,73],[347,118,421,78,"Ident"],[347,123,421,83],[348,12,423,24],[349,12,424,24],[350,12,425,24],[351,12,426,25,"state"],[351,17,426,30],[351,18,426,31,"name"],[351,22,426,35],[351,27,426,40],[351,35,426,48],[351,39,426,52,"token"],[351,44,426,57],[351,45,426,58,"value"],[351,50,426,63],[351,55,426,68],[351,58,426,72],[352,12,428,20],[352,16,428,24,"lowPriorityMatching"],[352,35,428,43],[352,37,428,45],[353,14,429,24],[353,18,429,28,"syntaxStash"],[353,29,429,39],[353,34,429,44],[353,38,429,48],[353,40,429,50],[354,16,430,28,"syntaxStash"],[354,27,430,39],[354,30,430,42,"stateSnapshotFromSyntax"],[354,53,430,65],[354,54,430,66,"state"],[354,59,430,71],[354,61,430,73,"elseStack"],[354,70,430,82],[354,71,430,83],[355,14,431,24],[356,14,433,24,"state"],[356,19,433,29],[356,22,433,29,"_$$_REQUIRE"],[356,33,433,29],[356,34,433,29,"_dependencyMap"],[356,48,433,29],[356,70,433,29,"MISMATCH"],[356,78,433,40],[357,14,434,24],[358,12,435,20],[359,10,436,16],[360,10,438,16,"openSyntax"],[360,20,438,26],[360,21,438,27],[360,22,438,28],[361,10,439,16,"state"],[361,15,439,21],[361,18,439,24,"dictSyntax"],[361,28,439,34],[361,29,439,35,"match"],[361,34,439,40],[362,10,440,16],[363,8,442,12],[363,13,442,17],[363,22,442,26],[364,10,443,16],[364,14,443,20,"name"],[364,18,443,24],[364,21,443,27,"state"],[364,26,443,32],[364,27,443,33,"name"],[364,31,443,37],[365,10,445,16],[365,14,445,20,"token"],[365,19,445,25],[365,24,445,30],[365,28,445,34],[365,30,445,36],[366,12,446,20],[366,16,446,24,"keywordName"],[366,27,446,35],[366,30,446,38,"token"],[366,35,446,43],[366,36,446,44,"value"],[366,41,446,49],[368,12,448,20],[369,12,449,20],[369,16,449,24,"keywordName"],[369,27,449,35],[369,28,449,36,"indexOf"],[369,35,449,43],[369,36,449,44],[369,40,449,48],[369,41,449,49],[369,46,449,54],[369,47,449,55],[369,48,449,56],[369,50,449,58],[370,14,450,24,"keywordName"],[370,25,450,35],[370,28,450,38,"keywordName"],[370,39,450,49],[370,40,450,50,"replace"],[370,47,450,57],[370,48,450,58],[370,59,450,69],[370,61,450,71],[370,63,450,73],[370,64,450,74],[371,12,451,20],[372,12,453,20],[372,16,453,24,"areStringsEqualCaseInsensitive"],[372,46,453,54],[372,47,453,55,"keywordName"],[372,58,453,66],[372,60,453,68,"name"],[372,64,453,72],[372,65,453,73],[372,67,453,75],[373,14,454,24,"addTokenToMatch"],[373,29,454,39],[373,30,454,40],[373,31,454,41],[374,14,455,24,"state"],[374,19,455,29],[374,22,455,29,"_$$_REQUIRE"],[374,33,455,29],[374,34,455,29,"_dependencyMap"],[374,48,455,29],[374,70,455,29,"MATCH"],[374,75,455,37],[375,14,456,24],[376,12,457,20],[377,10,458,16],[378,10,460,16,"state"],[378,15,460,21],[378,18,460,21,"_$$_REQUIRE"],[378,29,460,21],[378,30,460,21,"_dependencyMap"],[378,44,460,21],[378,66,460,21,"MISMATCH"],[378,74,460,32],[379,10,461,16],[380,8,463,12],[380,13,463,17],[380,24,463,28],[381,8,464,12],[381,13,464,17],[381,23,464,27],[382,10,465,16],[382,14,465,20,"token"],[382,19,465,25],[382,24,465,30],[382,28,465,34],[382,32,465,38,"areStringsEqualCaseInsensitive"],[382,62,465,68],[382,63,465,69,"token"],[382,68,465,74],[382,69,465,75,"value"],[382,74,465,80],[382,76,465,82,"state"],[382,81,465,87],[382,82,465,88,"name"],[382,86,465,92],[382,87,465,93],[382,89,465,95],[383,12,466,20,"addTokenToMatch"],[383,27,466,35],[383,28,466,36],[383,29,466,37],[384,12,467,20,"state"],[384,17,467,25],[384,20,467,25,"_$$_REQUIRE"],[384,31,467,25],[384,32,467,25,"_dependencyMap"],[384,46,467,25],[384,68,467,25,"MATCH"],[384,73,467,33],[385,12,468,20],[386,10,469,16],[387,10,471,16,"state"],[387,15,471,21],[387,18,471,21,"_$$_REQUIRE"],[387,29,471,21],[387,30,471,21,"_dependencyMap"],[387,44,471,21],[387,66,471,21,"MISMATCH"],[387,74,471,32],[388,10,472,16],[389,8,474,12],[389,13,474,17],[389,20,474,24],[390,10,475,16],[390,14,475,20,"token"],[390,19,475,25],[390,24,475,30],[390,28,475,34],[390,32,475,38,"token"],[390,37,475,43],[390,38,475,44,"value"],[390,43,475,49],[390,48,475,54,"state"],[390,53,475,59],[390,54,475,60,"value"],[390,59,475,65],[390,61,475,67],[391,12,476,20,"addTokenToMatch"],[391,27,476,35],[391,28,476,36],[391,29,476,37],[392,12,477,20,"state"],[392,17,477,25],[392,20,477,25,"_$$_REQUIRE"],[392,31,477,25],[392,32,477,25,"_dependencyMap"],[392,46,477,25],[392,68,477,25,"MATCH"],[392,73,477,33],[393,12,478,20],[394,10,479,16],[395,10,481,16,"state"],[395,15,481,21],[395,18,481,21,"_$$_REQUIRE"],[395,29,481,21],[395,30,481,21,"_dependencyMap"],[395,44,481,21],[395,66,481,21,"MISMATCH"],[395,74,481,32],[396,10,482,16],[397,8,484,12],[397,13,484,17],[397,20,484,24],[398,10,485,16],[398,14,485,20,"token"],[398,19,485,25],[398,24,485,30],[398,28,485,34],[398,32,485,38,"token"],[398,37,485,43],[398,38,485,44,"type"],[398,42,485,48],[398,47,485,53,"_$$_REQUIRE"],[398,58,485,53],[398,59,485,53,"_dependencyMap"],[398,73,485,53],[398,100,485,53,"TYPE"],[398,104,485,53],[398,105,485,58,"Comma"],[398,110,485,63],[398,112,485,65],[399,12,486,20],[399,16,486,24,"isCommaContextStart"],[399,35,486,43],[399,36,486,44,"matchStack"],[399,46,486,54],[399,47,486,55,"token"],[399,52,486,60],[399,53,486,61],[399,55,486,63],[400,14,487,24,"state"],[400,19,487,29],[400,22,487,29,"_$$_REQUIRE"],[400,33,487,29],[400,34,487,29,"_dependencyMap"],[400,48,487,29],[400,70,487,29,"MISMATCH"],[400,78,487,40],[401,12,488,20],[401,13,488,21],[401,19,488,27],[402,14,489,24,"addTokenToMatch"],[402,29,489,39],[402,30,489,40],[402,31,489,41],[403,14,490,24,"state"],[403,19,490,29],[403,22,490,32,"isCommaContextEnd"],[403,39,490,49],[403,40,490,50,"token"],[403,45,490,55],[403,46,490,56],[403,49,490,56,"_$$_REQUIRE"],[403,60,490,56],[403,61,490,56,"_dependencyMap"],[403,75,490,56],[403,97,490,56,"MISMATCH"],[403,105,490,56],[403,108,490,56,"_$$_REQUIRE"],[403,119,490,56],[403,120,490,56,"_dependencyMap"],[403,134,490,56],[403,156,490,56,"MATCH"],[403,161,490,75],[404,12,491,20],[405,10,492,16],[405,11,492,17],[405,17,492,23],[406,12,493,20,"state"],[406,17,493,25],[406,20,493,28,"isCommaContextStart"],[406,39,493,47],[406,40,493,48,"matchStack"],[406,50,493,58],[406,51,493,59,"token"],[406,56,493,64],[406,57,493,65],[406,61,493,69,"isCommaContextEnd"],[406,78,493,86],[406,79,493,87,"token"],[406,84,493,92],[406,85,493,93],[406,88,493,93,"_$$_REQUIRE"],[406,99,493,93],[406,100,493,93,"_dependencyMap"],[406,114,493,93],[406,136,493,93,"MATCH"],[406,141,493,93],[406,144,493,93,"_$$_REQUIRE"],[406,155,493,93],[406,156,493,93,"_dependencyMap"],[406,170,493,93],[406,192,493,93,"MISMATCH"],[406,200,493,112],[407,10,494,16],[408,10,496,16],[409,8,498,12],[409,13,498,17],[409,21,498,25],[410,10,499,16],[410,14,499,20,"string"],[410,20,499,26],[410,23,499,29],[410,25,499,31],[411,10,501,16],[411,15,501,21],[411,19,501,25,"lastTokenIndex"],[411,33,501,39],[411,36,501,42,"tokenIndex"],[411,46,501,52],[411,48,501,54,"lastTokenIndex"],[411,62,501,68],[411,65,501,71,"tokens"],[411,71,501,77],[411,72,501,78,"length"],[411,78,501,84],[411,82,501,88,"string"],[411,88,501,94],[411,89,501,95,"length"],[411,95,501,101],[411,98,501,104,"state"],[411,103,501,109],[411,104,501,110,"value"],[411,109,501,115],[411,110,501,116,"length"],[411,116,501,122],[411,118,501,124,"lastTokenIndex"],[411,132,501,138],[411,134,501,140],[411,136,501,142],[412,12,502,20,"string"],[412,18,502,26],[412,22,502,30,"tokens"],[412,28,502,36],[412,29,502,37,"lastTokenIndex"],[412,43,502,51],[412,44,502,52],[412,45,502,53,"value"],[412,50,502,58],[413,10,503,16],[414,10,505,16],[414,14,505,20,"areStringsEqualCaseInsensitive"],[414,44,505,50],[414,45,505,51,"string"],[414,51,505,57],[414,53,505,59,"state"],[414,58,505,64],[414,59,505,65,"value"],[414,64,505,70],[414,65,505,71],[414,67,505,73],[415,12,506,20],[415,19,506,27,"tokenIndex"],[415,29,506,37],[415,32,506,40,"lastTokenIndex"],[415,46,506,54],[415,48,506,56],[416,14,507,24,"addTokenToMatch"],[416,29,507,39],[416,30,507,40],[416,31,507,41],[417,12,508,20],[418,12,510,20,"state"],[418,17,510,25],[418,20,510,25,"_$$_REQUIRE"],[418,31,510,25],[418,32,510,25,"_dependencyMap"],[418,46,510,25],[418,68,510,25,"MATCH"],[418,73,510,33],[419,10,511,16],[419,11,511,17],[419,17,511,23],[420,12,512,20,"state"],[420,17,512,25],[420,20,512,25,"_$$_REQUIRE"],[420,31,512,25],[420,32,512,25,"_dependencyMap"],[420,46,512,25],[420,68,512,25,"MISMATCH"],[420,76,512,36],[421,10,513,16],[422,10,515,16],[423,8,517,12],[424,10,518,16],[424,16,518,22],[424,20,518,26,"Error"],[424,25,518,31],[424,26,518,32],[424,47,518,53],[424,50,518,56,"state"],[424,55,518,61],[424,56,518,62,"type"],[424,60,518,66],[424,61,518,67],[425,6,519,8],[426,4,520,4],[427,4,522,4,"totalIterationCount"],[427,23,522,23],[427,27,522,27,"iterationCount"],[427,41,522,41],[428,4,524,4],[428,12,524,12,"exitReason"],[428,22,524,22],[429,6,525,8],[429,11,525,13],[429,15,525,17],[430,8,526,12,"console"],[430,15,526,19],[430,16,526,20,"warn"],[430,20,526,24],[430,21,526,25],[430,51,526,55],[430,54,526,58,"ITERATION_LIMIT"],[430,69,526,73],[430,72,526,76],[430,85,526,89],[430,86,526,90],[431,8,527,12,"exitReason"],[431,18,527,22],[431,21,527,25,"EXIT_REASON_ITERATION_LIMIT"],[431,48,527,52],[432,8,528,12,"matchStack"],[432,18,528,22],[432,21,528,25],[432,25,528,29],[433,8,529,12],[434,6,531,8],[434,11,531,13,"EXIT_REASON_MATCH"],[434,28,531,30],[435,8,532,12],[435,15,532,19,"syntaxStack"],[435,26,532,30],[435,31,532,35],[435,35,532,39],[435,37,532,41],[436,10,533,16,"closeSyntax"],[436,21,533,27],[436,22,533,28],[436,23,533,29],[437,8,534,12],[438,8,535,12],[439,6,537,8],[440,8,538,12,"matchStack"],[440,18,538,22],[440,21,538,25],[440,25,538,29],[441,4,539,4],[442,4,541,4],[442,11,541,11],[443,6,542,8,"tokens"],[443,12,542,14],[443,14,542,16,"tokens"],[443,20,542,22],[444,6,543,8,"reason"],[444,12,543,14],[444,14,543,16,"exitReason"],[444,24,543,26],[445,6,544,8,"iterations"],[445,16,544,18],[445,18,544,20,"iterationCount"],[445,32,544,34],[446,6,545,8,"match"],[446,11,545,13],[446,13,545,15,"matchStack"],[446,23,545,25],[447,6,546,8,"longestMatch"],[447,18,546,20],[447,20,546,22,"longestMatch"],[448,4,547,4],[448,5,547,5],[449,2,548,0],[450,2,550,0],[450,11,550,9,"matchAsList"],[450,22,550,20,"matchAsList"],[450,23,550,21,"tokens"],[450,29,550,27],[450,31,550,29,"matchGraph"],[450,41,550,39],[450,43,550,41,"syntaxes"],[450,51,550,49],[450,53,550,51],[451,4,551,4],[451,8,551,8,"matchResult"],[451,19,551,19],[451,22,551,22,"internalMatch"],[451,35,551,35],[451,36,551,36,"tokens"],[451,42,551,42],[451,44,551,44,"matchGraph"],[451,54,551,54],[451,56,551,56,"syntaxes"],[451,64,551,64],[451,68,551,68],[451,69,551,69],[451,70,551,70],[451,71,551,71],[452,4,553,4],[452,8,553,8,"matchResult"],[452,19,553,19],[452,20,553,20,"match"],[452,25,553,25],[452,30,553,30],[452,34,553,34],[452,36,553,36],[453,6,554,8],[453,10,554,12,"item"],[453,14,554,16],[453,17,554,19,"reverseList"],[453,28,554,30],[453,29,554,31,"matchResult"],[453,40,554,42],[453,41,554,43,"match"],[453,46,554,48],[453,47,554,49],[453,48,554,50,"prev"],[453,52,554,54],[454,6,556,8,"matchResult"],[454,17,556,19],[454,18,556,20,"match"],[454,23,556,25],[454,26,556,28],[454,28,556,30],[455,6,558,8],[455,13,558,15,"item"],[455,17,558,19],[455,22,558,24],[455,26,558,28],[455,28,558,30],[456,8,559,12],[456,16,559,20,"item"],[456,20,559,24],[456,21,559,25,"type"],[456,25,559,29],[457,10,560,16],[457,15,560,21,"STUB"],[457,19,560,25],[458,12,561,20],[459,10,563,16],[459,15,563,21,"OPEN_SYNTAX"],[459,26,563,32],[460,10,564,16],[460,15,564,21,"CLOSE_SYNTAX"],[460,27,564,33],[461,12,565,20,"matchResult"],[461,23,565,31],[461,24,565,32,"match"],[461,29,565,37],[461,30,565,38,"push"],[461,34,565,42],[461,35,565,43],[462,14,566,24,"type"],[462,18,566,28],[462,20,566,30,"item"],[462,24,566,34],[462,25,566,35,"type"],[462,29,566,39],[463,14,567,24,"syntax"],[463,20,567,30],[463,22,567,32,"item"],[463,26,567,36],[463,27,567,37,"syntax"],[464,12,568,20],[464,13,568,21],[464,14,568,22],[465,12,569,20],[466,10,571,16],[467,12,572,20,"matchResult"],[467,23,572,31],[467,24,572,32,"match"],[467,29,572,37],[467,30,572,38,"push"],[467,34,572,42],[467,35,572,43],[468,14,573,24,"token"],[468,19,573,29],[468,21,573,31,"item"],[468,25,573,35],[468,26,573,36,"token"],[468,31,573,41],[468,32,573,42,"value"],[468,37,573,47],[469,14,574,24,"node"],[469,18,574,28],[469,20,574,30,"item"],[469,24,574,34],[469,25,574,35,"token"],[469,30,574,40],[469,31,574,41,"node"],[470,12,575,20],[470,13,575,21],[470,14,575,22],[471,12,576,20],[472,8,577,12],[473,8,579,12,"item"],[473,12,579,16],[473,15,579,19,"item"],[473,19,579,23],[473,20,579,24,"prev"],[473,24,579,28],[474,6,580,8],[475,4,581,4],[476,4,583,4],[476,11,583,11,"matchResult"],[476,22,583,22],[477,2,584,0],[478,2,586,0],[478,11,586,9,"matchAsTree"],[478,22,586,20,"matchAsTree"],[478,23,586,21,"tokens"],[478,29,586,27],[478,31,586,29,"matchGraph"],[478,41,586,39],[478,43,586,41,"syntaxes"],[478,51,586,49],[478,53,586,51],[479,4,587,4],[479,8,587,8,"matchResult"],[479,19,587,19],[479,22,587,22,"internalMatch"],[479,35,587,35],[479,36,587,36,"tokens"],[479,42,587,42],[479,44,587,44,"matchGraph"],[479,54,587,54],[479,56,587,56,"syntaxes"],[479,64,587,64],[479,68,587,68],[479,69,587,69],[479,70,587,70],[479,71,587,71],[480,4,589,4],[480,8,589,8,"matchResult"],[480,19,589,19],[480,20,589,20,"match"],[480,25,589,25],[480,30,589,30],[480,34,589,34],[480,36,589,36],[481,6,590,8],[481,13,590,15,"matchResult"],[481,24,590,26],[482,4,591,4],[483,4,593,4],[483,8,593,8,"item"],[483,12,593,12],[483,15,593,15,"matchResult"],[483,26,593,26],[483,27,593,27,"match"],[483,32,593,32],[484,4,594,4],[484,8,594,8,"host"],[484,12,594,12],[484,15,594,15,"matchResult"],[484,26,594,26],[484,27,594,27,"match"],[484,32,594,32],[484,35,594,35],[485,6,595,8,"syntax"],[485,12,595,14],[485,14,595,16,"matchGraph"],[485,24,595,26],[485,25,595,27,"syntax"],[485,31,595,33],[485,35,595,37],[485,39,595,41],[486,6,596,8,"match"],[486,11,596,13],[486,13,596,15],[487,4,597,4],[487,5,597,5],[488,4,598,4],[488,8,598,8,"hostStack"],[488,17,598,17],[488,20,598,20],[488,21,598,21,"host"],[488,25,598,25],[488,26,598,26],[490,4,600,4],[491,4,601,4,"item"],[491,8,601,8],[491,11,601,11,"reverseList"],[491,22,601,22],[491,23,601,23,"item"],[491,27,601,27],[491,28,601,28],[491,29,601,29,"prev"],[491,33,601,33],[493,4,603,4],[494,4,604,4],[494,11,604,11,"item"],[494,15,604,15],[494,20,604,20],[494,24,604,24],[494,26,604,26],[495,6,605,8],[495,14,605,16,"item"],[495,18,605,20],[495,19,605,21,"type"],[495,23,605,25],[496,8,606,12],[496,13,606,17,"OPEN_SYNTAX"],[496,24,606,28],[497,10,607,16,"host"],[497,14,607,20],[497,15,607,21,"match"],[497,20,607,26],[497,21,607,27,"push"],[497,25,607,31],[497,26,607,32,"host"],[497,30,607,36],[497,33,607,39],[498,12,608,20,"syntax"],[498,18,608,26],[498,20,608,28,"item"],[498,24,608,32],[498,25,608,33,"syntax"],[498,31,608,39],[499,12,609,20,"match"],[499,17,609,25],[499,19,609,27],[500,10,610,16],[500,11,610,17],[500,12,610,18],[501,10,611,16,"hostStack"],[501,19,611,25],[501,20,611,26,"push"],[501,24,611,30],[501,25,611,31,"host"],[501,29,611,35],[501,30,611,36],[502,10,612,16],[503,8,614,12],[503,13,614,17,"CLOSE_SYNTAX"],[503,25,614,29],[504,10,615,16,"hostStack"],[504,19,615,25],[504,20,615,26,"pop"],[504,23,615,29],[504,24,615,30],[504,25,615,31],[505,10,616,16,"host"],[505,14,616,20],[505,17,616,23,"hostStack"],[505,26,616,32],[505,27,616,33,"hostStack"],[505,36,616,42],[505,37,616,43,"length"],[505,43,616,49],[505,46,616,52],[505,47,616,53],[505,48,616,54],[506,10,617,16],[507,8,619,12],[508,10,620,16,"host"],[508,14,620,20],[508,15,620,21,"match"],[508,20,620,26],[508,21,620,27,"push"],[508,25,620,31],[508,26,620,32],[509,12,621,20,"syntax"],[509,18,621,26],[509,20,621,28,"item"],[509,24,621,32],[509,25,621,33,"syntax"],[509,31,621,39],[509,35,621,43],[509,39,621,47],[510,12,622,20,"token"],[510,17,622,25],[510,19,622,27,"item"],[510,23,622,31],[510,24,622,32,"token"],[510,29,622,37],[510,30,622,38,"value"],[510,35,622,43],[511,12,623,20,"node"],[511,16,623,24],[511,18,623,26,"item"],[511,22,623,30],[511,23,623,31,"token"],[511,28,623,36],[511,29,623,37,"node"],[512,10,624,16],[512,11,624,17],[512,12,624,18],[513,6,625,8],[514,6,627,8,"item"],[514,10,627,12],[514,13,627,15,"item"],[514,17,627,19],[514,18,627,20,"prev"],[514,22,627,24],[515,4,628,4],[516,4,630,4],[516,11,630,11,"matchResult"],[516,22,630,22],[517,2,631,0],[518,2,633,0,"module"],[518,8,633,6],[518,9,633,7,"exports"],[518,16,633,14],[518,19,633,17],[519,4,634,4,"matchAsList"],[519,15,634,15],[519,17,634,17,"matchAsList"],[519,28,634,28],[520,4,635,4,"matchAsTree"],[520,15,635,15],[520,17,635,17,"matchAsTree"],[520,28,635,28],[521,4,636,4,"getTotalIterationCount"],[521,26,636,26],[521,28,636,28],[521,37,636,4,"getTotalIterationCount"],[521,59,636,26,"getTotalIterationCount"],[521,60,636,26],[521,62,636,39],[522,6,637,8],[522,13,637,15,"totalIterationCount"],[522,32,637,34],[523,4,638,4],[524,2,639,0],[524,3,639,1],[525,0,639,2],[525,3]],"functionMap":{"names":["<global>","reverseList","areStringsEqualCaseInsensitive","isContextEdgeDelim","isCommaContextStart","isCommaContextEnd","internalMatch","moveToNextToken","getNextToken","stateSnapshotFromSyntax","pushThenStack","pushElseStack","addTokenToMatch","openSyntax","closeSyntax","matchAsList","matchAsTree","module.exports.getTotalIterationCount"],"mappings":"AAA;ACmB;CDa;AEE;CFoB;AGE;CHQ;AIE;CJa;AKE;CLW;AME;ICC;KDK;IEE;KFI;IGE;KHS;IIE;KJO;IKE;KLE;IME;KNc;IOE;KPa;IQE;KRa;CNmX;AeE;CfkC;AgBE;ChB6C;4BiBK;KjBE"}},"type":"js/module"}]}