{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":143,"column":0,"index":4634}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":143,"column":0,"index":4634}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"./networks","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":17,"index":145},"end":{"line":4,"column":38,"index":166}},{"start":{"line":4,"column":17,"index":145},"end":{"line":4,"column":38,"index":166}},{"start":{"line":4,"column":17,"index":145},"end":{"line":4,"column":38,"index":166}}],"key":"HucmY1y/bRMwIbskZ07kLJ/izkg="}},{"name":"./types","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":14,"index":211},"end":{"line":6,"column":32,"index":229}},{"start":{"line":6,"column":14,"index":211},"end":{"line":6,"column":32,"index":229}},{"start":{"line":6,"column":14,"index":211},"end":{"line":6,"column":32,"index":229}},{"start":{"line":6,"column":14,"index":211},"end":{"line":6,"column":32,"index":229}},{"start":{"line":6,"column":14,"index":211},"end":{"line":6,"column":32,"index":229}},{"start":{"line":6,"column":14,"index":211},"end":{"line":6,"column":32,"index":229}},{"start":{"line":6,"column":14,"index":211},"end":{"line":6,"column":32,"index":229}},{"start":{"line":6,"column":14,"index":211},"end":{"line":6,"column":32,"index":229}},{"start":{"line":6,"column":14,"index":211},"end":{"line":6,"column":32,"index":229}},{"start":{"line":6,"column":14,"index":211},"end":{"line":6,"column":32,"index":229}},{"start":{"line":6,"column":14,"index":211},"end":{"line":6,"column":32,"index":229}},{"start":{"line":6,"column":14,"index":211},"end":{"line":6,"column":32,"index":229}},{"start":{"line":6,"column":14,"index":211},"end":{"line":6,"column":32,"index":229}},{"start":{"line":6,"column":14,"index":211},"end":{"line":6,"column":32,"index":229}},{"start":{"line":6,"column":14,"index":211},"end":{"line":6,"column":32,"index":229}}],"key":"iU0PUTt27rZ09z7DeRf4jWGkzmo="}},{"name":"./testecc","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":18,"index":321},"end":{"line":9,"column":38,"index":341}}],"key":"dORyQ/C7BYoYjPPHdbo55FvGBLA="}},{"name":"wif","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":12,"index":287},"end":{"line":8,"column":26,"index":301}},{"start":{"line":8,"column":12,"index":287},"end":{"line":8,"column":26,"index":301}}],"key":"hbkfH+nYuAPDRbyK09Y/qV9whEg="}},{"name":"randombytes","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":20,"index":251},"end":{"line":7,"column":42,"index":273}}],"key":"HRppB8l92kfLq10/yqHPiqGAuBY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.ECPairFactory = exports.networks = void 0;\n  exports.networks = _$$_REQUIRE(_dependencyMap[2], \"./networks\");\n  var isOptions = _$$_REQUIRE(_dependencyMap[3], \"./types\").typeforce.maybe(_$$_REQUIRE(_dependencyMap[3], \"./types\").typeforce.compile({\n    compressed: _$$_REQUIRE(_dependencyMap[3], \"./types\").maybe(_$$_REQUIRE(_dependencyMap[3], \"./types\").Boolean),\n    network: _$$_REQUIRE(_dependencyMap[3], \"./types\").maybe(_$$_REQUIRE(_dependencyMap[3], \"./types\").Network)\n  }));\n  function ECPairFactory(ecc) {\n    (0, _$$_REQUIRE(_dependencyMap[4], \"./testecc\").testEcc)(ecc);\n    function isPoint(maybePoint) {\n      return ecc.isPoint(maybePoint);\n    }\n    function fromPrivateKey(buffer, options) {\n      _$$_REQUIRE(_dependencyMap[3], \"./types\").typeforce(_$$_REQUIRE(_dependencyMap[3], \"./types\").Buffer256bit, buffer);\n      if (!ecc.isPrivate(buffer)) throw new TypeError('Private key not in range [1, n)');\n      _$$_REQUIRE(_dependencyMap[3], \"./types\").typeforce(isOptions, options);\n      return new ECPair(buffer, undefined, options);\n    }\n    function fromPublicKey(buffer, options) {\n      _$$_REQUIRE(_dependencyMap[3], \"./types\").typeforce(ecc.isPoint, buffer);\n      _$$_REQUIRE(_dependencyMap[3], \"./types\").typeforce(isOptions, options);\n      return new ECPair(undefined, buffer, options);\n    }\n    function fromWIF(wifString, network) {\n      var decoded = _$$_REQUIRE(_dependencyMap[5], \"wif\").decode(wifString);\n      var version = decoded.version;\n      // list of networks?\n      if (_$$_REQUIRE(_dependencyMap[3], \"./types\").Array(network)) {\n        network = network.filter(function (x) {\n          return version === x.wif;\n        }).pop();\n        if (!network) throw new Error('Unknown network version');\n        // otherwise, assume a network object (or default to bitcoin)\n      } else {\n        network = network || _$$_REQUIRE(_dependencyMap[2], \"./networks\").bitcoin;\n        if (version !== network.wif) throw new Error('Invalid network version');\n      }\n      return fromPrivateKey(decoded.privateKey, {\n        compressed: decoded.compressed,\n        network: network\n      });\n    }\n    function makeRandom(options) {\n      _$$_REQUIRE(_dependencyMap[3], \"./types\").typeforce(isOptions, options);\n      if (options === undefined) options = {};\n      var rng = options.rng || _$$_REQUIRE(_dependencyMap[6], \"randombytes\");\n      var d;\n      do {\n        d = rng(32);\n        _$$_REQUIRE(_dependencyMap[3], \"./types\").typeforce(_$$_REQUIRE(_dependencyMap[3], \"./types\").Buffer256bit, d);\n      } while (!ecc.isPrivate(d));\n      return fromPrivateKey(d, options);\n    }\n    var ECPair = /*#__PURE__*/function () {\n      function ECPair(__D, __Q, options) {\n        _classCallCheck(this, ECPair);\n        this.__D = __D;\n        this.__Q = __Q;\n        this.lowR = false;\n        if (options === undefined) options = {};\n        this.compressed = options.compressed === undefined ? true : options.compressed;\n        this.network = options.network || _$$_REQUIRE(_dependencyMap[2], \"./networks\").bitcoin;\n        if (__Q !== undefined) this.__Q = Buffer.from(ecc.pointCompress(__Q, this.compressed));\n      }\n      return _createClass(ECPair, [{\n        key: \"privateKey\",\n        get: function get() {\n          return this.__D;\n        }\n      }, {\n        key: \"publicKey\",\n        get: function get() {\n          if (!this.__Q) {\n            // It is not possible for both `__Q` and `__D` to be `undefined` at the same time.\n            // The factory methods guard for this.\n            var p = ecc.pointFromScalar(this.__D, this.compressed);\n            // It is not possible for `p` to be null.\n            // `fromPrivateKey()` checks that `__D` is a valid scalar.\n            this.__Q = Buffer.from(p);\n          }\n          return this.__Q;\n        }\n      }, {\n        key: \"toWIF\",\n        value: function toWIF() {\n          if (!this.__D) throw new Error('Missing private key');\n          return _$$_REQUIRE(_dependencyMap[5], \"wif\").encode(this.network.wif, this.__D, this.compressed);\n        }\n      }, {\n        key: \"sign\",\n        value: function sign(hash, lowR) {\n          if (!this.__D) throw new Error('Missing private key');\n          if (lowR === undefined) lowR = this.lowR;\n          if (lowR === false) {\n            return Buffer.from(ecc.sign(hash, this.__D));\n          } else {\n            var sig = ecc.sign(hash, this.__D);\n            var extraData = Buffer.alloc(32, 0);\n            var counter = 0;\n            // if first try is lowR, skip the loop\n            // for second try and on, add extra entropy counting up\n            while (sig[0] > 0x7f) {\n              counter++;\n              extraData.writeUIntLE(counter, 0, 6);\n              sig = ecc.sign(hash, this.__D, extraData);\n            }\n            return Buffer.from(sig);\n          }\n        }\n      }, {\n        key: \"signSchnorr\",\n        value: function signSchnorr(hash) {\n          if (!this.privateKey) throw new Error('Missing private key');\n          if (!ecc.signSchnorr) throw new Error('signSchnorr not supported by ecc library');\n          return Buffer.from(ecc.signSchnorr(hash, this.privateKey));\n        }\n      }, {\n        key: \"verify\",\n        value: function verify(hash, signature) {\n          return ecc.verify(hash, this.publicKey, signature);\n        }\n      }, {\n        key: \"verifySchnorr\",\n        value: function verifySchnorr(hash, signature) {\n          if (!ecc.verifySchnorr) throw new Error('verifySchnorr not supported by ecc library');\n          return ecc.verifySchnorr(hash, this.publicKey.subarray(1, 33), signature);\n        }\n      }]);\n    }();\n    return {\n      isPoint: isPoint,\n      fromPrivateKey: fromPrivateKey,\n      fromPublicKey: fromPublicKey,\n      fromWIF: fromWIF,\n      makeRandom: makeRandom\n    };\n  }\n  exports.ECPairFactory = ECPairFactory;\n});","lineCount":146,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"_$$_REQUIRE"],[4,35,1,13],[4,36,1,13,"_dependencyMap"],[4,50,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"_$$_REQUIRE"],[5,32,1,13],[5,33,1,13,"_dependencyMap"],[5,47,1,13],[6,2,2,0,"Object"],[6,8,2,6],[6,9,2,7,"defineProperty"],[6,23,2,21],[6,24,2,22,"exports"],[6,31,2,29],[6,33,2,31],[6,45,2,43],[6,47,2,45],[7,4,2,47,"value"],[7,9,2,52],[7,11,2,54],[8,2,2,59],[8,3,2,60],[8,4,2,61],[9,2,3,0,"exports"],[9,9,3,7],[9,10,3,8,"ECPairFactory"],[9,23,3,21],[9,26,3,24,"exports"],[9,33,3,31],[9,34,3,32,"networks"],[9,42,3,40],[9,45,3,43],[9,50,3,48],[9,51,3,49],[10,2,5,0,"exports"],[10,9,5,7],[10,10,5,8,"networks"],[10,18,5,16],[10,21,5,16,"_$$_REQUIRE"],[10,32,5,16],[10,33,5,16,"_dependencyMap"],[10,47,5,16],[10,65,5,27],[11,2,10,0],[11,6,10,6,"isOptions"],[11,15,10,15],[11,18,10,18,"_$$_REQUIRE"],[11,29,10,18],[11,30,10,18,"_dependencyMap"],[11,44,10,18],[11,60,10,24,"typeforce"],[11,69,10,33],[11,70,10,34,"maybe"],[11,75,10,39],[11,76,11,2,"_$$_REQUIRE"],[11,87,11,2],[11,88,11,2,"_dependencyMap"],[11,102,11,2],[11,118,11,8,"typeforce"],[11,127,11,17],[11,128,11,18,"compile"],[11,135,11,25],[11,136,11,26],[12,4,12,4,"compressed"],[12,14,12,14],[12,16,12,16,"_$$_REQUIRE"],[12,27,12,16],[12,28,12,16,"_dependencyMap"],[12,42,12,16],[12,58,12,22,"maybe"],[12,63,12,27],[12,64,12,28,"_$$_REQUIRE"],[12,75,12,28],[12,76,12,28,"_dependencyMap"],[12,90,12,28],[12,106,12,34,"Boolean"],[12,113,12,41],[12,114,12,42],[13,4,13,4,"network"],[13,11,13,11],[13,13,13,13,"_$$_REQUIRE"],[13,24,13,13],[13,25,13,13,"_dependencyMap"],[13,39,13,13],[13,55,13,19,"maybe"],[13,60,13,24],[13,61,13,25,"_$$_REQUIRE"],[13,72,13,25],[13,73,13,25,"_dependencyMap"],[13,87,13,25],[13,103,13,31,"Network"],[13,110,13,38],[14,2,14,2],[14,3,14,3],[14,4,15,0],[14,5,15,1],[15,2,16,0],[15,11,16,9,"ECPairFactory"],[15,24,16,22,"ECPairFactory"],[15,25,16,23,"ecc"],[15,28,16,26],[15,30,16,28],[16,4,17,2],[16,5,17,3],[16,6,17,4],[16,8,17,6,"_$$_REQUIRE"],[16,19,17,6],[16,20,17,6,"_dependencyMap"],[16,34,17,6],[16,52,17,16,"testEcc"],[16,59,17,23],[16,61,17,25,"ecc"],[16,64,17,28],[16,65,17,29],[17,4,18,2],[17,13,18,11,"isPoint"],[17,20,18,18,"isPoint"],[17,21,18,19,"maybePoint"],[17,31,18,29],[17,33,18,31],[18,6,19,4],[18,13,19,11,"ecc"],[18,16,19,14],[18,17,19,15,"isPoint"],[18,24,19,22],[18,25,19,23,"maybePoint"],[18,35,19,33],[18,36,19,34],[19,4,20,2],[20,4,21,2],[20,13,21,11,"fromPrivateKey"],[20,27,21,25,"fromPrivateKey"],[20,28,21,26,"buffer"],[20,34,21,32],[20,36,21,34,"options"],[20,43,21,41],[20,45,21,43],[21,6,22,4,"_$$_REQUIRE"],[21,17,22,4],[21,18,22,4,"_dependencyMap"],[21,32,22,4],[21,48,22,10,"typeforce"],[21,57,22,19],[21,58,22,20,"_$$_REQUIRE"],[21,69,22,20],[21,70,22,20,"_dependencyMap"],[21,84,22,20],[21,100,22,26,"Buffer256bit"],[21,112,22,38],[21,114,22,40,"buffer"],[21,120,22,46],[21,121,22,47],[22,6,23,4],[22,10,23,8],[22,11,23,9,"ecc"],[22,14,23,12],[22,15,23,13,"isPrivate"],[22,24,23,22],[22,25,23,23,"buffer"],[22,31,23,29],[22,32,23,30],[22,34,24,6],[22,40,24,12],[22,44,24,16,"TypeError"],[22,53,24,25],[22,54,24,26],[22,87,24,59],[22,88,24,60],[23,6,25,4,"_$$_REQUIRE"],[23,17,25,4],[23,18,25,4,"_dependencyMap"],[23,32,25,4],[23,48,25,10,"typeforce"],[23,57,25,19],[23,58,25,20,"isOptions"],[23,67,25,29],[23,69,25,31,"options"],[23,76,25,38],[23,77,25,39],[24,6,26,4],[24,13,26,11],[24,17,26,15,"ECPair"],[24,23,26,21],[24,24,26,22,"buffer"],[24,30,26,28],[24,32,26,30,"undefined"],[24,41,26,39],[24,43,26,41,"options"],[24,50,26,48],[24,51,26,49],[25,4,27,2],[26,4,28,2],[26,13,28,11,"fromPublicKey"],[26,26,28,24,"fromPublicKey"],[26,27,28,25,"buffer"],[26,33,28,31],[26,35,28,33,"options"],[26,42,28,40],[26,44,28,42],[27,6,29,4,"_$$_REQUIRE"],[27,17,29,4],[27,18,29,4,"_dependencyMap"],[27,32,29,4],[27,48,29,10,"typeforce"],[27,57,29,19],[27,58,29,20,"ecc"],[27,61,29,23],[27,62,29,24,"isPoint"],[27,69,29,31],[27,71,29,33,"buffer"],[27,77,29,39],[27,78,29,40],[28,6,30,4,"_$$_REQUIRE"],[28,17,30,4],[28,18,30,4,"_dependencyMap"],[28,32,30,4],[28,48,30,10,"typeforce"],[28,57,30,19],[28,58,30,20,"isOptions"],[28,67,30,29],[28,69,30,31,"options"],[28,76,30,38],[28,77,30,39],[29,6,31,4],[29,13,31,11],[29,17,31,15,"ECPair"],[29,23,31,21],[29,24,31,22,"undefined"],[29,33,31,31],[29,35,31,33,"buffer"],[29,41,31,39],[29,43,31,41,"options"],[29,50,31,48],[29,51,31,49],[30,4,32,2],[31,4,33,2],[31,13,33,11,"fromWIF"],[31,20,33,18,"fromWIF"],[31,21,33,19,"wifString"],[31,30,33,28],[31,32,33,30,"network"],[31,39,33,37],[31,41,33,39],[32,6,34,4],[32,10,34,10,"decoded"],[32,17,34,17],[32,20,34,20,"_$$_REQUIRE"],[32,31,34,20],[32,32,34,20,"_dependencyMap"],[32,46,34,20],[32,58,34,24,"decode"],[32,64,34,30],[32,65,34,31,"wifString"],[32,74,34,40],[32,75,34,41],[33,6,35,4],[33,10,35,10,"version"],[33,17,35,17],[33,20,35,20,"decoded"],[33,27,35,27],[33,28,35,28,"version"],[33,35,35,35],[34,6,36,4],[35,6,37,4],[35,10,37,8,"_$$_REQUIRE"],[35,21,37,8],[35,22,37,8,"_dependencyMap"],[35,36,37,8],[35,52,37,14,"Array"],[35,57,37,19],[35,58,37,20,"network"],[35,65,37,27],[35,66,37,28],[35,68,37,30],[36,8,38,6,"network"],[36,15,38,13],[36,18,38,16,"network"],[36,25,38,23],[36,26,39,9,"filter"],[36,32,39,15],[36,33,39,16],[36,43,39,17,"x"],[36,44,39,18],[36,46,39,23],[37,10,40,10],[37,17,40,17,"version"],[37,24,40,24],[37,29,40,29,"x"],[37,30,40,30],[37,31,40,31,"wif"],[37,34,40,34],[38,8,41,8],[38,9,41,9],[38,10,41,10],[38,11,42,9,"pop"],[38,14,42,12],[38,15,42,13],[38,16,42,14],[39,8,43,6],[39,12,43,10],[39,13,43,11,"network"],[39,20,43,18],[39,22,43,20],[39,28,43,26],[39,32,43,30,"Error"],[39,37,43,35],[39,38,43,36],[39,63,43,61],[39,64,43,62],[40,8,44,6],[41,6,45,4],[41,7,45,5],[41,13,45,11],[42,8,46,6,"network"],[42,15,46,13],[42,18,46,16,"network"],[42,25,46,23],[42,29,46,27,"_$$_REQUIRE"],[42,40,46,27],[42,41,46,27,"_dependencyMap"],[42,55,46,27],[42,74,46,36,"bitcoin"],[42,81,46,43],[43,8,47,6],[43,12,47,10,"version"],[43,19,47,17],[43,24,47,22,"network"],[43,31,47,29],[43,32,47,30,"wif"],[43,35,47,33],[43,37,47,35],[43,43,47,41],[43,47,47,45,"Error"],[43,52,47,50],[43,53,47,51],[43,78,47,76],[43,79,47,77],[44,6,48,4],[45,6,49,4],[45,13,49,11,"fromPrivateKey"],[45,27,49,25],[45,28,49,26,"decoded"],[45,35,49,33],[45,36,49,34,"privateKey"],[45,46,49,44],[45,48,49,46],[46,8,50,6,"compressed"],[46,18,50,16],[46,20,50,18,"decoded"],[46,27,50,25],[46,28,50,26,"compressed"],[46,38,50,36],[47,8,51,6,"network"],[47,15,51,13],[47,17,51,15,"network"],[48,6,52,4],[48,7,52,5],[48,8,52,6],[49,4,53,2],[50,4,54,2],[50,13,54,11,"makeRandom"],[50,23,54,21,"makeRandom"],[50,24,54,22,"options"],[50,31,54,29],[50,33,54,31],[51,6,55,4,"_$$_REQUIRE"],[51,17,55,4],[51,18,55,4,"_dependencyMap"],[51,32,55,4],[51,48,55,10,"typeforce"],[51,57,55,19],[51,58,55,20,"isOptions"],[51,67,55,29],[51,69,55,31,"options"],[51,76,55,38],[51,77,55,39],[52,6,56,4],[52,10,56,8,"options"],[52,17,56,15],[52,22,56,20,"undefined"],[52,31,56,29],[52,33,56,31,"options"],[52,40,56,38],[52,43,56,41],[52,44,56,42],[52,45,56,43],[53,6,57,4],[53,10,57,10,"rng"],[53,13,57,13],[53,16,57,16,"options"],[53,23,57,23],[53,24,57,24,"rng"],[53,27,57,27],[53,31,57,27,"_$$_REQUIRE"],[53,42,57,27],[53,43,57,27,"_dependencyMap"],[53,57,57,27],[53,76,57,42],[54,6,58,4],[54,10,58,8,"d"],[54,11,58,9],[55,6,59,4],[55,9,59,7],[56,8,60,6,"d"],[56,9,60,7],[56,12,60,10,"rng"],[56,15,60,13],[56,16,60,14],[56,18,60,16],[56,19,60,17],[57,8,61,6,"_$$_REQUIRE"],[57,19,61,6],[57,20,61,6,"_dependencyMap"],[57,34,61,6],[57,50,61,12,"typeforce"],[57,59,61,21],[57,60,61,22,"_$$_REQUIRE"],[57,71,61,22],[57,72,61,22,"_dependencyMap"],[57,86,61,22],[57,102,61,28,"Buffer256bit"],[57,114,61,40],[57,116,61,42,"d"],[57,117,61,43],[57,118,61,44],[58,6,62,4],[58,7,62,5],[58,15,62,13],[58,16,62,14,"ecc"],[58,19,62,17],[58,20,62,18,"isPrivate"],[58,29,62,27],[58,30,62,28,"d"],[58,31,62,29],[58,32,62,30],[59,6,63,4],[59,13,63,11,"fromPrivateKey"],[59,27,63,25],[59,28,63,26,"d"],[59,29,63,27],[59,31,63,29,"options"],[59,38,63,36],[59,39,63,37],[60,4,64,2],[61,4,64,3],[61,8,65,8,"ECPair"],[61,14,65,14],[62,6,71,4],[62,15,71,4,"ECPair"],[62,22,71,16,"__D"],[62,25,71,19],[62,27,71,21,"__Q"],[62,30,71,24],[62,32,71,26,"options"],[62,39,71,33],[62,41,71,35],[63,8,71,35,"_classCallCheck"],[63,23,71,35],[63,30,71,35,"ECPair"],[63,36,71,35],[64,8,72,6],[64,12,72,10],[64,13,72,11,"__D"],[64,16,72,14],[64,19,72,17,"__D"],[64,22,72,20],[65,8,73,6],[65,12,73,10],[65,13,73,11,"__Q"],[65,16,73,14],[65,19,73,17,"__Q"],[65,22,73,20],[66,8,74,6],[66,12,74,10],[66,13,74,11,"lowR"],[66,17,74,15],[66,20,74,18],[66,25,74,23],[67,8,75,6],[67,12,75,10,"options"],[67,19,75,17],[67,24,75,22,"undefined"],[67,33,75,31],[67,35,75,33,"options"],[67,42,75,40],[67,45,75,43],[67,46,75,44],[67,47,75,45],[68,8,76,6],[68,12,76,10],[68,13,76,11,"compressed"],[68,23,76,21],[68,26,77,8,"options"],[68,33,77,15],[68,34,77,16,"compressed"],[68,44,77,26],[68,49,77,31,"undefined"],[68,58,77,40],[68,61,77,43],[68,65,77,47],[68,68,77,50,"options"],[68,75,77,57],[68,76,77,58,"compressed"],[68,86,77,68],[69,8,78,6],[69,12,78,10],[69,13,78,11,"network"],[69,20,78,18],[69,23,78,21,"options"],[69,30,78,28],[69,31,78,29,"network"],[69,38,78,36],[69,42,78,40,"_$$_REQUIRE"],[69,53,78,40],[69,54,78,40,"_dependencyMap"],[69,68,78,40],[69,87,78,49,"bitcoin"],[69,94,78,56],[70,8,79,6],[70,12,79,10,"__Q"],[70,15,79,13],[70,20,79,18,"undefined"],[70,29,79,27],[70,31,80,8],[70,35,80,12],[70,36,80,13,"__Q"],[70,39,80,16],[70,42,80,19,"Buffer"],[70,48,80,25],[70,49,80,26,"from"],[70,53,80,30],[70,54,80,31,"ecc"],[70,57,80,34],[70,58,80,35,"pointCompress"],[70,71,80,48],[70,72,80,49,"__Q"],[70,75,80,52],[70,77,80,54],[70,81,80,58],[70,82,80,59,"compressed"],[70,92,80,69],[70,93,80,70],[70,94,80,71],[71,6,81,4],[72,6,81,5],[72,13,81,5,"_createClass"],[72,25,81,5],[72,26,81,5,"ECPair"],[72,32,81,5],[73,8,81,5,"key"],[73,11,81,5],[74,8,81,5,"get"],[74,11,81,5],[74,13,82,4],[74,22,82,4,"get"],[74,26,82,4],[74,28,82,21],[75,10,83,6],[75,17,83,13],[75,21,83,17],[75,22,83,18,"__D"],[75,25,83,21],[76,8,84,4],[77,6,84,5],[78,8,84,5,"key"],[78,11,84,5],[79,8,84,5,"get"],[79,11,84,5],[79,13,85,4],[79,22,85,4,"get"],[79,26,85,4],[79,28,85,20],[80,10,86,6],[80,14,86,10],[80,15,86,11],[80,19,86,15],[80,20,86,16,"__Q"],[80,23,86,19],[80,25,86,21],[81,12,87,8],[82,12,88,8],[83,12,89,8],[83,16,89,14,"p"],[83,17,89,15],[83,20,89,18,"ecc"],[83,23,89,21],[83,24,89,22,"pointFromScalar"],[83,39,89,37],[83,40,89,38],[83,44,89,42],[83,45,89,43,"__D"],[83,48,89,46],[83,50,89,48],[83,54,89,52],[83,55,89,53,"compressed"],[83,65,89,63],[83,66,89,64],[84,12,90,8],[85,12,91,8],[86,12,92,8],[86,16,92,12],[86,17,92,13,"__Q"],[86,20,92,16],[86,23,92,19,"Buffer"],[86,29,92,25],[86,30,92,26,"from"],[86,34,92,30],[86,35,92,31,"p"],[86,36,92,32],[86,37,92,33],[87,10,93,6],[88,10,94,6],[88,17,94,13],[88,21,94,17],[88,22,94,18,"__Q"],[88,25,94,21],[89,8,95,4],[90,6,95,5],[91,8,95,5,"key"],[91,11,95,5],[92,8,95,5,"value"],[92,13,95,5],[92,15,96,4],[92,24,96,4,"toWIF"],[92,29,96,9,"toWIF"],[92,30,96,9],[92,32,96,12],[93,10,97,6],[93,14,97,10],[93,15,97,11],[93,19,97,15],[93,20,97,16,"__D"],[93,23,97,19],[93,25,97,21],[93,31,97,27],[93,35,97,31,"Error"],[93,40,97,36],[93,41,97,37],[93,62,97,58],[93,63,97,59],[94,10,98,6],[94,17,98,13,"_$$_REQUIRE"],[94,28,98,13],[94,29,98,13,"_dependencyMap"],[94,43,98,13],[94,55,98,17,"encode"],[94,61,98,23],[94,62,98,24],[94,66,98,28],[94,67,98,29,"network"],[94,74,98,36],[94,75,98,37,"wif"],[94,78,98,40],[94,80,98,42],[94,84,98,46],[94,85,98,47,"__D"],[94,88,98,50],[94,90,98,52],[94,94,98,56],[94,95,98,57,"compressed"],[94,105,98,67],[94,106,98,68],[95,8,99,4],[96,6,99,5],[97,8,99,5,"key"],[97,11,99,5],[98,8,99,5,"value"],[98,13,99,5],[98,15,100,4],[98,24,100,4,"sign"],[98,28,100,8,"sign"],[98,29,100,9,"hash"],[98,33,100,13],[98,35,100,15,"lowR"],[98,39,100,19],[98,41,100,21],[99,10,101,6],[99,14,101,10],[99,15,101,11],[99,19,101,15],[99,20,101,16,"__D"],[99,23,101,19],[99,25,101,21],[99,31,101,27],[99,35,101,31,"Error"],[99,40,101,36],[99,41,101,37],[99,62,101,58],[99,63,101,59],[100,10,102,6],[100,14,102,10,"lowR"],[100,18,102,14],[100,23,102,19,"undefined"],[100,32,102,28],[100,34,102,30,"lowR"],[100,38,102,34],[100,41,102,37],[100,45,102,41],[100,46,102,42,"lowR"],[100,50,102,46],[101,10,103,6],[101,14,103,10,"lowR"],[101,18,103,14],[101,23,103,19],[101,28,103,24],[101,30,103,26],[102,12,104,8],[102,19,104,15,"Buffer"],[102,25,104,21],[102,26,104,22,"from"],[102,30,104,26],[102,31,104,27,"ecc"],[102,34,104,30],[102,35,104,31,"sign"],[102,39,104,35],[102,40,104,36,"hash"],[102,44,104,40],[102,46,104,42],[102,50,104,46],[102,51,104,47,"__D"],[102,54,104,50],[102,55,104,51],[102,56,104,52],[103,10,105,6],[103,11,105,7],[103,17,105,13],[104,12,106,8],[104,16,106,12,"sig"],[104,19,106,15],[104,22,106,18,"ecc"],[104,25,106,21],[104,26,106,22,"sign"],[104,30,106,26],[104,31,106,27,"hash"],[104,35,106,31],[104,37,106,33],[104,41,106,37],[104,42,106,38,"__D"],[104,45,106,41],[104,46,106,42],[105,12,107,8],[105,16,107,14,"extraData"],[105,25,107,23],[105,28,107,26,"Buffer"],[105,34,107,32],[105,35,107,33,"alloc"],[105,40,107,38],[105,41,107,39],[105,43,107,41],[105,45,107,43],[105,46,107,44],[105,47,107,45],[106,12,108,8],[106,16,108,12,"counter"],[106,23,108,19],[106,26,108,22],[106,27,108,23],[107,12,109,8],[108,12,110,8],[109,12,111,8],[109,19,111,15,"sig"],[109,22,111,18],[109,23,111,19],[109,24,111,20],[109,25,111,21],[109,28,111,24],[109,32,111,28],[109,34,111,30],[110,14,112,10,"counter"],[110,21,112,17],[110,23,112,19],[111,14,113,10,"extraData"],[111,23,113,19],[111,24,113,20,"writeUIntLE"],[111,35,113,31],[111,36,113,32,"counter"],[111,43,113,39],[111,45,113,41],[111,46,113,42],[111,48,113,44],[111,49,113,45],[111,50,113,46],[112,14,114,10,"sig"],[112,17,114,13],[112,20,114,16,"ecc"],[112,23,114,19],[112,24,114,20,"sign"],[112,28,114,24],[112,29,114,25,"hash"],[112,33,114,29],[112,35,114,31],[112,39,114,35],[112,40,114,36,"__D"],[112,43,114,39],[112,45,114,41,"extraData"],[112,54,114,50],[112,55,114,51],[113,12,115,8],[114,12,116,8],[114,19,116,15,"Buffer"],[114,25,116,21],[114,26,116,22,"from"],[114,30,116,26],[114,31,116,27,"sig"],[114,34,116,30],[114,35,116,31],[115,10,117,6],[116,8,118,4],[117,6,118,5],[118,8,118,5,"key"],[118,11,118,5],[119,8,118,5,"value"],[119,13,118,5],[119,15,119,4],[119,24,119,4,"signSchnorr"],[119,35,119,15,"signSchnorr"],[119,36,119,16,"hash"],[119,40,119,20],[119,42,119,22],[120,10,120,6],[120,14,120,10],[120,15,120,11],[120,19,120,15],[120,20,120,16,"privateKey"],[120,30,120,26],[120,32,120,28],[120,38,120,34],[120,42,120,38,"Error"],[120,47,120,43],[120,48,120,44],[120,69,120,65],[120,70,120,66],[121,10,121,6],[121,14,121,10],[121,15,121,11,"ecc"],[121,18,121,14],[121,19,121,15,"signSchnorr"],[121,30,121,26],[121,32,122,8],[121,38,122,14],[121,42,122,18,"Error"],[121,47,122,23],[121,48,122,24],[121,90,122,66],[121,91,122,67],[122,10,123,6],[122,17,123,13,"Buffer"],[122,23,123,19],[122,24,123,20,"from"],[122,28,123,24],[122,29,123,25,"ecc"],[122,32,123,28],[122,33,123,29,"signSchnorr"],[122,44,123,40],[122,45,123,41,"hash"],[122,49,123,45],[122,51,123,47],[122,55,123,51],[122,56,123,52,"privateKey"],[122,66,123,62],[122,67,123,63],[122,68,123,64],[123,8,124,4],[124,6,124,5],[125,8,124,5,"key"],[125,11,124,5],[126,8,124,5,"value"],[126,13,124,5],[126,15,125,4],[126,24,125,4,"verify"],[126,30,125,10,"verify"],[126,31,125,11,"hash"],[126,35,125,15],[126,37,125,17,"signature"],[126,46,125,26],[126,48,125,28],[127,10,126,6],[127,17,126,13,"ecc"],[127,20,126,16],[127,21,126,17,"verify"],[127,27,126,23],[127,28,126,24,"hash"],[127,32,126,28],[127,34,126,30],[127,38,126,34],[127,39,126,35,"publicKey"],[127,48,126,44],[127,50,126,46,"signature"],[127,59,126,55],[127,60,126,56],[128,8,127,4],[129,6,127,5],[130,8,127,5,"key"],[130,11,127,5],[131,8,127,5,"value"],[131,13,127,5],[131,15,128,4],[131,24,128,4,"verifySchnorr"],[131,37,128,17,"verifySchnorr"],[131,38,128,18,"hash"],[131,42,128,22],[131,44,128,24,"signature"],[131,53,128,33],[131,55,128,35],[132,10,129,6],[132,14,129,10],[132,15,129,11,"ecc"],[132,18,129,14],[132,19,129,15,"verifySchnorr"],[132,32,129,28],[132,34,130,8],[132,40,130,14],[132,44,130,18,"Error"],[132,49,130,23],[132,50,130,24],[132,94,130,68],[132,95,130,69],[133,10,131,6],[133,17,131,13,"ecc"],[133,20,131,16],[133,21,131,17,"verifySchnorr"],[133,34,131,30],[133,35,131,31,"hash"],[133,39,131,35],[133,41,131,37],[133,45,131,41],[133,46,131,42,"publicKey"],[133,55,131,51],[133,56,131,52,"subarray"],[133,64,131,60],[133,65,131,61],[133,66,131,62],[133,68,131,64],[133,70,131,66],[133,71,131,67],[133,73,131,69,"signature"],[133,82,131,78],[133,83,131,79],[134,8,132,4],[135,6,132,5],[136,4,132,5],[137,4,134,2],[137,11,134,9],[138,6,135,4,"isPoint"],[138,13,135,11],[138,15,135,4,"isPoint"],[138,22,135,11],[139,6,136,4,"fromPrivateKey"],[139,20,136,18],[139,22,136,4,"fromPrivateKey"],[139,36,136,18],[140,6,137,4,"fromPublicKey"],[140,19,137,17],[140,21,137,4,"fromPublicKey"],[140,34,137,17],[141,6,138,4,"fromWIF"],[141,13,138,11],[141,15,138,4,"fromWIF"],[141,22,138,11],[142,6,139,4,"makeRandom"],[142,16,139,14],[142,18,139,4,"makeRandom"],[143,4,140,2],[143,5,140,3],[144,2,141,0],[145,2,142,0,"exports"],[145,9,142,7],[145,10,142,8,"ECPairFactory"],[145,23,142,21],[145,26,142,24,"ECPairFactory"],[145,39,142,37],[146,0,142,38],[146,3]],"functionMap":{"names":["<global>","ECPairFactory","isPoint","fromPrivateKey","fromPublicKey","fromWIF","network.filter$argument_0","makeRandom","ECPair","ECPair#constructor","ECPair#get__privateKey","ECPair#get__publicKey","ECPair#toWIF","ECPair#sign","ECPair#signSchnorr","ECPair#verify","ECPair#verifySchnorr"],"mappings":"AAA;ACe;ECE;GDE;EEC;GFM;EGC;GHI;EIC;gBCM;SDE;GJY;EMC;GNU;EOC;ICM;KDU;IEC;KFE;IGC;KHU;IIC;KJG;IKC;KLkB;IMC;KNK;IOC;KPE;IQC;KRI;GPC;CDQ"}},"type":"js/module"}]}