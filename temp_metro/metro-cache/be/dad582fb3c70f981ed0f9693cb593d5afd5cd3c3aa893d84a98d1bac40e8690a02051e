{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":175,"column":0,"index":5136}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":175,"column":0,"index":5136}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"varuint-bitcoin","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":16,"index":337},"end":{"line":13,"column":42,"index":363}},{"start":{"line":13,"column":16,"index":337},"end":{"line":13,"column":42,"index":363}},{"start":{"line":13,"column":16,"index":337},"end":{"line":13,"column":42,"index":363}},{"start":{"line":13,"column":16,"index":337},"end":{"line":13,"column":42,"index":363}},{"start":{"line":13,"column":16,"index":337},"end":{"line":13,"column":42,"index":363}}],"key":"d/MLbboLwipJSIgxTfEgzKAp95s="}},{"name":"./types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":292},"end":{"line":12,"column":28,"index":320}},{"start":{"line":12,"column":0,"index":292},"end":{"line":12,"column":28,"index":320}}],"key":"iV91Bk2eI9buML90FP6cK2SM5h0="}},{"name":"./types","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":14,"index":272},"end":{"line":11,"column":32,"index":290}},{"start":{"line":11,"column":14,"index":272},"end":{"line":11,"column":32,"index":290}},{"start":{"line":11,"column":14,"index":272},"end":{"line":11,"column":32,"index":290}},{"start":{"line":11,"column":14,"index":272},"end":{"line":11,"column":32,"index":290}},{"start":{"line":11,"column":14,"index":272},"end":{"line":11,"column":32,"index":290}},{"start":{"line":11,"column":14,"index":272},"end":{"line":11,"column":32,"index":290}}],"key":"iU0PUTt27rZ09z7DeRf4jWGkzmo="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.BufferReader = exports.BufferWriter = exports.cloneBuffer = exports.reverseBuffer = exports.writeUInt64LE = exports.readUInt64LE = exports.varuint = void 0;\n  exports.varuint = _$$_REQUIRE(_dependencyMap[2], \"varuint-bitcoin\");\n  // https://github.com/feross/buffer/blob/master/index.js#L1127\n  function verifuint(value, max) {\n    if (typeof value !== 'number') throw new Error('cannot write a non-number as a number');\n    if (value < 0) throw new Error('specified a negative value for writing an unsigned value');\n    if (value > max) throw new Error('RangeError: value out of range');\n    if (Math.floor(value) !== value) throw new Error('value has a fractional component');\n  }\n  function readUInt64LE(buffer, offset) {\n    var a = buffer.readUInt32LE(offset);\n    var b = buffer.readUInt32LE(offset + 4);\n    b *= 0x100000000;\n    verifuint(b + a, 0x001fffffffffffff);\n    return b + a;\n  }\n  exports.readUInt64LE = readUInt64LE;\n  /**\n   * Writes a 64-bit unsigned integer in little-endian format to the specified buffer at the given offset.\n   *\n   * @param buffer - The buffer to write the value to.\n   * @param value - The 64-bit unsigned integer value to write.\n   * @param offset - The offset in the buffer where the value should be written.\n   * @returns The new offset after writing the value.\n   */\n  function writeUInt64LE(buffer, value, offset) {\n    verifuint(value, 0x001fffffffffffff);\n    buffer.writeInt32LE(value & -1, offset);\n    buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4);\n    return offset + 8;\n  }\n  exports.writeUInt64LE = writeUInt64LE;\n  /**\n   * Reverses the order of bytes in a buffer.\n   * @param buffer - The buffer to reverse.\n   * @returns A new buffer with the bytes reversed.\n   */\n  function reverseBuffer(buffer) {\n    if (buffer.length < 1) return buffer;\n    var j = buffer.length - 1;\n    var tmp = 0;\n    for (var i = 0; i < buffer.length / 2; i++) {\n      tmp = buffer[i];\n      buffer[i] = buffer[j];\n      buffer[j] = tmp;\n      j--;\n    }\n    return buffer;\n  }\n  exports.reverseBuffer = reverseBuffer;\n  function cloneBuffer(buffer) {\n    var clone = Buffer.allocUnsafe(buffer.length);\n    buffer.copy(clone);\n    return clone;\n  }\n  exports.cloneBuffer = cloneBuffer;\n  /**\n   * Helper class for serialization of bitcoin data types into a pre-allocated buffer.\n   */\n  var BufferWriter = /*#__PURE__*/function () {\n    function BufferWriter(buffer) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      _classCallCheck(this, BufferWriter);\n      this.buffer = buffer;\n      this.offset = offset;\n      _$$_REQUIRE(_dependencyMap[3], \"./types\").typeforce(_$$_REQUIRE(_dependencyMap[4], \"./types\").tuple(_$$_REQUIRE(_dependencyMap[4], \"./types\").Buffer, _$$_REQUIRE(_dependencyMap[4], \"./types\").UInt32), [buffer, offset]);\n    }\n    return _createClass(BufferWriter, [{\n      key: \"writeUInt8\",\n      value: function writeUInt8(i) {\n        this.offset = this.buffer.writeUInt8(i, this.offset);\n      }\n    }, {\n      key: \"writeInt32\",\n      value: function writeInt32(i) {\n        this.offset = this.buffer.writeInt32LE(i, this.offset);\n      }\n    }, {\n      key: \"writeUInt32\",\n      value: function writeUInt32(i) {\n        this.offset = this.buffer.writeUInt32LE(i, this.offset);\n      }\n    }, {\n      key: \"writeUInt64\",\n      value: function writeUInt64(i) {\n        this.offset = writeUInt64LE(this.buffer, i, this.offset);\n      }\n    }, {\n      key: \"writeVarInt\",\n      value: function writeVarInt(i) {\n        _$$_REQUIRE(_dependencyMap[2], \"varuint-bitcoin\").encode(i, this.buffer, this.offset);\n        this.offset += _$$_REQUIRE(_dependencyMap[2], \"varuint-bitcoin\").encode.bytes;\n      }\n    }, {\n      key: \"writeSlice\",\n      value: function writeSlice(slice) {\n        if (this.buffer.length < this.offset + slice.length) {\n          throw new Error('Cannot write slice out of bounds');\n        }\n        this.offset += slice.copy(this.buffer, this.offset);\n      }\n    }, {\n      key: \"writeVarSlice\",\n      value: function writeVarSlice(slice) {\n        this.writeVarInt(slice.length);\n        this.writeSlice(slice);\n      }\n    }, {\n      key: \"writeVector\",\n      value: function writeVector(vector) {\n        var _this = this;\n        this.writeVarInt(vector.length);\n        vector.forEach(function (buf) {\n          return _this.writeVarSlice(buf);\n        });\n      }\n    }, {\n      key: \"end\",\n      value: function end() {\n        if (this.buffer.length === this.offset) {\n          return this.buffer;\n        }\n        throw new Error(`buffer size ${this.buffer.length}, offset ${this.offset}`);\n      }\n    }], [{\n      key: \"withCapacity\",\n      value: function withCapacity(size) {\n        return new BufferWriter(Buffer.alloc(size));\n      }\n    }]);\n  }();\n  exports.BufferWriter = BufferWriter;\n  /**\n   * Helper class for reading of bitcoin data types from a buffer.\n   */\n  var BufferReader = /*#__PURE__*/function () {\n    function BufferReader(buffer) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      _classCallCheck(this, BufferReader);\n      this.buffer = buffer;\n      this.offset = offset;\n      _$$_REQUIRE(_dependencyMap[3], \"./types\").typeforce(_$$_REQUIRE(_dependencyMap[4], \"./types\").tuple(_$$_REQUIRE(_dependencyMap[4], \"./types\").Buffer, _$$_REQUIRE(_dependencyMap[4], \"./types\").UInt32), [buffer, offset]);\n    }\n    return _createClass(BufferReader, [{\n      key: \"readUInt8\",\n      value: function readUInt8() {\n        var result = this.buffer.readUInt8(this.offset);\n        this.offset++;\n        return result;\n      }\n    }, {\n      key: \"readInt32\",\n      value: function readInt32() {\n        var result = this.buffer.readInt32LE(this.offset);\n        this.offset += 4;\n        return result;\n      }\n    }, {\n      key: \"readUInt32\",\n      value: function readUInt32() {\n        var result = this.buffer.readUInt32LE(this.offset);\n        this.offset += 4;\n        return result;\n      }\n    }, {\n      key: \"readUInt64\",\n      value: function readUInt64() {\n        var result = readUInt64LE(this.buffer, this.offset);\n        this.offset += 8;\n        return result;\n      }\n    }, {\n      key: \"readVarInt\",\n      value: function readVarInt() {\n        var vi = _$$_REQUIRE(_dependencyMap[2], \"varuint-bitcoin\").decode(this.buffer, this.offset);\n        this.offset += _$$_REQUIRE(_dependencyMap[2], \"varuint-bitcoin\").decode.bytes;\n        return vi;\n      }\n    }, {\n      key: \"readSlice\",\n      value: function readSlice(n) {\n        if (this.buffer.length < this.offset + n) {\n          throw new Error('Cannot read slice out of bounds');\n        }\n        var result = this.buffer.slice(this.offset, this.offset + n);\n        this.offset += n;\n        return result;\n      }\n    }, {\n      key: \"readVarSlice\",\n      value: function readVarSlice() {\n        return this.readSlice(this.readVarInt());\n      }\n    }, {\n      key: \"readVector\",\n      value: function readVector() {\n        var count = this.readVarInt();\n        var vector = [];\n        for (var i = 0; i < count; i++) vector.push(this.readVarSlice());\n        return vector;\n      }\n    }]);\n  }();\n  exports.BufferReader = BufferReader;\n});","lineCount":213,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"_$$_REQUIRE"],[4,35,1,13],[4,36,1,13,"_dependencyMap"],[4,50,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"_$$_REQUIRE"],[5,32,1,13],[5,33,1,13,"_dependencyMap"],[5,47,1,13],[6,2,2,0,"Object"],[6,8,2,6],[6,9,2,7,"defineProperty"],[6,23,2,21],[6,24,2,22,"exports"],[6,31,2,29],[6,33,2,31],[6,45,2,43],[6,47,2,45],[7,4,2,47,"value"],[7,9,2,52],[7,11,2,54],[8,2,2,59],[8,3,2,60],[8,4,2,61],[9,2,3,0,"exports"],[9,9,3,7],[9,10,3,8,"BufferReader"],[9,22,3,20],[9,25,4,2,"exports"],[9,32,4,9],[9,33,4,10,"BufferWriter"],[9,45,4,22],[9,48,5,2,"exports"],[9,55,5,9],[9,56,5,10,"cloneBuffer"],[9,67,5,21],[9,70,6,2,"exports"],[9,77,6,9],[9,78,6,10,"reverseBuffer"],[9,91,6,23],[9,94,7,2,"exports"],[9,101,7,9],[9,102,7,10,"writeUInt64LE"],[9,115,7,23],[9,118,8,2,"exports"],[9,125,8,9],[9,126,8,10,"readUInt64LE"],[9,138,8,22],[9,141,9,2,"exports"],[9,148,9,9],[9,149,9,10,"varuint"],[9,156,9,17],[9,159,10,4],[9,164,10,9],[9,165,10,10],[10,2,14,0,"exports"],[10,9,14,7],[10,10,14,8,"varuint"],[10,17,14,15],[10,20,14,15,"_$$_REQUIRE"],[10,31,14,15],[10,32,14,15,"_dependencyMap"],[10,46,14,15],[10,69,14,25],[11,2,15,0],[12,2,16,0],[12,11,16,9,"verifuint"],[12,20,16,18,"verifuint"],[12,21,16,19,"value"],[12,26,16,24],[12,28,16,26,"max"],[12,31,16,29],[12,33,16,31],[13,4,17,2],[13,8,17,6],[13,15,17,13,"value"],[13,20,17,18],[13,25,17,23],[13,33,17,31],[13,35,18,4],[13,41,18,10],[13,45,18,14,"Error"],[13,50,18,19],[13,51,18,20],[13,90,18,59],[13,91,18,60],[14,4,19,2],[14,8,19,6,"value"],[14,13,19,11],[14,16,19,14],[14,17,19,15],[14,19,20,4],[14,25,20,10],[14,29,20,14,"Error"],[14,34,20,19],[14,35,20,20],[14,93,20,78],[14,94,20,79],[15,4,21,2],[15,8,21,6,"value"],[15,13,21,11],[15,16,21,14,"max"],[15,19,21,17],[15,21,21,19],[15,27,21,25],[15,31,21,29,"Error"],[15,36,21,34],[15,37,21,35],[15,69,21,67],[15,70,21,68],[16,4,22,2],[16,8,22,6,"Math"],[16,12,22,10],[16,13,22,11,"floor"],[16,18,22,16],[16,19,22,17,"value"],[16,24,22,22],[16,25,22,23],[16,30,22,28,"value"],[16,35,22,33],[16,37,23,4],[16,43,23,10],[16,47,23,14,"Error"],[16,52,23,19],[16,53,23,20],[16,87,23,54],[16,88,23,55],[17,2,24,0],[18,2,25,0],[18,11,25,9,"readUInt64LE"],[18,23,25,21,"readUInt64LE"],[18,24,25,22,"buffer"],[18,30,25,28],[18,32,25,30,"offset"],[18,38,25,36],[18,40,25,38],[19,4,26,2],[19,8,26,8,"a"],[19,9,26,9],[19,12,26,12,"buffer"],[19,18,26,18],[19,19,26,19,"readUInt32LE"],[19,31,26,31],[19,32,26,32,"offset"],[19,38,26,38],[19,39,26,39],[20,4,27,2],[20,8,27,6,"b"],[20,9,27,7],[20,12,27,10,"buffer"],[20,18,27,16],[20,19,27,17,"readUInt32LE"],[20,31,27,29],[20,32,27,30,"offset"],[20,38,27,36],[20,41,27,39],[20,42,27,40],[20,43,27,41],[21,4,28,2,"b"],[21,5,28,3],[21,9,28,7],[21,20,28,18],[22,4,29,2,"verifuint"],[22,13,29,11],[22,14,29,12,"b"],[22,15,29,13],[22,18,29,16,"a"],[22,19,29,17],[22,21,29,19],[22,39,29,37],[22,40,29,38],[23,4,30,2],[23,11,30,9,"b"],[23,12,30,10],[23,15,30,13,"a"],[23,16,30,14],[24,2,31,0],[25,2,32,0,"exports"],[25,9,32,7],[25,10,32,8,"readUInt64LE"],[25,22,32,20],[25,25,32,23,"readUInt64LE"],[25,37,32,35],[26,2,33,0],[27,0,34,0],[28,0,35,0],[29,0,36,0],[30,0,37,0],[31,0,38,0],[32,0,39,0],[33,0,40,0],[34,2,41,0],[34,11,41,9,"writeUInt64LE"],[34,24,41,22,"writeUInt64LE"],[34,25,41,23,"buffer"],[34,31,41,29],[34,33,41,31,"value"],[34,38,41,36],[34,40,41,38,"offset"],[34,46,41,44],[34,48,41,46],[35,4,42,2,"verifuint"],[35,13,42,11],[35,14,42,12,"value"],[35,19,42,17],[35,21,42,19],[35,39,42,37],[35,40,42,38],[36,4,43,2,"buffer"],[36,10,43,8],[36,11,43,9,"writeInt32LE"],[36,23,43,21],[36,24,43,22,"value"],[36,29,43,27],[36,32,43,30],[36,33,43,31],[36,34,43,32],[36,36,43,34,"offset"],[36,42,43,40],[36,43,43,41],[37,4,44,2,"buffer"],[37,10,44,8],[37,11,44,9,"writeUInt32LE"],[37,24,44,22],[37,25,44,23,"Math"],[37,29,44,27],[37,30,44,28,"floor"],[37,35,44,33],[37,36,44,34,"value"],[37,41,44,39],[37,44,44,42],[37,55,44,53],[37,56,44,54],[37,58,44,56,"offset"],[37,64,44,62],[37,67,44,65],[37,68,44,66],[37,69,44,67],[38,4,45,2],[38,11,45,9,"offset"],[38,17,45,15],[38,20,45,18],[38,21,45,19],[39,2,46,0],[40,2,47,0,"exports"],[40,9,47,7],[40,10,47,8,"writeUInt64LE"],[40,23,47,21],[40,26,47,24,"writeUInt64LE"],[40,39,47,37],[41,2,48,0],[42,0,49,0],[43,0,50,0],[44,0,51,0],[45,0,52,0],[46,2,53,0],[46,11,53,9,"reverseBuffer"],[46,24,53,22,"reverseBuffer"],[46,25,53,23,"buffer"],[46,31,53,29],[46,33,53,31],[47,4,54,2],[47,8,54,6,"buffer"],[47,14,54,12],[47,15,54,13,"length"],[47,21,54,19],[47,24,54,22],[47,25,54,23],[47,27,54,25],[47,34,54,32,"buffer"],[47,40,54,38],[48,4,55,2],[48,8,55,6,"j"],[48,9,55,7],[48,12,55,10,"buffer"],[48,18,55,16],[48,19,55,17,"length"],[48,25,55,23],[48,28,55,26],[48,29,55,27],[49,4,56,2],[49,8,56,6,"tmp"],[49,11,56,9],[49,14,56,12],[49,15,56,13],[50,4,57,2],[50,9,57,7],[50,13,57,11,"i"],[50,14,57,12],[50,17,57,15],[50,18,57,16],[50,20,57,18,"i"],[50,21,57,19],[50,24,57,22,"buffer"],[50,30,57,28],[50,31,57,29,"length"],[50,37,57,35],[50,40,57,38],[50,41,57,39],[50,43,57,41,"i"],[50,44,57,42],[50,46,57,44],[50,48,57,46],[51,6,58,4,"tmp"],[51,9,58,7],[51,12,58,10,"buffer"],[51,18,58,16],[51,19,58,17,"i"],[51,20,58,18],[51,21,58,19],[52,6,59,4,"buffer"],[52,12,59,10],[52,13,59,11,"i"],[52,14,59,12],[52,15,59,13],[52,18,59,16,"buffer"],[52,24,59,22],[52,25,59,23,"j"],[52,26,59,24],[52,27,59,25],[53,6,60,4,"buffer"],[53,12,60,10],[53,13,60,11,"j"],[53,14,60,12],[53,15,60,13],[53,18,60,16,"tmp"],[53,21,60,19],[54,6,61,4,"j"],[54,7,61,5],[54,9,61,7],[55,4,62,2],[56,4,63,2],[56,11,63,9,"buffer"],[56,17,63,15],[57,2,64,0],[58,2,65,0,"exports"],[58,9,65,7],[58,10,65,8,"reverseBuffer"],[58,23,65,21],[58,26,65,24,"reverseBuffer"],[58,39,65,37],[59,2,66,0],[59,11,66,9,"cloneBuffer"],[59,22,66,20,"cloneBuffer"],[59,23,66,21,"buffer"],[59,29,66,27],[59,31,66,29],[60,4,67,2],[60,8,67,8,"clone"],[60,13,67,13],[60,16,67,16,"Buffer"],[60,22,67,22],[60,23,67,23,"allocUnsafe"],[60,34,67,34],[60,35,67,35,"buffer"],[60,41,67,41],[60,42,67,42,"length"],[60,48,67,48],[60,49,67,49],[61,4,68,2,"buffer"],[61,10,68,8],[61,11,68,9,"copy"],[61,15,68,13],[61,16,68,14,"clone"],[61,21,68,19],[61,22,68,20],[62,4,69,2],[62,11,69,9,"clone"],[62,16,69,14],[63,2,70,0],[64,2,71,0,"exports"],[64,9,71,7],[64,10,71,8,"cloneBuffer"],[64,21,71,19],[64,24,71,22,"cloneBuffer"],[64,35,71,33],[65,2,72,0],[66,0,73,0],[67,0,74,0],[68,2,72,0],[68,6,75,6,"BufferWriter"],[68,18,75,18],[69,4,79,2],[69,13,79,2,"BufferWriter"],[69,26,79,14,"buffer"],[69,32,79,20],[69,34,79,34],[70,6,79,34],[70,10,79,22,"offset"],[70,16,79,28],[70,19,79,28,"arguments"],[70,28,79,28],[70,29,79,28,"length"],[70,35,79,28],[70,43,79,28,"arguments"],[70,52,79,28],[70,60,79,28,"undefined"],[70,69,79,28],[70,72,79,28,"arguments"],[70,81,79,28],[70,87,79,31],[70,88,79,32],[71,6,79,32,"_classCallCheck"],[71,21,79,32],[71,28,79,32,"BufferWriter"],[71,40,79,32],[72,6,80,4],[72,10,80,8],[72,11,80,9,"buffer"],[72,17,80,15],[72,20,80,18,"buffer"],[72,26,80,24],[73,6,81,4],[73,10,81,8],[73,11,81,9,"offset"],[73,17,81,15],[73,20,81,18,"offset"],[73,26,81,24],[74,6,82,4,"_$$_REQUIRE"],[74,17,82,4],[74,18,82,4,"_dependencyMap"],[74,32,82,4],[74,48,82,4,"typeforce"],[74,57,82,4],[74,58,82,14,"_$$_REQUIRE"],[74,69,82,14],[74,70,82,14,"_dependencyMap"],[74,84,82,14],[74,100,82,20,"tuple"],[74,105,82,25],[74,106,82,26,"_$$_REQUIRE"],[74,117,82,26],[74,118,82,26,"_dependencyMap"],[74,132,82,26],[74,148,82,32,"Buffer"],[74,154,82,38],[74,156,82,40,"_$$_REQUIRE"],[74,167,82,40],[74,168,82,40,"_dependencyMap"],[74,182,82,40],[74,198,82,46,"UInt32"],[74,204,82,52],[74,205,82,53],[74,207,82,55],[74,208,82,56,"buffer"],[74,214,82,62],[74,216,82,64,"offset"],[74,222,82,70],[74,223,82,71],[74,224,82,72],[75,4,83,2],[76,4,83,3],[76,11,83,3,"_createClass"],[76,23,83,3],[76,24,83,3,"BufferWriter"],[76,36,83,3],[77,6,83,3,"key"],[77,9,83,3],[78,6,83,3,"value"],[78,11,83,3],[78,13,84,2],[78,22,84,2,"writeUInt8"],[78,32,84,12,"writeUInt8"],[78,33,84,13,"i"],[78,34,84,14],[78,36,84,16],[79,8,85,4],[79,12,85,8],[79,13,85,9,"offset"],[79,19,85,15],[79,22,85,18],[79,26,85,22],[79,27,85,23,"buffer"],[79,33,85,29],[79,34,85,30,"writeUInt8"],[79,44,85,40],[79,45,85,41,"i"],[79,46,85,42],[79,48,85,44],[79,52,85,48],[79,53,85,49,"offset"],[79,59,85,55],[79,60,85,56],[80,6,86,2],[81,4,86,3],[82,6,86,3,"key"],[82,9,86,3],[83,6,86,3,"value"],[83,11,86,3],[83,13,87,2],[83,22,87,2,"writeInt32"],[83,32,87,12,"writeInt32"],[83,33,87,13,"i"],[83,34,87,14],[83,36,87,16],[84,8,88,4],[84,12,88,8],[84,13,88,9,"offset"],[84,19,88,15],[84,22,88,18],[84,26,88,22],[84,27,88,23,"buffer"],[84,33,88,29],[84,34,88,30,"writeInt32LE"],[84,46,88,42],[84,47,88,43,"i"],[84,48,88,44],[84,50,88,46],[84,54,88,50],[84,55,88,51,"offset"],[84,61,88,57],[84,62,88,58],[85,6,89,2],[86,4,89,3],[87,6,89,3,"key"],[87,9,89,3],[88,6,89,3,"value"],[88,11,89,3],[88,13,90,2],[88,22,90,2,"writeUInt32"],[88,33,90,13,"writeUInt32"],[88,34,90,14,"i"],[88,35,90,15],[88,37,90,17],[89,8,91,4],[89,12,91,8],[89,13,91,9,"offset"],[89,19,91,15],[89,22,91,18],[89,26,91,22],[89,27,91,23,"buffer"],[89,33,91,29],[89,34,91,30,"writeUInt32LE"],[89,47,91,43],[89,48,91,44,"i"],[89,49,91,45],[89,51,91,47],[89,55,91,51],[89,56,91,52,"offset"],[89,62,91,58],[89,63,91,59],[90,6,92,2],[91,4,92,3],[92,6,92,3,"key"],[92,9,92,3],[93,6,92,3,"value"],[93,11,92,3],[93,13,93,2],[93,22,93,2,"writeUInt64"],[93,33,93,13,"writeUInt64"],[93,34,93,14,"i"],[93,35,93,15],[93,37,93,17],[94,8,94,4],[94,12,94,8],[94,13,94,9,"offset"],[94,19,94,15],[94,22,94,18,"writeUInt64LE"],[94,35,94,31],[94,36,94,32],[94,40,94,36],[94,41,94,37,"buffer"],[94,47,94,43],[94,49,94,45,"i"],[94,50,94,46],[94,52,94,48],[94,56,94,52],[94,57,94,53,"offset"],[94,63,94,59],[94,64,94,60],[95,6,95,2],[96,4,95,3],[97,6,95,3,"key"],[97,9,95,3],[98,6,95,3,"value"],[98,11,95,3],[98,13,96,2],[98,22,96,2,"writeVarInt"],[98,33,96,13,"writeVarInt"],[98,34,96,14,"i"],[98,35,96,15],[98,37,96,17],[99,8,97,4,"_$$_REQUIRE"],[99,19,97,4],[99,20,97,4,"_dependencyMap"],[99,34,97,4],[99,58,97,12,"encode"],[99,64,97,18],[99,65,97,19,"i"],[99,66,97,20],[99,68,97,22],[99,72,97,26],[99,73,97,27,"buffer"],[99,79,97,33],[99,81,97,35],[99,85,97,39],[99,86,97,40,"offset"],[99,92,97,46],[99,93,97,47],[100,8,98,4],[100,12,98,8],[100,13,98,9,"offset"],[100,19,98,15],[100,23,98,19,"_$$_REQUIRE"],[100,34,98,19],[100,35,98,19,"_dependencyMap"],[100,49,98,19],[100,73,98,27,"encode"],[100,79,98,33],[100,80,98,34,"bytes"],[100,85,98,39],[101,6,99,2],[102,4,99,3],[103,6,99,3,"key"],[103,9,99,3],[104,6,99,3,"value"],[104,11,99,3],[104,13,100,2],[104,22,100,2,"writeSlice"],[104,32,100,12,"writeSlice"],[104,33,100,13,"slice"],[104,38,100,18],[104,40,100,20],[105,8,101,4],[105,12,101,8],[105,16,101,12],[105,17,101,13,"buffer"],[105,23,101,19],[105,24,101,20,"length"],[105,30,101,26],[105,33,101,29],[105,37,101,33],[105,38,101,34,"offset"],[105,44,101,40],[105,47,101,43,"slice"],[105,52,101,48],[105,53,101,49,"length"],[105,59,101,55],[105,61,101,57],[106,10,102,6],[106,16,102,12],[106,20,102,16,"Error"],[106,25,102,21],[106,26,102,22],[106,60,102,56],[106,61,102,57],[107,8,103,4],[108,8,104,4],[108,12,104,8],[108,13,104,9,"offset"],[108,19,104,15],[108,23,104,19,"slice"],[108,28,104,24],[108,29,104,25,"copy"],[108,33,104,29],[108,34,104,30],[108,38,104,34],[108,39,104,35,"buffer"],[108,45,104,41],[108,47,104,43],[108,51,104,47],[108,52,104,48,"offset"],[108,58,104,54],[108,59,104,55],[109,6,105,2],[110,4,105,3],[111,6,105,3,"key"],[111,9,105,3],[112,6,105,3,"value"],[112,11,105,3],[112,13,106,2],[112,22,106,2,"writeVarSlice"],[112,35,106,15,"writeVarSlice"],[112,36,106,16,"slice"],[112,41,106,21],[112,43,106,23],[113,8,107,4],[113,12,107,8],[113,13,107,9,"writeVarInt"],[113,24,107,20],[113,25,107,21,"slice"],[113,30,107,26],[113,31,107,27,"length"],[113,37,107,33],[113,38,107,34],[114,8,108,4],[114,12,108,8],[114,13,108,9,"writeSlice"],[114,23,108,19],[114,24,108,20,"slice"],[114,29,108,25],[114,30,108,26],[115,6,109,2],[116,4,109,3],[117,6,109,3,"key"],[117,9,109,3],[118,6,109,3,"value"],[118,11,109,3],[118,13,110,2],[118,22,110,2,"writeVector"],[118,33,110,13,"writeVector"],[118,34,110,14,"vector"],[118,40,110,20],[118,42,110,22],[119,8,110,22],[119,12,110,22,"_this"],[119,17,110,22],[120,8,111,4],[120,12,111,8],[120,13,111,9,"writeVarInt"],[120,24,111,20],[120,25,111,21,"vector"],[120,31,111,27],[120,32,111,28,"length"],[120,38,111,34],[120,39,111,35],[121,8,112,4,"vector"],[121,14,112,10],[121,15,112,11,"forEach"],[121,22,112,18],[121,23,112,19],[121,33,112,19,"buf"],[121,36,112,22],[122,10,112,22],[122,17,112,26,"_this"],[122,22,112,30],[122,23,112,31,"writeVarSlice"],[122,36,112,44],[122,37,112,45,"buf"],[122,40,112,48],[122,41,112,49],[123,8,112,49],[123,10,112,50],[124,6,113,2],[125,4,113,3],[126,6,113,3,"key"],[126,9,113,3],[127,6,113,3,"value"],[127,11,113,3],[127,13,114,2],[127,22,114,2,"end"],[127,25,114,5,"end"],[127,26,114,5],[127,28,114,8],[128,8,115,4],[128,12,115,8],[128,16,115,12],[128,17,115,13,"buffer"],[128,23,115,19],[128,24,115,20,"length"],[128,30,115,26],[128,35,115,31],[128,39,115,35],[128,40,115,36,"offset"],[128,46,115,42],[128,48,115,44],[129,10,116,6],[129,17,116,13],[129,21,116,17],[129,22,116,18,"buffer"],[129,28,116,24],[130,8,117,4],[131,8,118,4],[131,14,118,10],[131,18,118,14,"Error"],[131,23,118,19],[131,24,118,20],[131,39,118,35],[131,43,118,39],[131,44,118,40,"buffer"],[131,50,118,46],[131,51,118,47,"length"],[131,57,118,53],[131,69,118,65],[131,73,118,69],[131,74,118,70,"offset"],[131,80,118,76],[131,82,118,78],[131,83,118,79],[132,6,119,2],[133,4,119,3],[134,6,119,3,"key"],[134,9,119,3],[135,6,119,3,"value"],[135,11,119,3],[135,13,76,2],[135,22,76,9,"withCapacity"],[135,34,76,21,"withCapacity"],[135,35,76,22,"size"],[135,39,76,26],[135,41,76,28],[136,8,77,4],[136,15,77,11],[136,19,77,15,"BufferWriter"],[136,31,77,27],[136,32,77,28,"Buffer"],[136,38,77,34],[136,39,77,35,"alloc"],[136,44,77,40],[136,45,77,41,"size"],[136,49,77,45],[136,50,77,46],[136,51,77,47],[137,6,78,2],[138,4,78,3],[139,2,78,3],[140,2,121,0,"exports"],[140,9,121,7],[140,10,121,8,"BufferWriter"],[140,22,121,20],[140,25,121,23,"BufferWriter"],[140,37,121,35],[141,2,122,0],[142,0,123,0],[143,0,124,0],[144,2,122,0],[144,6,125,6,"BufferReader"],[144,18,125,18],[145,4,126,2],[145,13,126,2,"BufferReader"],[145,26,126,14,"buffer"],[145,32,126,20],[145,34,126,34],[146,6,126,34],[146,10,126,22,"offset"],[146,16,126,28],[146,19,126,28,"arguments"],[146,28,126,28],[146,29,126,28,"length"],[146,35,126,28],[146,43,126,28,"arguments"],[146,52,126,28],[146,60,126,28,"undefined"],[146,69,126,28],[146,72,126,28,"arguments"],[146,81,126,28],[146,87,126,31],[146,88,126,32],[147,6,126,32,"_classCallCheck"],[147,21,126,32],[147,28,126,32,"BufferReader"],[147,40,126,32],[148,6,127,4],[148,10,127,8],[148,11,127,9,"buffer"],[148,17,127,15],[148,20,127,18,"buffer"],[148,26,127,24],[149,6,128,4],[149,10,128,8],[149,11,128,9,"offset"],[149,17,128,15],[149,20,128,18,"offset"],[149,26,128,24],[150,6,129,4,"_$$_REQUIRE"],[150,17,129,4],[150,18,129,4,"_dependencyMap"],[150,32,129,4],[150,48,129,4,"typeforce"],[150,57,129,4],[150,58,129,14,"_$$_REQUIRE"],[150,69,129,14],[150,70,129,14,"_dependencyMap"],[150,84,129,14],[150,100,129,20,"tuple"],[150,105,129,25],[150,106,129,26,"_$$_REQUIRE"],[150,117,129,26],[150,118,129,26,"_dependencyMap"],[150,132,129,26],[150,148,129,32,"Buffer"],[150,154,129,38],[150,156,129,40,"_$$_REQUIRE"],[150,167,129,40],[150,168,129,40,"_dependencyMap"],[150,182,129,40],[150,198,129,46,"UInt32"],[150,204,129,52],[150,205,129,53],[150,207,129,55],[150,208,129,56,"buffer"],[150,214,129,62],[150,216,129,64,"offset"],[150,222,129,70],[150,223,129,71],[150,224,129,72],[151,4,130,2],[152,4,130,3],[152,11,130,3,"_createClass"],[152,23,130,3],[152,24,130,3,"BufferReader"],[152,36,130,3],[153,6,130,3,"key"],[153,9,130,3],[154,6,130,3,"value"],[154,11,130,3],[154,13,131,2],[154,22,131,2,"readUInt8"],[154,31,131,11,"readUInt8"],[154,32,131,11],[154,34,131,14],[155,8,132,4],[155,12,132,10,"result"],[155,18,132,16],[155,21,132,19],[155,25,132,23],[155,26,132,24,"buffer"],[155,32,132,30],[155,33,132,31,"readUInt8"],[155,42,132,40],[155,43,132,41],[155,47,132,45],[155,48,132,46,"offset"],[155,54,132,52],[155,55,132,53],[156,8,133,4],[156,12,133,8],[156,13,133,9,"offset"],[156,19,133,15],[156,21,133,17],[157,8,134,4],[157,15,134,11,"result"],[157,21,134,17],[158,6,135,2],[159,4,135,3],[160,6,135,3,"key"],[160,9,135,3],[161,6,135,3,"value"],[161,11,135,3],[161,13,136,2],[161,22,136,2,"readInt32"],[161,31,136,11,"readInt32"],[161,32,136,11],[161,34,136,14],[162,8,137,4],[162,12,137,10,"result"],[162,18,137,16],[162,21,137,19],[162,25,137,23],[162,26,137,24,"buffer"],[162,32,137,30],[162,33,137,31,"readInt32LE"],[162,44,137,42],[162,45,137,43],[162,49,137,47],[162,50,137,48,"offset"],[162,56,137,54],[162,57,137,55],[163,8,138,4],[163,12,138,8],[163,13,138,9,"offset"],[163,19,138,15],[163,23,138,19],[163,24,138,20],[164,8,139,4],[164,15,139,11,"result"],[164,21,139,17],[165,6,140,2],[166,4,140,3],[167,6,140,3,"key"],[167,9,140,3],[168,6,140,3,"value"],[168,11,140,3],[168,13,141,2],[168,22,141,2,"readUInt32"],[168,32,141,12,"readUInt32"],[168,33,141,12],[168,35,141,15],[169,8,142,4],[169,12,142,10,"result"],[169,18,142,16],[169,21,142,19],[169,25,142,23],[169,26,142,24,"buffer"],[169,32,142,30],[169,33,142,31,"readUInt32LE"],[169,45,142,43],[169,46,142,44],[169,50,142,48],[169,51,142,49,"offset"],[169,57,142,55],[169,58,142,56],[170,8,143,4],[170,12,143,8],[170,13,143,9,"offset"],[170,19,143,15],[170,23,143,19],[170,24,143,20],[171,8,144,4],[171,15,144,11,"result"],[171,21,144,17],[172,6,145,2],[173,4,145,3],[174,6,145,3,"key"],[174,9,145,3],[175,6,145,3,"value"],[175,11,145,3],[175,13,146,2],[175,22,146,2,"readUInt64"],[175,32,146,12,"readUInt64"],[175,33,146,12],[175,35,146,15],[176,8,147,4],[176,12,147,10,"result"],[176,18,147,16],[176,21,147,19,"readUInt64LE"],[176,33,147,31],[176,34,147,32],[176,38,147,36],[176,39,147,37,"buffer"],[176,45,147,43],[176,47,147,45],[176,51,147,49],[176,52,147,50,"offset"],[176,58,147,56],[176,59,147,57],[177,8,148,4],[177,12,148,8],[177,13,148,9,"offset"],[177,19,148,15],[177,23,148,19],[177,24,148,20],[178,8,149,4],[178,15,149,11,"result"],[178,21,149,17],[179,6,150,2],[180,4,150,3],[181,6,150,3,"key"],[181,9,150,3],[182,6,150,3,"value"],[182,11,150,3],[182,13,151,2],[182,22,151,2,"readVarInt"],[182,32,151,12,"readVarInt"],[182,33,151,12],[182,35,151,15],[183,8,152,4],[183,12,152,10,"vi"],[183,14,152,12],[183,17,152,15,"_$$_REQUIRE"],[183,28,152,15],[183,29,152,15,"_dependencyMap"],[183,43,152,15],[183,67,152,23,"decode"],[183,73,152,29],[183,74,152,30],[183,78,152,34],[183,79,152,35,"buffer"],[183,85,152,41],[183,87,152,43],[183,91,152,47],[183,92,152,48,"offset"],[183,98,152,54],[183,99,152,55],[184,8,153,4],[184,12,153,8],[184,13,153,9,"offset"],[184,19,153,15],[184,23,153,19,"_$$_REQUIRE"],[184,34,153,19],[184,35,153,19,"_dependencyMap"],[184,49,153,19],[184,73,153,27,"decode"],[184,79,153,33],[184,80,153,34,"bytes"],[184,85,153,39],[185,8,154,4],[185,15,154,11,"vi"],[185,17,154,13],[186,6,155,2],[187,4,155,3],[188,6,155,3,"key"],[188,9,155,3],[189,6,155,3,"value"],[189,11,155,3],[189,13,156,2],[189,22,156,2,"readSlice"],[189,31,156,11,"readSlice"],[189,32,156,12,"n"],[189,33,156,13],[189,35,156,15],[190,8,157,4],[190,12,157,8],[190,16,157,12],[190,17,157,13,"buffer"],[190,23,157,19],[190,24,157,20,"length"],[190,30,157,26],[190,33,157,29],[190,37,157,33],[190,38,157,34,"offset"],[190,44,157,40],[190,47,157,43,"n"],[190,48,157,44],[190,50,157,46],[191,10,158,6],[191,16,158,12],[191,20,158,16,"Error"],[191,25,158,21],[191,26,158,22],[191,59,158,55],[191,60,158,56],[192,8,159,4],[193,8,160,4],[193,12,160,10,"result"],[193,18,160,16],[193,21,160,19],[193,25,160,23],[193,26,160,24,"buffer"],[193,32,160,30],[193,33,160,31,"slice"],[193,38,160,36],[193,39,160,37],[193,43,160,41],[193,44,160,42,"offset"],[193,50,160,48],[193,52,160,50],[193,56,160,54],[193,57,160,55,"offset"],[193,63,160,61],[193,66,160,64,"n"],[193,67,160,65],[193,68,160,66],[194,8,161,4],[194,12,161,8],[194,13,161,9,"offset"],[194,19,161,15],[194,23,161,19,"n"],[194,24,161,20],[195,8,162,4],[195,15,162,11,"result"],[195,21,162,17],[196,6,163,2],[197,4,163,3],[198,6,163,3,"key"],[198,9,163,3],[199,6,163,3,"value"],[199,11,163,3],[199,13,164,2],[199,22,164,2,"readVarSlice"],[199,34,164,14,"readVarSlice"],[199,35,164,14],[199,37,164,17],[200,8,165,4],[200,15,165,11],[200,19,165,15],[200,20,165,16,"readSlice"],[200,29,165,25],[200,30,165,26],[200,34,165,30],[200,35,165,31,"readVarInt"],[200,45,165,41],[200,46,165,42],[200,47,165,43],[200,48,165,44],[201,6,166,2],[202,4,166,3],[203,6,166,3,"key"],[203,9,166,3],[204,6,166,3,"value"],[204,11,166,3],[204,13,167,2],[204,22,167,2,"readVector"],[204,32,167,12,"readVector"],[204,33,167,12],[204,35,167,15],[205,8,168,4],[205,12,168,10,"count"],[205,17,168,15],[205,20,168,18],[205,24,168,22],[205,25,168,23,"readVarInt"],[205,35,168,33],[205,36,168,34],[205,37,168,35],[206,8,169,4],[206,12,169,10,"vector"],[206,18,169,16],[206,21,169,19],[206,23,169,21],[207,8,170,4],[207,13,170,9],[207,17,170,13,"i"],[207,18,170,14],[207,21,170,17],[207,22,170,18],[207,24,170,20,"i"],[207,25,170,21],[207,28,170,24,"count"],[207,33,170,29],[207,35,170,31,"i"],[207,36,170,32],[207,38,170,34],[207,40,170,36,"vector"],[207,46,170,42],[207,47,170,43,"push"],[207,51,170,47],[207,52,170,48],[207,56,170,52],[207,57,170,53,"readVarSlice"],[207,69,170,65],[207,70,170,66],[207,71,170,67],[207,72,170,68],[208,8,171,4],[208,15,171,11,"vector"],[208,21,171,17],[209,6,172,2],[210,4,172,3],[211,2,172,3],[212,2,174,0,"exports"],[212,9,174,7],[212,10,174,8,"BufferReader"],[212,22,174,20],[212,25,174,23,"BufferReader"],[212,37,174,35],[213,0,174,36],[213,3]],"functionMap":{"names":["<global>","verifuint","readUInt64LE","writeUInt64LE","reverseBuffer","cloneBuffer","BufferWriter","BufferWriter.withCapacity","BufferWriter#constructor","BufferWriter#writeUInt8","BufferWriter#writeInt32","BufferWriter#writeUInt32","BufferWriter#writeUInt64","BufferWriter#writeVarInt","BufferWriter#writeSlice","BufferWriter#writeVarSlice","BufferWriter#writeVector","vector.forEach$argument_0","BufferWriter#end","BufferReader","BufferReader#constructor","BufferReader#readUInt8","BufferReader#readInt32","BufferReader#readUInt32","BufferReader#readUInt64","BufferReader#readVarInt","BufferReader#readSlice","BufferReader#readVarSlice","BufferReader#readVector"],"mappings":"AAA;ACe;CDQ;AEC;CFM;AGU;CHK;AIO;CJW;AKE;CLI;AMK;ECC;GDE;EEC;GFI;EGC;GHE;EIC;GJE;EKC;GLE;EMC;GNE;EOC;GPG;EQC;GRK;ESC;GTG;EUC;mBCE,8BD;GVC;EYC;GZK;CNC;AmBK;ECC;GDI;EEC;GFI;EGC;GHI;EIC;GJI;EKC;GLI;EMC;GNI;EOC;GPO;EQC;GRE;ESC;GTK;CnBC"}},"type":"js/module"}]}