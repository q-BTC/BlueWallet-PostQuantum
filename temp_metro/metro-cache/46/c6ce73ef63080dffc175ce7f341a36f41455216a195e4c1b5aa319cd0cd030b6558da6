{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  // Number.MAX_SAFE_INTEGER\n  var MAX_SAFE_INTEGER = 9007199254740991;\n  function checkUInt53(n) {\n    if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0) throw new RangeError('value out of range');\n  }\n  function encode(_number, buffer, offset) {\n    checkUInt53(_number);\n    if (!buffer) buffer = Buffer.allocUnsafe(encodingLength(_number));\n    if (!Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance');\n    if (!offset) offset = 0;\n    // 8 bit\n    if (_number < 0xfd) {\n      buffer.writeUInt8(_number, offset);\n      Object.assign(encode, {\n        bytes: 1\n      });\n      // 16 bit\n    } else if (_number <= 0xffff) {\n      buffer.writeUInt8(0xfd, offset);\n      buffer.writeUInt16LE(_number, offset + 1);\n      Object.assign(encode, {\n        bytes: 3\n      });\n      // 32 bit\n    } else if (_number <= 0xffffffff) {\n      buffer.writeUInt8(0xfe, offset);\n      buffer.writeUInt32LE(_number, offset + 1);\n      Object.assign(encode, {\n        bytes: 5\n      });\n      // 64 bit\n    } else {\n      buffer.writeUInt8(0xff, offset);\n      buffer.writeUInt32LE(_number >>> 0, offset + 1);\n      buffer.writeUInt32LE(_number / 0x100000000 | 0, offset + 5);\n      Object.assign(encode, {\n        bytes: 9\n      });\n    }\n    return buffer;\n  }\n  exports.encode = encode;\n  function decode(buffer, offset) {\n    if (!Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance');\n    if (!offset) offset = 0;\n    var first = buffer.readUInt8(offset);\n    // 8 bit\n    if (first < 0xfd) {\n      Object.assign(decode, {\n        bytes: 1\n      });\n      return first;\n      // 16 bit\n    } else if (first === 0xfd) {\n      Object.assign(decode, {\n        bytes: 3\n      });\n      return buffer.readUInt16LE(offset + 1);\n      // 32 bit\n    } else if (first === 0xfe) {\n      Object.assign(decode, {\n        bytes: 5\n      });\n      return buffer.readUInt32LE(offset + 1);\n      // 64 bit\n    } else {\n      Object.assign(decode, {\n        bytes: 9\n      });\n      var lo = buffer.readUInt32LE(offset + 1);\n      var hi = buffer.readUInt32LE(offset + 5);\n      var _number = hi * 0x0100000000 + lo;\n      checkUInt53(_number);\n      return _number;\n    }\n  }\n  exports.decode = decode;\n  function encodingLength(_number) {\n    checkUInt53(_number);\n    return _number < 0xfd ? 1 : _number <= 0xffff ? 3 : _number <= 0xffffffff ? 5 : 9;\n  }\n  exports.encodingLength = encodingLength;\n});","lineCount":89,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0],[8,2,4,0],[8,6,4,6,"MAX_SAFE_INTEGER"],[8,22,4,22],[8,25,4,25],[8,41,4,41],[9,2,5,0],[9,11,5,9,"checkUInt53"],[9,22,5,20,"checkUInt53"],[9,23,5,21,"n"],[9,24,5,22],[9,26,5,24],[10,4,6,2],[10,8,6,6,"n"],[10,9,6,7],[10,12,6,10],[10,13,6,11],[10,17,6,15,"n"],[10,18,6,16],[10,21,6,19,"MAX_SAFE_INTEGER"],[10,37,6,35],[10,41,6,39,"n"],[10,42,6,40],[10,45,6,43],[10,46,6,44],[10,51,6,49],[10,52,6,50],[10,54,7,4],[10,60,7,10],[10,64,7,14,"RangeError"],[10,74,7,24],[10,75,7,25],[10,95,7,45],[10,96,7,46],[11,2,8,0],[12,2,9,0],[12,11,9,9,"encode"],[12,17,9,15,"encode"],[12,18,9,16,"_number"],[12,25,9,23],[12,27,9,25,"buffer"],[12,33,9,31],[12,35,9,33,"offset"],[12,41,9,39],[12,43,9,41],[13,4,10,2,"checkUInt53"],[13,15,10,13],[13,16,10,14,"_number"],[13,23,10,21],[13,24,10,22],[14,4,11,2],[14,8,11,6],[14,9,11,7,"buffer"],[14,15,11,13],[14,17,11,15,"buffer"],[14,23,11,21],[14,26,11,24,"Buffer"],[14,32,11,30],[14,33,11,31,"allocUnsafe"],[14,44,11,42],[14,45,11,43,"encodingLength"],[14,59,11,57],[14,60,11,58,"_number"],[14,67,11,65],[14,68,11,66],[14,69,11,67],[15,4,12,2],[15,8,12,6],[15,9,12,7,"Buffer"],[15,15,12,13],[15,16,12,14,"isBuffer"],[15,24,12,22],[15,25,12,23,"buffer"],[15,31,12,29],[15,32,12,30],[15,34,13,4],[15,40,13,10],[15,44,13,14,"TypeError"],[15,53,13,23],[15,54,13,24],[15,88,13,58],[15,89,13,59],[16,4,14,2],[16,8,14,6],[16,9,14,7,"offset"],[16,15,14,13],[16,17,14,15,"offset"],[16,23,14,21],[16,26,14,24],[16,27,14,25],[17,4,15,2],[18,4,16,2],[18,8,16,6,"_number"],[18,15,16,13],[18,18,16,16],[18,22,16,20],[18,24,16,22],[19,6,17,4,"buffer"],[19,12,17,10],[19,13,17,11,"writeUInt8"],[19,23,17,21],[19,24,17,22,"_number"],[19,31,17,29],[19,33,17,31,"offset"],[19,39,17,37],[19,40,17,38],[20,6,18,4,"Object"],[20,12,18,10],[20,13,18,11,"assign"],[20,19,18,17],[20,20,18,18,"encode"],[20,26,18,24],[20,28,18,26],[21,8,18,28,"bytes"],[21,13,18,33],[21,15,18,35],[22,6,18,37],[22,7,18,38],[22,8,18,39],[23,6,19,4],[24,4,20,2],[24,5,20,3],[24,11,20,9],[24,15,20,13,"_number"],[24,22,20,20],[24,26,20,24],[24,32,20,30],[24,34,20,32],[25,6,21,4,"buffer"],[25,12,21,10],[25,13,21,11,"writeUInt8"],[25,23,21,21],[25,24,21,22],[25,28,21,26],[25,30,21,28,"offset"],[25,36,21,34],[25,37,21,35],[26,6,22,4,"buffer"],[26,12,22,10],[26,13,22,11,"writeUInt16LE"],[26,26,22,24],[26,27,22,25,"_number"],[26,34,22,32],[26,36,22,34,"offset"],[26,42,22,40],[26,45,22,43],[26,46,22,44],[26,47,22,45],[27,6,23,4,"Object"],[27,12,23,10],[27,13,23,11,"assign"],[27,19,23,17],[27,20,23,18,"encode"],[27,26,23,24],[27,28,23,26],[28,8,23,28,"bytes"],[28,13,23,33],[28,15,23,35],[29,6,23,37],[29,7,23,38],[29,8,23,39],[30,6,24,4],[31,4,25,2],[31,5,25,3],[31,11,25,9],[31,15,25,13,"_number"],[31,22,25,20],[31,26,25,24],[31,36,25,34],[31,38,25,36],[32,6,26,4,"buffer"],[32,12,26,10],[32,13,26,11,"writeUInt8"],[32,23,26,21],[32,24,26,22],[32,28,26,26],[32,30,26,28,"offset"],[32,36,26,34],[32,37,26,35],[33,6,27,4,"buffer"],[33,12,27,10],[33,13,27,11,"writeUInt32LE"],[33,26,27,24],[33,27,27,25,"_number"],[33,34,27,32],[33,36,27,34,"offset"],[33,42,27,40],[33,45,27,43],[33,46,27,44],[33,47,27,45],[34,6,28,4,"Object"],[34,12,28,10],[34,13,28,11,"assign"],[34,19,28,17],[34,20,28,18,"encode"],[34,26,28,24],[34,28,28,26],[35,8,28,28,"bytes"],[35,13,28,33],[35,15,28,35],[36,6,28,37],[36,7,28,38],[36,8,28,39],[37,6,29,4],[38,4,30,2],[38,5,30,3],[38,11,30,9],[39,6,31,4,"buffer"],[39,12,31,10],[39,13,31,11,"writeUInt8"],[39,23,31,21],[39,24,31,22],[39,28,31,26],[39,30,31,28,"offset"],[39,36,31,34],[39,37,31,35],[40,6,32,4,"buffer"],[40,12,32,10],[40,13,32,11,"writeUInt32LE"],[40,26,32,24],[40,27,32,25,"_number"],[40,34,32,32],[40,39,32,37],[40,40,32,38],[40,42,32,40,"offset"],[40,48,32,46],[40,51,32,49],[40,52,32,50],[40,53,32,51],[41,6,33,4,"buffer"],[41,12,33,10],[41,13,33,11,"writeUInt32LE"],[41,26,33,24],[41,27,33,26,"_number"],[41,34,33,33],[41,37,33,36],[41,48,33,47],[41,51,33,51],[41,52,33,52],[41,54,33,54,"offset"],[41,60,33,60],[41,63,33,63],[41,64,33,64],[41,65,33,65],[42,6,34,4,"Object"],[42,12,34,10],[42,13,34,11,"assign"],[42,19,34,17],[42,20,34,18,"encode"],[42,26,34,24],[42,28,34,26],[43,8,34,28,"bytes"],[43,13,34,33],[43,15,34,35],[44,6,34,37],[44,7,34,38],[44,8,34,39],[45,4,35,2],[46,4,36,2],[46,11,36,9,"buffer"],[46,17,36,15],[47,2,37,0],[48,2,38,0,"exports"],[48,9,38,7],[48,10,38,8,"encode"],[48,16,38,14],[48,19,38,17,"encode"],[48,25,38,23],[49,2,39,0],[49,11,39,9,"decode"],[49,17,39,15,"decode"],[49,18,39,16,"buffer"],[49,24,39,22],[49,26,39,24,"offset"],[49,32,39,30],[49,34,39,32],[50,4,40,2],[50,8,40,6],[50,9,40,7,"Buffer"],[50,15,40,13],[50,16,40,14,"isBuffer"],[50,24,40,22],[50,25,40,23,"buffer"],[50,31,40,29],[50,32,40,30],[50,34,41,4],[50,40,41,10],[50,44,41,14,"TypeError"],[50,53,41,23],[50,54,41,24],[50,88,41,58],[50,89,41,59],[51,4,42,2],[51,8,42,6],[51,9,42,7,"offset"],[51,15,42,13],[51,17,42,15,"offset"],[51,23,42,21],[51,26,42,24],[51,27,42,25],[52,4,43,2],[52,8,43,8,"first"],[52,13,43,13],[52,16,43,16,"buffer"],[52,22,43,22],[52,23,43,23,"readUInt8"],[52,32,43,32],[52,33,43,33,"offset"],[52,39,43,39],[52,40,43,40],[53,4,44,2],[54,4,45,2],[54,8,45,6,"first"],[54,13,45,11],[54,16,45,14],[54,20,45,18],[54,22,45,20],[55,6,46,4,"Object"],[55,12,46,10],[55,13,46,11,"assign"],[55,19,46,17],[55,20,46,18,"decode"],[55,26,46,24],[55,28,46,26],[56,8,46,28,"bytes"],[56,13,46,33],[56,15,46,35],[57,6,46,37],[57,7,46,38],[57,8,46,39],[58,6,47,4],[58,13,47,11,"first"],[58,18,47,16],[59,6,48,4],[60,4,49,2],[60,5,49,3],[60,11,49,9],[60,15,49,13,"first"],[60,20,49,18],[60,25,49,23],[60,29,49,27],[60,31,49,29],[61,6,50,4,"Object"],[61,12,50,10],[61,13,50,11,"assign"],[61,19,50,17],[61,20,50,18,"decode"],[61,26,50,24],[61,28,50,26],[62,8,50,28,"bytes"],[62,13,50,33],[62,15,50,35],[63,6,50,37],[63,7,50,38],[63,8,50,39],[64,6,51,4],[64,13,51,11,"buffer"],[64,19,51,17],[64,20,51,18,"readUInt16LE"],[64,32,51,30],[64,33,51,31,"offset"],[64,39,51,37],[64,42,51,40],[64,43,51,41],[64,44,51,42],[65,6,52,4],[66,4,53,2],[66,5,53,3],[66,11,53,9],[66,15,53,13,"first"],[66,20,53,18],[66,25,53,23],[66,29,53,27],[66,31,53,29],[67,6,54,4,"Object"],[67,12,54,10],[67,13,54,11,"assign"],[67,19,54,17],[67,20,54,18,"decode"],[67,26,54,24],[67,28,54,26],[68,8,54,28,"bytes"],[68,13,54,33],[68,15,54,35],[69,6,54,37],[69,7,54,38],[69,8,54,39],[70,6,55,4],[70,13,55,11,"buffer"],[70,19,55,17],[70,20,55,18,"readUInt32LE"],[70,32,55,30],[70,33,55,31,"offset"],[70,39,55,37],[70,42,55,40],[70,43,55,41],[70,44,55,42],[71,6,56,4],[72,4,57,2],[72,5,57,3],[72,11,57,9],[73,6,58,4,"Object"],[73,12,58,10],[73,13,58,11,"assign"],[73,19,58,17],[73,20,58,18,"decode"],[73,26,58,24],[73,28,58,26],[74,8,58,28,"bytes"],[74,13,58,33],[74,15,58,35],[75,6,58,37],[75,7,58,38],[75,8,58,39],[76,6,59,4],[76,10,59,10,"lo"],[76,12,59,12],[76,15,59,15,"buffer"],[76,21,59,21],[76,22,59,22,"readUInt32LE"],[76,34,59,34],[76,35,59,35,"offset"],[76,41,59,41],[76,44,59,44],[76,45,59,45],[76,46,59,46],[77,6,60,4],[77,10,60,10,"hi"],[77,12,60,12],[77,15,60,15,"buffer"],[77,21,60,21],[77,22,60,22,"readUInt32LE"],[77,34,60,34],[77,35,60,35,"offset"],[77,41,60,41],[77,44,60,44],[77,45,60,45],[77,46,60,46],[78,6,61,4],[78,10,61,10,"_number"],[78,17,61,17],[78,20,61,20,"hi"],[78,22,61,22],[78,25,61,25],[78,37,61,37],[78,40,61,40,"lo"],[78,42,61,42],[79,6,62,4,"checkUInt53"],[79,17,62,15],[79,18,62,16,"_number"],[79,25,62,23],[79,26,62,24],[80,6,63,4],[80,13,63,11,"_number"],[80,20,63,18],[81,4,64,2],[82,2,65,0],[83,2,66,0,"exports"],[83,9,66,7],[83,10,66,8,"decode"],[83,16,66,14],[83,19,66,17,"decode"],[83,25,66,23],[84,2,67,0],[84,11,67,9,"encodingLength"],[84,25,67,23,"encodingLength"],[84,26,67,24,"_number"],[84,33,67,31],[84,35,67,33],[85,4,68,2,"checkUInt53"],[85,15,68,13],[85,16,68,14,"_number"],[85,23,68,21],[85,24,68,22],[86,4,69,2],[86,11,69,9,"_number"],[86,18,69,16],[86,21,69,19],[86,25,69,23],[86,28,70,6],[86,29,70,7],[86,32,71,6,"_number"],[86,39,71,13],[86,43,71,17],[86,49,71,23],[86,52,72,6],[86,53,72,7],[86,56,73,6,"_number"],[86,63,73,13],[86,67,73,17],[86,77,73,27],[86,80,74,6],[86,81,74,7],[86,84,75,6],[86,85,75,7],[87,2,76,0],[88,2,77,0,"exports"],[88,9,77,7],[88,10,77,8,"encodingLength"],[88,24,77,22],[88,27,77,25,"encodingLength"],[88,41,77,39],[89,0,77,40],[89,3]],"functionMap":{"names":["<global>","checkUInt53","encode","decode","encodingLength"],"mappings":"AAA;ACI;CDG;AEC;CF4B;AGE;CH0B;AIE;CJS"}},"type":"js/module"}]}