{"dependencies":[{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":122,"column":0,"index":4056}}],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE="}},{"name":"../types","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":16,"index":481},"end":{"line":16,"column":35,"index":500}}],"key":"2+h21LM/+NVMQKDHaRawSQRYYOQ="}},{"name":"../crypto","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":14,"column":16,"index":394},"end":{"line":14,"column":36,"index":414}},{"start":{"line":14,"column":16,"index":394},"end":{"line":14,"column":36,"index":414}},{"start":{"line":14,"column":16,"index":394},"end":{"line":14,"column":36,"index":414}}],"key":"TgS5uCpY5sqlRGD1wvu5hgVfKjo="}},{"name":"buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":17,"index":318},"end":{"line":12,"column":34,"index":335}},{"start":{"line":12,"column":17,"index":318},"end":{"line":12,"column":34,"index":335}},{"start":{"line":12,"column":17,"index":318},"end":{"line":12,"column":34,"index":335}},{"start":{"line":12,"column":17,"index":318},"end":{"line":12,"column":34,"index":335}},{"start":{"line":12,"column":17,"index":318},"end":{"line":12,"column":34,"index":335}},{"start":{"line":12,"column":17,"index":318},"end":{"line":12,"column":34,"index":335}},{"start":{"line":12,"column":17,"index":318},"end":{"line":12,"column":34,"index":335}},{"start":{"line":12,"column":17,"index":318},"end":{"line":12,"column":34,"index":335}}],"key":"kYC7RadcB7k9ZEYd5zOmBbv1F14="}},{"name":"../ecc_lib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":18,"index":355},"end":{"line":13,"column":39,"index":376}}],"key":"lqus/nh2MqRIcBp+sbH+3ERr3R0="}},{"name":"../bufferutils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":15,"column":22,"index":438},"end":{"line":15,"column":47,"index":463}},{"start":{"line":15,"column":22,"index":438},"end":{"line":15,"column":47,"index":463}}],"key":"Qyadvo+037uRA06UjQI2p3aBqVs="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/toConsumableArray\");\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.tweakKey = exports.tapTweakHash = exports.tapleafHash = exports.findScriptPath = exports.toHashTree = exports.rootHashFromPath = exports.MAX_TAPTREE_DEPTH = exports.LEAF_VERSION_TAPSCRIPT = void 0;\n  exports.LEAF_VERSION_TAPSCRIPT = 0xc0;\n  exports.MAX_TAPTREE_DEPTH = 128;\n  var isHashBranch = function isHashBranch(ht) {\n    return 'left' in ht && 'right' in ht;\n  };\n  /**\n   * Calculates the root hash from a given control block and leaf hash.\n   * @param controlBlock - The control block buffer.\n   * @param leafHash - The leaf hash buffer.\n   * @returns The root hash buffer.\n   * @throws {TypeError} If the control block length is less than 33.\n   */\n  function rootHashFromPath(controlBlock, leafHash) {\n    if (controlBlock.length < 33) throw new TypeError(`The control-block length is too small. Got ${controlBlock.length}, expected min 33.`);\n    var m = (controlBlock.length - 33) / 32;\n    var kj = leafHash;\n    for (var j = 0; j < m; j++) {\n      var ej = controlBlock.slice(33 + 32 * j, 65 + 32 * j);\n      if (kj.compare(ej) < 0) {\n        kj = tapBranchHash(kj, ej);\n      } else {\n        kj = tapBranchHash(ej, kj);\n      }\n    }\n    return kj;\n  }\n  exports.rootHashFromPath = rootHashFromPath;\n  /**\n   * Build a hash tree of merkle nodes from the scripts binary tree.\n   * @param scriptTree - the tree of scripts to pairwise hash.\n   */\n  function toHashTree(scriptTree) {\n    if ((0, _$$_REQUIRE(_dependencyMap[1], \"../types\").isTapleaf)(scriptTree)) return {\n      hash: tapleafHash(scriptTree)\n    };\n    var hashes = [toHashTree(scriptTree[0]), toHashTree(scriptTree[1])];\n    hashes.sort(function (a, b) {\n      return a.hash.compare(b.hash);\n    });\n    var left = hashes[0],\n      right = hashes[1];\n    return {\n      hash: tapBranchHash(left.hash, right.hash),\n      left: left,\n      right: right\n    };\n  }\n  exports.toHashTree = toHashTree;\n  /**\n   * Given a HashTree, finds the path from a particular hash to the root.\n   * @param node - the root of the tree\n   * @param hash - the hash to search for\n   * @returns - array of sibling hashes, from leaf (inclusive) to root\n   * (exclusive) needed to prove inclusion of the specified hash. undefined if no\n   * path is found\n   */\n  function findScriptPath(node, hash) {\n    if (isHashBranch(node)) {\n      var leftPath = findScriptPath(node.left, hash);\n      if (leftPath !== undefined) return [].concat(_toConsumableArray(leftPath), [node.right.hash]);\n      var rightPath = findScriptPath(node.right, hash);\n      if (rightPath !== undefined) return [].concat(_toConsumableArray(rightPath), [node.left.hash]);\n    } else if (node.hash.equals(hash)) {\n      return [];\n    }\n    return undefined;\n  }\n  exports.findScriptPath = findScriptPath;\n  function tapleafHash(leaf) {\n    var version = leaf.version || exports.LEAF_VERSION_TAPSCRIPT;\n    return _$$_REQUIRE(_dependencyMap[2], \"../crypto\").taggedHash('TapLeaf', _$$_REQUIRE(_dependencyMap[3], \"buffer\").Buffer.concat([_$$_REQUIRE(_dependencyMap[3], \"buffer\").Buffer.from([version]), serializeScript(leaf.output)]));\n  }\n  exports.tapleafHash = tapleafHash;\n  function tapTweakHash(pubKey, h) {\n    return _$$_REQUIRE(_dependencyMap[2], \"../crypto\").taggedHash('TapTweak', _$$_REQUIRE(_dependencyMap[3], \"buffer\").Buffer.concat(h ? [pubKey, h] : [pubKey]));\n  }\n  exports.tapTweakHash = tapTweakHash;\n  function tweakKey(pubKey, h) {\n    if (!_$$_REQUIRE(_dependencyMap[3], \"buffer\").Buffer.isBuffer(pubKey)) return null;\n    if (pubKey.length !== 32) return null;\n    if (h && h.length !== 32) return null;\n    var tweakHash = tapTweakHash(pubKey, h);\n    var res = (0, _$$_REQUIRE(_dependencyMap[4], \"../ecc_lib\").getEccLib)().xOnlyPointAddTweak(pubKey, tweakHash);\n    if (!res || res.xOnlyPubkey === null) return null;\n    return {\n      parity: res.parity,\n      x: _$$_REQUIRE(_dependencyMap[3], \"buffer\").Buffer.from(res.xOnlyPubkey)\n    };\n  }\n  exports.tweakKey = tweakKey;\n  function tapBranchHash(a, b) {\n    return _$$_REQUIRE(_dependencyMap[2], \"../crypto\").taggedHash('TapBranch', _$$_REQUIRE(_dependencyMap[3], \"buffer\").Buffer.concat([a, b]));\n  }\n  function serializeScript(s) {\n    var varintLen = _$$_REQUIRE(_dependencyMap[5], \"../bufferutils\").varuint.encodingLength(s.length);\n    var buffer = _$$_REQUIRE(_dependencyMap[3], \"buffer\").Buffer.allocUnsafe(varintLen); // better\n    _$$_REQUIRE(_dependencyMap[5], \"../bufferutils\").varuint.encode(s.length, buffer);\n    return _$$_REQUIRE(_dependencyMap[3], \"buffer\").Buffer.concat([buffer, s]);\n  }\n});","lineCount":108,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_toConsumableArray"],[4,24,1,13],[4,27,1,13,"_$$_REQUIRE"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,2,0,"Object"],[5,8,2,6],[5,9,2,7,"defineProperty"],[5,23,2,21],[5,24,2,22,"exports"],[5,31,2,29],[5,33,2,31],[5,45,2,43],[5,47,2,45],[6,4,2,47,"value"],[6,9,2,52],[6,11,2,54],[7,2,2,59],[7,3,2,60],[7,4,2,61],[8,2,3,0,"exports"],[8,9,3,7],[8,10,3,8,"tweakKey"],[8,18,3,16],[8,21,4,2,"exports"],[8,28,4,9],[8,29,4,10,"tapTweakHash"],[8,41,4,22],[8,44,5,2,"exports"],[8,51,5,9],[8,52,5,10,"tapleafHash"],[8,63,5,21],[8,66,6,2,"exports"],[8,73,6,9],[8,74,6,10,"findScriptPath"],[8,88,6,24],[8,91,7,2,"exports"],[8,98,7,9],[8,99,7,10,"toHashTree"],[8,109,7,20],[8,112,8,2,"exports"],[8,119,8,9],[8,120,8,10,"rootHashFromPath"],[8,136,8,26],[8,139,9,2,"exports"],[8,146,9,9],[8,147,9,10,"MAX_TAPTREE_DEPTH"],[8,164,9,27],[8,167,10,2,"exports"],[8,174,10,9],[8,175,10,10,"LEAF_VERSION_TAPSCRIPT"],[8,197,10,32],[8,200,11,4],[8,205,11,9],[8,206,11,10],[9,2,17,0,"exports"],[9,9,17,7],[9,10,17,8,"LEAF_VERSION_TAPSCRIPT"],[9,32,17,30],[9,35,17,33],[9,39,17,37],[10,2,18,0,"exports"],[10,9,18,7],[10,10,18,8,"MAX_TAPTREE_DEPTH"],[10,27,18,25],[10,30,18,28],[10,33,18,31],[11,2,19,0],[11,6,19,6,"isHashBranch"],[11,18,19,18],[11,21,19,21],[11,30,19,6,"isHashBranch"],[11,42,19,18,"isHashBranch"],[11,43,19,21,"ht"],[11,45,19,23],[12,4,19,23],[12,11,19,27],[12,17,19,33],[12,21,19,37,"ht"],[12,23,19,39],[12,27,19,43],[12,34,19,50],[12,38,19,54,"ht"],[12,40,19,56],[13,2,19,56],[14,2,20,0],[15,0,21,0],[16,0,22,0],[17,0,23,0],[18,0,24,0],[19,0,25,0],[20,0,26,0],[21,2,27,0],[21,11,27,9,"rootHashFromPath"],[21,27,27,25,"rootHashFromPath"],[21,28,27,26,"controlBlock"],[21,40,27,38],[21,42,27,40,"leafHash"],[21,50,27,48],[21,52,27,50],[22,4,28,2],[22,8,28,6,"controlBlock"],[22,20,28,18],[22,21,28,19,"length"],[22,27,28,25],[22,30,28,28],[22,32,28,30],[22,34,29,4],[22,40,29,10],[22,44,29,14,"TypeError"],[22,53,29,23],[22,54,30,6],[22,100,30,52,"controlBlock"],[22,112,30,64],[22,113,30,65,"length"],[22,119,30,71],[22,139,31,4],[22,140,31,5],[23,4,32,2],[23,8,32,8,"m"],[23,9,32,9],[23,12,32,12],[23,13,32,13,"controlBlock"],[23,25,32,25],[23,26,32,26,"length"],[23,32,32,32],[23,35,32,35],[23,37,32,37],[23,41,32,41],[23,43,32,43],[24,4,33,2],[24,8,33,6,"kj"],[24,10,33,8],[24,13,33,11,"leafHash"],[24,21,33,19],[25,4,34,2],[25,9,34,7],[25,13,34,11,"j"],[25,14,34,12],[25,17,34,15],[25,18,34,16],[25,20,34,18,"j"],[25,21,34,19],[25,24,34,22,"m"],[25,25,34,23],[25,27,34,25,"j"],[25,28,34,26],[25,30,34,28],[25,32,34,30],[26,6,35,4],[26,10,35,10,"ej"],[26,12,35,12],[26,15,35,15,"controlBlock"],[26,27,35,27],[26,28,35,28,"slice"],[26,33,35,33],[26,34,35,34],[26,36,35,36],[26,39,35,39],[26,41,35,41],[26,44,35,44,"j"],[26,45,35,45],[26,47,35,47],[26,49,35,49],[26,52,35,52],[26,54,35,54],[26,57,35,57,"j"],[26,58,35,58],[26,59,35,59],[27,6,36,4],[27,10,36,8,"kj"],[27,12,36,10],[27,13,36,11,"compare"],[27,20,36,18],[27,21,36,19,"ej"],[27,23,36,21],[27,24,36,22],[27,27,36,25],[27,28,36,26],[27,30,36,28],[28,8,37,6,"kj"],[28,10,37,8],[28,13,37,11,"tapBranchHash"],[28,26,37,24],[28,27,37,25,"kj"],[28,29,37,27],[28,31,37,29,"ej"],[28,33,37,31],[28,34,37,32],[29,6,38,4],[29,7,38,5],[29,13,38,11],[30,8,39,6,"kj"],[30,10,39,8],[30,13,39,11,"tapBranchHash"],[30,26,39,24],[30,27,39,25,"ej"],[30,29,39,27],[30,31,39,29,"kj"],[30,33,39,31],[30,34,39,32],[31,6,40,4],[32,4,41,2],[33,4,42,2],[33,11,42,9,"kj"],[33,13,42,11],[34,2,43,0],[35,2,44,0,"exports"],[35,9,44,7],[35,10,44,8,"rootHashFromPath"],[35,26,44,24],[35,29,44,27,"rootHashFromPath"],[35,45,44,43],[36,2,45,0],[37,0,46,0],[38,0,47,0],[39,0,48,0],[40,2,49,0],[40,11,49,9,"toHashTree"],[40,21,49,19,"toHashTree"],[40,22,49,20,"scriptTree"],[40,32,49,30],[40,34,49,32],[41,4,50,2],[41,8,50,6],[41,9,50,7],[41,10,50,8],[41,12,50,10,"_$$_REQUIRE"],[41,23,50,10],[41,24,50,10,"_dependencyMap"],[41,38,50,10],[41,55,50,18,"isTapleaf"],[41,64,50,27],[41,66,50,29,"scriptTree"],[41,76,50,39],[41,77,50,40],[41,79,51,4],[41,86,51,11],[42,6,51,13,"hash"],[42,10,51,17],[42,12,51,19,"tapleafHash"],[42,23,51,30],[42,24,51,31,"scriptTree"],[42,34,51,41],[43,4,51,43],[43,5,51,44],[44,4,52,2],[44,8,52,8,"hashes"],[44,14,52,14],[44,17,52,17],[44,18,52,18,"toHashTree"],[44,28,52,28],[44,29,52,29,"scriptTree"],[44,39,52,39],[44,40,52,40],[44,41,52,41],[44,42,52,42],[44,43,52,43],[44,45,52,45,"toHashTree"],[44,55,52,55],[44,56,52,56,"scriptTree"],[44,66,52,66],[44,67,52,67],[44,68,52,68],[44,69,52,69],[44,70,52,70],[44,71,52,71],[45,4,53,2,"hashes"],[45,10,53,8],[45,11,53,9,"sort"],[45,15,53,13],[45,16,53,14],[45,26,53,15,"a"],[45,27,53,16],[45,29,53,18,"b"],[45,30,53,19],[46,6,53,19],[46,13,53,24,"a"],[46,14,53,25],[46,15,53,26,"hash"],[46,19,53,30],[46,20,53,31,"compare"],[46,27,53,38],[46,28,53,39,"b"],[46,29,53,40],[46,30,53,41,"hash"],[46,34,53,45],[46,35,53,46],[47,4,53,46],[47,6,53,47],[48,4,54,2],[48,8,54,9,"left"],[48,12,54,13],[48,15,54,24,"hashes"],[48,21,54,30],[49,6,54,15,"right"],[49,11,54,20],[49,14,54,24,"hashes"],[49,20,54,30],[50,4,55,2],[50,11,55,9],[51,6,56,4,"hash"],[51,10,56,8],[51,12,56,10,"tapBranchHash"],[51,25,56,23],[51,26,56,24,"left"],[51,30,56,28],[51,31,56,29,"hash"],[51,35,56,33],[51,37,56,35,"right"],[51,42,56,40],[51,43,56,41,"hash"],[51,47,56,45],[51,48,56,46],[52,6,57,4,"left"],[52,10,57,8],[52,12,57,4,"left"],[52,16,57,8],[53,6,58,4,"right"],[53,11,58,9],[53,13,58,4,"right"],[54,4,59,2],[54,5,59,3],[55,2,60,0],[56,2,61,0,"exports"],[56,9,61,7],[56,10,61,8,"toHashTree"],[56,20,61,18],[56,23,61,21,"toHashTree"],[56,33,61,31],[57,2,62,0],[58,0,63,0],[59,0,64,0],[60,0,65,0],[61,0,66,0],[62,0,67,0],[63,0,68,0],[64,0,69,0],[65,2,70,0],[65,11,70,9,"findScriptPath"],[65,25,70,23,"findScriptPath"],[65,26,70,24,"node"],[65,30,70,28],[65,32,70,30,"hash"],[65,36,70,34],[65,38,70,36],[66,4,71,2],[66,8,71,6,"isHashBranch"],[66,20,71,18],[66,21,71,19,"node"],[66,25,71,23],[66,26,71,24],[66,28,71,26],[67,6,72,4],[67,10,72,10,"leftPath"],[67,18,72,18],[67,21,72,21,"findScriptPath"],[67,35,72,35],[67,36,72,36,"node"],[67,40,72,40],[67,41,72,41,"left"],[67,45,72,45],[67,47,72,47,"hash"],[67,51,72,51],[67,52,72,52],[68,6,73,4],[68,10,73,8,"leftPath"],[68,18,73,16],[68,23,73,21,"undefined"],[68,32,73,30],[68,34,73,32],[68,44,73,32,"concat"],[68,50,73,32],[68,51,73,32,"_toConsumableArray"],[68,69,73,32],[68,70,73,43,"leftPath"],[68,78,73,51],[68,82,73,53,"node"],[68,86,73,57],[68,87,73,58,"right"],[68,92,73,63],[68,93,73,64,"hash"],[68,97,73,68],[69,6,74,4],[69,10,74,10,"rightPath"],[69,19,74,19],[69,22,74,22,"findScriptPath"],[69,36,74,36],[69,37,74,37,"node"],[69,41,74,41],[69,42,74,42,"right"],[69,47,74,47],[69,49,74,49,"hash"],[69,53,74,53],[69,54,74,54],[70,6,75,4],[70,10,75,8,"rightPath"],[70,19,75,17],[70,24,75,22,"undefined"],[70,33,75,31],[70,35,75,33],[70,45,75,33,"concat"],[70,51,75,33],[70,52,75,33,"_toConsumableArray"],[70,70,75,33],[70,71,75,44,"rightPath"],[70,80,75,53],[70,84,75,55,"node"],[70,88,75,59],[70,89,75,60,"left"],[70,93,75,64],[70,94,75,65,"hash"],[70,98,75,69],[71,4,76,2],[71,5,76,3],[71,11,76,9],[71,15,76,13,"node"],[71,19,76,17],[71,20,76,18,"hash"],[71,24,76,22],[71,25,76,23,"equals"],[71,31,76,29],[71,32,76,30,"hash"],[71,36,76,34],[71,37,76,35],[71,39,76,37],[72,6,77,4],[72,13,77,11],[72,15,77,13],[73,4,78,2],[74,4,79,2],[74,11,79,9,"undefined"],[74,20,79,18],[75,2,80,0],[76,2,81,0,"exports"],[76,9,81,7],[76,10,81,8,"findScriptPath"],[76,24,81,22],[76,27,81,25,"findScriptPath"],[76,41,81,39],[77,2,82,0],[77,11,82,9,"tapleafHash"],[77,22,82,20,"tapleafHash"],[77,23,82,21,"leaf"],[77,27,82,25],[77,29,82,27],[78,4,83,2],[78,8,83,8,"version"],[78,15,83,15],[78,18,83,18,"leaf"],[78,22,83,22],[78,23,83,23,"version"],[78,30,83,30],[78,34,83,34,"exports"],[78,41,83,41],[78,42,83,42,"LEAF_VERSION_TAPSCRIPT"],[78,64,83,64],[79,4,84,2],[79,11,84,9,"_$$_REQUIRE"],[79,22,84,9],[79,23,84,9,"_dependencyMap"],[79,37,84,9],[79,55,84,17,"taggedHash"],[79,65,84,27],[79,66,85,4],[79,75,85,13],[79,77,86,4,"_$$_REQUIRE"],[79,88,86,4],[79,89,86,4,"_dependencyMap"],[79,103,86,4],[79,118,86,13,"Buffer"],[79,124,86,19],[79,125,86,20,"concat"],[79,131,86,26],[79,132,86,27],[79,133,87,6,"_$$_REQUIRE"],[79,144,87,6],[79,145,87,6,"_dependencyMap"],[79,159,87,6],[79,174,87,15,"Buffer"],[79,180,87,21],[79,181,87,22,"from"],[79,185,87,26],[79,186,87,27],[79,187,87,28,"version"],[79,194,87,35],[79,195,87,36],[79,196,87,37],[79,198,88,6,"serializeScript"],[79,213,88,21],[79,214,88,22,"leaf"],[79,218,88,26],[79,219,88,27,"output"],[79,225,88,33],[79,226,88,34],[79,227,89,5],[79,228,90,2],[79,229,90,3],[80,2,91,0],[81,2,92,0,"exports"],[81,9,92,7],[81,10,92,8,"tapleafHash"],[81,21,92,19],[81,24,92,22,"tapleafHash"],[81,35,92,33],[82,2,93,0],[82,11,93,9,"tapTweakHash"],[82,23,93,21,"tapTweakHash"],[82,24,93,22,"pubKey"],[82,30,93,28],[82,32,93,30,"h"],[82,33,93,31],[82,35,93,33],[83,4,94,2],[83,11,94,9,"_$$_REQUIRE"],[83,22,94,9],[83,23,94,9,"_dependencyMap"],[83,37,94,9],[83,55,94,17,"taggedHash"],[83,65,94,27],[83,66,95,4],[83,76,95,14],[83,78,96,4,"_$$_REQUIRE"],[83,89,96,4],[83,90,96,4,"_dependencyMap"],[83,104,96,4],[83,119,96,13,"Buffer"],[83,125,96,19],[83,126,96,20,"concat"],[83,132,96,26],[83,133,96,27,"h"],[83,134,96,28],[83,137,96,31],[83,138,96,32,"pubKey"],[83,144,96,38],[83,146,96,40,"h"],[83,147,96,41],[83,148,96,42],[83,151,96,45],[83,152,96,46,"pubKey"],[83,158,96,52],[83,159,96,53],[83,160,97,2],[83,161,97,3],[84,2,98,0],[85,2,99,0,"exports"],[85,9,99,7],[85,10,99,8,"tapTweakHash"],[85,22,99,20],[85,25,99,23,"tapTweakHash"],[85,37,99,35],[86,2,100,0],[86,11,100,9,"tweakKey"],[86,19,100,17,"tweakKey"],[86,20,100,18,"pubKey"],[86,26,100,24],[86,28,100,26,"h"],[86,29,100,27],[86,31,100,29],[87,4,101,2],[87,8,101,6],[87,9,101,7,"_$$_REQUIRE"],[87,20,101,7],[87,21,101,7,"_dependencyMap"],[87,35,101,7],[87,50,101,16,"Buffer"],[87,56,101,22],[87,57,101,23,"isBuffer"],[87,65,101,31],[87,66,101,32,"pubKey"],[87,72,101,38],[87,73,101,39],[87,75,101,41],[87,82,101,48],[87,86,101,52],[88,4,102,2],[88,8,102,6,"pubKey"],[88,14,102,12],[88,15,102,13,"length"],[88,21,102,19],[88,26,102,24],[88,28,102,26],[88,30,102,28],[88,37,102,35],[88,41,102,39],[89,4,103,2],[89,8,103,6,"h"],[89,9,103,7],[89,13,103,11,"h"],[89,14,103,12],[89,15,103,13,"length"],[89,21,103,19],[89,26,103,24],[89,28,103,26],[89,30,103,28],[89,37,103,35],[89,41,103,39],[90,4,104,2],[90,8,104,8,"tweakHash"],[90,17,104,17],[90,20,104,20,"tapTweakHash"],[90,32,104,32],[90,33,104,33,"pubKey"],[90,39,104,39],[90,41,104,41,"h"],[90,42,104,42],[90,43,104,43],[91,4,105,2],[91,8,105,8,"res"],[91,11,105,11],[91,14,105,14],[91,15,105,15],[91,16,105,16],[91,18,105,18,"_$$_REQUIRE"],[91,29,105,18],[91,30,105,18,"_dependencyMap"],[91,44,105,18],[91,63,105,28,"getEccLib"],[91,72,105,37],[91,74,105,39],[91,75,105,40],[91,76,105,41,"xOnlyPointAddTweak"],[91,94,105,59],[91,95,105,60,"pubKey"],[91,101,105,66],[91,103,105,68,"tweakHash"],[91,112,105,77],[91,113,105,78],[92,4,106,2],[92,8,106,6],[92,9,106,7,"res"],[92,12,106,10],[92,16,106,14,"res"],[92,19,106,17],[92,20,106,18,"xOnlyPubkey"],[92,31,106,29],[92,36,106,34],[92,40,106,38],[92,42,106,40],[92,49,106,47],[92,53,106,51],[93,4,107,2],[93,11,107,9],[94,6,108,4,"parity"],[94,12,108,10],[94,14,108,12,"res"],[94,17,108,15],[94,18,108,16,"parity"],[94,24,108,22],[95,6,109,4,"x"],[95,7,109,5],[95,9,109,7,"_$$_REQUIRE"],[95,20,109,7],[95,21,109,7,"_dependencyMap"],[95,35,109,7],[95,50,109,16,"Buffer"],[95,56,109,22],[95,57,109,23,"from"],[95,61,109,27],[95,62,109,28,"res"],[95,65,109,31],[95,66,109,32,"xOnlyPubkey"],[95,77,109,43],[96,4,110,2],[96,5,110,3],[97,2,111,0],[98,2,112,0,"exports"],[98,9,112,7],[98,10,112,8,"tweakKey"],[98,18,112,16],[98,21,112,19,"tweakKey"],[98,29,112,27],[99,2,113,0],[99,11,113,9,"tapBranchHash"],[99,24,113,22,"tapBranchHash"],[99,25,113,23,"a"],[99,26,113,24],[99,28,113,26,"b"],[99,29,113,27],[99,31,113,29],[100,4,114,2],[100,11,114,9,"_$$_REQUIRE"],[100,22,114,9],[100,23,114,9,"_dependencyMap"],[100,37,114,9],[100,55,114,17,"taggedHash"],[100,65,114,27],[100,66,114,28],[100,77,114,39],[100,79,114,41,"_$$_REQUIRE"],[100,90,114,41],[100,91,114,41,"_dependencyMap"],[100,105,114,41],[100,120,114,50,"Buffer"],[100,126,114,56],[100,127,114,57,"concat"],[100,133,114,63],[100,134,114,64],[100,135,114,65,"a"],[100,136,114,66],[100,138,114,68,"b"],[100,139,114,69],[100,140,114,70],[100,141,114,71],[100,142,114,72],[101,2,115,0],[102,2,116,0],[102,11,116,9,"serializeScript"],[102,26,116,24,"serializeScript"],[102,27,116,25,"s"],[102,28,116,26],[102,30,116,28],[103,4,117,2],[103,8,117,8,"varintLen"],[103,17,117,17],[103,20,117,20,"_$$_REQUIRE"],[103,31,117,20],[103,32,117,20,"_dependencyMap"],[103,46,117,20],[103,69,117,34,"varuint"],[103,76,117,41],[103,77,117,42,"encodingLength"],[103,91,117,56],[103,92,117,57,"s"],[103,93,117,58],[103,94,117,59,"length"],[103,100,117,65],[103,101,117,66],[104,4,118,2],[104,8,118,8,"buffer"],[104,14,118,14],[104,17,118,17,"_$$_REQUIRE"],[104,28,118,17],[104,29,118,17,"_dependencyMap"],[104,43,118,17],[104,58,118,26,"Buffer"],[104,64,118,32],[104,65,118,33,"allocUnsafe"],[104,76,118,44],[104,77,118,45,"varintLen"],[104,86,118,54],[104,87,118,55],[104,88,118,56],[104,89,118,57],[105,4,119,2,"_$$_REQUIRE"],[105,15,119,2],[105,16,119,2,"_dependencyMap"],[105,30,119,2],[105,53,119,16,"varuint"],[105,60,119,23],[105,61,119,24,"encode"],[105,67,119,30],[105,68,119,31,"s"],[105,69,119,32],[105,70,119,33,"length"],[105,76,119,39],[105,78,119,41,"buffer"],[105,84,119,47],[105,85,119,48],[106,4,120,2],[106,11,120,9,"_$$_REQUIRE"],[106,22,120,9],[106,23,120,9,"_dependencyMap"],[106,37,120,9],[106,52,120,18,"Buffer"],[106,58,120,24],[106,59,120,25,"concat"],[106,65,120,31],[106,66,120,32],[106,67,120,33,"buffer"],[106,73,120,39],[106,75,120,41,"s"],[106,76,120,42],[106,77,120,43],[106,78,120,44],[107,2,121,0],[108,0,121,1],[108,3]],"functionMap":{"names":["<global>","isHashBranch","rootHashFromPath","toHashTree","hashes.sort$argument_0","findScriptPath","tapleafHash","tapTweakHash","tweakKey","tapBranchHash","serializeScript"],"mappings":"AAA;qBCkB,mCD;AEQ;CFgB;AGM;cCI,gCD;CHO;AKU;CLU;AME;CNS;AOE;CPK;AQE;CRW;ASE;CTE;AUC;CVK"}},"type":"js/module"}]}