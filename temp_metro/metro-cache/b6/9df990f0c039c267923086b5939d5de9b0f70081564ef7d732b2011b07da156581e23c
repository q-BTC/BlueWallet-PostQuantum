{"dependencies":[{"name":"../definition-syntax/parse","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":12,"index":12},"end":{"line":1,"column":49,"index":49}}],"key":"sn+RN7tJU4ThPOKAEy6L7OdQWFs="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var MATCH = {\n    type: 'Match'\n  };\n  var MISMATCH = {\n    type: 'Mismatch'\n  };\n  var DISALLOW_EMPTY = {\n    type: 'DisallowEmpty'\n  };\n  var LEFTPARENTHESIS = 40; // (\n  var RIGHTPARENTHESIS = 41; // )\n\n  function createCondition(match, thenBranch, elseBranch) {\n    // reduce node count\n    if (thenBranch === MATCH && elseBranch === MISMATCH) {\n      return match;\n    }\n    if (match === MATCH && thenBranch === MATCH && elseBranch === MATCH) {\n      return match;\n    }\n    if (match.type === 'If' && match.else === MISMATCH && thenBranch === MATCH) {\n      thenBranch = match.then;\n      match = match.match;\n    }\n    return {\n      type: 'If',\n      match: match,\n      then: thenBranch,\n      else: elseBranch\n    };\n  }\n  function isFunctionType(name) {\n    return name.length > 2 && name.charCodeAt(name.length - 2) === LEFTPARENTHESIS && name.charCodeAt(name.length - 1) === RIGHTPARENTHESIS;\n  }\n  function isEnumCapatible(term) {\n    return term.type === 'Keyword' || term.type === 'AtKeyword' || term.type === 'Function' || term.type === 'Type' && isFunctionType(term.name);\n  }\n  function buildGroupMatchGraph(combinator, terms, atLeastOneTermMatched) {\n    switch (combinator) {\n      case ' ':\n        // Juxtaposing components means that all of them must occur, in the given order.\n        //\n        // a b c\n        // =\n        // match a\n        //   then match b\n        //     then match c\n        //       then MATCH\n        //       else MISMATCH\n        //     else MISMATCH\n        //   else MISMATCH\n        var result = MATCH;\n        for (var i = terms.length - 1; i >= 0; i--) {\n          var term = terms[i];\n          result = createCondition(term, result, MISMATCH);\n        }\n        ;\n        return result;\n      case '|':\n        // A bar (|) separates two or more alternatives: exactly one of them must occur.\n        //\n        // a | b | c\n        // =\n        // match a\n        //   then MATCH\n        //   else match b\n        //     then MATCH\n        //     else match c\n        //       then MATCH\n        //       else MISMATCH\n\n        var result = MISMATCH;\n        var map = null;\n        for (var i = terms.length - 1; i >= 0; i--) {\n          var term = terms[i];\n\n          // reduce sequence of keywords into a Enum\n          if (isEnumCapatible(term)) {\n            if (map === null && i > 0 && isEnumCapatible(terms[i - 1])) {\n              map = Object.create(null);\n              result = createCondition({\n                type: 'Enum',\n                map: map\n              }, MATCH, result);\n            }\n            if (map !== null) {\n              var key = (isFunctionType(term.name) ? term.name.slice(0, -1) : term.name).toLowerCase();\n              if (key in map === false) {\n                map[key] = term;\n                continue;\n              }\n            }\n          }\n          map = null;\n\n          // create a new conditonal node\n          result = createCondition(term, MATCH, result);\n        }\n        ;\n        return result;\n      case '&&':\n        // A double ampersand (&&) separates two or more components,\n        // all of which must occur, in any order.\n\n        // Use MatchOnce for groups with a large number of terms,\n        // since &&-groups produces at least N!-node trees\n        if (terms.length > 5) {\n          return {\n            type: 'MatchOnce',\n            terms: terms,\n            all: true\n          };\n        }\n\n        // Use a combination tree for groups with small number of terms\n        //\n        // a && b && c\n        // =\n        // match a\n        //   then [b && c]\n        //   else match b\n        //     then [a && c]\n        //     else match c\n        //       then [a && b]\n        //       else MISMATCH\n        //\n        // a && b\n        // =\n        // match a\n        //   then match b\n        //     then MATCH\n        //     else MISMATCH\n        //   else match b\n        //     then match a\n        //       then MATCH\n        //       else MISMATCH\n        //     else MISMATCH\n        var result = MISMATCH;\n        for (var i = terms.length - 1; i >= 0; i--) {\n          var term = terms[i];\n          var thenClause;\n          if (terms.length > 1) {\n            thenClause = buildGroupMatchGraph(combinator, terms.filter(function (newGroupTerm) {\n              return newGroupTerm !== term;\n            }), false);\n          } else {\n            thenClause = MATCH;\n          }\n          result = createCondition(term, thenClause, result);\n        }\n        ;\n        return result;\n      case '||':\n        // A double bar (||) separates two or more options:\n        // one or more of them must occur, in any order.\n\n        // Use MatchOnce for groups with a large number of terms,\n        // since ||-groups produces at least N!-node trees\n        if (terms.length > 5) {\n          return {\n            type: 'MatchOnce',\n            terms: terms,\n            all: false\n          };\n        }\n\n        // Use a combination tree for groups with small number of terms\n        //\n        // a || b || c\n        // =\n        // match a\n        //   then [b || c]\n        //   else match b\n        //     then [a || c]\n        //     else match c\n        //       then [a || b]\n        //       else MISMATCH\n        //\n        // a || b\n        // =\n        // match a\n        //   then match b\n        //     then MATCH\n        //     else MATCH\n        //   else match b\n        //     then match a\n        //       then MATCH\n        //       else MATCH\n        //     else MISMATCH\n        var result = atLeastOneTermMatched ? MATCH : MISMATCH;\n        for (var i = terms.length - 1; i >= 0; i--) {\n          var term = terms[i];\n          var thenClause;\n          if (terms.length > 1) {\n            thenClause = buildGroupMatchGraph(combinator, terms.filter(function (newGroupTerm) {\n              return newGroupTerm !== term;\n            }), true);\n          } else {\n            thenClause = MATCH;\n          }\n          result = createCondition(term, thenClause, result);\n        }\n        ;\n        return result;\n    }\n  }\n  function buildMultiplierMatchGraph(node) {\n    var result = MATCH;\n    var matchTerm = _buildMatchGraph(node.term);\n    if (node.max === 0) {\n      // disable repeating of empty match to prevent infinite loop\n      matchTerm = createCondition(matchTerm, DISALLOW_EMPTY, MISMATCH);\n\n      // an occurrence count is not limited, make a cycle;\n      // to collect more terms on each following matching mismatch\n      result = createCondition(matchTerm, null,\n      // will be a loop\n      MISMATCH);\n      result.then = createCondition(MATCH, MATCH, result // make a loop\n      );\n      if (node.comma) {\n        result.then.else = createCondition({\n          type: 'Comma',\n          syntax: node\n        }, result, MISMATCH);\n      }\n    } else {\n      // create a match node chain for [min .. max] interval with optional matches\n      for (var i = node.min || 1; i <= node.max; i++) {\n        if (node.comma && result !== MATCH) {\n          result = createCondition({\n            type: 'Comma',\n            syntax: node\n          }, result, MISMATCH);\n        }\n        result = createCondition(matchTerm, createCondition(MATCH, MATCH, result), MISMATCH);\n      }\n    }\n    if (node.min === 0) {\n      // allow zero match\n      result = createCondition(MATCH, MATCH, result);\n    } else {\n      // create a match node chain to collect [0 ... min - 1] required matches\n      for (var i = 0; i < node.min - 1; i++) {\n        if (node.comma && result !== MATCH) {\n          result = createCondition({\n            type: 'Comma',\n            syntax: node\n          }, result, MISMATCH);\n        }\n        result = createCondition(matchTerm, result, MISMATCH);\n      }\n    }\n    return result;\n  }\n  function _buildMatchGraph(node) {\n    if (typeof node === 'function') {\n      return {\n        type: 'Generic',\n        fn: node\n      };\n    }\n    switch (node.type) {\n      case 'Group':\n        var result = buildGroupMatchGraph(node.combinator, node.terms.map(_buildMatchGraph), false);\n        if (node.disallowEmpty) {\n          result = createCondition(result, DISALLOW_EMPTY, MISMATCH);\n        }\n        return result;\n      case 'Multiplier':\n        return buildMultiplierMatchGraph(node);\n      case 'Type':\n      case 'Property':\n        return {\n          type: node.type,\n          name: node.name,\n          syntax: node\n        };\n      case 'Keyword':\n        return {\n          type: node.type,\n          name: node.name.toLowerCase(),\n          syntax: node\n        };\n      case 'AtKeyword':\n        return {\n          type: node.type,\n          name: '@' + node.name.toLowerCase(),\n          syntax: node\n        };\n      case 'Function':\n        return {\n          type: node.type,\n          name: node.name.toLowerCase() + '(',\n          syntax: node\n        };\n      case 'String':\n        // convert a one char length String to a Token\n        if (node.value.length === 3) {\n          return {\n            type: 'Token',\n            value: node.value.charAt(1),\n            syntax: node\n          };\n        }\n\n        // otherwise use it as is\n        return {\n          type: node.type,\n          value: node.value.substr(1, node.value.length - 2).replace(/\\\\'/g, '\\''),\n          syntax: node\n        };\n      case 'Token':\n        return {\n          type: node.type,\n          value: node.value,\n          syntax: node\n        };\n      case 'Comma':\n        return {\n          type: node.type,\n          syntax: node\n        };\n      default:\n        throw new Error('Unknown node type:', node.type);\n    }\n  }\n  module.exports = {\n    MATCH: MATCH,\n    MISMATCH: MISMATCH,\n    DISALLOW_EMPTY: DISALLOW_EMPTY,\n    buildMatchGraph: function buildMatchGraph(syntaxTree, ref) {\n      if (typeof syntaxTree === 'string') {\n        syntaxTree = _$$_REQUIRE(_dependencyMap[0], \"../definition-syntax/parse\")(syntaxTree);\n      }\n      return {\n        type: 'MatchGraph',\n        match: _buildMatchGraph(syntaxTree),\n        syntax: ref || null,\n        source: syntaxTree\n      };\n    }\n  };\n});","lineCount":345,"map":[[2,2,3,0],[2,6,3,4,"MATCH"],[2,11,3,9],[2,14,3,12],[3,4,3,14,"type"],[3,8,3,18],[3,10,3,20],[4,2,3,28],[4,3,3,29],[5,2,4,0],[5,6,4,4,"MISMATCH"],[5,14,4,12],[5,17,4,15],[6,4,4,17,"type"],[6,8,4,21],[6,10,4,23],[7,2,4,34],[7,3,4,35],[8,2,5,0],[8,6,5,4,"DISALLOW_EMPTY"],[8,20,5,18],[8,23,5,21],[9,4,5,23,"type"],[9,8,5,27],[9,10,5,29],[10,2,5,45],[10,3,5,46],[11,2,6,0],[11,6,6,4,"LEFTPARENTHESIS"],[11,21,6,19],[11,24,6,22],[11,26,6,24],[11,27,6,25],[11,28,6,27],[12,2,7,0],[12,6,7,4,"RIGHTPARENTHESIS"],[12,22,7,20],[12,25,7,23],[12,27,7,25],[12,28,7,26],[12,29,7,27],[14,2,9,0],[14,11,9,9,"createCondition"],[14,26,9,24,"createCondition"],[14,27,9,25,"match"],[14,32,9,30],[14,34,9,32,"thenBranch"],[14,44,9,42],[14,46,9,44,"elseBranch"],[14,56,9,54],[14,58,9,56],[15,4,10,4],[16,4,11,4],[16,8,11,8,"thenBranch"],[16,18,11,18],[16,23,11,23,"MATCH"],[16,28,11,28],[16,32,11,32,"elseBranch"],[16,42,11,42],[16,47,11,47,"MISMATCH"],[16,55,11,55],[16,57,11,57],[17,6,12,8],[17,13,12,15,"match"],[17,18,12,20],[18,4,13,4],[19,4,15,4],[19,8,15,8,"match"],[19,13,15,13],[19,18,15,18,"MATCH"],[19,23,15,23],[19,27,15,27,"thenBranch"],[19,37,15,37],[19,42,15,42,"MATCH"],[19,47,15,47],[19,51,15,51,"elseBranch"],[19,61,15,61],[19,66,15,66,"MATCH"],[19,71,15,71],[19,73,15,73],[20,6,16,8],[20,13,16,15,"match"],[20,18,16,20],[21,4,17,4],[22,4,19,4],[22,8,19,8,"match"],[22,13,19,13],[22,14,19,14,"type"],[22,18,19,18],[22,23,19,23],[22,27,19,27],[22,31,19,31,"match"],[22,36,19,36],[22,37,19,37,"else"],[22,41,19,41],[22,46,19,46,"MISMATCH"],[22,54,19,54],[22,58,19,58,"thenBranch"],[22,68,19,68],[22,73,19,73,"MATCH"],[22,78,19,78],[22,80,19,80],[23,6,20,8,"thenBranch"],[23,16,20,18],[23,19,20,21,"match"],[23,24,20,26],[23,25,20,27,"then"],[23,29,20,31],[24,6,21,8,"match"],[24,11,21,13],[24,14,21,16,"match"],[24,19,21,21],[24,20,21,22,"match"],[24,25,21,27],[25,4,22,4],[26,4,24,4],[26,11,24,11],[27,6,25,8,"type"],[27,10,25,12],[27,12,25,14],[27,16,25,18],[28,6,26,8,"match"],[28,11,26,13],[28,13,26,15,"match"],[28,18,26,20],[29,6,27,8,"then"],[29,10,27,12],[29,12,27,14,"thenBranch"],[29,22,27,24],[30,6,28,8,"else"],[30,10,28,12],[30,12,28,14,"elseBranch"],[31,4,29,4],[31,5,29,5],[32,2,30,0],[33,2,32,0],[33,11,32,9,"isFunctionType"],[33,25,32,23,"isFunctionType"],[33,26,32,24,"name"],[33,30,32,28],[33,32,32,30],[34,4,33,4],[34,11,34,8,"name"],[34,15,34,12],[34,16,34,13,"length"],[34,22,34,19],[34,25,34,22],[34,26,34,23],[34,30,35,8,"name"],[34,34,35,12],[34,35,35,13,"charCodeAt"],[34,45,35,23],[34,46,35,24,"name"],[34,50,35,28],[34,51,35,29,"length"],[34,57,35,35],[34,60,35,38],[34,61,35,39],[34,62,35,40],[34,67,35,45,"LEFTPARENTHESIS"],[34,82,35,60],[34,86,36,8,"name"],[34,90,36,12],[34,91,36,13,"charCodeAt"],[34,101,36,23],[34,102,36,24,"name"],[34,106,36,28],[34,107,36,29,"length"],[34,113,36,35],[34,116,36,38],[34,117,36,39],[34,118,36,40],[34,123,36,45,"RIGHTPARENTHESIS"],[34,139,36,61],[35,2,38,0],[36,2,40,0],[36,11,40,9,"isEnumCapatible"],[36,26,40,24,"isEnumCapatible"],[36,27,40,25,"term"],[36,31,40,29],[36,33,40,31],[37,4,41,4],[37,11,42,8,"term"],[37,15,42,12],[37,16,42,13,"type"],[37,20,42,17],[37,25,42,22],[37,34,42,31],[37,38,43,8,"term"],[37,42,43,12],[37,43,43,13,"type"],[37,47,43,17],[37,52,43,22],[37,63,43,33],[37,67,44,8,"term"],[37,71,44,12],[37,72,44,13,"type"],[37,76,44,17],[37,81,44,22],[37,91,44,32],[37,95,45,8,"term"],[37,99,45,12],[37,100,45,13,"type"],[37,104,45,17],[37,109,45,22],[37,115,45,28],[37,119,45,32,"isFunctionType"],[37,133,45,46],[37,134,45,47,"term"],[37,138,45,51],[37,139,45,52,"name"],[37,143,45,56],[37,144,45,57],[38,2,47,0],[39,2,49,0],[39,11,49,9,"buildGroupMatchGraph"],[39,31,49,29,"buildGroupMatchGraph"],[39,32,49,30,"combinator"],[39,42,49,40],[39,44,49,42,"terms"],[39,49,49,47],[39,51,49,49,"atLeastOneTermMatched"],[39,72,49,70],[39,74,49,72],[40,4,50,4],[40,12,50,12,"combinator"],[40,22,50,22],[41,6,51,8],[41,11,51,13],[41,14,51,16],[42,8,52,12],[43,8,53,12],[44,8,54,12],[45,8,55,12],[46,8,56,12],[47,8,57,12],[48,8,58,12],[49,8,59,12],[50,8,60,12],[51,8,61,12],[52,8,62,12],[53,8,63,12],[53,12,63,16,"result"],[53,18,63,22],[53,21,63,25,"MATCH"],[53,26,63,30],[54,8,65,12],[54,13,65,17],[54,17,65,21,"i"],[54,18,65,22],[54,21,65,25,"terms"],[54,26,65,30],[54,27,65,31,"length"],[54,33,65,37],[54,36,65,40],[54,37,65,41],[54,39,65,43,"i"],[54,40,65,44],[54,44,65,48],[54,45,65,49],[54,47,65,51,"i"],[54,48,65,52],[54,50,65,54],[54,52,65,56],[55,10,66,16],[55,14,66,20,"term"],[55,18,66,24],[55,21,66,27,"terms"],[55,26,66,32],[55,27,66,33,"i"],[55,28,66,34],[55,29,66,35],[56,10,68,16,"result"],[56,16,68,22],[56,19,68,25,"createCondition"],[56,34,68,40],[56,35,69,20,"term"],[56,39,69,24],[56,41,70,20,"result"],[56,47,70,26],[56,49,71,20,"MISMATCH"],[56,57,72,16],[56,58,72,17],[57,8,73,12],[58,8,73,13],[59,8,75,12],[59,15,75,19,"result"],[59,21,75,25],[60,6,77,8],[60,11,77,13],[60,14,77,16],[61,8,78,12],[62,8,79,12],[63,8,80,12],[64,8,81,12],[65,8,82,12],[66,8,83,12],[67,8,84,12],[68,8,85,12],[69,8,86,12],[70,8,87,12],[71,8,88,12],[73,8,90,12],[73,12,90,16,"result"],[73,18,90,22],[73,21,90,25,"MISMATCH"],[73,29,90,33],[74,8,91,12],[74,12,91,16,"map"],[74,15,91,19],[74,18,91,22],[74,22,91,26],[75,8,93,12],[75,13,93,17],[75,17,93,21,"i"],[75,18,93,22],[75,21,93,25,"terms"],[75,26,93,30],[75,27,93,31,"length"],[75,33,93,37],[75,36,93,40],[75,37,93,41],[75,39,93,43,"i"],[75,40,93,44],[75,44,93,48],[75,45,93,49],[75,47,93,51,"i"],[75,48,93,52],[75,50,93,54],[75,52,93,56],[76,10,94,16],[76,14,94,20,"term"],[76,18,94,24],[76,21,94,27,"terms"],[76,26,94,32],[76,27,94,33,"i"],[76,28,94,34],[76,29,94,35],[78,10,96,16],[79,10,97,16],[79,14,97,20,"isEnumCapatible"],[79,29,97,35],[79,30,97,36,"term"],[79,34,97,40],[79,35,97,41],[79,37,97,43],[80,12,98,20],[80,16,98,24,"map"],[80,19,98,27],[80,24,98,32],[80,28,98,36],[80,32,98,40,"i"],[80,33,98,41],[80,36,98,44],[80,37,98,45],[80,41,98,49,"isEnumCapatible"],[80,56,98,64],[80,57,98,65,"terms"],[80,62,98,70],[80,63,98,71,"i"],[80,64,98,72],[80,67,98,75],[80,68,98,76],[80,69,98,77],[80,70,98,78],[80,72,98,80],[81,14,99,24,"map"],[81,17,99,27],[81,20,99,30,"Object"],[81,26,99,36],[81,27,99,37,"create"],[81,33,99,43],[81,34,99,44],[81,38,99,48],[81,39,99,49],[82,14,100,24,"result"],[82,20,100,30],[82,23,100,33,"createCondition"],[82,38,100,48],[82,39,101,28],[83,16,102,32,"type"],[83,20,102,36],[83,22,102,38],[83,28,102,44],[84,16,103,32,"map"],[84,19,103,35],[84,21,103,37,"map"],[85,14,104,28],[85,15,104,29],[85,17,105,28,"MATCH"],[85,22,105,33],[85,24,106,28,"result"],[85,30,107,24],[85,31,107,25],[86,12,108,20],[87,12,110,20],[87,16,110,24,"map"],[87,19,110,27],[87,24,110,32],[87,28,110,36],[87,30,110,38],[88,14,111,24],[88,18,111,28,"key"],[88,21,111,31],[88,24,111,34],[88,25,111,35,"isFunctionType"],[88,39,111,49],[88,40,111,50,"term"],[88,44,111,54],[88,45,111,55,"name"],[88,49,111,59],[88,50,111,60],[88,53,111,63,"term"],[88,57,111,67],[88,58,111,68,"name"],[88,62,111,72],[88,63,111,73,"slice"],[88,68,111,78],[88,69,111,79],[88,70,111,80],[88,72,111,82],[88,73,111,83],[88,74,111,84],[88,75,111,85],[88,78,111,88,"term"],[88,82,111,92],[88,83,111,93,"name"],[88,87,111,97],[88,89,111,99,"toLowerCase"],[88,100,111,110],[88,101,111,111],[88,102,111,112],[89,14,112,24],[89,18,112,28,"key"],[89,21,112,31],[89,25,112,35,"map"],[89,28,112,38],[89,33,112,43],[89,38,112,48],[89,40,112,50],[90,16,113,28,"map"],[90,19,113,31],[90,20,113,32,"key"],[90,23,113,35],[90,24,113,36],[90,27,113,39,"term"],[90,31,113,43],[91,16,114,28],[92,14,115,24],[93,12,116,20],[94,10,117,16],[95,10,119,16,"map"],[95,13,119,19],[95,16,119,22],[95,20,119,26],[97,10,121,16],[98,10,122,16,"result"],[98,16,122,22],[98,19,122,25,"createCondition"],[98,34,122,40],[98,35,123,20,"term"],[98,39,123,24],[98,41,124,20,"MATCH"],[98,46,124,25],[98,48,125,20,"result"],[98,54,126,16],[98,55,126,17],[99,8,127,12],[100,8,127,13],[101,8,129,12],[101,15,129,19,"result"],[101,21,129,25],[102,6,131,8],[102,11,131,13],[102,15,131,17],[103,8,132,12],[104,8,133,12],[106,8,135,12],[107,8,136,12],[108,8,137,12],[108,12,137,16,"terms"],[108,17,137,21],[108,18,137,22,"length"],[108,24,137,28],[108,27,137,31],[108,28,137,32],[108,30,137,34],[109,10,138,16],[109,17,138,23],[110,12,139,20,"type"],[110,16,139,24],[110,18,139,26],[110,29,139,37],[111,12,140,20,"terms"],[111,17,140,25],[111,19,140,27,"terms"],[111,24,140,32],[112,12,141,20,"all"],[112,15,141,23],[112,17,141,25],[113,10,142,16],[113,11,142,17],[114,8,143,12],[116,8,145,12],[117,8,146,12],[118,8,147,12],[119,8,148,12],[120,8,149,12],[121,8,150,12],[122,8,151,12],[123,8,152,12],[124,8,153,12],[125,8,154,12],[126,8,155,12],[127,8,156,12],[128,8,157,12],[129,8,158,12],[130,8,159,12],[131,8,160,12],[132,8,161,12],[133,8,162,12],[134,8,163,12],[135,8,164,12],[136,8,165,12],[137,8,166,12],[138,8,167,12],[139,8,168,12],[139,12,168,16,"result"],[139,18,168,22],[139,21,168,25,"MISMATCH"],[139,29,168,33],[140,8,170,12],[140,13,170,17],[140,17,170,21,"i"],[140,18,170,22],[140,21,170,25,"terms"],[140,26,170,30],[140,27,170,31,"length"],[140,33,170,37],[140,36,170,40],[140,37,170,41],[140,39,170,43,"i"],[140,40,170,44],[140,44,170,48],[140,45,170,49],[140,47,170,51,"i"],[140,48,170,52],[140,50,170,54],[140,52,170,56],[141,10,171,16],[141,14,171,20,"term"],[141,18,171,24],[141,21,171,27,"terms"],[141,26,171,32],[141,27,171,33,"i"],[141,28,171,34],[141,29,171,35],[142,10,172,16],[142,14,172,20,"thenClause"],[142,24,172,30],[143,10,174,16],[143,14,174,20,"terms"],[143,19,174,25],[143,20,174,26,"length"],[143,26,174,32],[143,29,174,35],[143,30,174,36],[143,32,174,38],[144,12,175,20,"thenClause"],[144,22,175,30],[144,25,175,33,"buildGroupMatchGraph"],[144,45,175,53],[144,46,176,24,"combinator"],[144,56,176,34],[144,58,177,24,"terms"],[144,63,177,29],[144,64,177,30,"filter"],[144,70,177,36],[144,71,177,37],[144,81,177,46,"newGroupTerm"],[144,93,177,58],[144,95,177,60],[145,14,178,28],[145,21,178,35,"newGroupTerm"],[145,33,178,47],[145,38,178,52,"term"],[145,42,178,56],[146,12,179,24],[146,13,179,25],[146,14,179,26],[146,16,180,24],[146,21,181,20],[146,22,181,21],[147,10,182,16],[147,11,182,17],[147,17,182,23],[148,12,183,20,"thenClause"],[148,22,183,30],[148,25,183,33,"MATCH"],[148,30,183,38],[149,10,184,16],[150,10,186,16,"result"],[150,16,186,22],[150,19,186,25,"createCondition"],[150,34,186,40],[150,35,187,20,"term"],[150,39,187,24],[150,41,188,20,"thenClause"],[150,51,188,30],[150,53,189,20,"result"],[150,59,190,16],[150,60,190,17],[151,8,191,12],[152,8,191,13],[153,8,193,12],[153,15,193,19,"result"],[153,21,193,25],[154,6,195,8],[154,11,195,13],[154,15,195,17],[155,8,196,12],[156,8,197,12],[158,8,199,12],[159,8,200,12],[160,8,201,12],[160,12,201,16,"terms"],[160,17,201,21],[160,18,201,22,"length"],[160,24,201,28],[160,27,201,31],[160,28,201,32],[160,30,201,34],[161,10,202,16],[161,17,202,23],[162,12,203,20,"type"],[162,16,203,24],[162,18,203,26],[162,29,203,37],[163,12,204,20,"terms"],[163,17,204,25],[163,19,204,27,"terms"],[163,24,204,32],[164,12,205,20,"all"],[164,15,205,23],[164,17,205,25],[165,10,206,16],[165,11,206,17],[166,8,207,12],[168,8,209,12],[169,8,210,12],[170,8,211,12],[171,8,212,12],[172,8,213,12],[173,8,214,12],[174,8,215,12],[175,8,216,12],[176,8,217,12],[177,8,218,12],[178,8,219,12],[179,8,220,12],[180,8,221,12],[181,8,222,12],[182,8,223,12],[183,8,224,12],[184,8,225,12],[185,8,226,12],[186,8,227,12],[187,8,228,12],[188,8,229,12],[189,8,230,12],[190,8,231,12],[191,8,232,12],[191,12,232,16,"result"],[191,18,232,22],[191,21,232,25,"atLeastOneTermMatched"],[191,42,232,46],[191,45,232,49,"MATCH"],[191,50,232,54],[191,53,232,57,"MISMATCH"],[191,61,232,65],[192,8,234,12],[192,13,234,17],[192,17,234,21,"i"],[192,18,234,22],[192,21,234,25,"terms"],[192,26,234,30],[192,27,234,31,"length"],[192,33,234,37],[192,36,234,40],[192,37,234,41],[192,39,234,43,"i"],[192,40,234,44],[192,44,234,48],[192,45,234,49],[192,47,234,51,"i"],[192,48,234,52],[192,50,234,54],[192,52,234,56],[193,10,235,16],[193,14,235,20,"term"],[193,18,235,24],[193,21,235,27,"terms"],[193,26,235,32],[193,27,235,33,"i"],[193,28,235,34],[193,29,235,35],[194,10,236,16],[194,14,236,20,"thenClause"],[194,24,236,30],[195,10,238,16],[195,14,238,20,"terms"],[195,19,238,25],[195,20,238,26,"length"],[195,26,238,32],[195,29,238,35],[195,30,238,36],[195,32,238,38],[196,12,239,20,"thenClause"],[196,22,239,30],[196,25,239,33,"buildGroupMatchGraph"],[196,45,239,53],[196,46,240,24,"combinator"],[196,56,240,34],[196,58,241,24,"terms"],[196,63,241,29],[196,64,241,30,"filter"],[196,70,241,36],[196,71,241,37],[196,81,241,46,"newGroupTerm"],[196,93,241,58],[196,95,241,60],[197,14,242,28],[197,21,242,35,"newGroupTerm"],[197,33,242,47],[197,38,242,52,"term"],[197,42,242,56],[198,12,243,24],[198,13,243,25],[198,14,243,26],[198,16,244,24],[198,20,245,20],[198,21,245,21],[199,10,246,16],[199,11,246,17],[199,17,246,23],[200,12,247,20,"thenClause"],[200,22,247,30],[200,25,247,33,"MATCH"],[200,30,247,38],[201,10,248,16],[202,10,250,16,"result"],[202,16,250,22],[202,19,250,25,"createCondition"],[202,34,250,40],[202,35,251,20,"term"],[202,39,251,24],[202,41,252,20,"thenClause"],[202,51,252,30],[202,53,253,20,"result"],[202,59,254,16],[202,60,254,17],[203,8,255,12],[204,8,255,13],[205,8,257,12],[205,15,257,19,"result"],[205,21,257,25],[206,4,258,4],[207,2,259,0],[208,2,261,0],[208,11,261,9,"buildMultiplierMatchGraph"],[208,36,261,34,"buildMultiplierMatchGraph"],[208,37,261,35,"node"],[208,41,261,39],[208,43,261,41],[209,4,262,4],[209,8,262,8,"result"],[209,14,262,14],[209,17,262,17,"MATCH"],[209,22,262,22],[210,4,263,4],[210,8,263,8,"matchTerm"],[210,17,263,17],[210,20,263,20,"buildMatchGraph"],[210,36,263,35],[210,37,263,36,"node"],[210,41,263,40],[210,42,263,41,"term"],[210,46,263,45],[210,47,263,46],[211,4,265,4],[211,8,265,8,"node"],[211,12,265,12],[211,13,265,13,"max"],[211,16,265,16],[211,21,265,21],[211,22,265,22],[211,24,265,24],[212,6,266,8],[213,6,267,8,"matchTerm"],[213,15,267,17],[213,18,267,20,"createCondition"],[213,33,267,35],[213,34,268,12,"matchTerm"],[213,43,268,21],[213,45,269,12,"DISALLOW_EMPTY"],[213,59,269,26],[213,61,270,12,"MISMATCH"],[213,69,271,8],[213,70,271,9],[215,6,273,8],[216,6,274,8],[217,6,275,8,"result"],[217,12,275,14],[217,15,275,17,"createCondition"],[217,30,275,32],[217,31,276,12,"matchTerm"],[217,40,276,21],[217,42,277,12],[217,46,277,16],[218,6,277,18],[219,6,278,12,"MISMATCH"],[219,14,279,8],[219,15,279,9],[220,6,281,8,"result"],[220,12,281,14],[220,13,281,15,"then"],[220,17,281,19],[220,20,281,22,"createCondition"],[220,35,281,37],[220,36,282,12,"MATCH"],[220,41,282,17],[220,43,283,12,"MATCH"],[220,48,283,17],[220,50,284,12,"result"],[220,56,284,18],[220,57,284,19],[221,6,285,8],[221,7,285,9],[222,6,287,8],[222,10,287,12,"node"],[222,14,287,16],[222,15,287,17,"comma"],[222,20,287,22],[222,22,287,24],[223,8,288,12,"result"],[223,14,288,18],[223,15,288,19,"then"],[223,19,288,23],[223,20,288,24,"else"],[223,24,288,28],[223,27,288,31,"createCondition"],[223,42,288,46],[223,43,289,16],[224,10,289,18,"type"],[224,14,289,22],[224,16,289,24],[224,23,289,31],[225,10,289,33,"syntax"],[225,16,289,39],[225,18,289,41,"node"],[226,8,289,46],[226,9,289,47],[226,11,290,16,"result"],[226,17,290,22],[226,19,291,16,"MISMATCH"],[226,27,292,12],[226,28,292,13],[227,6,293,8],[228,4,294,4],[228,5,294,5],[228,11,294,11],[229,6,295,8],[230,6,296,8],[230,11,296,13],[230,15,296,17,"i"],[230,16,296,18],[230,19,296,21,"node"],[230,23,296,25],[230,24,296,26,"min"],[230,27,296,29],[230,31,296,33],[230,32,296,34],[230,34,296,36,"i"],[230,35,296,37],[230,39,296,41,"node"],[230,43,296,45],[230,44,296,46,"max"],[230,47,296,49],[230,49,296,51,"i"],[230,50,296,52],[230,52,296,54],[230,54,296,56],[231,8,297,12],[231,12,297,16,"node"],[231,16,297,20],[231,17,297,21,"comma"],[231,22,297,26],[231,26,297,30,"result"],[231,32,297,36],[231,37,297,41,"MATCH"],[231,42,297,46],[231,44,297,48],[232,10,298,16,"result"],[232,16,298,22],[232,19,298,25,"createCondition"],[232,34,298,40],[232,35,299,20],[233,12,299,22,"type"],[233,16,299,26],[233,18,299,28],[233,25,299,35],[234,12,299,37,"syntax"],[234,18,299,43],[234,20,299,45,"node"],[235,10,299,50],[235,11,299,51],[235,13,300,20,"result"],[235,19,300,26],[235,21,301,20,"MISMATCH"],[235,29,302,16],[235,30,302,17],[236,8,303,12],[237,8,305,12,"result"],[237,14,305,18],[237,17,305,21,"createCondition"],[237,32,305,36],[237,33,306,16,"matchTerm"],[237,42,306,25],[237,44,307,16,"createCondition"],[237,59,307,31],[237,60,308,20,"MATCH"],[237,65,308,25],[237,67,309,20,"MATCH"],[237,72,309,25],[237,74,310,20,"result"],[237,80,311,16],[237,81,311,17],[237,83,312,16,"MISMATCH"],[237,91,313,12],[237,92,313,13],[238,6,314,8],[239,4,315,4],[240,4,317,4],[240,8,317,8,"node"],[240,12,317,12],[240,13,317,13,"min"],[240,16,317,16],[240,21,317,21],[240,22,317,22],[240,24,317,24],[241,6,318,8],[242,6,319,8,"result"],[242,12,319,14],[242,15,319,17,"createCondition"],[242,30,319,32],[242,31,320,12,"MATCH"],[242,36,320,17],[242,38,321,12,"MATCH"],[242,43,321,17],[242,45,322,12,"result"],[242,51,323,8],[242,52,323,9],[243,4,324,4],[243,5,324,5],[243,11,324,11],[244,6,325,8],[245,6,326,8],[245,11,326,13],[245,15,326,17,"i"],[245,16,326,18],[245,19,326,21],[245,20,326,22],[245,22,326,24,"i"],[245,23,326,25],[245,26,326,28,"node"],[245,30,326,32],[245,31,326,33,"min"],[245,34,326,36],[245,37,326,39],[245,38,326,40],[245,40,326,42,"i"],[245,41,326,43],[245,43,326,45],[245,45,326,47],[246,8,327,12],[246,12,327,16,"node"],[246,16,327,20],[246,17,327,21,"comma"],[246,22,327,26],[246,26,327,30,"result"],[246,32,327,36],[246,37,327,41,"MATCH"],[246,42,327,46],[246,44,327,48],[247,10,328,16,"result"],[247,16,328,22],[247,19,328,25,"createCondition"],[247,34,328,40],[247,35,329,20],[248,12,329,22,"type"],[248,16,329,26],[248,18,329,28],[248,25,329,35],[249,12,329,37,"syntax"],[249,18,329,43],[249,20,329,45,"node"],[250,10,329,50],[250,11,329,51],[250,13,330,20,"result"],[250,19,330,26],[250,21,331,20,"MISMATCH"],[250,29,332,16],[250,30,332,17],[251,8,333,12],[252,8,335,12,"result"],[252,14,335,18],[252,17,335,21,"createCondition"],[252,32,335,36],[252,33,336,16,"matchTerm"],[252,42,336,25],[252,44,337,16,"result"],[252,50,337,22],[252,52,338,16,"MISMATCH"],[252,60,339,12],[252,61,339,13],[253,6,340,8],[254,4,341,4],[255,4,343,4],[255,11,343,11,"result"],[255,17,343,17],[256,2,344,0],[257,2,346,0],[257,11,346,9,"buildMatchGraph"],[257,27,346,24,"buildMatchGraph"],[257,28,346,25,"node"],[257,32,346,29],[257,34,346,31],[258,4,347,4],[258,8,347,8],[258,15,347,15,"node"],[258,19,347,19],[258,24,347,24],[258,34,347,34],[258,36,347,36],[259,6,348,8],[259,13,348,15],[260,8,349,12,"type"],[260,12,349,16],[260,14,349,18],[260,23,349,27],[261,8,350,12,"fn"],[261,10,350,14],[261,12,350,16,"node"],[262,6,351,8],[262,7,351,9],[263,4,352,4],[264,4,354,4],[264,12,354,12,"node"],[264,16,354,16],[264,17,354,17,"type"],[264,21,354,21],[265,6,355,8],[265,11,355,13],[265,18,355,20],[266,8,356,12],[266,12,356,16,"result"],[266,18,356,22],[266,21,356,25,"buildGroupMatchGraph"],[266,41,356,45],[266,42,357,16,"node"],[266,46,357,20],[266,47,357,21,"combinator"],[266,57,357,31],[266,59,358,16,"node"],[266,63,358,20],[266,64,358,21,"terms"],[266,69,358,26],[266,70,358,27,"map"],[266,73,358,30],[266,74,358,31,"buildMatchGraph"],[266,90,358,46],[266,91,358,47],[266,93,359,16],[266,98,360,12],[266,99,360,13],[267,8,362,12],[267,12,362,16,"node"],[267,16,362,20],[267,17,362,21,"disallowEmpty"],[267,30,362,34],[267,32,362,36],[268,10,363,16,"result"],[268,16,363,22],[268,19,363,25,"createCondition"],[268,34,363,40],[268,35,364,20,"result"],[268,41,364,26],[268,43,365,20,"DISALLOW_EMPTY"],[268,57,365,34],[268,59,366,20,"MISMATCH"],[268,67,367,16],[268,68,367,17],[269,8,368,12],[270,8,370,12],[270,15,370,19,"result"],[270,21,370,25],[271,6,372,8],[271,11,372,13],[271,23,372,25],[272,8,373,12],[272,15,373,19,"buildMultiplierMatchGraph"],[272,40,373,44],[272,41,373,45,"node"],[272,45,373,49],[272,46,373,50],[273,6,375,8],[273,11,375,13],[273,17,375,19],[274,6,376,8],[274,11,376,13],[274,21,376,23],[275,8,377,12],[275,15,377,19],[276,10,378,16,"type"],[276,14,378,20],[276,16,378,22,"node"],[276,20,378,26],[276,21,378,27,"type"],[276,25,378,31],[277,10,379,16,"name"],[277,14,379,20],[277,16,379,22,"node"],[277,20,379,26],[277,21,379,27,"name"],[277,25,379,31],[278,10,380,16,"syntax"],[278,16,380,22],[278,18,380,24,"node"],[279,8,381,12],[279,9,381,13],[280,6,383,8],[280,11,383,13],[280,20,383,22],[281,8,384,12],[281,15,384,19],[282,10,385,16,"type"],[282,14,385,20],[282,16,385,22,"node"],[282,20,385,26],[282,21,385,27,"type"],[282,25,385,31],[283,10,386,16,"name"],[283,14,386,20],[283,16,386,22,"node"],[283,20,386,26],[283,21,386,27,"name"],[283,25,386,31],[283,26,386,32,"toLowerCase"],[283,37,386,43],[283,38,386,44],[283,39,386,45],[284,10,387,16,"syntax"],[284,16,387,22],[284,18,387,24,"node"],[285,8,388,12],[285,9,388,13],[286,6,390,8],[286,11,390,13],[286,22,390,24],[287,8,391,12],[287,15,391,19],[288,10,392,16,"type"],[288,14,392,20],[288,16,392,22,"node"],[288,20,392,26],[288,21,392,27,"type"],[288,25,392,31],[289,10,393,16,"name"],[289,14,393,20],[289,16,393,22],[289,19,393,25],[289,22,393,28,"node"],[289,26,393,32],[289,27,393,33,"name"],[289,31,393,37],[289,32,393,38,"toLowerCase"],[289,43,393,49],[289,44,393,50],[289,45,393,51],[290,10,394,16,"syntax"],[290,16,394,22],[290,18,394,24,"node"],[291,8,395,12],[291,9,395,13],[292,6,397,8],[292,11,397,13],[292,21,397,23],[293,8,398,12],[293,15,398,19],[294,10,399,16,"type"],[294,14,399,20],[294,16,399,22,"node"],[294,20,399,26],[294,21,399,27,"type"],[294,25,399,31],[295,10,400,16,"name"],[295,14,400,20],[295,16,400,22,"node"],[295,20,400,26],[295,21,400,27,"name"],[295,25,400,31],[295,26,400,32,"toLowerCase"],[295,37,400,43],[295,38,400,44],[295,39,400,45],[295,42,400,48],[295,45,400,51],[296,10,401,16,"syntax"],[296,16,401,22],[296,18,401,24,"node"],[297,8,402,12],[297,9,402,13],[298,6,404,8],[298,11,404,13],[298,19,404,21],[299,8,405,12],[300,8,406,12],[300,12,406,16,"node"],[300,16,406,20],[300,17,406,21,"value"],[300,22,406,26],[300,23,406,27,"length"],[300,29,406,33],[300,34,406,38],[300,35,406,39],[300,37,406,41],[301,10,407,16],[301,17,407,23],[302,12,408,20,"type"],[302,16,408,24],[302,18,408,26],[302,25,408,33],[303,12,409,20,"value"],[303,17,409,25],[303,19,409,27,"node"],[303,23,409,31],[303,24,409,32,"value"],[303,29,409,37],[303,30,409,38,"charAt"],[303,36,409,44],[303,37,409,45],[303,38,409,46],[303,39,409,47],[304,12,410,20,"syntax"],[304,18,410,26],[304,20,410,28,"node"],[305,10,411,16],[305,11,411,17],[306,8,412,12],[308,8,414,12],[309,8,415,12],[309,15,415,19],[310,10,416,16,"type"],[310,14,416,20],[310,16,416,22,"node"],[310,20,416,26],[310,21,416,27,"type"],[310,25,416,31],[311,10,417,16,"value"],[311,15,417,21],[311,17,417,23,"node"],[311,21,417,27],[311,22,417,28,"value"],[311,27,417,33],[311,28,417,34,"substr"],[311,34,417,40],[311,35,417,41],[311,36,417,42],[311,38,417,44,"node"],[311,42,417,48],[311,43,417,49,"value"],[311,48,417,54],[311,49,417,55,"length"],[311,55,417,61],[311,58,417,64],[311,59,417,65],[311,60,417,66],[311,61,417,67,"replace"],[311,68,417,74],[311,69,417,75],[311,75,417,81],[311,77,417,83],[311,81,417,87],[311,82,417,88],[312,10,418,16,"syntax"],[312,16,418,22],[312,18,418,24,"node"],[313,8,419,12],[313,9,419,13],[314,6,421,8],[314,11,421,13],[314,18,421,20],[315,8,422,12],[315,15,422,19],[316,10,423,16,"type"],[316,14,423,20],[316,16,423,22,"node"],[316,20,423,26],[316,21,423,27,"type"],[316,25,423,31],[317,10,424,16,"value"],[317,15,424,21],[317,17,424,23,"node"],[317,21,424,27],[317,22,424,28,"value"],[317,27,424,33],[318,10,425,16,"syntax"],[318,16,425,22],[318,18,425,24,"node"],[319,8,426,12],[319,9,426,13],[320,6,428,8],[320,11,428,13],[320,18,428,20],[321,8,429,12],[321,15,429,19],[322,10,430,16,"type"],[322,14,430,20],[322,16,430,22,"node"],[322,20,430,26],[322,21,430,27,"type"],[322,25,430,31],[323,10,431,16,"syntax"],[323,16,431,22],[323,18,431,24,"node"],[324,8,432,12],[324,9,432,13],[325,6,434,8],[326,8,435,12],[326,14,435,18],[326,18,435,22,"Error"],[326,23,435,27],[326,24,435,28],[326,44,435,48],[326,46,435,50,"node"],[326,50,435,54],[326,51,435,55,"type"],[326,55,435,59],[326,56,435,60],[327,4,436,4],[328,2,437,0],[329,2,439,0,"module"],[329,8,439,6],[329,9,439,7,"exports"],[329,16,439,14],[329,19,439,17],[330,4,440,4,"MATCH"],[330,9,440,9],[330,11,440,11,"MATCH"],[330,16,440,16],[331,4,441,4,"MISMATCH"],[331,12,441,12],[331,14,441,14,"MISMATCH"],[331,22,441,22],[332,4,442,4,"DISALLOW_EMPTY"],[332,18,442,18],[332,20,442,20,"DISALLOW_EMPTY"],[332,34,442,34],[333,4,443,4,"buildMatchGraph"],[333,19,443,19],[333,21,443,21],[333,30,443,4,"buildMatchGraph"],[333,45,443,19,"buildMatchGraph"],[333,46,443,30,"syntaxTree"],[333,56,443,40],[333,58,443,42,"ref"],[333,61,443,45],[333,63,443,47],[334,6,444,8],[334,10,444,12],[334,17,444,19,"syntaxTree"],[334,27,444,29],[334,32,444,34],[334,40,444,42],[334,42,444,44],[335,8,445,12,"syntaxTree"],[335,18,445,22],[335,21,445,25,"_$$_REQUIRE"],[335,32,445,25],[335,33,445,25,"_dependencyMap"],[335,47,445,25],[335,82,445,31,"syntaxTree"],[335,92,445,41],[335,93,445,42],[336,6,446,8],[337,6,448,8],[337,13,448,15],[338,8,449,12,"type"],[338,12,449,16],[338,14,449,18],[338,26,449,30],[339,8,450,12,"match"],[339,13,450,17],[339,15,450,19,"buildMatchGraph"],[339,31,450,34],[339,32,450,35,"syntaxTree"],[339,42,450,45],[339,43,450,46],[340,8,451,12,"syntax"],[340,14,451,18],[340,16,451,20,"ref"],[340,19,451,23],[340,23,451,27],[340,27,451,31],[341,8,452,12,"source"],[341,14,452,18],[341,16,452,20,"syntaxTree"],[342,6,453,8],[342,7,453,9],[343,4,454,4],[344,2,455,0],[344,3,455,1],[345,0,455,2],[345,3]],"functionMap":{"names":["<global>","createCondition","isFunctionType","isEnumCapatible","buildGroupMatchGraph","terms.filter$argument_0","buildMultiplierMatchGraph","buildMatchGraph","module.exports.buildMatchGraph"],"mappings":"AAA;ACQ;CDqB;AEE;CFM;AGE;CHO;AIE;qCCgI;yBDE;qCC8D;yBDE;CJgB;AME;CNmF;AOE;CP2F;qBQM;KRW"}},"type":"js/module"}]}