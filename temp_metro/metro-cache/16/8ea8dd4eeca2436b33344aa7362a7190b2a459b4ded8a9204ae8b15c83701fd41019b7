{"dependencies":[{"name":"./galois-field","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":36,"index":36}},{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":36,"index":36}},{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":36,"index":36}}],"key":"wK0DoQ5p37aK5F14JszG5/2IPTo="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Multiplies two polynomials inside Galois Field\n   *\n   * @param  {Uint8Array} p1 Polynomial\n   * @param  {Uint8Array} p2 Polynomial\n   * @return {Uint8Array}    Product of p1 and p2\n   */\n  exports.mul = function mul(p1, p2) {\n    var coeff = new Uint8Array(p1.length + p2.length - 1);\n    for (var i = 0; i < p1.length; i++) {\n      for (var j = 0; j < p2.length; j++) {\n        coeff[i + j] ^= _$$_REQUIRE(_dependencyMap[0], \"./galois-field\").mul(p1[i], p2[j]);\n      }\n    }\n    return coeff;\n  };\n\n  /**\n   * Calculate the remainder of polynomials division\n   *\n   * @param  {Uint8Array} divident Polynomial\n   * @param  {Uint8Array} divisor  Polynomial\n   * @return {Uint8Array}          Remainder\n   */\n  exports.mod = function mod(divident, divisor) {\n    var result = new Uint8Array(divident);\n    while (result.length - divisor.length >= 0) {\n      var coeff = result[0];\n      for (var i = 0; i < divisor.length; i++) {\n        result[i] ^= _$$_REQUIRE(_dependencyMap[0], \"./galois-field\").mul(divisor[i], coeff);\n      }\n\n      // remove all zeros from buffer head\n      var offset = 0;\n      while (offset < result.length && result[offset] === 0) offset++;\n      result = result.slice(offset);\n    }\n    return result;\n  };\n\n  /**\n   * Generate an irreducible generator polynomial of specified degree\n   * (used by Reed-Solomon encoder)\n   *\n   * @param  {Number} degree Degree of the generator polynomial\n   * @return {Uint8Array}    Buffer containing polynomial coefficients\n   */\n  exports.generateECPolynomial = function generateECPolynomial(degree) {\n    var poly = new Uint8Array([1]);\n    for (var i = 0; i < degree; i++) {\n      poly = exports.mul(poly, new Uint8Array([1, _$$_REQUIRE(_dependencyMap[0], \"./galois-field\").exp(i)]));\n    }\n    return poly;\n  };\n});","lineCount":56,"map":[[2,2,3,0],[3,0,4,0],[4,0,5,0],[5,0,6,0],[6,0,7,0],[7,0,8,0],[8,0,9,0],[9,2,10,0,"exports"],[9,9,10,7],[9,10,10,8,"mul"],[9,13,10,11],[9,16,10,14],[9,25,10,23,"mul"],[9,28,10,26,"mul"],[9,29,10,28,"p1"],[9,31,10,30],[9,33,10,32,"p2"],[9,35,10,34],[9,37,10,36],[10,4,11,2],[10,8,11,8,"coeff"],[10,13,11,13],[10,16,11,16],[10,20,11,20,"Uint8Array"],[10,30,11,30],[10,31,11,31,"p1"],[10,33,11,33],[10,34,11,34,"length"],[10,40,11,40],[10,43,11,43,"p2"],[10,45,11,45],[10,46,11,46,"length"],[10,52,11,52],[10,55,11,55],[10,56,11,56],[10,57,11,57],[11,4,13,2],[11,9,13,7],[11,13,13,11,"i"],[11,14,13,12],[11,17,13,15],[11,18,13,16],[11,20,13,18,"i"],[11,21,13,19],[11,24,13,22,"p1"],[11,26,13,24],[11,27,13,25,"length"],[11,33,13,31],[11,35,13,33,"i"],[11,36,13,34],[11,38,13,36],[11,40,13,38],[12,6,14,4],[12,11,14,9],[12,15,14,13,"j"],[12,16,14,14],[12,19,14,17],[12,20,14,18],[12,22,14,20,"j"],[12,23,14,21],[12,26,14,24,"p2"],[12,28,14,26],[12,29,14,27,"length"],[12,35,14,33],[12,37,14,35,"j"],[12,38,14,36],[12,40,14,38],[12,42,14,40],[13,8,15,6,"coeff"],[13,13,15,11],[13,14,15,12,"i"],[13,15,15,13],[13,18,15,16,"j"],[13,19,15,17],[13,20,15,18],[13,24,15,22,"_$$_REQUIRE"],[13,35,15,22],[13,36,15,22,"_dependencyMap"],[13,50,15,22],[13,73,15,25,"mul"],[13,76,15,28],[13,77,15,29,"p1"],[13,79,15,31],[13,80,15,32,"i"],[13,81,15,33],[13,82,15,34],[13,84,15,36,"p2"],[13,86,15,38],[13,87,15,39,"j"],[13,88,15,40],[13,89,15,41],[13,90,15,42],[14,6,16,4],[15,4,17,2],[16,4,19,2],[16,11,19,9,"coeff"],[16,16,19,14],[17,2,20,0],[17,3,20,1],[19,2,22,0],[20,0,23,0],[21,0,24,0],[22,0,25,0],[23,0,26,0],[24,0,27,0],[25,0,28,0],[26,2,29,0,"exports"],[26,9,29,7],[26,10,29,8,"mod"],[26,13,29,11],[26,16,29,14],[26,25,29,23,"mod"],[26,28,29,26,"mod"],[26,29,29,28,"divident"],[26,37,29,36],[26,39,29,38,"divisor"],[26,46,29,45],[26,48,29,47],[27,4,30,2],[27,8,30,6,"result"],[27,14,30,12],[27,17,30,15],[27,21,30,19,"Uint8Array"],[27,31,30,29],[27,32,30,30,"divident"],[27,40,30,38],[27,41,30,39],[28,4,32,2],[28,11,32,10,"result"],[28,17,32,16],[28,18,32,17,"length"],[28,24,32,23],[28,27,32,26,"divisor"],[28,34,32,33],[28,35,32,34,"length"],[28,41,32,40],[28,45,32,45],[28,46,32,46],[28,48,32,48],[29,6,33,4],[29,10,33,10,"coeff"],[29,15,33,15],[29,18,33,18,"result"],[29,24,33,24],[29,25,33,25],[29,26,33,26],[29,27,33,27],[30,6,35,4],[30,11,35,9],[30,15,35,13,"i"],[30,16,35,14],[30,19,35,17],[30,20,35,18],[30,22,35,20,"i"],[30,23,35,21],[30,26,35,24,"divisor"],[30,33,35,31],[30,34,35,32,"length"],[30,40,35,38],[30,42,35,40,"i"],[30,43,35,41],[30,45,35,43],[30,47,35,45],[31,8,36,6,"result"],[31,14,36,12],[31,15,36,13,"i"],[31,16,36,14],[31,17,36,15],[31,21,36,19,"_$$_REQUIRE"],[31,32,36,19],[31,33,36,19,"_dependencyMap"],[31,47,36,19],[31,70,36,22,"mul"],[31,73,36,25],[31,74,36,26,"divisor"],[31,81,36,33],[31,82,36,34,"i"],[31,83,36,35],[31,84,36,36],[31,86,36,38,"coeff"],[31,91,36,43],[31,92,36,44],[32,6,37,4],[34,6,39,4],[35,6,40,4],[35,10,40,8,"offset"],[35,16,40,14],[35,19,40,17],[35,20,40,18],[36,6,41,4],[36,13,41,11,"offset"],[36,19,41,17],[36,22,41,20,"result"],[36,28,41,26],[36,29,41,27,"length"],[36,35,41,33],[36,39,41,37,"result"],[36,45,41,43],[36,46,41,44,"offset"],[36,52,41,50],[36,53,41,51],[36,58,41,56],[36,59,41,57],[36,61,41,59,"offset"],[36,67,41,65],[36,69,41,67],[37,6,42,4,"result"],[37,12,42,10],[37,15,42,13,"result"],[37,21,42,19],[37,22,42,20,"slice"],[37,27,42,25],[37,28,42,26,"offset"],[37,34,42,32],[37,35,42,33],[38,4,43,2],[39,4,45,2],[39,11,45,9,"result"],[39,17,45,15],[40,2,46,0],[40,3,46,1],[42,2,48,0],[43,0,49,0],[44,0,50,0],[45,0,51,0],[46,0,52,0],[47,0,53,0],[48,0,54,0],[49,2,55,0,"exports"],[49,9,55,7],[49,10,55,8,"generateECPolynomial"],[49,30,55,28],[49,33,55,31],[49,42,55,40,"generateECPolynomial"],[49,62,55,60,"generateECPolynomial"],[49,63,55,62,"degree"],[49,69,55,68],[49,71,55,70],[50,4,56,2],[50,8,56,6,"poly"],[50,12,56,10],[50,15,56,13],[50,19,56,17,"Uint8Array"],[50,29,56,27],[50,30,56,28],[50,31,56,29],[50,32,56,30],[50,33,56,31],[50,34,56,32],[51,4,57,2],[51,9,57,7],[51,13,57,11,"i"],[51,14,57,12],[51,17,57,15],[51,18,57,16],[51,20,57,18,"i"],[51,21,57,19],[51,24,57,22,"degree"],[51,30,57,28],[51,32,57,30,"i"],[51,33,57,31],[51,35,57,33],[51,37,57,35],[52,6,58,4,"poly"],[52,10,58,8],[52,13,58,11,"exports"],[52,20,58,18],[52,21,58,19,"mul"],[52,24,58,22],[52,25,58,23,"poly"],[52,29,58,27],[52,31,58,29],[52,35,58,33,"Uint8Array"],[52,45,58,43],[52,46,58,44],[52,47,58,45],[52,48,58,46],[52,50,58,48,"_$$_REQUIRE"],[52,61,58,48],[52,62,58,48,"_dependencyMap"],[52,76,58,48],[52,99,58,51,"exp"],[52,102,58,54],[52,103,58,55,"i"],[52,104,58,56],[52,105,58,57],[52,106,58,58],[52,107,58,59],[52,108,58,60],[53,4,59,2],[54,4,61,2],[54,11,61,9,"poly"],[54,15,61,13],[55,2,62,0],[55,3,62,1],[56,0,62,1],[56,3]],"functionMap":{"names":["<global>","mul","mod","generateECPolynomial"],"mappings":"AAA;cCS;CDU;cES;CFiB;+BGS;CHO"}},"type":"js/module"}]}