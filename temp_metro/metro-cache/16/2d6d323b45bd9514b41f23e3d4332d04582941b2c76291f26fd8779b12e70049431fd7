{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var errors = {\n    IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',\n    TWEAK_ADD: 'The tweak was out of range or the resulted private key is invalid',\n    TWEAK_MUL: 'The tweak was out of range or equal to zero',\n    CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',\n    SECKEY_INVALID: 'Private Key is invalid',\n    PUBKEY_PARSE: 'Public Key could not be parsed',\n    PUBKEY_SERIALIZE: 'Public Key serialization error',\n    PUBKEY_COMBINE: 'The sum of the public keys is not valid',\n    SIG_PARSE: 'Signature could not be parsed',\n    SIGN: 'The nonce generation function failed, or the private key was invalid',\n    RECOVER: 'Public key could not be recover',\n    ECDH: 'Scalar was invalid (zero or overflow)'\n  };\n  function assert(cond, msg) {\n    if (!cond) throw new Error(msg);\n  }\n  function isUint8Array(name, value, length) {\n    assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`);\n    if (length !== undefined) {\n      if (Array.isArray(length)) {\n        var numbers = length.join(', ');\n        var msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`;\n        assert(length.includes(value.length), msg);\n      } else {\n        var _msg = `Expected ${name} to be an Uint8Array with length ${length}`;\n        assert(value.length === length, _msg);\n      }\n    }\n  }\n  function isCompressed(value) {\n    assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean');\n  }\n  function getAssertedOutput() {\n    var output = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (len) {\n      return new Uint8Array(len);\n    };\n    var length = arguments.length > 1 ? arguments[1] : undefined;\n    if (typeof output === 'function') output = output(length);\n    isUint8Array('output', output, length);\n    return output;\n  }\n  function toTypeString(value) {\n    return Object.prototype.toString.call(value).slice(8, -1);\n  }\n  module.exports = function (secp256k1) {\n    return {\n      contextRandomize: function contextRandomize(seed) {\n        assert(seed === null || seed instanceof Uint8Array, 'Expected seed to be an Uint8Array or null');\n        if (seed !== null) isUint8Array('seed', seed, 32);\n        switch (secp256k1.contextRandomize(seed)) {\n          case 1:\n            throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW);\n        }\n      },\n      privateKeyVerify: function privateKeyVerify(seckey) {\n        isUint8Array('private key', seckey, 32);\n        return secp256k1.privateKeyVerify(seckey) === 0;\n      },\n      privateKeyNegate: function privateKeyNegate(seckey) {\n        isUint8Array('private key', seckey, 32);\n        switch (secp256k1.privateKeyNegate(seckey)) {\n          case 0:\n            return seckey;\n          case 1:\n            throw new Error(errors.IMPOSSIBLE_CASE);\n        }\n      },\n      privateKeyTweakAdd: function privateKeyTweakAdd(seckey, tweak) {\n        isUint8Array('private key', seckey, 32);\n        isUint8Array('tweak', tweak, 32);\n        switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {\n          case 0:\n            return seckey;\n          case 1:\n            throw new Error(errors.TWEAK_ADD);\n        }\n      },\n      privateKeyTweakMul: function privateKeyTweakMul(seckey, tweak) {\n        isUint8Array('private key', seckey, 32);\n        isUint8Array('tweak', tweak, 32);\n        switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {\n          case 0:\n            return seckey;\n          case 1:\n            throw new Error(errors.TWEAK_MUL);\n        }\n      },\n      publicKeyVerify: function publicKeyVerify(pubkey) {\n        isUint8Array('public key', pubkey, [33, 65]);\n        return secp256k1.publicKeyVerify(pubkey) === 0;\n      },\n      publicKeyCreate: function publicKeyCreate(seckey) {\n        var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var output = arguments.length > 2 ? arguments[2] : undefined;\n        isUint8Array('private key', seckey, 32);\n        isCompressed(compressed);\n        output = getAssertedOutput(output, compressed ? 33 : 65);\n        switch (secp256k1.publicKeyCreate(output, seckey)) {\n          case 0:\n            return output;\n          case 1:\n            throw new Error(errors.SECKEY_INVALID);\n          case 2:\n            throw new Error(errors.PUBKEY_SERIALIZE);\n        }\n      },\n      publicKeyConvert: function publicKeyConvert(pubkey) {\n        var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var output = arguments.length > 2 ? arguments[2] : undefined;\n        isUint8Array('public key', pubkey, [33, 65]);\n        isCompressed(compressed);\n        output = getAssertedOutput(output, compressed ? 33 : 65);\n        switch (secp256k1.publicKeyConvert(output, pubkey)) {\n          case 0:\n            return output;\n          case 1:\n            throw new Error(errors.PUBKEY_PARSE);\n          case 2:\n            throw new Error(errors.PUBKEY_SERIALIZE);\n        }\n      },\n      publicKeyNegate: function publicKeyNegate(pubkey) {\n        var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var output = arguments.length > 2 ? arguments[2] : undefined;\n        isUint8Array('public key', pubkey, [33, 65]);\n        isCompressed(compressed);\n        output = getAssertedOutput(output, compressed ? 33 : 65);\n        switch (secp256k1.publicKeyNegate(output, pubkey)) {\n          case 0:\n            return output;\n          case 1:\n            throw new Error(errors.PUBKEY_PARSE);\n          case 2:\n            throw new Error(errors.IMPOSSIBLE_CASE);\n          case 3:\n            throw new Error(errors.PUBKEY_SERIALIZE);\n        }\n      },\n      publicKeyCombine: function publicKeyCombine(pubkeys) {\n        var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var output = arguments.length > 2 ? arguments[2] : undefined;\n        assert(Array.isArray(pubkeys), 'Expected public keys to be an Array');\n        assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items');\n        for (var pubkey of pubkeys) {\n          isUint8Array('public key', pubkey, [33, 65]);\n        }\n        isCompressed(compressed);\n        output = getAssertedOutput(output, compressed ? 33 : 65);\n        switch (secp256k1.publicKeyCombine(output, pubkeys)) {\n          case 0:\n            return output;\n          case 1:\n            throw new Error(errors.PUBKEY_PARSE);\n          case 2:\n            throw new Error(errors.PUBKEY_COMBINE);\n          case 3:\n            throw new Error(errors.PUBKEY_SERIALIZE);\n        }\n      },\n      publicKeyTweakAdd: function publicKeyTweakAdd(pubkey, tweak) {\n        var compressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        var output = arguments.length > 3 ? arguments[3] : undefined;\n        isUint8Array('public key', pubkey, [33, 65]);\n        isUint8Array('tweak', tweak, 32);\n        isCompressed(compressed);\n        output = getAssertedOutput(output, compressed ? 33 : 65);\n        switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {\n          case 0:\n            return output;\n          case 1:\n            throw new Error(errors.PUBKEY_PARSE);\n          case 2:\n            throw new Error(errors.TWEAK_ADD);\n        }\n      },\n      publicKeyTweakMul: function publicKeyTweakMul(pubkey, tweak) {\n        var compressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        var output = arguments.length > 3 ? arguments[3] : undefined;\n        isUint8Array('public key', pubkey, [33, 65]);\n        isUint8Array('tweak', tweak, 32);\n        isCompressed(compressed);\n        output = getAssertedOutput(output, compressed ? 33 : 65);\n        switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {\n          case 0:\n            return output;\n          case 1:\n            throw new Error(errors.PUBKEY_PARSE);\n          case 2:\n            throw new Error(errors.TWEAK_MUL);\n        }\n      },\n      signatureNormalize: function signatureNormalize(sig) {\n        isUint8Array('signature', sig, 64);\n        switch (secp256k1.signatureNormalize(sig)) {\n          case 0:\n            return sig;\n          case 1:\n            throw new Error(errors.SIG_PARSE);\n        }\n      },\n      signatureExport: function signatureExport(sig, output) {\n        isUint8Array('signature', sig, 64);\n        output = getAssertedOutput(output, 72);\n        var obj = {\n          output: output,\n          outputlen: 72\n        };\n        switch (secp256k1.signatureExport(obj, sig)) {\n          case 0:\n            return output.slice(0, obj.outputlen);\n          case 1:\n            throw new Error(errors.SIG_PARSE);\n          case 2:\n            throw new Error(errors.IMPOSSIBLE_CASE);\n        }\n      },\n      signatureImport: function signatureImport(sig, output) {\n        isUint8Array('signature', sig);\n        output = getAssertedOutput(output, 64);\n        switch (secp256k1.signatureImport(output, sig)) {\n          case 0:\n            return output;\n          case 1:\n            throw new Error(errors.SIG_PARSE);\n          case 2:\n            throw new Error(errors.IMPOSSIBLE_CASE);\n        }\n      },\n      ecdsaSign: function ecdsaSign(msg32, seckey) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var output = arguments.length > 3 ? arguments[3] : undefined;\n        isUint8Array('message', msg32, 32);\n        isUint8Array('private key', seckey, 32);\n        assert(toTypeString(options) === 'Object', 'Expected options to be an Object');\n        if (options.data !== undefined) isUint8Array('options.data', options.data);\n        if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function');\n        output = getAssertedOutput(output, 64);\n        var obj = {\n          signature: output,\n          recid: null\n        };\n        switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {\n          case 0:\n            return obj;\n          case 1:\n            throw new Error(errors.SIGN);\n          case 2:\n            throw new Error(errors.IMPOSSIBLE_CASE);\n        }\n      },\n      ecdsaVerify: function ecdsaVerify(sig, msg32, pubkey) {\n        isUint8Array('signature', sig, 64);\n        isUint8Array('message', msg32, 32);\n        isUint8Array('public key', pubkey, [33, 65]);\n        switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {\n          case 0:\n            return true;\n          case 3:\n            return false;\n          case 1:\n            throw new Error(errors.SIG_PARSE);\n          case 2:\n            throw new Error(errors.PUBKEY_PARSE);\n        }\n      },\n      ecdsaRecover: function ecdsaRecover(sig, recid, msg32) {\n        var compressed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n        var output = arguments.length > 4 ? arguments[4] : undefined;\n        isUint8Array('signature', sig, 64);\n        assert(toTypeString(recid) === 'Number' && recid >= 0 && recid <= 3, 'Expected recovery id to be a Number within interval [0, 3]');\n        isUint8Array('message', msg32, 32);\n        isCompressed(compressed);\n        output = getAssertedOutput(output, compressed ? 33 : 65);\n        switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {\n          case 0:\n            return output;\n          case 1:\n            throw new Error(errors.SIG_PARSE);\n          case 2:\n            throw new Error(errors.RECOVER);\n          case 3:\n            throw new Error(errors.IMPOSSIBLE_CASE);\n        }\n      },\n      ecdh: function ecdh(pubkey, seckey) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var output = arguments.length > 3 ? arguments[3] : undefined;\n        isUint8Array('public key', pubkey, [33, 65]);\n        isUint8Array('private key', seckey, 32);\n        assert(toTypeString(options) === 'Object', 'Expected options to be an Object');\n        if (options.data !== undefined) isUint8Array('options.data', options.data);\n        if (options.hashfn !== undefined) {\n          assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function');\n          if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32);\n          if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32);\n          isUint8Array('output', output);\n        } else {\n          output = getAssertedOutput(output, 32);\n        }\n        switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {\n          case 0:\n            return output;\n          case 1:\n            throw new Error(errors.PUBKEY_PARSE);\n          case 2:\n            throw new Error(errors.ECDH);\n        }\n      }\n    };\n  };\n});","lineCount":313,"map":[[2,2,1,0],[2,6,1,6,"errors"],[2,12,1,12],[2,15,1,15],[3,4,2,2,"IMPOSSIBLE_CASE"],[3,19,2,17],[3,21,2,19],[3,60,2,58],[4,4,3,2,"TWEAK_ADD"],[4,13,3,11],[4,15,4,4],[4,82,4,71],[5,4,5,2,"TWEAK_MUL"],[5,13,5,11],[5,15,5,13],[5,60,5,58],[6,4,6,2,"CONTEXT_RANDOMIZE_UNKNOW"],[6,28,6,26],[6,30,6,28],[6,69,6,67],[7,4,7,2,"SECKEY_INVALID"],[7,18,7,16],[7,20,7,18],[7,44,7,42],[8,4,8,2,"PUBKEY_PARSE"],[8,16,8,14],[8,18,8,16],[8,50,8,48],[9,4,9,2,"PUBKEY_SERIALIZE"],[9,20,9,18],[9,22,9,20],[9,54,9,52],[10,4,10,2,"PUBKEY_COMBINE"],[10,18,10,16],[10,20,10,18],[10,61,10,59],[11,4,11,2,"SIG_PARSE"],[11,13,11,11],[11,15,11,13],[11,46,11,44],[12,4,12,2,"SIGN"],[12,8,12,6],[12,10,12,8],[12,80,12,78],[13,4,13,2,"RECOVER"],[13,11,13,9],[13,13,13,11],[13,46,13,44],[14,4,14,2,"ECDH"],[14,8,14,6],[14,10,14,8],[15,2,15,0],[15,3,15,1],[16,2,17,0],[16,11,17,9,"assert"],[16,17,17,15,"assert"],[16,18,17,17,"cond"],[16,22,17,21],[16,24,17,23,"msg"],[16,27,17,26],[16,29,17,28],[17,4,18,2],[17,8,18,6],[17,9,18,7,"cond"],[17,13,18,11],[17,15,18,13],[17,21,18,19],[17,25,18,23,"Error"],[17,30,18,28],[17,31,18,29,"msg"],[17,34,18,32],[17,35,18,33],[18,2,19,0],[19,2,21,0],[19,11,21,9,"isUint8Array"],[19,23,21,21,"isUint8Array"],[19,24,21,23,"name"],[19,28,21,27],[19,30,21,29,"value"],[19,35,21,34],[19,37,21,36,"length"],[19,43,21,42],[19,45,21,44],[20,4,22,2,"assert"],[20,10,22,8],[20,11,22,9,"value"],[20,16,22,14],[20,28,22,26,"Uint8Array"],[20,38,22,36],[20,40,22,38],[20,52,22,50,"name"],[20,56,22,54],[20,78,22,76],[20,79,22,77],[21,4,24,2],[21,8,24,6,"length"],[21,14,24,12],[21,19,24,17,"undefined"],[21,28,24,26],[21,30,24,28],[22,6,25,4],[22,10,25,8,"Array"],[22,15,25,13],[22,16,25,14,"isArray"],[22,23,25,21],[22,24,25,22,"length"],[22,30,25,28],[22,31,25,29],[22,33,25,31],[23,8,26,6],[23,12,26,12,"numbers"],[23,19,26,19],[23,22,26,22,"length"],[23,28,26,28],[23,29,26,29,"join"],[23,33,26,33],[23,34,26,34],[23,38,26,38],[23,39,26,39],[24,8,27,6],[24,12,27,12,"msg"],[24,15,27,15],[24,18,27,18],[24,30,27,30,"name"],[24,34,27,34],[24,71,27,71,"numbers"],[24,78,27,78],[24,81,27,81],[25,8,28,6,"assert"],[25,14,28,12],[25,15,28,13,"length"],[25,21,28,19],[25,22,28,20,"includes"],[25,30,28,28],[25,31,28,29,"value"],[25,36,28,34],[25,37,28,35,"length"],[25,43,28,41],[25,44,28,42],[25,46,28,44,"msg"],[25,49,28,47],[25,50,28,48],[26,6,29,4],[26,7,29,5],[26,13,29,11],[27,8,30,6],[27,12,30,12,"msg"],[27,16,30,15],[27,19,30,18],[27,31,30,30,"name"],[27,35,30,34],[27,71,30,70,"length"],[27,77,30,76],[27,79,30,78],[28,8,31,6,"assert"],[28,14,31,12],[28,15,31,13,"value"],[28,20,31,18],[28,21,31,19,"length"],[28,27,31,25],[28,32,31,30,"length"],[28,38,31,36],[28,40,31,38,"msg"],[28,44,31,41],[28,45,31,42],[29,6,32,4],[30,4,33,2],[31,2,34,0],[32,2,36,0],[32,11,36,9,"isCompressed"],[32,23,36,21,"isCompressed"],[32,24,36,23,"value"],[32,29,36,28],[32,31,36,30],[33,4,37,2,"assert"],[33,10,37,8],[33,11,37,9,"toTypeString"],[33,23,37,21],[33,24,37,22,"value"],[33,29,37,27],[33,30,37,28],[33,35,37,33],[33,44,37,42],[33,46,37,44],[33,83,37,81],[33,84,37,82],[34,2,38,0],[35,2,40,0],[35,11,40,9,"getAssertedOutput"],[35,28,40,26,"getAssertedOutput"],[35,29,40,26],[35,31,40,75],[36,4,40,75],[36,8,40,28,"output"],[36,14,40,34],[36,17,40,34,"arguments"],[36,26,40,34],[36,27,40,34,"length"],[36,33,40,34],[36,41,40,34,"arguments"],[36,50,40,34],[36,58,40,34,"undefined"],[36,67,40,34],[36,70,40,34,"arguments"],[36,79,40,34],[36,85,40,37],[36,95,40,38,"len"],[36,98,40,41],[37,6,40,41],[37,13,40,46],[37,17,40,50,"Uint8Array"],[37,27,40,60],[37,28,40,61,"len"],[37,31,40,64],[37,32,40,65],[38,4,40,65],[39,4,40,65],[39,8,40,67,"length"],[39,14,40,73],[39,17,40,73,"arguments"],[39,26,40,73],[39,27,40,73,"length"],[39,33,40,73],[39,40,40,73,"arguments"],[39,49,40,73],[39,55,40,73,"undefined"],[39,64,40,73],[40,4,41,2],[40,8,41,6],[40,15,41,13,"output"],[40,21,41,19],[40,26,41,24],[40,36,41,34],[40,38,41,36,"output"],[40,44,41,42],[40,47,41,45,"output"],[40,53,41,51],[40,54,41,52,"length"],[40,60,41,58],[40,61,41,59],[41,4,42,2,"isUint8Array"],[41,16,42,14],[41,17,42,15],[41,25,42,23],[41,27,42,25,"output"],[41,33,42,31],[41,35,42,33,"length"],[41,41,42,39],[41,42,42,40],[42,4,43,2],[42,11,43,9,"output"],[42,17,43,15],[43,2,44,0],[44,2,46,0],[44,11,46,9,"toTypeString"],[44,23,46,21,"toTypeString"],[44,24,46,23,"value"],[44,29,46,28],[44,31,46,30],[45,4,47,2],[45,11,47,9,"Object"],[45,17,47,15],[45,18,47,16,"prototype"],[45,27,47,25],[45,28,47,26,"toString"],[45,36,47,34],[45,37,47,35,"call"],[45,41,47,39],[45,42,47,40,"value"],[45,47,47,45],[45,48,47,46],[45,49,47,47,"slice"],[45,54,47,52],[45,55,47,53],[45,56,47,54],[45,58,47,56],[45,59,47,57],[45,60,47,58],[45,61,47,59],[46,2,48,0],[47,2,50,0,"module"],[47,8,50,6],[47,9,50,7,"exports"],[47,16,50,14],[47,19,50,17],[47,29,50,18,"secp256k1"],[47,38,50,27],[47,40,50,32],[48,4,51,2],[48,11,51,9],[49,6,52,4,"contextRandomize"],[49,22,52,20],[49,33,52,4,"contextRandomize"],[49,49,52,20,"contextRandomize"],[49,50,52,22,"seed"],[49,54,52,26],[49,56,52,28],[50,8,53,6,"assert"],[50,14,53,12],[50,15,54,8,"seed"],[50,19,54,12],[50,24,54,17],[50,28,54,21],[50,32,54,25,"seed"],[50,36,54,29],[50,48,54,41,"Uint8Array"],[50,58,54,51],[50,60,55,8],[50,103,56,6],[50,104,56,7],[51,8,57,6],[51,12,57,10,"seed"],[51,16,57,14],[51,21,57,19],[51,25,57,23],[51,27,57,25,"isUint8Array"],[51,39,57,37],[51,40,57,38],[51,46,57,44],[51,48,57,46,"seed"],[51,52,57,50],[51,54,57,52],[51,56,57,54],[51,57,57,55],[52,8,59,6],[52,16,59,14,"secp256k1"],[52,25,59,23],[52,26,59,24,"contextRandomize"],[52,42,59,40],[52,43,59,41,"seed"],[52,47,59,45],[52,48,59,46],[53,10,60,8],[53,15,60,13],[53,16,60,14],[54,12,61,10],[54,18,61,16],[54,22,61,20,"Error"],[54,27,61,25],[54,28,61,26,"errors"],[54,34,61,32],[54,35,61,33,"CONTEXT_RANDOMIZE_UNKNOW"],[54,59,61,57],[54,60,61,58],[55,8,62,6],[56,6,63,4],[56,7,63,5],[57,6,65,4,"privateKeyVerify"],[57,22,65,20],[57,33,65,4,"privateKeyVerify"],[57,49,65,20,"privateKeyVerify"],[57,50,65,22,"seckey"],[57,56,65,28],[57,58,65,30],[58,8,66,6,"isUint8Array"],[58,20,66,18],[58,21,66,19],[58,34,66,32],[58,36,66,34,"seckey"],[58,42,66,40],[58,44,66,42],[58,46,66,44],[58,47,66,45],[59,8,68,6],[59,15,68,13,"secp256k1"],[59,24,68,22],[59,25,68,23,"privateKeyVerify"],[59,41,68,39],[59,42,68,40,"seckey"],[59,48,68,46],[59,49,68,47],[59,54,68,52],[59,55,68,53],[60,6,69,4],[60,7,69,5],[61,6,71,4,"privateKeyNegate"],[61,22,71,20],[61,33,71,4,"privateKeyNegate"],[61,49,71,20,"privateKeyNegate"],[61,50,71,22,"seckey"],[61,56,71,28],[61,58,71,30],[62,8,72,6,"isUint8Array"],[62,20,72,18],[62,21,72,19],[62,34,72,32],[62,36,72,34,"seckey"],[62,42,72,40],[62,44,72,42],[62,46,72,44],[62,47,72,45],[63,8,74,6],[63,16,74,14,"secp256k1"],[63,25,74,23],[63,26,74,24,"privateKeyNegate"],[63,42,74,40],[63,43,74,41,"seckey"],[63,49,74,47],[63,50,74,48],[64,10,75,8],[64,15,75,13],[64,16,75,14],[65,12,76,10],[65,19,76,17,"seckey"],[65,25,76,23],[66,10,77,8],[66,15,77,13],[66,16,77,14],[67,12,78,10],[67,18,78,16],[67,22,78,20,"Error"],[67,27,78,25],[67,28,78,26,"errors"],[67,34,78,32],[67,35,78,33,"IMPOSSIBLE_CASE"],[67,50,78,48],[67,51,78,49],[68,8,79,6],[69,6,80,4],[69,7,80,5],[70,6,82,4,"privateKeyTweakAdd"],[70,24,82,22],[70,35,82,4,"privateKeyTweakAdd"],[70,53,82,22,"privateKeyTweakAdd"],[70,54,82,24,"seckey"],[70,60,82,30],[70,62,82,32,"tweak"],[70,67,82,37],[70,69,82,39],[71,8,83,6,"isUint8Array"],[71,20,83,18],[71,21,83,19],[71,34,83,32],[71,36,83,34,"seckey"],[71,42,83,40],[71,44,83,42],[71,46,83,44],[71,47,83,45],[72,8,84,6,"isUint8Array"],[72,20,84,18],[72,21,84,19],[72,28,84,26],[72,30,84,28,"tweak"],[72,35,84,33],[72,37,84,35],[72,39,84,37],[72,40,84,38],[73,8,86,6],[73,16,86,14,"secp256k1"],[73,25,86,23],[73,26,86,24,"privateKeyTweakAdd"],[73,44,86,42],[73,45,86,43,"seckey"],[73,51,86,49],[73,53,86,51,"tweak"],[73,58,86,56],[73,59,86,57],[74,10,87,8],[74,15,87,13],[74,16,87,14],[75,12,88,10],[75,19,88,17,"seckey"],[75,25,88,23],[76,10,89,8],[76,15,89,13],[76,16,89,14],[77,12,90,10],[77,18,90,16],[77,22,90,20,"Error"],[77,27,90,25],[77,28,90,26,"errors"],[77,34,90,32],[77,35,90,33,"TWEAK_ADD"],[77,44,90,42],[77,45,90,43],[78,8,91,6],[79,6,92,4],[79,7,92,5],[80,6,94,4,"privateKeyTweakMul"],[80,24,94,22],[80,35,94,4,"privateKeyTweakMul"],[80,53,94,22,"privateKeyTweakMul"],[80,54,94,24,"seckey"],[80,60,94,30],[80,62,94,32,"tweak"],[80,67,94,37],[80,69,94,39],[81,8,95,6,"isUint8Array"],[81,20,95,18],[81,21,95,19],[81,34,95,32],[81,36,95,34,"seckey"],[81,42,95,40],[81,44,95,42],[81,46,95,44],[81,47,95,45],[82,8,96,6,"isUint8Array"],[82,20,96,18],[82,21,96,19],[82,28,96,26],[82,30,96,28,"tweak"],[82,35,96,33],[82,37,96,35],[82,39,96,37],[82,40,96,38],[83,8,98,6],[83,16,98,14,"secp256k1"],[83,25,98,23],[83,26,98,24,"privateKeyTweakMul"],[83,44,98,42],[83,45,98,43,"seckey"],[83,51,98,49],[83,53,98,51,"tweak"],[83,58,98,56],[83,59,98,57],[84,10,99,8],[84,15,99,13],[84,16,99,14],[85,12,100,10],[85,19,100,17,"seckey"],[85,25,100,23],[86,10,101,8],[86,15,101,13],[86,16,101,14],[87,12,102,10],[87,18,102,16],[87,22,102,20,"Error"],[87,27,102,25],[87,28,102,26,"errors"],[87,34,102,32],[87,35,102,33,"TWEAK_MUL"],[87,44,102,42],[87,45,102,43],[88,8,103,6],[89,6,104,4],[89,7,104,5],[90,6,106,4,"publicKeyVerify"],[90,21,106,19],[90,32,106,4,"publicKeyVerify"],[90,47,106,19,"publicKeyVerify"],[90,48,106,21,"pubkey"],[90,54,106,27],[90,56,106,29],[91,8,107,6,"isUint8Array"],[91,20,107,18],[91,21,107,19],[91,33,107,31],[91,35,107,33,"pubkey"],[91,41,107,39],[91,43,107,41],[91,44,107,42],[91,46,107,44],[91,48,107,46],[91,50,107,48],[91,51,107,49],[91,52,107,50],[92,8,109,6],[92,15,109,13,"secp256k1"],[92,24,109,22],[92,25,109,23,"publicKeyVerify"],[92,40,109,38],[92,41,109,39,"pubkey"],[92,47,109,45],[92,48,109,46],[92,53,109,51],[92,54,109,52],[93,6,110,4],[93,7,110,5],[94,6,112,4,"publicKeyCreate"],[94,21,112,19],[94,32,112,4,"publicKeyCreate"],[94,47,112,19,"publicKeyCreate"],[94,48,112,21,"seckey"],[94,54,112,27],[94,56,112,56],[95,8,112,56],[95,12,112,29,"compressed"],[95,22,112,39],[95,25,112,39,"arguments"],[95,34,112,39],[95,35,112,39,"length"],[95,41,112,39],[95,49,112,39,"arguments"],[95,58,112,39],[95,66,112,39,"undefined"],[95,75,112,39],[95,78,112,39,"arguments"],[95,87,112,39],[95,93,112,42],[95,97,112,46],[96,8,112,46],[96,12,112,48,"output"],[96,18,112,54],[96,21,112,54,"arguments"],[96,30,112,54],[96,31,112,54,"length"],[96,37,112,54],[96,44,112,54,"arguments"],[96,53,112,54],[96,59,112,54,"undefined"],[96,68,112,54],[97,8,113,6,"isUint8Array"],[97,20,113,18],[97,21,113,19],[97,34,113,32],[97,36,113,34,"seckey"],[97,42,113,40],[97,44,113,42],[97,46,113,44],[97,47,113,45],[98,8,114,6,"isCompressed"],[98,20,114,18],[98,21,114,19,"compressed"],[98,31,114,29],[98,32,114,30],[99,8,115,6,"output"],[99,14,115,12],[99,17,115,15,"getAssertedOutput"],[99,34,115,32],[99,35,115,33,"output"],[99,41,115,39],[99,43,115,41,"compressed"],[99,53,115,51],[99,56,115,54],[99,58,115,56],[99,61,115,59],[99,63,115,61],[99,64,115,62],[100,8,117,6],[100,16,117,14,"secp256k1"],[100,25,117,23],[100,26,117,24,"publicKeyCreate"],[100,41,117,39],[100,42,117,40,"output"],[100,48,117,46],[100,50,117,48,"seckey"],[100,56,117,54],[100,57,117,55],[101,10,118,8],[101,15,118,13],[101,16,118,14],[102,12,119,10],[102,19,119,17,"output"],[102,25,119,23],[103,10,120,8],[103,15,120,13],[103,16,120,14],[104,12,121,10],[104,18,121,16],[104,22,121,20,"Error"],[104,27,121,25],[104,28,121,26,"errors"],[104,34,121,32],[104,35,121,33,"SECKEY_INVALID"],[104,49,121,47],[104,50,121,48],[105,10,122,8],[105,15,122,13],[105,16,122,14],[106,12,123,10],[106,18,123,16],[106,22,123,20,"Error"],[106,27,123,25],[106,28,123,26,"errors"],[106,34,123,32],[106,35,123,33,"PUBKEY_SERIALIZE"],[106,51,123,49],[106,52,123,50],[107,8,124,6],[108,6,125,4],[108,7,125,5],[109,6,127,4,"publicKeyConvert"],[109,22,127,20],[109,33,127,4,"publicKeyConvert"],[109,49,127,20,"publicKeyConvert"],[109,50,127,22,"pubkey"],[109,56,127,28],[109,58,127,57],[110,8,127,57],[110,12,127,30,"compressed"],[110,22,127,40],[110,25,127,40,"arguments"],[110,34,127,40],[110,35,127,40,"length"],[110,41,127,40],[110,49,127,40,"arguments"],[110,58,127,40],[110,66,127,40,"undefined"],[110,75,127,40],[110,78,127,40,"arguments"],[110,87,127,40],[110,93,127,43],[110,97,127,47],[111,8,127,47],[111,12,127,49,"output"],[111,18,127,55],[111,21,127,55,"arguments"],[111,30,127,55],[111,31,127,55,"length"],[111,37,127,55],[111,44,127,55,"arguments"],[111,53,127,55],[111,59,127,55,"undefined"],[111,68,127,55],[112,8,128,6,"isUint8Array"],[112,20,128,18],[112,21,128,19],[112,33,128,31],[112,35,128,33,"pubkey"],[112,41,128,39],[112,43,128,41],[112,44,128,42],[112,46,128,44],[112,48,128,46],[112,50,128,48],[112,51,128,49],[112,52,128,50],[113,8,129,6,"isCompressed"],[113,20,129,18],[113,21,129,19,"compressed"],[113,31,129,29],[113,32,129,30],[114,8,130,6,"output"],[114,14,130,12],[114,17,130,15,"getAssertedOutput"],[114,34,130,32],[114,35,130,33,"output"],[114,41,130,39],[114,43,130,41,"compressed"],[114,53,130,51],[114,56,130,54],[114,58,130,56],[114,61,130,59],[114,63,130,61],[114,64,130,62],[115,8,132,6],[115,16,132,14,"secp256k1"],[115,25,132,23],[115,26,132,24,"publicKeyConvert"],[115,42,132,40],[115,43,132,41,"output"],[115,49,132,47],[115,51,132,49,"pubkey"],[115,57,132,55],[115,58,132,56],[116,10,133,8],[116,15,133,13],[116,16,133,14],[117,12,134,10],[117,19,134,17,"output"],[117,25,134,23],[118,10,135,8],[118,15,135,13],[118,16,135,14],[119,12,136,10],[119,18,136,16],[119,22,136,20,"Error"],[119,27,136,25],[119,28,136,26,"errors"],[119,34,136,32],[119,35,136,33,"PUBKEY_PARSE"],[119,47,136,45],[119,48,136,46],[120,10,137,8],[120,15,137,13],[120,16,137,14],[121,12,138,10],[121,18,138,16],[121,22,138,20,"Error"],[121,27,138,25],[121,28,138,26,"errors"],[121,34,138,32],[121,35,138,33,"PUBKEY_SERIALIZE"],[121,51,138,49],[121,52,138,50],[122,8,139,6],[123,6,140,4],[123,7,140,5],[124,6,142,4,"publicKeyNegate"],[124,21,142,19],[124,32,142,4,"publicKeyNegate"],[124,47,142,19,"publicKeyNegate"],[124,48,142,21,"pubkey"],[124,54,142,27],[124,56,142,56],[125,8,142,56],[125,12,142,29,"compressed"],[125,22,142,39],[125,25,142,39,"arguments"],[125,34,142,39],[125,35,142,39,"length"],[125,41,142,39],[125,49,142,39,"arguments"],[125,58,142,39],[125,66,142,39,"undefined"],[125,75,142,39],[125,78,142,39,"arguments"],[125,87,142,39],[125,93,142,42],[125,97,142,46],[126,8,142,46],[126,12,142,48,"output"],[126,18,142,54],[126,21,142,54,"arguments"],[126,30,142,54],[126,31,142,54,"length"],[126,37,142,54],[126,44,142,54,"arguments"],[126,53,142,54],[126,59,142,54,"undefined"],[126,68,142,54],[127,8,143,6,"isUint8Array"],[127,20,143,18],[127,21,143,19],[127,33,143,31],[127,35,143,33,"pubkey"],[127,41,143,39],[127,43,143,41],[127,44,143,42],[127,46,143,44],[127,48,143,46],[127,50,143,48],[127,51,143,49],[127,52,143,50],[128,8,144,6,"isCompressed"],[128,20,144,18],[128,21,144,19,"compressed"],[128,31,144,29],[128,32,144,30],[129,8,145,6,"output"],[129,14,145,12],[129,17,145,15,"getAssertedOutput"],[129,34,145,32],[129,35,145,33,"output"],[129,41,145,39],[129,43,145,41,"compressed"],[129,53,145,51],[129,56,145,54],[129,58,145,56],[129,61,145,59],[129,63,145,61],[129,64,145,62],[130,8,147,6],[130,16,147,14,"secp256k1"],[130,25,147,23],[130,26,147,24,"publicKeyNegate"],[130,41,147,39],[130,42,147,40,"output"],[130,48,147,46],[130,50,147,48,"pubkey"],[130,56,147,54],[130,57,147,55],[131,10,148,8],[131,15,148,13],[131,16,148,14],[132,12,149,10],[132,19,149,17,"output"],[132,25,149,23],[133,10,150,8],[133,15,150,13],[133,16,150,14],[134,12,151,10],[134,18,151,16],[134,22,151,20,"Error"],[134,27,151,25],[134,28,151,26,"errors"],[134,34,151,32],[134,35,151,33,"PUBKEY_PARSE"],[134,47,151,45],[134,48,151,46],[135,10,152,8],[135,15,152,13],[135,16,152,14],[136,12,153,10],[136,18,153,16],[136,22,153,20,"Error"],[136,27,153,25],[136,28,153,26,"errors"],[136,34,153,32],[136,35,153,33,"IMPOSSIBLE_CASE"],[136,50,153,48],[136,51,153,49],[137,10,154,8],[137,15,154,13],[137,16,154,14],[138,12,155,10],[138,18,155,16],[138,22,155,20,"Error"],[138,27,155,25],[138,28,155,26,"errors"],[138,34,155,32],[138,35,155,33,"PUBKEY_SERIALIZE"],[138,51,155,49],[138,52,155,50],[139,8,156,6],[140,6,157,4],[140,7,157,5],[141,6,159,4,"publicKeyCombine"],[141,22,159,20],[141,33,159,4,"publicKeyCombine"],[141,49,159,20,"publicKeyCombine"],[141,50,159,22,"pubkeys"],[141,57,159,29],[141,59,159,58],[142,8,159,58],[142,12,159,31,"compressed"],[142,22,159,41],[142,25,159,41,"arguments"],[142,34,159,41],[142,35,159,41,"length"],[142,41,159,41],[142,49,159,41,"arguments"],[142,58,159,41],[142,66,159,41,"undefined"],[142,75,159,41],[142,78,159,41,"arguments"],[142,87,159,41],[142,93,159,44],[142,97,159,48],[143,8,159,48],[143,12,159,50,"output"],[143,18,159,56],[143,21,159,56,"arguments"],[143,30,159,56],[143,31,159,56,"length"],[143,37,159,56],[143,44,159,56,"arguments"],[143,53,159,56],[143,59,159,56,"undefined"],[143,68,159,56],[144,8,160,6,"assert"],[144,14,160,12],[144,15,160,13,"Array"],[144,20,160,18],[144,21,160,19,"isArray"],[144,28,160,26],[144,29,160,27,"pubkeys"],[144,36,160,34],[144,37,160,35],[144,39,160,37],[144,76,160,74],[144,77,160,75],[145,8,161,6,"assert"],[145,14,161,12],[145,15,161,13,"pubkeys"],[145,22,161,20],[145,23,161,21,"length"],[145,29,161,27],[145,32,161,30],[145,33,161,31],[145,35,161,33],[145,94,161,92],[145,95,161,93],[146,8,162,6],[146,13,162,11],[146,17,162,17,"pubkey"],[146,23,162,23],[146,27,162,27,"pubkeys"],[146,34,162,34],[146,36,162,36],[147,10,163,8,"isUint8Array"],[147,22,163,20],[147,23,163,21],[147,35,163,33],[147,37,163,35,"pubkey"],[147,43,163,41],[147,45,163,43],[147,46,163,44],[147,48,163,46],[147,50,163,48],[147,52,163,50],[147,53,163,51],[147,54,163,52],[148,8,164,6],[149,8,165,6,"isCompressed"],[149,20,165,18],[149,21,165,19,"compressed"],[149,31,165,29],[149,32,165,30],[150,8,166,6,"output"],[150,14,166,12],[150,17,166,15,"getAssertedOutput"],[150,34,166,32],[150,35,166,33,"output"],[150,41,166,39],[150,43,166,41,"compressed"],[150,53,166,51],[150,56,166,54],[150,58,166,56],[150,61,166,59],[150,63,166,61],[150,64,166,62],[151,8,168,6],[151,16,168,14,"secp256k1"],[151,25,168,23],[151,26,168,24,"publicKeyCombine"],[151,42,168,40],[151,43,168,41,"output"],[151,49,168,47],[151,51,168,49,"pubkeys"],[151,58,168,56],[151,59,168,57],[152,10,169,8],[152,15,169,13],[152,16,169,14],[153,12,170,10],[153,19,170,17,"output"],[153,25,170,23],[154,10,171,8],[154,15,171,13],[154,16,171,14],[155,12,172,10],[155,18,172,16],[155,22,172,20,"Error"],[155,27,172,25],[155,28,172,26,"errors"],[155,34,172,32],[155,35,172,33,"PUBKEY_PARSE"],[155,47,172,45],[155,48,172,46],[156,10,173,8],[156,15,173,13],[156,16,173,14],[157,12,174,10],[157,18,174,16],[157,22,174,20,"Error"],[157,27,174,25],[157,28,174,26,"errors"],[157,34,174,32],[157,35,174,33,"PUBKEY_COMBINE"],[157,49,174,47],[157,50,174,48],[158,10,175,8],[158,15,175,13],[158,16,175,14],[159,12,176,10],[159,18,176,16],[159,22,176,20,"Error"],[159,27,176,25],[159,28,176,26,"errors"],[159,34,176,32],[159,35,176,33,"PUBKEY_SERIALIZE"],[159,51,176,49],[159,52,176,50],[160,8,177,6],[161,6,178,4],[161,7,178,5],[162,6,180,4,"publicKeyTweakAdd"],[162,23,180,21],[162,34,180,4,"publicKeyTweakAdd"],[162,51,180,21,"publicKeyTweakAdd"],[162,52,180,23,"pubkey"],[162,58,180,29],[162,60,180,31,"tweak"],[162,65,180,36],[162,67,180,65],[163,8,180,65],[163,12,180,38,"compressed"],[163,22,180,48],[163,25,180,48,"arguments"],[163,34,180,48],[163,35,180,48,"length"],[163,41,180,48],[163,49,180,48,"arguments"],[163,58,180,48],[163,66,180,48,"undefined"],[163,75,180,48],[163,78,180,48,"arguments"],[163,87,180,48],[163,93,180,51],[163,97,180,55],[164,8,180,55],[164,12,180,57,"output"],[164,18,180,63],[164,21,180,63,"arguments"],[164,30,180,63],[164,31,180,63,"length"],[164,37,180,63],[164,44,180,63,"arguments"],[164,53,180,63],[164,59,180,63,"undefined"],[164,68,180,63],[165,8,181,6,"isUint8Array"],[165,20,181,18],[165,21,181,19],[165,33,181,31],[165,35,181,33,"pubkey"],[165,41,181,39],[165,43,181,41],[165,44,181,42],[165,46,181,44],[165,48,181,46],[165,50,181,48],[165,51,181,49],[165,52,181,50],[166,8,182,6,"isUint8Array"],[166,20,182,18],[166,21,182,19],[166,28,182,26],[166,30,182,28,"tweak"],[166,35,182,33],[166,37,182,35],[166,39,182,37],[166,40,182,38],[167,8,183,6,"isCompressed"],[167,20,183,18],[167,21,183,19,"compressed"],[167,31,183,29],[167,32,183,30],[168,8,184,6,"output"],[168,14,184,12],[168,17,184,15,"getAssertedOutput"],[168,34,184,32],[168,35,184,33,"output"],[168,41,184,39],[168,43,184,41,"compressed"],[168,53,184,51],[168,56,184,54],[168,58,184,56],[168,61,184,59],[168,63,184,61],[168,64,184,62],[169,8,186,6],[169,16,186,14,"secp256k1"],[169,25,186,23],[169,26,186,24,"publicKeyTweakAdd"],[169,43,186,41],[169,44,186,42,"output"],[169,50,186,48],[169,52,186,50,"pubkey"],[169,58,186,56],[169,60,186,58,"tweak"],[169,65,186,63],[169,66,186,64],[170,10,187,8],[170,15,187,13],[170,16,187,14],[171,12,188,10],[171,19,188,17,"output"],[171,25,188,23],[172,10,189,8],[172,15,189,13],[172,16,189,14],[173,12,190,10],[173,18,190,16],[173,22,190,20,"Error"],[173,27,190,25],[173,28,190,26,"errors"],[173,34,190,32],[173,35,190,33,"PUBKEY_PARSE"],[173,47,190,45],[173,48,190,46],[174,10,191,8],[174,15,191,13],[174,16,191,14],[175,12,192,10],[175,18,192,16],[175,22,192,20,"Error"],[175,27,192,25],[175,28,192,26,"errors"],[175,34,192,32],[175,35,192,33,"TWEAK_ADD"],[175,44,192,42],[175,45,192,43],[176,8,193,6],[177,6,194,4],[177,7,194,5],[178,6,196,4,"publicKeyTweakMul"],[178,23,196,21],[178,34,196,4,"publicKeyTweakMul"],[178,51,196,21,"publicKeyTweakMul"],[178,52,196,23,"pubkey"],[178,58,196,29],[178,60,196,31,"tweak"],[178,65,196,36],[178,67,196,65],[179,8,196,65],[179,12,196,38,"compressed"],[179,22,196,48],[179,25,196,48,"arguments"],[179,34,196,48],[179,35,196,48,"length"],[179,41,196,48],[179,49,196,48,"arguments"],[179,58,196,48],[179,66,196,48,"undefined"],[179,75,196,48],[179,78,196,48,"arguments"],[179,87,196,48],[179,93,196,51],[179,97,196,55],[180,8,196,55],[180,12,196,57,"output"],[180,18,196,63],[180,21,196,63,"arguments"],[180,30,196,63],[180,31,196,63,"length"],[180,37,196,63],[180,44,196,63,"arguments"],[180,53,196,63],[180,59,196,63,"undefined"],[180,68,196,63],[181,8,197,6,"isUint8Array"],[181,20,197,18],[181,21,197,19],[181,33,197,31],[181,35,197,33,"pubkey"],[181,41,197,39],[181,43,197,41],[181,44,197,42],[181,46,197,44],[181,48,197,46],[181,50,197,48],[181,51,197,49],[181,52,197,50],[182,8,198,6,"isUint8Array"],[182,20,198,18],[182,21,198,19],[182,28,198,26],[182,30,198,28,"tweak"],[182,35,198,33],[182,37,198,35],[182,39,198,37],[182,40,198,38],[183,8,199,6,"isCompressed"],[183,20,199,18],[183,21,199,19,"compressed"],[183,31,199,29],[183,32,199,30],[184,8,200,6,"output"],[184,14,200,12],[184,17,200,15,"getAssertedOutput"],[184,34,200,32],[184,35,200,33,"output"],[184,41,200,39],[184,43,200,41,"compressed"],[184,53,200,51],[184,56,200,54],[184,58,200,56],[184,61,200,59],[184,63,200,61],[184,64,200,62],[185,8,202,6],[185,16,202,14,"secp256k1"],[185,25,202,23],[185,26,202,24,"publicKeyTweakMul"],[185,43,202,41],[185,44,202,42,"output"],[185,50,202,48],[185,52,202,50,"pubkey"],[185,58,202,56],[185,60,202,58,"tweak"],[185,65,202,63],[185,66,202,64],[186,10,203,8],[186,15,203,13],[186,16,203,14],[187,12,204,10],[187,19,204,17,"output"],[187,25,204,23],[188,10,205,8],[188,15,205,13],[188,16,205,14],[189,12,206,10],[189,18,206,16],[189,22,206,20,"Error"],[189,27,206,25],[189,28,206,26,"errors"],[189,34,206,32],[189,35,206,33,"PUBKEY_PARSE"],[189,47,206,45],[189,48,206,46],[190,10,207,8],[190,15,207,13],[190,16,207,14],[191,12,208,10],[191,18,208,16],[191,22,208,20,"Error"],[191,27,208,25],[191,28,208,26,"errors"],[191,34,208,32],[191,35,208,33,"TWEAK_MUL"],[191,44,208,42],[191,45,208,43],[192,8,209,6],[193,6,210,4],[193,7,210,5],[194,6,212,4,"signatureNormalize"],[194,24,212,22],[194,35,212,4,"signatureNormalize"],[194,53,212,22,"signatureNormalize"],[194,54,212,24,"sig"],[194,57,212,27],[194,59,212,29],[195,8,213,6,"isUint8Array"],[195,20,213,18],[195,21,213,19],[195,32,213,30],[195,34,213,32,"sig"],[195,37,213,35],[195,39,213,37],[195,41,213,39],[195,42,213,40],[196,8,215,6],[196,16,215,14,"secp256k1"],[196,25,215,23],[196,26,215,24,"signatureNormalize"],[196,44,215,42],[196,45,215,43,"sig"],[196,48,215,46],[196,49,215,47],[197,10,216,8],[197,15,216,13],[197,16,216,14],[198,12,217,10],[198,19,217,17,"sig"],[198,22,217,20],[199,10,218,8],[199,15,218,13],[199,16,218,14],[200,12,219,10],[200,18,219,16],[200,22,219,20,"Error"],[200,27,219,25],[200,28,219,26,"errors"],[200,34,219,32],[200,35,219,33,"SIG_PARSE"],[200,44,219,42],[200,45,219,43],[201,8,220,6],[202,6,221,4],[202,7,221,5],[203,6,223,4,"signatureExport"],[203,21,223,19],[203,32,223,4,"signatureExport"],[203,47,223,19,"signatureExport"],[203,48,223,21,"sig"],[203,51,223,24],[203,53,223,26,"output"],[203,59,223,32],[203,61,223,34],[204,8,224,6,"isUint8Array"],[204,20,224,18],[204,21,224,19],[204,32,224,30],[204,34,224,32,"sig"],[204,37,224,35],[204,39,224,37],[204,41,224,39],[204,42,224,40],[205,8,225,6,"output"],[205,14,225,12],[205,17,225,15,"getAssertedOutput"],[205,34,225,32],[205,35,225,33,"output"],[205,41,225,39],[205,43,225,41],[205,45,225,43],[205,46,225,44],[206,8,227,6],[206,12,227,12,"obj"],[206,15,227,15],[206,18,227,18],[207,10,227,20,"output"],[207,16,227,26],[207,18,227,20,"output"],[207,24,227,26],[208,10,227,28,"outputlen"],[208,19,227,37],[208,21,227,39],[209,8,227,42],[209,9,227,43],[210,8,228,6],[210,16,228,14,"secp256k1"],[210,25,228,23],[210,26,228,24,"signatureExport"],[210,41,228,39],[210,42,228,40,"obj"],[210,45,228,43],[210,47,228,45,"sig"],[210,50,228,48],[210,51,228,49],[211,10,229,8],[211,15,229,13],[211,16,229,14],[212,12,230,10],[212,19,230,17,"output"],[212,25,230,23],[212,26,230,24,"slice"],[212,31,230,29],[212,32,230,30],[212,33,230,31],[212,35,230,33,"obj"],[212,38,230,36],[212,39,230,37,"outputlen"],[212,48,230,46],[212,49,230,47],[213,10,231,8],[213,15,231,13],[213,16,231,14],[214,12,232,10],[214,18,232,16],[214,22,232,20,"Error"],[214,27,232,25],[214,28,232,26,"errors"],[214,34,232,32],[214,35,232,33,"SIG_PARSE"],[214,44,232,42],[214,45,232,43],[215,10,233,8],[215,15,233,13],[215,16,233,14],[216,12,234,10],[216,18,234,16],[216,22,234,20,"Error"],[216,27,234,25],[216,28,234,26,"errors"],[216,34,234,32],[216,35,234,33,"IMPOSSIBLE_CASE"],[216,50,234,48],[216,51,234,49],[217,8,235,6],[218,6,236,4],[218,7,236,5],[219,6,238,4,"signatureImport"],[219,21,238,19],[219,32,238,4,"signatureImport"],[219,47,238,19,"signatureImport"],[219,48,238,21,"sig"],[219,51,238,24],[219,53,238,26,"output"],[219,59,238,32],[219,61,238,34],[220,8,239,6,"isUint8Array"],[220,20,239,18],[220,21,239,19],[220,32,239,30],[220,34,239,32,"sig"],[220,37,239,35],[220,38,239,36],[221,8,240,6,"output"],[221,14,240,12],[221,17,240,15,"getAssertedOutput"],[221,34,240,32],[221,35,240,33,"output"],[221,41,240,39],[221,43,240,41],[221,45,240,43],[221,46,240,44],[222,8,242,6],[222,16,242,14,"secp256k1"],[222,25,242,23],[222,26,242,24,"signatureImport"],[222,41,242,39],[222,42,242,40,"output"],[222,48,242,46],[222,50,242,48,"sig"],[222,53,242,51],[222,54,242,52],[223,10,243,8],[223,15,243,13],[223,16,243,14],[224,12,244,10],[224,19,244,17,"output"],[224,25,244,23],[225,10,245,8],[225,15,245,13],[225,16,245,14],[226,12,246,10],[226,18,246,16],[226,22,246,20,"Error"],[226,27,246,25],[226,28,246,26,"errors"],[226,34,246,32],[226,35,246,33,"SIG_PARSE"],[226,44,246,42],[226,45,246,43],[227,10,247,8],[227,15,247,13],[227,16,247,14],[228,12,248,10],[228,18,248,16],[228,22,248,20,"Error"],[228,27,248,25],[228,28,248,26,"errors"],[228,34,248,32],[228,35,248,33,"IMPOSSIBLE_CASE"],[228,50,248,48],[228,51,248,49],[229,8,249,6],[230,6,250,4],[230,7,250,5],[231,6,252,4,"ecdsaSign"],[231,15,252,13],[231,26,252,4,"ecdsaSign"],[231,35,252,13,"ecdsaSign"],[231,36,252,15,"msg32"],[231,41,252,20],[231,43,252,22,"seckey"],[231,49,252,28],[231,51,252,52],[232,8,252,52],[232,12,252,30,"options"],[232,19,252,37],[232,22,252,37,"arguments"],[232,31,252,37],[232,32,252,37,"length"],[232,38,252,37],[232,46,252,37,"arguments"],[232,55,252,37],[232,63,252,37,"undefined"],[232,72,252,37],[232,75,252,37,"arguments"],[232,84,252,37],[232,90,252,40],[232,91,252,41],[232,92,252,42],[233,8,252,42],[233,12,252,44,"output"],[233,18,252,50],[233,21,252,50,"arguments"],[233,30,252,50],[233,31,252,50,"length"],[233,37,252,50],[233,44,252,50,"arguments"],[233,53,252,50],[233,59,252,50,"undefined"],[233,68,252,50],[234,8,253,6,"isUint8Array"],[234,20,253,18],[234,21,253,19],[234,30,253,28],[234,32,253,30,"msg32"],[234,37,253,35],[234,39,253,37],[234,41,253,39],[234,42,253,40],[235,8,254,6,"isUint8Array"],[235,20,254,18],[235,21,254,19],[235,34,254,32],[235,36,254,34,"seckey"],[235,42,254,40],[235,44,254,42],[235,46,254,44],[235,47,254,45],[236,8,255,6,"assert"],[236,14,255,12],[236,15,255,13,"toTypeString"],[236,27,255,25],[236,28,255,26,"options"],[236,35,255,33],[236,36,255,34],[236,41,255,39],[236,49,255,47],[236,51,255,49],[236,85,255,83],[236,86,255,84],[237,8,256,6],[237,12,256,10,"options"],[237,19,256,17],[237,20,256,18,"data"],[237,24,256,22],[237,29,256,27,"undefined"],[237,38,256,36],[237,40,256,38,"isUint8Array"],[237,52,256,50],[237,53,256,51],[237,67,256,65],[237,69,256,67,"options"],[237,76,256,74],[237,77,256,75,"data"],[237,81,256,79],[237,82,256,80],[238,8,257,6],[238,12,257,10,"options"],[238,19,257,17],[238,20,257,18,"noncefn"],[238,27,257,25],[238,32,257,30,"undefined"],[238,41,257,39],[238,43,257,41,"assert"],[238,49,257,47],[238,50,257,48,"toTypeString"],[238,62,257,60],[238,63,257,61,"options"],[238,70,257,68],[238,71,257,69,"noncefn"],[238,78,257,76],[238,79,257,77],[238,84,257,82],[238,94,257,92],[238,96,257,94],[238,139,257,137],[238,140,257,138],[239,8,258,6,"output"],[239,14,258,12],[239,17,258,15,"getAssertedOutput"],[239,34,258,32],[239,35,258,33,"output"],[239,41,258,39],[239,43,258,41],[239,45,258,43],[239,46,258,44],[240,8,260,6],[240,12,260,12,"obj"],[240,15,260,15],[240,18,260,18],[241,10,260,20,"signature"],[241,19,260,29],[241,21,260,31,"output"],[241,27,260,37],[242,10,260,39,"recid"],[242,15,260,44],[242,17,260,46],[243,8,260,51],[243,9,260,52],[244,8,261,6],[244,16,261,14,"secp256k1"],[244,25,261,23],[244,26,261,24,"ecdsaSign"],[244,35,261,33],[244,36,261,34,"obj"],[244,39,261,37],[244,41,261,39,"msg32"],[244,46,261,44],[244,48,261,46,"seckey"],[244,54,261,52],[244,56,261,54,"options"],[244,63,261,61],[244,64,261,62,"data"],[244,68,261,66],[244,70,261,68,"options"],[244,77,261,75],[244,78,261,76,"noncefn"],[244,85,261,83],[244,86,261,84],[245,10,262,8],[245,15,262,13],[245,16,262,14],[246,12,263,10],[246,19,263,17,"obj"],[246,22,263,20],[247,10,264,8],[247,15,264,13],[247,16,264,14],[248,12,265,10],[248,18,265,16],[248,22,265,20,"Error"],[248,27,265,25],[248,28,265,26,"errors"],[248,34,265,32],[248,35,265,33,"SIGN"],[248,39,265,37],[248,40,265,38],[249,10,266,8],[249,15,266,13],[249,16,266,14],[250,12,267,10],[250,18,267,16],[250,22,267,20,"Error"],[250,27,267,25],[250,28,267,26,"errors"],[250,34,267,32],[250,35,267,33,"IMPOSSIBLE_CASE"],[250,50,267,48],[250,51,267,49],[251,8,268,6],[252,6,269,4],[252,7,269,5],[253,6,271,4,"ecdsaVerify"],[253,17,271,15],[253,28,271,4,"ecdsaVerify"],[253,39,271,15,"ecdsaVerify"],[253,40,271,17,"sig"],[253,43,271,20],[253,45,271,22,"msg32"],[253,50,271,27],[253,52,271,29,"pubkey"],[253,58,271,35],[253,60,271,37],[254,8,272,6,"isUint8Array"],[254,20,272,18],[254,21,272,19],[254,32,272,30],[254,34,272,32,"sig"],[254,37,272,35],[254,39,272,37],[254,41,272,39],[254,42,272,40],[255,8,273,6,"isUint8Array"],[255,20,273,18],[255,21,273,19],[255,30,273,28],[255,32,273,30,"msg32"],[255,37,273,35],[255,39,273,37],[255,41,273,39],[255,42,273,40],[256,8,274,6,"isUint8Array"],[256,20,274,18],[256,21,274,19],[256,33,274,31],[256,35,274,33,"pubkey"],[256,41,274,39],[256,43,274,41],[256,44,274,42],[256,46,274,44],[256,48,274,46],[256,50,274,48],[256,51,274,49],[256,52,274,50],[257,8,276,6],[257,16,276,14,"secp256k1"],[257,25,276,23],[257,26,276,24,"ecdsaVerify"],[257,37,276,35],[257,38,276,36,"sig"],[257,41,276,39],[257,43,276,41,"msg32"],[257,48,276,46],[257,50,276,48,"pubkey"],[257,56,276,54],[257,57,276,55],[258,10,277,8],[258,15,277,13],[258,16,277,14],[259,12,278,10],[259,19,278,17],[259,23,278,21],[260,10,279,8],[260,15,279,13],[260,16,279,14],[261,12,280,10],[261,19,280,17],[261,24,280,22],[262,10,281,8],[262,15,281,13],[262,16,281,14],[263,12,282,10],[263,18,282,16],[263,22,282,20,"Error"],[263,27,282,25],[263,28,282,26,"errors"],[263,34,282,32],[263,35,282,33,"SIG_PARSE"],[263,44,282,42],[263,45,282,43],[264,10,283,8],[264,15,283,13],[264,16,283,14],[265,12,284,10],[265,18,284,16],[265,22,284,20,"Error"],[265,27,284,25],[265,28,284,26,"errors"],[265,34,284,32],[265,35,284,33,"PUBKEY_PARSE"],[265,47,284,45],[265,48,284,46],[266,8,285,6],[267,6,286,4],[267,7,286,5],[268,6,288,4,"ecdsaRecover"],[268,18,288,16],[268,29,288,4,"ecdsaRecover"],[268,41,288,16,"ecdsaRecover"],[268,42,288,18,"sig"],[268,45,288,21],[268,47,288,23,"recid"],[268,52,288,28],[268,54,288,30,"msg32"],[268,59,288,35],[268,61,288,64],[269,8,288,64],[269,12,288,37,"compressed"],[269,22,288,47],[269,25,288,47,"arguments"],[269,34,288,47],[269,35,288,47,"length"],[269,41,288,47],[269,49,288,47,"arguments"],[269,58,288,47],[269,66,288,47,"undefined"],[269,75,288,47],[269,78,288,47,"arguments"],[269,87,288,47],[269,93,288,50],[269,97,288,54],[270,8,288,54],[270,12,288,56,"output"],[270,18,288,62],[270,21,288,62,"arguments"],[270,30,288,62],[270,31,288,62,"length"],[270,37,288,62],[270,44,288,62,"arguments"],[270,53,288,62],[270,59,288,62,"undefined"],[270,68,288,62],[271,8,289,6,"isUint8Array"],[271,20,289,18],[271,21,289,19],[271,32,289,30],[271,34,289,32,"sig"],[271,37,289,35],[271,39,289,37],[271,41,289,39],[271,42,289,40],[272,8,290,6,"assert"],[272,14,290,12],[272,15,291,8,"toTypeString"],[272,27,291,20],[272,28,291,21,"recid"],[272,33,291,26],[272,34,291,27],[272,39,291,32],[272,47,291,40],[272,51,292,10,"recid"],[272,56,292,15],[272,60,292,19],[272,61,292,20],[272,65,293,10,"recid"],[272,70,293,15],[272,74,293,19],[272,75,293,20],[272,77,294,8],[272,137,295,6],[272,138,295,7],[273,8,296,6,"isUint8Array"],[273,20,296,18],[273,21,296,19],[273,30,296,28],[273,32,296,30,"msg32"],[273,37,296,35],[273,39,296,37],[273,41,296,39],[273,42,296,40],[274,8,297,6,"isCompressed"],[274,20,297,18],[274,21,297,19,"compressed"],[274,31,297,29],[274,32,297,30],[275,8,298,6,"output"],[275,14,298,12],[275,17,298,15,"getAssertedOutput"],[275,34,298,32],[275,35,298,33,"output"],[275,41,298,39],[275,43,298,41,"compressed"],[275,53,298,51],[275,56,298,54],[275,58,298,56],[275,61,298,59],[275,63,298,61],[275,64,298,62],[276,8,300,6],[276,16,300,14,"secp256k1"],[276,25,300,23],[276,26,300,24,"ecdsaRecover"],[276,38,300,36],[276,39,300,37,"output"],[276,45,300,43],[276,47,300,45,"sig"],[276,50,300,48],[276,52,300,50,"recid"],[276,57,300,55],[276,59,300,57,"msg32"],[276,64,300,62],[276,65,300,63],[277,10,301,8],[277,15,301,13],[277,16,301,14],[278,12,302,10],[278,19,302,17,"output"],[278,25,302,23],[279,10,303,8],[279,15,303,13],[279,16,303,14],[280,12,304,10],[280,18,304,16],[280,22,304,20,"Error"],[280,27,304,25],[280,28,304,26,"errors"],[280,34,304,32],[280,35,304,33,"SIG_PARSE"],[280,44,304,42],[280,45,304,43],[281,10,305,8],[281,15,305,13],[281,16,305,14],[282,12,306,10],[282,18,306,16],[282,22,306,20,"Error"],[282,27,306,25],[282,28,306,26,"errors"],[282,34,306,32],[282,35,306,33,"RECOVER"],[282,42,306,40],[282,43,306,41],[283,10,307,8],[283,15,307,13],[283,16,307,14],[284,12,308,10],[284,18,308,16],[284,22,308,20,"Error"],[284,27,308,25],[284,28,308,26,"errors"],[284,34,308,32],[284,35,308,33,"IMPOSSIBLE_CASE"],[284,50,308,48],[284,51,308,49],[285,8,309,6],[286,6,310,4],[286,7,310,5],[287,6,312,4,"ecdh"],[287,10,312,8],[287,21,312,4,"ecdh"],[287,25,312,8,"ecdh"],[287,26,312,10,"pubkey"],[287,32,312,16],[287,34,312,18,"seckey"],[287,40,312,24],[287,42,312,48],[288,8,312,48],[288,12,312,26,"options"],[288,19,312,33],[288,22,312,33,"arguments"],[288,31,312,33],[288,32,312,33,"length"],[288,38,312,33],[288,46,312,33,"arguments"],[288,55,312,33],[288,63,312,33,"undefined"],[288,72,312,33],[288,75,312,33,"arguments"],[288,84,312,33],[288,90,312,36],[288,91,312,37],[288,92,312,38],[289,8,312,38],[289,12,312,40,"output"],[289,18,312,46],[289,21,312,46,"arguments"],[289,30,312,46],[289,31,312,46,"length"],[289,37,312,46],[289,44,312,46,"arguments"],[289,53,312,46],[289,59,312,46,"undefined"],[289,68,312,46],[290,8,313,6,"isUint8Array"],[290,20,313,18],[290,21,313,19],[290,33,313,31],[290,35,313,33,"pubkey"],[290,41,313,39],[290,43,313,41],[290,44,313,42],[290,46,313,44],[290,48,313,46],[290,50,313,48],[290,51,313,49],[290,52,313,50],[291,8,314,6,"isUint8Array"],[291,20,314,18],[291,21,314,19],[291,34,314,32],[291,36,314,34,"seckey"],[291,42,314,40],[291,44,314,42],[291,46,314,44],[291,47,314,45],[292,8,315,6,"assert"],[292,14,315,12],[292,15,315,13,"toTypeString"],[292,27,315,25],[292,28,315,26,"options"],[292,35,315,33],[292,36,315,34],[292,41,315,39],[292,49,315,47],[292,51,315,49],[292,85,315,83],[292,86,315,84],[293,8,316,6],[293,12,316,10,"options"],[293,19,316,17],[293,20,316,18,"data"],[293,24,316,22],[293,29,316,27,"undefined"],[293,38,316,36],[293,40,316,38,"isUint8Array"],[293,52,316,50],[293,53,316,51],[293,67,316,65],[293,69,316,67,"options"],[293,76,316,74],[293,77,316,75,"data"],[293,81,316,79],[293,82,316,80],[294,8,317,6],[294,12,317,10,"options"],[294,19,317,17],[294,20,317,18,"hashfn"],[294,26,317,24],[294,31,317,29,"undefined"],[294,40,317,38],[294,42,317,40],[295,10,318,8,"assert"],[295,16,318,14],[295,17,318,15,"toTypeString"],[295,29,318,27],[295,30,318,28,"options"],[295,37,318,35],[295,38,318,36,"hashfn"],[295,44,318,42],[295,45,318,43],[295,50,318,48],[295,60,318,58],[295,62,318,60],[295,104,318,102],[295,105,318,103],[296,10,319,8],[296,14,319,12,"options"],[296,21,319,19],[296,22,319,20,"xbuf"],[296,26,319,24],[296,31,319,29,"undefined"],[296,40,319,38],[296,42,319,40,"isUint8Array"],[296,54,319,52],[296,55,319,53],[296,69,319,67],[296,71,319,69,"options"],[296,78,319,76],[296,79,319,77,"xbuf"],[296,83,319,81],[296,85,319,83],[296,87,319,85],[296,88,319,86],[297,10,320,8],[297,14,320,12,"options"],[297,21,320,19],[297,22,320,20,"ybuf"],[297,26,320,24],[297,31,320,29,"undefined"],[297,40,320,38],[297,42,320,40,"isUint8Array"],[297,54,320,52],[297,55,320,53],[297,69,320,67],[297,71,320,69,"options"],[297,78,320,76],[297,79,320,77,"ybuf"],[297,83,320,81],[297,85,320,83],[297,87,320,85],[297,88,320,86],[298,10,321,8,"isUint8Array"],[298,22,321,20],[298,23,321,21],[298,31,321,29],[298,33,321,31,"output"],[298,39,321,37],[298,40,321,38],[299,8,322,6],[299,9,322,7],[299,15,322,13],[300,10,323,8,"output"],[300,16,323,14],[300,19,323,17,"getAssertedOutput"],[300,36,323,34],[300,37,323,35,"output"],[300,43,323,41],[300,45,323,43],[300,47,323,45],[300,48,323,46],[301,8,324,6],[302,8,326,6],[302,16,326,14,"secp256k1"],[302,25,326,23],[302,26,326,24,"ecdh"],[302,30,326,28],[302,31,326,29,"output"],[302,37,326,35],[302,39,326,37,"pubkey"],[302,45,326,43],[302,47,326,45,"seckey"],[302,53,326,51],[302,55,326,53,"options"],[302,62,326,60],[302,63,326,61,"data"],[302,67,326,65],[302,69,326,67,"options"],[302,76,326,74],[302,77,326,75,"hashfn"],[302,83,326,81],[302,85,326,83,"options"],[302,92,326,90],[302,93,326,91,"xbuf"],[302,97,326,95],[302,99,326,97,"options"],[302,106,326,104],[302,107,326,105,"ybuf"],[302,111,326,109],[302,112,326,110],[303,10,327,8],[303,15,327,13],[303,16,327,14],[304,12,328,10],[304,19,328,17,"output"],[304,25,328,23],[305,10,329,8],[305,15,329,13],[305,16,329,14],[306,12,330,10],[306,18,330,16],[306,22,330,20,"Error"],[306,27,330,25],[306,28,330,26,"errors"],[306,34,330,32],[306,35,330,33,"PUBKEY_PARSE"],[306,47,330,45],[306,48,330,46],[307,10,331,8],[307,15,331,13],[307,16,331,14],[308,12,332,10],[308,18,332,16],[308,22,332,20,"Error"],[308,27,332,25],[308,28,332,26,"errors"],[308,34,332,32],[308,35,332,33,"ECDH"],[308,39,332,37],[308,40,332,38],[309,8,333,6],[310,6,334,4],[311,4,335,2],[311,5,335,3],[312,2,336,0],[312,3,336,1],[313,0,336,1],[313,3]],"functionMap":{"names":["<global>","assert","isUint8Array","isCompressed","getAssertedOutput","<anonymous>","toTypeString","module.exports","contextRandomize","privateKeyVerify","privateKeyNegate","privateKeyTweakAdd","privateKeyTweakMul","publicKeyVerify","publicKeyCreate","publicKeyConvert","publicKeyNegate","publicKeyCombine","publicKeyTweakAdd","publicKeyTweakMul","signatureNormalize","signatureExport","signatureImport","ecdsaSign","ecdsaVerify","ecdsaRecover","ecdh"],"mappings":"AAA;ACgB;CDE;AEE;CFa;AGE;CHE;AIE,qCC,4BD;CJI;AME;CNE;iBOE;ICE;KDW;IEE;KFI;IGE;KHS;IIE;KJU;IKE;KLU;IME;KNI;IOE;KPa;IQE;KRa;ISE;KTe;IUE;KVmB;IWE;KXc;IYE;KZc;IaE;KbS;IcE;Kda;IeE;KfY;IgBE;KhBiB;IiBE;KjBe;IkBE;KlBsB;ImBE;KnBsB;CPE"}},"type":"js/module"}]}