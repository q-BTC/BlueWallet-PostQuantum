{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1737,"column":0,"index":55203}}],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1737,"column":0,"index":55203}}],"key":"5y7e5+zC7teYEEC6niD9f5zII1M="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1737,"column":0,"index":55203}}],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1737,"column":0,"index":55203}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1737,"column":0,"index":55203}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"./networks","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":19,"index":352},"end":{"line":9,"column":40,"index":373}}],"key":"HucmY1y/bRMwIbskZ07kLJ/izkg="}},{"name":"bip174","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":17,"index":117},"end":{"line":4,"column":34,"index":134}},{"start":{"line":4,"column":17,"index":117},"end":{"line":4,"column":34,"index":134}}],"key":"H24KkgPT2zAV/Za0F3dKre/tztw="}},{"name":"./bufferutils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":22,"index":307},"end":{"line":8,"column":46,"index":331}},{"start":{"line":8,"column":22,"index":307},"end":{"line":8,"column":46,"index":331}},{"start":{"line":8,"column":22,"index":307},"end":{"line":8,"column":46,"index":331}},{"start":{"line":8,"column":22,"index":307},"end":{"line":8,"column":46,"index":331}}],"key":"8h+4nPdiw4lgWqmpJE4tN3Ks+fM="}},{"name":"./address","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":18,"index":263},"end":{"line":7,"column":38,"index":283}},{"start":{"line":7,"column":18,"index":263},"end":{"line":7,"column":38,"index":283}}],"key":"GT9ovCpEVJfvfL3l5/wI3+rX9eo=","isOptional":false}},{"name":"./psbt/bip371","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}},{"start":{"line":14,"column":17,"index":564},"end":{"line":14,"column":41,"index":588}}],"key":"A66GWcwesMZ9TFV29mOdFyfHWXI="}},{"name":"bip174/src/lib/utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":16,"index":212},"end":{"line":6,"column":47,"index":243}},{"start":{"line":6,"column":16,"index":212},"end":{"line":6,"column":47,"index":243}},{"start":{"line":6,"column":16,"index":212},"end":{"line":6,"column":47,"index":243}},{"start":{"line":6,"column":16,"index":212},"end":{"line":6,"column":47,"index":243}},{"start":{"line":6,"column":16,"index":212},"end":{"line":6,"column":47,"index":243}},{"start":{"line":6,"column":16,"index":212},"end":{"line":6,"column":47,"index":243}},{"start":{"line":6,"column":16,"index":212},"end":{"line":6,"column":47,"index":243}},{"start":{"line":6,"column":16,"index":212},"end":{"line":6,"column":47,"index":243}},{"start":{"line":6,"column":16,"index":212},"end":{"line":6,"column":47,"index":243}},{"start":{"line":6,"column":16,"index":212},"end":{"line":6,"column":47,"index":243}},{"start":{"line":6,"column":16,"index":212},"end":{"line":6,"column":47,"index":243}},{"start":{"line":6,"column":16,"index":212},"end":{"line":6,"column":47,"index":243}},{"start":{"line":6,"column":16,"index":212},"end":{"line":6,"column":47,"index":243}},{"start":{"line":6,"column":16,"index":212},"end":{"line":6,"column":47,"index":243}},{"start":{"line":6,"column":16,"index":212},"end":{"line":6,"column":47,"index":243}}],"key":"24etM7du7wf4wGau9TCD9ughqCk="}},{"name":"./payments","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":17,"index":392},"end":{"line":10,"column":38,"index":413}},{"start":{"line":10,"column":17,"index":392},"end":{"line":10,"column":38,"index":413}},{"start":{"line":10,"column":17,"index":392},"end":{"line":10,"column":38,"index":413}},{"start":{"line":10,"column":17,"index":392},"end":{"line":10,"column":38,"index":413}},{"start":{"line":10,"column":17,"index":392},"end":{"line":10,"column":38,"index":413}},{"start":{"line":10,"column":17,"index":392},"end":{"line":10,"column":38,"index":413}},{"start":{"line":10,"column":17,"index":392},"end":{"line":10,"column":38,"index":413}},{"start":{"line":10,"column":17,"index":392},"end":{"line":10,"column":38,"index":413}},{"start":{"line":10,"column":17,"index":392},"end":{"line":10,"column":38,"index":413}},{"start":{"line":10,"column":17,"index":392},"end":{"line":10,"column":38,"index":413}},{"start":{"line":10,"column":17,"index":392},"end":{"line":10,"column":38,"index":413}},{"start":{"line":10,"column":17,"index":392},"end":{"line":10,"column":38,"index":413}}],"key":"jFG+uchKeOlOOhe0V9dHvbyfUWQ="}},{"name":"./psbt/psbtutils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}},{"start":{"line":15,"column":20,"index":610},"end":{"line":15,"column":47,"index":637}}],"key":"AxMpRK8wJjX/rJSXNvuAwkzfoBQ="}},{"name":"./script","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":16,"index":478},"end":{"line":12,"column":35,"index":497}},{"start":{"line":12,"column":16,"index":478},"end":{"line":12,"column":35,"index":497}},{"start":{"line":12,"column":16,"index":478},"end":{"line":12,"column":35,"index":497}},{"start":{"line":12,"column":16,"index":478},"end":{"line":12,"column":35,"index":497}},{"start":{"line":12,"column":16,"index":478},"end":{"line":12,"column":35,"index":497}},{"start":{"line":12,"column":16,"index":478},"end":{"line":12,"column":35,"index":497}},{"start":{"line":12,"column":16,"index":478},"end":{"line":12,"column":35,"index":497}},{"start":{"line":12,"column":16,"index":478},"end":{"line":12,"column":35,"index":497}},{"start":{"line":12,"column":16,"index":478},"end":{"line":12,"column":35,"index":497}}],"key":"dAZ8S/UUDAY99MynBzi6QzO6zp4="}},{"name":"./transaction","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":22,"index":521},"end":{"line":13,"column":46,"index":545}},{"start":{"line":13,"column":22,"index":521},"end":{"line":13,"column":46,"index":545}},{"start":{"line":13,"column":22,"index":521},"end":{"line":13,"column":46,"index":545}},{"start":{"line":13,"column":22,"index":521},"end":{"line":13,"column":46,"index":545}},{"start":{"line":13,"column":22,"index":521},"end":{"line":13,"column":46,"index":545}},{"start":{"line":13,"column":22,"index":521},"end":{"line":13,"column":46,"index":545}},{"start":{"line":13,"column":22,"index":521},"end":{"line":13,"column":46,"index":545}},{"start":{"line":13,"column":22,"index":521},"end":{"line":13,"column":46,"index":545}},{"start":{"line":13,"column":22,"index":521},"end":{"line":13,"column":46,"index":545}},{"start":{"line":13,"column":22,"index":521},"end":{"line":13,"column":46,"index":545}},{"start":{"line":13,"column":22,"index":521},"end":{"line":13,"column":46,"index":545}},{"start":{"line":13,"column":22,"index":521},"end":{"line":13,"column":46,"index":545}},{"start":{"line":13,"column":22,"index":521},"end":{"line":13,"column":46,"index":545}},{"start":{"line":13,"column":22,"index":521},"end":{"line":13,"column":46,"index":545}},{"start":{"line":13,"column":22,"index":521},"end":{"line":13,"column":46,"index":545}},{"start":{"line":13,"column":22,"index":521},"end":{"line":13,"column":46,"index":545}}],"key":"QyHAamlaDdme9J9SOOQ5bKZGvis="}},{"name":"./payments/bip341","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":17,"index":432},"end":{"line":11,"column":45,"index":460}}],"key":"FCFlAGoOmDjVz81PMBrPQRAWWoY="}},{"name":"bip174/src/lib/converter/varint","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":16,"index":152},"end":{"line":5,"column":58,"index":194}},{"start":{"line":5,"column":16,"index":152},"end":{"line":5,"column":58,"index":194}}],"key":"WqBUbX5ejlk4QpY7GpLq5kE/73U="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _asyncToGenerator = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\");\n  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\");\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/createClass\");\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.Psbt = void 0;\n  /**\n   * These are the default arguments for a Psbt instance.\n   */\n  var DEFAULT_OPTS = {\n    /**\n     * A bitcoinjs Network object. This is only used if you pass an `address`\n     * parameter to addOutput. Otherwise it is not needed and can be left default.\n     */\n    network: _$$_REQUIRE(_dependencyMap[5], \"./networks\").bitcoin,\n    /**\n     * When extractTransaction is called, the fee rate is checked.\n     * THIS IS NOT TO BE RELIED ON.\n     * It is only here as a last ditch effort to prevent sending a 500 BTC fee etc.\n     */\n    maximumFeeRate: 5000 // satoshi per byte\n  };\n  /**\n   * Psbt class can parse and generate a PSBT binary based off of the BIP174.\n   * There are 6 roles that this class fulfills. (Explained in BIP174)\n   *\n   * Creator: This can be done with `new Psbt()`\n   *\n   * Updater: This can be done with `psbt.addInput(input)`, `psbt.addInputs(inputs)`,\n   *   `psbt.addOutput(output)`, `psbt.addOutputs(outputs)` when you are looking to\n   *   add new inputs and outputs to the PSBT, and `psbt.updateGlobal(itemObject)`,\n   *   `psbt.updateInput(itemObject)`, `psbt.updateOutput(itemObject)`\n   *   addInput requires hash: Buffer | string; and index: number; as attributes\n   *   and can also include any attributes that are used in updateInput method.\n   *   addOutput requires script: Buffer; and value: number; and likewise can include\n   *   data for updateOutput.\n   *   For a list of what attributes should be what types. Check the bip174 library.\n   *   Also, check the integration tests for some examples of usage.\n   *\n   * Signer: There are a few methods. signAllInputs and signAllInputsAsync, which will search all input\n   *   information for your pubkey or pubkeyhash, and only sign inputs where it finds\n   *   your info. Or you can explicitly sign a specific input with signInput and\n   *   signInputAsync. For the async methods you can create a SignerAsync object\n   *   and use something like a hardware wallet to sign with. (You must implement this)\n   *\n   * Combiner: psbts can be combined easily with `psbt.combine(psbt2, psbt3, psbt4 ...)`\n   *   the psbt calling combine will always have precedence when a conflict occurs.\n   *   Combine checks if the internal bitcoin transaction is the same, so be sure that\n   *   all sequences, version, locktime, etc. are the same before combining.\n   *\n   * Input Finalizer: This role is fairly important. Not only does it need to construct\n   *   the input scriptSigs and witnesses, but it SHOULD verify the signatures etc.\n   *   Before running `psbt.finalizeAllInputs()` please run `psbt.validateSignaturesOfAllInputs()`\n   *   Running any finalize method will delete any data in the input(s) that are no longer\n   *   needed due to the finalized scripts containing the information.\n   *\n   * Transaction Extractor: This role will perform some checks before returning a\n   *   Transaction object. Such as fee rate not being larger than maximumFeeRate etc.\n   */\n  var Psbt = /*#__PURE__*/function () {\n    function Psbt() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new (_$$_REQUIRE(_dependencyMap[6], \"bip174\").Psbt)(new PsbtTransaction());\n      _classCallCheck(this, Psbt);\n      this.data = data;\n      // set defaults\n      this.opts = Object.assign({}, DEFAULT_OPTS, opts);\n      this.__CACHE = {\n        __NON_WITNESS_UTXO_TX_CACHE: [],\n        __NON_WITNESS_UTXO_BUF_CACHE: [],\n        __TX_IN_CACHE: {},\n        __TX: this.data.globalMap.unsignedTx.tx,\n        // Psbt's predecessor (TransactionBuilder - now removed) behavior\n        // was to not confirm input values  before signing.\n        // Even though we highly encourage people to get\n        // the full parent transaction to verify values, the ability to\n        // sign non-segwit inputs without the full transaction was often\n        // requested. So the only way to activate is to use @ts-ignore.\n        // We will disable exporting the Psbt when unsafe sign is active.\n        // because it is not BIP174 compliant.\n        __UNSAFE_SIGN_NONSEGWIT: false\n      };\n      if (this.data.inputs.length === 0) this.setVersion(2);\n      // Make data hidden when enumerating\n      var dpew = function dpew(obj, attr, enumerable, writable) {\n        return Object.defineProperty(obj, attr, {\n          enumerable: enumerable,\n          writable: writable\n        });\n      };\n      dpew(this, '__CACHE', false, true);\n      dpew(this, 'opts', false, true);\n    }\n    return _createClass(Psbt, [{\n      key: \"inputCount\",\n      get: function get() {\n        return this.data.inputs.length;\n      }\n    }, {\n      key: \"version\",\n      get: function get() {\n        return this.__CACHE.__TX.version;\n      },\n      set: function set(version) {\n        this.setVersion(version);\n      }\n    }, {\n      key: \"locktime\",\n      get: function get() {\n        return this.__CACHE.__TX.locktime;\n      },\n      set: function set(locktime) {\n        this.setLocktime(locktime);\n      }\n    }, {\n      key: \"txInputs\",\n      get: function get() {\n        return this.__CACHE.__TX.ins.map(function (input) {\n          return {\n            hash: (0, _$$_REQUIRE(_dependencyMap[7], \"./bufferutils\").cloneBuffer)(input.hash),\n            index: input.index,\n            sequence: input.sequence\n          };\n        });\n      }\n    }, {\n      key: \"txOutputs\",\n      get: function get() {\n        var _this = this;\n        return this.__CACHE.__TX.outs.map(function (output) {\n          var address;\n          try {\n            address = (0, _$$_REQUIRE(_dependencyMap[8], \"./address\").fromOutputScript)(output.script, _this.opts.network);\n          } catch (_) {}\n          return {\n            script: (0, _$$_REQUIRE(_dependencyMap[7], \"./bufferutils\").cloneBuffer)(output.script),\n            value: output.value,\n            address: address\n          };\n        });\n      }\n    }, {\n      key: \"combine\",\n      value: function combine() {\n        var _this$data;\n        for (var _len = arguments.length, those = new Array(_len), _key = 0; _key < _len; _key++) {\n          those[_key] = arguments[_key];\n        }\n        (_this$data = this.data).combine.apply(_this$data, _toConsumableArray(those.map(function (o) {\n          return o.data;\n        })));\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        // TODO: more efficient cloning\n        var res = Psbt.fromBuffer(this.data.toBuffer());\n        res.opts = JSON.parse(JSON.stringify(this.opts));\n        return res;\n      }\n    }, {\n      key: \"setMaximumFeeRate\",\n      value: function setMaximumFeeRate(satoshiPerByte) {\n        check32Bit(satoshiPerByte); // 42.9 BTC per byte IS excessive... so throw\n        this.opts.maximumFeeRate = satoshiPerByte;\n      }\n    }, {\n      key: \"setVersion\",\n      value: function setVersion(version) {\n        check32Bit(version);\n        checkInputsForPartialSig(this.data.inputs, 'setVersion');\n        var c = this.__CACHE;\n        c.__TX.version = version;\n        c.__EXTRACTED_TX = undefined;\n        return this;\n      }\n    }, {\n      key: \"setLocktime\",\n      value: function setLocktime(locktime) {\n        check32Bit(locktime);\n        checkInputsForPartialSig(this.data.inputs, 'setLocktime');\n        var c = this.__CACHE;\n        c.__TX.locktime = locktime;\n        c.__EXTRACTED_TX = undefined;\n        return this;\n      }\n    }, {\n      key: \"setInputSequence\",\n      value: function setInputSequence(inputIndex, sequence) {\n        check32Bit(sequence);\n        checkInputsForPartialSig(this.data.inputs, 'setInputSequence');\n        var c = this.__CACHE;\n        if (c.__TX.ins.length <= inputIndex) {\n          throw new Error('Input index too high');\n        }\n        c.__TX.ins[inputIndex].sequence = sequence;\n        c.__EXTRACTED_TX = undefined;\n        return this;\n      }\n    }, {\n      key: \"addInputs\",\n      value: function addInputs(inputDatas) {\n        var _this2 = this;\n        inputDatas.forEach(function (inputData) {\n          return _this2.addInput(inputData);\n        });\n        return this;\n      }\n    }, {\n      key: \"addInput\",\n      value: function addInput(inputData) {\n        if (arguments.length > 1 || !inputData || inputData.hash === undefined || inputData.index === undefined) {\n          throw new Error(`Invalid arguments for Psbt.addInput. ` + `Requires single object with at least [hash] and [index]`);\n        }\n        (0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").checkTaprootInputFields)(inputData, inputData, 'addInput');\n        checkInputsForPartialSig(this.data.inputs, 'addInput');\n        if (inputData.witnessScript) checkInvalidP2WSH(inputData.witnessScript);\n        var c = this.__CACHE;\n        this.data.addInput(inputData);\n        var txIn = c.__TX.ins[c.__TX.ins.length - 1];\n        checkTxInputCache(c, txIn);\n        var inputIndex = this.data.inputs.length - 1;\n        var input = this.data.inputs[inputIndex];\n        if (input.nonWitnessUtxo) {\n          addNonWitnessTxCache(this.__CACHE, input, inputIndex);\n        }\n        c.__FEE = undefined;\n        c.__FEE_RATE = undefined;\n        c.__EXTRACTED_TX = undefined;\n        return this;\n      }\n    }, {\n      key: \"addOutputs\",\n      value: function addOutputs(outputDatas) {\n        var _this3 = this;\n        outputDatas.forEach(function (outputData) {\n          return _this3.addOutput(outputData);\n        });\n        return this;\n      }\n    }, {\n      key: \"addOutput\",\n      value: function addOutput(outputData) {\n        if (arguments.length > 1 || !outputData || outputData.value === undefined || outputData.address === undefined && outputData.script === undefined) {\n          throw new Error(`Invalid arguments for Psbt.addOutput. ` + `Requires single object with at least [script or address] and [value]`);\n        }\n        checkInputsForPartialSig(this.data.inputs, 'addOutput');\n        var _outputData = outputData,\n          address = _outputData.address;\n        if (typeof address === 'string') {\n          var network = this.opts.network;\n          var script = (0, _$$_REQUIRE(_dependencyMap[8], \"./address\").toOutputScript)(address, network);\n          outputData = Object.assign({}, outputData, {\n            script: script\n          });\n        }\n        (0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").checkTaprootOutputFields)(outputData, outputData, 'addOutput');\n        var c = this.__CACHE;\n        this.data.addOutput(outputData);\n        c.__FEE = undefined;\n        c.__FEE_RATE = undefined;\n        c.__EXTRACTED_TX = undefined;\n        return this;\n      }\n    }, {\n      key: \"extractTransaction\",\n      value: function extractTransaction(disableFeeCheck) {\n        if (!this.data.inputs.every(isFinalized)) throw new Error('Not finalized');\n        var c = this.__CACHE;\n        if (!disableFeeCheck) {\n          checkFees(this, c, this.opts);\n        }\n        if (c.__EXTRACTED_TX) return c.__EXTRACTED_TX;\n        var tx = c.__TX.clone();\n        inputFinalizeGetAmts(this.data.inputs, tx, c, true);\n        return tx;\n      }\n    }, {\n      key: \"getFeeRate\",\n      value: function getFeeRate() {\n        return getTxCacheValue('__FEE_RATE', 'fee rate', this.data.inputs, this.__CACHE);\n      }\n    }, {\n      key: \"getFee\",\n      value: function getFee() {\n        return getTxCacheValue('__FEE', 'fee', this.data.inputs, this.__CACHE);\n      }\n    }, {\n      key: \"finalizeAllInputs\",\n      value: function finalizeAllInputs() {\n        var _this4 = this;\n        (0, _$$_REQUIRE(_dependencyMap[10], \"bip174/src/lib/utils\").checkForInput)(this.data.inputs, 0); // making sure we have at least one\n        range(this.data.inputs.length).forEach(function (idx) {\n          return _this4.finalizeInput(idx);\n        });\n        return this;\n      }\n    }, {\n      key: \"finalizeInput\",\n      value: function finalizeInput(inputIndex, finalScriptsFunc) {\n        var input = (0, _$$_REQUIRE(_dependencyMap[10], \"bip174/src/lib/utils\").checkForInput)(this.data.inputs, inputIndex);\n        if ((0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").isTaprootInput)(input)) return this._finalizeTaprootInput(inputIndex, input, undefined, finalScriptsFunc);\n        return this._finalizeInput(inputIndex, input, finalScriptsFunc);\n      }\n    }, {\n      key: \"finalizeTaprootInput\",\n      value: function finalizeTaprootInput(inputIndex, tapLeafHashToFinalize) {\n        var finalScriptsFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").tapScriptFinalizer;\n        var input = (0, _$$_REQUIRE(_dependencyMap[10], \"bip174/src/lib/utils\").checkForInput)(this.data.inputs, inputIndex);\n        if ((0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").isTaprootInput)(input)) return this._finalizeTaprootInput(inputIndex, input, tapLeafHashToFinalize, finalScriptsFunc);\n        throw new Error(`Cannot finalize input #${inputIndex}. Not Taproot.`);\n      }\n    }, {\n      key: \"_finalizeInput\",\n      value: function _finalizeInput(inputIndex, input) {\n        var finalScriptsFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getFinalScripts;\n        var _getScriptFromInput = getScriptFromInput(inputIndex, input, this.__CACHE),\n          script = _getScriptFromInput.script,\n          isP2SH = _getScriptFromInput.isP2SH,\n          isP2WSH = _getScriptFromInput.isP2WSH,\n          isSegwit = _getScriptFromInput.isSegwit;\n        if (!script) throw new Error(`No script found for input #${inputIndex}`);\n        checkPartialSigSighashes(input);\n        var _finalScriptsFunc = finalScriptsFunc(inputIndex, input, script, isSegwit, isP2SH, isP2WSH),\n          finalScriptSig = _finalScriptsFunc.finalScriptSig,\n          finalScriptWitness = _finalScriptsFunc.finalScriptWitness;\n        if (finalScriptSig) this.data.updateInput(inputIndex, {\n          finalScriptSig: finalScriptSig\n        });\n        if (finalScriptWitness) this.data.updateInput(inputIndex, {\n          finalScriptWitness: finalScriptWitness\n        });\n        if (!finalScriptSig && !finalScriptWitness) throw new Error(`Unknown error finalizing input #${inputIndex}`);\n        this.data.clearFinalizedInput(inputIndex);\n        return this;\n      }\n    }, {\n      key: \"_finalizeTaprootInput\",\n      value: function _finalizeTaprootInput(inputIndex, input, tapLeafHashToFinalize) {\n        var finalScriptsFunc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").tapScriptFinalizer;\n        if (!input.witnessUtxo) throw new Error(`Cannot finalize input #${inputIndex}. Missing withness utxo.`);\n        // Check key spend first. Increased privacy and reduced block space.\n        if (input.tapKeySig) {\n          var payment = _$$_REQUIRE(_dependencyMap[11], \"./payments\").p2tr({\n            output: input.witnessUtxo.script,\n            signature: input.tapKeySig\n          });\n          var finalScriptWitness = (0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").witnessStackToScriptWitness)(payment.witness);\n          this.data.updateInput(inputIndex, {\n            finalScriptWitness: finalScriptWitness\n          });\n        } else {\n          var _finalScriptsFunc2 = finalScriptsFunc(inputIndex, input, tapLeafHashToFinalize),\n            _finalScriptWitness = _finalScriptsFunc2.finalScriptWitness;\n          this.data.updateInput(inputIndex, {\n            finalScriptWitness: _finalScriptWitness\n          });\n        }\n        this.data.clearFinalizedInput(inputIndex);\n        return this;\n      }\n    }, {\n      key: \"getInputType\",\n      value: function getInputType(inputIndex) {\n        var input = (0, _$$_REQUIRE(_dependencyMap[10], \"bip174/src/lib/utils\").checkForInput)(this.data.inputs, inputIndex);\n        var script = getScriptFromUtxo(inputIndex, input, this.__CACHE);\n        var result = getMeaningfulScript(script, inputIndex, 'input', input.redeemScript || redeemFromFinalScriptSig(input.finalScriptSig), input.witnessScript || redeemFromFinalWitnessScript(input.finalScriptWitness));\n        var type = result.type === 'raw' ? '' : result.type + '-';\n        var mainType = classifyScript(result.meaningfulScript);\n        return type + mainType;\n      }\n    }, {\n      key: \"inputHasPubkey\",\n      value: function inputHasPubkey(inputIndex, pubkey) {\n        var input = (0, _$$_REQUIRE(_dependencyMap[10], \"bip174/src/lib/utils\").checkForInput)(this.data.inputs, inputIndex);\n        return pubkeyInInput(pubkey, input, inputIndex, this.__CACHE);\n      }\n    }, {\n      key: \"inputHasHDKey\",\n      value: function inputHasHDKey(inputIndex, root) {\n        var input = (0, _$$_REQUIRE(_dependencyMap[10], \"bip174/src/lib/utils\").checkForInput)(this.data.inputs, inputIndex);\n        var derivationIsMine = bip32DerivationIsMine(root);\n        return !!input.bip32Derivation && input.bip32Derivation.some(derivationIsMine);\n      }\n    }, {\n      key: \"outputHasPubkey\",\n      value: function outputHasPubkey(outputIndex, pubkey) {\n        var output = (0, _$$_REQUIRE(_dependencyMap[10], \"bip174/src/lib/utils\").checkForOutput)(this.data.outputs, outputIndex);\n        return pubkeyInOutput(pubkey, output, outputIndex, this.__CACHE);\n      }\n    }, {\n      key: \"outputHasHDKey\",\n      value: function outputHasHDKey(outputIndex, root) {\n        var output = (0, _$$_REQUIRE(_dependencyMap[10], \"bip174/src/lib/utils\").checkForOutput)(this.data.outputs, outputIndex);\n        var derivationIsMine = bip32DerivationIsMine(root);\n        return !!output.bip32Derivation && output.bip32Derivation.some(derivationIsMine);\n      }\n    }, {\n      key: \"validateSignaturesOfAllInputs\",\n      value: function validateSignaturesOfAllInputs(validator) {\n        var _this5 = this;\n        (0, _$$_REQUIRE(_dependencyMap[10], \"bip174/src/lib/utils\").checkForInput)(this.data.inputs, 0); // making sure we have at least one\n        var results = range(this.data.inputs.length).map(function (idx) {\n          return _this5.validateSignaturesOfInput(idx, validator);\n        });\n        return results.reduce(function (final, res) {\n          return res === true && final;\n        }, true);\n      }\n    }, {\n      key: \"validateSignaturesOfInput\",\n      value: function validateSignaturesOfInput(inputIndex, validator, pubkey) {\n        var input = this.data.inputs[inputIndex];\n        if ((0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").isTaprootInput)(input)) return this.validateSignaturesOfTaprootInput(inputIndex, validator, pubkey);\n        return this._validateSignaturesOfInput(inputIndex, validator, pubkey);\n      }\n    }, {\n      key: \"_validateSignaturesOfInput\",\n      value: function _validateSignaturesOfInput(inputIndex, validator, pubkey) {\n        var input = this.data.inputs[inputIndex];\n        var partialSig = (input || {}).partialSig;\n        if (!input || !partialSig || partialSig.length < 1) throw new Error('No signatures to validate');\n        if (typeof validator !== 'function') throw new Error('Need validator function to validate signatures');\n        var mySigs = pubkey ? partialSig.filter(function (sig) {\n          return sig.pubkey.equals(pubkey);\n        }) : partialSig;\n        if (mySigs.length < 1) throw new Error('No signatures for this pubkey');\n        var results = [];\n        var hashCache;\n        var scriptCache;\n        var sighashCache;\n        for (var pSig of mySigs) {\n          var sig = _$$_REQUIRE(_dependencyMap[13], \"./script\").signature.decode(pSig.signature);\n          var _ref = sighashCache !== sig.hashType ? getHashForSig(inputIndex, Object.assign({}, input, {\n              sighashType: sig.hashType\n            }), this.__CACHE, true) : {\n              hash: hashCache,\n              script: scriptCache\n            },\n            hash = _ref.hash,\n            script = _ref.script;\n          sighashCache = sig.hashType;\n          hashCache = hash;\n          scriptCache = script;\n          checkScriptForPubkey(pSig.pubkey, script, 'verify');\n          results.push(validator(pSig.pubkey, hash, sig.signature));\n        }\n        return results.every(function (res) {\n          return res === true;\n        });\n      }\n    }, {\n      key: \"validateSignaturesOfTaprootInput\",\n      value: function validateSignaturesOfTaprootInput(inputIndex, validator, pubkey) {\n        var input = this.data.inputs[inputIndex];\n        var tapKeySig = (input || {}).tapKeySig;\n        var tapScriptSig = (input || {}).tapScriptSig;\n        if (!input && !tapKeySig && !(tapScriptSig && !tapScriptSig.length)) throw new Error('No signatures to validate');\n        if (typeof validator !== 'function') throw new Error('Need validator function to validate signatures');\n        pubkey = pubkey && (0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").toXOnly)(pubkey);\n        var allHashses = pubkey ? getTaprootHashesForSig(inputIndex, input, this.data.inputs, pubkey, this.__CACHE) : getAllTaprootHashesForSig(inputIndex, input, this.data.inputs, this.__CACHE);\n        if (!allHashses.length) throw new Error('No signatures for this pubkey');\n        var tapKeyHash = allHashses.find(function (h) {\n          return !h.leafHash;\n        });\n        var validationResultCount = 0;\n        if (tapKeySig && tapKeyHash) {\n          var isValidTapkeySig = validator(tapKeyHash.pubkey, tapKeyHash.hash, trimTaprootSig(tapKeySig));\n          if (!isValidTapkeySig) return false;\n          validationResultCount++;\n        }\n        if (tapScriptSig) {\n          var _loop = function _loop(tapSig) {\n              var tapSigHash = allHashses.find(function (h) {\n                return tapSig.pubkey.equals(h.pubkey);\n              });\n              if (tapSigHash) {\n                var isValidTapScriptSig = validator(tapSig.pubkey, tapSigHash.hash, trimTaprootSig(tapSig.signature));\n                if (!isValidTapScriptSig) return {\n                  v: false\n                };\n                validationResultCount++;\n              }\n            },\n            _ret;\n          for (var tapSig of tapScriptSig) {\n            _ret = _loop(tapSig);\n            if (_ret) return _ret.v;\n          }\n        }\n        return validationResultCount > 0;\n      }\n    }, {\n      key: \"signAllInputsHD\",\n      value: function signAllInputsHD(hdKeyPair) {\n        var sighashTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [_$$_REQUIRE(_dependencyMap[14], \"./transaction\").Transaction.SIGHASH_ALL];\n        if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {\n          throw new Error('Need HDSigner to sign input');\n        }\n        var results = [];\n        for (var i of range(this.data.inputs.length)) {\n          try {\n            this.signInputHD(i, hdKeyPair, sighashTypes);\n            results.push(true);\n          } catch (err) {\n            results.push(false);\n          }\n        }\n        if (results.every(function (v) {\n          return v === false;\n        })) {\n          throw new Error('No inputs were signed');\n        }\n        return this;\n      }\n    }, {\n      key: \"signAllInputsHDAsync\",\n      value: function signAllInputsHDAsync(hdKeyPair) {\n        var _this6 = this;\n        var sighashTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [_$$_REQUIRE(_dependencyMap[14], \"./transaction\").Transaction.SIGHASH_ALL];\n        return new Promise(function (resolve, reject) {\n          if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {\n            return reject(new Error('Need HDSigner to sign input'));\n          }\n          var results = [];\n          var promises = [];\n          for (var i of range(_this6.data.inputs.length)) {\n            promises.push(_this6.signInputHDAsync(i, hdKeyPair, sighashTypes).then(function () {\n              results.push(true);\n            }, function () {\n              results.push(false);\n            }));\n          }\n          return Promise.all(promises).then(function () {\n            if (results.every(function (v) {\n              return v === false;\n            })) {\n              return reject(new Error('No inputs were signed'));\n            }\n            resolve();\n          });\n        });\n      }\n    }, {\n      key: \"signInputHD\",\n      value: function signInputHD(inputIndex, hdKeyPair) {\n        var _this7 = this;\n        var sighashTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [_$$_REQUIRE(_dependencyMap[14], \"./transaction\").Transaction.SIGHASH_ALL];\n        if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {\n          throw new Error('Need HDSigner to sign input');\n        }\n        var signers = getSignersFromHD(inputIndex, this.data.inputs, hdKeyPair);\n        signers.forEach(function (signer) {\n          return _this7.signInput(inputIndex, signer, sighashTypes);\n        });\n        return this;\n      }\n    }, {\n      key: \"signInputHDAsync\",\n      value: function signInputHDAsync(inputIndex, hdKeyPair) {\n        var _this8 = this;\n        var sighashTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [_$$_REQUIRE(_dependencyMap[14], \"./transaction\").Transaction.SIGHASH_ALL];\n        return new Promise(function (resolve, reject) {\n          if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {\n            return reject(new Error('Need HDSigner to sign input'));\n          }\n          var signers = getSignersFromHD(inputIndex, _this8.data.inputs, hdKeyPair);\n          var promises = signers.map(function (signer) {\n            return _this8.signInputAsync(inputIndex, signer, sighashTypes);\n          });\n          return Promise.all(promises).then(function () {\n            resolve();\n          }).catch(reject);\n        });\n      }\n    }, {\n      key: \"signAllInputs\",\n      value: function signAllInputs(keyPair, sighashTypes) {\n        if (!keyPair || !keyPair.publicKey) throw new Error('Need Signer to sign input');\n        // TODO: Add a pubkey/pubkeyhash cache to each input\n        // as input information is added, then eventually\n        // optimize this method.\n        var results = [];\n        for (var i of range(this.data.inputs.length)) {\n          try {\n            this.signInput(i, keyPair, sighashTypes);\n            results.push(true);\n          } catch (err) {\n            results.push(false);\n          }\n        }\n        if (results.every(function (v) {\n          return v === false;\n        })) {\n          throw new Error('No inputs were signed');\n        }\n        return this;\n      }\n    }, {\n      key: \"signAllInputsAsync\",\n      value: function signAllInputsAsync(keyPair, sighashTypes) {\n        var _this9 = this;\n        return new Promise(function (resolve, reject) {\n          if (!keyPair || !keyPair.publicKey) return reject(new Error('Need Signer to sign input'));\n          // TODO: Add a pubkey/pubkeyhash cache to each input\n          // as input information is added, then eventually\n          // optimize this method.\n          var results = [];\n          var promises = [];\n          for (var _ref2 of _this9.data.inputs.entries()) {\n            var _ref3 = _slicedToArray(_ref2, 1);\n            var i = _ref3[0];\n            promises.push(_this9.signInputAsync(i, keyPair, sighashTypes).then(function () {\n              results.push(true);\n            }, function () {\n              results.push(false);\n            }));\n          }\n          return Promise.all(promises).then(function () {\n            if (results.every(function (v) {\n              return v === false;\n            })) {\n              return reject(new Error('No inputs were signed'));\n            }\n            resolve();\n          });\n        });\n      }\n    }, {\n      key: \"signInput\",\n      value: function signInput(inputIndex, keyPair, sighashTypes) {\n        if (!keyPair || !keyPair.publicKey) throw new Error('Need Signer to sign input');\n        var input = (0, _$$_REQUIRE(_dependencyMap[10], \"bip174/src/lib/utils\").checkForInput)(this.data.inputs, inputIndex);\n        if ((0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").isTaprootInput)(input)) {\n          return this._signTaprootInput(inputIndex, input, keyPair, undefined, sighashTypes);\n        }\n        return this._signInput(inputIndex, keyPair, sighashTypes);\n      }\n    }, {\n      key: \"signTaprootInput\",\n      value: function signTaprootInput(inputIndex, keyPair, tapLeafHashToSign, sighashTypes) {\n        if (!keyPair || !keyPair.publicKey) throw new Error('Need Signer to sign input');\n        var input = (0, _$$_REQUIRE(_dependencyMap[10], \"bip174/src/lib/utils\").checkForInput)(this.data.inputs, inputIndex);\n        if ((0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").isTaprootInput)(input)) return this._signTaprootInput(inputIndex, input, keyPair, tapLeafHashToSign, sighashTypes);\n        throw new Error(`Input #${inputIndex} is not of type Taproot.`);\n      }\n    }, {\n      key: \"_signInput\",\n      value: function _signInput(inputIndex, keyPair) {\n        var sighashTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [_$$_REQUIRE(_dependencyMap[14], \"./transaction\").Transaction.SIGHASH_ALL];\n        var _getHashAndSighashTyp = getHashAndSighashType(this.data.inputs, inputIndex, keyPair.publicKey, this.__CACHE, sighashTypes),\n          hash = _getHashAndSighashTyp.hash,\n          sighashType = _getHashAndSighashTyp.sighashType;\n        var partialSig = [{\n          pubkey: keyPair.publicKey,\n          signature: _$$_REQUIRE(_dependencyMap[13], \"./script\").signature.encode(keyPair.sign(hash), sighashType)\n        }];\n        this.data.updateInput(inputIndex, {\n          partialSig: partialSig\n        });\n        return this;\n      }\n    }, {\n      key: \"_signTaprootInput\",\n      value: function _signTaprootInput(inputIndex, input, keyPair, tapLeafHashToSign) {\n        var allowedSighashTypes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [_$$_REQUIRE(_dependencyMap[14], \"./transaction\").Transaction.SIGHASH_DEFAULT];\n        var hashesForSig = this.checkTaprootHashesForSig(inputIndex, input, keyPair, tapLeafHashToSign, allowedSighashTypes);\n        var tapKeySig = hashesForSig.filter(function (h) {\n          return !h.leafHash;\n        }).map(function (h) {\n          return (0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").serializeTaprootSignature)(keyPair.signSchnorr(h.hash), input.sighashType);\n        })[0];\n        var tapScriptSig = hashesForSig.filter(function (h) {\n          return !!h.leafHash;\n        }).map(function (h) {\n          return {\n            pubkey: (0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").toXOnly)(keyPair.publicKey),\n            signature: (0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").serializeTaprootSignature)(keyPair.signSchnorr(h.hash), input.sighashType),\n            leafHash: h.leafHash\n          };\n        });\n        if (tapKeySig) {\n          this.data.updateInput(inputIndex, {\n            tapKeySig: tapKeySig\n          });\n        }\n        if (tapScriptSig.length) {\n          this.data.updateInput(inputIndex, {\n            tapScriptSig: tapScriptSig\n          });\n        }\n        return this;\n      }\n    }, {\n      key: \"signInputAsync\",\n      value: function signInputAsync(inputIndex, keyPair, sighashTypes) {\n        var _this0 = this;\n        return Promise.resolve().then(function () {\n          if (!keyPair || !keyPair.publicKey) throw new Error('Need Signer to sign input');\n          var input = (0, _$$_REQUIRE(_dependencyMap[10], \"bip174/src/lib/utils\").checkForInput)(_this0.data.inputs, inputIndex);\n          if ((0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").isTaprootInput)(input)) return _this0._signTaprootInputAsync(inputIndex, input, keyPair, undefined, sighashTypes);\n          return _this0._signInputAsync(inputIndex, keyPair, sighashTypes);\n        });\n      }\n    }, {\n      key: \"signTaprootInputAsync\",\n      value: function signTaprootInputAsync(inputIndex, keyPair, tapLeafHash, sighashTypes) {\n        var _this1 = this;\n        return Promise.resolve().then(function () {\n          if (!keyPair || !keyPair.publicKey) throw new Error('Need Signer to sign input');\n          var input = (0, _$$_REQUIRE(_dependencyMap[10], \"bip174/src/lib/utils\").checkForInput)(_this1.data.inputs, inputIndex);\n          if ((0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").isTaprootInput)(input)) return _this1._signTaprootInputAsync(inputIndex, input, keyPair, tapLeafHash, sighashTypes);\n          throw new Error(`Input #${inputIndex} is not of type Taproot.`);\n        });\n      }\n    }, {\n      key: \"_signInputAsync\",\n      value: function _signInputAsync(inputIndex, keyPair) {\n        var _this10 = this;\n        var sighashTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [_$$_REQUIRE(_dependencyMap[14], \"./transaction\").Transaction.SIGHASH_ALL];\n        var _getHashAndSighashTyp2 = getHashAndSighashType(this.data.inputs, inputIndex, keyPair.publicKey, this.__CACHE, sighashTypes),\n          hash = _getHashAndSighashTyp2.hash,\n          sighashType = _getHashAndSighashTyp2.sighashType;\n        return Promise.resolve(keyPair.sign(hash)).then(function (signature) {\n          var partialSig = [{\n            pubkey: keyPair.publicKey,\n            signature: _$$_REQUIRE(_dependencyMap[13], \"./script\").signature.encode(signature, sighashType)\n          }];\n          _this10.data.updateInput(inputIndex, {\n            partialSig: partialSig\n          });\n        });\n      }\n    }, {\n      key: \"_signTaprootInputAsync\",\n      value: function () {\n        var _signTaprootInputAsync2 = _asyncToGenerator(function* (inputIndex, input, keyPair, tapLeafHash) {\n          var _this11 = this;\n          var sighashTypes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [_$$_REQUIRE(_dependencyMap[14], \"./transaction\").Transaction.SIGHASH_DEFAULT];\n          var hashesForSig = this.checkTaprootHashesForSig(inputIndex, input, keyPair, tapLeafHash, sighashTypes);\n          var signaturePromises = [];\n          var tapKeyHash = hashesForSig.filter(function (h) {\n            return !h.leafHash;\n          })[0];\n          if (tapKeyHash) {\n            var tapKeySigPromise = Promise.resolve(keyPair.signSchnorr(tapKeyHash.hash)).then(function (sig) {\n              return {\n                tapKeySig: (0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").serializeTaprootSignature)(sig, input.sighashType)\n              };\n            });\n            signaturePromises.push(tapKeySigPromise);\n          }\n          var tapScriptHashes = hashesForSig.filter(function (h) {\n            return !!h.leafHash;\n          });\n          if (tapScriptHashes.length) {\n            var tapScriptSigPromises = tapScriptHashes.map(function (tsh) {\n              return Promise.resolve(keyPair.signSchnorr(tsh.hash)).then(function (signature) {\n                var tapScriptSig = [{\n                  pubkey: (0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").toXOnly)(keyPair.publicKey),\n                  signature: (0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").serializeTaprootSignature)(signature, input.sighashType),\n                  leafHash: tsh.leafHash\n                }];\n                return {\n                  tapScriptSig: tapScriptSig\n                };\n              });\n            });\n            signaturePromises.push.apply(signaturePromises, _toConsumableArray(tapScriptSigPromises));\n          }\n          return Promise.all(signaturePromises).then(function (results) {\n            results.forEach(function (v) {\n              return _this11.data.updateInput(inputIndex, v);\n            });\n          });\n        });\n        function _signTaprootInputAsync(_x, _x2, _x3, _x4) {\n          return _signTaprootInputAsync2.apply(this, arguments);\n        }\n        return _signTaprootInputAsync;\n      }()\n    }, {\n      key: \"checkTaprootHashesForSig\",\n      value: function checkTaprootHashesForSig(inputIndex, input, keyPair, tapLeafHashToSign, allowedSighashTypes) {\n        if (typeof keyPair.signSchnorr !== 'function') throw new Error(`Need Schnorr Signer to sign taproot input #${inputIndex}.`);\n        var hashesForSig = getTaprootHashesForSig(inputIndex, input, this.data.inputs, keyPair.publicKey, this.__CACHE, tapLeafHashToSign, allowedSighashTypes);\n        if (!hashesForSig || !hashesForSig.length) throw new Error(`Can not sign for input #${inputIndex} with the key ${keyPair.publicKey.toString('hex')}`);\n        return hashesForSig;\n      }\n    }, {\n      key: \"toBuffer\",\n      value: function toBuffer() {\n        checkCache(this.__CACHE);\n        return this.data.toBuffer();\n      }\n    }, {\n      key: \"toHex\",\n      value: function toHex() {\n        checkCache(this.__CACHE);\n        return this.data.toHex();\n      }\n    }, {\n      key: \"toBase64\",\n      value: function toBase64() {\n        checkCache(this.__CACHE);\n        return this.data.toBase64();\n      }\n    }, {\n      key: \"updateGlobal\",\n      value: function updateGlobal(updateData) {\n        this.data.updateGlobal(updateData);\n        return this;\n      }\n    }, {\n      key: \"updateInput\",\n      value: function updateInput(inputIndex, updateData) {\n        if (updateData.witnessScript) checkInvalidP2WSH(updateData.witnessScript);\n        (0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").checkTaprootInputFields)(this.data.inputs[inputIndex], updateData, 'updateInput');\n        this.data.updateInput(inputIndex, updateData);\n        if (updateData.nonWitnessUtxo) {\n          addNonWitnessTxCache(this.__CACHE, this.data.inputs[inputIndex], inputIndex);\n        }\n        return this;\n      }\n    }, {\n      key: \"updateOutput\",\n      value: function updateOutput(outputIndex, updateData) {\n        var outputData = this.data.outputs[outputIndex];\n        (0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").checkTaprootOutputFields)(outputData, updateData, 'updateOutput');\n        this.data.updateOutput(outputIndex, updateData);\n        return this;\n      }\n    }, {\n      key: \"addUnknownKeyValToGlobal\",\n      value: function addUnknownKeyValToGlobal(keyVal) {\n        this.data.addUnknownKeyValToGlobal(keyVal);\n        return this;\n      }\n    }, {\n      key: \"addUnknownKeyValToInput\",\n      value: function addUnknownKeyValToInput(inputIndex, keyVal) {\n        this.data.addUnknownKeyValToInput(inputIndex, keyVal);\n        return this;\n      }\n    }, {\n      key: \"addUnknownKeyValToOutput\",\n      value: function addUnknownKeyValToOutput(outputIndex, keyVal) {\n        this.data.addUnknownKeyValToOutput(outputIndex, keyVal);\n        return this;\n      }\n    }, {\n      key: \"clearFinalizedInput\",\n      value: function clearFinalizedInput(inputIndex) {\n        this.data.clearFinalizedInput(inputIndex);\n        return this;\n      }\n    }], [{\n      key: \"fromBase64\",\n      value: function fromBase64(data) {\n        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var buffer = Buffer.from(data, 'base64');\n        return this.fromBuffer(buffer, opts);\n      }\n    }, {\n      key: \"fromHex\",\n      value: function fromHex(data) {\n        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var buffer = Buffer.from(data, 'hex');\n        return this.fromBuffer(buffer, opts);\n      }\n    }, {\n      key: \"fromBuffer\",\n      value: function fromBuffer(buffer) {\n        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var psbtBase = _$$_REQUIRE(_dependencyMap[6], \"bip174\").Psbt.fromBuffer(buffer, transactionFromBuffer);\n        var psbt = new Psbt(opts, psbtBase);\n        checkTxForDupeIns(psbt.__CACHE.__TX, psbt.__CACHE);\n        return psbt;\n      }\n    }]);\n  }();\n  exports.Psbt = Psbt;\n  /**\n   * This function is needed to pass to the bip174 base class's fromBuffer.\n   * It takes the \"transaction buffer\" portion of the psbt buffer and returns a\n   * Transaction (From the bip174 library) interface.\n   */\n  var transactionFromBuffer = function transactionFromBuffer(buffer) {\n    return new PsbtTransaction(buffer);\n  };\n  /**\n   * This class implements the Transaction interface from bip174 library.\n   * It contains a bitcoinjs-lib Transaction object.\n   */\n  var PsbtTransaction = /*#__PURE__*/function () {\n    function PsbtTransaction() {\n      var buffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Buffer.from([2, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n      _classCallCheck(this, PsbtTransaction);\n      this.tx = _$$_REQUIRE(_dependencyMap[14], \"./transaction\").Transaction.fromBuffer(buffer);\n      checkTxEmpty(this.tx);\n      Object.defineProperty(this, 'tx', {\n        enumerable: false,\n        writable: true\n      });\n    }\n    return _createClass(PsbtTransaction, [{\n      key: \"getInputOutputCounts\",\n      value: function getInputOutputCounts() {\n        return {\n          inputCount: this.tx.ins.length,\n          outputCount: this.tx.outs.length\n        };\n      }\n    }, {\n      key: \"addInput\",\n      value: function addInput(input) {\n        if (input.hash === undefined || input.index === undefined || !Buffer.isBuffer(input.hash) && typeof input.hash !== 'string' || typeof input.index !== 'number') {\n          throw new Error('Error adding input.');\n        }\n        var hash = typeof input.hash === 'string' ? (0, _$$_REQUIRE(_dependencyMap[7], \"./bufferutils\").reverseBuffer)(Buffer.from(input.hash, 'hex')) : input.hash;\n        this.tx.addInput(hash, input.index, input.sequence);\n      }\n    }, {\n      key: \"addOutput\",\n      value: function addOutput(output) {\n        if (output.script === undefined || output.value === undefined || !Buffer.isBuffer(output.script) || typeof output.value !== 'number') {\n          throw new Error('Error adding output.');\n        }\n        this.tx.addOutput(output.script, output.value);\n      }\n    }, {\n      key: \"toBuffer\",\n      value: function toBuffer() {\n        return this.tx.toBuffer();\n      }\n    }]);\n  }();\n  function canFinalize(input, script, scriptType) {\n    switch (scriptType) {\n      case 'pubkey':\n      case 'pubkeyhash':\n      case 'witnesspubkeyhash':\n        return hasSigs(1, input.partialSig);\n      case 'multisig':\n        var p2ms = _$$_REQUIRE(_dependencyMap[11], \"./payments\").p2ms({\n          output: script\n        });\n        return hasSigs(p2ms.m, input.partialSig, p2ms.pubkeys);\n      default:\n        return false;\n    }\n  }\n  function checkCache(cache) {\n    if (cache.__UNSAFE_SIGN_NONSEGWIT !== false) {\n      throw new Error('Not BIP174 compliant, can not export');\n    }\n  }\n  function hasSigs(neededSigs, partialSig, pubkeys) {\n    if (!partialSig) return false;\n    var sigs;\n    if (pubkeys) {\n      sigs = pubkeys.map(function (pkey) {\n        var pubkey = compressPubkey(pkey);\n        return partialSig.find(function (pSig) {\n          return pSig.pubkey.equals(pubkey);\n        });\n      }).filter(function (v) {\n        return !!v;\n      });\n    } else {\n      sigs = partialSig;\n    }\n    if (sigs.length > neededSigs) throw new Error('Too many signatures');\n    return sigs.length === neededSigs;\n  }\n  function isFinalized(input) {\n    return !!input.finalScriptSig || !!input.finalScriptWitness;\n  }\n  function bip32DerivationIsMine(root) {\n    return function (d) {\n      if (!d.masterFingerprint.equals(root.fingerprint)) return false;\n      if (!root.derivePath(d.path).publicKey.equals(d.pubkey)) return false;\n      return true;\n    };\n  }\n  function check32Bit(num) {\n    if (typeof num !== 'number' || num !== Math.floor(num) || num > 0xffffffff || num < 0) {\n      throw new Error('Invalid 32 bit integer');\n    }\n  }\n  function checkFees(psbt, cache, opts) {\n    var feeRate = cache.__FEE_RATE || psbt.getFeeRate();\n    var vsize = cache.__EXTRACTED_TX.virtualSize();\n    var satoshis = feeRate * vsize;\n    if (feeRate >= opts.maximumFeeRate) {\n      throw new Error(`Warning: You are paying around ${(satoshis / 1e8).toFixed(8)} in ` + `fees, which is ${feeRate} satoshi per byte for a transaction ` + `with a VSize of ${vsize} bytes (segwit counted as 0.25 byte per ` + `byte). Use setMaximumFeeRate method to raise your threshold, or ` + `pass true to the first arg of extractTransaction.`);\n    }\n  }\n  function checkInputsForPartialSig(inputs, action) {\n    inputs.forEach(function (input) {\n      var throws = (0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").isTaprootInput)(input) ? (0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").checkTaprootInputForSigs)(input, action) : (0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").checkInputForSig)(input, action);\n      if (throws) throw new Error('Can not modify transaction, signatures exist.');\n    });\n  }\n  function checkPartialSigSighashes(input) {\n    if (!input.sighashType || !input.partialSig) return;\n    var partialSig = input.partialSig,\n      sighashType = input.sighashType;\n    partialSig.forEach(function (pSig) {\n      var _bscript$signature$de = _$$_REQUIRE(_dependencyMap[13], \"./script\").signature.decode(pSig.signature),\n        hashType = _bscript$signature$de.hashType;\n      if (sighashType !== hashType) {\n        throw new Error('Signature sighash does not match input sighash type');\n      }\n    });\n  }\n  function checkScriptForPubkey(pubkey, script, action) {\n    if (!(0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").pubkeyInScript)(pubkey, script)) {\n      throw new Error(`Can not ${action} for this input with the key ${pubkey.toString('hex')}`);\n    }\n  }\n  function checkTxEmpty(tx) {\n    var isEmpty = tx.ins.every(function (input) {\n      return input.script && input.script.length === 0 && input.witness && input.witness.length === 0;\n    });\n    if (!isEmpty) {\n      throw new Error('Format Error: Transaction ScriptSigs are not empty');\n    }\n  }\n  function checkTxForDupeIns(tx, cache) {\n    tx.ins.forEach(function (input) {\n      checkTxInputCache(cache, input);\n    });\n  }\n  function checkTxInputCache(cache, input) {\n    var key = (0, _$$_REQUIRE(_dependencyMap[7], \"./bufferutils\").reverseBuffer)(Buffer.from(input.hash)).toString('hex') + ':' + input.index;\n    if (cache.__TX_IN_CACHE[key]) throw new Error('Duplicate input detected.');\n    cache.__TX_IN_CACHE[key] = 1;\n  }\n  function scriptCheckerFactory(payment, paymentScriptName) {\n    return function (inputIndex, scriptPubKey, redeemScript, ioType) {\n      var redeemScriptOutput = payment({\n        redeem: {\n          output: redeemScript\n        }\n      }).output;\n      if (!scriptPubKey.equals(redeemScriptOutput)) {\n        throw new Error(`${paymentScriptName} for ${ioType} #${inputIndex} doesn't match the scriptPubKey in the prevout`);\n      }\n    };\n  }\n  var checkRedeemScript = scriptCheckerFactory(_$$_REQUIRE(_dependencyMap[11], \"./payments\").p2sh, 'Redeem script');\n  var checkWitnessScript = scriptCheckerFactory(_$$_REQUIRE(_dependencyMap[11], \"./payments\").p2wsh, 'Witness script');\n  function getTxCacheValue(key, name, inputs, c) {\n    if (!inputs.every(isFinalized)) throw new Error(`PSBT must be finalized to calculate ${name}`);\n    if (key === '__FEE_RATE' && c.__FEE_RATE) return c.__FEE_RATE;\n    if (key === '__FEE' && c.__FEE) return c.__FEE;\n    var tx;\n    var mustFinalize = true;\n    if (c.__EXTRACTED_TX) {\n      tx = c.__EXTRACTED_TX;\n      mustFinalize = false;\n    } else {\n      tx = c.__TX.clone();\n    }\n    inputFinalizeGetAmts(inputs, tx, c, mustFinalize);\n    if (key === '__FEE_RATE') return c.__FEE_RATE;else if (key === '__FEE') return c.__FEE;\n  }\n  function getFinalScripts(inputIndex, input, script, isSegwit, isP2SH, isP2WSH) {\n    var scriptType = classifyScript(script);\n    if (!canFinalize(input, script, scriptType)) throw new Error(`Can not finalize input #${inputIndex}`);\n    return prepareFinalScripts(script, scriptType, input.partialSig, isSegwit, isP2SH, isP2WSH);\n  }\n  function prepareFinalScripts(script, scriptType, partialSig, isSegwit, isP2SH, isP2WSH) {\n    var finalScriptSig;\n    var finalScriptWitness;\n    // Wow, the payments API is very handy\n    var payment = getPayment(script, scriptType, partialSig);\n    var p2wsh = !isP2WSH ? null : _$$_REQUIRE(_dependencyMap[11], \"./payments\").p2wsh({\n      redeem: payment\n    });\n    var p2sh = !isP2SH ? null : _$$_REQUIRE(_dependencyMap[11], \"./payments\").p2sh({\n      redeem: p2wsh || payment\n    });\n    if (isSegwit) {\n      if (p2wsh) {\n        finalScriptWitness = (0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").witnessStackToScriptWitness)(p2wsh.witness);\n      } else {\n        finalScriptWitness = (0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").witnessStackToScriptWitness)(payment.witness);\n      }\n      if (p2sh) {\n        finalScriptSig = p2sh.input;\n      }\n    } else {\n      if (p2sh) {\n        finalScriptSig = p2sh.input;\n      } else {\n        finalScriptSig = payment.input;\n      }\n    }\n    return {\n      finalScriptSig: finalScriptSig,\n      finalScriptWitness: finalScriptWitness\n    };\n  }\n  function getHashAndSighashType(inputs, inputIndex, pubkey, cache, sighashTypes) {\n    var input = (0, _$$_REQUIRE(_dependencyMap[10], \"bip174/src/lib/utils\").checkForInput)(inputs, inputIndex);\n    var _getHashForSig = getHashForSig(inputIndex, input, cache, false, sighashTypes),\n      hash = _getHashForSig.hash,\n      sighashType = _getHashForSig.sighashType,\n      script = _getHashForSig.script;\n    checkScriptForPubkey(pubkey, script, 'sign');\n    return {\n      hash: hash,\n      sighashType: sighashType\n    };\n  }\n  function getHashForSig(inputIndex, input, cache, forValidate, sighashTypes) {\n    var unsignedTx = cache.__TX;\n    var sighashType = input.sighashType || _$$_REQUIRE(_dependencyMap[14], \"./transaction\").Transaction.SIGHASH_ALL;\n    checkSighashTypeAllowed(sighashType, sighashTypes);\n    var hash;\n    var prevout;\n    if (input.nonWitnessUtxo) {\n      var nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(cache, input, inputIndex);\n      var prevoutHash = unsignedTx.ins[inputIndex].hash;\n      var utxoHash = nonWitnessUtxoTx.getHash();\n      // If a non-witness UTXO is provided, its hash must match the hash specified in the prevout\n      if (!prevoutHash.equals(utxoHash)) {\n        throw new Error(`Non-witness UTXO hash for input #${inputIndex} doesn't match the hash specified in the prevout`);\n      }\n      var prevoutIndex = unsignedTx.ins[inputIndex].index;\n      prevout = nonWitnessUtxoTx.outs[prevoutIndex];\n    } else if (input.witnessUtxo) {\n      prevout = input.witnessUtxo;\n    } else {\n      throw new Error('Need a Utxo input item for signing');\n    }\n    var _getMeaningfulScript = getMeaningfulScript(prevout.script, inputIndex, 'input', input.redeemScript, input.witnessScript),\n      meaningfulScript = _getMeaningfulScript.meaningfulScript,\n      type = _getMeaningfulScript.type;\n    if (['p2sh-p2wsh', 'p2wsh'].indexOf(type) >= 0) {\n      hash = unsignedTx.hashForWitnessV0(inputIndex, meaningfulScript, prevout.value, sighashType);\n    } else if ((0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").isP2WPKH)(meaningfulScript)) {\n      // P2WPKH uses the P2PKH template for prevoutScript when signing\n      var signingScript = _$$_REQUIRE(_dependencyMap[11], \"./payments\").p2pkh({\n        hash: meaningfulScript.slice(2)\n      }).output;\n      hash = unsignedTx.hashForWitnessV0(inputIndex, signingScript, prevout.value, sighashType);\n    } else {\n      // non-segwit\n      if (input.nonWitnessUtxo === undefined && cache.__UNSAFE_SIGN_NONSEGWIT === false) throw new Error(`Input #${inputIndex} has witnessUtxo but non-segwit script: ` + `${meaningfulScript.toString('hex')}`);\n      if (!forValidate && cache.__UNSAFE_SIGN_NONSEGWIT !== false) console.warn('Warning: Signing non-segwit inputs without the full parent transaction ' + 'means there is a chance that a miner could feed you incorrect information ' + \"to trick you into paying large fees. This behavior is the same as Psbt's predecessor \" + '(TransactionBuilder - now removed) when signing non-segwit scripts. You are not ' + 'able to export this Psbt with toBuffer|toBase64|toHex since it is not ' + 'BIP174 compliant.\\n*********************\\nPROCEED WITH CAUTION!\\n' + '*********************');\n      hash = unsignedTx.hashForSignature(inputIndex, meaningfulScript, sighashType);\n    }\n    return {\n      script: meaningfulScript,\n      sighashType: sighashType,\n      hash: hash\n    };\n  }\n  function getAllTaprootHashesForSig(inputIndex, input, inputs, cache) {\n    var allPublicKeys = [];\n    if (input.tapInternalKey) {\n      var key = getPrevoutTaprootKey(inputIndex, input, cache);\n      if (key) {\n        allPublicKeys.push(key);\n      }\n    }\n    if (input.tapScriptSig) {\n      var tapScriptPubkeys = input.tapScriptSig.map(function (tss) {\n        return tss.pubkey;\n      });\n      allPublicKeys.push.apply(allPublicKeys, _toConsumableArray(tapScriptPubkeys));\n    }\n    var allHashes = allPublicKeys.map(function (pubicKey) {\n      return getTaprootHashesForSig(inputIndex, input, inputs, pubicKey, cache);\n    });\n    return allHashes.flat();\n  }\n  function getPrevoutTaprootKey(inputIndex, input, cache) {\n    var _getScriptAndAmountFr = getScriptAndAmountFromUtxo(inputIndex, input, cache),\n      script = _getScriptAndAmountFr.script;\n    return (0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").isP2TR)(script) ? script.subarray(2, 34) : null;\n  }\n  function trimTaprootSig(signature) {\n    return signature.length === 64 ? signature : signature.subarray(0, 64);\n  }\n  function getTaprootHashesForSig(inputIndex, input, inputs, pubkey, cache, tapLeafHashToSign, allowedSighashTypes) {\n    var unsignedTx = cache.__TX;\n    var sighashType = input.sighashType || _$$_REQUIRE(_dependencyMap[14], \"./transaction\").Transaction.SIGHASH_DEFAULT;\n    checkSighashTypeAllowed(sighashType, allowedSighashTypes);\n    var prevOuts = inputs.map(function (i, index) {\n      return getScriptAndAmountFromUtxo(index, i, cache);\n    });\n    var signingScripts = prevOuts.map(function (o) {\n      return o.script;\n    });\n    var values = prevOuts.map(function (o) {\n      return o.value;\n    });\n    var hashes = [];\n    if (input.tapInternalKey && !tapLeafHashToSign) {\n      var outputKey = getPrevoutTaprootKey(inputIndex, input, cache) || Buffer.from([]);\n      if ((0, _$$_REQUIRE(_dependencyMap[9], \"./psbt/bip371\").toXOnly)(pubkey).equals(outputKey)) {\n        var tapKeyHash = unsignedTx.hashForWitnessV1(inputIndex, signingScripts, values, sighashType);\n        hashes.push({\n          pubkey: pubkey,\n          hash: tapKeyHash\n        });\n      }\n    }\n    var tapLeafHashes = (input.tapLeafScript || []).filter(function (tapLeaf) {\n      return (0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").pubkeyInScript)(pubkey, tapLeaf.script);\n    }).map(function (tapLeaf) {\n      var hash = (0, _$$_REQUIRE(_dependencyMap[15], \"./payments/bip341\").tapleafHash)({\n        output: tapLeaf.script,\n        version: tapLeaf.leafVersion\n      });\n      return Object.assign({\n        hash: hash\n      }, tapLeaf);\n    }).filter(function (tapLeaf) {\n      return !tapLeafHashToSign || tapLeafHashToSign.equals(tapLeaf.hash);\n    }).map(function (tapLeaf) {\n      var tapScriptHash = unsignedTx.hashForWitnessV1(inputIndex, signingScripts, values, sighashType, tapLeaf.hash);\n      return {\n        pubkey: pubkey,\n        hash: tapScriptHash,\n        leafHash: tapLeaf.hash\n      };\n    });\n    return hashes.concat(tapLeafHashes);\n  }\n  function checkSighashTypeAllowed(sighashType, sighashTypes) {\n    if (sighashTypes && sighashTypes.indexOf(sighashType) < 0) {\n      var str = sighashTypeToString(sighashType);\n      throw new Error(`Sighash type is not allowed. Retry the sign method passing the ` + `sighashTypes array of whitelisted types. Sighash type: ${str}`);\n    }\n  }\n  function getPayment(script, scriptType, partialSig) {\n    var payment;\n    switch (scriptType) {\n      case 'multisig':\n        var sigs = getSortedSigs(script, partialSig);\n        payment = _$$_REQUIRE(_dependencyMap[11], \"./payments\").p2ms({\n          output: script,\n          signatures: sigs\n        });\n        break;\n      case 'pubkey':\n        payment = _$$_REQUIRE(_dependencyMap[11], \"./payments\").p2pk({\n          output: script,\n          signature: partialSig[0].signature\n        });\n        break;\n      case 'pubkeyhash':\n        payment = _$$_REQUIRE(_dependencyMap[11], \"./payments\").p2pkh({\n          output: script,\n          pubkey: partialSig[0].pubkey,\n          signature: partialSig[0].signature\n        });\n        break;\n      case 'witnesspubkeyhash':\n        payment = _$$_REQUIRE(_dependencyMap[11], \"./payments\").p2wpkh({\n          output: script,\n          pubkey: partialSig[0].pubkey,\n          signature: partialSig[0].signature\n        });\n        break;\n    }\n    return payment;\n  }\n  function getScriptFromInput(inputIndex, input, cache) {\n    var unsignedTx = cache.__TX;\n    var res = {\n      script: null,\n      isSegwit: false,\n      isP2SH: false,\n      isP2WSH: false\n    };\n    res.isP2SH = !!input.redeemScript;\n    res.isP2WSH = !!input.witnessScript;\n    if (input.witnessScript) {\n      res.script = input.witnessScript;\n    } else if (input.redeemScript) {\n      res.script = input.redeemScript;\n    } else {\n      if (input.nonWitnessUtxo) {\n        var nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(cache, input, inputIndex);\n        var prevoutIndex = unsignedTx.ins[inputIndex].index;\n        res.script = nonWitnessUtxoTx.outs[prevoutIndex].script;\n      } else if (input.witnessUtxo) {\n        res.script = input.witnessUtxo.script;\n      }\n    }\n    if (input.witnessScript || (0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").isP2WPKH)(res.script)) {\n      res.isSegwit = true;\n    }\n    return res;\n  }\n  function getSignersFromHD(inputIndex, inputs, hdKeyPair) {\n    var input = (0, _$$_REQUIRE(_dependencyMap[10], \"bip174/src/lib/utils\").checkForInput)(inputs, inputIndex);\n    if (!input.bip32Derivation || input.bip32Derivation.length === 0) {\n      throw new Error('Need bip32Derivation to sign with HD');\n    }\n    var myDerivations = input.bip32Derivation.map(function (bipDv) {\n      if (bipDv.masterFingerprint.equals(hdKeyPair.fingerprint)) {\n        return bipDv;\n      } else {\n        return;\n      }\n    }).filter(function (v) {\n      return !!v;\n    });\n    if (myDerivations.length === 0) {\n      throw new Error('Need one bip32Derivation masterFingerprint to match the HDSigner fingerprint');\n    }\n    var signers = myDerivations.map(function (bipDv) {\n      var node = hdKeyPair.derivePath(bipDv.path);\n      if (!bipDv.pubkey.equals(node.publicKey)) {\n        throw new Error('pubkey did not match bip32Derivation');\n      }\n      return node;\n    });\n    return signers;\n  }\n  function getSortedSigs(script, partialSig) {\n    var p2ms = _$$_REQUIRE(_dependencyMap[11], \"./payments\").p2ms({\n      output: script\n    });\n    // for each pubkey in order of p2ms script\n    return p2ms.pubkeys.map(function (pk) {\n      // filter partialSig array by pubkey being equal\n      return (partialSig.filter(function (ps) {\n        return ps.pubkey.equals(pk);\n      })[0] || {}).signature;\n      // Any pubkey without a match will return undefined\n      // this last filter removes all the undefined items in the array.\n    }).filter(function (v) {\n      return !!v;\n    });\n  }\n  function scriptWitnessToWitnessStack(buffer) {\n    var offset = 0;\n    function readSlice(n) {\n      offset += n;\n      return buffer.slice(offset - n, offset);\n    }\n    function readVarInt() {\n      var vi = _$$_REQUIRE(_dependencyMap[16], \"bip174/src/lib/converter/varint\").decode(buffer, offset);\n      offset += _$$_REQUIRE(_dependencyMap[16], \"bip174/src/lib/converter/varint\").decode.bytes;\n      return vi;\n    }\n    function readVarSlice() {\n      return readSlice(readVarInt());\n    }\n    function readVector() {\n      var count = readVarInt();\n      var vector = [];\n      for (var i = 0; i < count; i++) vector.push(readVarSlice());\n      return vector;\n    }\n    return readVector();\n  }\n  function sighashTypeToString(sighashType) {\n    var text = sighashType & _$$_REQUIRE(_dependencyMap[14], \"./transaction\").Transaction.SIGHASH_ANYONECANPAY ? 'SIGHASH_ANYONECANPAY | ' : '';\n    var sigMod = sighashType & 0x1f;\n    switch (sigMod) {\n      case _$$_REQUIRE(_dependencyMap[14], \"./transaction\").Transaction.SIGHASH_ALL:\n        text += 'SIGHASH_ALL';\n        break;\n      case _$$_REQUIRE(_dependencyMap[14], \"./transaction\").Transaction.SIGHASH_SINGLE:\n        text += 'SIGHASH_SINGLE';\n        break;\n      case _$$_REQUIRE(_dependencyMap[14], \"./transaction\").Transaction.SIGHASH_NONE:\n        text += 'SIGHASH_NONE';\n        break;\n    }\n    return text;\n  }\n  function addNonWitnessTxCache(cache, input, inputIndex) {\n    cache.__NON_WITNESS_UTXO_BUF_CACHE[inputIndex] = input.nonWitnessUtxo;\n    var tx = _$$_REQUIRE(_dependencyMap[14], \"./transaction\").Transaction.fromBuffer(input.nonWitnessUtxo);\n    cache.__NON_WITNESS_UTXO_TX_CACHE[inputIndex] = tx;\n    var self = cache;\n    var selfIndex = inputIndex;\n    delete input.nonWitnessUtxo;\n    Object.defineProperty(input, 'nonWitnessUtxo', {\n      enumerable: true,\n      get: function get() {\n        var buf = self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex];\n        var txCache = self.__NON_WITNESS_UTXO_TX_CACHE[selfIndex];\n        if (buf !== undefined) {\n          return buf;\n        } else {\n          var newBuf = txCache.toBuffer();\n          self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = newBuf;\n          return newBuf;\n        }\n      },\n      set: function set(data) {\n        self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = data;\n      }\n    });\n  }\n  function inputFinalizeGetAmts(inputs, tx, cache, mustFinalize) {\n    var inputAmount = 0;\n    inputs.forEach(function (input, idx) {\n      if (mustFinalize && input.finalScriptSig) tx.ins[idx].script = input.finalScriptSig;\n      if (mustFinalize && input.finalScriptWitness) {\n        tx.ins[idx].witness = scriptWitnessToWitnessStack(input.finalScriptWitness);\n      }\n      if (input.witnessUtxo) {\n        inputAmount += input.witnessUtxo.value;\n      } else if (input.nonWitnessUtxo) {\n        var nwTx = nonWitnessUtxoTxFromCache(cache, input, idx);\n        var vout = tx.ins[idx].index;\n        var out = nwTx.outs[vout];\n        inputAmount += out.value;\n      }\n    });\n    var outputAmount = tx.outs.reduce(function (total, o) {\n      return total + o.value;\n    }, 0);\n    var fee = inputAmount - outputAmount;\n    if (fee < 0) {\n      throw new Error('Outputs are spending more than Inputs');\n    }\n    var bytes = tx.virtualSize();\n    cache.__FEE = fee;\n    cache.__EXTRACTED_TX = tx;\n    cache.__FEE_RATE = Math.floor(fee / bytes);\n  }\n  function nonWitnessUtxoTxFromCache(cache, input, inputIndex) {\n    var c = cache.__NON_WITNESS_UTXO_TX_CACHE;\n    if (!c[inputIndex]) {\n      addNonWitnessTxCache(cache, input, inputIndex);\n    }\n    return c[inputIndex];\n  }\n  function getScriptFromUtxo(inputIndex, input, cache) {\n    var _getScriptAndAmountFr2 = getScriptAndAmountFromUtxo(inputIndex, input, cache),\n      script = _getScriptAndAmountFr2.script;\n    return script;\n  }\n  function getScriptAndAmountFromUtxo(inputIndex, input, cache) {\n    if (input.witnessUtxo !== undefined) {\n      return {\n        script: input.witnessUtxo.script,\n        value: input.witnessUtxo.value\n      };\n    } else if (input.nonWitnessUtxo !== undefined) {\n      var nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(cache, input, inputIndex);\n      var o = nonWitnessUtxoTx.outs[cache.__TX.ins[inputIndex].index];\n      return {\n        script: o.script,\n        value: o.value\n      };\n    } else {\n      throw new Error(\"Can't find pubkey in input without Utxo data\");\n    }\n  }\n  function pubkeyInInput(pubkey, input, inputIndex, cache) {\n    var script = getScriptFromUtxo(inputIndex, input, cache);\n    var _getMeaningfulScript2 = getMeaningfulScript(script, inputIndex, 'input', input.redeemScript, input.witnessScript),\n      meaningfulScript = _getMeaningfulScript2.meaningfulScript;\n    return (0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").pubkeyInScript)(pubkey, meaningfulScript);\n  }\n  function pubkeyInOutput(pubkey, output, outputIndex, cache) {\n    var script = cache.__TX.outs[outputIndex].script;\n    var _getMeaningfulScript3 = getMeaningfulScript(script, outputIndex, 'output', output.redeemScript, output.witnessScript),\n      meaningfulScript = _getMeaningfulScript3.meaningfulScript;\n    return (0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").pubkeyInScript)(pubkey, meaningfulScript);\n  }\n  function redeemFromFinalScriptSig(finalScript) {\n    if (!finalScript) return;\n    var decomp = _$$_REQUIRE(_dependencyMap[13], \"./script\").decompile(finalScript);\n    if (!decomp) return;\n    var lastItem = decomp[decomp.length - 1];\n    if (!Buffer.isBuffer(lastItem) || isPubkeyLike(lastItem) || isSigLike(lastItem)) return;\n    var sDecomp = _$$_REQUIRE(_dependencyMap[13], \"./script\").decompile(lastItem);\n    if (!sDecomp) return;\n    return lastItem;\n  }\n  function redeemFromFinalWitnessScript(finalScript) {\n    if (!finalScript) return;\n    var decomp = scriptWitnessToWitnessStack(finalScript);\n    var lastItem = decomp[decomp.length - 1];\n    if (isPubkeyLike(lastItem)) return;\n    var sDecomp = _$$_REQUIRE(_dependencyMap[13], \"./script\").decompile(lastItem);\n    if (!sDecomp) return;\n    return lastItem;\n  }\n  function compressPubkey(pubkey) {\n    if (pubkey.length === 65) {\n      var parity = pubkey[64] & 1;\n      var newKey = pubkey.slice(0, 33);\n      newKey[0] = 2 | parity;\n      return newKey;\n    }\n    return pubkey.slice();\n  }\n  function isPubkeyLike(buf) {\n    return buf.length === 33 && _$$_REQUIRE(_dependencyMap[13], \"./script\").isCanonicalPubKey(buf);\n  }\n  function isSigLike(buf) {\n    return _$$_REQUIRE(_dependencyMap[13], \"./script\").isCanonicalScriptSignature(buf);\n  }\n  function getMeaningfulScript(script, index, ioType, redeemScript, witnessScript) {\n    var isP2SH = (0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").isP2SHScript)(script);\n    var isP2SHP2WSH = isP2SH && redeemScript && (0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").isP2WSHScript)(redeemScript);\n    var isP2WSH = (0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").isP2WSHScript)(script);\n    if (isP2SH && redeemScript === undefined) throw new Error('scriptPubkey is P2SH but redeemScript missing');\n    if ((isP2WSH || isP2SHP2WSH) && witnessScript === undefined) throw new Error('scriptPubkey or redeemScript is P2WSH but witnessScript missing');\n    var meaningfulScript;\n    if (isP2SHP2WSH) {\n      meaningfulScript = witnessScript;\n      checkRedeemScript(index, script, redeemScript, ioType);\n      checkWitnessScript(index, redeemScript, witnessScript, ioType);\n      checkInvalidP2WSH(meaningfulScript);\n    } else if (isP2WSH) {\n      meaningfulScript = witnessScript;\n      checkWitnessScript(index, script, witnessScript, ioType);\n      checkInvalidP2WSH(meaningfulScript);\n    } else if (isP2SH) {\n      meaningfulScript = redeemScript;\n      checkRedeemScript(index, script, redeemScript, ioType);\n    } else {\n      meaningfulScript = script;\n    }\n    return {\n      meaningfulScript: meaningfulScript,\n      type: isP2SHP2WSH ? 'p2sh-p2wsh' : isP2SH ? 'p2sh' : isP2WSH ? 'p2wsh' : 'raw'\n    };\n  }\n  function checkInvalidP2WSH(script) {\n    if ((0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").isP2WPKH)(script) || (0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").isP2SHScript)(script)) {\n      throw new Error('P2WPKH or P2SH can not be contained within P2WSH');\n    }\n  }\n  function classifyScript(script) {\n    if ((0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").isP2WPKH)(script)) return 'witnesspubkeyhash';\n    if ((0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").isP2PKH)(script)) return 'pubkeyhash';\n    if ((0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").isP2MS)(script)) return 'multisig';\n    if ((0, _$$_REQUIRE(_dependencyMap[12], \"./psbt/psbtutils\").isP2PK)(script)) return 'pubkey';\n    return 'nonstandard';\n  }\n  function range(n) {\n    return _toConsumableArray(Array(n).keys());\n  }\n});","lineCount":1559,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_asyncToGenerator"],[4,23,1,13],[4,26,1,13,"_$$_REQUIRE"],[4,37,1,13],[4,38,1,13,"_dependencyMap"],[4,52,1,13],[5,2,1,13],[5,6,1,13,"_slicedToArray"],[5,20,1,13],[5,23,1,13,"_$$_REQUIRE"],[5,34,1,13],[5,35,1,13,"_dependencyMap"],[5,49,1,13],[6,2,1,13],[6,6,1,13,"_toConsumableArray"],[6,24,1,13],[6,27,1,13,"_$$_REQUIRE"],[6,38,1,13],[6,39,1,13,"_dependencyMap"],[6,53,1,13],[7,2,1,13],[7,6,1,13,"_classCallCheck"],[7,21,1,13],[7,24,1,13,"_$$_REQUIRE"],[7,35,1,13],[7,36,1,13,"_dependencyMap"],[7,50,1,13],[8,2,1,13],[8,6,1,13,"_createClass"],[8,18,1,13],[8,21,1,13,"_$$_REQUIRE"],[8,32,1,13],[8,33,1,13,"_dependencyMap"],[8,47,1,13],[9,2,2,0,"Object"],[9,8,2,6],[9,9,2,7,"defineProperty"],[9,23,2,21],[9,24,2,22,"exports"],[9,31,2,29],[9,33,2,31],[9,45,2,43],[9,47,2,45],[10,4,2,47,"value"],[10,9,2,52],[10,11,2,54],[11,2,2,59],[11,3,2,60],[11,4,2,61],[12,2,3,0,"exports"],[12,9,3,7],[12,10,3,8,"Psbt"],[12,14,3,12],[12,17,3,15],[12,22,3,20],[12,23,3,21],[13,2,16,0],[14,0,17,0],[15,0,18,0],[16,2,19,0],[16,6,19,6,"DEFAULT_OPTS"],[16,18,19,18],[16,21,19,21],[17,4,20,2],[18,0,21,0],[19,0,22,0],[20,0,23,0],[21,4,24,2,"network"],[21,11,24,9],[21,13,24,11,"_$$_REQUIRE"],[21,24,24,11],[21,25,24,11,"_dependencyMap"],[21,39,24,11],[21,58,24,22,"bitcoin"],[21,65,24,29],[22,4,25,2],[23,0,26,0],[24,0,27,0],[25,0,28,0],[26,0,29,0],[27,4,30,2,"maximumFeeRate"],[27,18,30,16],[27,20,30,18],[27,24,30,22],[27,25,30,24],[28,2,31,0],[28,3,31,1],[29,2,32,0],[30,0,33,0],[31,0,34,0],[32,0,35,0],[33,0,36,0],[34,0,37,0],[35,0,38,0],[36,0,39,0],[37,0,40,0],[38,0,41,0],[39,0,42,0],[40,0,43,0],[41,0,44,0],[42,0,45,0],[43,0,46,0],[44,0,47,0],[45,0,48,0],[46,0,49,0],[47,0,50,0],[48,0,51,0],[49,0,52,0],[50,0,53,0],[51,0,54,0],[52,0,55,0],[53,0,56,0],[54,0,57,0],[55,0,58,0],[56,0,59,0],[57,0,60,0],[58,0,61,0],[59,0,62,0],[60,0,63,0],[61,0,64,0],[62,0,65,0],[63,0,66,0],[64,0,67,0],[65,0,68,0],[66,2,32,0],[66,6,69,6,"Psbt"],[66,10,69,10],[67,4,84,2],[67,13,84,2,"Psbt"],[67,18,84,2],[67,20,84,74],[68,6,84,74],[68,10,84,14,"opts"],[68,14,84,18],[68,17,84,18,"arguments"],[68,26,84,18],[68,27,84,18,"length"],[68,33,84,18],[68,41,84,18,"arguments"],[68,50,84,18],[68,58,84,18,"undefined"],[68,67,84,18],[68,70,84,18,"arguments"],[68,79,84,18],[68,85,84,21],[68,86,84,22],[68,87,84,23],[69,6,84,23],[69,10,84,25,"data"],[69,14,84,29],[69,17,84,29,"arguments"],[69,26,84,29],[69,27,84,29,"length"],[69,33,84,29],[69,41,84,29,"arguments"],[69,50,84,29],[69,58,84,29,"undefined"],[69,67,84,29],[69,70,84,29,"arguments"],[69,79,84,29],[69,85,84,32],[69,90,84,36,"_$$_REQUIRE"],[69,101,84,36],[69,102,84,36,"_dependencyMap"],[69,116,84,36],[69,131,84,45,"Psbt"],[69,135,84,49],[69,137,84,50],[69,141,84,54,"PsbtTransaction"],[69,156,84,69],[69,157,84,70],[69,158,84,71],[69,159,84,72],[70,6,84,72,"_classCallCheck"],[70,21,84,72],[70,28,84,72,"Psbt"],[70,32,84,72],[71,6,85,4],[71,10,85,8],[71,11,85,9,"data"],[71,15,85,13],[71,18,85,16,"data"],[71,22,85,20],[72,6,86,4],[73,6,87,4],[73,10,87,8],[73,11,87,9,"opts"],[73,15,87,13],[73,18,87,16,"Object"],[73,24,87,22],[73,25,87,23,"assign"],[73,31,87,29],[73,32,87,30],[73,33,87,31],[73,34,87,32],[73,36,87,34,"DEFAULT_OPTS"],[73,48,87,46],[73,50,87,48,"opts"],[73,54,87,52],[73,55,87,53],[74,6,88,4],[74,10,88,8],[74,11,88,9,"__CACHE"],[74,18,88,16],[74,21,88,19],[75,8,89,6,"__NON_WITNESS_UTXO_TX_CACHE"],[75,35,89,33],[75,37,89,35],[75,39,89,37],[76,8,90,6,"__NON_WITNESS_UTXO_BUF_CACHE"],[76,36,90,34],[76,38,90,36],[76,40,90,38],[77,8,91,6,"__TX_IN_CACHE"],[77,21,91,19],[77,23,91,21],[77,24,91,22],[77,25,91,23],[78,8,92,6,"__TX"],[78,12,92,10],[78,14,92,12],[78,18,92,16],[78,19,92,17,"data"],[78,23,92,21],[78,24,92,22,"globalMap"],[78,33,92,31],[78,34,92,32,"unsignedTx"],[78,44,92,42],[78,45,92,43,"tx"],[78,47,92,45],[79,8,93,6],[80,8,94,6],[81,8,95,6],[82,8,96,6],[83,8,97,6],[84,8,98,6],[85,8,99,6],[86,8,100,6],[87,8,101,6,"__UNSAFE_SIGN_NONSEGWIT"],[87,31,101,29],[87,33,101,31],[88,6,102,4],[88,7,102,5],[89,6,103,4],[89,10,103,8],[89,14,103,12],[89,15,103,13,"data"],[89,19,103,17],[89,20,103,18,"inputs"],[89,26,103,24],[89,27,103,25,"length"],[89,33,103,31],[89,38,103,36],[89,39,103,37],[89,41,103,39],[89,45,103,43],[89,46,103,44,"setVersion"],[89,56,103,54],[89,57,103,55],[89,58,103,56],[89,59,103,57],[90,6,104,4],[91,6,105,4],[91,10,105,10,"dpew"],[91,14,105,14],[91,17,105,17],[91,26,105,10,"dpew"],[91,30,105,14,"dpew"],[91,31,105,18,"obj"],[91,34,105,21],[91,36,105,23,"attr"],[91,40,105,27],[91,42,105,29,"enumerable"],[91,52,105,39],[91,54,105,41,"writable"],[91,62,105,49],[92,8,105,49],[92,15,106,6,"Object"],[92,21,106,12],[92,22,106,13,"defineProperty"],[92,36,106,27],[92,37,106,28,"obj"],[92,40,106,31],[92,42,106,33,"attr"],[92,46,106,37],[92,48,106,39],[93,10,107,8,"enumerable"],[93,20,107,18],[93,22,107,8,"enumerable"],[93,32,107,18],[94,10,108,8,"writable"],[94,18,108,16],[94,20,108,8,"writable"],[95,8,109,6],[95,9,109,7],[95,10,109,8],[96,6,109,8],[97,6,110,4,"dpew"],[97,10,110,8],[97,11,110,9],[97,15,110,13],[97,17,110,15],[97,26,110,24],[97,28,110,26],[97,33,110,31],[97,35,110,33],[97,39,110,37],[97,40,110,38],[98,6,111,4,"dpew"],[98,10,111,8],[98,11,111,9],[98,15,111,13],[98,17,111,15],[98,23,111,21],[98,25,111,23],[98,30,111,28],[98,32,111,30],[98,36,111,34],[98,37,111,35],[99,4,112,2],[100,4,112,3],[100,11,112,3,"_createClass"],[100,23,112,3],[100,24,112,3,"Psbt"],[100,28,112,3],[101,6,112,3,"key"],[101,9,112,3],[102,6,112,3,"get"],[102,9,112,3],[102,11,113,2],[102,20,113,2,"get"],[102,24,113,2],[102,26,113,19],[103,8,114,4],[103,15,114,11],[103,19,114,15],[103,20,114,16,"data"],[103,24,114,20],[103,25,114,21,"inputs"],[103,31,114,27],[103,32,114,28,"length"],[103,38,114,34],[104,6,115,2],[105,4,115,3],[106,6,115,3,"key"],[106,9,115,3],[107,6,115,3,"get"],[107,9,115,3],[107,11,116,2],[107,20,116,2,"get"],[107,24,116,2],[107,26,116,16],[108,8,117,4],[108,15,117,11],[108,19,117,15],[108,20,117,16,"__CACHE"],[108,27,117,23],[108,28,117,24,"__TX"],[108,32,117,28],[108,33,117,29,"version"],[108,40,117,36],[109,6,118,2],[109,7,118,3],[110,6,118,3,"set"],[110,9,118,3],[110,11,119,2],[110,20,119,2,"set"],[110,24,119,14,"version"],[110,31,119,21],[110,33,119,23],[111,8,120,4],[111,12,120,8],[111,13,120,9,"setVersion"],[111,23,120,19],[111,24,120,20,"version"],[111,31,120,27],[111,32,120,28],[112,6,121,2],[113,4,121,3],[114,6,121,3,"key"],[114,9,121,3],[115,6,121,3,"get"],[115,9,121,3],[115,11,122,2],[115,20,122,2,"get"],[115,24,122,2],[115,26,122,17],[116,8,123,4],[116,15,123,11],[116,19,123,15],[116,20,123,16,"__CACHE"],[116,27,123,23],[116,28,123,24,"__TX"],[116,32,123,28],[116,33,123,29,"locktime"],[116,41,123,37],[117,6,124,2],[117,7,124,3],[118,6,124,3,"set"],[118,9,124,3],[118,11,125,2],[118,20,125,2,"set"],[118,24,125,15,"locktime"],[118,32,125,23],[118,34,125,25],[119,8,126,4],[119,12,126,8],[119,13,126,9,"setLocktime"],[119,24,126,20],[119,25,126,21,"locktime"],[119,33,126,29],[119,34,126,30],[120,6,127,2],[121,4,127,3],[122,6,127,3,"key"],[122,9,127,3],[123,6,127,3,"get"],[123,9,127,3],[123,11,128,2],[123,20,128,2,"get"],[123,24,128,2],[123,26,128,17],[124,8,129,4],[124,15,129,11],[124,19,129,15],[124,20,129,16,"__CACHE"],[124,27,129,23],[124,28,129,24,"__TX"],[124,32,129,28],[124,33,129,29,"ins"],[124,36,129,32],[124,37,129,33,"map"],[124,40,129,36],[124,41,129,37],[124,51,129,37,"input"],[124,56,129,42],[125,10,129,42],[125,17,129,47],[126,12,130,6,"hash"],[126,16,130,10],[126,18,130,12],[126,19,130,13],[126,20,130,14],[126,22,130,16,"_$$_REQUIRE"],[126,33,130,16],[126,34,130,16,"_dependencyMap"],[126,48,130,16],[126,70,130,30,"cloneBuffer"],[126,81,130,41],[126,83,130,43,"input"],[126,88,130,48],[126,89,130,49,"hash"],[126,93,130,53],[126,94,130,54],[127,12,131,6,"index"],[127,17,131,11],[127,19,131,13,"input"],[127,24,131,18],[127,25,131,19,"index"],[127,30,131,24],[128,12,132,6,"sequence"],[128,20,132,14],[128,22,132,16,"input"],[128,27,132,21],[128,28,132,22,"sequence"],[129,10,133,4],[129,11,133,5],[130,8,133,5],[130,9,133,6],[130,10,133,7],[131,6,134,2],[132,4,134,3],[133,6,134,3,"key"],[133,9,134,3],[134,6,134,3,"get"],[134,9,134,3],[134,11,135,2],[134,20,135,2,"get"],[134,24,135,2],[134,26,135,18],[135,8,135,18],[135,12,135,18,"_this"],[135,17,135,18],[136,8,136,4],[136,15,136,11],[136,19,136,15],[136,20,136,16,"__CACHE"],[136,27,136,23],[136,28,136,24,"__TX"],[136,32,136,28],[136,33,136,29,"outs"],[136,37,136,33],[136,38,136,34,"map"],[136,41,136,37],[136,42,136,38],[136,52,136,38,"output"],[136,58,136,44],[136,60,136,48],[137,10,137,6],[137,14,137,10,"address"],[137,21,137,17],[138,10,138,6],[138,14,138,10],[139,12,139,8,"address"],[139,19,139,15],[139,22,139,18],[139,23,139,19],[139,24,139,20],[139,26,139,22,"_$$_REQUIRE"],[139,37,139,22],[139,38,139,22,"_dependencyMap"],[139,52,139,22],[139,70,139,32,"fromOutputScript"],[139,86,139,48],[139,88,140,10,"output"],[139,94,140,16],[139,95,140,17,"script"],[139,101,140,23],[139,103,141,10,"_this"],[139,108,141,14],[139,109,141,15,"opts"],[139,113,141,19],[139,114,141,20,"network"],[139,121,142,8],[139,122,142,9],[140,10,143,6],[140,11,143,7],[140,12,143,8],[140,19,143,15,"_"],[140,20,143,16],[140,22,143,18],[140,23,143,19],[141,10,144,6],[141,17,144,13],[142,12,145,8,"script"],[142,18,145,14],[142,20,145,16],[142,21,145,17],[142,22,145,18],[142,24,145,20,"_$$_REQUIRE"],[142,35,145,20],[142,36,145,20,"_dependencyMap"],[142,50,145,20],[142,72,145,34,"cloneBuffer"],[142,83,145,45],[142,85,145,47,"output"],[142,91,145,53],[142,92,145,54,"script"],[142,98,145,60],[142,99,145,61],[143,12,146,8,"value"],[143,17,146,13],[143,19,146,15,"output"],[143,25,146,21],[143,26,146,22,"value"],[143,31,146,27],[144,12,147,8,"address"],[144,19,147,15],[144,21,147,8,"address"],[145,10,148,6],[145,11,148,7],[146,8,149,4],[146,9,149,5],[146,10,149,6],[147,6,150,2],[148,4,150,3],[149,6,150,3,"key"],[149,9,150,3],[150,6,150,3,"value"],[150,11,150,3],[150,13,151,2],[150,22,151,2,"combine"],[150,29,151,9,"combine"],[150,30,151,9],[150,32,151,20],[151,8,151,20],[151,12,151,20,"_this$data"],[151,22,151,20],[152,8,151,20],[152,17,151,20,"_len"],[152,21,151,20],[152,24,151,20,"arguments"],[152,33,151,20],[152,34,151,20,"length"],[152,40,151,20],[152,42,151,13,"those"],[152,47,151,18],[152,54,151,18,"Array"],[152,59,151,18],[152,60,151,18,"_len"],[152,64,151,18],[152,67,151,18,"_key"],[152,71,151,18],[152,77,151,18,"_key"],[152,81,151,18],[152,84,151,18,"_len"],[152,88,151,18],[152,90,151,18,"_key"],[152,94,151,18],[153,10,151,13,"those"],[153,15,151,18],[153,16,151,18,"_key"],[153,20,151,18],[153,24,151,18,"arguments"],[153,33,151,18],[153,34,151,18,"_key"],[153,38,151,18],[154,8,151,18],[155,8,152,4],[155,9,152,4,"_this$data"],[155,19,152,4],[155,26,152,8],[155,27,152,9,"data"],[155,31,152,13],[155,33,152,14,"combine"],[155,40,152,21],[155,41,152,21,"apply"],[155,46,152,21],[155,47,152,21,"_this$data"],[155,57,152,21],[155,59,152,21,"_toConsumableArray"],[155,77,152,21],[155,78,152,25,"those"],[155,83,152,30],[155,84,152,31,"map"],[155,87,152,34],[155,88,152,35],[155,98,152,35,"o"],[155,99,152,36],[156,10,152,36],[156,17,152,40,"o"],[156,18,152,41],[156,19,152,42,"data"],[156,23,152,46],[157,8,152,46],[157,10,152,47],[157,12,152,48],[158,8,153,4],[158,15,153,11],[158,19,153,15],[159,6,154,2],[160,4,154,3],[161,6,154,3,"key"],[161,9,154,3],[162,6,154,3,"value"],[162,11,154,3],[162,13,155,2],[162,22,155,2,"clone"],[162,27,155,7,"clone"],[162,28,155,7],[162,30,155,10],[163,8,156,4],[164,8,157,4],[164,12,157,10,"res"],[164,15,157,13],[164,18,157,16,"Psbt"],[164,22,157,20],[164,23,157,21,"fromBuffer"],[164,33,157,31],[164,34,157,32],[164,38,157,36],[164,39,157,37,"data"],[164,43,157,41],[164,44,157,42,"toBuffer"],[164,52,157,50],[164,53,157,51],[164,54,157,52],[164,55,157,53],[165,8,158,4,"res"],[165,11,158,7],[165,12,158,8,"opts"],[165,16,158,12],[165,19,158,15,"JSON"],[165,23,158,19],[165,24,158,20,"parse"],[165,29,158,25],[165,30,158,26,"JSON"],[165,34,158,30],[165,35,158,31,"stringify"],[165,44,158,40],[165,45,158,41],[165,49,158,45],[165,50,158,46,"opts"],[165,54,158,50],[165,55,158,51],[165,56,158,52],[166,8,159,4],[166,15,159,11,"res"],[166,18,159,14],[167,6,160,2],[168,4,160,3],[169,6,160,3,"key"],[169,9,160,3],[170,6,160,3,"value"],[170,11,160,3],[170,13,161,2],[170,22,161,2,"setMaximumFeeRate"],[170,39,161,19,"setMaximumFeeRate"],[170,40,161,20,"satoshiPerByte"],[170,54,161,34],[170,56,161,36],[171,8,162,4,"check32Bit"],[171,18,162,14],[171,19,162,15,"satoshiPerByte"],[171,33,162,29],[171,34,162,30],[171,35,162,31],[171,36,162,32],[172,8,163,4],[172,12,163,8],[172,13,163,9,"opts"],[172,17,163,13],[172,18,163,14,"maximumFeeRate"],[172,32,163,28],[172,35,163,31,"satoshiPerByte"],[172,49,163,45],[173,6,164,2],[174,4,164,3],[175,6,164,3,"key"],[175,9,164,3],[176,6,164,3,"value"],[176,11,164,3],[176,13,165,2],[176,22,165,2,"setVersion"],[176,32,165,12,"setVersion"],[176,33,165,13,"version"],[176,40,165,20],[176,42,165,22],[177,8,166,4,"check32Bit"],[177,18,166,14],[177,19,166,15,"version"],[177,26,166,22],[177,27,166,23],[178,8,167,4,"checkInputsForPartialSig"],[178,32,167,28],[178,33,167,29],[178,37,167,33],[178,38,167,34,"data"],[178,42,167,38],[178,43,167,39,"inputs"],[178,49,167,45],[178,51,167,47],[178,63,167,59],[178,64,167,60],[179,8,168,4],[179,12,168,10,"c"],[179,13,168,11],[179,16,168,14],[179,20,168,18],[179,21,168,19,"__CACHE"],[179,28,168,26],[180,8,169,4,"c"],[180,9,169,5],[180,10,169,6,"__TX"],[180,14,169,10],[180,15,169,11,"version"],[180,22,169,18],[180,25,169,21,"version"],[180,32,169,28],[181,8,170,4,"c"],[181,9,170,5],[181,10,170,6,"__EXTRACTED_TX"],[181,24,170,20],[181,27,170,23,"undefined"],[181,36,170,32],[182,8,171,4],[182,15,171,11],[182,19,171,15],[183,6,172,2],[184,4,172,3],[185,6,172,3,"key"],[185,9,172,3],[186,6,172,3,"value"],[186,11,172,3],[186,13,173,2],[186,22,173,2,"setLocktime"],[186,33,173,13,"setLocktime"],[186,34,173,14,"locktime"],[186,42,173,22],[186,44,173,24],[187,8,174,4,"check32Bit"],[187,18,174,14],[187,19,174,15,"locktime"],[187,27,174,23],[187,28,174,24],[188,8,175,4,"checkInputsForPartialSig"],[188,32,175,28],[188,33,175,29],[188,37,175,33],[188,38,175,34,"data"],[188,42,175,38],[188,43,175,39,"inputs"],[188,49,175,45],[188,51,175,47],[188,64,175,60],[188,65,175,61],[189,8,176,4],[189,12,176,10,"c"],[189,13,176,11],[189,16,176,14],[189,20,176,18],[189,21,176,19,"__CACHE"],[189,28,176,26],[190,8,177,4,"c"],[190,9,177,5],[190,10,177,6,"__TX"],[190,14,177,10],[190,15,177,11,"locktime"],[190,23,177,19],[190,26,177,22,"locktime"],[190,34,177,30],[191,8,178,4,"c"],[191,9,178,5],[191,10,178,6,"__EXTRACTED_TX"],[191,24,178,20],[191,27,178,23,"undefined"],[191,36,178,32],[192,8,179,4],[192,15,179,11],[192,19,179,15],[193,6,180,2],[194,4,180,3],[195,6,180,3,"key"],[195,9,180,3],[196,6,180,3,"value"],[196,11,180,3],[196,13,181,2],[196,22,181,2,"setInputSequence"],[196,38,181,18,"setInputSequence"],[196,39,181,19,"inputIndex"],[196,49,181,29],[196,51,181,31,"sequence"],[196,59,181,39],[196,61,181,41],[197,8,182,4,"check32Bit"],[197,18,182,14],[197,19,182,15,"sequence"],[197,27,182,23],[197,28,182,24],[198,8,183,4,"checkInputsForPartialSig"],[198,32,183,28],[198,33,183,29],[198,37,183,33],[198,38,183,34,"data"],[198,42,183,38],[198,43,183,39,"inputs"],[198,49,183,45],[198,51,183,47],[198,69,183,65],[198,70,183,66],[199,8,184,4],[199,12,184,10,"c"],[199,13,184,11],[199,16,184,14],[199,20,184,18],[199,21,184,19,"__CACHE"],[199,28,184,26],[200,8,185,4],[200,12,185,8,"c"],[200,13,185,9],[200,14,185,10,"__TX"],[200,18,185,14],[200,19,185,15,"ins"],[200,22,185,18],[200,23,185,19,"length"],[200,29,185,25],[200,33,185,29,"inputIndex"],[200,43,185,39],[200,45,185,41],[201,10,186,6],[201,16,186,12],[201,20,186,16,"Error"],[201,25,186,21],[201,26,186,22],[201,48,186,44],[201,49,186,45],[202,8,187,4],[203,8,188,4,"c"],[203,9,188,5],[203,10,188,6,"__TX"],[203,14,188,10],[203,15,188,11,"ins"],[203,18,188,14],[203,19,188,15,"inputIndex"],[203,29,188,25],[203,30,188,26],[203,31,188,27,"sequence"],[203,39,188,35],[203,42,188,38,"sequence"],[203,50,188,46],[204,8,189,4,"c"],[204,9,189,5],[204,10,189,6,"__EXTRACTED_TX"],[204,24,189,20],[204,27,189,23,"undefined"],[204,36,189,32],[205,8,190,4],[205,15,190,11],[205,19,190,15],[206,6,191,2],[207,4,191,3],[208,6,191,3,"key"],[208,9,191,3],[209,6,191,3,"value"],[209,11,191,3],[209,13,192,2],[209,22,192,2,"addInputs"],[209,31,192,11,"addInputs"],[209,32,192,12,"inputDatas"],[209,42,192,22],[209,44,192,24],[210,8,192,24],[210,12,192,24,"_this2"],[210,18,192,24],[211,8,193,4,"inputDatas"],[211,18,193,14],[211,19,193,15,"forEach"],[211,26,193,22],[211,27,193,23],[211,37,193,23,"inputData"],[211,46,193,32],[212,10,193,32],[212,17,193,36,"_this2"],[212,23,193,40],[212,24,193,41,"addInput"],[212,32,193,49],[212,33,193,50,"inputData"],[212,42,193,59],[212,43,193,60],[213,8,193,60],[213,10,193,61],[214,8,194,4],[214,15,194,11],[214,19,194,15],[215,6,195,2],[216,4,195,3],[217,6,195,3,"key"],[217,9,195,3],[218,6,195,3,"value"],[218,11,195,3],[218,13,196,2],[218,22,196,2,"addInput"],[218,30,196,10,"addInput"],[218,31,196,11,"inputData"],[218,40,196,20],[218,42,196,22],[219,8,197,4],[219,12,198,6,"arguments"],[219,21,198,15],[219,22,198,16,"length"],[219,28,198,22],[219,31,198,25],[219,32,198,26],[219,36,199,6],[219,37,199,7,"inputData"],[219,46,199,16],[219,50,200,6,"inputData"],[219,59,200,15],[219,60,200,16,"hash"],[219,64,200,20],[219,69,200,25,"undefined"],[219,78,200,34],[219,82,201,6,"inputData"],[219,91,201,15],[219,92,201,16,"index"],[219,97,201,21],[219,102,201,26,"undefined"],[219,111,201,35],[219,113,202,6],[220,10,203,6],[220,16,203,12],[220,20,203,16,"Error"],[220,25,203,21],[220,26,204,8],[220,65,204,47],[220,68,205,10],[220,125,206,6],[220,126,206,7],[221,8,207,4],[222,8,208,4],[222,9,208,5],[222,10,208,6],[222,12,208,8,"_$$_REQUIRE"],[222,23,208,8],[222,24,208,8,"_dependencyMap"],[222,38,208,8],[222,60,208,17,"checkTaprootInputFields"],[222,83,208,40],[222,85,208,42,"inputData"],[222,94,208,51],[222,96,208,53,"inputData"],[222,105,208,62],[222,107,208,64],[222,117,208,74],[222,118,208,75],[223,8,209,4,"checkInputsForPartialSig"],[223,32,209,28],[223,33,209,29],[223,37,209,33],[223,38,209,34,"data"],[223,42,209,38],[223,43,209,39,"inputs"],[223,49,209,45],[223,51,209,47],[223,61,209,57],[223,62,209,58],[224,8,210,4],[224,12,210,8,"inputData"],[224,21,210,17],[224,22,210,18,"witnessScript"],[224,35,210,31],[224,37,210,33,"checkInvalidP2WSH"],[224,54,210,50],[224,55,210,51,"inputData"],[224,64,210,60],[224,65,210,61,"witnessScript"],[224,78,210,74],[224,79,210,75],[225,8,211,4],[225,12,211,10,"c"],[225,13,211,11],[225,16,211,14],[225,20,211,18],[225,21,211,19,"__CACHE"],[225,28,211,26],[226,8,212,4],[226,12,212,8],[226,13,212,9,"data"],[226,17,212,13],[226,18,212,14,"addInput"],[226,26,212,22],[226,27,212,23,"inputData"],[226,36,212,32],[226,37,212,33],[227,8,213,4],[227,12,213,10,"txIn"],[227,16,213,14],[227,19,213,17,"c"],[227,20,213,18],[227,21,213,19,"__TX"],[227,25,213,23],[227,26,213,24,"ins"],[227,29,213,27],[227,30,213,28,"c"],[227,31,213,29],[227,32,213,30,"__TX"],[227,36,213,34],[227,37,213,35,"ins"],[227,40,213,38],[227,41,213,39,"length"],[227,47,213,45],[227,50,213,48],[227,51,213,49],[227,52,213,50],[228,8,214,4,"checkTxInputCache"],[228,25,214,21],[228,26,214,22,"c"],[228,27,214,23],[228,29,214,25,"txIn"],[228,33,214,29],[228,34,214,30],[229,8,215,4],[229,12,215,10,"inputIndex"],[229,22,215,20],[229,25,215,23],[229,29,215,27],[229,30,215,28,"data"],[229,34,215,32],[229,35,215,33,"inputs"],[229,41,215,39],[229,42,215,40,"length"],[229,48,215,46],[229,51,215,49],[229,52,215,50],[230,8,216,4],[230,12,216,10,"input"],[230,17,216,15],[230,20,216,18],[230,24,216,22],[230,25,216,23,"data"],[230,29,216,27],[230,30,216,28,"inputs"],[230,36,216,34],[230,37,216,35,"inputIndex"],[230,47,216,45],[230,48,216,46],[231,8,217,4],[231,12,217,8,"input"],[231,17,217,13],[231,18,217,14,"nonWitnessUtxo"],[231,32,217,28],[231,34,217,30],[232,10,218,6,"addNonWitnessTxCache"],[232,30,218,26],[232,31,218,27],[232,35,218,31],[232,36,218,32,"__CACHE"],[232,43,218,39],[232,45,218,41,"input"],[232,50,218,46],[232,52,218,48,"inputIndex"],[232,62,218,58],[232,63,218,59],[233,8,219,4],[234,8,220,4,"c"],[234,9,220,5],[234,10,220,6,"__FEE"],[234,15,220,11],[234,18,220,14,"undefined"],[234,27,220,23],[235,8,221,4,"c"],[235,9,221,5],[235,10,221,6,"__FEE_RATE"],[235,20,221,16],[235,23,221,19,"undefined"],[235,32,221,28],[236,8,222,4,"c"],[236,9,222,5],[236,10,222,6,"__EXTRACTED_TX"],[236,24,222,20],[236,27,222,23,"undefined"],[236,36,222,32],[237,8,223,4],[237,15,223,11],[237,19,223,15],[238,6,224,2],[239,4,224,3],[240,6,224,3,"key"],[240,9,224,3],[241,6,224,3,"value"],[241,11,224,3],[241,13,225,2],[241,22,225,2,"addOutputs"],[241,32,225,12,"addOutputs"],[241,33,225,13,"outputDatas"],[241,44,225,24],[241,46,225,26],[242,8,225,26],[242,12,225,26,"_this3"],[242,18,225,26],[243,8,226,4,"outputDatas"],[243,19,226,15],[243,20,226,16,"forEach"],[243,27,226,23],[243,28,226,24],[243,38,226,24,"outputData"],[243,48,226,34],[244,10,226,34],[244,17,226,38,"_this3"],[244,23,226,42],[244,24,226,43,"addOutput"],[244,33,226,52],[244,34,226,53,"outputData"],[244,44,226,63],[244,45,226,64],[245,8,226,64],[245,10,226,65],[246,8,227,4],[246,15,227,11],[246,19,227,15],[247,6,228,2],[248,4,228,3],[249,6,228,3,"key"],[249,9,228,3],[250,6,228,3,"value"],[250,11,228,3],[250,13,229,2],[250,22,229,2,"addOutput"],[250,31,229,11,"addOutput"],[250,32,229,12,"outputData"],[250,42,229,22],[250,44,229,24],[251,8,230,4],[251,12,231,6,"arguments"],[251,21,231,15],[251,22,231,16,"length"],[251,28,231,22],[251,31,231,25],[251,32,231,26],[251,36,232,6],[251,37,232,7,"outputData"],[251,47,232,17],[251,51,233,6,"outputData"],[251,61,233,16],[251,62,233,17,"value"],[251,67,233,22],[251,72,233,27,"undefined"],[251,81,233,36],[251,85,234,7,"outputData"],[251,95,234,17],[251,96,234,18,"address"],[251,103,234,25],[251,108,234,30,"undefined"],[251,117,234,39],[251,121,234,43,"outputData"],[251,131,234,53],[251,132,234,54,"script"],[251,138,234,60],[251,143,234,65,"undefined"],[251,152,234,75],[251,154,235,6],[252,10,236,6],[252,16,236,12],[252,20,236,16,"Error"],[252,25,236,21],[252,26,237,8],[252,66,237,48],[252,69,238,10],[252,139,239,6],[252,140,239,7],[253,8,240,4],[254,8,241,4,"checkInputsForPartialSig"],[254,32,241,28],[254,33,241,29],[254,37,241,33],[254,38,241,34,"data"],[254,42,241,38],[254,43,241,39,"inputs"],[254,49,241,45],[254,51,241,47],[254,62,241,58],[254,63,241,59],[255,8,242,4],[255,12,242,4,"_outputData"],[255,23,242,4],[255,26,242,24,"outputData"],[255,36,242,34],[256,10,242,12,"address"],[256,17,242,19],[256,20,242,19,"_outputData"],[256,31,242,19],[256,32,242,12,"address"],[256,39,242,19],[257,8,243,4],[257,12,243,8],[257,19,243,15,"address"],[257,26,243,22],[257,31,243,27],[257,39,243,35],[257,41,243,37],[258,10,244,6],[258,14,244,14,"network"],[258,21,244,21],[258,24,244,26],[258,28,244,30],[258,29,244,31,"opts"],[258,33,244,35],[258,34,244,14,"network"],[258,41,244,21],[259,10,245,6],[259,14,245,12,"script"],[259,20,245,18],[259,23,245,21],[259,24,245,22],[259,25,245,23],[259,27,245,25,"_$$_REQUIRE"],[259,38,245,25],[259,39,245,25,"_dependencyMap"],[259,53,245,25],[259,71,245,35,"toOutputScript"],[259,85,245,49],[259,87,245,51,"address"],[259,94,245,58],[259,96,245,60,"network"],[259,103,245,67],[259,104,245,68],[260,10,246,6,"outputData"],[260,20,246,16],[260,23,246,19,"Object"],[260,29,246,25],[260,30,246,26,"assign"],[260,36,246,32],[260,37,246,33],[260,38,246,34],[260,39,246,35],[260,41,246,37,"outputData"],[260,51,246,47],[260,53,246,49],[261,12,246,51,"script"],[261,18,246,57],[261,20,246,51,"script"],[262,10,246,58],[262,11,246,59],[262,12,246,60],[263,8,247,4],[264,8,248,4],[264,9,248,5],[264,10,248,6],[264,12,248,8,"_$$_REQUIRE"],[264,23,248,8],[264,24,248,8,"_dependencyMap"],[264,38,248,8],[264,60,248,17,"checkTaprootOutputFields"],[264,84,248,41],[264,86,248,43,"outputData"],[264,96,248,53],[264,98,248,55,"outputData"],[264,108,248,65],[264,110,248,67],[264,121,248,78],[264,122,248,79],[265,8,249,4],[265,12,249,10,"c"],[265,13,249,11],[265,16,249,14],[265,20,249,18],[265,21,249,19,"__CACHE"],[265,28,249,26],[266,8,250,4],[266,12,250,8],[266,13,250,9,"data"],[266,17,250,13],[266,18,250,14,"addOutput"],[266,27,250,23],[266,28,250,24,"outputData"],[266,38,250,34],[266,39,250,35],[267,8,251,4,"c"],[267,9,251,5],[267,10,251,6,"__FEE"],[267,15,251,11],[267,18,251,14,"undefined"],[267,27,251,23],[268,8,252,4,"c"],[268,9,252,5],[268,10,252,6,"__FEE_RATE"],[268,20,252,16],[268,23,252,19,"undefined"],[268,32,252,28],[269,8,253,4,"c"],[269,9,253,5],[269,10,253,6,"__EXTRACTED_TX"],[269,24,253,20],[269,27,253,23,"undefined"],[269,36,253,32],[270,8,254,4],[270,15,254,11],[270,19,254,15],[271,6,255,2],[272,4,255,3],[273,6,255,3,"key"],[273,9,255,3],[274,6,255,3,"value"],[274,11,255,3],[274,13,256,2],[274,22,256,2,"extractTransaction"],[274,40,256,20,"extractTransaction"],[274,41,256,21,"disableFeeCheck"],[274,56,256,36],[274,58,256,38],[275,8,257,4],[275,12,257,8],[275,13,257,9],[275,17,257,13],[275,18,257,14,"data"],[275,22,257,18],[275,23,257,19,"inputs"],[275,29,257,25],[275,30,257,26,"every"],[275,35,257,31],[275,36,257,32,"isFinalized"],[275,47,257,43],[275,48,257,44],[275,50,257,46],[275,56,257,52],[275,60,257,56,"Error"],[275,65,257,61],[275,66,257,62],[275,81,257,77],[275,82,257,78],[276,8,258,4],[276,12,258,10,"c"],[276,13,258,11],[276,16,258,14],[276,20,258,18],[276,21,258,19,"__CACHE"],[276,28,258,26],[277,8,259,4],[277,12,259,8],[277,13,259,9,"disableFeeCheck"],[277,28,259,24],[277,30,259,26],[278,10,260,6,"checkFees"],[278,19,260,15],[278,20,260,16],[278,24,260,20],[278,26,260,22,"c"],[278,27,260,23],[278,29,260,25],[278,33,260,29],[278,34,260,30,"opts"],[278,38,260,34],[278,39,260,35],[279,8,261,4],[280,8,262,4],[280,12,262,8,"c"],[280,13,262,9],[280,14,262,10,"__EXTRACTED_TX"],[280,28,262,24],[280,30,262,26],[280,37,262,33,"c"],[280,38,262,34],[280,39,262,35,"__EXTRACTED_TX"],[280,53,262,49],[281,8,263,4],[281,12,263,10,"tx"],[281,14,263,12],[281,17,263,15,"c"],[281,18,263,16],[281,19,263,17,"__TX"],[281,23,263,21],[281,24,263,22,"clone"],[281,29,263,27],[281,30,263,28],[281,31,263,29],[282,8,264,4,"inputFinalizeGetAmts"],[282,28,264,24],[282,29,264,25],[282,33,264,29],[282,34,264,30,"data"],[282,38,264,34],[282,39,264,35,"inputs"],[282,45,264,41],[282,47,264,43,"tx"],[282,49,264,45],[282,51,264,47,"c"],[282,52,264,48],[282,54,264,50],[282,58,264,54],[282,59,264,55],[283,8,265,4],[283,15,265,11,"tx"],[283,17,265,13],[284,6,266,2],[285,4,266,3],[286,6,266,3,"key"],[286,9,266,3],[287,6,266,3,"value"],[287,11,266,3],[287,13,267,2],[287,22,267,2,"getFeeRate"],[287,32,267,12,"getFeeRate"],[287,33,267,12],[287,35,267,15],[288,8,268,4],[288,15,268,11,"getTxCacheValue"],[288,30,268,26],[288,31,269,6],[288,43,269,18],[288,45,270,6],[288,55,270,16],[288,57,271,6],[288,61,271,10],[288,62,271,11,"data"],[288,66,271,15],[288,67,271,16,"inputs"],[288,73,271,22],[288,75,272,6],[288,79,272,10],[288,80,272,11,"__CACHE"],[288,87,273,4],[288,88,273,5],[289,6,274,2],[290,4,274,3],[291,6,274,3,"key"],[291,9,274,3],[292,6,274,3,"value"],[292,11,274,3],[292,13,275,2],[292,22,275,2,"getFee"],[292,28,275,8,"getFee"],[292,29,275,8],[292,31,275,11],[293,8,276,4],[293,15,276,11,"getTxCacheValue"],[293,30,276,26],[293,31,276,27],[293,38,276,34],[293,40,276,36],[293,45,276,41],[293,47,276,43],[293,51,276,47],[293,52,276,48,"data"],[293,56,276,52],[293,57,276,53,"inputs"],[293,63,276,59],[293,65,276,61],[293,69,276,65],[293,70,276,66,"__CACHE"],[293,77,276,73],[293,78,276,74],[294,6,277,2],[295,4,277,3],[296,6,277,3,"key"],[296,9,277,3],[297,6,277,3,"value"],[297,11,277,3],[297,13,278,2],[297,22,278,2,"finalizeAllInputs"],[297,39,278,19,"finalizeAllInputs"],[297,40,278,19],[297,42,278,22],[298,8,278,22],[298,12,278,22,"_this4"],[298,18,278,22],[299,8,279,4],[299,9,279,5],[299,10,279,6],[299,12,279,8,"_$$_REQUIRE"],[299,23,279,8],[299,24,279,8,"_dependencyMap"],[299,38,279,8],[299,68,279,16,"checkForInput"],[299,81,279,29],[299,83,279,31],[299,87,279,35],[299,88,279,36,"data"],[299,92,279,40],[299,93,279,41,"inputs"],[299,99,279,47],[299,101,279,49],[299,102,279,50],[299,103,279,51],[299,104,279,52],[299,105,279,53],[300,8,280,4,"range"],[300,13,280,9],[300,14,280,10],[300,18,280,14],[300,19,280,15,"data"],[300,23,280,19],[300,24,280,20,"inputs"],[300,30,280,26],[300,31,280,27,"length"],[300,37,280,33],[300,38,280,34],[300,39,280,35,"forEach"],[300,46,280,42],[300,47,280,43],[300,57,280,43,"idx"],[300,60,280,46],[301,10,280,46],[301,17,280,50,"_this4"],[301,23,280,54],[301,24,280,55,"finalizeInput"],[301,37,280,68],[301,38,280,69,"idx"],[301,41,280,72],[301,42,280,73],[302,8,280,73],[302,10,280,74],[303,8,281,4],[303,15,281,11],[303,19,281,15],[304,6,282,2],[305,4,282,3],[306,6,282,3,"key"],[306,9,282,3],[307,6,282,3,"value"],[307,11,282,3],[307,13,283,2],[307,22,283,2,"finalizeInput"],[307,35,283,15,"finalizeInput"],[307,36,283,16,"inputIndex"],[307,46,283,26],[307,48,283,28,"finalScriptsFunc"],[307,64,283,44],[307,66,283,46],[308,8,284,4],[308,12,284,10,"input"],[308,17,284,15],[308,20,284,18],[308,21,284,19],[308,22,284,20],[308,24,284,22,"_$$_REQUIRE"],[308,35,284,22],[308,36,284,22,"_dependencyMap"],[308,50,284,22],[308,80,284,30,"checkForInput"],[308,93,284,43],[308,95,284,45],[308,99,284,49],[308,100,284,50,"data"],[308,104,284,54],[308,105,284,55,"inputs"],[308,111,284,61],[308,113,284,63,"inputIndex"],[308,123,284,73],[308,124,284,74],[309,8,285,4],[309,12,285,8],[309,13,285,9],[309,14,285,10],[309,16,285,12,"_$$_REQUIRE"],[309,27,285,12],[309,28,285,12,"_dependencyMap"],[309,42,285,12],[309,64,285,21,"isTaprootInput"],[309,78,285,35],[309,80,285,37,"input"],[309,85,285,42],[309,86,285,43],[309,88,286,6],[309,95,286,13],[309,99,286,17],[309,100,286,18,"_finalizeTaprootInput"],[309,121,286,39],[309,122,287,8,"inputIndex"],[309,132,287,18],[309,134,288,8,"input"],[309,139,288,13],[309,141,289,8,"undefined"],[309,150,289,17],[309,152,290,8,"finalScriptsFunc"],[309,168,291,6],[309,169,291,7],[310,8,292,4],[310,15,292,11],[310,19,292,15],[310,20,292,16,"_finalizeInput"],[310,34,292,30],[310,35,292,31,"inputIndex"],[310,45,292,41],[310,47,292,43,"input"],[310,52,292,48],[310,54,292,50,"finalScriptsFunc"],[310,70,292,66],[310,71,292,67],[311,6,293,2],[312,4,293,3],[313,6,293,3,"key"],[313,9,293,3],[314,6,293,3,"value"],[314,11,293,3],[314,13,294,2],[314,22,294,2,"finalizeTaprootInput"],[314,42,294,22,"finalizeTaprootInput"],[314,43,295,4,"inputIndex"],[314,53,295,14],[314,55,296,4,"tapLeafHashToFinalize"],[314,76,296,25],[314,78,298,4],[315,8,298,4],[315,12,297,4,"finalScriptsFunc"],[315,28,297,20],[315,31,297,20,"arguments"],[315,40,297,20],[315,41,297,20,"length"],[315,47,297,20],[315,55,297,20,"arguments"],[315,64,297,20],[315,72,297,20,"undefined"],[315,81,297,20],[315,84,297,20,"arguments"],[315,93,297,20],[315,99,297,23,"_$$_REQUIRE"],[315,110,297,23],[315,111,297,23,"_dependencyMap"],[315,125,297,23],[315,147,297,32,"tapScriptFinalizer"],[315,165,297,50],[316,8,299,4],[316,12,299,10,"input"],[316,17,299,15],[316,20,299,18],[316,21,299,19],[316,22,299,20],[316,24,299,22,"_$$_REQUIRE"],[316,35,299,22],[316,36,299,22,"_dependencyMap"],[316,50,299,22],[316,80,299,30,"checkForInput"],[316,93,299,43],[316,95,299,45],[316,99,299,49],[316,100,299,50,"data"],[316,104,299,54],[316,105,299,55,"inputs"],[316,111,299,61],[316,113,299,63,"inputIndex"],[316,123,299,73],[316,124,299,74],[317,8,300,4],[317,12,300,8],[317,13,300,9],[317,14,300,10],[317,16,300,12,"_$$_REQUIRE"],[317,27,300,12],[317,28,300,12,"_dependencyMap"],[317,42,300,12],[317,64,300,21,"isTaprootInput"],[317,78,300,35],[317,80,300,37,"input"],[317,85,300,42],[317,86,300,43],[317,88,301,6],[317,95,301,13],[317,99,301,17],[317,100,301,18,"_finalizeTaprootInput"],[317,121,301,39],[317,122,302,8,"inputIndex"],[317,132,302,18],[317,134,303,8,"input"],[317,139,303,13],[317,141,304,8,"tapLeafHashToFinalize"],[317,162,304,29],[317,164,305,8,"finalScriptsFunc"],[317,180,306,6],[317,181,306,7],[318,8,307,4],[318,14,307,10],[318,18,307,14,"Error"],[318,23,307,19],[318,24,307,20],[318,50,307,46,"inputIndex"],[318,60,307,56],[318,76,307,72],[318,77,307,73],[319,6,308,2],[320,4,308,3],[321,6,308,3,"key"],[321,9,308,3],[322,6,308,3,"value"],[322,11,308,3],[322,13,309,2],[322,22,309,2,"_finalizeInput"],[322,36,309,16,"_finalizeInput"],[322,37,309,17,"inputIndex"],[322,47,309,27],[322,49,309,29,"input"],[322,54,309,34],[322,56,309,72],[323,8,309,72],[323,12,309,36,"finalScriptsFunc"],[323,28,309,52],[323,31,309,52,"arguments"],[323,40,309,52],[323,41,309,52,"length"],[323,47,309,52],[323,55,309,52,"arguments"],[323,64,309,52],[323,72,309,52,"undefined"],[323,81,309,52],[323,84,309,52,"arguments"],[323,93,309,52],[323,99,309,55,"getFinalScripts"],[323,114,309,70],[324,8,310,4],[324,12,310,4,"_getScriptFromInput"],[324,31,310,4],[324,34,310,50,"getScriptFromInput"],[324,52,310,68],[324,53,311,6,"inputIndex"],[324,63,311,16],[324,65,312,6,"input"],[324,70,312,11],[324,72,313,6],[324,76,313,10],[324,77,313,11,"__CACHE"],[324,84,314,4],[324,85,314,5],[325,10,310,12,"script"],[325,16,310,18],[325,19,310,18,"_getScriptFromInput"],[325,38,310,18],[325,39,310,12,"script"],[325,45,310,18],[326,10,310,20,"isP2SH"],[326,16,310,26],[326,19,310,26,"_getScriptFromInput"],[326,38,310,26],[326,39,310,20,"isP2SH"],[326,45,310,26],[327,10,310,28,"isP2WSH"],[327,17,310,35],[327,20,310,35,"_getScriptFromInput"],[327,39,310,35],[327,40,310,28,"isP2WSH"],[327,47,310,35],[328,10,310,37,"isSegwit"],[328,18,310,45],[328,21,310,45,"_getScriptFromInput"],[328,40,310,45],[328,41,310,37,"isSegwit"],[328,49,310,45],[329,8,315,4],[329,12,315,8],[329,13,315,9,"script"],[329,19,315,15],[329,21,315,17],[329,27,315,23],[329,31,315,27,"Error"],[329,36,315,32],[329,37,315,33],[329,67,315,63,"inputIndex"],[329,77,315,73],[329,79,315,75],[329,80,315,76],[330,8,316,4,"checkPartialSigSighashes"],[330,32,316,28],[330,33,316,29,"input"],[330,38,316,34],[330,39,316,35],[331,8,317,4],[331,12,317,4,"_finalScriptsFunc"],[331,29,317,4],[331,32,317,51,"finalScriptsFunc"],[331,48,317,67],[331,49,318,6,"inputIndex"],[331,59,318,16],[331,61,319,6,"input"],[331,66,319,11],[331,68,320,6,"script"],[331,74,320,12],[331,76,321,6,"isSegwit"],[331,84,321,14],[331,86,322,6,"isP2SH"],[331,92,322,12],[331,94,323,6,"isP2WSH"],[331,101,324,4],[331,102,324,5],[332,10,317,12,"finalScriptSig"],[332,24,317,26],[332,27,317,26,"_finalScriptsFunc"],[332,44,317,26],[332,45,317,12,"finalScriptSig"],[332,59,317,26],[333,10,317,28,"finalScriptWitness"],[333,28,317,46],[333,31,317,46,"_finalScriptsFunc"],[333,48,317,46],[333,49,317,28,"finalScriptWitness"],[333,67,317,46],[334,8,325,4],[334,12,325,8,"finalScriptSig"],[334,26,325,22],[334,28,325,24],[334,32,325,28],[334,33,325,29,"data"],[334,37,325,33],[334,38,325,34,"updateInput"],[334,49,325,45],[334,50,325,46,"inputIndex"],[334,60,325,56],[334,62,325,58],[335,10,325,60,"finalScriptSig"],[335,24,325,74],[335,26,325,60,"finalScriptSig"],[336,8,325,75],[336,9,325,76],[336,10,325,77],[337,8,326,4],[337,12,326,8,"finalScriptWitness"],[337,30,326,26],[337,32,327,6],[337,36,327,10],[337,37,327,11,"data"],[337,41,327,15],[337,42,327,16,"updateInput"],[337,53,327,27],[337,54,327,28,"inputIndex"],[337,64,327,38],[337,66,327,40],[338,10,327,42,"finalScriptWitness"],[338,28,327,60],[338,30,327,42,"finalScriptWitness"],[339,8,327,61],[339,9,327,62],[339,10,327,63],[340,8,328,4],[340,12,328,8],[340,13,328,9,"finalScriptSig"],[340,27,328,23],[340,31,328,27],[340,32,328,28,"finalScriptWitness"],[340,50,328,46],[340,52,329,6],[340,58,329,12],[340,62,329,16,"Error"],[340,67,329,21],[340,68,329,22],[340,103,329,57,"inputIndex"],[340,113,329,67],[340,115,329,69],[340,116,329,70],[341,8,330,4],[341,12,330,8],[341,13,330,9,"data"],[341,17,330,13],[341,18,330,14,"clearFinalizedInput"],[341,37,330,33],[341,38,330,34,"inputIndex"],[341,48,330,44],[341,49,330,45],[342,8,331,4],[342,15,331,11],[342,19,331,15],[343,6,332,2],[344,4,332,3],[345,6,332,3,"key"],[345,9,332,3],[346,6,332,3,"value"],[346,11,332,3],[346,13,333,2],[346,22,333,2,"_finalizeTaprootInput"],[346,43,333,23,"_finalizeTaprootInput"],[346,44,334,4,"inputIndex"],[346,54,334,14],[346,56,335,4,"input"],[346,61,335,9],[346,63,336,4,"tapLeafHashToFinalize"],[346,84,336,25],[346,86,338,4],[347,8,338,4],[347,12,337,4,"finalScriptsFunc"],[347,28,337,20],[347,31,337,20,"arguments"],[347,40,337,20],[347,41,337,20,"length"],[347,47,337,20],[347,55,337,20,"arguments"],[347,64,337,20],[347,72,337,20,"undefined"],[347,81,337,20],[347,84,337,20,"arguments"],[347,93,337,20],[347,99,337,23,"_$$_REQUIRE"],[347,110,337,23],[347,111,337,23,"_dependencyMap"],[347,125,337,23],[347,147,337,32,"tapScriptFinalizer"],[347,165,337,50],[348,8,339,4],[348,12,339,8],[348,13,339,9,"input"],[348,18,339,14],[348,19,339,15,"witnessUtxo"],[348,30,339,26],[348,32,340,6],[348,38,340,12],[348,42,340,16,"Error"],[348,47,340,21],[348,48,341,8],[348,74,341,34,"inputIndex"],[348,84,341,44],[348,110,342,6],[348,111,342,7],[349,8,343,4],[350,8,344,4],[350,12,344,8,"input"],[350,17,344,13],[350,18,344,14,"tapKeySig"],[350,27,344,23],[350,29,344,25],[351,10,345,6],[351,14,345,12,"payment"],[351,21,345,19],[351,24,345,22,"_$$_REQUIRE"],[351,35,345,22],[351,36,345,22,"_dependencyMap"],[351,50,345,22],[351,70,345,31,"p2tr"],[351,74,345,35],[351,75,345,36],[352,12,346,8,"output"],[352,18,346,14],[352,20,346,16,"input"],[352,25,346,21],[352,26,346,22,"witnessUtxo"],[352,37,346,33],[352,38,346,34,"script"],[352,44,346,40],[353,12,347,8,"signature"],[353,21,347,17],[353,23,347,19,"input"],[353,28,347,24],[353,29,347,25,"tapKeySig"],[354,10,348,6],[354,11,348,7],[354,12,348,8],[355,10,349,6],[355,14,349,12,"finalScriptWitness"],[355,32,349,30],[355,35,349,33],[355,36,349,34],[355,37,349,35],[355,39,349,37,"_$$_REQUIRE"],[355,50,349,37],[355,51,349,37,"_dependencyMap"],[355,65,349,37],[355,91,349,49,"witnessStackToScriptWitness"],[355,118,349,76],[355,120,350,8,"payment"],[355,127,350,15],[355,128,350,16,"witness"],[355,135,351,6],[355,136,351,7],[356,10,352,6],[356,14,352,10],[356,15,352,11,"data"],[356,19,352,15],[356,20,352,16,"updateInput"],[356,31,352,27],[356,32,352,28,"inputIndex"],[356,42,352,38],[356,44,352,40],[357,12,352,42,"finalScriptWitness"],[357,30,352,60],[357,32,352,42,"finalScriptWitness"],[358,10,352,61],[358,11,352,62],[358,12,352,63],[359,8,353,4],[359,9,353,5],[359,15,353,11],[360,10,354,6],[360,14,354,6,"_finalScriptsFunc2"],[360,32,354,6],[360,35,354,37,"finalScriptsFunc"],[360,51,354,53],[360,52,355,8,"inputIndex"],[360,62,355,18],[360,64,356,8,"input"],[360,69,356,13],[360,71,357,8,"tapLeafHashToFinalize"],[360,92,358,6],[360,93,358,7],[361,12,354,14,"finalScriptWitness"],[361,31,354,32],[361,34,354,32,"_finalScriptsFunc2"],[361,52,354,32],[361,53,354,14,"finalScriptWitness"],[361,71,354,32],[362,10,359,6],[362,14,359,10],[362,15,359,11,"data"],[362,19,359,15],[362,20,359,16,"updateInput"],[362,31,359,27],[362,32,359,28,"inputIndex"],[362,42,359,38],[362,44,359,40],[363,12,359,42,"finalScriptWitness"],[363,30,359,60],[363,32,359,42,"finalScriptWitness"],[364,10,359,61],[364,11,359,62],[364,12,359,63],[365,8,360,4],[366,8,361,4],[366,12,361,8],[366,13,361,9,"data"],[366,17,361,13],[366,18,361,14,"clearFinalizedInput"],[366,37,361,33],[366,38,361,34,"inputIndex"],[366,48,361,44],[366,49,361,45],[367,8,362,4],[367,15,362,11],[367,19,362,15],[368,6,363,2],[369,4,363,3],[370,6,363,3,"key"],[370,9,363,3],[371,6,363,3,"value"],[371,11,363,3],[371,13,364,2],[371,22,364,2,"getInputType"],[371,34,364,14,"getInputType"],[371,35,364,15,"inputIndex"],[371,45,364,25],[371,47,364,27],[372,8,365,4],[372,12,365,10,"input"],[372,17,365,15],[372,20,365,18],[372,21,365,19],[372,22,365,20],[372,24,365,22,"_$$_REQUIRE"],[372,35,365,22],[372,36,365,22,"_dependencyMap"],[372,50,365,22],[372,80,365,30,"checkForInput"],[372,93,365,43],[372,95,365,45],[372,99,365,49],[372,100,365,50,"data"],[372,104,365,54],[372,105,365,55,"inputs"],[372,111,365,61],[372,113,365,63,"inputIndex"],[372,123,365,73],[372,124,365,74],[373,8,366,4],[373,12,366,10,"script"],[373,18,366,16],[373,21,366,19,"getScriptFromUtxo"],[373,38,366,36],[373,39,366,37,"inputIndex"],[373,49,366,47],[373,51,366,49,"input"],[373,56,366,54],[373,58,366,56],[373,62,366,60],[373,63,366,61,"__CACHE"],[373,70,366,68],[373,71,366,69],[374,8,367,4],[374,12,367,10,"result"],[374,18,367,16],[374,21,367,19,"getMeaningfulScript"],[374,40,367,38],[374,41,368,6,"script"],[374,47,368,12],[374,49,369,6,"inputIndex"],[374,59,369,16],[374,61,370,6],[374,68,370,13],[374,70,371,6,"input"],[374,75,371,11],[374,76,371,12,"redeemScript"],[374,88,371,24],[374,92,371,28,"redeemFromFinalScriptSig"],[374,116,371,52],[374,117,371,53,"input"],[374,122,371,58],[374,123,371,59,"finalScriptSig"],[374,137,371,73],[374,138,371,74],[374,140,372,6,"input"],[374,145,372,11],[374,146,372,12,"witnessScript"],[374,159,372,25],[374,163,373,8,"redeemFromFinalWitnessScript"],[374,191,373,36],[374,192,373,37,"input"],[374,197,373,42],[374,198,373,43,"finalScriptWitness"],[374,216,373,61],[374,217,374,4],[374,218,374,5],[375,8,375,4],[375,12,375,10,"type"],[375,16,375,14],[375,19,375,17,"result"],[375,25,375,23],[375,26,375,24,"type"],[375,30,375,28],[375,35,375,33],[375,40,375,38],[375,43,375,41],[375,45,375,43],[375,48,375,46,"result"],[375,54,375,52],[375,55,375,53,"type"],[375,59,375,57],[375,62,375,60],[375,65,375,63],[376,8,376,4],[376,12,376,10,"mainType"],[376,20,376,18],[376,23,376,21,"classifyScript"],[376,37,376,35],[376,38,376,36,"result"],[376,44,376,42],[376,45,376,43,"meaningfulScript"],[376,61,376,59],[376,62,376,60],[377,8,377,4],[377,15,377,11,"type"],[377,19,377,15],[377,22,377,18,"mainType"],[377,30,377,26],[378,6,378,2],[379,4,378,3],[380,6,378,3,"key"],[380,9,378,3],[381,6,378,3,"value"],[381,11,378,3],[381,13,379,2],[381,22,379,2,"inputHasPubkey"],[381,36,379,16,"inputHasPubkey"],[381,37,379,17,"inputIndex"],[381,47,379,27],[381,49,379,29,"pubkey"],[381,55,379,35],[381,57,379,37],[382,8,380,4],[382,12,380,10,"input"],[382,17,380,15],[382,20,380,18],[382,21,380,19],[382,22,380,20],[382,24,380,22,"_$$_REQUIRE"],[382,35,380,22],[382,36,380,22,"_dependencyMap"],[382,50,380,22],[382,80,380,30,"checkForInput"],[382,93,380,43],[382,95,380,45],[382,99,380,49],[382,100,380,50,"data"],[382,104,380,54],[382,105,380,55,"inputs"],[382,111,380,61],[382,113,380,63,"inputIndex"],[382,123,380,73],[382,124,380,74],[383,8,381,4],[383,15,381,11,"pubkeyInInput"],[383,28,381,24],[383,29,381,25,"pubkey"],[383,35,381,31],[383,37,381,33,"input"],[383,42,381,38],[383,44,381,40,"inputIndex"],[383,54,381,50],[383,56,381,52],[383,60,381,56],[383,61,381,57,"__CACHE"],[383,68,381,64],[383,69,381,65],[384,6,382,2],[385,4,382,3],[386,6,382,3,"key"],[386,9,382,3],[387,6,382,3,"value"],[387,11,382,3],[387,13,383,2],[387,22,383,2,"inputHasHDKey"],[387,35,383,15,"inputHasHDKey"],[387,36,383,16,"inputIndex"],[387,46,383,26],[387,48,383,28,"root"],[387,52,383,32],[387,54,383,34],[388,8,384,4],[388,12,384,10,"input"],[388,17,384,15],[388,20,384,18],[388,21,384,19],[388,22,384,20],[388,24,384,22,"_$$_REQUIRE"],[388,35,384,22],[388,36,384,22,"_dependencyMap"],[388,50,384,22],[388,80,384,30,"checkForInput"],[388,93,384,43],[388,95,384,45],[388,99,384,49],[388,100,384,50,"data"],[388,104,384,54],[388,105,384,55,"inputs"],[388,111,384,61],[388,113,384,63,"inputIndex"],[388,123,384,73],[388,124,384,74],[389,8,385,4],[389,12,385,10,"derivationIsMine"],[389,28,385,26],[389,31,385,29,"bip32DerivationIsMine"],[389,52,385,50],[389,53,385,51,"root"],[389,57,385,55],[389,58,385,56],[390,8,386,4],[390,15,387,6],[390,16,387,7],[390,17,387,8,"input"],[390,22,387,13],[390,23,387,14,"bip32Derivation"],[390,38,387,29],[390,42,387,33,"input"],[390,47,387,38],[390,48,387,39,"bip32Derivation"],[390,63,387,54],[390,64,387,55,"some"],[390,68,387,59],[390,69,387,60,"derivationIsMine"],[390,85,387,76],[390,86,387,77],[391,6,389,2],[392,4,389,3],[393,6,389,3,"key"],[393,9,389,3],[394,6,389,3,"value"],[394,11,389,3],[394,13,390,2],[394,22,390,2,"outputHasPubkey"],[394,37,390,17,"outputHasPubkey"],[394,38,390,18,"outputIndex"],[394,49,390,29],[394,51,390,31,"pubkey"],[394,57,390,37],[394,59,390,39],[395,8,391,4],[395,12,391,10,"output"],[395,18,391,16],[395,21,391,19],[395,22,391,20],[395,23,391,21],[395,25,391,23,"_$$_REQUIRE"],[395,36,391,23],[395,37,391,23,"_dependencyMap"],[395,51,391,23],[395,81,391,31,"checkForOutput"],[395,95,391,45],[395,97,391,47],[395,101,391,51],[395,102,391,52,"data"],[395,106,391,56],[395,107,391,57,"outputs"],[395,114,391,64],[395,116,391,66,"outputIndex"],[395,127,391,77],[395,128,391,78],[396,8,392,4],[396,15,392,11,"pubkeyInOutput"],[396,29,392,25],[396,30,392,26,"pubkey"],[396,36,392,32],[396,38,392,34,"output"],[396,44,392,40],[396,46,392,42,"outputIndex"],[396,57,392,53],[396,59,392,55],[396,63,392,59],[396,64,392,60,"__CACHE"],[396,71,392,67],[396,72,392,68],[397,6,393,2],[398,4,393,3],[399,6,393,3,"key"],[399,9,393,3],[400,6,393,3,"value"],[400,11,393,3],[400,13,394,2],[400,22,394,2,"outputHasHDKey"],[400,36,394,16,"outputHasHDKey"],[400,37,394,17,"outputIndex"],[400,48,394,28],[400,50,394,30,"root"],[400,54,394,34],[400,56,394,36],[401,8,395,4],[401,12,395,10,"output"],[401,18,395,16],[401,21,395,19],[401,22,395,20],[401,23,395,21],[401,25,395,23,"_$$_REQUIRE"],[401,36,395,23],[401,37,395,23,"_dependencyMap"],[401,51,395,23],[401,81,395,31,"checkForOutput"],[401,95,395,45],[401,97,395,47],[401,101,395,51],[401,102,395,52,"data"],[401,106,395,56],[401,107,395,57,"outputs"],[401,114,395,64],[401,116,395,66,"outputIndex"],[401,127,395,77],[401,128,395,78],[402,8,396,4],[402,12,396,10,"derivationIsMine"],[402,28,396,26],[402,31,396,29,"bip32DerivationIsMine"],[402,52,396,50],[402,53,396,51,"root"],[402,57,396,55],[402,58,396,56],[403,8,397,4],[403,15,398,6],[403,16,398,7],[403,17,398,8,"output"],[403,23,398,14],[403,24,398,15,"bip32Derivation"],[403,39,398,30],[403,43,398,34,"output"],[403,49,398,40],[403,50,398,41,"bip32Derivation"],[403,65,398,56],[403,66,398,57,"some"],[403,70,398,61],[403,71,398,62,"derivationIsMine"],[403,87,398,78],[403,88,398,79],[404,6,400,2],[405,4,400,3],[406,6,400,3,"key"],[406,9,400,3],[407,6,400,3,"value"],[407,11,400,3],[407,13,401,2],[407,22,401,2,"validateSignaturesOfAllInputs"],[407,51,401,31,"validateSignaturesOfAllInputs"],[407,52,401,32,"validator"],[407,61,401,41],[407,63,401,43],[408,8,401,43],[408,12,401,43,"_this5"],[408,18,401,43],[409,8,402,4],[409,9,402,5],[409,10,402,6],[409,12,402,8,"_$$_REQUIRE"],[409,23,402,8],[409,24,402,8,"_dependencyMap"],[409,38,402,8],[409,68,402,16,"checkForInput"],[409,81,402,29],[409,83,402,31],[409,87,402,35],[409,88,402,36,"data"],[409,92,402,40],[409,93,402,41,"inputs"],[409,99,402,47],[409,101,402,49],[409,102,402,50],[409,103,402,51],[409,104,402,52],[409,105,402,53],[410,8,403,4],[410,12,403,10,"results"],[410,19,403,17],[410,22,403,20,"range"],[410,27,403,25],[410,28,403,26],[410,32,403,30],[410,33,403,31,"data"],[410,37,403,35],[410,38,403,36,"inputs"],[410,44,403,42],[410,45,403,43,"length"],[410,51,403,49],[410,52,403,50],[410,53,403,51,"map"],[410,56,403,54],[410,57,403,55],[410,67,403,55,"idx"],[410,70,403,58],[411,10,403,58],[411,17,404,6,"_this5"],[411,23,404,10],[411,24,404,11,"validateSignaturesOfInput"],[411,49,404,36],[411,50,404,37,"idx"],[411,53,404,40],[411,55,404,42,"validator"],[411,64,404,51],[411,65,404,52],[412,8,404,52],[412,9,405,4],[412,10,405,5],[413,8,406,4],[413,15,406,11,"results"],[413,22,406,18],[413,23,406,19,"reduce"],[413,29,406,25],[413,30,406,26],[413,40,406,27,"final"],[413,45,406,32],[413,47,406,34,"res"],[413,50,406,37],[414,10,406,37],[414,17,406,42,"res"],[414,20,406,45],[414,25,406,50],[414,29,406,54],[414,33,406,58,"final"],[414,38,406,63],[415,8,406,63],[415,11,406,65],[415,15,406,69],[415,16,406,70],[416,6,407,2],[417,4,407,3],[418,6,407,3,"key"],[418,9,407,3],[419,6,407,3,"value"],[419,11,407,3],[419,13,408,2],[419,22,408,2,"validateSignaturesOfInput"],[419,47,408,27,"validateSignaturesOfInput"],[419,48,408,28,"inputIndex"],[419,58,408,38],[419,60,408,40,"validator"],[419,69,408,49],[419,71,408,51,"pubkey"],[419,77,408,57],[419,79,408,59],[420,8,409,4],[420,12,409,10,"input"],[420,17,409,15],[420,20,409,18],[420,24,409,22],[420,25,409,23,"data"],[420,29,409,27],[420,30,409,28,"inputs"],[420,36,409,34],[420,37,409,35,"inputIndex"],[420,47,409,45],[420,48,409,46],[421,8,410,4],[421,12,410,8],[421,13,410,9],[421,14,410,10],[421,16,410,12,"_$$_REQUIRE"],[421,27,410,12],[421,28,410,12,"_dependencyMap"],[421,42,410,12],[421,64,410,21,"isTaprootInput"],[421,78,410,35],[421,80,410,37,"input"],[421,85,410,42],[421,86,410,43],[421,88,411,6],[421,95,411,13],[421,99,411,17],[421,100,411,18,"validateSignaturesOfTaprootInput"],[421,132,411,50],[421,133,412,8,"inputIndex"],[421,143,412,18],[421,145,413,8,"validator"],[421,154,413,17],[421,156,414,8,"pubkey"],[421,162,415,6],[421,163,415,7],[422,8,416,4],[422,15,416,11],[422,19,416,15],[422,20,416,16,"_validateSignaturesOfInput"],[422,46,416,42],[422,47,416,43,"inputIndex"],[422,57,416,53],[422,59,416,55,"validator"],[422,68,416,64],[422,70,416,66,"pubkey"],[422,76,416,72],[422,77,416,73],[423,6,417,2],[424,4,417,3],[425,6,417,3,"key"],[425,9,417,3],[426,6,417,3,"value"],[426,11,417,3],[426,13,418,2],[426,22,418,2,"_validateSignaturesOfInput"],[426,48,418,28,"_validateSignaturesOfInput"],[426,49,418,29,"inputIndex"],[426,59,418,39],[426,61,418,41,"validator"],[426,70,418,50],[426,72,418,52,"pubkey"],[426,78,418,58],[426,80,418,60],[427,8,419,4],[427,12,419,10,"input"],[427,17,419,15],[427,20,419,18],[427,24,419,22],[427,25,419,23,"data"],[427,29,419,27],[427,30,419,28,"inputs"],[427,36,419,34],[427,37,419,35,"inputIndex"],[427,47,419,45],[427,48,419,46],[428,8,420,4],[428,12,420,10,"partialSig"],[428,22,420,20],[428,25,420,23],[428,26,420,24,"input"],[428,31,420,29],[428,35,420,33],[428,36,420,34],[428,37,420,35],[428,39,420,37,"partialSig"],[428,49,420,47],[429,8,421,4],[429,12,421,8],[429,13,421,9,"input"],[429,18,421,14],[429,22,421,18],[429,23,421,19,"partialSig"],[429,33,421,29],[429,37,421,33,"partialSig"],[429,47,421,43],[429,48,421,44,"length"],[429,54,421,50],[429,57,421,53],[429,58,421,54],[429,60,422,6],[429,66,422,12],[429,70,422,16,"Error"],[429,75,422,21],[429,76,422,22],[429,103,422,49],[429,104,422,50],[430,8,423,4],[430,12,423,8],[430,19,423,15,"validator"],[430,28,423,24],[430,33,423,29],[430,43,423,39],[430,45,424,6],[430,51,424,12],[430,55,424,16,"Error"],[430,60,424,21],[430,61,424,22],[430,109,424,70],[430,110,424,71],[431,8,425,4],[431,12,425,10,"mySigs"],[431,18,425,16],[431,21,425,19,"pubkey"],[431,27,425,25],[431,30,426,8,"partialSig"],[431,40,426,18],[431,41,426,19,"filter"],[431,47,426,25],[431,48,426,26],[431,58,426,26,"sig"],[431,61,426,29],[432,10,426,29],[432,17,426,33,"sig"],[432,20,426,36],[432,21,426,37,"pubkey"],[432,27,426,43],[432,28,426,44,"equals"],[432,34,426,50],[432,35,426,51,"pubkey"],[432,41,426,57],[432,42,426,58],[433,8,426,58],[433,10,426,59],[433,13,427,8,"partialSig"],[433,23,427,18],[434,8,428,4],[434,12,428,8,"mySigs"],[434,18,428,14],[434,19,428,15,"length"],[434,25,428,21],[434,28,428,24],[434,29,428,25],[434,31,428,27],[434,37,428,33],[434,41,428,37,"Error"],[434,46,428,42],[434,47,428,43],[434,78,428,74],[434,79,428,75],[435,8,429,4],[435,12,429,10,"results"],[435,19,429,17],[435,22,429,20],[435,24,429,22],[436,8,430,4],[436,12,430,8,"hashCache"],[436,21,430,17],[437,8,431,4],[437,12,431,8,"scriptCache"],[437,23,431,19],[438,8,432,4],[438,12,432,8,"sighashCache"],[438,24,432,20],[439,8,433,4],[439,13,433,9],[439,17,433,15,"pSig"],[439,21,433,19],[439,25,433,23,"mySigs"],[439,31,433,29],[439,33,433,31],[440,10,434,6],[440,14,434,12,"sig"],[440,17,434,15],[440,20,434,18,"_$$_REQUIRE"],[440,31,434,18],[440,32,434,18,"_dependencyMap"],[440,46,434,18],[440,64,434,26,"signature"],[440,73,434,35],[440,74,434,36,"decode"],[440,80,434,42],[440,81,434,43,"pSig"],[440,85,434,47],[440,86,434,48,"signature"],[440,95,434,57],[440,96,434,58],[441,10,435,6],[441,14,435,6,"_ref"],[441,18,435,6],[441,21,436,8,"sighashCache"],[441,33,436,20],[441,38,436,25,"sig"],[441,41,436,28],[441,42,436,29,"hashType"],[441,50,436,37],[441,53,437,12,"getHashForSig"],[441,66,437,25],[441,67,438,14,"inputIndex"],[441,77,438,24],[441,79,439,14,"Object"],[441,85,439,20],[441,86,439,21,"assign"],[441,92,439,27],[441,93,439,28],[441,94,439,29],[441,95,439,30],[441,97,439,32,"input"],[441,102,439,37],[441,104,439,39],[442,14,439,41,"sighashType"],[442,25,439,52],[442,27,439,54,"sig"],[442,30,439,57],[442,31,439,58,"hashType"],[443,12,439,67],[443,13,439,68],[443,14,439,69],[443,16,440,14],[443,20,440,18],[443,21,440,19,"__CACHE"],[443,28,440,26],[443,30,441,14],[443,34,442,12],[443,35,442,13],[443,38,443,12],[444,14,443,14,"hash"],[444,18,443,18],[444,20,443,20,"hashCache"],[444,29,443,29],[445,14,443,31,"script"],[445,20,443,37],[445,22,443,39,"scriptCache"],[446,12,443,51],[446,13,443,52],[447,12,435,14,"hash"],[447,16,435,18],[447,19,435,18,"_ref"],[447,23,435,18],[447,24,435,14,"hash"],[447,28,435,18],[448,12,435,20,"script"],[448,18,435,26],[448,21,435,26,"_ref"],[448,25,435,26],[448,26,435,20,"script"],[448,32,435,26],[449,10,444,6,"sighashCache"],[449,22,444,18],[449,25,444,21,"sig"],[449,28,444,24],[449,29,444,25,"hashType"],[449,37,444,33],[450,10,445,6,"hashCache"],[450,19,445,15],[450,22,445,18,"hash"],[450,26,445,22],[451,10,446,6,"scriptCache"],[451,21,446,17],[451,24,446,20,"script"],[451,30,446,26],[452,10,447,6,"checkScriptForPubkey"],[452,30,447,26],[452,31,447,27,"pSig"],[452,35,447,31],[452,36,447,32,"pubkey"],[452,42,447,38],[452,44,447,40,"script"],[452,50,447,46],[452,52,447,48],[452,60,447,56],[452,61,447,57],[453,10,448,6,"results"],[453,17,448,13],[453,18,448,14,"push"],[453,22,448,18],[453,23,448,19,"validator"],[453,32,448,28],[453,33,448,29,"pSig"],[453,37,448,33],[453,38,448,34,"pubkey"],[453,44,448,40],[453,46,448,42,"hash"],[453,50,448,46],[453,52,448,48,"sig"],[453,55,448,51],[453,56,448,52,"signature"],[453,65,448,61],[453,66,448,62],[453,67,448,63],[454,8,449,4],[455,8,450,4],[455,15,450,11,"results"],[455,22,450,18],[455,23,450,19,"every"],[455,28,450,24],[455,29,450,25],[455,39,450,25,"res"],[455,42,450,28],[456,10,450,28],[456,17,450,32,"res"],[456,20,450,35],[456,25,450,40],[456,29,450,44],[457,8,450,44],[457,10,450,45],[458,6,451,2],[459,4,451,3],[460,6,451,3,"key"],[460,9,451,3],[461,6,451,3,"value"],[461,11,451,3],[461,13,452,2],[461,22,452,2,"validateSignaturesOfTaprootInput"],[461,54,452,34,"validateSignaturesOfTaprootInput"],[461,55,452,35,"inputIndex"],[461,65,452,45],[461,67,452,47,"validator"],[461,76,452,56],[461,78,452,58,"pubkey"],[461,84,452,64],[461,86,452,66],[462,8,453,4],[462,12,453,10,"input"],[462,17,453,15],[462,20,453,18],[462,24,453,22],[462,25,453,23,"data"],[462,29,453,27],[462,30,453,28,"inputs"],[462,36,453,34],[462,37,453,35,"inputIndex"],[462,47,453,45],[462,48,453,46],[463,8,454,4],[463,12,454,10,"tapKeySig"],[463,21,454,19],[463,24,454,22],[463,25,454,23,"input"],[463,30,454,28],[463,34,454,32],[463,35,454,33],[463,36,454,34],[463,38,454,36,"tapKeySig"],[463,47,454,45],[464,8,455,4],[464,12,455,10,"tapScriptSig"],[464,24,455,22],[464,27,455,25],[464,28,455,26,"input"],[464,33,455,31],[464,37,455,35],[464,38,455,36],[464,39,455,37],[464,41,455,39,"tapScriptSig"],[464,53,455,51],[465,8,456,4],[465,12,456,8],[465,13,456,9,"input"],[465,18,456,14],[465,22,456,18],[465,23,456,19,"tapKeySig"],[465,32,456,28],[465,36,456,32],[465,38,456,34,"tapScriptSig"],[465,50,456,46],[465,54,456,50],[465,55,456,51,"tapScriptSig"],[465,67,456,63],[465,68,456,64,"length"],[465,74,456,70],[465,75,456,71],[465,77,457,6],[465,83,457,12],[465,87,457,16,"Error"],[465,92,457,21],[465,93,457,22],[465,120,457,49],[465,121,457,50],[466,8,458,4],[466,12,458,8],[466,19,458,15,"validator"],[466,28,458,24],[466,33,458,29],[466,43,458,39],[466,45,459,6],[466,51,459,12],[466,55,459,16,"Error"],[466,60,459,21],[466,61,459,22],[466,109,459,70],[466,110,459,71],[467,8,460,4,"pubkey"],[467,14,460,10],[467,17,460,13,"pubkey"],[467,23,460,19],[467,27,460,23],[467,28,460,24],[467,29,460,25],[467,31,460,27,"_$$_REQUIRE"],[467,42,460,27],[467,43,460,27,"_dependencyMap"],[467,57,460,27],[467,79,460,36,"toXOnly"],[467,86,460,43],[467,88,460,45,"pubkey"],[467,94,460,51],[467,95,460,52],[468,8,461,4],[468,12,461,10,"allHashses"],[468,22,461,20],[468,25,461,23,"pubkey"],[468,31,461,29],[468,34,462,8,"getTaprootHashesForSig"],[468,56,462,30],[468,57,463,10,"inputIndex"],[468,67,463,20],[468,69,464,10,"input"],[468,74,464,15],[468,76,465,10],[468,80,465,14],[468,81,465,15,"data"],[468,85,465,19],[468,86,465,20,"inputs"],[468,92,465,26],[468,94,466,10,"pubkey"],[468,100,466,16],[468,102,467,10],[468,106,467,14],[468,107,467,15,"__CACHE"],[468,114,468,8],[468,115,468,9],[468,118,469,8,"getAllTaprootHashesForSig"],[468,143,469,33],[468,144,470,10,"inputIndex"],[468,154,470,20],[468,156,471,10,"input"],[468,161,471,15],[468,163,472,10],[468,167,472,14],[468,168,472,15,"data"],[468,172,472,19],[468,173,472,20,"inputs"],[468,179,472,26],[468,181,473,10],[468,185,473,14],[468,186,473,15,"__CACHE"],[468,193,474,8],[468,194,474,9],[469,8,475,4],[469,12,475,8],[469,13,475,9,"allHashses"],[469,23,475,19],[469,24,475,20,"length"],[469,30,475,26],[469,32,475,28],[469,38,475,34],[469,42,475,38,"Error"],[469,47,475,43],[469,48,475,44],[469,79,475,75],[469,80,475,76],[470,8,476,4],[470,12,476,10,"tapKeyHash"],[470,22,476,20],[470,25,476,23,"allHashses"],[470,35,476,33],[470,36,476,34,"find"],[470,40,476,38],[470,41,476,39],[470,51,476,39,"h"],[470,52,476,40],[471,10,476,40],[471,17,476,44],[471,18,476,45,"h"],[471,19,476,46],[471,20,476,47,"leafHash"],[471,28,476,55],[472,8,476,55],[472,10,476,56],[473,8,477,4],[473,12,477,8,"validationResultCount"],[473,33,477,29],[473,36,477,32],[473,37,477,33],[474,8,478,4],[474,12,478,8,"tapKeySig"],[474,21,478,17],[474,25,478,21,"tapKeyHash"],[474,35,478,31],[474,37,478,33],[475,10,479,6],[475,14,479,12,"isValidTapkeySig"],[475,30,479,28],[475,33,479,31,"validator"],[475,42,479,40],[475,43,480,8,"tapKeyHash"],[475,53,480,18],[475,54,480,19,"pubkey"],[475,60,480,25],[475,62,481,8,"tapKeyHash"],[475,72,481,18],[475,73,481,19,"hash"],[475,77,481,23],[475,79,482,8,"trimTaprootSig"],[475,93,482,22],[475,94,482,23,"tapKeySig"],[475,103,482,32],[475,104,483,6],[475,105,483,7],[476,10,484,6],[476,14,484,10],[476,15,484,11,"isValidTapkeySig"],[476,31,484,27],[476,33,484,29],[476,40,484,36],[476,45,484,41],[477,10,485,6,"validationResultCount"],[477,31,485,27],[477,33,485,29],[478,8,486,4],[479,8,487,4],[479,12,487,8,"tapScriptSig"],[479,24,487,20],[479,26,487,22],[480,10,487,22],[480,14,487,22,"_loop"],[480,19,487,22],[480,31,487,22,"_loop"],[480,37,487,22,"tapSig"],[480,43,487,22],[480,45,488,41],[481,14,489,8],[481,18,489,14,"tapSigHash"],[481,28,489,24],[481,31,489,27,"allHashses"],[481,41,489,37],[481,42,489,38,"find"],[481,46,489,42],[481,47,489,43],[481,57,489,43,"h"],[481,58,489,44],[482,16,489,44],[482,23,489,48,"tapSig"],[482,29,489,54],[482,30,489,55,"pubkey"],[482,36,489,61],[482,37,489,62,"equals"],[482,43,489,68],[482,44,489,69,"h"],[482,45,489,70],[482,46,489,71,"pubkey"],[482,52,489,77],[482,53,489,78],[483,14,489,78],[483,16,489,79],[484,14,490,8],[484,18,490,12,"tapSigHash"],[484,28,490,22],[484,30,490,24],[485,16,491,10],[485,20,491,16,"isValidTapScriptSig"],[485,39,491,35],[485,42,491,38,"validator"],[485,51,491,47],[485,52,492,12,"tapSig"],[485,58,492,18],[485,59,492,19,"pubkey"],[485,65,492,25],[485,67,493,12,"tapSigHash"],[485,77,493,22],[485,78,493,23,"hash"],[485,82,493,27],[485,84,494,12,"trimTaprootSig"],[485,98,494,26],[485,99,494,27,"tapSig"],[485,105,494,33],[485,106,494,34,"signature"],[485,115,494,43],[485,116,495,10],[485,117,495,11],[486,16,496,10],[486,20,496,14],[486,21,496,15,"isValidTapScriptSig"],[486,40,496,34],[487,18,496,34,"v"],[487,19,496,34],[487,21,496,43],[488,16,496,48],[489,16,497,10,"validationResultCount"],[489,37,497,31],[489,39,497,33],[490,14,498,8],[491,12,499,6],[491,13,499,7],[492,12,499,7,"_ret"],[492,16,499,7],[493,10,488,6],[493,15,488,11],[493,19,488,17,"tapSig"],[493,25,488,23],[493,29,488,27,"tapScriptSig"],[493,41,488,39],[494,12,488,39,"_ret"],[494,16,488,39],[494,19,488,39,"_loop"],[494,24,488,39],[494,25,488,39,"tapSig"],[494,31,488,39],[495,12,488,39],[495,16,488,39,"_ret"],[495,20,488,39],[495,29,488,39,"_ret"],[495,33,488,39],[495,34,488,39,"v"],[495,35,488,39],[496,10,488,39],[497,8,500,4],[498,8,501,4],[498,15,501,11,"validationResultCount"],[498,36,501,32],[498,39,501,35],[498,40,501,36],[499,6,502,2],[500,4,502,3],[501,6,502,3,"key"],[501,9,502,3],[502,6,502,3,"value"],[502,11,502,3],[502,13,503,2],[502,22,503,2,"signAllInputsHD"],[502,37,503,17,"signAllInputsHD"],[502,38,504,4,"hdKeyPair"],[502,47,504,13],[502,49,506,4],[503,8,506,4],[503,12,505,4,"sighashTypes"],[503,24,505,16],[503,27,505,16,"arguments"],[503,36,505,16],[503,37,505,16,"length"],[503,43,505,16],[503,51,505,16,"arguments"],[503,60,505,16],[503,68,505,16,"undefined"],[503,77,505,16],[503,80,505,16,"arguments"],[503,89,505,16],[503,95,505,19],[503,96,505,20,"_$$_REQUIRE"],[503,107,505,20],[503,108,505,20,"_dependencyMap"],[503,122,505,20],[503,145,505,34,"Transaction"],[503,156,505,45],[503,157,505,46,"SIGHASH_ALL"],[503,168,505,57],[503,169,505,58],[504,8,507,4],[504,12,507,8],[504,13,507,9,"hdKeyPair"],[504,22,507,18],[504,26,507,22],[504,27,507,23,"hdKeyPair"],[504,36,507,32],[504,37,507,33,"publicKey"],[504,46,507,42],[504,50,507,46],[504,51,507,47,"hdKeyPair"],[504,60,507,56],[504,61,507,57,"fingerprint"],[504,72,507,68],[504,74,507,70],[505,10,508,6],[505,16,508,12],[505,20,508,16,"Error"],[505,25,508,21],[505,26,508,22],[505,55,508,51],[505,56,508,52],[506,8,509,4],[507,8,510,4],[507,12,510,10,"results"],[507,19,510,17],[507,22,510,20],[507,24,510,22],[508,8,511,4],[508,13,511,9],[508,17,511,15,"i"],[508,18,511,16],[508,22,511,20,"range"],[508,27,511,25],[508,28,511,26],[508,32,511,30],[508,33,511,31,"data"],[508,37,511,35],[508,38,511,36,"inputs"],[508,44,511,42],[508,45,511,43,"length"],[508,51,511,49],[508,52,511,50],[508,54,511,52],[509,10,512,6],[509,14,512,10],[510,12,513,8],[510,16,513,12],[510,17,513,13,"signInputHD"],[510,28,513,24],[510,29,513,25,"i"],[510,30,513,26],[510,32,513,28,"hdKeyPair"],[510,41,513,37],[510,43,513,39,"sighashTypes"],[510,55,513,51],[510,56,513,52],[511,12,514,8,"results"],[511,19,514,15],[511,20,514,16,"push"],[511,24,514,20],[511,25,514,21],[511,29,514,25],[511,30,514,26],[512,10,515,6],[512,11,515,7],[512,12,515,8],[512,19,515,15,"err"],[512,22,515,18],[512,24,515,20],[513,12,516,8,"results"],[513,19,516,15],[513,20,516,16,"push"],[513,24,516,20],[513,25,516,21],[513,30,516,26],[513,31,516,27],[514,10,517,6],[515,8,518,4],[516,8,519,4],[516,12,519,8,"results"],[516,19,519,15],[516,20,519,16,"every"],[516,25,519,21],[516,26,519,22],[516,36,519,22,"v"],[516,37,519,23],[517,10,519,23],[517,17,519,27,"v"],[517,18,519,28],[517,23,519,33],[517,28,519,38],[518,8,519,38],[518,10,519,39],[518,12,519,41],[519,10,520,6],[519,16,520,12],[519,20,520,16,"Error"],[519,25,520,21],[519,26,520,22],[519,49,520,45],[519,50,520,46],[520,8,521,4],[521,8,522,4],[521,15,522,11],[521,19,522,15],[522,6,523,2],[523,4,523,3],[524,6,523,3,"key"],[524,9,523,3],[525,6,523,3,"value"],[525,11,523,3],[525,13,524,2],[525,22,524,2,"signAllInputsHDAsync"],[525,42,524,22,"signAllInputsHDAsync"],[525,43,525,4,"hdKeyPair"],[525,52,525,13],[525,54,527,4],[526,8,527,4],[526,12,527,4,"_this6"],[526,18,527,4],[527,8,527,4],[527,12,526,4,"sighashTypes"],[527,24,526,16],[527,27,526,16,"arguments"],[527,36,526,16],[527,37,526,16,"length"],[527,43,526,16],[527,51,526,16,"arguments"],[527,60,526,16],[527,68,526,16,"undefined"],[527,77,526,16],[527,80,526,16,"arguments"],[527,89,526,16],[527,95,526,19],[527,96,526,20,"_$$_REQUIRE"],[527,107,526,20],[527,108,526,20,"_dependencyMap"],[527,122,526,20],[527,145,526,34,"Transaction"],[527,156,526,45],[527,157,526,46,"SIGHASH_ALL"],[527,168,526,57],[527,169,526,58],[528,8,528,4],[528,15,528,11],[528,19,528,15,"Promise"],[528,26,528,22],[528,27,528,23],[528,37,528,24,"resolve"],[528,44,528,31],[528,46,528,33,"reject"],[528,52,528,39],[528,54,528,44],[529,10,529,6],[529,14,529,10],[529,15,529,11,"hdKeyPair"],[529,24,529,20],[529,28,529,24],[529,29,529,25,"hdKeyPair"],[529,38,529,34],[529,39,529,35,"publicKey"],[529,48,529,44],[529,52,529,48],[529,53,529,49,"hdKeyPair"],[529,62,529,58],[529,63,529,59,"fingerprint"],[529,74,529,70],[529,76,529,72],[530,12,530,8],[530,19,530,15,"reject"],[530,25,530,21],[530,26,530,22],[530,30,530,26,"Error"],[530,35,530,31],[530,36,530,32],[530,65,530,61],[530,66,530,62],[530,67,530,63],[531,10,531,6],[532,10,532,6],[532,14,532,12,"results"],[532,21,532,19],[532,24,532,22],[532,26,532,24],[533,10,533,6],[533,14,533,12,"promises"],[533,22,533,20],[533,25,533,23],[533,27,533,25],[534,10,534,6],[534,15,534,11],[534,19,534,17,"i"],[534,20,534,18],[534,24,534,22,"range"],[534,29,534,27],[534,30,534,28,"_this6"],[534,36,534,32],[534,37,534,33,"data"],[534,41,534,37],[534,42,534,38,"inputs"],[534,48,534,44],[534,49,534,45,"length"],[534,55,534,51],[534,56,534,52],[534,58,534,54],[535,12,535,8,"promises"],[535,20,535,16],[535,21,535,17,"push"],[535,25,535,21],[535,26,536,10,"_this6"],[535,32,536,14],[535,33,536,15,"signInputHDAsync"],[535,49,536,31],[535,50,536,32,"i"],[535,51,536,33],[535,53,536,35,"hdKeyPair"],[535,62,536,44],[535,64,536,46,"sighashTypes"],[535,76,536,58],[535,77,536,59],[535,78,536,60,"then"],[535,82,536,64],[535,83,537,12],[535,95,537,18],[536,14,538,14,"results"],[536,21,538,21],[536,22,538,22,"push"],[536,26,538,26],[536,27,538,27],[536,31,538,31],[536,32,538,32],[537,12,539,12],[537,13,539,13],[537,15,540,12],[537,27,540,18],[538,14,541,14,"results"],[538,21,541,21],[538,22,541,22,"push"],[538,26,541,26],[538,27,541,27],[538,32,541,32],[538,33,541,33],[539,12,542,12],[539,13,543,10],[539,14,544,8],[539,15,544,9],[540,10,545,6],[541,10,546,6],[541,17,546,13,"Promise"],[541,24,546,20],[541,25,546,21,"all"],[541,28,546,24],[541,29,546,25,"promises"],[541,37,546,33],[541,38,546,34],[541,39,546,35,"then"],[541,43,546,39],[541,44,546,40],[541,56,546,46],[542,12,547,8],[542,16,547,12,"results"],[542,23,547,19],[542,24,547,20,"every"],[542,29,547,25],[542,30,547,26],[542,40,547,26,"v"],[542,41,547,27],[543,14,547,27],[543,21,547,31,"v"],[543,22,547,32],[543,27,547,37],[543,32,547,42],[544,12,547,42],[544,14,547,43],[544,16,547,45],[545,14,548,10],[545,21,548,17,"reject"],[545,27,548,23],[545,28,548,24],[545,32,548,28,"Error"],[545,37,548,33],[545,38,548,34],[545,61,548,57],[545,62,548,58],[545,63,548,59],[546,12,549,8],[547,12,550,8,"resolve"],[547,19,550,15],[547,20,550,16],[547,21,550,17],[548,10,551,6],[548,11,551,7],[548,12,551,8],[549,8,552,4],[549,9,552,5],[549,10,552,6],[550,6,553,2],[551,4,553,3],[552,6,553,3,"key"],[552,9,553,3],[553,6,553,3,"value"],[553,11,553,3],[553,13,554,2],[553,22,554,2,"signInputHD"],[553,33,554,13,"signInputHD"],[553,34,555,4,"inputIndex"],[553,44,555,14],[553,46,556,4,"hdKeyPair"],[553,55,556,13],[553,57,558,4],[554,8,558,4],[554,12,558,4,"_this7"],[554,18,558,4],[555,8,558,4],[555,12,557,4,"sighashTypes"],[555,24,557,16],[555,27,557,16,"arguments"],[555,36,557,16],[555,37,557,16,"length"],[555,43,557,16],[555,51,557,16,"arguments"],[555,60,557,16],[555,68,557,16,"undefined"],[555,77,557,16],[555,80,557,16,"arguments"],[555,89,557,16],[555,95,557,19],[555,96,557,20,"_$$_REQUIRE"],[555,107,557,20],[555,108,557,20,"_dependencyMap"],[555,122,557,20],[555,145,557,34,"Transaction"],[555,156,557,45],[555,157,557,46,"SIGHASH_ALL"],[555,168,557,57],[555,169,557,58],[556,8,559,4],[556,12,559,8],[556,13,559,9,"hdKeyPair"],[556,22,559,18],[556,26,559,22],[556,27,559,23,"hdKeyPair"],[556,36,559,32],[556,37,559,33,"publicKey"],[556,46,559,42],[556,50,559,46],[556,51,559,47,"hdKeyPair"],[556,60,559,56],[556,61,559,57,"fingerprint"],[556,72,559,68],[556,74,559,70],[557,10,560,6],[557,16,560,12],[557,20,560,16,"Error"],[557,25,560,21],[557,26,560,22],[557,55,560,51],[557,56,560,52],[558,8,561,4],[559,8,562,4],[559,12,562,10,"signers"],[559,19,562,17],[559,22,562,20,"getSignersFromHD"],[559,38,562,36],[559,39,562,37,"inputIndex"],[559,49,562,47],[559,51,562,49],[559,55,562,53],[559,56,562,54,"data"],[559,60,562,58],[559,61,562,59,"inputs"],[559,67,562,65],[559,69,562,67,"hdKeyPair"],[559,78,562,76],[559,79,562,77],[560,8,563,4,"signers"],[560,15,563,11],[560,16,563,12,"forEach"],[560,23,563,19],[560,24,563,20],[560,34,563,20,"signer"],[560,40,563,26],[561,10,563,26],[561,17,563,30,"_this7"],[561,23,563,34],[561,24,563,35,"signInput"],[561,33,563,44],[561,34,563,45,"inputIndex"],[561,44,563,55],[561,46,563,57,"signer"],[561,52,563,63],[561,54,563,65,"sighashTypes"],[561,66,563,77],[561,67,563,78],[562,8,563,78],[562,10,563,79],[563,8,564,4],[563,15,564,11],[563,19,564,15],[564,6,565,2],[565,4,565,3],[566,6,565,3,"key"],[566,9,565,3],[567,6,565,3,"value"],[567,11,565,3],[567,13,566,2],[567,22,566,2,"signInputHDAsync"],[567,38,566,18,"signInputHDAsync"],[567,39,567,4,"inputIndex"],[567,49,567,14],[567,51,568,4,"hdKeyPair"],[567,60,568,13],[567,62,570,4],[568,8,570,4],[568,12,570,4,"_this8"],[568,18,570,4],[569,8,570,4],[569,12,569,4,"sighashTypes"],[569,24,569,16],[569,27,569,16,"arguments"],[569,36,569,16],[569,37,569,16,"length"],[569,43,569,16],[569,51,569,16,"arguments"],[569,60,569,16],[569,68,569,16,"undefined"],[569,77,569,16],[569,80,569,16,"arguments"],[569,89,569,16],[569,95,569,19],[569,96,569,20,"_$$_REQUIRE"],[569,107,569,20],[569,108,569,20,"_dependencyMap"],[569,122,569,20],[569,145,569,34,"Transaction"],[569,156,569,45],[569,157,569,46,"SIGHASH_ALL"],[569,168,569,57],[569,169,569,58],[570,8,571,4],[570,15,571,11],[570,19,571,15,"Promise"],[570,26,571,22],[570,27,571,23],[570,37,571,24,"resolve"],[570,44,571,31],[570,46,571,33,"reject"],[570,52,571,39],[570,54,571,44],[571,10,572,6],[571,14,572,10],[571,15,572,11,"hdKeyPair"],[571,24,572,20],[571,28,572,24],[571,29,572,25,"hdKeyPair"],[571,38,572,34],[571,39,572,35,"publicKey"],[571,48,572,44],[571,52,572,48],[571,53,572,49,"hdKeyPair"],[571,62,572,58],[571,63,572,59,"fingerprint"],[571,74,572,70],[571,76,572,72],[572,12,573,8],[572,19,573,15,"reject"],[572,25,573,21],[572,26,573,22],[572,30,573,26,"Error"],[572,35,573,31],[572,36,573,32],[572,65,573,61],[572,66,573,62],[572,67,573,63],[573,10,574,6],[574,10,575,6],[574,14,575,12,"signers"],[574,21,575,19],[574,24,575,22,"getSignersFromHD"],[574,40,575,38],[574,41,575,39,"inputIndex"],[574,51,575,49],[574,53,575,51,"_this8"],[574,59,575,55],[574,60,575,56,"data"],[574,64,575,60],[574,65,575,61,"inputs"],[574,71,575,67],[574,73,575,69,"hdKeyPair"],[574,82,575,78],[574,83,575,79],[575,10,576,6],[575,14,576,12,"promises"],[575,22,576,20],[575,25,576,23,"signers"],[575,32,576,30],[575,33,576,31,"map"],[575,36,576,34],[575,37,576,35],[575,47,576,35,"signer"],[575,53,576,41],[576,12,576,41],[576,19,577,8,"_this8"],[576,25,577,12],[576,26,577,13,"signInputAsync"],[576,40,577,27],[576,41,577,28,"inputIndex"],[576,51,577,38],[576,53,577,40,"signer"],[576,59,577,46],[576,61,577,48,"sighashTypes"],[576,73,577,60],[576,74,577,61],[577,10,577,61],[577,11,578,6],[577,12,578,7],[578,10,579,6],[578,17,579,13,"Promise"],[578,24,579,20],[578,25,579,21,"all"],[578,28,579,24],[578,29,579,25,"promises"],[578,37,579,33],[578,38,579,34],[578,39,580,9,"then"],[578,43,580,13],[578,44,580,14],[578,56,580,20],[579,12,581,10,"resolve"],[579,19,581,17],[579,20,581,18],[579,21,581,19],[580,10,582,8],[580,11,582,9],[580,12,582,10],[580,13,583,9,"catch"],[580,18,583,14],[580,19,583,15,"reject"],[580,25,583,21],[580,26,583,22],[581,8,584,4],[581,9,584,5],[581,10,584,6],[582,6,585,2],[583,4,585,3],[584,6,585,3,"key"],[584,9,585,3],[585,6,585,3,"value"],[585,11,585,3],[585,13,586,2],[585,22,586,2,"signAllInputs"],[585,35,586,15,"signAllInputs"],[585,36,586,16,"keyPair"],[585,43,586,23],[585,45,586,25,"sighashTypes"],[585,57,586,37],[585,59,586,39],[586,8,587,4],[586,12,587,8],[586,13,587,9,"keyPair"],[586,20,587,16],[586,24,587,20],[586,25,587,21,"keyPair"],[586,32,587,28],[586,33,587,29,"publicKey"],[586,42,587,38],[586,44,588,6],[586,50,588,12],[586,54,588,16,"Error"],[586,59,588,21],[586,60,588,22],[586,87,588,49],[586,88,588,50],[587,8,589,4],[588,8,590,4],[589,8,591,4],[590,8,592,4],[590,12,592,10,"results"],[590,19,592,17],[590,22,592,20],[590,24,592,22],[591,8,593,4],[591,13,593,9],[591,17,593,15,"i"],[591,18,593,16],[591,22,593,20,"range"],[591,27,593,25],[591,28,593,26],[591,32,593,30],[591,33,593,31,"data"],[591,37,593,35],[591,38,593,36,"inputs"],[591,44,593,42],[591,45,593,43,"length"],[591,51,593,49],[591,52,593,50],[591,54,593,52],[592,10,594,6],[592,14,594,10],[593,12,595,8],[593,16,595,12],[593,17,595,13,"signInput"],[593,26,595,22],[593,27,595,23,"i"],[593,28,595,24],[593,30,595,26,"keyPair"],[593,37,595,33],[593,39,595,35,"sighashTypes"],[593,51,595,47],[593,52,595,48],[594,12,596,8,"results"],[594,19,596,15],[594,20,596,16,"push"],[594,24,596,20],[594,25,596,21],[594,29,596,25],[594,30,596,26],[595,10,597,6],[595,11,597,7],[595,12,597,8],[595,19,597,15,"err"],[595,22,597,18],[595,24,597,20],[596,12,598,8,"results"],[596,19,598,15],[596,20,598,16,"push"],[596,24,598,20],[596,25,598,21],[596,30,598,26],[596,31,598,27],[597,10,599,6],[598,8,600,4],[599,8,601,4],[599,12,601,8,"results"],[599,19,601,15],[599,20,601,16,"every"],[599,25,601,21],[599,26,601,22],[599,36,601,22,"v"],[599,37,601,23],[600,10,601,23],[600,17,601,27,"v"],[600,18,601,28],[600,23,601,33],[600,28,601,38],[601,8,601,38],[601,10,601,39],[601,12,601,41],[602,10,602,6],[602,16,602,12],[602,20,602,16,"Error"],[602,25,602,21],[602,26,602,22],[602,49,602,45],[602,50,602,46],[603,8,603,4],[604,8,604,4],[604,15,604,11],[604,19,604,15],[605,6,605,2],[606,4,605,3],[607,6,605,3,"key"],[607,9,605,3],[608,6,605,3,"value"],[608,11,605,3],[608,13,606,2],[608,22,606,2,"signAllInputsAsync"],[608,40,606,20,"signAllInputsAsync"],[608,41,606,21,"keyPair"],[608,48,606,28],[608,50,606,30,"sighashTypes"],[608,62,606,42],[608,64,606,44],[609,8,606,44],[609,12,606,44,"_this9"],[609,18,606,44],[610,8,607,4],[610,15,607,11],[610,19,607,15,"Promise"],[610,26,607,22],[610,27,607,23],[610,37,607,24,"resolve"],[610,44,607,31],[610,46,607,33,"reject"],[610,52,607,39],[610,54,607,44],[611,10,608,6],[611,14,608,10],[611,15,608,11,"keyPair"],[611,22,608,18],[611,26,608,22],[611,27,608,23,"keyPair"],[611,34,608,30],[611,35,608,31,"publicKey"],[611,44,608,40],[611,46,609,8],[611,53,609,15,"reject"],[611,59,609,21],[611,60,609,22],[611,64,609,26,"Error"],[611,69,609,31],[611,70,609,32],[611,97,609,59],[611,98,609,60],[611,99,609,61],[612,10,610,6],[613,10,611,6],[614,10,612,6],[615,10,613,6],[615,14,613,12,"results"],[615,21,613,19],[615,24,613,22],[615,26,613,24],[616,10,614,6],[616,14,614,12,"promises"],[616,22,614,20],[616,25,614,23],[616,27,614,25],[617,10,615,6],[617,19,615,6,"_ref2"],[617,24,615,6],[617,28,615,24,"_this9"],[617,34,615,28],[617,35,615,29,"data"],[617,39,615,33],[617,40,615,34,"inputs"],[617,46,615,40],[617,47,615,41,"entries"],[617,54,615,48],[617,55,615,49],[617,56,615,50],[617,58,615,52],[618,12,615,52],[618,16,615,52,"_ref3"],[618,21,615,52],[618,24,615,52,"_slicedToArray"],[618,38,615,52],[618,39,615,52,"_ref2"],[618,44,615,52],[619,12,615,52],[619,16,615,18,"i"],[619,17,615,19],[619,20,615,19,"_ref3"],[619,25,615,19],[620,12,616,8,"promises"],[620,20,616,16],[620,21,616,17,"push"],[620,25,616,21],[620,26,617,10,"_this9"],[620,32,617,14],[620,33,617,15,"signInputAsync"],[620,47,617,29],[620,48,617,30,"i"],[620,49,617,31],[620,51,617,33,"keyPair"],[620,58,617,40],[620,60,617,42,"sighashTypes"],[620,72,617,54],[620,73,617,55],[620,74,617,56,"then"],[620,78,617,60],[620,79,618,12],[620,91,618,18],[621,14,619,14,"results"],[621,21,619,21],[621,22,619,22,"push"],[621,26,619,26],[621,27,619,27],[621,31,619,31],[621,32,619,32],[622,12,620,12],[622,13,620,13],[622,15,621,12],[622,27,621,18],[623,14,622,14,"results"],[623,21,622,21],[623,22,622,22,"push"],[623,26,622,26],[623,27,622,27],[623,32,622,32],[623,33,622,33],[624,12,623,12],[624,13,624,10],[624,14,625,8],[624,15,625,9],[625,10,626,6],[626,10,627,6],[626,17,627,13,"Promise"],[626,24,627,20],[626,25,627,21,"all"],[626,28,627,24],[626,29,627,25,"promises"],[626,37,627,33],[626,38,627,34],[626,39,627,35,"then"],[626,43,627,39],[626,44,627,40],[626,56,627,46],[627,12,628,8],[627,16,628,12,"results"],[627,23,628,19],[627,24,628,20,"every"],[627,29,628,25],[627,30,628,26],[627,40,628,26,"v"],[627,41,628,27],[628,14,628,27],[628,21,628,31,"v"],[628,22,628,32],[628,27,628,37],[628,32,628,42],[629,12,628,42],[629,14,628,43],[629,16,628,45],[630,14,629,10],[630,21,629,17,"reject"],[630,27,629,23],[630,28,629,24],[630,32,629,28,"Error"],[630,37,629,33],[630,38,629,34],[630,61,629,57],[630,62,629,58],[630,63,629,59],[631,12,630,8],[632,12,631,8,"resolve"],[632,19,631,15],[632,20,631,16],[632,21,631,17],[633,10,632,6],[633,11,632,7],[633,12,632,8],[634,8,633,4],[634,9,633,5],[634,10,633,6],[635,6,634,2],[636,4,634,3],[637,6,634,3,"key"],[637,9,634,3],[638,6,634,3,"value"],[638,11,634,3],[638,13,635,2],[638,22,635,2,"signInput"],[638,31,635,11,"signInput"],[638,32,635,12,"inputIndex"],[638,42,635,22],[638,44,635,24,"keyPair"],[638,51,635,31],[638,53,635,33,"sighashTypes"],[638,65,635,45],[638,67,635,47],[639,8,636,4],[639,12,636,8],[639,13,636,9,"keyPair"],[639,20,636,16],[639,24,636,20],[639,25,636,21,"keyPair"],[639,32,636,28],[639,33,636,29,"publicKey"],[639,42,636,38],[639,44,637,6],[639,50,637,12],[639,54,637,16,"Error"],[639,59,637,21],[639,60,637,22],[639,87,637,49],[639,88,637,50],[640,8,638,4],[640,12,638,10,"input"],[640,17,638,15],[640,20,638,18],[640,21,638,19],[640,22,638,20],[640,24,638,22,"_$$_REQUIRE"],[640,35,638,22],[640,36,638,22,"_dependencyMap"],[640,50,638,22],[640,80,638,30,"checkForInput"],[640,93,638,43],[640,95,638,45],[640,99,638,49],[640,100,638,50,"data"],[640,104,638,54],[640,105,638,55,"inputs"],[640,111,638,61],[640,113,638,63,"inputIndex"],[640,123,638,73],[640,124,638,74],[641,8,639,4],[641,12,639,8],[641,13,639,9],[641,14,639,10],[641,16,639,12,"_$$_REQUIRE"],[641,27,639,12],[641,28,639,12,"_dependencyMap"],[641,42,639,12],[641,64,639,21,"isTaprootInput"],[641,78,639,35],[641,80,639,37,"input"],[641,85,639,42],[641,86,639,43],[641,88,639,45],[642,10,640,6],[642,17,640,13],[642,21,640,17],[642,22,640,18,"_signTaprootInput"],[642,39,640,35],[642,40,641,8,"inputIndex"],[642,50,641,18],[642,52,642,8,"input"],[642,57,642,13],[642,59,643,8,"keyPair"],[642,66,643,15],[642,68,644,8,"undefined"],[642,77,644,17],[642,79,645,8,"sighashTypes"],[642,91,646,6],[642,92,646,7],[643,8,647,4],[644,8,648,4],[644,15,648,11],[644,19,648,15],[644,20,648,16,"_signInput"],[644,30,648,26],[644,31,648,27,"inputIndex"],[644,41,648,37],[644,43,648,39,"keyPair"],[644,50,648,46],[644,52,648,48,"sighashTypes"],[644,64,648,60],[644,65,648,61],[645,6,649,2],[646,4,649,3],[647,6,649,3,"key"],[647,9,649,3],[648,6,649,3,"value"],[648,11,649,3],[648,13,650,2],[648,22,650,2,"signTaprootInput"],[648,38,650,18,"signTaprootInput"],[648,39,650,19,"inputIndex"],[648,49,650,29],[648,51,650,31,"keyPair"],[648,58,650,38],[648,60,650,40,"tapLeafHashToSign"],[648,77,650,57],[648,79,650,59,"sighashTypes"],[648,91,650,71],[648,93,650,73],[649,8,651,4],[649,12,651,8],[649,13,651,9,"keyPair"],[649,20,651,16],[649,24,651,20],[649,25,651,21,"keyPair"],[649,32,651,28],[649,33,651,29,"publicKey"],[649,42,651,38],[649,44,652,6],[649,50,652,12],[649,54,652,16,"Error"],[649,59,652,21],[649,60,652,22],[649,87,652,49],[649,88,652,50],[650,8,653,4],[650,12,653,10,"input"],[650,17,653,15],[650,20,653,18],[650,21,653,19],[650,22,653,20],[650,24,653,22,"_$$_REQUIRE"],[650,35,653,22],[650,36,653,22,"_dependencyMap"],[650,50,653,22],[650,80,653,30,"checkForInput"],[650,93,653,43],[650,95,653,45],[650,99,653,49],[650,100,653,50,"data"],[650,104,653,54],[650,105,653,55,"inputs"],[650,111,653,61],[650,113,653,63,"inputIndex"],[650,123,653,73],[650,124,653,74],[651,8,654,4],[651,12,654,8],[651,13,654,9],[651,14,654,10],[651,16,654,12,"_$$_REQUIRE"],[651,27,654,12],[651,28,654,12,"_dependencyMap"],[651,42,654,12],[651,64,654,21,"isTaprootInput"],[651,78,654,35],[651,80,654,37,"input"],[651,85,654,42],[651,86,654,43],[651,88,655,6],[651,95,655,13],[651,99,655,17],[651,100,655,18,"_signTaprootInput"],[651,117,655,35],[651,118,656,8,"inputIndex"],[651,128,656,18],[651,130,657,8,"input"],[651,135,657,13],[651,137,658,8,"keyPair"],[651,144,658,15],[651,146,659,8,"tapLeafHashToSign"],[651,163,659,25],[651,165,660,8,"sighashTypes"],[651,177,661,6],[651,178,661,7],[652,8,662,4],[652,14,662,10],[652,18,662,14,"Error"],[652,23,662,19],[652,24,662,20],[652,34,662,30,"inputIndex"],[652,44,662,40],[652,70,662,66],[652,71,662,67],[653,6,663,2],[654,4,663,3],[655,6,663,3,"key"],[655,9,663,3],[656,6,663,3,"value"],[656,11,663,3],[656,13,664,2],[656,22,664,2,"_signInput"],[656,32,664,12,"_signInput"],[656,33,665,4,"inputIndex"],[656,43,665,14],[656,45,666,4,"keyPair"],[656,52,666,11],[656,54,668,4],[657,8,668,4],[657,12,667,4,"sighashTypes"],[657,24,667,16],[657,27,667,16,"arguments"],[657,36,667,16],[657,37,667,16,"length"],[657,43,667,16],[657,51,667,16,"arguments"],[657,60,667,16],[657,68,667,16,"undefined"],[657,77,667,16],[657,80,667,16,"arguments"],[657,89,667,16],[657,95,667,19],[657,96,667,20,"_$$_REQUIRE"],[657,107,667,20],[657,108,667,20,"_dependencyMap"],[657,122,667,20],[657,145,667,34,"Transaction"],[657,156,667,45],[657,157,667,46,"SIGHASH_ALL"],[657,168,667,57],[657,169,667,58],[658,8,669,4],[658,12,669,4,"_getHashAndSighashTyp"],[658,33,669,4],[658,36,669,34,"getHashAndSighashType"],[658,57,669,55],[658,58,670,6],[658,62,670,10],[658,63,670,11,"data"],[658,67,670,15],[658,68,670,16,"inputs"],[658,74,670,22],[658,76,671,6,"inputIndex"],[658,86,671,16],[658,88,672,6,"keyPair"],[658,95,672,13],[658,96,672,14,"publicKey"],[658,105,672,23],[658,107,673,6],[658,111,673,10],[658,112,673,11,"__CACHE"],[658,119,673,18],[658,121,674,6,"sighashTypes"],[658,133,675,4],[658,134,675,5],[659,10,669,12,"hash"],[659,14,669,16],[659,17,669,16,"_getHashAndSighashTyp"],[659,38,669,16],[659,39,669,12,"hash"],[659,43,669,16],[660,10,669,18,"sighashType"],[660,21,669,29],[660,24,669,29,"_getHashAndSighashTyp"],[660,45,669,29],[660,46,669,18,"sighashType"],[660,57,669,29],[661,8,676,4],[661,12,676,10,"partialSig"],[661,22,676,20],[661,25,676,23],[661,26,677,6],[662,10,678,8,"pubkey"],[662,16,678,14],[662,18,678,16,"keyPair"],[662,25,678,23],[662,26,678,24,"publicKey"],[662,35,678,33],[663,10,679,8,"signature"],[663,19,679,17],[663,21,679,19,"_$$_REQUIRE"],[663,32,679,19],[663,33,679,19,"_dependencyMap"],[663,47,679,19],[663,65,679,27,"signature"],[663,74,679,36],[663,75,679,37,"encode"],[663,81,679,43],[663,82,679,44,"keyPair"],[663,89,679,51],[663,90,679,52,"sign"],[663,94,679,56],[663,95,679,57,"hash"],[663,99,679,61],[663,100,679,62],[663,102,679,64,"sighashType"],[663,113,679,75],[664,8,680,6],[664,9,680,7],[664,10,681,5],[665,8,682,4],[665,12,682,8],[665,13,682,9,"data"],[665,17,682,13],[665,18,682,14,"updateInput"],[665,29,682,25],[665,30,682,26,"inputIndex"],[665,40,682,36],[665,42,682,38],[666,10,682,40,"partialSig"],[666,20,682,50],[666,22,682,40,"partialSig"],[667,8,682,51],[667,9,682,52],[667,10,682,53],[668,8,683,4],[668,15,683,11],[668,19,683,15],[669,6,684,2],[670,4,684,3],[671,6,684,3,"key"],[671,9,684,3],[672,6,684,3,"value"],[672,11,684,3],[672,13,685,2],[672,22,685,2,"_signTaprootInput"],[672,39,685,19,"_signTaprootInput"],[672,40,686,4,"inputIndex"],[672,50,686,14],[672,52,687,4,"input"],[672,57,687,9],[672,59,688,4,"keyPair"],[672,66,688,11],[672,68,689,4,"tapLeafHashToSign"],[672,85,689,21],[672,87,691,4],[673,8,691,4],[673,12,690,4,"allowedSighashTypes"],[673,31,690,23],[673,34,690,23,"arguments"],[673,43,690,23],[673,44,690,23,"length"],[673,50,690,23],[673,58,690,23,"arguments"],[673,67,690,23],[673,75,690,23,"undefined"],[673,84,690,23],[673,87,690,23,"arguments"],[673,96,690,23],[673,102,690,26],[673,103,690,27,"_$$_REQUIRE"],[673,114,690,27],[673,115,690,27,"_dependencyMap"],[673,129,690,27],[673,152,690,41,"Transaction"],[673,163,690,52],[673,164,690,53,"SIGHASH_DEFAULT"],[673,179,690,68],[673,180,690,69],[674,8,692,4],[674,12,692,10,"hashesForSig"],[674,24,692,22],[674,27,692,25],[674,31,692,29],[674,32,692,30,"checkTaprootHashesForSig"],[674,56,692,54],[674,57,693,6,"inputIndex"],[674,67,693,16],[674,69,694,6,"input"],[674,74,694,11],[674,76,695,6,"keyPair"],[674,83,695,13],[674,85,696,6,"tapLeafHashToSign"],[674,102,696,23],[674,104,697,6,"allowedSighashTypes"],[674,123,698,4],[674,124,698,5],[675,8,699,4],[675,12,699,10,"tapKeySig"],[675,21,699,19],[675,24,699,22,"hashesForSig"],[675,36,699,34],[675,37,700,7,"filter"],[675,43,700,13],[675,44,700,14],[675,54,700,14,"h"],[675,55,700,15],[676,10,700,15],[676,17,700,19],[676,18,700,20,"h"],[676,19,700,21],[676,20,700,22,"leafHash"],[676,28,700,30],[677,8,700,30],[677,10,700,31],[677,11,701,7,"map"],[677,14,701,10],[677,15,701,11],[677,25,701,11,"h"],[677,26,701,12],[678,10,701,12],[678,17,702,8],[678,18,702,9],[678,19,702,10],[678,21,702,12,"_$$_REQUIRE"],[678,32,702,12],[678,33,702,12,"_dependencyMap"],[678,47,702,12],[678,69,702,21,"serializeTaprootSignature"],[678,94,702,46],[678,96,703,10,"keyPair"],[678,103,703,17],[678,104,703,18,"signSchnorr"],[678,115,703,29],[678,116,703,30,"h"],[678,117,703,31],[678,118,703,32,"hash"],[678,122,703,36],[678,123,703,37],[678,125,704,10,"input"],[678,130,704,15],[678,131,704,16,"sighashType"],[678,142,705,8],[678,143,705,9],[679,8,705,9],[679,9,706,6],[679,10,706,7],[679,11,706,8],[679,12,706,9],[679,13,706,10],[680,8,707,4],[680,12,707,10,"tapScriptSig"],[680,24,707,22],[680,27,707,25,"hashesForSig"],[680,39,707,37],[680,40,708,7,"filter"],[680,46,708,13],[680,47,708,14],[680,57,708,14,"h"],[680,58,708,15],[681,10,708,15],[681,17,708,19],[681,18,708,20],[681,19,708,21,"h"],[681,20,708,22],[681,21,708,23,"leafHash"],[681,29,708,31],[682,8,708,31],[682,10,708,32],[682,11,709,7,"map"],[682,14,709,10],[682,15,709,11],[682,25,709,11,"h"],[682,26,709,12],[683,10,709,12],[683,17,709,17],[684,12,710,8,"pubkey"],[684,18,710,14],[684,20,710,16],[684,21,710,17],[684,22,710,18],[684,24,710,20,"_$$_REQUIRE"],[684,35,710,20],[684,36,710,20,"_dependencyMap"],[684,50,710,20],[684,72,710,29,"toXOnly"],[684,79,710,36],[684,81,710,38,"keyPair"],[684,88,710,45],[684,89,710,46,"publicKey"],[684,98,710,55],[684,99,710,56],[685,12,711,8,"signature"],[685,21,711,17],[685,23,711,19],[685,24,711,20],[685,25,711,21],[685,27,711,23,"_$$_REQUIRE"],[685,38,711,23],[685,39,711,23,"_dependencyMap"],[685,53,711,23],[685,75,711,32,"serializeTaprootSignature"],[685,100,711,57],[685,102,712,10,"keyPair"],[685,109,712,17],[685,110,712,18,"signSchnorr"],[685,121,712,29],[685,122,712,30,"h"],[685,123,712,31],[685,124,712,32,"hash"],[685,128,712,36],[685,129,712,37],[685,131,713,10,"input"],[685,136,713,15],[685,137,713,16,"sighashType"],[685,148,714,8],[685,149,714,9],[686,12,715,8,"leafHash"],[686,20,715,16],[686,22,715,18,"h"],[686,23,715,19],[686,24,715,20,"leafHash"],[687,10,716,6],[687,11,716,7],[688,8,716,7],[688,9,716,8],[688,10,716,9],[689,8,717,4],[689,12,717,8,"tapKeySig"],[689,21,717,17],[689,23,717,19],[690,10,718,6],[690,14,718,10],[690,15,718,11,"data"],[690,19,718,15],[690,20,718,16,"updateInput"],[690,31,718,27],[690,32,718,28,"inputIndex"],[690,42,718,38],[690,44,718,40],[691,12,718,42,"tapKeySig"],[691,21,718,51],[691,23,718,42,"tapKeySig"],[692,10,718,52],[692,11,718,53],[692,12,718,54],[693,8,719,4],[694,8,720,4],[694,12,720,8,"tapScriptSig"],[694,24,720,20],[694,25,720,21,"length"],[694,31,720,27],[694,33,720,29],[695,10,721,6],[695,14,721,10],[695,15,721,11,"data"],[695,19,721,15],[695,20,721,16,"updateInput"],[695,31,721,27],[695,32,721,28,"inputIndex"],[695,42,721,38],[695,44,721,40],[696,12,721,42,"tapScriptSig"],[696,24,721,54],[696,26,721,42,"tapScriptSig"],[697,10,721,55],[697,11,721,56],[697,12,721,57],[698,8,722,4],[699,8,723,4],[699,15,723,11],[699,19,723,15],[700,6,724,2],[701,4,724,3],[702,6,724,3,"key"],[702,9,724,3],[703,6,724,3,"value"],[703,11,724,3],[703,13,725,2],[703,22,725,2,"signInputAsync"],[703,36,725,16,"signInputAsync"],[703,37,725,17,"inputIndex"],[703,47,725,27],[703,49,725,29,"keyPair"],[703,56,725,36],[703,58,725,38,"sighashTypes"],[703,70,725,50],[703,72,725,52],[704,8,725,52],[704,12,725,52,"_this0"],[704,18,725,52],[705,8,726,4],[705,15,726,11,"Promise"],[705,22,726,18],[705,23,726,19,"resolve"],[705,30,726,26],[705,31,726,27],[705,32,726,28],[705,33,726,29,"then"],[705,37,726,33],[705,38,726,34],[705,50,726,40],[706,10,727,6],[706,14,727,10],[706,15,727,11,"keyPair"],[706,22,727,18],[706,26,727,22],[706,27,727,23,"keyPair"],[706,34,727,30],[706,35,727,31,"publicKey"],[706,44,727,40],[706,46,728,8],[706,52,728,14],[706,56,728,18,"Error"],[706,61,728,23],[706,62,728,24],[706,89,728,51],[706,90,728,52],[707,10,729,6],[707,14,729,12,"input"],[707,19,729,17],[707,22,729,20],[707,23,729,21],[707,24,729,22],[707,26,729,24,"_$$_REQUIRE"],[707,37,729,24],[707,38,729,24,"_dependencyMap"],[707,52,729,24],[707,82,729,32,"checkForInput"],[707,95,729,45],[707,97,729,47,"_this0"],[707,103,729,51],[707,104,729,52,"data"],[707,108,729,56],[707,109,729,57,"inputs"],[707,115,729,63],[707,117,729,65,"inputIndex"],[707,127,729,75],[707,128,729,76],[708,10,730,6],[708,14,730,10],[708,15,730,11],[708,16,730,12],[708,18,730,14,"_$$_REQUIRE"],[708,29,730,14],[708,30,730,14,"_dependencyMap"],[708,44,730,14],[708,66,730,23,"isTaprootInput"],[708,80,730,37],[708,82,730,39,"input"],[708,87,730,44],[708,88,730,45],[708,90,731,8],[708,97,731,15,"_this0"],[708,103,731,19],[708,104,731,20,"_signTaprootInputAsync"],[708,126,731,42],[708,127,732,10,"inputIndex"],[708,137,732,20],[708,139,733,10,"input"],[708,144,733,15],[708,146,734,10,"keyPair"],[708,153,734,17],[708,155,735,10,"undefined"],[708,164,735,19],[708,166,736,10,"sighashTypes"],[708,178,737,8],[708,179,737,9],[709,10,738,6],[709,17,738,13,"_this0"],[709,23,738,17],[709,24,738,18,"_signInputAsync"],[709,39,738,33],[709,40,738,34,"inputIndex"],[709,50,738,44],[709,52,738,46,"keyPair"],[709,59,738,53],[709,61,738,55,"sighashTypes"],[709,73,738,67],[709,74,738,68],[710,8,739,4],[710,9,739,5],[710,10,739,6],[711,6,740,2],[712,4,740,3],[713,6,740,3,"key"],[713,9,740,3],[714,6,740,3,"value"],[714,11,740,3],[714,13,741,2],[714,22,741,2,"signTaprootInputAsync"],[714,43,741,23,"signTaprootInputAsync"],[714,44,741,24,"inputIndex"],[714,54,741,34],[714,56,741,36,"keyPair"],[714,63,741,43],[714,65,741,45,"tapLeafHash"],[714,76,741,56],[714,78,741,58,"sighashTypes"],[714,90,741,70],[714,92,741,72],[715,8,741,72],[715,12,741,72,"_this1"],[715,18,741,72],[716,8,742,4],[716,15,742,11,"Promise"],[716,22,742,18],[716,23,742,19,"resolve"],[716,30,742,26],[716,31,742,27],[716,32,742,28],[716,33,742,29,"then"],[716,37,742,33],[716,38,742,34],[716,50,742,40],[717,10,743,6],[717,14,743,10],[717,15,743,11,"keyPair"],[717,22,743,18],[717,26,743,22],[717,27,743,23,"keyPair"],[717,34,743,30],[717,35,743,31,"publicKey"],[717,44,743,40],[717,46,744,8],[717,52,744,14],[717,56,744,18,"Error"],[717,61,744,23],[717,62,744,24],[717,89,744,51],[717,90,744,52],[718,10,745,6],[718,14,745,12,"input"],[718,19,745,17],[718,22,745,20],[718,23,745,21],[718,24,745,22],[718,26,745,24,"_$$_REQUIRE"],[718,37,745,24],[718,38,745,24,"_dependencyMap"],[718,52,745,24],[718,82,745,32,"checkForInput"],[718,95,745,45],[718,97,745,47,"_this1"],[718,103,745,51],[718,104,745,52,"data"],[718,108,745,56],[718,109,745,57,"inputs"],[718,115,745,63],[718,117,745,65,"inputIndex"],[718,127,745,75],[718,128,745,76],[719,10,746,6],[719,14,746,10],[719,15,746,11],[719,16,746,12],[719,18,746,14,"_$$_REQUIRE"],[719,29,746,14],[719,30,746,14,"_dependencyMap"],[719,44,746,14],[719,66,746,23,"isTaprootInput"],[719,80,746,37],[719,82,746,39,"input"],[719,87,746,44],[719,88,746,45],[719,90,747,8],[719,97,747,15,"_this1"],[719,103,747,19],[719,104,747,20,"_signTaprootInputAsync"],[719,126,747,42],[719,127,748,10,"inputIndex"],[719,137,748,20],[719,139,749,10,"input"],[719,144,749,15],[719,146,750,10,"keyPair"],[719,153,750,17],[719,155,751,10,"tapLeafHash"],[719,166,751,21],[719,168,752,10,"sighashTypes"],[719,180,753,8],[719,181,753,9],[720,10,754,6],[720,16,754,12],[720,20,754,16,"Error"],[720,25,754,21],[720,26,754,22],[720,36,754,32,"inputIndex"],[720,46,754,42],[720,72,754,68],[720,73,754,69],[721,8,755,4],[721,9,755,5],[721,10,755,6],[722,6,756,2],[723,4,756,3],[724,6,756,3,"key"],[724,9,756,3],[725,6,756,3,"value"],[725,11,756,3],[725,13,757,2],[725,22,757,2,"_signInputAsync"],[725,37,757,17,"_signInputAsync"],[725,38,758,4,"inputIndex"],[725,48,758,14],[725,50,759,4,"keyPair"],[725,57,759,11],[725,59,761,4],[726,8,761,4],[726,12,761,4,"_this10"],[726,19,761,4],[727,8,761,4],[727,12,760,4,"sighashTypes"],[727,24,760,16],[727,27,760,16,"arguments"],[727,36,760,16],[727,37,760,16,"length"],[727,43,760,16],[727,51,760,16,"arguments"],[727,60,760,16],[727,68,760,16,"undefined"],[727,77,760,16],[727,80,760,16,"arguments"],[727,89,760,16],[727,95,760,19],[727,96,760,20,"_$$_REQUIRE"],[727,107,760,20],[727,108,760,20,"_dependencyMap"],[727,122,760,20],[727,145,760,34,"Transaction"],[727,156,760,45],[727,157,760,46,"SIGHASH_ALL"],[727,168,760,57],[727,169,760,58],[728,8,762,4],[728,12,762,4,"_getHashAndSighashTyp2"],[728,34,762,4],[728,37,762,34,"getHashAndSighashType"],[728,58,762,55],[728,59,763,6],[728,63,763,10],[728,64,763,11,"data"],[728,68,763,15],[728,69,763,16,"inputs"],[728,75,763,22],[728,77,764,6,"inputIndex"],[728,87,764,16],[728,89,765,6,"keyPair"],[728,96,765,13],[728,97,765,14,"publicKey"],[728,106,765,23],[728,108,766,6],[728,112,766,10],[728,113,766,11,"__CACHE"],[728,120,766,18],[728,122,767,6,"sighashTypes"],[728,134,768,4],[728,135,768,5],[729,10,762,12,"hash"],[729,14,762,16],[729,17,762,16,"_getHashAndSighashTyp2"],[729,39,762,16],[729,40,762,12,"hash"],[729,44,762,16],[730,10,762,18,"sighashType"],[730,21,762,29],[730,24,762,29,"_getHashAndSighashTyp2"],[730,46,762,29],[730,47,762,18,"sighashType"],[730,58,762,29],[731,8,769,4],[731,15,769,11,"Promise"],[731,22,769,18],[731,23,769,19,"resolve"],[731,30,769,26],[731,31,769,27,"keyPair"],[731,38,769,34],[731,39,769,35,"sign"],[731,43,769,39],[731,44,769,40,"hash"],[731,48,769,44],[731,49,769,45],[731,50,769,46],[731,51,769,47,"then"],[731,55,769,51],[731,56,769,52],[731,66,769,52,"signature"],[731,75,769,61],[731,77,769,65],[732,10,770,6],[732,14,770,12,"partialSig"],[732,24,770,22],[732,27,770,25],[732,28,771,8],[733,12,772,10,"pubkey"],[733,18,772,16],[733,20,772,18,"keyPair"],[733,27,772,25],[733,28,772,26,"publicKey"],[733,37,772,35],[734,12,773,10,"signature"],[734,21,773,19],[734,23,773,21,"_$$_REQUIRE"],[734,34,773,21],[734,35,773,21,"_dependencyMap"],[734,49,773,21],[734,67,773,29,"signature"],[734,76,773,38],[734,77,773,39,"encode"],[734,83,773,45],[734,84,773,46,"signature"],[734,93,773,55],[734,95,773,57,"sighashType"],[734,106,773,68],[735,10,774,8],[735,11,774,9],[735,12,775,7],[736,10,776,6,"_this10"],[736,17,776,10],[736,18,776,11,"data"],[736,22,776,15],[736,23,776,16,"updateInput"],[736,34,776,27],[736,35,776,28,"inputIndex"],[736,45,776,38],[736,47,776,40],[737,12,776,42,"partialSig"],[737,22,776,52],[737,24,776,42,"partialSig"],[738,10,776,53],[738,11,776,54],[738,12,776,55],[739,8,777,4],[739,9,777,5],[739,10,777,6],[740,6,778,2],[741,4,778,3],[742,6,778,3,"key"],[742,9,778,3],[743,6,778,3,"value"],[743,11,778,3],[744,8,778,3],[744,12,778,3,"_signTaprootInputAsync2"],[744,35,778,3],[744,38,778,3,"_asyncToGenerator"],[744,55,778,3],[744,56,779,2],[744,67,780,4,"inputIndex"],[744,77,780,14],[744,79,781,4,"input"],[744,84,781,9],[744,86,782,4,"keyPair"],[744,93,782,11],[744,95,783,4,"tapLeafHash"],[744,106,783,15],[744,108,785,4],[745,10,785,4],[745,14,785,4,"_this11"],[745,21,785,4],[746,10,785,4],[746,14,784,4,"sighashTypes"],[746,26,784,16],[746,29,784,16,"arguments"],[746,38,784,16],[746,39,784,16,"length"],[746,45,784,16],[746,53,784,16,"arguments"],[746,62,784,16],[746,70,784,16,"undefined"],[746,79,784,16],[746,82,784,16,"arguments"],[746,91,784,16],[746,97,784,19],[746,98,784,20,"_$$_REQUIRE"],[746,109,784,20],[746,110,784,20,"_dependencyMap"],[746,124,784,20],[746,147,784,34,"Transaction"],[746,158,784,45],[746,159,784,46,"SIGHASH_DEFAULT"],[746,174,784,61],[746,175,784,62],[747,10,786,4],[747,14,786,10,"hashesForSig"],[747,26,786,22],[747,29,786,25],[747,33,786,29],[747,34,786,30,"checkTaprootHashesForSig"],[747,58,786,54],[747,59,787,6,"inputIndex"],[747,69,787,16],[747,71,788,6,"input"],[747,76,788,11],[747,78,789,6,"keyPair"],[747,85,789,13],[747,87,790,6,"tapLeafHash"],[747,98,790,17],[747,100,791,6,"sighashTypes"],[747,112,792,4],[747,113,792,5],[748,10,793,4],[748,14,793,10,"signaturePromises"],[748,31,793,27],[748,34,793,30],[748,36,793,32],[749,10,794,4],[749,14,794,10,"tapKeyHash"],[749,24,794,20],[749,27,794,23,"hashesForSig"],[749,39,794,35],[749,40,794,36,"filter"],[749,46,794,42],[749,47,794,43],[749,57,794,43,"h"],[749,58,794,44],[750,12,794,44],[750,19,794,48],[750,20,794,49,"h"],[750,21,794,50],[750,22,794,51,"leafHash"],[750,30,794,59],[751,10,794,59],[751,12,794,60],[751,13,794,61],[751,14,794,62],[751,15,794,63],[752,10,795,4],[752,14,795,8,"tapKeyHash"],[752,24,795,18],[752,26,795,20],[753,12,796,6],[753,16,796,12,"tapKeySigPromise"],[753,32,796,28],[753,35,796,31,"Promise"],[753,42,796,38],[753,43,796,39,"resolve"],[753,50,796,46],[753,51,797,8,"keyPair"],[753,58,797,15],[753,59,797,16,"signSchnorr"],[753,70,797,27],[753,71,797,28,"tapKeyHash"],[753,81,797,38],[753,82,797,39,"hash"],[753,86,797,43],[753,87,798,6],[753,88,798,7],[753,89,798,8,"then"],[753,93,798,12],[753,94,798,13],[753,104,798,13,"sig"],[753,107,798,16],[753,109,798,20],[754,14,799,8],[754,21,799,15],[755,16,800,10,"tapKeySig"],[755,25,800,19],[755,27,800,21],[755,28,800,22],[755,29,800,23],[755,31,800,25,"_$$_REQUIRE"],[755,42,800,25],[755,43,800,25,"_dependencyMap"],[755,57,800,25],[755,79,800,34,"serializeTaprootSignature"],[755,104,800,59],[755,106,801,12,"sig"],[755,109,801,15],[755,111,802,12,"input"],[755,116,802,17],[755,117,802,18,"sighashType"],[755,128,803,10],[756,14,804,8],[756,15,804,9],[757,12,805,6],[757,13,805,7],[757,14,805,8],[758,12,806,6,"signaturePromises"],[758,29,806,23],[758,30,806,24,"push"],[758,34,806,28],[758,35,806,29,"tapKeySigPromise"],[758,51,806,45],[758,52,806,46],[759,10,807,4],[760,10,808,4],[760,14,808,10,"tapScriptHashes"],[760,29,808,25],[760,32,808,28,"hashesForSig"],[760,44,808,40],[760,45,808,41,"filter"],[760,51,808,47],[760,52,808,48],[760,62,808,48,"h"],[760,63,808,49],[761,12,808,49],[761,19,808,53],[761,20,808,54],[761,21,808,55,"h"],[761,22,808,56],[761,23,808,57,"leafHash"],[761,31,808,65],[762,10,808,65],[762,12,808,66],[763,10,809,4],[763,14,809,8,"tapScriptHashes"],[763,29,809,23],[763,30,809,24,"length"],[763,36,809,30],[763,38,809,32],[764,12,810,6],[764,16,810,12,"tapScriptSigPromises"],[764,36,810,32],[764,39,810,35,"tapScriptHashes"],[764,54,810,50],[764,55,810,51,"map"],[764,58,810,54],[764,59,810,55],[764,69,810,55,"tsh"],[764,72,810,58],[764,74,810,62],[765,14,811,8],[765,21,811,15,"Promise"],[765,28,811,22],[765,29,811,23,"resolve"],[765,36,811,30],[765,37,811,31,"keyPair"],[765,44,811,38],[765,45,811,39,"signSchnorr"],[765,56,811,50],[765,57,811,51,"tsh"],[765,60,811,54],[765,61,811,55,"hash"],[765,65,811,59],[765,66,811,60],[765,67,811,61],[765,68,811,62,"then"],[765,72,811,66],[765,73,812,10],[765,83,812,10,"signature"],[765,92,812,19],[765,94,812,23],[766,16,813,12],[766,20,813,18,"tapScriptSig"],[766,32,813,30],[766,35,813,33],[766,36,814,14],[767,18,815,16,"pubkey"],[767,24,815,22],[767,26,815,24],[767,27,815,25],[767,28,815,26],[767,30,815,28,"_$$_REQUIRE"],[767,41,815,28],[767,42,815,28,"_dependencyMap"],[767,56,815,28],[767,78,815,37,"toXOnly"],[767,85,815,44],[767,87,815,46,"keyPair"],[767,94,815,53],[767,95,815,54,"publicKey"],[767,104,815,63],[767,105,815,64],[768,18,816,16,"signature"],[768,27,816,25],[768,29,816,27],[768,30,816,28],[768,31,816,29],[768,33,816,31,"_$$_REQUIRE"],[768,44,816,31],[768,45,816,31,"_dependencyMap"],[768,59,816,31],[768,81,816,40,"serializeTaprootSignature"],[768,106,816,65],[768,108,817,18,"signature"],[768,117,817,27],[768,119,818,18,"input"],[768,124,818,23],[768,125,818,24,"sighashType"],[768,136,819,16],[768,137,819,17],[769,18,820,16,"leafHash"],[769,26,820,24],[769,28,820,26,"tsh"],[769,31,820,29],[769,32,820,30,"leafHash"],[770,16,821,14],[770,17,821,15],[770,18,822,13],[771,16,823,12],[771,23,823,19],[772,18,823,21,"tapScriptSig"],[772,30,823,33],[772,32,823,21,"tapScriptSig"],[773,16,823,34],[773,17,823,35],[774,14,824,10],[774,15,825,8],[774,16,825,9],[775,12,826,6],[775,13,826,7],[775,14,826,8],[776,12,827,6,"signaturePromises"],[776,29,827,23],[776,30,827,24,"push"],[776,34,827,28],[776,35,827,28,"apply"],[776,40,827,28],[776,41,827,6,"signaturePromises"],[776,58,827,23],[776,60,827,23,"_toConsumableArray"],[776,78,827,23],[776,79,827,32,"tapScriptSigPromises"],[776,99,827,52],[776,101,827,53],[777,10,828,4],[778,10,829,4],[778,17,829,11,"Promise"],[778,24,829,18],[778,25,829,19,"all"],[778,28,829,22],[778,29,829,23,"signaturePromises"],[778,46,829,40],[778,47,829,41],[778,48,829,42,"then"],[778,52,829,46],[778,53,829,47],[778,63,829,47,"results"],[778,70,829,54],[778,72,829,58],[779,12,830,6,"results"],[779,19,830,13],[779,20,830,14,"forEach"],[779,27,830,21],[779,28,830,22],[779,38,830,22,"v"],[779,39,830,23],[780,14,830,23],[780,21,830,27,"_this11"],[780,28,830,31],[780,29,830,32,"data"],[780,33,830,36],[780,34,830,37,"updateInput"],[780,45,830,48],[780,46,830,49,"inputIndex"],[780,56,830,59],[780,58,830,61,"v"],[780,59,830,62],[780,60,830,63],[781,12,830,63],[781,14,830,64],[782,10,831,4],[782,11,831,5],[782,12,831,6],[783,8,832,2],[783,9,832,3],[784,8,832,3],[784,17,779,8,"_signTaprootInputAsync"],[784,39,779,30,"_signTaprootInputAsync"],[784,40,779,30,"_x"],[784,42,779,30],[784,44,779,30,"_x2"],[784,47,779,30],[784,49,779,30,"_x3"],[784,52,779,30],[784,54,779,30,"_x4"],[784,57,779,30],[785,10,779,30],[785,17,779,30,"_signTaprootInputAsync2"],[785,40,779,30],[785,41,779,30,"apply"],[785,46,779,30],[785,53,779,30,"arguments"],[785,62,779,30],[786,8,779,30],[787,8,779,30],[787,15,779,8,"_signTaprootInputAsync"],[787,37,779,30],[788,6,779,30],[789,4,779,30],[790,6,779,30,"key"],[790,9,779,30],[791,6,779,30,"value"],[791,11,779,30],[791,13,833,2],[791,22,833,2,"checkTaprootHashesForSig"],[791,46,833,26,"checkTaprootHashesForSig"],[791,47,834,4,"inputIndex"],[791,57,834,14],[791,59,835,4,"input"],[791,64,835,9],[791,66,836,4,"keyPair"],[791,73,836,11],[791,75,837,4,"tapLeafHashToSign"],[791,92,837,21],[791,94,838,4,"allowedSighashTypes"],[791,113,838,23],[791,115,839,4],[792,8,840,4],[792,12,840,8],[792,19,840,15,"keyPair"],[792,26,840,22],[792,27,840,23,"signSchnorr"],[792,38,840,34],[792,43,840,39],[792,53,840,49],[792,55,841,6],[792,61,841,12],[792,65,841,16,"Error"],[792,70,841,21],[792,71,842,8],[792,117,842,54,"inputIndex"],[792,127,842,64],[792,130,843,6],[792,131,843,7],[793,8,844,4],[793,12,844,10,"hashesForSig"],[793,24,844,22],[793,27,844,25,"getTaprootHashesForSig"],[793,49,844,47],[793,50,845,6,"inputIndex"],[793,60,845,16],[793,62,846,6,"input"],[793,67,846,11],[793,69,847,6],[793,73,847,10],[793,74,847,11,"data"],[793,78,847,15],[793,79,847,16,"inputs"],[793,85,847,22],[793,87,848,6,"keyPair"],[793,94,848,13],[793,95,848,14,"publicKey"],[793,104,848,23],[793,106,849,6],[793,110,849,10],[793,111,849,11,"__CACHE"],[793,118,849,18],[793,120,850,6,"tapLeafHashToSign"],[793,137,850,23],[793,139,851,6,"allowedSighashTypes"],[793,158,852,4],[793,159,852,5],[794,8,853,4],[794,12,853,8],[794,13,853,9,"hashesForSig"],[794,25,853,21],[794,29,853,25],[794,30,853,26,"hashesForSig"],[794,42,853,38],[794,43,853,39,"length"],[794,49,853,45],[794,51,854,6],[794,57,854,12],[794,61,854,16,"Error"],[794,66,854,21],[794,67,855,8],[794,94,855,35,"inputIndex"],[794,104,855,45],[794,121,855,62,"keyPair"],[794,128,855,69],[794,129,855,70,"publicKey"],[794,138,855,79],[794,139,855,80,"toString"],[794,147,855,88],[794,148,856,10],[794,153,857,8],[794,154,857,9],[794,156,858,6],[794,157,858,7],[795,8,859,4],[795,15,859,11,"hashesForSig"],[795,27,859,23],[796,6,860,2],[797,4,860,3],[798,6,860,3,"key"],[798,9,860,3],[799,6,860,3,"value"],[799,11,860,3],[799,13,861,2],[799,22,861,2,"toBuffer"],[799,30,861,10,"toBuffer"],[799,31,861,10],[799,33,861,13],[800,8,862,4,"checkCache"],[800,18,862,14],[800,19,862,15],[800,23,862,19],[800,24,862,20,"__CACHE"],[800,31,862,27],[800,32,862,28],[801,8,863,4],[801,15,863,11],[801,19,863,15],[801,20,863,16,"data"],[801,24,863,20],[801,25,863,21,"toBuffer"],[801,33,863,29],[801,34,863,30],[801,35,863,31],[802,6,864,2],[803,4,864,3],[804,6,864,3,"key"],[804,9,864,3],[805,6,864,3,"value"],[805,11,864,3],[805,13,865,2],[805,22,865,2,"toHex"],[805,27,865,7,"toHex"],[805,28,865,7],[805,30,865,10],[806,8,866,4,"checkCache"],[806,18,866,14],[806,19,866,15],[806,23,866,19],[806,24,866,20,"__CACHE"],[806,31,866,27],[806,32,866,28],[807,8,867,4],[807,15,867,11],[807,19,867,15],[807,20,867,16,"data"],[807,24,867,20],[807,25,867,21,"toHex"],[807,30,867,26],[807,31,867,27],[807,32,867,28],[808,6,868,2],[809,4,868,3],[810,6,868,3,"key"],[810,9,868,3],[811,6,868,3,"value"],[811,11,868,3],[811,13,869,2],[811,22,869,2,"toBase64"],[811,30,869,10,"toBase64"],[811,31,869,10],[811,33,869,13],[812,8,870,4,"checkCache"],[812,18,870,14],[812,19,870,15],[812,23,870,19],[812,24,870,20,"__CACHE"],[812,31,870,27],[812,32,870,28],[813,8,871,4],[813,15,871,11],[813,19,871,15],[813,20,871,16,"data"],[813,24,871,20],[813,25,871,21,"toBase64"],[813,33,871,29],[813,34,871,30],[813,35,871,31],[814,6,872,2],[815,4,872,3],[816,6,872,3,"key"],[816,9,872,3],[817,6,872,3,"value"],[817,11,872,3],[817,13,873,2],[817,22,873,2,"updateGlobal"],[817,34,873,14,"updateGlobal"],[817,35,873,15,"updateData"],[817,45,873,25],[817,47,873,27],[818,8,874,4],[818,12,874,8],[818,13,874,9,"data"],[818,17,874,13],[818,18,874,14,"updateGlobal"],[818,30,874,26],[818,31,874,27,"updateData"],[818,41,874,37],[818,42,874,38],[819,8,875,4],[819,15,875,11],[819,19,875,15],[820,6,876,2],[821,4,876,3],[822,6,876,3,"key"],[822,9,876,3],[823,6,876,3,"value"],[823,11,876,3],[823,13,877,2],[823,22,877,2,"updateInput"],[823,33,877,13,"updateInput"],[823,34,877,14,"inputIndex"],[823,44,877,24],[823,46,877,26,"updateData"],[823,56,877,36],[823,58,877,38],[824,8,878,4],[824,12,878,8,"updateData"],[824,22,878,18],[824,23,878,19,"witnessScript"],[824,36,878,32],[824,38,878,34,"checkInvalidP2WSH"],[824,55,878,51],[824,56,878,52,"updateData"],[824,66,878,62],[824,67,878,63,"witnessScript"],[824,80,878,76],[824,81,878,77],[825,8,879,4],[825,9,879,5],[825,10,879,6],[825,12,879,8,"_$$_REQUIRE"],[825,23,879,8],[825,24,879,8,"_dependencyMap"],[825,38,879,8],[825,60,879,17,"checkTaprootInputFields"],[825,83,879,40],[825,85,880,6],[825,89,880,10],[825,90,880,11,"data"],[825,94,880,15],[825,95,880,16,"inputs"],[825,101,880,22],[825,102,880,23,"inputIndex"],[825,112,880,33],[825,113,880,34],[825,115,881,6,"updateData"],[825,125,881,16],[825,127,882,6],[825,140,883,4],[825,141,883,5],[826,8,884,4],[826,12,884,8],[826,13,884,9,"data"],[826,17,884,13],[826,18,884,14,"updateInput"],[826,29,884,25],[826,30,884,26,"inputIndex"],[826,40,884,36],[826,42,884,38,"updateData"],[826,52,884,48],[826,53,884,49],[827,8,885,4],[827,12,885,8,"updateData"],[827,22,885,18],[827,23,885,19,"nonWitnessUtxo"],[827,37,885,33],[827,39,885,35],[828,10,886,6,"addNonWitnessTxCache"],[828,30,886,26],[828,31,887,8],[828,35,887,12],[828,36,887,13,"__CACHE"],[828,43,887,20],[828,45,888,8],[828,49,888,12],[828,50,888,13,"data"],[828,54,888,17],[828,55,888,18,"inputs"],[828,61,888,24],[828,62,888,25,"inputIndex"],[828,72,888,35],[828,73,888,36],[828,75,889,8,"inputIndex"],[828,85,890,6],[828,86,890,7],[829,8,891,4],[830,8,892,4],[830,15,892,11],[830,19,892,15],[831,6,893,2],[832,4,893,3],[833,6,893,3,"key"],[833,9,893,3],[834,6,893,3,"value"],[834,11,893,3],[834,13,894,2],[834,22,894,2,"updateOutput"],[834,34,894,14,"updateOutput"],[834,35,894,15,"outputIndex"],[834,46,894,26],[834,48,894,28,"updateData"],[834,58,894,38],[834,60,894,40],[835,8,895,4],[835,12,895,10,"outputData"],[835,22,895,20],[835,25,895,23],[835,29,895,27],[835,30,895,28,"data"],[835,34,895,32],[835,35,895,33,"outputs"],[835,42,895,40],[835,43,895,41,"outputIndex"],[835,54,895,52],[835,55,895,53],[836,8,896,4],[836,9,896,5],[836,10,896,6],[836,12,896,8,"_$$_REQUIRE"],[836,23,896,8],[836,24,896,8,"_dependencyMap"],[836,38,896,8],[836,60,896,17,"checkTaprootOutputFields"],[836,84,896,41],[836,86,897,6,"outputData"],[836,96,897,16],[836,98,898,6,"updateData"],[836,108,898,16],[836,110,899,6],[836,124,900,4],[836,125,900,5],[837,8,901,4],[837,12,901,8],[837,13,901,9,"data"],[837,17,901,13],[837,18,901,14,"updateOutput"],[837,30,901,26],[837,31,901,27,"outputIndex"],[837,42,901,38],[837,44,901,40,"updateData"],[837,54,901,50],[837,55,901,51],[838,8,902,4],[838,15,902,11],[838,19,902,15],[839,6,903,2],[840,4,903,3],[841,6,903,3,"key"],[841,9,903,3],[842,6,903,3,"value"],[842,11,903,3],[842,13,904,2],[842,22,904,2,"addUnknownKeyValToGlobal"],[842,46,904,26,"addUnknownKeyValToGlobal"],[842,47,904,27,"keyVal"],[842,53,904,33],[842,55,904,35],[843,8,905,4],[843,12,905,8],[843,13,905,9,"data"],[843,17,905,13],[843,18,905,14,"addUnknownKeyValToGlobal"],[843,42,905,38],[843,43,905,39,"keyVal"],[843,49,905,45],[843,50,905,46],[844,8,906,4],[844,15,906,11],[844,19,906,15],[845,6,907,2],[846,4,907,3],[847,6,907,3,"key"],[847,9,907,3],[848,6,907,3,"value"],[848,11,907,3],[848,13,908,2],[848,22,908,2,"addUnknownKeyValToInput"],[848,45,908,25,"addUnknownKeyValToInput"],[848,46,908,26,"inputIndex"],[848,56,908,36],[848,58,908,38,"keyVal"],[848,64,908,44],[848,66,908,46],[849,8,909,4],[849,12,909,8],[849,13,909,9,"data"],[849,17,909,13],[849,18,909,14,"addUnknownKeyValToInput"],[849,41,909,37],[849,42,909,38,"inputIndex"],[849,52,909,48],[849,54,909,50,"keyVal"],[849,60,909,56],[849,61,909,57],[850,8,910,4],[850,15,910,11],[850,19,910,15],[851,6,911,2],[852,4,911,3],[853,6,911,3,"key"],[853,9,911,3],[854,6,911,3,"value"],[854,11,911,3],[854,13,912,2],[854,22,912,2,"addUnknownKeyValToOutput"],[854,46,912,26,"addUnknownKeyValToOutput"],[854,47,912,27,"outputIndex"],[854,58,912,38],[854,60,912,40,"keyVal"],[854,66,912,46],[854,68,912,48],[855,8,913,4],[855,12,913,8],[855,13,913,9,"data"],[855,17,913,13],[855,18,913,14,"addUnknownKeyValToOutput"],[855,42,913,38],[855,43,913,39,"outputIndex"],[855,54,913,50],[855,56,913,52,"keyVal"],[855,62,913,58],[855,63,913,59],[856,8,914,4],[856,15,914,11],[856,19,914,15],[857,6,915,2],[858,4,915,3],[859,6,915,3,"key"],[859,9,915,3],[860,6,915,3,"value"],[860,11,915,3],[860,13,916,2],[860,22,916,2,"clearFinalizedInput"],[860,41,916,21,"clearFinalizedInput"],[860,42,916,22,"inputIndex"],[860,52,916,32],[860,54,916,34],[861,8,917,4],[861,12,917,8],[861,13,917,9,"data"],[861,17,917,13],[861,18,917,14,"clearFinalizedInput"],[861,37,917,33],[861,38,917,34,"inputIndex"],[861,48,917,44],[861,49,917,45],[862,8,918,4],[862,15,918,11],[862,19,918,15],[863,6,919,2],[864,4,919,3],[865,6,919,3,"key"],[865,9,919,3],[866,6,919,3,"value"],[866,11,919,3],[866,13,70,2],[866,22,70,9,"fromBase64"],[866,32,70,19,"fromBase64"],[866,33,70,20,"data"],[866,37,70,24],[866,39,70,37],[867,8,70,37],[867,12,70,26,"opts"],[867,16,70,30],[867,19,70,30,"arguments"],[867,28,70,30],[867,29,70,30,"length"],[867,35,70,30],[867,43,70,30,"arguments"],[867,52,70,30],[867,60,70,30,"undefined"],[867,69,70,30],[867,72,70,30,"arguments"],[867,81,70,30],[867,87,70,33],[867,88,70,34],[867,89,70,35],[868,8,71,4],[868,12,71,10,"buffer"],[868,18,71,16],[868,21,71,19,"Buffer"],[868,27,71,25],[868,28,71,26,"from"],[868,32,71,30],[868,33,71,31,"data"],[868,37,71,35],[868,39,71,37],[868,47,71,45],[868,48,71,46],[869,8,72,4],[869,15,72,11],[869,19,72,15],[869,20,72,16,"fromBuffer"],[869,30,72,26],[869,31,72,27,"buffer"],[869,37,72,33],[869,39,72,35,"opts"],[869,43,72,39],[869,44,72,40],[870,6,73,2],[871,4,73,3],[872,6,73,3,"key"],[872,9,73,3],[873,6,73,3,"value"],[873,11,73,3],[873,13,74,2],[873,22,74,9,"fromHex"],[873,29,74,16,"fromHex"],[873,30,74,17,"data"],[873,34,74,21],[873,36,74,34],[874,8,74,34],[874,12,74,23,"opts"],[874,16,74,27],[874,19,74,27,"arguments"],[874,28,74,27],[874,29,74,27,"length"],[874,35,74,27],[874,43,74,27,"arguments"],[874,52,74,27],[874,60,74,27,"undefined"],[874,69,74,27],[874,72,74,27,"arguments"],[874,81,74,27],[874,87,74,30],[874,88,74,31],[874,89,74,32],[875,8,75,4],[875,12,75,10,"buffer"],[875,18,75,16],[875,21,75,19,"Buffer"],[875,27,75,25],[875,28,75,26,"from"],[875,32,75,30],[875,33,75,31,"data"],[875,37,75,35],[875,39,75,37],[875,44,75,42],[875,45,75,43],[876,8,76,4],[876,15,76,11],[876,19,76,15],[876,20,76,16,"fromBuffer"],[876,30,76,26],[876,31,76,27,"buffer"],[876,37,76,33],[876,39,76,35,"opts"],[876,43,76,39],[876,44,76,40],[877,6,77,2],[878,4,77,3],[879,6,77,3,"key"],[879,9,77,3],[880,6,77,3,"value"],[880,11,77,3],[880,13,78,2],[880,22,78,9,"fromBuffer"],[880,32,78,19,"fromBuffer"],[880,33,78,20,"buffer"],[880,39,78,26],[880,41,78,39],[881,8,78,39],[881,12,78,28,"opts"],[881,16,78,32],[881,19,78,32,"arguments"],[881,28,78,32],[881,29,78,32,"length"],[881,35,78,32],[881,43,78,32,"arguments"],[881,52,78,32],[881,60,78,32,"undefined"],[881,69,78,32],[881,72,78,32,"arguments"],[881,81,78,32],[881,87,78,35],[881,88,78,36],[881,89,78,37],[882,8,79,4],[882,12,79,10,"psbtBase"],[882,20,79,18],[882,23,79,21,"_$$_REQUIRE"],[882,34,79,21],[882,35,79,21,"_dependencyMap"],[882,49,79,21],[882,64,79,30,"Psbt"],[882,68,79,34],[882,69,79,35,"fromBuffer"],[882,79,79,45],[882,80,79,46,"buffer"],[882,86,79,52],[882,88,79,54,"transactionFromBuffer"],[882,109,79,75],[882,110,79,76],[883,8,80,4],[883,12,80,10,"psbt"],[883,16,80,14],[883,19,80,17],[883,23,80,21,"Psbt"],[883,27,80,25],[883,28,80,26,"opts"],[883,32,80,30],[883,34,80,32,"psbtBase"],[883,42,80,40],[883,43,80,41],[884,8,81,4,"checkTxForDupeIns"],[884,25,81,21],[884,26,81,22,"psbt"],[884,30,81,26],[884,31,81,27,"__CACHE"],[884,38,81,34],[884,39,81,35,"__TX"],[884,43,81,39],[884,45,81,41,"psbt"],[884,49,81,45],[884,50,81,46,"__CACHE"],[884,57,81,53],[884,58,81,54],[885,8,82,4],[885,15,82,11,"psbt"],[885,19,82,15],[886,6,83,2],[887,4,83,3],[888,2,83,3],[889,2,921,0,"exports"],[889,9,921,7],[889,10,921,8,"Psbt"],[889,14,921,12],[889,17,921,15,"Psbt"],[889,21,921,19],[890,2,922,0],[891,0,923,0],[892,0,924,0],[893,0,925,0],[894,0,926,0],[895,2,927,0],[895,6,927,6,"transactionFromBuffer"],[895,27,927,27],[895,30,927,30],[895,39,927,6,"transactionFromBuffer"],[895,60,927,27,"transactionFromBuffer"],[895,61,927,30,"buffer"],[895,67,927,36],[896,4,927,36],[896,11,927,40],[896,15,927,44,"PsbtTransaction"],[896,30,927,59],[896,31,927,60,"buffer"],[896,37,927,66],[896,38,927,67],[897,2,927,67],[898,2,928,0],[899,0,929,0],[900,0,930,0],[901,0,931,0],[902,2,928,0],[902,6,932,6,"PsbtTransaction"],[902,21,932,21],[903,4,933,2],[903,13,933,2,"PsbtTransaction"],[903,29,933,2],[903,31,933,68],[904,6,933,68],[904,10,933,14,"buffer"],[904,16,933,20],[904,19,933,20,"arguments"],[904,28,933,20],[904,29,933,20,"length"],[904,35,933,20],[904,43,933,20,"arguments"],[904,52,933,20],[904,60,933,20,"undefined"],[904,69,933,20],[904,72,933,20,"arguments"],[904,81,933,20],[904,87,933,23,"Buffer"],[904,93,933,29],[904,94,933,30,"from"],[904,98,933,34],[904,99,933,35],[904,100,933,36],[904,101,933,37],[904,103,933,39],[904,104,933,40],[904,106,933,42],[904,107,933,43],[904,109,933,45],[904,110,933,46],[904,112,933,48],[904,113,933,49],[904,115,933,51],[904,116,933,52],[904,118,933,54],[904,119,933,55],[904,121,933,57],[904,122,933,58],[904,124,933,60],[904,125,933,61],[904,127,933,63],[904,128,933,64],[904,129,933,65],[904,130,933,66],[905,6,933,66,"_classCallCheck"],[905,21,933,66],[905,28,933,66,"PsbtTransaction"],[905,43,933,66],[906,6,934,4],[906,10,934,8],[906,11,934,9,"tx"],[906,13,934,11],[906,16,934,14,"_$$_REQUIRE"],[906,27,934,14],[906,28,934,14,"_dependencyMap"],[906,42,934,14],[906,65,934,28,"Transaction"],[906,76,934,39],[906,77,934,40,"fromBuffer"],[906,87,934,50],[906,88,934,51,"buffer"],[906,94,934,57],[906,95,934,58],[907,6,935,4,"checkTxEmpty"],[907,18,935,16],[907,19,935,17],[907,23,935,21],[907,24,935,22,"tx"],[907,26,935,24],[907,27,935,25],[908,6,936,4,"Object"],[908,12,936,10],[908,13,936,11,"defineProperty"],[908,27,936,25],[908,28,936,26],[908,32,936,30],[908,34,936,32],[908,38,936,36],[908,40,936,38],[909,8,937,6,"enumerable"],[909,18,937,16],[909,20,937,18],[909,25,937,23],[910,8,938,6,"writable"],[910,16,938,14],[910,18,938,16],[911,6,939,4],[911,7,939,5],[911,8,939,6],[912,4,940,2],[913,4,940,3],[913,11,940,3,"_createClass"],[913,23,940,3],[913,24,940,3,"PsbtTransaction"],[913,39,940,3],[914,6,940,3,"key"],[914,9,940,3],[915,6,940,3,"value"],[915,11,940,3],[915,13,941,2],[915,22,941,2,"getInputOutputCounts"],[915,42,941,22,"getInputOutputCounts"],[915,43,941,22],[915,45,941,25],[916,8,942,4],[916,15,942,11],[917,10,943,6,"inputCount"],[917,20,943,16],[917,22,943,18],[917,26,943,22],[917,27,943,23,"tx"],[917,29,943,25],[917,30,943,26,"ins"],[917,33,943,29],[917,34,943,30,"length"],[917,40,943,36],[918,10,944,6,"outputCount"],[918,21,944,17],[918,23,944,19],[918,27,944,23],[918,28,944,24,"tx"],[918,30,944,26],[918,31,944,27,"outs"],[918,35,944,31],[918,36,944,32,"length"],[919,8,945,4],[919,9,945,5],[920,6,946,2],[921,4,946,3],[922,6,946,3,"key"],[922,9,946,3],[923,6,946,3,"value"],[923,11,946,3],[923,13,947,2],[923,22,947,2,"addInput"],[923,30,947,10,"addInput"],[923,31,947,11,"input"],[923,36,947,16],[923,38,947,18],[924,8,948,4],[924,12,949,6,"input"],[924,17,949,11],[924,18,949,12,"hash"],[924,22,949,16],[924,27,949,21,"undefined"],[924,36,949,30],[924,40,950,6,"input"],[924,45,950,11],[924,46,950,12,"index"],[924,51,950,17],[924,56,950,22,"undefined"],[924,65,950,31],[924,69,951,7],[924,70,951,8,"Buffer"],[924,76,951,14],[924,77,951,15,"isBuffer"],[924,85,951,23],[924,86,951,24,"input"],[924,91,951,29],[924,92,951,30,"hash"],[924,96,951,34],[924,97,951,35],[924,101,951,39],[924,108,951,46,"input"],[924,113,951,51],[924,114,951,52,"hash"],[924,118,951,56],[924,123,951,61],[924,131,951,70],[924,135,952,6],[924,142,952,13,"input"],[924,147,952,18],[924,148,952,19,"index"],[924,153,952,24],[924,158,952,29],[924,166,952,37],[924,168,953,6],[925,10,954,6],[925,16,954,12],[925,20,954,16,"Error"],[925,25,954,21],[925,26,954,22],[925,47,954,43],[925,48,954,44],[926,8,955,4],[927,8,956,4],[927,12,956,10,"hash"],[927,16,956,14],[927,19,957,6],[927,26,957,13,"input"],[927,31,957,18],[927,32,957,19,"hash"],[927,36,957,23],[927,41,957,28],[927,49,957,36],[927,52,958,10],[927,53,958,11],[927,54,958,12],[927,56,958,14,"_$$_REQUIRE"],[927,67,958,14],[927,68,958,14,"_dependencyMap"],[927,82,958,14],[927,104,958,28,"reverseBuffer"],[927,117,958,41],[927,119,958,43,"Buffer"],[927,125,958,49],[927,126,958,50,"from"],[927,130,958,54],[927,131,958,55,"input"],[927,136,958,60],[927,137,958,61,"hash"],[927,141,958,65],[927,143,958,67],[927,148,958,72],[927,149,958,73],[927,150,958,74],[927,153,959,10,"input"],[927,158,959,15],[927,159,959,16,"hash"],[927,163,959,20],[928,8,960,4],[928,12,960,8],[928,13,960,9,"tx"],[928,15,960,11],[928,16,960,12,"addInput"],[928,24,960,20],[928,25,960,21,"hash"],[928,29,960,25],[928,31,960,27,"input"],[928,36,960,32],[928,37,960,33,"index"],[928,42,960,38],[928,44,960,40,"input"],[928,49,960,45],[928,50,960,46,"sequence"],[928,58,960,54],[928,59,960,55],[929,6,961,2],[930,4,961,3],[931,6,961,3,"key"],[931,9,961,3],[932,6,961,3,"value"],[932,11,961,3],[932,13,962,2],[932,22,962,2,"addOutput"],[932,31,962,11,"addOutput"],[932,32,962,12,"output"],[932,38,962,18],[932,40,962,20],[933,8,963,4],[933,12,964,6,"output"],[933,18,964,12],[933,19,964,13,"script"],[933,25,964,19],[933,30,964,24,"undefined"],[933,39,964,33],[933,43,965,6,"output"],[933,49,965,12],[933,50,965,13,"value"],[933,55,965,18],[933,60,965,23,"undefined"],[933,69,965,32],[933,73,966,6],[933,74,966,7,"Buffer"],[933,80,966,13],[933,81,966,14,"isBuffer"],[933,89,966,22],[933,90,966,23,"output"],[933,96,966,29],[933,97,966,30,"script"],[933,103,966,36],[933,104,966,37],[933,108,967,6],[933,115,967,13,"output"],[933,121,967,19],[933,122,967,20,"value"],[933,127,967,25],[933,132,967,30],[933,140,967,38],[933,142,968,6],[934,10,969,6],[934,16,969,12],[934,20,969,16,"Error"],[934,25,969,21],[934,26,969,22],[934,48,969,44],[934,49,969,45],[935,8,970,4],[936,8,971,4],[936,12,971,8],[936,13,971,9,"tx"],[936,15,971,11],[936,16,971,12,"addOutput"],[936,25,971,21],[936,26,971,22,"output"],[936,32,971,28],[936,33,971,29,"script"],[936,39,971,35],[936,41,971,37,"output"],[936,47,971,43],[936,48,971,44,"value"],[936,53,971,49],[936,54,971,50],[937,6,972,2],[938,4,972,3],[939,6,972,3,"key"],[939,9,972,3],[940,6,972,3,"value"],[940,11,972,3],[940,13,973,2],[940,22,973,2,"toBuffer"],[940,30,973,10,"toBuffer"],[940,31,973,10],[940,33,973,13],[941,8,974,4],[941,15,974,11],[941,19,974,15],[941,20,974,16,"tx"],[941,22,974,18],[941,23,974,19,"toBuffer"],[941,31,974,27],[941,32,974,28],[941,33,974,29],[942,6,975,2],[943,4,975,3],[944,2,975,3],[945,2,977,0],[945,11,977,9,"canFinalize"],[945,22,977,20,"canFinalize"],[945,23,977,21,"input"],[945,28,977,26],[945,30,977,28,"script"],[945,36,977,34],[945,38,977,36,"scriptType"],[945,48,977,46],[945,50,977,48],[946,4,978,2],[946,12,978,10,"scriptType"],[946,22,978,20],[947,6,979,4],[947,11,979,9],[947,19,979,17],[948,6,980,4],[948,11,980,9],[948,23,980,21],[949,6,981,4],[949,11,981,9],[949,30,981,28],[950,8,982,6],[950,15,982,13,"hasSigs"],[950,22,982,20],[950,23,982,21],[950,24,982,22],[950,26,982,24,"input"],[950,31,982,29],[950,32,982,30,"partialSig"],[950,42,982,40],[950,43,982,41],[951,6,983,4],[951,11,983,9],[951,21,983,19],[952,8,984,6],[952,12,984,12,"p2ms"],[952,16,984,16],[952,19,984,19,"_$$_REQUIRE"],[952,30,984,19],[952,31,984,19,"_dependencyMap"],[952,45,984,19],[952,65,984,28,"p2ms"],[952,69,984,32],[952,70,984,33],[953,10,984,35,"output"],[953,16,984,41],[953,18,984,43,"script"],[954,8,984,50],[954,9,984,51],[954,10,984,52],[955,8,985,6],[955,15,985,13,"hasSigs"],[955,22,985,20],[955,23,985,21,"p2ms"],[955,27,985,25],[955,28,985,26,"m"],[955,29,985,27],[955,31,985,29,"input"],[955,36,985,34],[955,37,985,35,"partialSig"],[955,47,985,45],[955,49,985,47,"p2ms"],[955,53,985,51],[955,54,985,52,"pubkeys"],[955,61,985,59],[955,62,985,60],[956,6,986,4],[957,8,987,6],[957,15,987,13],[957,20,987,18],[958,4,988,2],[959,2,989,0],[960,2,990,0],[960,11,990,9,"checkCache"],[960,21,990,19,"checkCache"],[960,22,990,20,"cache"],[960,27,990,25],[960,29,990,27],[961,4,991,2],[961,8,991,6,"cache"],[961,13,991,11],[961,14,991,12,"__UNSAFE_SIGN_NONSEGWIT"],[961,37,991,35],[961,42,991,40],[961,47,991,45],[961,49,991,47],[962,6,992,4],[962,12,992,10],[962,16,992,14,"Error"],[962,21,992,19],[962,22,992,20],[962,60,992,58],[962,61,992,59],[963,4,993,2],[964,2,994,0],[965,2,995,0],[965,11,995,9,"hasSigs"],[965,18,995,16,"hasSigs"],[965,19,995,17,"neededSigs"],[965,29,995,27],[965,31,995,29,"partialSig"],[965,41,995,39],[965,43,995,41,"pubkeys"],[965,50,995,48],[965,52,995,50],[966,4,996,2],[966,8,996,6],[966,9,996,7,"partialSig"],[966,19,996,17],[966,21,996,19],[966,28,996,26],[966,33,996,31],[967,4,997,2],[967,8,997,6,"sigs"],[967,12,997,10],[968,4,998,2],[968,8,998,6,"pubkeys"],[968,15,998,13],[968,17,998,15],[969,6,999,4,"sigs"],[969,10,999,8],[969,13,999,11,"pubkeys"],[969,20,999,18],[969,21,1000,7,"map"],[969,24,1000,10],[969,25,1000,11],[969,35,1000,11,"pkey"],[969,39,1000,15],[969,41,1000,19],[970,8,1001,8],[970,12,1001,14,"pubkey"],[970,18,1001,20],[970,21,1001,23,"compressPubkey"],[970,35,1001,37],[970,36,1001,38,"pkey"],[970,40,1001,42],[970,41,1001,43],[971,8,1002,8],[971,15,1002,15,"partialSig"],[971,25,1002,25],[971,26,1002,26,"find"],[971,30,1002,30],[971,31,1002,31],[971,41,1002,31,"pSig"],[971,45,1002,35],[972,10,1002,35],[972,17,1002,39,"pSig"],[972,21,1002,43],[972,22,1002,44,"pubkey"],[972,28,1002,50],[972,29,1002,51,"equals"],[972,35,1002,57],[972,36,1002,58,"pubkey"],[972,42,1002,64],[972,43,1002,65],[973,8,1002,65],[973,10,1002,66],[974,6,1003,6],[974,7,1003,7],[974,8,1003,8],[974,9,1004,7,"filter"],[974,15,1004,13],[974,16,1004,14],[974,26,1004,14,"v"],[974,27,1004,15],[975,8,1004,15],[975,15,1004,19],[975,16,1004,20],[975,17,1004,21,"v"],[975,18,1004,22],[976,6,1004,22],[976,8,1004,23],[977,4,1005,2],[977,5,1005,3],[977,11,1005,9],[978,6,1006,4,"sigs"],[978,10,1006,8],[978,13,1006,11,"partialSig"],[978,23,1006,21],[979,4,1007,2],[980,4,1008,2],[980,8,1008,6,"sigs"],[980,12,1008,10],[980,13,1008,11,"length"],[980,19,1008,17],[980,22,1008,20,"neededSigs"],[980,32,1008,30],[980,34,1008,32],[980,40,1008,38],[980,44,1008,42,"Error"],[980,49,1008,47],[980,50,1008,48],[980,71,1008,69],[980,72,1008,70],[981,4,1009,2],[981,11,1009,9,"sigs"],[981,15,1009,13],[981,16,1009,14,"length"],[981,22,1009,20],[981,27,1009,25,"neededSigs"],[981,37,1009,35],[982,2,1010,0],[983,2,1011,0],[983,11,1011,9,"isFinalized"],[983,22,1011,20,"isFinalized"],[983,23,1011,21,"input"],[983,28,1011,26],[983,30,1011,28],[984,4,1012,2],[984,11,1012,9],[984,12,1012,10],[984,13,1012,11,"input"],[984,18,1012,16],[984,19,1012,17,"finalScriptSig"],[984,33,1012,31],[984,37,1012,35],[984,38,1012,36],[984,39,1012,37,"input"],[984,44,1012,42],[984,45,1012,43,"finalScriptWitness"],[984,63,1012,61],[985,2,1013,0],[986,2,1014,0],[986,11,1014,9,"bip32DerivationIsMine"],[986,32,1014,30,"bip32DerivationIsMine"],[986,33,1014,31,"root"],[986,37,1014,35],[986,39,1014,37],[987,4,1015,2],[987,11,1015,9],[987,21,1015,9,"d"],[987,22,1015,10],[987,24,1015,14],[988,6,1016,4],[988,10,1016,8],[988,11,1016,9,"d"],[988,12,1016,10],[988,13,1016,11,"masterFingerprint"],[988,30,1016,28],[988,31,1016,29,"equals"],[988,37,1016,35],[988,38,1016,36,"root"],[988,42,1016,40],[988,43,1016,41,"fingerprint"],[988,54,1016,52],[988,55,1016,53],[988,57,1016,55],[988,64,1016,62],[988,69,1016,67],[989,6,1017,4],[989,10,1017,8],[989,11,1017,9,"root"],[989,15,1017,13],[989,16,1017,14,"derivePath"],[989,26,1017,24],[989,27,1017,25,"d"],[989,28,1017,26],[989,29,1017,27,"path"],[989,33,1017,31],[989,34,1017,32],[989,35,1017,33,"publicKey"],[989,44,1017,42],[989,45,1017,43,"equals"],[989,51,1017,49],[989,52,1017,50,"d"],[989,53,1017,51],[989,54,1017,52,"pubkey"],[989,60,1017,58],[989,61,1017,59],[989,63,1017,61],[989,70,1017,68],[989,75,1017,73],[990,6,1018,4],[990,13,1018,11],[990,17,1018,15],[991,4,1019,2],[991,5,1019,3],[992,2,1020,0],[993,2,1021,0],[993,11,1021,9,"check32Bit"],[993,21,1021,19,"check32Bit"],[993,22,1021,20,"num"],[993,25,1021,23],[993,27,1021,25],[994,4,1022,2],[994,8,1023,4],[994,15,1023,11,"num"],[994,18,1023,14],[994,23,1023,19],[994,31,1023,27],[994,35,1024,4,"num"],[994,38,1024,7],[994,43,1024,12,"Math"],[994,47,1024,16],[994,48,1024,17,"floor"],[994,53,1024,22],[994,54,1024,23,"num"],[994,57,1024,26],[994,58,1024,27],[994,62,1025,4,"num"],[994,65,1025,7],[994,68,1025,10],[994,78,1025,20],[994,82,1026,4,"num"],[994,85,1026,7],[994,88,1026,10],[994,89,1026,11],[994,91,1027,4],[995,6,1028,4],[995,12,1028,10],[995,16,1028,14,"Error"],[995,21,1028,19],[995,22,1028,20],[995,46,1028,44],[995,47,1028,45],[996,4,1029,2],[997,2,1030,0],[998,2,1031,0],[998,11,1031,9,"checkFees"],[998,20,1031,18,"checkFees"],[998,21,1031,19,"psbt"],[998,25,1031,23],[998,27,1031,25,"cache"],[998,32,1031,30],[998,34,1031,32,"opts"],[998,38,1031,36],[998,40,1031,38],[999,4,1032,2],[999,8,1032,8,"feeRate"],[999,15,1032,15],[999,18,1032,18,"cache"],[999,23,1032,23],[999,24,1032,24,"__FEE_RATE"],[999,34,1032,34],[999,38,1032,38,"psbt"],[999,42,1032,42],[999,43,1032,43,"getFeeRate"],[999,53,1032,53],[999,54,1032,54],[999,55,1032,55],[1000,4,1033,2],[1000,8,1033,8,"vsize"],[1000,13,1033,13],[1000,16,1033,16,"cache"],[1000,21,1033,21],[1000,22,1033,22,"__EXTRACTED_TX"],[1000,36,1033,36],[1000,37,1033,37,"virtualSize"],[1000,48,1033,48],[1000,49,1033,49],[1000,50,1033,50],[1001,4,1034,2],[1001,8,1034,8,"satoshis"],[1001,16,1034,16],[1001,19,1034,19,"feeRate"],[1001,26,1034,26],[1001,29,1034,29,"vsize"],[1001,34,1034,34],[1002,4,1035,2],[1002,8,1035,6,"feeRate"],[1002,15,1035,13],[1002,19,1035,17,"opts"],[1002,23,1035,21],[1002,24,1035,22,"maximumFeeRate"],[1002,38,1035,36],[1002,40,1035,38],[1003,6,1036,4],[1003,12,1036,10],[1003,16,1036,14,"Error"],[1003,21,1036,19],[1003,22,1037,6],[1003,56,1037,40],[1003,57,1037,41,"satoshis"],[1003,65,1037,49],[1003,68,1037,52],[1003,71,1037,55],[1003,73,1037,57,"toFixed"],[1003,80,1037,64],[1003,81,1037,65],[1003,82,1037,66],[1003,83,1037,67],[1003,89,1037,73],[1003,92,1038,8],[1003,110,1038,26,"feeRate"],[1003,117,1038,33],[1003,155,1038,71],[1003,158,1039,8],[1003,177,1039,27,"vsize"],[1003,182,1039,32],[1003,224,1039,74],[1003,227,1040,8],[1003,293,1040,74],[1003,296,1041,8],[1003,347,1042,4],[1003,348,1042,5],[1004,4,1043,2],[1005,2,1044,0],[1006,2,1045,0],[1006,11,1045,9,"checkInputsForPartialSig"],[1006,35,1045,33,"checkInputsForPartialSig"],[1006,36,1045,34,"inputs"],[1006,42,1045,40],[1006,44,1045,42,"action"],[1006,50,1045,48],[1006,52,1045,50],[1007,4,1046,2,"inputs"],[1007,10,1046,8],[1007,11,1046,9,"forEach"],[1007,18,1046,16],[1007,19,1046,17],[1007,29,1046,17,"input"],[1007,34,1046,22],[1007,36,1046,26],[1008,6,1047,4],[1008,10,1047,10,"throws"],[1008,16,1047,16],[1008,19,1047,19],[1008,20,1047,20],[1008,21,1047,21],[1008,23,1047,23,"_$$_REQUIRE"],[1008,34,1047,23],[1008,35,1047,23,"_dependencyMap"],[1008,49,1047,23],[1008,71,1047,32,"isTaprootInput"],[1008,85,1047,46],[1008,87,1047,48,"input"],[1008,92,1047,53],[1008,93,1047,54],[1008,96,1048,8],[1008,97,1048,9],[1008,98,1048,10],[1008,100,1048,12,"_$$_REQUIRE"],[1008,111,1048,12],[1008,112,1048,12,"_dependencyMap"],[1008,126,1048,12],[1008,148,1048,21,"checkTaprootInputForSigs"],[1008,172,1048,45],[1008,174,1048,47,"input"],[1008,179,1048,52],[1008,181,1048,54,"action"],[1008,187,1048,60],[1008,188,1048,61],[1008,191,1049,8],[1008,192,1049,9],[1008,193,1049,10],[1008,195,1049,12,"_$$_REQUIRE"],[1008,206,1049,12],[1008,207,1049,12,"_dependencyMap"],[1008,221,1049,12],[1008,247,1049,24,"checkInputForSig"],[1008,263,1049,40],[1008,265,1049,42,"input"],[1008,270,1049,47],[1008,272,1049,49,"action"],[1008,278,1049,55],[1008,279,1049,56],[1009,6,1050,4],[1009,10,1050,8,"throws"],[1009,16,1050,14],[1009,18,1051,6],[1009,24,1051,12],[1009,28,1051,16,"Error"],[1009,33,1051,21],[1009,34,1051,22],[1009,81,1051,69],[1009,82,1051,70],[1010,4,1052,2],[1010,5,1052,3],[1010,6,1052,4],[1011,2,1053,0],[1012,2,1054,0],[1012,11,1054,9,"checkPartialSigSighashes"],[1012,35,1054,33,"checkPartialSigSighashes"],[1012,36,1054,34,"input"],[1012,41,1054,39],[1012,43,1054,41],[1013,4,1055,2],[1013,8,1055,6],[1013,9,1055,7,"input"],[1013,14,1055,12],[1013,15,1055,13,"sighashType"],[1013,26,1055,24],[1013,30,1055,28],[1013,31,1055,29,"input"],[1013,36,1055,34],[1013,37,1055,35,"partialSig"],[1013,47,1055,45],[1013,49,1055,47],[1014,4,1056,2],[1014,8,1056,10,"partialSig"],[1014,18,1056,20],[1014,21,1056,38,"input"],[1014,26,1056,43],[1014,27,1056,10,"partialSig"],[1014,37,1056,20],[1015,6,1056,22,"sighashType"],[1015,17,1056,33],[1015,20,1056,38,"input"],[1015,25,1056,43],[1015,26,1056,22,"sighashType"],[1015,37,1056,33],[1016,4,1057,2,"partialSig"],[1016,14,1057,12],[1016,15,1057,13,"forEach"],[1016,22,1057,20],[1016,23,1057,21],[1016,33,1057,21,"pSig"],[1016,37,1057,25],[1016,39,1057,29],[1017,6,1058,4],[1017,10,1058,4,"_bscript$signature$de"],[1017,31,1058,4],[1017,34,1058,25,"_$$_REQUIRE"],[1017,45,1058,25],[1017,46,1058,25,"_dependencyMap"],[1017,60,1058,25],[1017,78,1058,33,"signature"],[1017,87,1058,42],[1017,88,1058,43,"decode"],[1017,94,1058,49],[1017,95,1058,50,"pSig"],[1017,99,1058,54],[1017,100,1058,55,"signature"],[1017,109,1058,64],[1017,110,1058,65],[1018,8,1058,12,"hashType"],[1018,16,1058,20],[1018,19,1058,20,"_bscript$signature$de"],[1018,40,1058,20],[1018,41,1058,12,"hashType"],[1018,49,1058,20],[1019,6,1059,4],[1019,10,1059,8,"sighashType"],[1019,21,1059,19],[1019,26,1059,24,"hashType"],[1019,34,1059,32],[1019,36,1059,34],[1020,8,1060,6],[1020,14,1060,12],[1020,18,1060,16,"Error"],[1020,23,1060,21],[1020,24,1060,22],[1020,77,1060,75],[1020,78,1060,76],[1021,6,1061,4],[1022,4,1062,2],[1022,5,1062,3],[1022,6,1062,4],[1023,2,1063,0],[1024,2,1064,0],[1024,11,1064,9,"checkScriptForPubkey"],[1024,31,1064,29,"checkScriptForPubkey"],[1024,32,1064,30,"pubkey"],[1024,38,1064,36],[1024,40,1064,38,"script"],[1024,46,1064,44],[1024,48,1064,46,"action"],[1024,54,1064,52],[1024,56,1064,54],[1025,4,1065,2],[1025,8,1065,6],[1025,9,1065,7],[1025,10,1065,8],[1025,11,1065,9],[1025,13,1065,11,"_$$_REQUIRE"],[1025,24,1065,11],[1025,25,1065,11,"_dependencyMap"],[1025,39,1065,11],[1025,65,1065,23,"pubkeyInScript"],[1025,79,1065,37],[1025,81,1065,39,"pubkey"],[1025,87,1065,45],[1025,89,1065,47,"script"],[1025,95,1065,53],[1025,96,1065,54],[1025,98,1065,56],[1026,6,1066,4],[1026,12,1066,10],[1026,16,1066,14,"Error"],[1026,21,1066,19],[1026,22,1067,6],[1026,33,1067,17,"action"],[1026,39,1067,23],[1026,71,1067,55,"pubkey"],[1026,77,1067,61],[1026,78,1067,62,"toString"],[1026,86,1067,70],[1026,87,1067,71],[1026,92,1067,76],[1026,93,1067,77],[1026,95,1068,4],[1026,96,1068,5],[1027,4,1069,2],[1028,2,1070,0],[1029,2,1071,0],[1029,11,1071,9,"checkTxEmpty"],[1029,23,1071,21,"checkTxEmpty"],[1029,24,1071,22,"tx"],[1029,26,1071,24],[1029,28,1071,26],[1030,4,1072,2],[1030,8,1072,8,"isEmpty"],[1030,15,1072,15],[1030,18,1072,18,"tx"],[1030,20,1072,20],[1030,21,1072,21,"ins"],[1030,24,1072,24],[1030,25,1072,25,"every"],[1030,30,1072,30],[1030,31,1073,4],[1030,41,1073,4,"input"],[1030,46,1073,9],[1031,6,1073,9],[1031,13,1074,6,"input"],[1031,18,1074,11],[1031,19,1074,12,"script"],[1031,25,1074,18],[1031,29,1075,6,"input"],[1031,34,1075,11],[1031,35,1075,12,"script"],[1031,41,1075,18],[1031,42,1075,19,"length"],[1031,48,1075,25],[1031,53,1075,30],[1031,54,1075,31],[1031,58,1076,6,"input"],[1031,63,1076,11],[1031,64,1076,12,"witness"],[1031,71,1076,19],[1031,75,1077,6,"input"],[1031,80,1077,11],[1031,81,1077,12,"witness"],[1031,88,1077,19],[1031,89,1077,20,"length"],[1031,95,1077,26],[1031,100,1077,31],[1031,101,1077,32],[1032,4,1077,32],[1032,5,1078,2],[1032,6,1078,3],[1033,4,1079,2],[1033,8,1079,6],[1033,9,1079,7,"isEmpty"],[1033,16,1079,14],[1033,18,1079,16],[1034,6,1080,4],[1034,12,1080,10],[1034,16,1080,14,"Error"],[1034,21,1080,19],[1034,22,1080,20],[1034,74,1080,72],[1034,75,1080,73],[1035,4,1081,2],[1036,2,1082,0],[1037,2,1083,0],[1037,11,1083,9,"checkTxForDupeIns"],[1037,28,1083,26,"checkTxForDupeIns"],[1037,29,1083,27,"tx"],[1037,31,1083,29],[1037,33,1083,31,"cache"],[1037,38,1083,36],[1037,40,1083,38],[1038,4,1084,2,"tx"],[1038,6,1084,4],[1038,7,1084,5,"ins"],[1038,10,1084,8],[1038,11,1084,9,"forEach"],[1038,18,1084,16],[1038,19,1084,17],[1038,29,1084,17,"input"],[1038,34,1084,22],[1038,36,1084,26],[1039,6,1085,4,"checkTxInputCache"],[1039,23,1085,21],[1039,24,1085,22,"cache"],[1039,29,1085,27],[1039,31,1085,29,"input"],[1039,36,1085,34],[1039,37,1085,35],[1040,4,1086,2],[1040,5,1086,3],[1040,6,1086,4],[1041,2,1087,0],[1042,2,1088,0],[1042,11,1088,9,"checkTxInputCache"],[1042,28,1088,26,"checkTxInputCache"],[1042,29,1088,27,"cache"],[1042,34,1088,32],[1042,36,1088,34,"input"],[1042,41,1088,39],[1042,43,1088,41],[1043,4,1089,2],[1043,8,1089,8,"key"],[1043,11,1089,11],[1043,14,1090,4],[1043,15,1090,5],[1043,16,1090,6],[1043,18,1090,8,"_$$_REQUIRE"],[1043,29,1090,8],[1043,30,1090,8,"_dependencyMap"],[1043,44,1090,8],[1043,66,1090,22,"reverseBuffer"],[1043,79,1090,35],[1043,81,1090,37,"Buffer"],[1043,87,1090,43],[1043,88,1090,44,"from"],[1043,92,1090,48],[1043,93,1090,49,"input"],[1043,98,1090,54],[1043,99,1090,55,"hash"],[1043,103,1090,59],[1043,104,1090,60],[1043,105,1090,61],[1043,106,1090,62,"toString"],[1043,114,1090,70],[1043,115,1090,71],[1043,120,1090,76],[1043,121,1090,77],[1043,124,1091,4],[1043,127,1091,7],[1043,130,1092,4,"input"],[1043,135,1092,9],[1043,136,1092,10,"index"],[1043,141,1092,15],[1044,4,1093,2],[1044,8,1093,6,"cache"],[1044,13,1093,11],[1044,14,1093,12,"__TX_IN_CACHE"],[1044,27,1093,25],[1044,28,1093,26,"key"],[1044,31,1093,29],[1044,32,1093,30],[1044,34,1093,32],[1044,40,1093,38],[1044,44,1093,42,"Error"],[1044,49,1093,47],[1044,50,1093,48],[1044,77,1093,75],[1044,78,1093,76],[1045,4,1094,2,"cache"],[1045,9,1094,7],[1045,10,1094,8,"__TX_IN_CACHE"],[1045,23,1094,21],[1045,24,1094,22,"key"],[1045,27,1094,25],[1045,28,1094,26],[1045,31,1094,29],[1045,32,1094,30],[1046,2,1095,0],[1047,2,1096,0],[1047,11,1096,9,"scriptCheckerFactory"],[1047,31,1096,29,"scriptCheckerFactory"],[1047,32,1096,30,"payment"],[1047,39,1096,37],[1047,41,1096,39,"paymentScriptName"],[1047,58,1096,56],[1047,60,1096,58],[1048,4,1097,2],[1048,11,1097,9],[1048,21,1097,10,"inputIndex"],[1048,31,1097,20],[1048,33,1097,22,"scriptPubKey"],[1048,45,1097,34],[1048,47,1097,36,"redeemScript"],[1048,59,1097,48],[1048,61,1097,50,"ioType"],[1048,67,1097,56],[1048,69,1097,61],[1049,6,1098,4],[1049,10,1098,10,"redeemScriptOutput"],[1049,28,1098,28],[1049,31,1098,31,"payment"],[1049,38,1098,38],[1049,39,1098,39],[1050,8,1099,6,"redeem"],[1050,14,1099,12],[1050,16,1099,14],[1051,10,1099,16,"output"],[1051,16,1099,22],[1051,18,1099,24,"redeemScript"],[1052,8,1099,37],[1053,6,1100,4],[1053,7,1100,5],[1053,8,1100,6],[1053,9,1100,7,"output"],[1053,15,1100,13],[1054,6,1101,4],[1054,10,1101,8],[1054,11,1101,9,"scriptPubKey"],[1054,23,1101,21],[1054,24,1101,22,"equals"],[1054,30,1101,28],[1054,31,1101,29,"redeemScriptOutput"],[1054,49,1101,47],[1054,50,1101,48],[1054,52,1101,50],[1055,8,1102,6],[1055,14,1102,12],[1055,18,1102,16,"Error"],[1055,23,1102,21],[1055,24,1103,8],[1055,27,1103,11,"paymentScriptName"],[1055,44,1103,28],[1055,52,1103,36,"ioType"],[1055,58,1103,42],[1055,63,1103,47,"inputIndex"],[1055,73,1103,57],[1055,121,1104,6],[1055,122,1104,7],[1056,6,1105,4],[1057,4,1106,2],[1057,5,1106,3],[1058,2,1107,0],[1059,2,1108,0],[1059,6,1108,6,"checkRedeemScript"],[1059,23,1108,23],[1059,26,1108,26,"scriptCheckerFactory"],[1059,46,1108,46],[1059,47,1108,47,"_$$_REQUIRE"],[1059,58,1108,47],[1059,59,1108,47,"_dependencyMap"],[1059,73,1108,47],[1059,93,1108,56,"p2sh"],[1059,97,1108,60],[1059,99,1108,62],[1059,114,1108,77],[1059,115,1108,78],[1060,2,1109,0],[1060,6,1109,6,"checkWitnessScript"],[1060,24,1109,24],[1060,27,1109,27,"scriptCheckerFactory"],[1060,47,1109,47],[1060,48,1110,2,"_$$_REQUIRE"],[1060,59,1110,2],[1060,60,1110,2,"_dependencyMap"],[1060,74,1110,2],[1060,94,1110,11,"p2wsh"],[1060,99,1110,16],[1060,101,1111,2],[1060,117,1112,0],[1060,118,1112,1],[1061,2,1113,0],[1061,11,1113,9,"getTxCacheValue"],[1061,26,1113,24,"getTxCacheValue"],[1061,27,1113,25,"key"],[1061,30,1113,28],[1061,32,1113,30,"name"],[1061,36,1113,34],[1061,38,1113,36,"inputs"],[1061,44,1113,42],[1061,46,1113,44,"c"],[1061,47,1113,45],[1061,49,1113,47],[1062,4,1114,2],[1062,8,1114,6],[1062,9,1114,7,"inputs"],[1062,15,1114,13],[1062,16,1114,14,"every"],[1062,21,1114,19],[1062,22,1114,20,"isFinalized"],[1062,33,1114,31],[1062,34,1114,32],[1062,36,1115,4],[1062,42,1115,10],[1062,46,1115,14,"Error"],[1062,51,1115,19],[1062,52,1115,20],[1062,91,1115,59,"name"],[1062,95,1115,63],[1062,97,1115,65],[1062,98,1115,66],[1063,4,1116,2],[1063,8,1116,6,"key"],[1063,11,1116,9],[1063,16,1116,14],[1063,28,1116,26],[1063,32,1116,30,"c"],[1063,33,1116,31],[1063,34,1116,32,"__FEE_RATE"],[1063,44,1116,42],[1063,46,1116,44],[1063,53,1116,51,"c"],[1063,54,1116,52],[1063,55,1116,53,"__FEE_RATE"],[1063,65,1116,63],[1064,4,1117,2],[1064,8,1117,6,"key"],[1064,11,1117,9],[1064,16,1117,14],[1064,23,1117,21],[1064,27,1117,25,"c"],[1064,28,1117,26],[1064,29,1117,27,"__FEE"],[1064,34,1117,32],[1064,36,1117,34],[1064,43,1117,41,"c"],[1064,44,1117,42],[1064,45,1117,43,"__FEE"],[1064,50,1117,48],[1065,4,1118,2],[1065,8,1118,6,"tx"],[1065,10,1118,8],[1066,4,1119,2],[1066,8,1119,6,"mustFinalize"],[1066,20,1119,18],[1066,23,1119,21],[1066,27,1119,25],[1067,4,1120,2],[1067,8,1120,6,"c"],[1067,9,1120,7],[1067,10,1120,8,"__EXTRACTED_TX"],[1067,24,1120,22],[1067,26,1120,24],[1068,6,1121,4,"tx"],[1068,8,1121,6],[1068,11,1121,9,"c"],[1068,12,1121,10],[1068,13,1121,11,"__EXTRACTED_TX"],[1068,27,1121,25],[1069,6,1122,4,"mustFinalize"],[1069,18,1122,16],[1069,21,1122,19],[1069,26,1122,24],[1070,4,1123,2],[1070,5,1123,3],[1070,11,1123,9],[1071,6,1124,4,"tx"],[1071,8,1124,6],[1071,11,1124,9,"c"],[1071,12,1124,10],[1071,13,1124,11,"__TX"],[1071,17,1124,15],[1071,18,1124,16,"clone"],[1071,23,1124,21],[1071,24,1124,22],[1071,25,1124,23],[1072,4,1125,2],[1073,4,1126,2,"inputFinalizeGetAmts"],[1073,24,1126,22],[1073,25,1126,23,"inputs"],[1073,31,1126,29],[1073,33,1126,31,"tx"],[1073,35,1126,33],[1073,37,1126,35,"c"],[1073,38,1126,36],[1073,40,1126,38,"mustFinalize"],[1073,52,1126,50],[1073,53,1126,51],[1074,4,1127,2],[1074,8,1127,6,"key"],[1074,11,1127,9],[1074,16,1127,14],[1074,28,1127,26],[1074,30,1127,28],[1074,37,1127,35,"c"],[1074,38,1127,36],[1074,39,1127,37,"__FEE_RATE"],[1074,49,1127,47],[1074,50,1127,48],[1074,55,1128,7],[1074,59,1128,11,"key"],[1074,62,1128,14],[1074,67,1128,19],[1074,74,1128,26],[1074,76,1128,28],[1074,83,1128,35,"c"],[1074,84,1128,36],[1074,85,1128,37,"__FEE"],[1074,90,1128,42],[1075,2,1129,0],[1076,2,1130,0],[1076,11,1130,9,"getFinalScripts"],[1076,26,1130,24,"getFinalScripts"],[1076,27,1130,25,"inputIndex"],[1076,37,1130,35],[1076,39,1130,37,"input"],[1076,44,1130,42],[1076,46,1130,44,"script"],[1076,52,1130,50],[1076,54,1130,52,"isSegwit"],[1076,62,1130,60],[1076,64,1130,62,"isP2SH"],[1076,70,1130,68],[1076,72,1130,70,"isP2WSH"],[1076,79,1130,77],[1076,81,1130,79],[1077,4,1131,2],[1077,8,1131,8,"scriptType"],[1077,18,1131,18],[1077,21,1131,21,"classifyScript"],[1077,35,1131,35],[1077,36,1131,36,"script"],[1077,42,1131,42],[1077,43,1131,43],[1078,4,1132,2],[1078,8,1132,6],[1078,9,1132,7,"canFinalize"],[1078,20,1132,18],[1078,21,1132,19,"input"],[1078,26,1132,24],[1078,28,1132,26,"script"],[1078,34,1132,32],[1078,36,1132,34,"scriptType"],[1078,46,1132,44],[1078,47,1132,45],[1078,49,1133,4],[1078,55,1133,10],[1078,59,1133,14,"Error"],[1078,64,1133,19],[1078,65,1133,20],[1078,92,1133,47,"inputIndex"],[1078,102,1133,57],[1078,104,1133,59],[1078,105,1133,60],[1079,4,1134,2],[1079,11,1134,9,"prepareFinalScripts"],[1079,30,1134,28],[1079,31,1135,4,"script"],[1079,37,1135,10],[1079,39,1136,4,"scriptType"],[1079,49,1136,14],[1079,51,1137,4,"input"],[1079,56,1137,9],[1079,57,1137,10,"partialSig"],[1079,67,1137,20],[1079,69,1138,4,"isSegwit"],[1079,77,1138,12],[1079,79,1139,4,"isP2SH"],[1079,85,1139,10],[1079,87,1140,4,"isP2WSH"],[1079,94,1141,2],[1079,95,1141,3],[1080,2,1142,0],[1081,2,1143,0],[1081,11,1143,9,"prepareFinalScripts"],[1081,30,1143,28,"prepareFinalScripts"],[1081,31,1144,2,"script"],[1081,37,1144,8],[1081,39,1145,2,"scriptType"],[1081,49,1145,12],[1081,51,1146,2,"partialSig"],[1081,61,1146,12],[1081,63,1147,2,"isSegwit"],[1081,71,1147,10],[1081,73,1148,2,"isP2SH"],[1081,79,1148,8],[1081,81,1149,2,"isP2WSH"],[1081,88,1149,9],[1081,90,1150,2],[1082,4,1151,2],[1082,8,1151,6,"finalScriptSig"],[1082,22,1151,20],[1083,4,1152,2],[1083,8,1152,6,"finalScriptWitness"],[1083,26,1152,24],[1084,4,1153,2],[1085,4,1154,2],[1085,8,1154,8,"payment"],[1085,15,1154,15],[1085,18,1154,18,"getPayment"],[1085,28,1154,28],[1085,29,1154,29,"script"],[1085,35,1154,35],[1085,37,1154,37,"scriptType"],[1085,47,1154,47],[1085,49,1154,49,"partialSig"],[1085,59,1154,59],[1085,60,1154,60],[1086,4,1155,2],[1086,8,1155,8,"p2wsh"],[1086,13,1155,13],[1086,16,1155,16],[1086,17,1155,17,"isP2WSH"],[1086,24,1155,24],[1086,27,1155,27],[1086,31,1155,31],[1086,34,1155,34,"_$$_REQUIRE"],[1086,45,1155,34],[1086,46,1155,34,"_dependencyMap"],[1086,60,1155,34],[1086,80,1155,43,"p2wsh"],[1086,85,1155,48],[1086,86,1155,49],[1087,6,1155,51,"redeem"],[1087,12,1155,57],[1087,14,1155,59,"payment"],[1088,4,1155,67],[1088,5,1155,68],[1088,6,1155,69],[1089,4,1156,2],[1089,8,1156,8,"p2sh"],[1089,12,1156,12],[1089,15,1156,15],[1089,16,1156,16,"isP2SH"],[1089,22,1156,22],[1089,25,1156,25],[1089,29,1156,29],[1089,32,1156,32,"_$$_REQUIRE"],[1089,43,1156,32],[1089,44,1156,32,"_dependencyMap"],[1089,58,1156,32],[1089,78,1156,41,"p2sh"],[1089,82,1156,45],[1089,83,1156,46],[1090,6,1156,48,"redeem"],[1090,12,1156,54],[1090,14,1156,56,"p2wsh"],[1090,19,1156,61],[1090,23,1156,65,"payment"],[1091,4,1156,73],[1091,5,1156,74],[1091,6,1156,75],[1092,4,1157,2],[1092,8,1157,6,"isSegwit"],[1092,16,1157,14],[1092,18,1157,16],[1093,6,1158,4],[1093,10,1158,8,"p2wsh"],[1093,15,1158,13],[1093,17,1158,15],[1094,8,1159,6,"finalScriptWitness"],[1094,26,1159,24],[1094,29,1159,27],[1094,30,1159,28],[1094,31,1159,29],[1094,33,1159,31,"_$$_REQUIRE"],[1094,44,1159,31],[1094,45,1159,31,"_dependencyMap"],[1094,59,1159,31],[1094,85,1159,43,"witnessStackToScriptWitness"],[1094,112,1159,70],[1094,114,1160,8,"p2wsh"],[1094,119,1160,13],[1094,120,1160,14,"witness"],[1094,127,1161,6],[1094,128,1161,7],[1095,6,1162,4],[1095,7,1162,5],[1095,13,1162,11],[1096,8,1163,6,"finalScriptWitness"],[1096,26,1163,24],[1096,29,1163,27],[1096,30,1163,28],[1096,31,1163,29],[1096,33,1163,31,"_$$_REQUIRE"],[1096,44,1163,31],[1096,45,1163,31,"_dependencyMap"],[1096,59,1163,31],[1096,85,1163,43,"witnessStackToScriptWitness"],[1096,112,1163,70],[1096,114,1164,8,"payment"],[1096,121,1164,15],[1096,122,1164,16,"witness"],[1096,129,1165,6],[1096,130,1165,7],[1097,6,1166,4],[1098,6,1167,4],[1098,10,1167,8,"p2sh"],[1098,14,1167,12],[1098,16,1167,14],[1099,8,1168,6,"finalScriptSig"],[1099,22,1168,20],[1099,25,1168,23,"p2sh"],[1099,29,1168,27],[1099,30,1168,28,"input"],[1099,35,1168,33],[1100,6,1169,4],[1101,4,1170,2],[1101,5,1170,3],[1101,11,1170,9],[1102,6,1171,4],[1102,10,1171,8,"p2sh"],[1102,14,1171,12],[1102,16,1171,14],[1103,8,1172,6,"finalScriptSig"],[1103,22,1172,20],[1103,25,1172,23,"p2sh"],[1103,29,1172,27],[1103,30,1172,28,"input"],[1103,35,1172,33],[1104,6,1173,4],[1104,7,1173,5],[1104,13,1173,11],[1105,8,1174,6,"finalScriptSig"],[1105,22,1174,20],[1105,25,1174,23,"payment"],[1105,32,1174,30],[1105,33,1174,31,"input"],[1105,38,1174,36],[1106,6,1175,4],[1107,4,1176,2],[1108,4,1177,2],[1108,11,1177,9],[1109,6,1178,4,"finalScriptSig"],[1109,20,1178,18],[1109,22,1178,4,"finalScriptSig"],[1109,36,1178,18],[1110,6,1179,4,"finalScriptWitness"],[1110,24,1179,22],[1110,26,1179,4,"finalScriptWitness"],[1111,4,1180,2],[1111,5,1180,3],[1112,2,1181,0],[1113,2,1182,0],[1113,11,1182,9,"getHashAndSighashType"],[1113,32,1182,30,"getHashAndSighashType"],[1113,33,1183,2,"inputs"],[1113,39,1183,8],[1113,41,1184,2,"inputIndex"],[1113,51,1184,12],[1113,53,1185,2,"pubkey"],[1113,59,1185,8],[1113,61,1186,2,"cache"],[1113,66,1186,7],[1113,68,1187,2,"sighashTypes"],[1113,80,1187,14],[1113,82,1188,2],[1114,4,1189,2],[1114,8,1189,8,"input"],[1114,13,1189,13],[1114,16,1189,16],[1114,17,1189,17],[1114,18,1189,18],[1114,20,1189,20,"_$$_REQUIRE"],[1114,31,1189,20],[1114,32,1189,20,"_dependencyMap"],[1114,46,1189,20],[1114,76,1189,28,"checkForInput"],[1114,89,1189,41],[1114,91,1189,43,"inputs"],[1114,97,1189,49],[1114,99,1189,51,"inputIndex"],[1114,109,1189,61],[1114,110,1189,62],[1115,4,1190,2],[1115,8,1190,2,"_getHashForSig"],[1115,22,1190,2],[1115,25,1190,40,"getHashForSig"],[1115,38,1190,53],[1115,39,1191,4,"inputIndex"],[1115,49,1191,14],[1115,51,1192,4,"input"],[1115,56,1192,9],[1115,58,1193,4,"cache"],[1115,63,1193,9],[1115,65,1194,4],[1115,70,1194,9],[1115,72,1195,4,"sighashTypes"],[1115,84,1196,2],[1115,85,1196,3],[1116,6,1190,10,"hash"],[1116,10,1190,14],[1116,13,1190,14,"_getHashForSig"],[1116,27,1190,14],[1116,28,1190,10,"hash"],[1116,32,1190,14],[1117,6,1190,16,"sighashType"],[1117,17,1190,27],[1117,20,1190,27,"_getHashForSig"],[1117,34,1190,27],[1117,35,1190,16,"sighashType"],[1117,46,1190,27],[1118,6,1190,29,"script"],[1118,12,1190,35],[1118,15,1190,35,"_getHashForSig"],[1118,29,1190,35],[1118,30,1190,29,"script"],[1118,36,1190,35],[1119,4,1197,2,"checkScriptForPubkey"],[1119,24,1197,22],[1119,25,1197,23,"pubkey"],[1119,31,1197,29],[1119,33,1197,31,"script"],[1119,39,1197,37],[1119,41,1197,39],[1119,47,1197,45],[1119,48,1197,46],[1120,4,1198,2],[1120,11,1198,9],[1121,6,1199,4,"hash"],[1121,10,1199,8],[1121,12,1199,4,"hash"],[1121,16,1199,8],[1122,6,1200,4,"sighashType"],[1122,17,1200,15],[1122,19,1200,4,"sighashType"],[1123,4,1201,2],[1123,5,1201,3],[1124,2,1202,0],[1125,2,1203,0],[1125,11,1203,9,"getHashForSig"],[1125,24,1203,22,"getHashForSig"],[1125,25,1203,23,"inputIndex"],[1125,35,1203,33],[1125,37,1203,35,"input"],[1125,42,1203,40],[1125,44,1203,42,"cache"],[1125,49,1203,47],[1125,51,1203,49,"forValidate"],[1125,62,1203,60],[1125,64,1203,62,"sighashTypes"],[1125,76,1203,74],[1125,78,1203,76],[1126,4,1204,2],[1126,8,1204,8,"unsignedTx"],[1126,18,1204,18],[1126,21,1204,21,"cache"],[1126,26,1204,26],[1126,27,1204,27,"__TX"],[1126,31,1204,31],[1127,4,1205,2],[1127,8,1205,8,"sighashType"],[1127,19,1205,19],[1127,22,1206,4,"input"],[1127,27,1206,9],[1127,28,1206,10,"sighashType"],[1127,39,1206,21],[1127,43,1206,25,"_$$_REQUIRE"],[1127,54,1206,25],[1127,55,1206,25,"_dependencyMap"],[1127,69,1206,25],[1127,92,1206,39,"Transaction"],[1127,103,1206,50],[1127,104,1206,51,"SIGHASH_ALL"],[1127,115,1206,62],[1128,4,1207,2,"checkSighashTypeAllowed"],[1128,27,1207,25],[1128,28,1207,26,"sighashType"],[1128,39,1207,37],[1128,41,1207,39,"sighashTypes"],[1128,53,1207,51],[1128,54,1207,52],[1129,4,1208,2],[1129,8,1208,6,"hash"],[1129,12,1208,10],[1130,4,1209,2],[1130,8,1209,6,"prevout"],[1130,15,1209,13],[1131,4,1210,2],[1131,8,1210,6,"input"],[1131,13,1210,11],[1131,14,1210,12,"nonWitnessUtxo"],[1131,28,1210,26],[1131,30,1210,28],[1132,6,1211,4],[1132,10,1211,10,"nonWitnessUtxoTx"],[1132,26,1211,26],[1132,29,1211,29,"nonWitnessUtxoTxFromCache"],[1132,54,1211,54],[1132,55,1212,6,"cache"],[1132,60,1212,11],[1132,62,1213,6,"input"],[1132,67,1213,11],[1132,69,1214,6,"inputIndex"],[1132,79,1215,4],[1132,80,1215,5],[1133,6,1216,4],[1133,10,1216,10,"prevoutHash"],[1133,21,1216,21],[1133,24,1216,24,"unsignedTx"],[1133,34,1216,34],[1133,35,1216,35,"ins"],[1133,38,1216,38],[1133,39,1216,39,"inputIndex"],[1133,49,1216,49],[1133,50,1216,50],[1133,51,1216,51,"hash"],[1133,55,1216,55],[1134,6,1217,4],[1134,10,1217,10,"utxoHash"],[1134,18,1217,18],[1134,21,1217,21,"nonWitnessUtxoTx"],[1134,37,1217,37],[1134,38,1217,38,"getHash"],[1134,45,1217,45],[1134,46,1217,46],[1134,47,1217,47],[1135,6,1218,4],[1136,6,1219,4],[1136,10,1219,8],[1136,11,1219,9,"prevoutHash"],[1136,22,1219,20],[1136,23,1219,21,"equals"],[1136,29,1219,27],[1136,30,1219,28,"utxoHash"],[1136,38,1219,36],[1136,39,1219,37],[1136,41,1219,39],[1137,8,1220,6],[1137,14,1220,12],[1137,18,1220,16,"Error"],[1137,23,1220,21],[1137,24,1221,8],[1137,60,1221,44,"inputIndex"],[1137,70,1221,54],[1137,120,1222,6],[1137,121,1222,7],[1138,6,1223,4],[1139,6,1224,4],[1139,10,1224,10,"prevoutIndex"],[1139,22,1224,22],[1139,25,1224,25,"unsignedTx"],[1139,35,1224,35],[1139,36,1224,36,"ins"],[1139,39,1224,39],[1139,40,1224,40,"inputIndex"],[1139,50,1224,50],[1139,51,1224,51],[1139,52,1224,52,"index"],[1139,57,1224,57],[1140,6,1225,4,"prevout"],[1140,13,1225,11],[1140,16,1225,14,"nonWitnessUtxoTx"],[1140,32,1225,30],[1140,33,1225,31,"outs"],[1140,37,1225,35],[1140,38,1225,36,"prevoutIndex"],[1140,50,1225,48],[1140,51,1225,49],[1141,4,1226,2],[1141,5,1226,3],[1141,11,1226,9],[1141,15,1226,13,"input"],[1141,20,1226,18],[1141,21,1226,19,"witnessUtxo"],[1141,32,1226,30],[1141,34,1226,32],[1142,6,1227,4,"prevout"],[1142,13,1227,11],[1142,16,1227,14,"input"],[1142,21,1227,19],[1142,22,1227,20,"witnessUtxo"],[1142,33,1227,31],[1143,4,1228,2],[1143,5,1228,3],[1143,11,1228,9],[1144,6,1229,4],[1144,12,1229,10],[1144,16,1229,14,"Error"],[1144,21,1229,19],[1144,22,1229,20],[1144,58,1229,56],[1144,59,1229,57],[1145,4,1230,2],[1146,4,1231,2],[1146,8,1231,2,"_getMeaningfulScript"],[1146,28,1231,2],[1146,31,1231,37,"getMeaningfulScript"],[1146,50,1231,56],[1146,51,1232,4,"prevout"],[1146,58,1232,11],[1146,59,1232,12,"script"],[1146,65,1232,18],[1146,67,1233,4,"inputIndex"],[1146,77,1233,14],[1146,79,1234,4],[1146,86,1234,11],[1146,88,1235,4,"input"],[1146,93,1235,9],[1146,94,1235,10,"redeemScript"],[1146,106,1235,22],[1146,108,1236,4,"input"],[1146,113,1236,9],[1146,114,1236,10,"witnessScript"],[1146,127,1237,2],[1146,128,1237,3],[1147,6,1231,10,"meaningfulScript"],[1147,22,1231,26],[1147,25,1231,26,"_getMeaningfulScript"],[1147,45,1231,26],[1147,46,1231,10,"meaningfulScript"],[1147,62,1231,26],[1148,6,1231,28,"type"],[1148,10,1231,32],[1148,13,1231,32,"_getMeaningfulScript"],[1148,33,1231,32],[1148,34,1231,28,"type"],[1148,38,1231,32],[1149,4,1238,2],[1149,8,1238,6],[1149,9,1238,7],[1149,21,1238,19],[1149,23,1238,21],[1149,30,1238,28],[1149,31,1238,29],[1149,32,1238,30,"indexOf"],[1149,39,1238,37],[1149,40,1238,38,"type"],[1149,44,1238,42],[1149,45,1238,43],[1149,49,1238,47],[1149,50,1238,48],[1149,52,1238,50],[1150,6,1239,4,"hash"],[1150,10,1239,8],[1150,13,1239,11,"unsignedTx"],[1150,23,1239,21],[1150,24,1239,22,"hashForWitnessV0"],[1150,40,1239,38],[1150,41,1240,6,"inputIndex"],[1150,51,1240,16],[1150,53,1241,6,"meaningfulScript"],[1150,69,1241,22],[1150,71,1242,6,"prevout"],[1150,78,1242,13],[1150,79,1242,14,"value"],[1150,84,1242,19],[1150,86,1243,6,"sighashType"],[1150,97,1244,4],[1150,98,1244,5],[1151,4,1245,2],[1151,5,1245,3],[1151,11,1245,9],[1151,15,1245,13],[1151,16,1245,14],[1151,17,1245,15],[1151,19,1245,17,"_$$_REQUIRE"],[1151,30,1245,17],[1151,31,1245,17,"_dependencyMap"],[1151,45,1245,17],[1151,71,1245,29,"isP2WPKH"],[1151,79,1245,37],[1151,81,1245,39,"meaningfulScript"],[1151,97,1245,55],[1151,98,1245,56],[1151,100,1245,58],[1152,6,1246,4],[1153,6,1247,4],[1153,10,1247,10,"signingScript"],[1153,23,1247,23],[1153,26,1247,26,"_$$_REQUIRE"],[1153,37,1247,26],[1153,38,1247,26,"_dependencyMap"],[1153,52,1247,26],[1153,72,1247,35,"p2pkh"],[1153,77,1247,40],[1153,78,1247,41],[1154,8,1248,6,"hash"],[1154,12,1248,10],[1154,14,1248,12,"meaningfulScript"],[1154,30,1248,28],[1154,31,1248,29,"slice"],[1154,36,1248,34],[1154,37,1248,35],[1154,38,1248,36],[1155,6,1249,4],[1155,7,1249,5],[1155,8,1249,6],[1155,9,1249,7,"output"],[1155,15,1249,13],[1156,6,1250,4,"hash"],[1156,10,1250,8],[1156,13,1250,11,"unsignedTx"],[1156,23,1250,21],[1156,24,1250,22,"hashForWitnessV0"],[1156,40,1250,38],[1156,41,1251,6,"inputIndex"],[1156,51,1251,16],[1156,53,1252,6,"signingScript"],[1156,66,1252,19],[1156,68,1253,6,"prevout"],[1156,75,1253,13],[1156,76,1253,14,"value"],[1156,81,1253,19],[1156,83,1254,6,"sighashType"],[1156,94,1255,4],[1156,95,1255,5],[1157,4,1256,2],[1157,5,1256,3],[1157,11,1256,9],[1158,6,1257,4],[1159,6,1258,4],[1159,10,1259,6,"input"],[1159,15,1259,11],[1159,16,1259,12,"nonWitnessUtxo"],[1159,30,1259,26],[1159,35,1259,31,"undefined"],[1159,44,1259,40],[1159,48,1260,6,"cache"],[1159,53,1260,11],[1159,54,1260,12,"__UNSAFE_SIGN_NONSEGWIT"],[1159,77,1260,35],[1159,82,1260,40],[1159,87,1260,45],[1159,89,1262,6],[1159,95,1262,12],[1159,99,1262,16,"Error"],[1159,104,1262,21],[1159,105,1263,8],[1159,115,1263,18,"inputIndex"],[1159,125,1263,28],[1159,167,1263,70],[1159,170,1264,10],[1159,173,1264,13,"meaningfulScript"],[1159,189,1264,29],[1159,190,1264,30,"toString"],[1159,198,1264,38],[1159,199,1264,39],[1159,204,1264,44],[1159,205,1264,45],[1159,207,1265,6],[1159,208,1265,7],[1160,6,1266,4],[1160,10,1266,8],[1160,11,1266,9,"forValidate"],[1160,22,1266,20],[1160,26,1266,24,"cache"],[1160,31,1266,29],[1160,32,1266,30,"__UNSAFE_SIGN_NONSEGWIT"],[1160,55,1266,53],[1160,60,1266,58],[1160,65,1266,63],[1160,67,1267,6,"console"],[1160,74,1267,13],[1160,75,1267,14,"warn"],[1160,79,1267,18],[1160,80,1268,8],[1160,153,1268,81],[1160,156,1269,10],[1160,232,1269,86],[1160,235,1270,10],[1160,322,1270,97],[1160,325,1271,10],[1160,407,1271,92],[1160,410,1272,10],[1160,482,1272,82],[1160,485,1273,10],[1160,552,1273,77],[1160,555,1274,10],[1160,578,1275,6],[1160,579,1275,7],[1161,6,1276,4,"hash"],[1161,10,1276,8],[1161,13,1276,11,"unsignedTx"],[1161,23,1276,21],[1161,24,1276,22,"hashForSignature"],[1161,40,1276,38],[1161,41,1277,6,"inputIndex"],[1161,51,1277,16],[1161,53,1278,6,"meaningfulScript"],[1161,69,1278,22],[1161,71,1279,6,"sighashType"],[1161,82,1280,4],[1161,83,1280,5],[1162,4,1281,2],[1163,4,1282,2],[1163,11,1282,9],[1164,6,1283,4,"script"],[1164,12,1283,10],[1164,14,1283,12,"meaningfulScript"],[1164,30,1283,28],[1165,6,1284,4,"sighashType"],[1165,17,1284,15],[1165,19,1284,4,"sighashType"],[1165,30,1284,15],[1166,6,1285,4,"hash"],[1166,10,1285,8],[1166,12,1285,4,"hash"],[1167,4,1286,2],[1167,5,1286,3],[1168,2,1287,0],[1169,2,1288,0],[1169,11,1288,9,"getAllTaprootHashesForSig"],[1169,36,1288,34,"getAllTaprootHashesForSig"],[1169,37,1288,35,"inputIndex"],[1169,47,1288,45],[1169,49,1288,47,"input"],[1169,54,1288,52],[1169,56,1288,54,"inputs"],[1169,62,1288,60],[1169,64,1288,62,"cache"],[1169,69,1288,67],[1169,71,1288,69],[1170,4,1289,2],[1170,8,1289,8,"allPublicKeys"],[1170,21,1289,21],[1170,24,1289,24],[1170,26,1289,26],[1171,4,1290,2],[1171,8,1290,6,"input"],[1171,13,1290,11],[1171,14,1290,12,"tapInternalKey"],[1171,28,1290,26],[1171,30,1290,28],[1172,6,1291,4],[1172,10,1291,10,"key"],[1172,13,1291,13],[1172,16,1291,16,"getPrevoutTaprootKey"],[1172,36,1291,36],[1172,37,1291,37,"inputIndex"],[1172,47,1291,47],[1172,49,1291,49,"input"],[1172,54,1291,54],[1172,56,1291,56,"cache"],[1172,61,1291,61],[1172,62,1291,62],[1173,6,1292,4],[1173,10,1292,8,"key"],[1173,13,1292,11],[1173,15,1292,13],[1174,8,1293,6,"allPublicKeys"],[1174,21,1293,19],[1174,22,1293,20,"push"],[1174,26,1293,24],[1174,27,1293,25,"key"],[1174,30,1293,28],[1174,31,1293,29],[1175,6,1294,4],[1176,4,1295,2],[1177,4,1296,2],[1177,8,1296,6,"input"],[1177,13,1296,11],[1177,14,1296,12,"tapScriptSig"],[1177,26,1296,24],[1177,28,1296,26],[1178,6,1297,4],[1178,10,1297,10,"tapScriptPubkeys"],[1178,26,1297,26],[1178,29,1297,29,"input"],[1178,34,1297,34],[1178,35,1297,35,"tapScriptSig"],[1178,47,1297,47],[1178,48,1297,48,"map"],[1178,51,1297,51],[1178,52,1297,52],[1178,62,1297,52,"tss"],[1178,65,1297,55],[1179,8,1297,55],[1179,15,1297,59,"tss"],[1179,18,1297,62],[1179,19,1297,63,"pubkey"],[1179,25,1297,69],[1180,6,1297,69],[1180,8,1297,70],[1181,6,1298,4,"allPublicKeys"],[1181,19,1298,17],[1181,20,1298,18,"push"],[1181,24,1298,22],[1181,25,1298,22,"apply"],[1181,30,1298,22],[1181,31,1298,4,"allPublicKeys"],[1181,44,1298,17],[1181,46,1298,17,"_toConsumableArray"],[1181,64,1298,17],[1181,65,1298,26,"tapScriptPubkeys"],[1181,81,1298,42],[1181,83,1298,43],[1182,4,1299,2],[1183,4,1300,2],[1183,8,1300,8,"allHashes"],[1183,17,1300,17],[1183,20,1300,20,"allPublicKeys"],[1183,33,1300,33],[1183,34,1300,34,"map"],[1183,37,1300,37],[1183,38,1300,38],[1183,48,1300,38,"pubicKey"],[1183,56,1300,46],[1184,6,1300,46],[1184,13,1301,4,"getTaprootHashesForSig"],[1184,35,1301,26],[1184,36,1301,27,"inputIndex"],[1184,46,1301,37],[1184,48,1301,39,"input"],[1184,53,1301,44],[1184,55,1301,46,"inputs"],[1184,61,1301,52],[1184,63,1301,54,"pubicKey"],[1184,71,1301,62],[1184,73,1301,64,"cache"],[1184,78,1301,69],[1184,79,1301,70],[1185,4,1301,70],[1185,5,1302,2],[1185,6,1302,3],[1186,4,1303,2],[1186,11,1303,9,"allHashes"],[1186,20,1303,18],[1186,21,1303,19,"flat"],[1186,25,1303,23],[1186,26,1303,24],[1186,27,1303,25],[1187,2,1304,0],[1188,2,1305,0],[1188,11,1305,9,"getPrevoutTaprootKey"],[1188,31,1305,29,"getPrevoutTaprootKey"],[1188,32,1305,30,"inputIndex"],[1188,42,1305,40],[1188,44,1305,42,"input"],[1188,49,1305,47],[1188,51,1305,49,"cache"],[1188,56,1305,54],[1188,58,1305,56],[1189,4,1306,2],[1189,8,1306,2,"_getScriptAndAmountFr"],[1189,29,1306,2],[1189,32,1306,21,"getScriptAndAmountFromUtxo"],[1189,58,1306,47],[1189,59,1306,48,"inputIndex"],[1189,69,1306,58],[1189,71,1306,60,"input"],[1189,76,1306,65],[1189,78,1306,67,"cache"],[1189,83,1306,72],[1189,84,1306,73],[1190,6,1306,10,"script"],[1190,12,1306,16],[1190,15,1306,16,"_getScriptAndAmountFr"],[1190,36,1306,16],[1190,37,1306,10,"script"],[1190,43,1306,16],[1191,4,1307,2],[1191,11,1307,9],[1191,12,1307,10],[1191,13,1307,11],[1191,15,1307,13,"_$$_REQUIRE"],[1191,26,1307,13],[1191,27,1307,13,"_dependencyMap"],[1191,41,1307,13],[1191,67,1307,25,"isP2TR"],[1191,73,1307,31],[1191,75,1307,33,"script"],[1191,81,1307,39],[1191,82,1307,40],[1191,85,1307,43,"script"],[1191,91,1307,49],[1191,92,1307,50,"subarray"],[1191,100,1307,58],[1191,101,1307,59],[1191,102,1307,60],[1191,104,1307,62],[1191,106,1307,64],[1191,107,1307,65],[1191,110,1307,68],[1191,114,1307,72],[1192,2,1308,0],[1193,2,1309,0],[1193,11,1309,9,"trimTaprootSig"],[1193,25,1309,23,"trimTaprootSig"],[1193,26,1309,24,"signature"],[1193,35,1309,33],[1193,37,1309,35],[1194,4,1310,2],[1194,11,1310,9,"signature"],[1194,20,1310,18],[1194,21,1310,19,"length"],[1194,27,1310,25],[1194,32,1310,30],[1194,34,1310,32],[1194,37,1310,35,"signature"],[1194,46,1310,44],[1194,49,1310,47,"signature"],[1194,58,1310,56],[1194,59,1310,57,"subarray"],[1194,67,1310,65],[1194,68,1310,66],[1194,69,1310,67],[1194,71,1310,69],[1194,73,1310,71],[1194,74,1310,72],[1195,2,1311,0],[1196,2,1312,0],[1196,11,1312,9,"getTaprootHashesForSig"],[1196,33,1312,31,"getTaprootHashesForSig"],[1196,34,1313,2,"inputIndex"],[1196,44,1313,12],[1196,46,1314,2,"input"],[1196,51,1314,7],[1196,53,1315,2,"inputs"],[1196,59,1315,8],[1196,61,1316,2,"pubkey"],[1196,67,1316,8],[1196,69,1317,2,"cache"],[1196,74,1317,7],[1196,76,1318,2,"tapLeafHashToSign"],[1196,93,1318,19],[1196,95,1319,2,"allowedSighashTypes"],[1196,114,1319,21],[1196,116,1320,2],[1197,4,1321,2],[1197,8,1321,8,"unsignedTx"],[1197,18,1321,18],[1197,21,1321,21,"cache"],[1197,26,1321,26],[1197,27,1321,27,"__TX"],[1197,31,1321,31],[1198,4,1322,2],[1198,8,1322,8,"sighashType"],[1198,19,1322,19],[1198,22,1323,4,"input"],[1198,27,1323,9],[1198,28,1323,10,"sighashType"],[1198,39,1323,21],[1198,43,1323,25,"_$$_REQUIRE"],[1198,54,1323,25],[1198,55,1323,25,"_dependencyMap"],[1198,69,1323,25],[1198,92,1323,39,"Transaction"],[1198,103,1323,50],[1198,104,1323,51,"SIGHASH_DEFAULT"],[1198,119,1323,66],[1199,4,1324,2,"checkSighashTypeAllowed"],[1199,27,1324,25],[1199,28,1324,26,"sighashType"],[1199,39,1324,37],[1199,41,1324,39,"allowedSighashTypes"],[1199,60,1324,58],[1199,61,1324,59],[1200,4,1325,2],[1200,8,1325,8,"prevOuts"],[1200,16,1325,16],[1200,19,1325,19,"inputs"],[1200,25,1325,25],[1200,26,1325,26,"map"],[1200,29,1325,29],[1200,30,1325,30],[1200,40,1325,31,"i"],[1200,41,1325,32],[1200,43,1325,34,"index"],[1200,48,1325,39],[1201,6,1325,39],[1201,13,1326,4,"getScriptAndAmountFromUtxo"],[1201,39,1326,30],[1201,40,1326,31,"index"],[1201,45,1326,36],[1201,47,1326,38,"i"],[1201,48,1326,39],[1201,50,1326,41,"cache"],[1201,55,1326,46],[1201,56,1326,47],[1202,4,1326,47],[1202,5,1327,2],[1202,6,1327,3],[1203,4,1328,2],[1203,8,1328,8,"signingScripts"],[1203,22,1328,22],[1203,25,1328,25,"prevOuts"],[1203,33,1328,33],[1203,34,1328,34,"map"],[1203,37,1328,37],[1203,38,1328,38],[1203,48,1328,38,"o"],[1203,49,1328,39],[1204,6,1328,39],[1204,13,1328,43,"o"],[1204,14,1328,44],[1204,15,1328,45,"script"],[1204,21,1328,51],[1205,4,1328,51],[1205,6,1328,52],[1206,4,1329,2],[1206,8,1329,8,"values"],[1206,14,1329,14],[1206,17,1329,17,"prevOuts"],[1206,25,1329,25],[1206,26,1329,26,"map"],[1206,29,1329,29],[1206,30,1329,30],[1206,40,1329,30,"o"],[1206,41,1329,31],[1207,6,1329,31],[1207,13,1329,35,"o"],[1207,14,1329,36],[1207,15,1329,37,"value"],[1207,20,1329,42],[1208,4,1329,42],[1208,6,1329,43],[1209,4,1330,2],[1209,8,1330,8,"hashes"],[1209,14,1330,14],[1209,17,1330,17],[1209,19,1330,19],[1210,4,1331,2],[1210,8,1331,6,"input"],[1210,13,1331,11],[1210,14,1331,12,"tapInternalKey"],[1210,28,1331,26],[1210,32,1331,30],[1210,33,1331,31,"tapLeafHashToSign"],[1210,50,1331,48],[1210,52,1331,50],[1211,6,1332,4],[1211,10,1332,10,"outputKey"],[1211,19,1332,19],[1211,22,1333,6,"getPrevoutTaprootKey"],[1211,42,1333,26],[1211,43,1333,27,"inputIndex"],[1211,53,1333,37],[1211,55,1333,39,"input"],[1211,60,1333,44],[1211,62,1333,46,"cache"],[1211,67,1333,51],[1211,68,1333,52],[1211,72,1333,56,"Buffer"],[1211,78,1333,62],[1211,79,1333,63,"from"],[1211,83,1333,67],[1211,84,1333,68],[1211,86,1333,70],[1211,87,1333,71],[1212,6,1334,4],[1212,10,1334,8],[1212,11,1334,9],[1212,12,1334,10],[1212,14,1334,12,"_$$_REQUIRE"],[1212,25,1334,12],[1212,26,1334,12,"_dependencyMap"],[1212,40,1334,12],[1212,62,1334,21,"toXOnly"],[1212,69,1334,28],[1212,71,1334,30,"pubkey"],[1212,77,1334,36],[1212,78,1334,37],[1212,79,1334,38,"equals"],[1212,85,1334,44],[1212,86,1334,45,"outputKey"],[1212,95,1334,54],[1212,96,1334,55],[1212,98,1334,57],[1213,8,1335,6],[1213,12,1335,12,"tapKeyHash"],[1213,22,1335,22],[1213,25,1335,25,"unsignedTx"],[1213,35,1335,35],[1213,36,1335,36,"hashForWitnessV1"],[1213,52,1335,52],[1213,53,1336,8,"inputIndex"],[1213,63,1336,18],[1213,65,1337,8,"signingScripts"],[1213,79,1337,22],[1213,81,1338,8,"values"],[1213,87,1338,14],[1213,89,1339,8,"sighashType"],[1213,100,1340,6],[1213,101,1340,7],[1214,8,1341,6,"hashes"],[1214,14,1341,12],[1214,15,1341,13,"push"],[1214,19,1341,17],[1214,20,1341,18],[1215,10,1341,20,"pubkey"],[1215,16,1341,26],[1215,18,1341,20,"pubkey"],[1215,24,1341,26],[1216,10,1341,28,"hash"],[1216,14,1341,32],[1216,16,1341,34,"tapKeyHash"],[1217,8,1341,45],[1217,9,1341,46],[1217,10,1341,47],[1218,6,1342,4],[1219,4,1343,2],[1220,4,1344,2],[1220,8,1344,8,"tapLeafHashes"],[1220,21,1344,21],[1220,24,1344,24],[1220,25,1344,25,"input"],[1220,30,1344,30],[1220,31,1344,31,"tapLeafScript"],[1220,44,1344,44],[1220,48,1344,48],[1220,50,1344,50],[1220,52,1345,5,"filter"],[1220,58,1345,11],[1220,59,1345,12],[1220,69,1345,12,"tapLeaf"],[1220,76,1345,19],[1221,6,1345,19],[1221,13,1345,23],[1221,14,1345,24],[1221,15,1345,25],[1221,17,1345,27,"_$$_REQUIRE"],[1221,28,1345,27],[1221,29,1345,27,"_dependencyMap"],[1221,43,1345,27],[1221,69,1345,39,"pubkeyInScript"],[1221,83,1345,53],[1221,85,1345,55,"pubkey"],[1221,91,1345,61],[1221,93,1345,63,"tapLeaf"],[1221,100,1345,70],[1221,101,1345,71,"script"],[1221,107,1345,77],[1221,108,1345,78],[1222,4,1345,78],[1222,6,1345,79],[1222,7,1346,5,"map"],[1222,10,1346,8],[1222,11,1346,9],[1222,21,1346,9,"tapLeaf"],[1222,28,1346,16],[1222,30,1346,20],[1223,6,1347,6],[1223,10,1347,12,"hash"],[1223,14,1347,16],[1223,17,1347,19],[1223,18,1347,20],[1223,19,1347,21],[1223,21,1347,23,"_$$_REQUIRE"],[1223,32,1347,23],[1223,33,1347,23,"_dependencyMap"],[1223,47,1347,23],[1223,74,1347,32,"tapleafHash"],[1223,85,1347,43],[1223,87,1347,45],[1224,8,1348,8,"output"],[1224,14,1348,14],[1224,16,1348,16,"tapLeaf"],[1224,23,1348,23],[1224,24,1348,24,"script"],[1224,30,1348,30],[1225,8,1349,8,"version"],[1225,15,1349,15],[1225,17,1349,17,"tapLeaf"],[1225,24,1349,24],[1225,25,1349,25,"leafVersion"],[1226,6,1350,6],[1226,7,1350,7],[1226,8,1350,8],[1227,6,1351,6],[1227,13,1351,13,"Object"],[1227,19,1351,19],[1227,20,1351,20,"assign"],[1227,26,1351,26],[1227,27,1351,27],[1228,8,1351,29,"hash"],[1228,12,1351,33],[1228,14,1351,29,"hash"],[1229,6,1351,34],[1229,7,1351,35],[1229,9,1351,37,"tapLeaf"],[1229,16,1351,44],[1229,17,1351,45],[1230,4,1352,4],[1230,5,1352,5],[1230,6,1352,6],[1230,7,1353,5,"filter"],[1230,13,1353,11],[1230,14,1354,6],[1230,24,1354,6,"tapLeaf"],[1230,31,1354,13],[1231,6,1354,13],[1231,13,1354,17],[1231,14,1354,18,"tapLeafHashToSign"],[1231,31,1354,35],[1231,35,1354,39,"tapLeafHashToSign"],[1231,52,1354,56],[1231,53,1354,57,"equals"],[1231,59,1354,63],[1231,60,1354,64,"tapLeaf"],[1231,67,1354,71],[1231,68,1354,72,"hash"],[1231,72,1354,76],[1231,73,1354,77],[1232,4,1354,77],[1232,5,1355,4],[1232,6,1355,5],[1232,7,1356,5,"map"],[1232,10,1356,8],[1232,11,1356,9],[1232,21,1356,9,"tapLeaf"],[1232,28,1356,16],[1232,30,1356,20],[1233,6,1357,6],[1233,10,1357,12,"tapScriptHash"],[1233,23,1357,25],[1233,26,1357,28,"unsignedTx"],[1233,36,1357,38],[1233,37,1357,39,"hashForWitnessV1"],[1233,53,1357,55],[1233,54,1358,8,"inputIndex"],[1233,64,1358,18],[1233,66,1359,8,"signingScripts"],[1233,80,1359,22],[1233,82,1360,8,"values"],[1233,88,1360,14],[1233,90,1361,8,"sighashType"],[1233,101,1361,19],[1233,103,1362,8,"tapLeaf"],[1233,110,1362,15],[1233,111,1362,16,"hash"],[1233,115,1363,6],[1233,116,1363,7],[1234,6,1364,6],[1234,13,1364,13],[1235,8,1365,8,"pubkey"],[1235,14,1365,14],[1235,16,1365,8,"pubkey"],[1235,22,1365,14],[1236,8,1366,8,"hash"],[1236,12,1366,12],[1236,14,1366,14,"tapScriptHash"],[1236,27,1366,27],[1237,8,1367,8,"leafHash"],[1237,16,1367,16],[1237,18,1367,18,"tapLeaf"],[1237,25,1367,25],[1237,26,1367,26,"hash"],[1238,6,1368,6],[1238,7,1368,7],[1239,4,1369,4],[1239,5,1369,5],[1239,6,1369,6],[1240,4,1370,2],[1240,11,1370,9,"hashes"],[1240,17,1370,15],[1240,18,1370,16,"concat"],[1240,24,1370,22],[1240,25,1370,23,"tapLeafHashes"],[1240,38,1370,36],[1240,39,1370,37],[1241,2,1371,0],[1242,2,1372,0],[1242,11,1372,9,"checkSighashTypeAllowed"],[1242,34,1372,32,"checkSighashTypeAllowed"],[1242,35,1372,33,"sighashType"],[1242,46,1372,44],[1242,48,1372,46,"sighashTypes"],[1242,60,1372,58],[1242,62,1372,60],[1243,4,1373,2],[1243,8,1373,6,"sighashTypes"],[1243,20,1373,18],[1243,24,1373,22,"sighashTypes"],[1243,36,1373,34],[1243,37,1373,35,"indexOf"],[1243,44,1373,42],[1243,45,1373,43,"sighashType"],[1243,56,1373,54],[1243,57,1373,55],[1243,60,1373,58],[1243,61,1373,59],[1243,63,1373,61],[1244,6,1374,4],[1244,10,1374,10,"str"],[1244,13,1374,13],[1244,16,1374,16,"sighashTypeToString"],[1244,35,1374,35],[1244,36,1374,36,"sighashType"],[1244,47,1374,47],[1244,48,1374,48],[1245,6,1375,4],[1245,12,1375,10],[1245,16,1375,14,"Error"],[1245,21,1375,19],[1245,22,1376,6],[1245,87,1376,71],[1245,90,1377,8],[1245,148,1377,66,"str"],[1245,151,1377,69],[1245,153,1378,4],[1245,154,1378,5],[1246,4,1379,2],[1247,2,1380,0],[1248,2,1381,0],[1248,11,1381,9,"getPayment"],[1248,21,1381,19,"getPayment"],[1248,22,1381,20,"script"],[1248,28,1381,26],[1248,30,1381,28,"scriptType"],[1248,40,1381,38],[1248,42,1381,40,"partialSig"],[1248,52,1381,50],[1248,54,1381,52],[1249,4,1382,2],[1249,8,1382,6,"payment"],[1249,15,1382,13],[1250,4,1383,2],[1250,12,1383,10,"scriptType"],[1250,22,1383,20],[1251,6,1384,4],[1251,11,1384,9],[1251,21,1384,19],[1252,8,1385,6],[1252,12,1385,12,"sigs"],[1252,16,1385,16],[1252,19,1385,19,"getSortedSigs"],[1252,32,1385,32],[1252,33,1385,33,"script"],[1252,39,1385,39],[1252,41,1385,41,"partialSig"],[1252,51,1385,51],[1252,52,1385,52],[1253,8,1386,6,"payment"],[1253,15,1386,13],[1253,18,1386,16,"_$$_REQUIRE"],[1253,29,1386,16],[1253,30,1386,16,"_dependencyMap"],[1253,44,1386,16],[1253,64,1386,25,"p2ms"],[1253,68,1386,29],[1253,69,1386,30],[1254,10,1387,8,"output"],[1254,16,1387,14],[1254,18,1387,16,"script"],[1254,24,1387,22],[1255,10,1388,8,"signatures"],[1255,20,1388,18],[1255,22,1388,20,"sigs"],[1256,8,1389,6],[1256,9,1389,7],[1256,10,1389,8],[1257,8,1390,6],[1258,6,1391,4],[1258,11,1391,9],[1258,19,1391,17],[1259,8,1392,6,"payment"],[1259,15,1392,13],[1259,18,1392,16,"_$$_REQUIRE"],[1259,29,1392,16],[1259,30,1392,16,"_dependencyMap"],[1259,44,1392,16],[1259,64,1392,25,"p2pk"],[1259,68,1392,29],[1259,69,1392,30],[1260,10,1393,8,"output"],[1260,16,1393,14],[1260,18,1393,16,"script"],[1260,24,1393,22],[1261,10,1394,8,"signature"],[1261,19,1394,17],[1261,21,1394,19,"partialSig"],[1261,31,1394,29],[1261,32,1394,30],[1261,33,1394,31],[1261,34,1394,32],[1261,35,1394,33,"signature"],[1262,8,1395,6],[1262,9,1395,7],[1262,10,1395,8],[1263,8,1396,6],[1264,6,1397,4],[1264,11,1397,9],[1264,23,1397,21],[1265,8,1398,6,"payment"],[1265,15,1398,13],[1265,18,1398,16,"_$$_REQUIRE"],[1265,29,1398,16],[1265,30,1398,16,"_dependencyMap"],[1265,44,1398,16],[1265,64,1398,25,"p2pkh"],[1265,69,1398,30],[1265,70,1398,31],[1266,10,1399,8,"output"],[1266,16,1399,14],[1266,18,1399,16,"script"],[1266,24,1399,22],[1267,10,1400,8,"pubkey"],[1267,16,1400,14],[1267,18,1400,16,"partialSig"],[1267,28,1400,26],[1267,29,1400,27],[1267,30,1400,28],[1267,31,1400,29],[1267,32,1400,30,"pubkey"],[1267,38,1400,36],[1268,10,1401,8,"signature"],[1268,19,1401,17],[1268,21,1401,19,"partialSig"],[1268,31,1401,29],[1268,32,1401,30],[1268,33,1401,31],[1268,34,1401,32],[1268,35,1401,33,"signature"],[1269,8,1402,6],[1269,9,1402,7],[1269,10,1402,8],[1270,8,1403,6],[1271,6,1404,4],[1271,11,1404,9],[1271,30,1404,28],[1272,8,1405,6,"payment"],[1272,15,1405,13],[1272,18,1405,16,"_$$_REQUIRE"],[1272,29,1405,16],[1272,30,1405,16,"_dependencyMap"],[1272,44,1405,16],[1272,64,1405,25,"p2wpkh"],[1272,70,1405,31],[1272,71,1405,32],[1273,10,1406,8,"output"],[1273,16,1406,14],[1273,18,1406,16,"script"],[1273,24,1406,22],[1274,10,1407,8,"pubkey"],[1274,16,1407,14],[1274,18,1407,16,"partialSig"],[1274,28,1407,26],[1274,29,1407,27],[1274,30,1407,28],[1274,31,1407,29],[1274,32,1407,30,"pubkey"],[1274,38,1407,36],[1275,10,1408,8,"signature"],[1275,19,1408,17],[1275,21,1408,19,"partialSig"],[1275,31,1408,29],[1275,32,1408,30],[1275,33,1408,31],[1275,34,1408,32],[1275,35,1408,33,"signature"],[1276,8,1409,6],[1276,9,1409,7],[1276,10,1409,8],[1277,8,1410,6],[1278,4,1411,2],[1279,4,1412,2],[1279,11,1412,9,"payment"],[1279,18,1412,16],[1280,2,1413,0],[1281,2,1414,0],[1281,11,1414,9,"getScriptFromInput"],[1281,29,1414,27,"getScriptFromInput"],[1281,30,1414,28,"inputIndex"],[1281,40,1414,38],[1281,42,1414,40,"input"],[1281,47,1414,45],[1281,49,1414,47,"cache"],[1281,54,1414,52],[1281,56,1414,54],[1282,4,1415,2],[1282,8,1415,8,"unsignedTx"],[1282,18,1415,18],[1282,21,1415,21,"cache"],[1282,26,1415,26],[1282,27,1415,27,"__TX"],[1282,31,1415,31],[1283,4,1416,2],[1283,8,1416,8,"res"],[1283,11,1416,11],[1283,14,1416,14],[1284,6,1417,4,"script"],[1284,12,1417,10],[1284,14,1417,12],[1284,18,1417,16],[1285,6,1418,4,"isSegwit"],[1285,14,1418,12],[1285,16,1418,14],[1285,21,1418,19],[1286,6,1419,4,"isP2SH"],[1286,12,1419,10],[1286,14,1419,12],[1286,19,1419,17],[1287,6,1420,4,"isP2WSH"],[1287,13,1420,11],[1287,15,1420,13],[1288,4,1421,2],[1288,5,1421,3],[1289,4,1422,2,"res"],[1289,7,1422,5],[1289,8,1422,6,"isP2SH"],[1289,14,1422,12],[1289,17,1422,15],[1289,18,1422,16],[1289,19,1422,17,"input"],[1289,24,1422,22],[1289,25,1422,23,"redeemScript"],[1289,37,1422,35],[1290,4,1423,2,"res"],[1290,7,1423,5],[1290,8,1423,6,"isP2WSH"],[1290,15,1423,13],[1290,18,1423,16],[1290,19,1423,17],[1290,20,1423,18,"input"],[1290,25,1423,23],[1290,26,1423,24,"witnessScript"],[1290,39,1423,37],[1291,4,1424,2],[1291,8,1424,6,"input"],[1291,13,1424,11],[1291,14,1424,12,"witnessScript"],[1291,27,1424,25],[1291,29,1424,27],[1292,6,1425,4,"res"],[1292,9,1425,7],[1292,10,1425,8,"script"],[1292,16,1425,14],[1292,19,1425,17,"input"],[1292,24,1425,22],[1292,25,1425,23,"witnessScript"],[1292,38,1425,36],[1293,4,1426,2],[1293,5,1426,3],[1293,11,1426,9],[1293,15,1426,13,"input"],[1293,20,1426,18],[1293,21,1426,19,"redeemScript"],[1293,33,1426,31],[1293,35,1426,33],[1294,6,1427,4,"res"],[1294,9,1427,7],[1294,10,1427,8,"script"],[1294,16,1427,14],[1294,19,1427,17,"input"],[1294,24,1427,22],[1294,25,1427,23,"redeemScript"],[1294,37,1427,35],[1295,4,1428,2],[1295,5,1428,3],[1295,11,1428,9],[1296,6,1429,4],[1296,10,1429,8,"input"],[1296,15,1429,13],[1296,16,1429,14,"nonWitnessUtxo"],[1296,30,1429,28],[1296,32,1429,30],[1297,8,1430,6],[1297,12,1430,12,"nonWitnessUtxoTx"],[1297,28,1430,28],[1297,31,1430,31,"nonWitnessUtxoTxFromCache"],[1297,56,1430,56],[1297,57,1431,8,"cache"],[1297,62,1431,13],[1297,64,1432,8,"input"],[1297,69,1432,13],[1297,71,1433,8,"inputIndex"],[1297,81,1434,6],[1297,82,1434,7],[1298,8,1435,6],[1298,12,1435,12,"prevoutIndex"],[1298,24,1435,24],[1298,27,1435,27,"unsignedTx"],[1298,37,1435,37],[1298,38,1435,38,"ins"],[1298,41,1435,41],[1298,42,1435,42,"inputIndex"],[1298,52,1435,52],[1298,53,1435,53],[1298,54,1435,54,"index"],[1298,59,1435,59],[1299,8,1436,6,"res"],[1299,11,1436,9],[1299,12,1436,10,"script"],[1299,18,1436,16],[1299,21,1436,19,"nonWitnessUtxoTx"],[1299,37,1436,35],[1299,38,1436,36,"outs"],[1299,42,1436,40],[1299,43,1436,41,"prevoutIndex"],[1299,55,1436,53],[1299,56,1436,54],[1299,57,1436,55,"script"],[1299,63,1436,61],[1300,6,1437,4],[1300,7,1437,5],[1300,13,1437,11],[1300,17,1437,15,"input"],[1300,22,1437,20],[1300,23,1437,21,"witnessUtxo"],[1300,34,1437,32],[1300,36,1437,34],[1301,8,1438,6,"res"],[1301,11,1438,9],[1301,12,1438,10,"script"],[1301,18,1438,16],[1301,21,1438,19,"input"],[1301,26,1438,24],[1301,27,1438,25,"witnessUtxo"],[1301,38,1438,36],[1301,39,1438,37,"script"],[1301,45,1438,43],[1302,6,1439,4],[1303,4,1440,2],[1304,4,1441,2],[1304,8,1441,6,"input"],[1304,13,1441,11],[1304,14,1441,12,"witnessScript"],[1304,27,1441,25],[1304,31,1441,29],[1304,32,1441,30],[1304,33,1441,31],[1304,35,1441,33,"_$$_REQUIRE"],[1304,46,1441,33],[1304,47,1441,33,"_dependencyMap"],[1304,61,1441,33],[1304,87,1441,45,"isP2WPKH"],[1304,95,1441,53],[1304,97,1441,55,"res"],[1304,100,1441,58],[1304,101,1441,59,"script"],[1304,107,1441,65],[1304,108,1441,66],[1304,110,1441,68],[1305,6,1442,4,"res"],[1305,9,1442,7],[1305,10,1442,8,"isSegwit"],[1305,18,1442,16],[1305,21,1442,19],[1305,25,1442,23],[1306,4,1443,2],[1307,4,1444,2],[1307,11,1444,9,"res"],[1307,14,1444,12],[1308,2,1445,0],[1309,2,1446,0],[1309,11,1446,9,"getSignersFromHD"],[1309,27,1446,25,"getSignersFromHD"],[1309,28,1446,26,"inputIndex"],[1309,38,1446,36],[1309,40,1446,38,"inputs"],[1309,46,1446,44],[1309,48,1446,46,"hdKeyPair"],[1309,57,1446,55],[1309,59,1446,57],[1310,4,1447,2],[1310,8,1447,8,"input"],[1310,13,1447,13],[1310,16,1447,16],[1310,17,1447,17],[1310,18,1447,18],[1310,20,1447,20,"_$$_REQUIRE"],[1310,31,1447,20],[1310,32,1447,20,"_dependencyMap"],[1310,46,1447,20],[1310,76,1447,28,"checkForInput"],[1310,89,1447,41],[1310,91,1447,43,"inputs"],[1310,97,1447,49],[1310,99,1447,51,"inputIndex"],[1310,109,1447,61],[1310,110,1447,62],[1311,4,1448,2],[1311,8,1448,6],[1311,9,1448,7,"input"],[1311,14,1448,12],[1311,15,1448,13,"bip32Derivation"],[1311,30,1448,28],[1311,34,1448,32,"input"],[1311,39,1448,37],[1311,40,1448,38,"bip32Derivation"],[1311,55,1448,53],[1311,56,1448,54,"length"],[1311,62,1448,60],[1311,67,1448,65],[1311,68,1448,66],[1311,70,1448,68],[1312,6,1449,4],[1312,12,1449,10],[1312,16,1449,14,"Error"],[1312,21,1449,19],[1312,22,1449,20],[1312,60,1449,58],[1312,61,1449,59],[1313,4,1450,2],[1314,4,1451,2],[1314,8,1451,8,"myDerivations"],[1314,21,1451,21],[1314,24,1451,24,"input"],[1314,29,1451,29],[1314,30,1451,30,"bip32Derivation"],[1314,45,1451,45],[1314,46,1452,5,"map"],[1314,49,1452,8],[1314,50,1452,9],[1314,60,1452,9,"bipDv"],[1314,65,1452,14],[1314,67,1452,18],[1315,6,1453,6],[1315,10,1453,10,"bipDv"],[1315,15,1453,15],[1315,16,1453,16,"masterFingerprint"],[1315,33,1453,33],[1315,34,1453,34,"equals"],[1315,40,1453,40],[1315,41,1453,41,"hdKeyPair"],[1315,50,1453,50],[1315,51,1453,51,"fingerprint"],[1315,62,1453,62],[1315,63,1453,63],[1315,65,1453,65],[1316,8,1454,8],[1316,15,1454,15,"bipDv"],[1316,20,1454,20],[1317,6,1455,6],[1317,7,1455,7],[1317,13,1455,13],[1318,8,1456,8],[1319,6,1457,6],[1320,4,1458,4],[1320,5,1458,5],[1320,6,1458,6],[1320,7,1459,5,"filter"],[1320,13,1459,11],[1320,14,1459,12],[1320,24,1459,12,"v"],[1320,25,1459,13],[1321,6,1459,13],[1321,13,1459,17],[1321,14,1459,18],[1321,15,1459,19,"v"],[1321,16,1459,20],[1322,4,1459,20],[1322,6,1459,21],[1323,4,1460,2],[1323,8,1460,6,"myDerivations"],[1323,21,1460,19],[1323,22,1460,20,"length"],[1323,28,1460,26],[1323,33,1460,31],[1323,34,1460,32],[1323,36,1460,34],[1324,6,1461,4],[1324,12,1461,10],[1324,16,1461,14,"Error"],[1324,21,1461,19],[1324,22,1462,6],[1324,100,1463,4],[1324,101,1463,5],[1325,4,1464,2],[1326,4,1465,2],[1326,8,1465,8,"signers"],[1326,15,1465,15],[1326,18,1465,18,"myDerivations"],[1326,31,1465,31],[1326,32,1465,32,"map"],[1326,35,1465,35],[1326,36,1465,36],[1326,46,1465,36,"bipDv"],[1326,51,1465,41],[1326,53,1465,45],[1327,6,1466,4],[1327,10,1466,10,"node"],[1327,14,1466,14],[1327,17,1466,17,"hdKeyPair"],[1327,26,1466,26],[1327,27,1466,27,"derivePath"],[1327,37,1466,37],[1327,38,1466,38,"bipDv"],[1327,43,1466,43],[1327,44,1466,44,"path"],[1327,48,1466,48],[1327,49,1466,49],[1328,6,1467,4],[1328,10,1467,8],[1328,11,1467,9,"bipDv"],[1328,16,1467,14],[1328,17,1467,15,"pubkey"],[1328,23,1467,21],[1328,24,1467,22,"equals"],[1328,30,1467,28],[1328,31,1467,29,"node"],[1328,35,1467,33],[1328,36,1467,34,"publicKey"],[1328,45,1467,43],[1328,46,1467,44],[1328,48,1467,46],[1329,8,1468,6],[1329,14,1468,12],[1329,18,1468,16,"Error"],[1329,23,1468,21],[1329,24,1468,22],[1329,62,1468,60],[1329,63,1468,61],[1330,6,1469,4],[1331,6,1470,4],[1331,13,1470,11,"node"],[1331,17,1470,15],[1332,4,1471,2],[1332,5,1471,3],[1332,6,1471,4],[1333,4,1472,2],[1333,11,1472,9,"signers"],[1333,18,1472,16],[1334,2,1473,0],[1335,2,1474,0],[1335,11,1474,9,"getSortedSigs"],[1335,24,1474,22,"getSortedSigs"],[1335,25,1474,23,"script"],[1335,31,1474,29],[1335,33,1474,31,"partialSig"],[1335,43,1474,41],[1335,45,1474,43],[1336,4,1475,2],[1336,8,1475,8,"p2ms"],[1336,12,1475,12],[1336,15,1475,15,"_$$_REQUIRE"],[1336,26,1475,15],[1336,27,1475,15,"_dependencyMap"],[1336,41,1475,15],[1336,61,1475,24,"p2ms"],[1336,65,1475,28],[1336,66,1475,29],[1337,6,1475,31,"output"],[1337,12,1475,37],[1337,14,1475,39,"script"],[1338,4,1475,46],[1338,5,1475,47],[1338,6,1475,48],[1339,4,1476,2],[1340,4,1477,2],[1340,11,1477,9,"p2ms"],[1340,15,1477,13],[1340,16,1477,14,"pubkeys"],[1340,23,1477,21],[1340,24,1478,5,"map"],[1340,27,1478,8],[1340,28,1478,9],[1340,38,1478,9,"pk"],[1340,40,1478,11],[1340,42,1478,15],[1341,6,1479,6],[1342,6,1480,6],[1342,13,1480,13],[1342,14,1481,8,"partialSig"],[1342,24,1481,18],[1342,25,1481,19,"filter"],[1342,31,1481,25],[1342,32,1481,26],[1342,42,1481,26,"ps"],[1342,44,1481,28],[1342,46,1481,32],[1343,8,1482,10],[1343,15,1482,17,"ps"],[1343,17,1482,19],[1343,18,1482,20,"pubkey"],[1343,24,1482,26],[1343,25,1482,27,"equals"],[1343,31,1482,33],[1343,32,1482,34,"pk"],[1343,34,1482,36],[1343,35,1482,37],[1344,6,1483,8],[1344,7,1483,9],[1344,8,1483,10],[1344,9,1483,11],[1344,10,1483,12],[1344,11,1483,13],[1344,15,1483,17],[1344,16,1483,18],[1344,17,1483,19],[1344,19,1484,8,"signature"],[1344,28,1484,17],[1345,6,1485,6],[1346,6,1486,6],[1347,4,1487,4],[1347,5,1487,5],[1347,6,1487,6],[1347,7,1488,5,"filter"],[1347,13,1488,11],[1347,14,1488,12],[1347,24,1488,12,"v"],[1347,25,1488,13],[1348,6,1488,13],[1348,13,1488,17],[1348,14,1488,18],[1348,15,1488,19,"v"],[1348,16,1488,20],[1349,4,1488,20],[1349,6,1488,21],[1350,2,1489,0],[1351,2,1490,0],[1351,11,1490,9,"scriptWitnessToWitnessStack"],[1351,38,1490,36,"scriptWitnessToWitnessStack"],[1351,39,1490,37,"buffer"],[1351,45,1490,43],[1351,47,1490,45],[1352,4,1491,2],[1352,8,1491,6,"offset"],[1352,14,1491,12],[1352,17,1491,15],[1352,18,1491,16],[1353,4,1492,2],[1353,13,1492,11,"readSlice"],[1353,22,1492,20,"readSlice"],[1353,23,1492,21,"n"],[1353,24,1492,22],[1353,26,1492,24],[1354,6,1493,4,"offset"],[1354,12,1493,10],[1354,16,1493,14,"n"],[1354,17,1493,15],[1355,6,1494,4],[1355,13,1494,11,"buffer"],[1355,19,1494,17],[1355,20,1494,18,"slice"],[1355,25,1494,23],[1355,26,1494,24,"offset"],[1355,32,1494,30],[1355,35,1494,33,"n"],[1355,36,1494,34],[1355,38,1494,36,"offset"],[1355,44,1494,42],[1355,45,1494,43],[1356,4,1495,2],[1357,4,1496,2],[1357,13,1496,11,"readVarInt"],[1357,23,1496,21,"readVarInt"],[1357,24,1496,21],[1357,26,1496,24],[1358,6,1497,4],[1358,10,1497,10,"vi"],[1358,12,1497,12],[1358,15,1497,15,"_$$_REQUIRE"],[1358,26,1497,15],[1358,27,1497,15,"_dependencyMap"],[1358,41,1497,15],[1358,82,1497,23,"decode"],[1358,88,1497,29],[1358,89,1497,30,"buffer"],[1358,95,1497,36],[1358,97,1497,38,"offset"],[1358,103,1497,44],[1358,104,1497,45],[1359,6,1498,4,"offset"],[1359,12,1498,10],[1359,16,1498,14,"_$$_REQUIRE"],[1359,27,1498,14],[1359,28,1498,14,"_dependencyMap"],[1359,42,1498,14],[1359,83,1498,22,"decode"],[1359,89,1498,28],[1359,90,1498,29,"bytes"],[1359,95,1498,34],[1360,6,1499,4],[1360,13,1499,11,"vi"],[1360,15,1499,13],[1361,4,1500,2],[1362,4,1501,2],[1362,13,1501,11,"readVarSlice"],[1362,25,1501,23,"readVarSlice"],[1362,26,1501,23],[1362,28,1501,26],[1363,6,1502,4],[1363,13,1502,11,"readSlice"],[1363,22,1502,20],[1363,23,1502,21,"readVarInt"],[1363,33,1502,31],[1363,34,1502,32],[1363,35,1502,33],[1363,36,1502,34],[1364,4,1503,2],[1365,4,1504,2],[1365,13,1504,11,"readVector"],[1365,23,1504,21,"readVector"],[1365,24,1504,21],[1365,26,1504,24],[1366,6,1505,4],[1366,10,1505,10,"count"],[1366,15,1505,15],[1366,18,1505,18,"readVarInt"],[1366,28,1505,28],[1366,29,1505,29],[1366,30,1505,30],[1367,6,1506,4],[1367,10,1506,10,"vector"],[1367,16,1506,16],[1367,19,1506,19],[1367,21,1506,21],[1368,6,1507,4],[1368,11,1507,9],[1368,15,1507,13,"i"],[1368,16,1507,14],[1368,19,1507,17],[1368,20,1507,18],[1368,22,1507,20,"i"],[1368,23,1507,21],[1368,26,1507,24,"count"],[1368,31,1507,29],[1368,33,1507,31,"i"],[1368,34,1507,32],[1368,36,1507,34],[1368,38,1507,36,"vector"],[1368,44,1507,42],[1368,45,1507,43,"push"],[1368,49,1507,47],[1368,50,1507,48,"readVarSlice"],[1368,62,1507,60],[1368,63,1507,61],[1368,64,1507,62],[1368,65,1507,63],[1369,6,1508,4],[1369,13,1508,11,"vector"],[1369,19,1508,17],[1370,4,1509,2],[1371,4,1510,2],[1371,11,1510,9,"readVector"],[1371,21,1510,19],[1371,22,1510,20],[1371,23,1510,21],[1372,2,1511,0],[1373,2,1512,0],[1373,11,1512,9,"sighashTypeToString"],[1373,30,1512,28,"sighashTypeToString"],[1373,31,1512,29,"sighashType"],[1373,42,1512,40],[1373,44,1512,42],[1374,4,1513,2],[1374,8,1513,6,"text"],[1374,12,1513,10],[1374,15,1514,4,"sighashType"],[1374,26,1514,15],[1374,29,1514,18,"_$$_REQUIRE"],[1374,40,1514,18],[1374,41,1514,18,"_dependencyMap"],[1374,55,1514,18],[1374,78,1514,32,"Transaction"],[1374,89,1514,43],[1374,90,1514,44,"SIGHASH_ANYONECANPAY"],[1374,110,1514,64],[1374,113,1515,8],[1374,138,1515,33],[1374,141,1516,8],[1374,143,1516,10],[1375,4,1517,2],[1375,8,1517,8,"sigMod"],[1375,14,1517,14],[1375,17,1517,17,"sighashType"],[1375,28,1517,28],[1375,31,1517,31],[1375,35,1517,35],[1376,4,1518,2],[1376,12,1518,10,"sigMod"],[1376,18,1518,16],[1377,6,1519,4],[1377,11,1519,9,"_$$_REQUIRE"],[1377,22,1519,9],[1377,23,1519,9,"_dependencyMap"],[1377,37,1519,9],[1377,60,1519,23,"Transaction"],[1377,71,1519,34],[1377,72,1519,35,"SIGHASH_ALL"],[1377,83,1519,46],[1378,8,1520,6,"text"],[1378,12,1520,10],[1378,16,1520,14],[1378,29,1520,27],[1379,8,1521,6],[1380,6,1522,4],[1380,11,1522,9,"_$$_REQUIRE"],[1380,22,1522,9],[1380,23,1522,9,"_dependencyMap"],[1380,37,1522,9],[1380,60,1522,23,"Transaction"],[1380,71,1522,34],[1380,72,1522,35,"SIGHASH_SINGLE"],[1380,86,1522,49],[1381,8,1523,6,"text"],[1381,12,1523,10],[1381,16,1523,14],[1381,32,1523,30],[1382,8,1524,6],[1383,6,1525,4],[1383,11,1525,9,"_$$_REQUIRE"],[1383,22,1525,9],[1383,23,1525,9,"_dependencyMap"],[1383,37,1525,9],[1383,60,1525,23,"Transaction"],[1383,71,1525,34],[1383,72,1525,35,"SIGHASH_NONE"],[1383,84,1525,47],[1384,8,1526,6,"text"],[1384,12,1526,10],[1384,16,1526,14],[1384,30,1526,28],[1385,8,1527,6],[1386,4,1528,2],[1387,4,1529,2],[1387,11,1529,9,"text"],[1387,15,1529,13],[1388,2,1530,0],[1389,2,1531,0],[1389,11,1531,9,"addNonWitnessTxCache"],[1389,31,1531,29,"addNonWitnessTxCache"],[1389,32,1531,30,"cache"],[1389,37,1531,35],[1389,39,1531,37,"input"],[1389,44,1531,42],[1389,46,1531,44,"inputIndex"],[1389,56,1531,54],[1389,58,1531,56],[1390,4,1532,2,"cache"],[1390,9,1532,7],[1390,10,1532,8,"__NON_WITNESS_UTXO_BUF_CACHE"],[1390,38,1532,36],[1390,39,1532,37,"inputIndex"],[1390,49,1532,47],[1390,50,1532,48],[1390,53,1532,51,"input"],[1390,58,1532,56],[1390,59,1532,57,"nonWitnessUtxo"],[1390,73,1532,71],[1391,4,1533,2],[1391,8,1533,8,"tx"],[1391,10,1533,10],[1391,13,1533,13,"_$$_REQUIRE"],[1391,24,1533,13],[1391,25,1533,13,"_dependencyMap"],[1391,39,1533,13],[1391,62,1533,27,"Transaction"],[1391,73,1533,38],[1391,74,1533,39,"fromBuffer"],[1391,84,1533,49],[1391,85,1533,50,"input"],[1391,90,1533,55],[1391,91,1533,56,"nonWitnessUtxo"],[1391,105,1533,70],[1391,106,1533,71],[1392,4,1534,2,"cache"],[1392,9,1534,7],[1392,10,1534,8,"__NON_WITNESS_UTXO_TX_CACHE"],[1392,37,1534,35],[1392,38,1534,36,"inputIndex"],[1392,48,1534,46],[1392,49,1534,47],[1392,52,1534,50,"tx"],[1392,54,1534,52],[1393,4,1535,2],[1393,8,1535,8,"self"],[1393,12,1535,12],[1393,15,1535,15,"cache"],[1393,20,1535,20],[1394,4,1536,2],[1394,8,1536,8,"selfIndex"],[1394,17,1536,17],[1394,20,1536,20,"inputIndex"],[1394,30,1536,30],[1395,4,1537,2],[1395,11,1537,9,"input"],[1395,16,1537,14],[1395,17,1537,15,"nonWitnessUtxo"],[1395,31,1537,29],[1396,4,1538,2,"Object"],[1396,10,1538,8],[1396,11,1538,9,"defineProperty"],[1396,25,1538,23],[1396,26,1538,24,"input"],[1396,31,1538,29],[1396,33,1538,31],[1396,49,1538,47],[1396,51,1538,49],[1397,6,1539,4,"enumerable"],[1397,16,1539,14],[1397,18,1539,16],[1397,22,1539,20],[1398,6,1540,4,"get"],[1398,9,1540,7],[1398,20,1540,4,"get"],[1398,23,1540,7,"get"],[1398,24,1540,7],[1398,26,1540,10],[1399,8,1541,6],[1399,12,1541,12,"buf"],[1399,15,1541,15],[1399,18,1541,18,"self"],[1399,22,1541,22],[1399,23,1541,23,"__NON_WITNESS_UTXO_BUF_CACHE"],[1399,51,1541,51],[1399,52,1541,52,"selfIndex"],[1399,61,1541,61],[1399,62,1541,62],[1400,8,1542,6],[1400,12,1542,12,"txCache"],[1400,19,1542,19],[1400,22,1542,22,"self"],[1400,26,1542,26],[1400,27,1542,27,"__NON_WITNESS_UTXO_TX_CACHE"],[1400,54,1542,54],[1400,55,1542,55,"selfIndex"],[1400,64,1542,64],[1400,65,1542,65],[1401,8,1543,6],[1401,12,1543,10,"buf"],[1401,15,1543,13],[1401,20,1543,18,"undefined"],[1401,29,1543,27],[1401,31,1543,29],[1402,10,1544,8],[1402,17,1544,15,"buf"],[1402,20,1544,18],[1403,8,1545,6],[1403,9,1545,7],[1403,15,1545,13],[1404,10,1546,8],[1404,14,1546,14,"newBuf"],[1404,20,1546,20],[1404,23,1546,23,"txCache"],[1404,30,1546,30],[1404,31,1546,31,"toBuffer"],[1404,39,1546,39],[1404,40,1546,40],[1404,41,1546,41],[1405,10,1547,8,"self"],[1405,14,1547,12],[1405,15,1547,13,"__NON_WITNESS_UTXO_BUF_CACHE"],[1405,43,1547,41],[1405,44,1547,42,"selfIndex"],[1405,53,1547,51],[1405,54,1547,52],[1405,57,1547,55,"newBuf"],[1405,63,1547,61],[1406,10,1548,8],[1406,17,1548,15,"newBuf"],[1406,23,1548,21],[1407,8,1549,6],[1408,6,1550,4],[1408,7,1550,5],[1409,6,1551,4,"set"],[1409,9,1551,7],[1409,20,1551,4,"set"],[1409,23,1551,7,"set"],[1409,24,1551,8,"data"],[1409,28,1551,12],[1409,30,1551,14],[1410,8,1552,6,"self"],[1410,12,1552,10],[1410,13,1552,11,"__NON_WITNESS_UTXO_BUF_CACHE"],[1410,41,1552,39],[1410,42,1552,40,"selfIndex"],[1410,51,1552,49],[1410,52,1552,50],[1410,55,1552,53,"data"],[1410,59,1552,57],[1411,6,1553,4],[1412,4,1554,2],[1412,5,1554,3],[1412,6,1554,4],[1413,2,1555,0],[1414,2,1556,0],[1414,11,1556,9,"inputFinalizeGetAmts"],[1414,31,1556,29,"inputFinalizeGetAmts"],[1414,32,1556,30,"inputs"],[1414,38,1556,36],[1414,40,1556,38,"tx"],[1414,42,1556,40],[1414,44,1556,42,"cache"],[1414,49,1556,47],[1414,51,1556,49,"mustFinalize"],[1414,63,1556,61],[1414,65,1556,63],[1415,4,1557,2],[1415,8,1557,6,"inputAmount"],[1415,19,1557,17],[1415,22,1557,20],[1415,23,1557,21],[1416,4,1558,2,"inputs"],[1416,10,1558,8],[1416,11,1558,9,"forEach"],[1416,18,1558,16],[1416,19,1558,17],[1416,29,1558,18,"input"],[1416,34,1558,23],[1416,36,1558,25,"idx"],[1416,39,1558,28],[1416,41,1558,33],[1417,6,1559,4],[1417,10,1559,8,"mustFinalize"],[1417,22,1559,20],[1417,26,1559,24,"input"],[1417,31,1559,29],[1417,32,1559,30,"finalScriptSig"],[1417,46,1559,44],[1417,48,1560,6,"tx"],[1417,50,1560,8],[1417,51,1560,9,"ins"],[1417,54,1560,12],[1417,55,1560,13,"idx"],[1417,58,1560,16],[1417,59,1560,17],[1417,60,1560,18,"script"],[1417,66,1560,24],[1417,69,1560,27,"input"],[1417,74,1560,32],[1417,75,1560,33,"finalScriptSig"],[1417,89,1560,47],[1418,6,1561,4],[1418,10,1561,8,"mustFinalize"],[1418,22,1561,20],[1418,26,1561,24,"input"],[1418,31,1561,29],[1418,32,1561,30,"finalScriptWitness"],[1418,50,1561,48],[1418,52,1561,50],[1419,8,1562,6,"tx"],[1419,10,1562,8],[1419,11,1562,9,"ins"],[1419,14,1562,12],[1419,15,1562,13,"idx"],[1419,18,1562,16],[1419,19,1562,17],[1419,20,1562,18,"witness"],[1419,27,1562,25],[1419,30,1562,28,"scriptWitnessToWitnessStack"],[1419,57,1562,55],[1419,58,1563,8,"input"],[1419,63,1563,13],[1419,64,1563,14,"finalScriptWitness"],[1419,82,1564,6],[1419,83,1564,7],[1420,6,1565,4],[1421,6,1566,4],[1421,10,1566,8,"input"],[1421,15,1566,13],[1421,16,1566,14,"witnessUtxo"],[1421,27,1566,25],[1421,29,1566,27],[1422,8,1567,6,"inputAmount"],[1422,19,1567,17],[1422,23,1567,21,"input"],[1422,28,1567,26],[1422,29,1567,27,"witnessUtxo"],[1422,40,1567,38],[1422,41,1567,39,"value"],[1422,46,1567,44],[1423,6,1568,4],[1423,7,1568,5],[1423,13,1568,11],[1423,17,1568,15,"input"],[1423,22,1568,20],[1423,23,1568,21,"nonWitnessUtxo"],[1423,37,1568,35],[1423,39,1568,37],[1424,8,1569,6],[1424,12,1569,12,"nwTx"],[1424,16,1569,16],[1424,19,1569,19,"nonWitnessUtxoTxFromCache"],[1424,44,1569,44],[1424,45,1569,45,"cache"],[1424,50,1569,50],[1424,52,1569,52,"input"],[1424,57,1569,57],[1424,59,1569,59,"idx"],[1424,62,1569,62],[1424,63,1569,63],[1425,8,1570,6],[1425,12,1570,12,"vout"],[1425,16,1570,16],[1425,19,1570,19,"tx"],[1425,21,1570,21],[1425,22,1570,22,"ins"],[1425,25,1570,25],[1425,26,1570,26,"idx"],[1425,29,1570,29],[1425,30,1570,30],[1425,31,1570,31,"index"],[1425,36,1570,36],[1426,8,1571,6],[1426,12,1571,12,"out"],[1426,15,1571,15],[1426,18,1571,18,"nwTx"],[1426,22,1571,22],[1426,23,1571,23,"outs"],[1426,27,1571,27],[1426,28,1571,28,"vout"],[1426,32,1571,32],[1426,33,1571,33],[1427,8,1572,6,"inputAmount"],[1427,19,1572,17],[1427,23,1572,21,"out"],[1427,26,1572,24],[1427,27,1572,25,"value"],[1427,32,1572,30],[1428,6,1573,4],[1429,4,1574,2],[1429,5,1574,3],[1429,6,1574,4],[1430,4,1575,2],[1430,8,1575,8,"outputAmount"],[1430,20,1575,20],[1430,23,1575,23,"tx"],[1430,25,1575,25],[1430,26,1575,26,"outs"],[1430,30,1575,30],[1430,31,1575,31,"reduce"],[1430,37,1575,37],[1430,38,1575,38],[1430,48,1575,39,"total"],[1430,53,1575,44],[1430,55,1575,46,"o"],[1430,56,1575,47],[1431,6,1575,47],[1431,13,1575,52,"total"],[1431,18,1575,57],[1431,21,1575,60,"o"],[1431,22,1575,61],[1431,23,1575,62,"value"],[1431,28,1575,67],[1432,4,1575,67],[1432,7,1575,69],[1432,8,1575,70],[1432,9,1575,71],[1433,4,1576,2],[1433,8,1576,8,"fee"],[1433,11,1576,11],[1433,14,1576,14,"inputAmount"],[1433,25,1576,25],[1433,28,1576,28,"outputAmount"],[1433,40,1576,40],[1434,4,1577,2],[1434,8,1577,6,"fee"],[1434,11,1577,9],[1434,14,1577,12],[1434,15,1577,13],[1434,17,1577,15],[1435,6,1578,4],[1435,12,1578,10],[1435,16,1578,14,"Error"],[1435,21,1578,19],[1435,22,1578,20],[1435,61,1578,59],[1435,62,1578,60],[1436,4,1579,2],[1437,4,1580,2],[1437,8,1580,8,"bytes"],[1437,13,1580,13],[1437,16,1580,16,"tx"],[1437,18,1580,18],[1437,19,1580,19,"virtualSize"],[1437,30,1580,30],[1437,31,1580,31],[1437,32,1580,32],[1438,4,1581,2,"cache"],[1438,9,1581,7],[1438,10,1581,8,"__FEE"],[1438,15,1581,13],[1438,18,1581,16,"fee"],[1438,21,1581,19],[1439,4,1582,2,"cache"],[1439,9,1582,7],[1439,10,1582,8,"__EXTRACTED_TX"],[1439,24,1582,22],[1439,27,1582,25,"tx"],[1439,29,1582,27],[1440,4,1583,2,"cache"],[1440,9,1583,7],[1440,10,1583,8,"__FEE_RATE"],[1440,20,1583,18],[1440,23,1583,21,"Math"],[1440,27,1583,25],[1440,28,1583,26,"floor"],[1440,33,1583,31],[1440,34,1583,32,"fee"],[1440,37,1583,35],[1440,40,1583,38,"bytes"],[1440,45,1583,43],[1440,46,1583,44],[1441,2,1584,0],[1442,2,1585,0],[1442,11,1585,9,"nonWitnessUtxoTxFromCache"],[1442,36,1585,34,"nonWitnessUtxoTxFromCache"],[1442,37,1585,35,"cache"],[1442,42,1585,40],[1442,44,1585,42,"input"],[1442,49,1585,47],[1442,51,1585,49,"inputIndex"],[1442,61,1585,59],[1442,63,1585,61],[1443,4,1586,2],[1443,8,1586,8,"c"],[1443,9,1586,9],[1443,12,1586,12,"cache"],[1443,17,1586,17],[1443,18,1586,18,"__NON_WITNESS_UTXO_TX_CACHE"],[1443,45,1586,45],[1444,4,1587,2],[1444,8,1587,6],[1444,9,1587,7,"c"],[1444,10,1587,8],[1444,11,1587,9,"inputIndex"],[1444,21,1587,19],[1444,22,1587,20],[1444,24,1587,22],[1445,6,1588,4,"addNonWitnessTxCache"],[1445,26,1588,24],[1445,27,1588,25,"cache"],[1445,32,1588,30],[1445,34,1588,32,"input"],[1445,39,1588,37],[1445,41,1588,39,"inputIndex"],[1445,51,1588,49],[1445,52,1588,50],[1446,4,1589,2],[1447,4,1590,2],[1447,11,1590,9,"c"],[1447,12,1590,10],[1447,13,1590,11,"inputIndex"],[1447,23,1590,21],[1447,24,1590,22],[1448,2,1591,0],[1449,2,1592,0],[1449,11,1592,9,"getScriptFromUtxo"],[1449,28,1592,26,"getScriptFromUtxo"],[1449,29,1592,27,"inputIndex"],[1449,39,1592,37],[1449,41,1592,39,"input"],[1449,46,1592,44],[1449,48,1592,46,"cache"],[1449,53,1592,51],[1449,55,1592,53],[1450,4,1593,2],[1450,8,1593,2,"_getScriptAndAmountFr2"],[1450,30,1593,2],[1450,33,1593,21,"getScriptAndAmountFromUtxo"],[1450,59,1593,47],[1450,60,1593,48,"inputIndex"],[1450,70,1593,58],[1450,72,1593,60,"input"],[1450,77,1593,65],[1450,79,1593,67,"cache"],[1450,84,1593,72],[1450,85,1593,73],[1451,6,1593,10,"script"],[1451,12,1593,16],[1451,15,1593,16,"_getScriptAndAmountFr2"],[1451,37,1593,16],[1451,38,1593,10,"script"],[1451,44,1593,16],[1452,4,1594,2],[1452,11,1594,9,"script"],[1452,17,1594,15],[1453,2,1595,0],[1454,2,1596,0],[1454,11,1596,9,"getScriptAndAmountFromUtxo"],[1454,37,1596,35,"getScriptAndAmountFromUtxo"],[1454,38,1596,36,"inputIndex"],[1454,48,1596,46],[1454,50,1596,48,"input"],[1454,55,1596,53],[1454,57,1596,55,"cache"],[1454,62,1596,60],[1454,64,1596,62],[1455,4,1597,2],[1455,8,1597,6,"input"],[1455,13,1597,11],[1455,14,1597,12,"witnessUtxo"],[1455,25,1597,23],[1455,30,1597,28,"undefined"],[1455,39,1597,37],[1455,41,1597,39],[1456,6,1598,4],[1456,13,1598,11],[1457,8,1599,6,"script"],[1457,14,1599,12],[1457,16,1599,14,"input"],[1457,21,1599,19],[1457,22,1599,20,"witnessUtxo"],[1457,33,1599,31],[1457,34,1599,32,"script"],[1457,40,1599,38],[1458,8,1600,6,"value"],[1458,13,1600,11],[1458,15,1600,13,"input"],[1458,20,1600,18],[1458,21,1600,19,"witnessUtxo"],[1458,32,1600,30],[1458,33,1600,31,"value"],[1459,6,1601,4],[1459,7,1601,5],[1460,4,1602,2],[1460,5,1602,3],[1460,11,1602,9],[1460,15,1602,13,"input"],[1460,20,1602,18],[1460,21,1602,19,"nonWitnessUtxo"],[1460,35,1602,33],[1460,40,1602,38,"undefined"],[1460,49,1602,47],[1460,51,1602,49],[1461,6,1603,4],[1461,10,1603,10,"nonWitnessUtxoTx"],[1461,26,1603,26],[1461,29,1603,29,"nonWitnessUtxoTxFromCache"],[1461,54,1603,54],[1461,55,1604,6,"cache"],[1461,60,1604,11],[1461,62,1605,6,"input"],[1461,67,1605,11],[1461,69,1606,6,"inputIndex"],[1461,79,1607,4],[1461,80,1607,5],[1462,6,1608,4],[1462,10,1608,10,"o"],[1462,11,1608,11],[1462,14,1608,14,"nonWitnessUtxoTx"],[1462,30,1608,30],[1462,31,1608,31,"outs"],[1462,35,1608,35],[1462,36,1608,36,"cache"],[1462,41,1608,41],[1462,42,1608,42,"__TX"],[1462,46,1608,46],[1462,47,1608,47,"ins"],[1462,50,1608,50],[1462,51,1608,51,"inputIndex"],[1462,61,1608,61],[1462,62,1608,62],[1462,63,1608,63,"index"],[1462,68,1608,68],[1462,69,1608,69],[1463,6,1609,4],[1463,13,1609,11],[1464,8,1609,13,"script"],[1464,14,1609,19],[1464,16,1609,21,"o"],[1464,17,1609,22],[1464,18,1609,23,"script"],[1464,24,1609,29],[1465,8,1609,31,"value"],[1465,13,1609,36],[1465,15,1609,38,"o"],[1465,16,1609,39],[1465,17,1609,40,"value"],[1466,6,1609,46],[1466,7,1609,47],[1467,4,1610,2],[1467,5,1610,3],[1467,11,1610,9],[1468,6,1611,4],[1468,12,1611,10],[1468,16,1611,14,"Error"],[1468,21,1611,19],[1468,22,1611,20],[1468,68,1611,66],[1468,69,1611,67],[1469,4,1612,2],[1470,2,1613,0],[1471,2,1614,0],[1471,11,1614,9,"pubkeyInInput"],[1471,24,1614,22,"pubkeyInInput"],[1471,25,1614,23,"pubkey"],[1471,31,1614,29],[1471,33,1614,31,"input"],[1471,38,1614,36],[1471,40,1614,38,"inputIndex"],[1471,50,1614,48],[1471,52,1614,50,"cache"],[1471,57,1614,55],[1471,59,1614,57],[1472,4,1615,2],[1472,8,1615,8,"script"],[1472,14,1615,14],[1472,17,1615,17,"getScriptFromUtxo"],[1472,34,1615,34],[1472,35,1615,35,"inputIndex"],[1472,45,1615,45],[1472,47,1615,47,"input"],[1472,52,1615,52],[1472,54,1615,54,"cache"],[1472,59,1615,59],[1472,60,1615,60],[1473,4,1616,2],[1473,8,1616,2,"_getMeaningfulScript2"],[1473,29,1616,2],[1473,32,1616,31,"getMeaningfulScript"],[1473,51,1616,50],[1473,52,1617,4,"script"],[1473,58,1617,10],[1473,60,1618,4,"inputIndex"],[1473,70,1618,14],[1473,72,1619,4],[1473,79,1619,11],[1473,81,1620,4,"input"],[1473,86,1620,9],[1473,87,1620,10,"redeemScript"],[1473,99,1620,22],[1473,101,1621,4,"input"],[1473,106,1621,9],[1473,107,1621,10,"witnessScript"],[1473,120,1622,2],[1473,121,1622,3],[1474,6,1616,10,"meaningfulScript"],[1474,22,1616,26],[1474,25,1616,26,"_getMeaningfulScript2"],[1474,46,1616,26],[1474,47,1616,10,"meaningfulScript"],[1474,63,1616,26],[1475,4,1623,2],[1475,11,1623,9],[1475,12,1623,10],[1475,13,1623,11],[1475,15,1623,13,"_$$_REQUIRE"],[1475,26,1623,13],[1475,27,1623,13,"_dependencyMap"],[1475,41,1623,13],[1475,67,1623,25,"pubkeyInScript"],[1475,81,1623,39],[1475,83,1623,41,"pubkey"],[1475,89,1623,47],[1475,91,1623,49,"meaningfulScript"],[1475,107,1623,65],[1475,108,1623,66],[1476,2,1624,0],[1477,2,1625,0],[1477,11,1625,9,"pubkeyInOutput"],[1477,25,1625,23,"pubkeyInOutput"],[1477,26,1625,24,"pubkey"],[1477,32,1625,30],[1477,34,1625,32,"output"],[1477,40,1625,38],[1477,42,1625,40,"outputIndex"],[1477,53,1625,51],[1477,55,1625,53,"cache"],[1477,60,1625,58],[1477,62,1625,60],[1478,4,1626,2],[1478,8,1626,8,"script"],[1478,14,1626,14],[1478,17,1626,17,"cache"],[1478,22,1626,22],[1478,23,1626,23,"__TX"],[1478,27,1626,27],[1478,28,1626,28,"outs"],[1478,32,1626,32],[1478,33,1626,33,"outputIndex"],[1478,44,1626,44],[1478,45,1626,45],[1478,46,1626,46,"script"],[1478,52,1626,52],[1479,4,1627,2],[1479,8,1627,2,"_getMeaningfulScript3"],[1479,29,1627,2],[1479,32,1627,31,"getMeaningfulScript"],[1479,51,1627,50],[1479,52,1628,4,"script"],[1479,58,1628,10],[1479,60,1629,4,"outputIndex"],[1479,71,1629,15],[1479,73,1630,4],[1479,81,1630,12],[1479,83,1631,4,"output"],[1479,89,1631,10],[1479,90,1631,11,"redeemScript"],[1479,102,1631,23],[1479,104,1632,4,"output"],[1479,110,1632,10],[1479,111,1632,11,"witnessScript"],[1479,124,1633,2],[1479,125,1633,3],[1480,6,1627,10,"meaningfulScript"],[1480,22,1627,26],[1480,25,1627,26,"_getMeaningfulScript3"],[1480,46,1627,26],[1480,47,1627,10,"meaningfulScript"],[1480,63,1627,26],[1481,4,1634,2],[1481,11,1634,9],[1481,12,1634,10],[1481,13,1634,11],[1481,15,1634,13,"_$$_REQUIRE"],[1481,26,1634,13],[1481,27,1634,13,"_dependencyMap"],[1481,41,1634,13],[1481,67,1634,25,"pubkeyInScript"],[1481,81,1634,39],[1481,83,1634,41,"pubkey"],[1481,89,1634,47],[1481,91,1634,49,"meaningfulScript"],[1481,107,1634,65],[1481,108,1634,66],[1482,2,1635,0],[1483,2,1636,0],[1483,11,1636,9,"redeemFromFinalScriptSig"],[1483,35,1636,33,"redeemFromFinalScriptSig"],[1483,36,1636,34,"finalScript"],[1483,47,1636,45],[1483,49,1636,47],[1484,4,1637,2],[1484,8,1637,6],[1484,9,1637,7,"finalScript"],[1484,20,1637,18],[1484,22,1637,20],[1485,4,1638,2],[1485,8,1638,8,"decomp"],[1485,14,1638,14],[1485,17,1638,17,"_$$_REQUIRE"],[1485,28,1638,17],[1485,29,1638,17,"_dependencyMap"],[1485,43,1638,17],[1485,61,1638,25,"decompile"],[1485,70,1638,34],[1485,71,1638,35,"finalScript"],[1485,82,1638,46],[1485,83,1638,47],[1486,4,1639,2],[1486,8,1639,6],[1486,9,1639,7,"decomp"],[1486,15,1639,13],[1486,17,1639,15],[1487,4,1640,2],[1487,8,1640,8,"lastItem"],[1487,16,1640,16],[1487,19,1640,19,"decomp"],[1487,25,1640,25],[1487,26,1640,26,"decomp"],[1487,32,1640,32],[1487,33,1640,33,"length"],[1487,39,1640,39],[1487,42,1640,42],[1487,43,1640,43],[1487,44,1640,44],[1488,4,1641,2],[1488,8,1642,4],[1488,9,1642,5,"Buffer"],[1488,15,1642,11],[1488,16,1642,12,"isBuffer"],[1488,24,1642,20],[1488,25,1642,21,"lastItem"],[1488,33,1642,29],[1488,34,1642,30],[1488,38,1643,4,"isPubkeyLike"],[1488,50,1643,16],[1488,51,1643,17,"lastItem"],[1488,59,1643,25],[1488,60,1643,26],[1488,64,1644,4,"isSigLike"],[1488,73,1644,13],[1488,74,1644,14,"lastItem"],[1488,82,1644,22],[1488,83,1644,23],[1488,85,1646,4],[1489,4,1647,2],[1489,8,1647,8,"sDecomp"],[1489,15,1647,15],[1489,18,1647,18,"_$$_REQUIRE"],[1489,29,1647,18],[1489,30,1647,18,"_dependencyMap"],[1489,44,1647,18],[1489,62,1647,26,"decompile"],[1489,71,1647,35],[1489,72,1647,36,"lastItem"],[1489,80,1647,44],[1489,81,1647,45],[1490,4,1648,2],[1490,8,1648,6],[1490,9,1648,7,"sDecomp"],[1490,16,1648,14],[1490,18,1648,16],[1491,4,1649,2],[1491,11,1649,9,"lastItem"],[1491,19,1649,17],[1492,2,1650,0],[1493,2,1651,0],[1493,11,1651,9,"redeemFromFinalWitnessScript"],[1493,39,1651,37,"redeemFromFinalWitnessScript"],[1493,40,1651,38,"finalScript"],[1493,51,1651,49],[1493,53,1651,51],[1494,4,1652,2],[1494,8,1652,6],[1494,9,1652,7,"finalScript"],[1494,20,1652,18],[1494,22,1652,20],[1495,4,1653,2],[1495,8,1653,8,"decomp"],[1495,14,1653,14],[1495,17,1653,17,"scriptWitnessToWitnessStack"],[1495,44,1653,44],[1495,45,1653,45,"finalScript"],[1495,56,1653,56],[1495,57,1653,57],[1496,4,1654,2],[1496,8,1654,8,"lastItem"],[1496,16,1654,16],[1496,19,1654,19,"decomp"],[1496,25,1654,25],[1496,26,1654,26,"decomp"],[1496,32,1654,32],[1496,33,1654,33,"length"],[1496,39,1654,39],[1496,42,1654,42],[1496,43,1654,43],[1496,44,1654,44],[1497,4,1655,2],[1497,8,1655,6,"isPubkeyLike"],[1497,20,1655,18],[1497,21,1655,19,"lastItem"],[1497,29,1655,27],[1497,30,1655,28],[1497,32,1655,30],[1498,4,1656,2],[1498,8,1656,8,"sDecomp"],[1498,15,1656,15],[1498,18,1656,18,"_$$_REQUIRE"],[1498,29,1656,18],[1498,30,1656,18,"_dependencyMap"],[1498,44,1656,18],[1498,62,1656,26,"decompile"],[1498,71,1656,35],[1498,72,1656,36,"lastItem"],[1498,80,1656,44],[1498,81,1656,45],[1499,4,1657,2],[1499,8,1657,6],[1499,9,1657,7,"sDecomp"],[1499,16,1657,14],[1499,18,1657,16],[1500,4,1658,2],[1500,11,1658,9,"lastItem"],[1500,19,1658,17],[1501,2,1659,0],[1502,2,1660,0],[1502,11,1660,9,"compressPubkey"],[1502,25,1660,23,"compressPubkey"],[1502,26,1660,24,"pubkey"],[1502,32,1660,30],[1502,34,1660,32],[1503,4,1661,2],[1503,8,1661,6,"pubkey"],[1503,14,1661,12],[1503,15,1661,13,"length"],[1503,21,1661,19],[1503,26,1661,24],[1503,28,1661,26],[1503,30,1661,28],[1504,6,1662,4],[1504,10,1662,10,"parity"],[1504,16,1662,16],[1504,19,1662,19,"pubkey"],[1504,25,1662,25],[1504,26,1662,26],[1504,28,1662,28],[1504,29,1662,29],[1504,32,1662,32],[1504,33,1662,33],[1505,6,1663,4],[1505,10,1663,10,"newKey"],[1505,16,1663,16],[1505,19,1663,19,"pubkey"],[1505,25,1663,25],[1505,26,1663,26,"slice"],[1505,31,1663,31],[1505,32,1663,32],[1505,33,1663,33],[1505,35,1663,35],[1505,37,1663,37],[1505,38,1663,38],[1506,6,1664,4,"newKey"],[1506,12,1664,10],[1506,13,1664,11],[1506,14,1664,12],[1506,15,1664,13],[1506,18,1664,16],[1506,19,1664,17],[1506,22,1664,20,"parity"],[1506,28,1664,26],[1507,6,1665,4],[1507,13,1665,11,"newKey"],[1507,19,1665,17],[1508,4,1666,2],[1509,4,1667,2],[1509,11,1667,9,"pubkey"],[1509,17,1667,15],[1509,18,1667,16,"slice"],[1509,23,1667,21],[1509,24,1667,22],[1509,25,1667,23],[1510,2,1668,0],[1511,2,1669,0],[1511,11,1669,9,"isPubkeyLike"],[1511,23,1669,21,"isPubkeyLike"],[1511,24,1669,22,"buf"],[1511,27,1669,25],[1511,29,1669,27],[1512,4,1670,2],[1512,11,1670,9,"buf"],[1512,14,1670,12],[1512,15,1670,13,"length"],[1512,21,1670,19],[1512,26,1670,24],[1512,28,1670,26],[1512,32,1670,30,"_$$_REQUIRE"],[1512,43,1670,30],[1512,44,1670,30,"_dependencyMap"],[1512,58,1670,30],[1512,76,1670,38,"isCanonicalPubKey"],[1512,93,1670,55],[1512,94,1670,56,"buf"],[1512,97,1670,59],[1512,98,1670,60],[1513,2,1671,0],[1514,2,1672,0],[1514,11,1672,9,"isSigLike"],[1514,20,1672,18,"isSigLike"],[1514,21,1672,19,"buf"],[1514,24,1672,22],[1514,26,1672,24],[1515,4,1673,2],[1515,11,1673,9,"_$$_REQUIRE"],[1515,22,1673,9],[1515,23,1673,9,"_dependencyMap"],[1515,37,1673,9],[1515,55,1673,17,"isCanonicalScriptSignature"],[1515,81,1673,43],[1515,82,1673,44,"buf"],[1515,85,1673,47],[1515,86,1673,48],[1516,2,1674,0],[1517,2,1675,0],[1517,11,1675,9,"getMeaningfulScript"],[1517,30,1675,28,"getMeaningfulScript"],[1517,31,1676,2,"script"],[1517,37,1676,8],[1517,39,1677,2,"index"],[1517,44,1677,7],[1517,46,1678,2,"ioType"],[1517,52,1678,8],[1517,54,1679,2,"redeemScript"],[1517,66,1679,14],[1517,68,1680,2,"witnessScript"],[1517,81,1680,15],[1517,83,1681,2],[1518,4,1682,2],[1518,8,1682,8,"isP2SH"],[1518,14,1682,14],[1518,17,1682,17],[1518,18,1682,18],[1518,19,1682,19],[1518,21,1682,21,"_$$_REQUIRE"],[1518,32,1682,21],[1518,33,1682,21,"_dependencyMap"],[1518,47,1682,21],[1518,73,1682,33,"isP2SHScript"],[1518,85,1682,45],[1518,87,1682,47,"script"],[1518,93,1682,53],[1518,94,1682,54],[1519,4,1683,2],[1519,8,1683,8,"isP2SHP2WSH"],[1519,19,1683,19],[1519,22,1684,4,"isP2SH"],[1519,28,1684,10],[1519,32,1684,14,"redeemScript"],[1519,44,1684,26],[1519,48,1684,30],[1519,49,1684,31],[1519,50,1684,32],[1519,52,1684,34,"_$$_REQUIRE"],[1519,63,1684,34],[1519,64,1684,34,"_dependencyMap"],[1519,78,1684,34],[1519,104,1684,46,"isP2WSHScript"],[1519,117,1684,59],[1519,119,1684,61,"redeemScript"],[1519,131,1684,73],[1519,132,1684,74],[1520,4,1685,2],[1520,8,1685,8,"isP2WSH"],[1520,15,1685,15],[1520,18,1685,18],[1520,19,1685,19],[1520,20,1685,20],[1520,22,1685,22,"_$$_REQUIRE"],[1520,33,1685,22],[1520,34,1685,22,"_dependencyMap"],[1520,48,1685,22],[1520,74,1685,34,"isP2WSHScript"],[1520,87,1685,47],[1520,89,1685,49,"script"],[1520,95,1685,55],[1520,96,1685,56],[1521,4,1686,2],[1521,8,1686,6,"isP2SH"],[1521,14,1686,12],[1521,18,1686,16,"redeemScript"],[1521,30,1686,28],[1521,35,1686,33,"undefined"],[1521,44,1686,42],[1521,46,1687,4],[1521,52,1687,10],[1521,56,1687,14,"Error"],[1521,61,1687,19],[1521,62,1687,20],[1521,109,1687,67],[1521,110,1687,68],[1522,4,1688,2],[1522,8,1688,6],[1522,9,1688,7,"isP2WSH"],[1522,16,1688,14],[1522,20,1688,18,"isP2SHP2WSH"],[1522,31,1688,29],[1522,36,1688,34,"witnessScript"],[1522,49,1688,47],[1522,54,1688,52,"undefined"],[1522,63,1688,61],[1522,65,1689,4],[1522,71,1689,10],[1522,75,1689,14,"Error"],[1522,80,1689,19],[1522,81,1690,6],[1522,146,1691,4],[1522,147,1691,5],[1523,4,1692,2],[1523,8,1692,6,"meaningfulScript"],[1523,24,1692,22],[1524,4,1693,2],[1524,8,1693,6,"isP2SHP2WSH"],[1524,19,1693,17],[1524,21,1693,19],[1525,6,1694,4,"meaningfulScript"],[1525,22,1694,20],[1525,25,1694,23,"witnessScript"],[1525,38,1694,36],[1526,6,1695,4,"checkRedeemScript"],[1526,23,1695,21],[1526,24,1695,22,"index"],[1526,29,1695,27],[1526,31,1695,29,"script"],[1526,37,1695,35],[1526,39,1695,37,"redeemScript"],[1526,51,1695,49],[1526,53,1695,51,"ioType"],[1526,59,1695,57],[1526,60,1695,58],[1527,6,1696,4,"checkWitnessScript"],[1527,24,1696,22],[1527,25,1696,23,"index"],[1527,30,1696,28],[1527,32,1696,30,"redeemScript"],[1527,44,1696,42],[1527,46,1696,44,"witnessScript"],[1527,59,1696,57],[1527,61,1696,59,"ioType"],[1527,67,1696,65],[1527,68,1696,66],[1528,6,1697,4,"checkInvalidP2WSH"],[1528,23,1697,21],[1528,24,1697,22,"meaningfulScript"],[1528,40,1697,38],[1528,41,1697,39],[1529,4,1698,2],[1529,5,1698,3],[1529,11,1698,9],[1529,15,1698,13,"isP2WSH"],[1529,22,1698,20],[1529,24,1698,22],[1530,6,1699,4,"meaningfulScript"],[1530,22,1699,20],[1530,25,1699,23,"witnessScript"],[1530,38,1699,36],[1531,6,1700,4,"checkWitnessScript"],[1531,24,1700,22],[1531,25,1700,23,"index"],[1531,30,1700,28],[1531,32,1700,30,"script"],[1531,38,1700,36],[1531,40,1700,38,"witnessScript"],[1531,53,1700,51],[1531,55,1700,53,"ioType"],[1531,61,1700,59],[1531,62,1700,60],[1532,6,1701,4,"checkInvalidP2WSH"],[1532,23,1701,21],[1532,24,1701,22,"meaningfulScript"],[1532,40,1701,38],[1532,41,1701,39],[1533,4,1702,2],[1533,5,1702,3],[1533,11,1702,9],[1533,15,1702,13,"isP2SH"],[1533,21,1702,19],[1533,23,1702,21],[1534,6,1703,4,"meaningfulScript"],[1534,22,1703,20],[1534,25,1703,23,"redeemScript"],[1534,37,1703,35],[1535,6,1704,4,"checkRedeemScript"],[1535,23,1704,21],[1535,24,1704,22,"index"],[1535,29,1704,27],[1535,31,1704,29,"script"],[1535,37,1704,35],[1535,39,1704,37,"redeemScript"],[1535,51,1704,49],[1535,53,1704,51,"ioType"],[1535,59,1704,57],[1535,60,1704,58],[1536,4,1705,2],[1536,5,1705,3],[1536,11,1705,9],[1537,6,1706,4,"meaningfulScript"],[1537,22,1706,20],[1537,25,1706,23,"script"],[1537,31,1706,29],[1538,4,1707,2],[1539,4,1708,2],[1539,11,1708,9],[1540,6,1709,4,"meaningfulScript"],[1540,22,1709,20],[1540,24,1709,4,"meaningfulScript"],[1540,40,1709,20],[1541,6,1710,4,"type"],[1541,10,1710,8],[1541,12,1710,10,"isP2SHP2WSH"],[1541,23,1710,21],[1541,26,1711,8],[1541,38,1711,20],[1541,41,1712,8,"isP2SH"],[1541,47,1712,14],[1541,50,1713,8],[1541,56,1713,14],[1541,59,1714,8,"isP2WSH"],[1541,66,1714,15],[1541,69,1715,8],[1541,76,1715,15],[1541,79,1716,8],[1542,4,1717,2],[1542,5,1717,3],[1543,2,1718,0],[1544,2,1719,0],[1544,11,1719,9,"checkInvalidP2WSH"],[1544,28,1719,26,"checkInvalidP2WSH"],[1544,29,1719,27,"script"],[1544,35,1719,33],[1544,37,1719,35],[1545,4,1720,2],[1545,8,1721,4],[1545,9,1721,5],[1545,10,1721,6],[1545,12,1721,8,"_$$_REQUIRE"],[1545,23,1721,8],[1545,24,1721,8,"_dependencyMap"],[1545,38,1721,8],[1545,64,1721,20,"isP2WPKH"],[1545,72,1721,28],[1545,74,1721,30,"script"],[1545,80,1721,36],[1545,81,1721,37],[1545,85,1722,4],[1545,86,1722,5],[1545,87,1722,6],[1545,89,1722,8,"_$$_REQUIRE"],[1545,100,1722,8],[1545,101,1722,8,"_dependencyMap"],[1545,115,1722,8],[1545,141,1722,20,"isP2SHScript"],[1545,153,1722,32],[1545,155,1722,34,"script"],[1545,161,1722,40],[1545,162,1722,41],[1545,164,1723,4],[1546,6,1724,4],[1546,12,1724,10],[1546,16,1724,14,"Error"],[1546,21,1724,19],[1546,22,1724,20],[1546,72,1724,70],[1546,73,1724,71],[1547,4,1725,2],[1548,2,1726,0],[1549,2,1727,0],[1549,11,1727,9,"classifyScript"],[1549,25,1727,23,"classifyScript"],[1549,26,1727,24,"script"],[1549,32,1727,30],[1549,34,1727,32],[1550,4,1728,2],[1550,8,1728,6],[1550,9,1728,7],[1550,10,1728,8],[1550,12,1728,10,"_$$_REQUIRE"],[1550,23,1728,10],[1550,24,1728,10,"_dependencyMap"],[1550,38,1728,10],[1550,64,1728,22,"isP2WPKH"],[1550,72,1728,30],[1550,74,1728,32,"script"],[1550,80,1728,38],[1550,81,1728,39],[1550,83,1728,41],[1550,90,1728,48],[1550,109,1728,67],[1551,4,1729,2],[1551,8,1729,6],[1551,9,1729,7],[1551,10,1729,8],[1551,12,1729,10,"_$$_REQUIRE"],[1551,23,1729,10],[1551,24,1729,10,"_dependencyMap"],[1551,38,1729,10],[1551,64,1729,22,"isP2PKH"],[1551,71,1729,29],[1551,73,1729,31,"script"],[1551,79,1729,37],[1551,80,1729,38],[1551,82,1729,40],[1551,89,1729,47],[1551,101,1729,59],[1552,4,1730,2],[1552,8,1730,6],[1552,9,1730,7],[1552,10,1730,8],[1552,12,1730,10,"_$$_REQUIRE"],[1552,23,1730,10],[1552,24,1730,10,"_dependencyMap"],[1552,38,1730,10],[1552,64,1730,22,"isP2MS"],[1552,70,1730,28],[1552,72,1730,30,"script"],[1552,78,1730,36],[1552,79,1730,37],[1552,81,1730,39],[1552,88,1730,46],[1552,98,1730,56],[1553,4,1731,2],[1553,8,1731,6],[1553,9,1731,7],[1553,10,1731,8],[1553,12,1731,10,"_$$_REQUIRE"],[1553,23,1731,10],[1553,24,1731,10,"_dependencyMap"],[1553,38,1731,10],[1553,64,1731,22,"isP2PK"],[1553,70,1731,28],[1553,72,1731,30,"script"],[1553,78,1731,36],[1553,79,1731,37],[1553,81,1731,39],[1553,88,1731,46],[1553,96,1731,54],[1554,4,1732,2],[1554,11,1732,9],[1554,24,1732,22],[1555,2,1733,0],[1556,2,1734,0],[1556,11,1734,9,"range"],[1556,16,1734,14,"range"],[1556,17,1734,15,"n"],[1556,18,1734,16],[1556,20,1734,18],[1557,4,1735,2],[1557,11,1735,2,"_toConsumableArray"],[1557,29,1735,2],[1557,30,1735,13,"Array"],[1557,35,1735,18],[1557,36,1735,19,"n"],[1557,37,1735,20],[1557,38,1735,21],[1557,39,1735,22,"keys"],[1557,43,1735,26],[1557,44,1735,27],[1557,45,1735,28],[1558,2,1736,0],[1559,0,1736,1],[1559,3]],"functionMap":{"names":["<global>","Psbt","Psbt.fromBase64","Psbt.fromHex","Psbt.fromBuffer","Psbt#constructor","dpew","Psbt#get__inputCount","Psbt#get__version","Psbt#set__version","Psbt#get__locktime","Psbt#set__locktime","Psbt#get__txInputs","__CACHE.__TX.ins.map$argument_0","Psbt#get__txOutputs","__CACHE.__TX.outs.map$argument_0","Psbt#combine","those.map$argument_0","Psbt#clone","Psbt#setMaximumFeeRate","Psbt#setVersion","Psbt#setLocktime","Psbt#setInputSequence","Psbt#addInputs","inputDatas.forEach$argument_0","Psbt#addInput","Psbt#addOutputs","outputDatas.forEach$argument_0","Psbt#addOutput","Psbt#extractTransaction","Psbt#getFeeRate","Psbt#getFee","Psbt#finalizeAllInputs","range.forEach$argument_0","Psbt#finalizeInput","Psbt#finalizeTaprootInput","Psbt#_finalizeInput","Psbt#_finalizeTaprootInput","Psbt#getInputType","Psbt#inputHasPubkey","Psbt#inputHasHDKey","Psbt#outputHasPubkey","Psbt#outputHasHDKey","Psbt#validateSignaturesOfAllInputs","range.map$argument_0","results.reduce$argument_0","Psbt#validateSignaturesOfInput","Psbt#_validateSignaturesOfInput","partialSig.filter$argument_0","results.every$argument_0","Psbt#validateSignaturesOfTaprootInput","allHashses.find$argument_0","Psbt#signAllInputsHD","Psbt#signAllInputsHDAsync","Promise$argument_0","signInputHDAsync.then$argument_0","signInputHDAsync.then$argument_1","Promise.all.then$argument_0","Psbt#signInputHD","signers.forEach$argument_0","Psbt#signInputHDAsync","signers.map$argument_0","Psbt#signAllInputs","Psbt#signAllInputsAsync","signInputAsync.then$argument_0","signInputAsync.then$argument_1","Psbt#signInput","Psbt#signTaprootInput","Psbt#_signInput","Psbt#_signTaprootInput","hashesForSig.filter$argument_0","hashesForSig.filter.map$argument_0","Psbt#signInputAsync","Promise.resolve.then$argument_0","Psbt#signTaprootInputAsync","Psbt#_signInputAsync","Psbt#_signTaprootInputAsync","tapScriptHashes.map$argument_0","results.forEach$argument_0","Psbt#checkTaprootHashesForSig","Psbt#toBuffer","Psbt#toHex","Psbt#toBase64","Psbt#updateGlobal","Psbt#updateInput","Psbt#updateOutput","Psbt#addUnknownKeyValToGlobal","Psbt#addUnknownKeyValToInput","Psbt#addUnknownKeyValToOutput","Psbt#clearFinalizedInput","transactionFromBuffer","PsbtTransaction","PsbtTransaction#constructor","PsbtTransaction#getInputOutputCounts","PsbtTransaction#addInput","PsbtTransaction#addOutput","PsbtTransaction#toBuffer","canFinalize","checkCache","hasSigs","pubkeys.map$argument_0","partialSig.find$argument_0","pubkeys.map.filter$argument_0","isFinalized","bip32DerivationIsMine","<anonymous>","check32Bit","checkFees","checkInputsForPartialSig","inputs.forEach$argument_0","checkPartialSigSighashes","partialSig.forEach$argument_0","checkScriptForPubkey","checkTxEmpty","tx.ins.every$argument_0","checkTxForDupeIns","tx.ins.forEach$argument_0","checkTxInputCache","scriptCheckerFactory","getTxCacheValue","getFinalScripts","prepareFinalScripts","getHashAndSighashType","getHashForSig","getAllTaprootHashesForSig","input.tapScriptSig.map$argument_0","allPublicKeys.map$argument_0","getPrevoutTaprootKey","trimTaprootSig","getTaprootHashesForSig","inputs.map$argument_0","prevOuts.map$argument_0","filter$argument_0","filter.map$argument_0","filter.map.filter$argument_0","filter.map.filter.map$argument_0","checkSighashTypeAllowed","getPayment","getScriptFromInput","getSignersFromHD","input.bip32Derivation.map$argument_0","input.bip32Derivation.map.filter$argument_0","myDerivations.map$argument_0","getSortedSigs","p2ms.pubkeys.map$argument_0","p2ms.pubkeys.map.filter$argument_0","scriptWitnessToWitnessStack","readSlice","readVarInt","readVarSlice","readVector","sighashTypeToString","addNonWitnessTxCache","Object.defineProperty$argument_2.get","Object.defineProperty$argument_2.set","inputFinalizeGetAmts","tx.outs.reduce$argument_0","nonWitnessUtxoTxFromCache","getScriptFromUtxo","getScriptAndAmountFromUtxo","pubkeyInInput","pubkeyInOutput","redeemFromFinalScriptSig","redeemFromFinalWitnessScript","compressPubkey","isPubkeyLike","isSigLike","getMeaningfulScript","checkInvalidP2WSH","classifyScript","range"],"mappings":"AAA;ACoE;ECC;GDG;EEC;GFG;EGC;GHK;EIC;iBCqB;QDI;GJG;EMC;GNE;EOC;GPE;EQC;GRE;ESC;GTE;EUC;GVE;EWC;qCCC;MDI;GXC;EaC;sCCC;KDa;GbC;EeC;mCCC,WD;GfE;EiBC;GjBK;EkBC;GlBG;EmBC;GnBO;EoBC;GpBO;EqBC;GrBU;EsBC;uBCC,qCD;GtBE;EwBC;GxB4B;EyBC;wBCC,wCD;GzBE;E2BC;G3B0B;E4BC;G5BU;E6BC;G7BO;E8BC;G9BE;E+BC;2CCE,8BD;G/BE;EiCC;GjCU;EkCC;GlCc;EmCC;GnCuB;EoCC;GpC8B;EqCC;GrCc;EsCC;GtCG;EuCC;GvCM;EwCC;GxCG;EyCC;GzCM;E0CC;uDCE;oDDC;0BEE,qCF;G1CC;E6CC;G7CS;E8CC;0BCQ,gCD;yBEwB,mBF;G9CC;EiDC;uCCwB,gBD;2CCa,mCD;GjDa;EmDC;sBHgB,gBG;GnDI;EoDC;uBCI;YCS;aDE;YEC;aFE;wCGI;0BRC,gBQ;OHI;KDC;GpDC;EyDC;oBCS,0DD;GzDE;E2DC;uBNK;mCOK;6DPC;cGG;SHE;KME;G3DC;E6DC;sBbe,gBa;G7DI;E8DC;uBTC;YUW;aVE;YWC;aXE;wCGI;0BRC,gBQ;OHI;KSC;G9DC;EiEC;GjEc;EkEC;GlEa;EmEC;GnEoB;EoEC;cCe,gBD;WEC;SFI;cCG,iBD;WEC;QFO;GpEQ;EuEC;kCCC;KDa;GvEC;EyEC;kCDC;KCa;GzEC;E0EC;oDFY;KEQ;G1EC;E2EC;2CNe,gBM;aHI;OGO;gDNG,iBM;uDCE;UJE;WIY;ODE;+CnBG;sBqBC,yCrB;KmBC;G3EC;E8EC;G9E2B;E+EC;G/EG;EgFC;GhFG;EiFC;GjFG;EkFC;GlFG;EmFC;GnFgB;EoFC;GpFS;EqFC;GrFG;EsFC;GtFG;EuFC;GvFG;EwFC;GxFG;CDC;8B0FO,qC1F;A2FK;ECC;GDO;EEC;GFK;EGC;GHc;EIC;GJU;EKC;GLE;C3FC;AiGC;CjGY;AkGC;ClGI;AmGC;WCK;+BCE,kCD;ODC;cGC,QH;CnGM;AuGC;CvGE;AwGC;SCC;GDI;CxGC;A0GC;C1GS;A2GC;C3Ga;A4GC;iBCC;GDM;C5GC;A8GC;qBCG;GDK;C9GC;AgHC;ChHM;AiHC;ICE;gCDI;CjHK;AmHC;iBCC;GDE;CnHC;AqHC;CrHO;AsHC;SbC;GaS;CtHC;AuHM;CvHgB;AwHC;CxHY;AyHC;CzHsC;A0HC;C1HoB;A2HC;C3HoF;A4HC;oDCS,iBD;sCEG;sEFC;C5HG;A+HC;C/HG;AgIC;ChIE;AiIC;8BCa;+CDC;sCEE,aF;8BEC,YF;YGgB,kEH;SIC;KJM;MKE,uEL;SME;KNa;CjIE;AwIC;CxIQ;AyIC;CzIgC;A0IC;C1I+B;A2IC;SCM;KDM;YEC,QF;oCGM;GHM;C3IE;A+IC;SCI;0BhGG;SgGE;KDI;YEC,QF;C/IC;AkJC;ECE;GDG;EEC;GFI;EGC;GHE;EIC;GJK;ClJE;AuJC;CvJkB;AwJC;ICS;KDU;IEC;KFE;CxJE;A2JC;iB9CE;G8CgB;sCCC,6BD;C3JS;A6JC;C7JM;A8JC;C9JG;A+JC;C/JiB;AgKC;ChKU;AiKC;CjKU;AkKC;ClKc;AmKC;CnKQ;AoKC;CpKQ;AqKC;CrKE;AsKC;CtKE;AuKC;CvK2C;AwKC;CxKO;AyKC;CzKM;A0KC;C1KE"}},"type":"js/module"}]}