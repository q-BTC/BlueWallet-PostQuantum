{"dependencies":[{"name":"../common/List","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":36,"index":36}}],"key":"O1BxckxP8xea+N4BLQHDv6IfpVU="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function getFirstMatchNode(matchNode) {\n    if ('node' in matchNode) {\n      return matchNode.node;\n    }\n    return getFirstMatchNode(matchNode.match[0]);\n  }\n  function getLastMatchNode(matchNode) {\n    if ('node' in matchNode) {\n      return matchNode.node;\n    }\n    return getLastMatchNode(matchNode.match[matchNode.match.length - 1]);\n  }\n  function matchFragments(lexer, ast, match, type, name) {\n    function findFragments(matchNode) {\n      if (matchNode.syntax !== null && matchNode.syntax.type === type && matchNode.syntax.name === name) {\n        var start = getFirstMatchNode(matchNode);\n        var end = getLastMatchNode(matchNode);\n        lexer.syntax.walk(ast, function (node, item, list) {\n          if (node === start) {\n            var nodes = new (_$$_REQUIRE(_dependencyMap[0], \"../common/List\"))();\n            do {\n              nodes.appendData(item.data);\n              if (item.data === end) {\n                break;\n              }\n              item = item.next;\n            } while (item !== null);\n            fragments.push({\n              parent: list,\n              nodes: nodes\n            });\n          }\n        });\n      }\n      if (Array.isArray(matchNode.match)) {\n        matchNode.match.forEach(findFragments);\n      }\n    }\n    var fragments = [];\n    if (match.matched !== null) {\n      findFragments(match.matched);\n    }\n    return fragments;\n  }\n  module.exports = {\n    matchFragments: matchFragments\n  };\n});","lineCount":49,"map":[[2,2,3,0],[2,11,3,9,"getFirstMatchNode"],[2,28,3,26,"getFirstMatchNode"],[2,29,3,27,"matchNode"],[2,38,3,36],[2,40,3,38],[3,4,4,4],[3,8,4,8],[3,14,4,14],[3,18,4,18,"matchNode"],[3,27,4,27],[3,29,4,29],[4,6,5,8],[4,13,5,15,"matchNode"],[4,22,5,24],[4,23,5,25,"node"],[4,27,5,29],[5,4,6,4],[6,4,8,4],[6,11,8,11,"getFirstMatchNode"],[6,28,8,28],[6,29,8,29,"matchNode"],[6,38,8,38],[6,39,8,39,"match"],[6,44,8,44],[6,45,8,45],[6,46,8,46],[6,47,8,47],[6,48,8,48],[7,2,9,0],[8,2,11,0],[8,11,11,9,"getLastMatchNode"],[8,27,11,25,"getLastMatchNode"],[8,28,11,26,"matchNode"],[8,37,11,35],[8,39,11,37],[9,4,12,4],[9,8,12,8],[9,14,12,14],[9,18,12,18,"matchNode"],[9,27,12,27],[9,29,12,29],[10,6,13,8],[10,13,13,15,"matchNode"],[10,22,13,24],[10,23,13,25,"node"],[10,27,13,29],[11,4,14,4],[12,4,16,4],[12,11,16,11,"getLastMatchNode"],[12,27,16,27],[12,28,16,28,"matchNode"],[12,37,16,37],[12,38,16,38,"match"],[12,43,16,43],[12,44,16,44,"matchNode"],[12,53,16,53],[12,54,16,54,"match"],[12,59,16,59],[12,60,16,60,"length"],[12,66,16,66],[12,69,16,69],[12,70,16,70],[12,71,16,71],[12,72,16,72],[13,2,17,0],[14,2,19,0],[14,11,19,9,"matchFragments"],[14,25,19,23,"matchFragments"],[14,26,19,24,"lexer"],[14,31,19,29],[14,33,19,31,"ast"],[14,36,19,34],[14,38,19,36,"match"],[14,43,19,41],[14,45,19,43,"type"],[14,49,19,47],[14,51,19,49,"name"],[14,55,19,53],[14,57,19,55],[15,4,20,4],[15,13,20,13,"findFragments"],[15,26,20,26,"findFragments"],[15,27,20,27,"matchNode"],[15,36,20,36],[15,38,20,38],[16,6,21,8],[16,10,21,12,"matchNode"],[16,19,21,21],[16,20,21,22,"syntax"],[16,26,21,28],[16,31,21,33],[16,35,21,37],[16,39,22,12,"matchNode"],[16,48,22,21],[16,49,22,22,"syntax"],[16,55,22,28],[16,56,22,29,"type"],[16,60,22,33],[16,65,22,38,"type"],[16,69,22,42],[16,73,23,12,"matchNode"],[16,82,23,21],[16,83,23,22,"syntax"],[16,89,23,28],[16,90,23,29,"name"],[16,94,23,33],[16,99,23,38,"name"],[16,103,23,42],[16,105,23,44],[17,8,24,12],[17,12,24,16,"start"],[17,17,24,21],[17,20,24,24,"getFirstMatchNode"],[17,37,24,41],[17,38,24,42,"matchNode"],[17,47,24,51],[17,48,24,52],[18,8,25,12],[18,12,25,16,"end"],[18,15,25,19],[18,18,25,22,"getLastMatchNode"],[18,34,25,38],[18,35,25,39,"matchNode"],[18,44,25,48],[18,45,25,49],[19,8,27,12,"lexer"],[19,13,27,17],[19,14,27,18,"syntax"],[19,20,27,24],[19,21,27,25,"walk"],[19,25,27,29],[19,26,27,30,"ast"],[19,29,27,33],[19,31,27,35],[19,41,27,44,"node"],[19,45,27,48],[19,47,27,50,"item"],[19,51,27,54],[19,53,27,56,"list"],[19,57,27,60],[19,59,27,62],[20,10,28,16],[20,14,28,20,"node"],[20,18,28,24],[20,23,28,29,"start"],[20,28,28,34],[20,30,28,36],[21,12,29,20],[21,16,29,24,"nodes"],[21,21,29,29],[21,24,29,32],[21,29,29,32,"_$$_REQUIRE"],[21,40,29,32],[21,41,29,32,"_dependencyMap"],[21,55,29,32],[21,79,29,41],[21,80,29,42],[22,12,31,20],[22,15,31,23],[23,14,32,24,"nodes"],[23,19,32,29],[23,20,32,30,"appendData"],[23,30,32,40],[23,31,32,41,"item"],[23,35,32,45],[23,36,32,46,"data"],[23,40,32,50],[23,41,32,51],[24,14,34,24],[24,18,34,28,"item"],[24,22,34,32],[24,23,34,33,"data"],[24,27,34,37],[24,32,34,42,"end"],[24,35,34,45],[24,37,34,47],[25,16,35,28],[26,14,36,24],[27,14,38,24,"item"],[27,18,38,28],[27,21,38,31,"item"],[27,25,38,35],[27,26,38,36,"next"],[27,30,38,40],[28,12,39,20],[28,13,39,21],[28,21,39,29,"item"],[28,25,39,33],[28,30,39,38],[28,34,39,42],[29,12,41,20,"fragments"],[29,21,41,29],[29,22,41,30,"push"],[29,26,41,34],[29,27,41,35],[30,14,42,24,"parent"],[30,20,42,30],[30,22,42,32,"list"],[30,26,42,36],[31,14,43,24,"nodes"],[31,19,43,29],[31,21,43,31,"nodes"],[32,12,44,20],[32,13,44,21],[32,14,44,22],[33,10,45,16],[34,8,46,12],[34,9,46,13],[34,10,46,14],[35,6,47,8],[36,6,49,8],[36,10,49,12,"Array"],[36,15,49,17],[36,16,49,18,"isArray"],[36,23,49,25],[36,24,49,26,"matchNode"],[36,33,49,35],[36,34,49,36,"match"],[36,39,49,41],[36,40,49,42],[36,42,49,44],[37,8,50,12,"matchNode"],[37,17,50,21],[37,18,50,22,"match"],[37,23,50,27],[37,24,50,28,"forEach"],[37,31,50,35],[37,32,50,36,"findFragments"],[37,45,50,49],[37,46,50,50],[38,6,51,8],[39,4,52,4],[40,4,54,4],[40,8,54,8,"fragments"],[40,17,54,17],[40,20,54,20],[40,22,54,22],[41,4,56,4],[41,8,56,8,"match"],[41,13,56,13],[41,14,56,14,"matched"],[41,21,56,21],[41,26,56,26],[41,30,56,30],[41,32,56,32],[42,6,57,8,"findFragments"],[42,19,57,21],[42,20,57,22,"match"],[42,25,57,27],[42,26,57,28,"matched"],[42,33,57,35],[42,34,57,36],[43,4,58,4],[44,4,60,4],[44,11,60,11,"fragments"],[44,20,60,20],[45,2,61,0],[46,2,63,0,"module"],[46,8,63,6],[46,9,63,7,"exports"],[46,16,63,14],[46,19,63,17],[47,4,64,4,"matchFragments"],[47,18,64,18],[47,20,64,20,"matchFragments"],[48,2,65,0],[48,3,65,1],[49,0,65,2],[49,3]],"functionMap":{"names":["<global>","getFirstMatchNode","getLastMatchNode","matchFragments","findFragments","lexer.syntax.walk$argument_1"],"mappings":"AAA;ACE;CDM;AEE;CFM;AGE;ICC;mCCO;aDmB;KDM;CHS"}},"type":"js/module"}]}