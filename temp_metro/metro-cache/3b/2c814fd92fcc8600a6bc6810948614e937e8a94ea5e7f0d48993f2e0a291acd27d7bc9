{"dependencies":[{"name":"bigi","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":17,"index":91},"end":{"line":3,"column":32,"index":106}},{"start":{"line":3,"column":17,"index":91},"end":{"line":3,"column":32,"index":106}},{"start":{"line":3,"column":17,"index":91},"end":{"line":3,"column":32,"index":106}},{"start":{"line":3,"column":17,"index":91},"end":{"line":3,"column":32,"index":106}}],"key":"q6QfkLyqHnq7dS8FK7xihddCqiE="}},{"name":"assert","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":30,"index":30}},{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":30,"index":30}},{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":30,"index":30}},{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":30,"index":30}}],"key":"Umsy3wQQm6DbjafRIeuw3teOkUU="}},{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":13,"index":44},"end":{"line":2,"column":42,"index":73}},{"start":{"line":2,"column":13,"index":44},"end":{"line":2,"column":42,"index":73}},{"start":{"line":2,"column":13,"index":44},"end":{"line":2,"column":42,"index":73}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var THREE = _$$_REQUIRE(_dependencyMap[0], \"bigi\").valueOf(3);\n  function Point(curve, x, y, z) {\n    _$$_REQUIRE(_dependencyMap[1], \"assert\").notStrictEqual(z, undefined, 'Missing Z coordinate');\n    this.curve = curve;\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this._zInv = null;\n    this.compressed = true;\n  }\n  Object.defineProperty(Point.prototype, 'zInv', {\n    get: function get() {\n      if (this._zInv === null) {\n        this._zInv = this.z.modInverse(this.curve.p);\n      }\n      return this._zInv;\n    }\n  });\n  Object.defineProperty(Point.prototype, 'affineX', {\n    get: function get() {\n      return this.x.multiply(this.zInv).mod(this.curve.p);\n    }\n  });\n  Object.defineProperty(Point.prototype, 'affineY', {\n    get: function get() {\n      return this.y.multiply(this.zInv).mod(this.curve.p);\n    }\n  });\n  Point.fromAffine = function (curve, x, y) {\n    return new Point(curve, x, y, _$$_REQUIRE(_dependencyMap[0], \"bigi\").ONE);\n  };\n  Point.prototype.equals = function (other) {\n    if (other === this) return true;\n    if (this.curve.isInfinity(this)) return this.curve.isInfinity(other);\n    if (this.curve.isInfinity(other)) return this.curve.isInfinity(this);\n\n    // u = Y2 * Z1 - Y1 * Z2\n    var u = other.y.multiply(this.z).subtract(this.y.multiply(other.z)).mod(this.curve.p);\n    if (u.signum() !== 0) return false;\n\n    // v = X2 * Z1 - X1 * Z2\n    var v = other.x.multiply(this.z).subtract(this.x.multiply(other.z)).mod(this.curve.p);\n    return v.signum() === 0;\n  };\n  Point.prototype.negate = function () {\n    var y = this.curve.p.subtract(this.y);\n    return new Point(this.curve, this.x, y, this.z);\n  };\n  Point.prototype.add = function (b) {\n    if (this.curve.isInfinity(this)) return b;\n    if (this.curve.isInfinity(b)) return this;\n    var x1 = this.x;\n    var y1 = this.y;\n    var x2 = b.x;\n    var y2 = b.y;\n\n    // u = Y2 * Z1 - Y1 * Z2\n    var u = y2.multiply(this.z).subtract(y1.multiply(b.z)).mod(this.curve.p);\n    // v = X2 * Z1 - X1 * Z2\n    var v = x2.multiply(this.z).subtract(x1.multiply(b.z)).mod(this.curve.p);\n    if (v.signum() === 0) {\n      if (u.signum() === 0) {\n        return this.twice(); // this == b, so double\n      }\n      return this.curve.infinity; // this = -b, so infinity\n    }\n    var v2 = v.square();\n    var v3 = v2.multiply(v);\n    var x1v2 = x1.multiply(v2);\n    var zu2 = u.square().multiply(this.z);\n\n    // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)\n    var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.p);\n    // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3\n    var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.p);\n    // z3 = v^3 * z1 * z2\n    var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.p);\n    return new Point(this.curve, x3, y3, z3);\n  };\n  Point.prototype.twice = function () {\n    if (this.curve.isInfinity(this)) return this;\n    if (this.y.signum() === 0) return this.curve.infinity;\n    var x1 = this.x;\n    var y1 = this.y;\n    var y1z1 = y1.multiply(this.z).mod(this.curve.p);\n    var y1sqz1 = y1z1.multiply(y1).mod(this.curve.p);\n    var a = this.curve.a;\n\n    // w = 3 * x1^2 + a * z1^2\n    var w = x1.square().multiply(THREE);\n    if (a.signum() !== 0) {\n      w = w.add(this.z.square().multiply(a));\n    }\n    w = w.mod(this.curve.p);\n    // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)\n    var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.p);\n    // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3\n    var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.pow(3)).mod(this.curve.p);\n    // z3 = 8 * (y1 * z1)^3\n    var z3 = y1z1.pow(3).shiftLeft(3).mod(this.curve.p);\n    return new Point(this.curve, x3, y3, z3);\n  };\n\n  // Simple NAF (Non-Adjacent Form) multiplication algorithm\n  // TODO: modularize the multiplication algorithm\n  Point.prototype.multiply = function (k) {\n    if (this.curve.isInfinity(this)) return this;\n    if (k.signum() === 0) return this.curve.infinity;\n    var e = k;\n    var h = e.multiply(THREE);\n    var neg = this.negate();\n    var R = this;\n    for (var i = h.bitLength() - 2; i > 0; --i) {\n      var hBit = h.testBit(i);\n      var eBit = e.testBit(i);\n      R = R.twice();\n      if (hBit !== eBit) {\n        R = R.add(hBit ? this : neg);\n      }\n    }\n    return R;\n  };\n\n  // Compute this*j + x*k (simultaneous multiplication)\n  Point.prototype.multiplyTwo = function (j, x, k) {\n    var i = Math.max(j.bitLength(), k.bitLength()) - 1;\n    var R = this.curve.infinity;\n    var both = this.add(x);\n    while (i >= 0) {\n      var jBit = j.testBit(i);\n      var kBit = k.testBit(i);\n      R = R.twice();\n      if (jBit) {\n        if (kBit) {\n          R = R.add(both);\n        } else {\n          R = R.add(this);\n        }\n      } else if (kBit) {\n        R = R.add(x);\n      }\n      --i;\n    }\n    return R;\n  };\n  Point.prototype.getEncoded = function (compressed) {\n    if (compressed == null) compressed = this.compressed;\n    if (this.curve.isInfinity(this)) return _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.alloc(1, 0); // Infinity point encoded is simply '00'\n\n    var x = this.affineX;\n    var y = this.affineY;\n    var byteLength = this.curve.pLength;\n    var buffer;\n\n    // 0x02/0x03 | X\n    if (compressed) {\n      buffer = _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.allocUnsafe(1 + byteLength);\n      buffer.writeUInt8(y.isEven() ? 0x02 : 0x03, 0);\n\n      // 0x04 | X | Y\n    } else {\n      buffer = _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.allocUnsafe(1 + byteLength + byteLength);\n      buffer.writeUInt8(0x04, 0);\n      y.toBuffer(byteLength).copy(buffer, 1 + byteLength);\n    }\n    x.toBuffer(byteLength).copy(buffer, 1);\n    return buffer;\n  };\n  Point.decodeFrom = function (curve, buffer) {\n    var type = buffer.readUInt8(0);\n    var compressed = type !== 4;\n    var byteLength = Math.floor((curve.p.bitLength() + 7) / 8);\n    var x = _$$_REQUIRE(_dependencyMap[0], \"bigi\").fromBuffer(buffer.slice(1, 1 + byteLength));\n    var Q;\n    if (compressed) {\n      _$$_REQUIRE(_dependencyMap[1], \"assert\").equal(buffer.length, byteLength + 1, 'Invalid sequence length');\n      _$$_REQUIRE(_dependencyMap[1], \"assert\")(type === 0x02 || type === 0x03, 'Invalid sequence tag');\n      var isOdd = type === 0x03;\n      Q = curve.pointFromX(isOdd, x);\n    } else {\n      _$$_REQUIRE(_dependencyMap[1], \"assert\").equal(buffer.length, 1 + byteLength + byteLength, 'Invalid sequence length');\n      var y = _$$_REQUIRE(_dependencyMap[0], \"bigi\").fromBuffer(buffer.slice(1 + byteLength));\n      Q = Point.fromAffine(curve, x, y);\n    }\n    Q.compressed = compressed;\n    return Q;\n  };\n  Point.prototype.toString = function () {\n    if (this.curve.isInfinity(this)) return '(INFINITY)';\n    return '(' + this.affineX.toString() + ',' + this.affineY.toString() + ')';\n  };\n  module.exports = Point;\n});","lineCount":194,"map":[[2,2,5,0],[2,6,5,4,"THREE"],[2,11,5,9],[2,14,5,12,"_$$_REQUIRE"],[2,25,5,12],[2,26,5,12,"_dependencyMap"],[2,40,5,12],[2,53,5,23,"valueOf"],[2,60,5,30],[2,61,5,31],[2,62,5,32],[2,63,5,33],[3,2,7,0],[3,11,7,9,"Point"],[3,16,7,14,"Point"],[3,17,7,16,"curve"],[3,22,7,21],[3,24,7,23,"x"],[3,25,7,24],[3,27,7,26,"y"],[3,28,7,27],[3,30,7,29,"z"],[3,31,7,30],[3,33,7,32],[4,4,8,2,"_$$_REQUIRE"],[4,15,8,2],[4,16,8,2,"_dependencyMap"],[4,30,8,2],[4,45,8,9,"notStrictEqual"],[4,59,8,23],[4,60,8,24,"z"],[4,61,8,25],[4,63,8,27,"undefined"],[4,72,8,36],[4,74,8,38],[4,96,8,60],[4,97,8,61],[5,4,10,2],[5,8,10,6],[5,9,10,7,"curve"],[5,14,10,12],[5,17,10,15,"curve"],[5,22,10,20],[6,4,11,2],[6,8,11,6],[6,9,11,7,"x"],[6,10,11,8],[6,13,11,11,"x"],[6,14,11,12],[7,4,12,2],[7,8,12,6],[7,9,12,7,"y"],[7,10,12,8],[7,13,12,11,"y"],[7,14,12,12],[8,4,13,2],[8,8,13,6],[8,9,13,7,"z"],[8,10,13,8],[8,13,13,11,"z"],[8,14,13,12],[9,4,14,2],[9,8,14,6],[9,9,14,7,"_zInv"],[9,14,14,12],[9,17,14,15],[9,21,14,19],[10,4,16,2],[10,8,16,6],[10,9,16,7,"compressed"],[10,19,16,17],[10,22,16,20],[10,26,16,24],[11,2,17,0],[12,2,19,0,"Object"],[12,8,19,6],[12,9,19,7,"defineProperty"],[12,23,19,21],[12,24,19,22,"Point"],[12,29,19,27],[12,30,19,28,"prototype"],[12,39,19,37],[12,41,19,39],[12,47,19,45],[12,49,19,47],[13,4,20,2,"get"],[13,7,20,5],[13,9,20,7],[13,18,20,2,"get"],[13,21,20,5,"get"],[13,22,20,5],[13,24,20,19],[14,6,21,4],[14,10,21,8],[14,14,21,12],[14,15,21,13,"_zInv"],[14,20,21,18],[14,25,21,23],[14,29,21,27],[14,31,21,29],[15,8,22,6],[15,12,22,10],[15,13,22,11,"_zInv"],[15,18,22,16],[15,21,22,19],[15,25,22,23],[15,26,22,24,"z"],[15,27,22,25],[15,28,22,26,"modInverse"],[15,38,22,36],[15,39,22,37],[15,43,22,41],[15,44,22,42,"curve"],[15,49,22,47],[15,50,22,48,"p"],[15,51,22,49],[15,52,22,50],[16,6,23,4],[17,6,25,4],[17,13,25,11],[17,17,25,15],[17,18,25,16,"_zInv"],[17,23,25,21],[18,4,26,2],[19,2,27,0],[19,3,27,1],[19,4,27,2],[20,2,29,0,"Object"],[20,8,29,6],[20,9,29,7,"defineProperty"],[20,23,29,21],[20,24,29,22,"Point"],[20,29,29,27],[20,30,29,28,"prototype"],[20,39,29,37],[20,41,29,39],[20,50,29,48],[20,52,29,50],[21,4,30,2,"get"],[21,7,30,5],[21,9,30,7],[21,18,30,2,"get"],[21,21,30,5,"get"],[21,22,30,5],[21,24,30,19],[22,6,31,4],[22,13,31,11],[22,17,31,15],[22,18,31,16,"x"],[22,19,31,17],[22,20,31,18,"multiply"],[22,28,31,26],[22,29,31,27],[22,33,31,31],[22,34,31,32,"zInv"],[22,38,31,36],[22,39,31,37],[22,40,31,38,"mod"],[22,43,31,41],[22,44,31,42],[22,48,31,46],[22,49,31,47,"curve"],[22,54,31,52],[22,55,31,53,"p"],[22,56,31,54],[22,57,31,55],[23,4,32,2],[24,2,33,0],[24,3,33,1],[24,4,33,2],[25,2,35,0,"Object"],[25,8,35,6],[25,9,35,7,"defineProperty"],[25,23,35,21],[25,24,35,22,"Point"],[25,29,35,27],[25,30,35,28,"prototype"],[25,39,35,37],[25,41,35,39],[25,50,35,48],[25,52,35,50],[26,4,36,2,"get"],[26,7,36,5],[26,9,36,7],[26,18,36,2,"get"],[26,21,36,5,"get"],[26,22,36,5],[26,24,36,19],[27,6,37,4],[27,13,37,11],[27,17,37,15],[27,18,37,16,"y"],[27,19,37,17],[27,20,37,18,"multiply"],[27,28,37,26],[27,29,37,27],[27,33,37,31],[27,34,37,32,"zInv"],[27,38,37,36],[27,39,37,37],[27,40,37,38,"mod"],[27,43,37,41],[27,44,37,42],[27,48,37,46],[27,49,37,47,"curve"],[27,54,37,52],[27,55,37,53,"p"],[27,56,37,54],[27,57,37,55],[28,4,38,2],[29,2,39,0],[29,3,39,1],[29,4,39,2],[30,2,41,0,"Point"],[30,7,41,5],[30,8,41,6,"fromAffine"],[30,18,41,16],[30,21,41,19],[30,31,41,29,"curve"],[30,36,41,34],[30,38,41,36,"x"],[30,39,41,37],[30,41,41,39,"y"],[30,42,41,40],[30,44,41,42],[31,4,42,2],[31,11,42,9],[31,15,42,13,"Point"],[31,20,42,18],[31,21,42,19,"curve"],[31,26,42,24],[31,28,42,26,"x"],[31,29,42,27],[31,31,42,29,"y"],[31,32,42,30],[31,34,42,32,"_$$_REQUIRE"],[31,45,42,32],[31,46,42,32,"_dependencyMap"],[31,60,42,32],[31,73,42,43,"ONE"],[31,76,42,46],[31,77,42,47],[32,2,43,0],[32,3,43,1],[33,2,45,0,"Point"],[33,7,45,5],[33,8,45,6,"prototype"],[33,17,45,15],[33,18,45,16,"equals"],[33,24,45,22],[33,27,45,25],[33,37,45,35,"other"],[33,42,45,40],[33,44,45,42],[34,4,46,2],[34,8,46,6,"other"],[34,13,46,11],[34,18,46,16],[34,22,46,20],[34,24,46,22],[34,31,46,29],[34,35,46,33],[35,4,47,2],[35,8,47,6],[35,12,47,10],[35,13,47,11,"curve"],[35,18,47,16],[35,19,47,17,"isInfinity"],[35,29,47,27],[35,30,47,28],[35,34,47,32],[35,35,47,33],[35,37,47,35],[35,44,47,42],[35,48,47,46],[35,49,47,47,"curve"],[35,54,47,52],[35,55,47,53,"isInfinity"],[35,65,47,63],[35,66,47,64,"other"],[35,71,47,69],[35,72,47,70],[36,4,48,2],[36,8,48,6],[36,12,48,10],[36,13,48,11,"curve"],[36,18,48,16],[36,19,48,17,"isInfinity"],[36,29,48,27],[36,30,48,28,"other"],[36,35,48,33],[36,36,48,34],[36,38,48,36],[36,45,48,43],[36,49,48,47],[36,50,48,48,"curve"],[36,55,48,53],[36,56,48,54,"isInfinity"],[36,66,48,64],[36,67,48,65],[36,71,48,69],[36,72,48,70],[38,4,50,2],[39,4,51,2],[39,8,51,6,"u"],[39,9,51,7],[39,12,51,10,"other"],[39,17,51,15],[39,18,51,16,"y"],[39,19,51,17],[39,20,51,18,"multiply"],[39,28,51,26],[39,29,51,27],[39,33,51,31],[39,34,51,32,"z"],[39,35,51,33],[39,36,51,34],[39,37,51,35,"subtract"],[39,45,51,43],[39,46,51,44],[39,50,51,48],[39,51,51,49,"y"],[39,52,51,50],[39,53,51,51,"multiply"],[39,61,51,59],[39,62,51,60,"other"],[39,67,51,65],[39,68,51,66,"z"],[39,69,51,67],[39,70,51,68],[39,71,51,69],[39,72,51,70,"mod"],[39,75,51,73],[39,76,51,74],[39,80,51,78],[39,81,51,79,"curve"],[39,86,51,84],[39,87,51,85,"p"],[39,88,51,86],[39,89,51,87],[40,4,53,2],[40,8,53,6,"u"],[40,9,53,7],[40,10,53,8,"signum"],[40,16,53,14],[40,17,53,15],[40,18,53,16],[40,23,53,21],[40,24,53,22],[40,26,53,24],[40,33,53,31],[40,38,53,36],[42,4,55,2],[43,4,56,2],[43,8,56,6,"v"],[43,9,56,7],[43,12,56,10,"other"],[43,17,56,15],[43,18,56,16,"x"],[43,19,56,17],[43,20,56,18,"multiply"],[43,28,56,26],[43,29,56,27],[43,33,56,31],[43,34,56,32,"z"],[43,35,56,33],[43,36,56,34],[43,37,56,35,"subtract"],[43,45,56,43],[43,46,56,44],[43,50,56,48],[43,51,56,49,"x"],[43,52,56,50],[43,53,56,51,"multiply"],[43,61,56,59],[43,62,56,60,"other"],[43,67,56,65],[43,68,56,66,"z"],[43,69,56,67],[43,70,56,68],[43,71,56,69],[43,72,56,70,"mod"],[43,75,56,73],[43,76,56,74],[43,80,56,78],[43,81,56,79,"curve"],[43,86,56,84],[43,87,56,85,"p"],[43,88,56,86],[43,89,56,87],[44,4,58,2],[44,11,58,9,"v"],[44,12,58,10],[44,13,58,11,"signum"],[44,19,58,17],[44,20,58,18],[44,21,58,19],[44,26,58,24],[44,27,58,25],[45,2,59,0],[45,3,59,1],[46,2,61,0,"Point"],[46,7,61,5],[46,8,61,6,"prototype"],[46,17,61,15],[46,18,61,16,"negate"],[46,24,61,22],[46,27,61,25],[46,39,61,37],[47,4,62,2],[47,8,62,6,"y"],[47,9,62,7],[47,12,62,10],[47,16,62,14],[47,17,62,15,"curve"],[47,22,62,20],[47,23,62,21,"p"],[47,24,62,22],[47,25,62,23,"subtract"],[47,33,62,31],[47,34,62,32],[47,38,62,36],[47,39,62,37,"y"],[47,40,62,38],[47,41,62,39],[48,4,64,2],[48,11,64,9],[48,15,64,13,"Point"],[48,20,64,18],[48,21,64,19],[48,25,64,23],[48,26,64,24,"curve"],[48,31,64,29],[48,33,64,31],[48,37,64,35],[48,38,64,36,"x"],[48,39,64,37],[48,41,64,39,"y"],[48,42,64,40],[48,44,64,42],[48,48,64,46],[48,49,64,47,"z"],[48,50,64,48],[48,51,64,49],[49,2,65,0],[49,3,65,1],[50,2,67,0,"Point"],[50,7,67,5],[50,8,67,6,"prototype"],[50,17,67,15],[50,18,67,16,"add"],[50,21,67,19],[50,24,67,22],[50,34,67,32,"b"],[50,35,67,33],[50,37,67,35],[51,4,68,2],[51,8,68,6],[51,12,68,10],[51,13,68,11,"curve"],[51,18,68,16],[51,19,68,17,"isInfinity"],[51,29,68,27],[51,30,68,28],[51,34,68,32],[51,35,68,33],[51,37,68,35],[51,44,68,42,"b"],[51,45,68,43],[52,4,69,2],[52,8,69,6],[52,12,69,10],[52,13,69,11,"curve"],[52,18,69,16],[52,19,69,17,"isInfinity"],[52,29,69,27],[52,30,69,28,"b"],[52,31,69,29],[52,32,69,30],[52,34,69,32],[52,41,69,39],[52,45,69,43],[53,4,71,2],[53,8,71,6,"x1"],[53,10,71,8],[53,13,71,11],[53,17,71,15],[53,18,71,16,"x"],[53,19,71,17],[54,4,72,2],[54,8,72,6,"y1"],[54,10,72,8],[54,13,72,11],[54,17,72,15],[54,18,72,16,"y"],[54,19,72,17],[55,4,73,2],[55,8,73,6,"x2"],[55,10,73,8],[55,13,73,11,"b"],[55,14,73,12],[55,15,73,13,"x"],[55,16,73,14],[56,4,74,2],[56,8,74,6,"y2"],[56,10,74,8],[56,13,74,11,"b"],[56,14,74,12],[56,15,74,13,"y"],[56,16,74,14],[58,4,76,2],[59,4,77,2],[59,8,77,6,"u"],[59,9,77,7],[59,12,77,10,"y2"],[59,14,77,12],[59,15,77,13,"multiply"],[59,23,77,21],[59,24,77,22],[59,28,77,26],[59,29,77,27,"z"],[59,30,77,28],[59,31,77,29],[59,32,77,30,"subtract"],[59,40,77,38],[59,41,77,39,"y1"],[59,43,77,41],[59,44,77,42,"multiply"],[59,52,77,50],[59,53,77,51,"b"],[59,54,77,52],[59,55,77,53,"z"],[59,56,77,54],[59,57,77,55],[59,58,77,56],[59,59,77,57,"mod"],[59,62,77,60],[59,63,77,61],[59,67,77,65],[59,68,77,66,"curve"],[59,73,77,71],[59,74,77,72,"p"],[59,75,77,73],[59,76,77,74],[60,4,78,2],[61,4,79,2],[61,8,79,6,"v"],[61,9,79,7],[61,12,79,10,"x2"],[61,14,79,12],[61,15,79,13,"multiply"],[61,23,79,21],[61,24,79,22],[61,28,79,26],[61,29,79,27,"z"],[61,30,79,28],[61,31,79,29],[61,32,79,30,"subtract"],[61,40,79,38],[61,41,79,39,"x1"],[61,43,79,41],[61,44,79,42,"multiply"],[61,52,79,50],[61,53,79,51,"b"],[61,54,79,52],[61,55,79,53,"z"],[61,56,79,54],[61,57,79,55],[61,58,79,56],[61,59,79,57,"mod"],[61,62,79,60],[61,63,79,61],[61,67,79,65],[61,68,79,66,"curve"],[61,73,79,71],[61,74,79,72,"p"],[61,75,79,73],[61,76,79,74],[62,4,81,2],[62,8,81,6,"v"],[62,9,81,7],[62,10,81,8,"signum"],[62,16,81,14],[62,17,81,15],[62,18,81,16],[62,23,81,21],[62,24,81,22],[62,26,81,24],[63,6,82,4],[63,10,82,8,"u"],[63,11,82,9],[63,12,82,10,"signum"],[63,18,82,16],[63,19,82,17],[63,20,82,18],[63,25,82,23],[63,26,82,24],[63,28,82,26],[64,8,83,6],[64,15,83,13],[64,19,83,17],[64,20,83,18,"twice"],[64,25,83,23],[64,26,83,24],[64,27,83,25],[64,29,83,26],[65,6,84,4],[66,6,86,4],[66,13,86,11],[66,17,86,15],[66,18,86,16,"curve"],[66,23,86,21],[66,24,86,22,"infinity"],[66,32,86,30],[66,34,86,31],[67,4,87,2],[68,4,89,2],[68,8,89,6,"v2"],[68,10,89,8],[68,13,89,11,"v"],[68,14,89,12],[68,15,89,13,"square"],[68,21,89,19],[68,22,89,20],[68,23,89,21],[69,4,90,2],[69,8,90,6,"v3"],[69,10,90,8],[69,13,90,11,"v2"],[69,15,90,13],[69,16,90,14,"multiply"],[69,24,90,22],[69,25,90,23,"v"],[69,26,90,24],[69,27,90,25],[70,4,91,2],[70,8,91,6,"x1v2"],[70,12,91,10],[70,15,91,13,"x1"],[70,17,91,15],[70,18,91,16,"multiply"],[70,26,91,24],[70,27,91,25,"v2"],[70,29,91,27],[70,30,91,28],[71,4,92,2],[71,8,92,6,"zu2"],[71,11,92,9],[71,14,92,12,"u"],[71,15,92,13],[71,16,92,14,"square"],[71,22,92,20],[71,23,92,21],[71,24,92,22],[71,25,92,23,"multiply"],[71,33,92,31],[71,34,92,32],[71,38,92,36],[71,39,92,37,"z"],[71,40,92,38],[71,41,92,39],[73,4,94,2],[74,4,95,2],[74,8,95,6,"x3"],[74,10,95,8],[74,13,95,11,"zu2"],[74,16,95,14],[74,17,95,15,"subtract"],[74,25,95,23],[74,26,95,24,"x1v2"],[74,30,95,28],[74,31,95,29,"shiftLeft"],[74,40,95,38],[74,41,95,39],[74,42,95,40],[74,43,95,41],[74,44,95,42],[74,45,95,43,"multiply"],[74,53,95,51],[74,54,95,52,"b"],[74,55,95,53],[74,56,95,54,"z"],[74,57,95,55],[74,58,95,56],[74,59,95,57,"subtract"],[74,67,95,65],[74,68,95,66,"v3"],[74,70,95,68],[74,71,95,69],[74,72,95,70,"multiply"],[74,80,95,78],[74,81,95,79,"v"],[74,82,95,80],[74,83,95,81],[74,84,95,82,"mod"],[74,87,95,85],[74,88,95,86],[74,92,95,90],[74,93,95,91,"curve"],[74,98,95,96],[74,99,95,97,"p"],[74,100,95,98],[74,101,95,99],[75,4,96,2],[76,4,97,2],[76,8,97,6,"y3"],[76,10,97,8],[76,13,97,11,"x1v2"],[76,17,97,15],[76,18,97,16,"multiply"],[76,26,97,24],[76,27,97,25,"THREE"],[76,32,97,30],[76,33,97,31],[76,34,97,32,"multiply"],[76,42,97,40],[76,43,97,41,"u"],[76,44,97,42],[76,45,97,43],[76,46,97,44,"subtract"],[76,54,97,52],[76,55,97,53,"y1"],[76,57,97,55],[76,58,97,56,"multiply"],[76,66,97,64],[76,67,97,65,"v3"],[76,69,97,67],[76,70,97,68],[76,71,97,69],[76,72,97,70,"subtract"],[76,80,97,78],[76,81,97,79,"zu2"],[76,84,97,82],[76,85,97,83,"multiply"],[76,93,97,91],[76,94,97,92,"u"],[76,95,97,93],[76,96,97,94],[76,97,97,95],[76,98,97,96,"multiply"],[76,106,97,104],[76,107,97,105,"b"],[76,108,97,106],[76,109,97,107,"z"],[76,110,97,108],[76,111,97,109],[76,112,97,110,"add"],[76,115,97,113],[76,116,97,114,"u"],[76,117,97,115],[76,118,97,116,"multiply"],[76,126,97,124],[76,127,97,125,"v3"],[76,129,97,127],[76,130,97,128],[76,131,97,129],[76,132,97,130,"mod"],[76,135,97,133],[76,136,97,134],[76,140,97,138],[76,141,97,139,"curve"],[76,146,97,144],[76,147,97,145,"p"],[76,148,97,146],[76,149,97,147],[77,4,98,2],[78,4,99,2],[78,8,99,6,"z3"],[78,10,99,8],[78,13,99,11,"v3"],[78,15,99,13],[78,16,99,14,"multiply"],[78,24,99,22],[78,25,99,23],[78,29,99,27],[78,30,99,28,"z"],[78,31,99,29],[78,32,99,30],[78,33,99,31,"multiply"],[78,41,99,39],[78,42,99,40,"b"],[78,43,99,41],[78,44,99,42,"z"],[78,45,99,43],[78,46,99,44],[78,47,99,45,"mod"],[78,50,99,48],[78,51,99,49],[78,55,99,53],[78,56,99,54,"curve"],[78,61,99,59],[78,62,99,60,"p"],[78,63,99,61],[78,64,99,62],[79,4,101,2],[79,11,101,9],[79,15,101,13,"Point"],[79,20,101,18],[79,21,101,19],[79,25,101,23],[79,26,101,24,"curve"],[79,31,101,29],[79,33,101,31,"x3"],[79,35,101,33],[79,37,101,35,"y3"],[79,39,101,37],[79,41,101,39,"z3"],[79,43,101,41],[79,44,101,42],[80,2,102,0],[80,3,102,1],[81,2,104,0,"Point"],[81,7,104,5],[81,8,104,6,"prototype"],[81,17,104,15],[81,18,104,16,"twice"],[81,23,104,21],[81,26,104,24],[81,38,104,36],[82,4,105,2],[82,8,105,6],[82,12,105,10],[82,13,105,11,"curve"],[82,18,105,16],[82,19,105,17,"isInfinity"],[82,29,105,27],[82,30,105,28],[82,34,105,32],[82,35,105,33],[82,37,105,35],[82,44,105,42],[82,48,105,46],[83,4,106,2],[83,8,106,6],[83,12,106,10],[83,13,106,11,"y"],[83,14,106,12],[83,15,106,13,"signum"],[83,21,106,19],[83,22,106,20],[83,23,106,21],[83,28,106,26],[83,29,106,27],[83,31,106,29],[83,38,106,36],[83,42,106,40],[83,43,106,41,"curve"],[83,48,106,46],[83,49,106,47,"infinity"],[83,57,106,55],[84,4,108,2],[84,8,108,6,"x1"],[84,10,108,8],[84,13,108,11],[84,17,108,15],[84,18,108,16,"x"],[84,19,108,17],[85,4,109,2],[85,8,109,6,"y1"],[85,10,109,8],[85,13,109,11],[85,17,109,15],[85,18,109,16,"y"],[85,19,109,17],[86,4,111,2],[86,8,111,6,"y1z1"],[86,12,111,10],[86,15,111,13,"y1"],[86,17,111,15],[86,18,111,16,"multiply"],[86,26,111,24],[86,27,111,25],[86,31,111,29],[86,32,111,30,"z"],[86,33,111,31],[86,34,111,32],[86,35,111,33,"mod"],[86,38,111,36],[86,39,111,37],[86,43,111,41],[86,44,111,42,"curve"],[86,49,111,47],[86,50,111,48,"p"],[86,51,111,49],[86,52,111,50],[87,4,112,2],[87,8,112,6,"y1sqz1"],[87,14,112,12],[87,17,112,15,"y1z1"],[87,21,112,19],[87,22,112,20,"multiply"],[87,30,112,28],[87,31,112,29,"y1"],[87,33,112,31],[87,34,112,32],[87,35,112,33,"mod"],[87,38,112,36],[87,39,112,37],[87,43,112,41],[87,44,112,42,"curve"],[87,49,112,47],[87,50,112,48,"p"],[87,51,112,49],[87,52,112,50],[88,4,113,2],[88,8,113,6,"a"],[88,9,113,7],[88,12,113,10],[88,16,113,14],[88,17,113,15,"curve"],[88,22,113,20],[88,23,113,21,"a"],[88,24,113,22],[90,4,115,2],[91,4,116,2],[91,8,116,6,"w"],[91,9,116,7],[91,12,116,10,"x1"],[91,14,116,12],[91,15,116,13,"square"],[91,21,116,19],[91,22,116,20],[91,23,116,21],[91,24,116,22,"multiply"],[91,32,116,30],[91,33,116,31,"THREE"],[91,38,116,36],[91,39,116,37],[92,4,118,2],[92,8,118,6,"a"],[92,9,118,7],[92,10,118,8,"signum"],[92,16,118,14],[92,17,118,15],[92,18,118,16],[92,23,118,21],[92,24,118,22],[92,26,118,24],[93,6,119,4,"w"],[93,7,119,5],[93,10,119,8,"w"],[93,11,119,9],[93,12,119,10,"add"],[93,15,119,13],[93,16,119,14],[93,20,119,18],[93,21,119,19,"z"],[93,22,119,20],[93,23,119,21,"square"],[93,29,119,27],[93,30,119,28],[93,31,119,29],[93,32,119,30,"multiply"],[93,40,119,38],[93,41,119,39,"a"],[93,42,119,40],[93,43,119,41],[93,44,119,42],[94,4,120,2],[95,4,122,2,"w"],[95,5,122,3],[95,8,122,6,"w"],[95,9,122,7],[95,10,122,8,"mod"],[95,13,122,11],[95,14,122,12],[95,18,122,16],[95,19,122,17,"curve"],[95,24,122,22],[95,25,122,23,"p"],[95,26,122,24],[95,27,122,25],[96,4,123,2],[97,4,124,2],[97,8,124,6,"x3"],[97,10,124,8],[97,13,124,11,"w"],[97,14,124,12],[97,15,124,13,"square"],[97,21,124,19],[97,22,124,20],[97,23,124,21],[97,24,124,22,"subtract"],[97,32,124,30],[97,33,124,31,"x1"],[97,35,124,33],[97,36,124,34,"shiftLeft"],[97,45,124,43],[97,46,124,44],[97,47,124,45],[97,48,124,46],[97,49,124,47,"multiply"],[97,57,124,55],[97,58,124,56,"y1sqz1"],[97,64,124,62],[97,65,124,63],[97,66,124,64],[97,67,124,65,"shiftLeft"],[97,76,124,74],[97,77,124,75],[97,78,124,76],[97,79,124,77],[97,80,124,78,"multiply"],[97,88,124,86],[97,89,124,87,"y1z1"],[97,93,124,91],[97,94,124,92],[97,95,124,93,"mod"],[97,98,124,96],[97,99,124,97],[97,103,124,101],[97,104,124,102,"curve"],[97,109,124,107],[97,110,124,108,"p"],[97,111,124,109],[97,112,124,110],[98,4,125,2],[99,4,126,2],[99,8,126,6,"y3"],[99,10,126,8],[99,13,126,11,"w"],[99,14,126,12],[99,15,126,13,"multiply"],[99,23,126,21],[99,24,126,22,"THREE"],[99,29,126,27],[99,30,126,28],[99,31,126,29,"multiply"],[99,39,126,37],[99,40,126,38,"x1"],[99,42,126,40],[99,43,126,41],[99,44,126,42,"subtract"],[99,52,126,50],[99,53,126,51,"y1sqz1"],[99,59,126,57],[99,60,126,58,"shiftLeft"],[99,69,126,67],[99,70,126,68],[99,71,126,69],[99,72,126,70],[99,73,126,71],[99,74,126,72,"shiftLeft"],[99,83,126,81],[99,84,126,82],[99,85,126,83],[99,86,126,84],[99,87,126,85,"multiply"],[99,95,126,93],[99,96,126,94,"y1sqz1"],[99,102,126,100],[99,103,126,101],[99,104,126,102,"subtract"],[99,112,126,110],[99,113,126,111,"w"],[99,114,126,112],[99,115,126,113,"pow"],[99,118,126,116],[99,119,126,117],[99,120,126,118],[99,121,126,119],[99,122,126,120],[99,123,126,121,"mod"],[99,126,126,124],[99,127,126,125],[99,131,126,129],[99,132,126,130,"curve"],[99,137,126,135],[99,138,126,136,"p"],[99,139,126,137],[99,140,126,138],[100,4,127,2],[101,4,128,2],[101,8,128,6,"z3"],[101,10,128,8],[101,13,128,11,"y1z1"],[101,17,128,15],[101,18,128,16,"pow"],[101,21,128,19],[101,22,128,20],[101,23,128,21],[101,24,128,22],[101,25,128,23,"shiftLeft"],[101,34,128,32],[101,35,128,33],[101,36,128,34],[101,37,128,35],[101,38,128,36,"mod"],[101,41,128,39],[101,42,128,40],[101,46,128,44],[101,47,128,45,"curve"],[101,52,128,50],[101,53,128,51,"p"],[101,54,128,52],[101,55,128,53],[102,4,130,2],[102,11,130,9],[102,15,130,13,"Point"],[102,20,130,18],[102,21,130,19],[102,25,130,23],[102,26,130,24,"curve"],[102,31,130,29],[102,33,130,31,"x3"],[102,35,130,33],[102,37,130,35,"y3"],[102,39,130,37],[102,41,130,39,"z3"],[102,43,130,41],[102,44,130,42],[103,2,131,0],[103,3,131,1],[105,2,133,0],[106,2,134,0],[107,2,135,0,"Point"],[107,7,135,5],[107,8,135,6,"prototype"],[107,17,135,15],[107,18,135,16,"multiply"],[107,26,135,24],[107,29,135,27],[107,39,135,37,"k"],[107,40,135,38],[107,42,135,40],[108,4,136,2],[108,8,136,6],[108,12,136,10],[108,13,136,11,"curve"],[108,18,136,16],[108,19,136,17,"isInfinity"],[108,29,136,27],[108,30,136,28],[108,34,136,32],[108,35,136,33],[108,37,136,35],[108,44,136,42],[108,48,136,46],[109,4,137,2],[109,8,137,6,"k"],[109,9,137,7],[109,10,137,8,"signum"],[109,16,137,14],[109,17,137,15],[109,18,137,16],[109,23,137,21],[109,24,137,22],[109,26,137,24],[109,33,137,31],[109,37,137,35],[109,38,137,36,"curve"],[109,43,137,41],[109,44,137,42,"infinity"],[109,52,137,50],[110,4,139,2],[110,8,139,6,"e"],[110,9,139,7],[110,12,139,10,"k"],[110,13,139,11],[111,4,140,2],[111,8,140,6,"h"],[111,9,140,7],[111,12,140,10,"e"],[111,13,140,11],[111,14,140,12,"multiply"],[111,22,140,20],[111,23,140,21,"THREE"],[111,28,140,26],[111,29,140,27],[112,4,142,2],[112,8,142,6,"neg"],[112,11,142,9],[112,14,142,12],[112,18,142,16],[112,19,142,17,"negate"],[112,25,142,23],[112,26,142,24],[112,27,142,25],[113,4,143,2],[113,8,143,6,"R"],[113,9,143,7],[113,12,143,10],[113,16,143,14],[114,4,145,2],[114,9,145,7],[114,13,145,11,"i"],[114,14,145,12],[114,17,145,15,"h"],[114,18,145,16],[114,19,145,17,"bitLength"],[114,28,145,26],[114,29,145,27],[114,30,145,28],[114,33,145,31],[114,34,145,32],[114,36,145,34,"i"],[114,37,145,35],[114,40,145,38],[114,41,145,39],[114,43,145,41],[114,45,145,43,"i"],[114,46,145,44],[114,48,145,46],[115,6,146,4],[115,10,146,8,"hBit"],[115,14,146,12],[115,17,146,15,"h"],[115,18,146,16],[115,19,146,17,"testBit"],[115,26,146,24],[115,27,146,25,"i"],[115,28,146,26],[115,29,146,27],[116,6,147,4],[116,10,147,8,"eBit"],[116,14,147,12],[116,17,147,15,"e"],[116,18,147,16],[116,19,147,17,"testBit"],[116,26,147,24],[116,27,147,25,"i"],[116,28,147,26],[116,29,147,27],[117,6,149,4,"R"],[117,7,149,5],[117,10,149,8,"R"],[117,11,149,9],[117,12,149,10,"twice"],[117,17,149,15],[117,18,149,16],[117,19,149,17],[118,6,151,4],[118,10,151,8,"hBit"],[118,14,151,12],[118,19,151,17,"eBit"],[118,23,151,21],[118,25,151,23],[119,8,152,6,"R"],[119,9,152,7],[119,12,152,10,"R"],[119,13,152,11],[119,14,152,12,"add"],[119,17,152,15],[119,18,152,16,"hBit"],[119,22,152,20],[119,25,152,23],[119,29,152,27],[119,32,152,30,"neg"],[119,35,152,33],[119,36,152,34],[120,6,153,4],[121,4,154,2],[122,4,156,2],[122,11,156,9,"R"],[122,12,156,10],[123,2,157,0],[123,3,157,1],[125,2,159,0],[126,2,160,0,"Point"],[126,7,160,5],[126,8,160,6,"prototype"],[126,17,160,15],[126,18,160,16,"multiplyTwo"],[126,29,160,27],[126,32,160,30],[126,42,160,40,"j"],[126,43,160,41],[126,45,160,43,"x"],[126,46,160,44],[126,48,160,46,"k"],[126,49,160,47],[126,51,160,49],[127,4,161,2],[127,8,161,6,"i"],[127,9,161,7],[127,12,161,10,"Math"],[127,16,161,14],[127,17,161,15,"max"],[127,20,161,18],[127,21,161,19,"j"],[127,22,161,20],[127,23,161,21,"bitLength"],[127,32,161,30],[127,33,161,31],[127,34,161,32],[127,36,161,34,"k"],[127,37,161,35],[127,38,161,36,"bitLength"],[127,47,161,45],[127,48,161,46],[127,49,161,47],[127,50,161,48],[127,53,161,51],[127,54,161,52],[128,4,162,2],[128,8,162,6,"R"],[128,9,162,7],[128,12,162,10],[128,16,162,14],[128,17,162,15,"curve"],[128,22,162,20],[128,23,162,21,"infinity"],[128,31,162,29],[129,4,163,2],[129,8,163,6,"both"],[129,12,163,10],[129,15,163,13],[129,19,163,17],[129,20,163,18,"add"],[129,23,163,21],[129,24,163,22,"x"],[129,25,163,23],[129,26,163,24],[130,4,165,2],[130,11,165,9,"i"],[130,12,165,10],[130,16,165,14],[130,17,165,15],[130,19,165,17],[131,6,166,4],[131,10,166,8,"jBit"],[131,14,166,12],[131,17,166,15,"j"],[131,18,166,16],[131,19,166,17,"testBit"],[131,26,166,24],[131,27,166,25,"i"],[131,28,166,26],[131,29,166,27],[132,6,167,4],[132,10,167,8,"kBit"],[132,14,167,12],[132,17,167,15,"k"],[132,18,167,16],[132,19,167,17,"testBit"],[132,26,167,24],[132,27,167,25,"i"],[132,28,167,26],[132,29,167,27],[133,6,169,4,"R"],[133,7,169,5],[133,10,169,8,"R"],[133,11,169,9],[133,12,169,10,"twice"],[133,17,169,15],[133,18,169,16],[133,19,169,17],[134,6,171,4],[134,10,171,8,"jBit"],[134,14,171,12],[134,16,171,14],[135,8,172,6],[135,12,172,10,"kBit"],[135,16,172,14],[135,18,172,16],[136,10,173,8,"R"],[136,11,173,9],[136,14,173,12,"R"],[136,15,173,13],[136,16,173,14,"add"],[136,19,173,17],[136,20,173,18,"both"],[136,24,173,22],[136,25,173,23],[137,8,174,6],[137,9,174,7],[137,15,174,13],[138,10,175,8,"R"],[138,11,175,9],[138,14,175,12,"R"],[138,15,175,13],[138,16,175,14,"add"],[138,19,175,17],[138,20,175,18],[138,24,175,22],[138,25,175,23],[139,8,176,6],[140,6,177,4],[140,7,177,5],[140,13,177,11],[140,17,177,15,"kBit"],[140,21,177,19],[140,23,177,21],[141,8,178,6,"R"],[141,9,178,7],[141,12,178,10,"R"],[141,13,178,11],[141,14,178,12,"add"],[141,17,178,15],[141,18,178,16,"x"],[141,19,178,17],[141,20,178,18],[142,6,179,4],[143,6,180,4],[143,8,180,6,"i"],[143,9,180,7],[144,4,181,2],[145,4,183,2],[145,11,183,9,"R"],[145,12,183,10],[146,2,184,0],[146,3,184,1],[147,2,186,0,"Point"],[147,7,186,5],[147,8,186,6,"prototype"],[147,17,186,15],[147,18,186,16,"getEncoded"],[147,28,186,26],[147,31,186,29],[147,41,186,39,"compressed"],[147,51,186,49],[147,53,186,51],[148,4,187,2],[148,8,187,6,"compressed"],[148,18,187,16],[148,22,187,20],[148,26,187,24],[148,28,187,26,"compressed"],[148,38,187,36],[148,41,187,39],[148,45,187,43],[148,46,187,44,"compressed"],[148,56,187,54],[149,4,188,2],[149,8,188,6],[149,12,188,10],[149,13,188,11,"curve"],[149,18,188,16],[149,19,188,17,"isInfinity"],[149,29,188,27],[149,30,188,28],[149,34,188,32],[149,35,188,33],[149,37,188,35],[149,44,188,42,"_$$_REQUIRE"],[149,55,188,42],[149,56,188,42,"_dependencyMap"],[149,70,188,42],[149,90,188,42,"Buffer"],[149,96,188,42],[149,97,188,49,"alloc"],[149,102,188,54],[149,103,188,55],[149,104,188,56],[149,106,188,58],[149,107,188,59],[149,108,188,60],[149,110,188,61],[151,4,190,2],[151,8,190,6,"x"],[151,9,190,7],[151,12,190,10],[151,16,190,14],[151,17,190,15,"affineX"],[151,24,190,22],[152,4,191,2],[152,8,191,6,"y"],[152,9,191,7],[152,12,191,10],[152,16,191,14],[152,17,191,15,"affineY"],[152,24,191,22],[153,4,192,2],[153,8,192,6,"byteLength"],[153,18,192,16],[153,21,192,19],[153,25,192,23],[153,26,192,24,"curve"],[153,31,192,29],[153,32,192,30,"pLength"],[153,39,192,37],[154,4,193,2],[154,8,193,6,"buffer"],[154,14,193,12],[156,4,195,2],[157,4,196,2],[157,8,196,6,"compressed"],[157,18,196,16],[157,20,196,18],[158,6,197,4,"buffer"],[158,12,197,10],[158,15,197,13,"_$$_REQUIRE"],[158,26,197,13],[158,27,197,13,"_dependencyMap"],[158,41,197,13],[158,61,197,13,"Buffer"],[158,67,197,13],[158,68,197,20,"allocUnsafe"],[158,79,197,31],[158,80,197,32],[158,81,197,33],[158,84,197,36,"byteLength"],[158,94,197,46],[158,95,197,47],[159,6,198,4,"buffer"],[159,12,198,10],[159,13,198,11,"writeUInt8"],[159,23,198,21],[159,24,198,22,"y"],[159,25,198,23],[159,26,198,24,"isEven"],[159,32,198,30],[159,33,198,31],[159,34,198,32],[159,37,198,35],[159,41,198,39],[159,44,198,42],[159,48,198,46],[159,50,198,48],[159,51,198,49],[159,52,198,50],[161,6,200,2],[162,4,201,2],[162,5,201,3],[162,11,201,9],[163,6,202,4,"buffer"],[163,12,202,10],[163,15,202,13,"_$$_REQUIRE"],[163,26,202,13],[163,27,202,13,"_dependencyMap"],[163,41,202,13],[163,61,202,13,"Buffer"],[163,67,202,13],[163,68,202,20,"allocUnsafe"],[163,79,202,31],[163,80,202,32],[163,81,202,33],[163,84,202,36,"byteLength"],[163,94,202,46],[163,97,202,49,"byteLength"],[163,107,202,59],[163,108,202,60],[164,6,203,4,"buffer"],[164,12,203,10],[164,13,203,11,"writeUInt8"],[164,23,203,21],[164,24,203,22],[164,28,203,26],[164,30,203,28],[164,31,203,29],[164,32,203,30],[165,6,205,4,"y"],[165,7,205,5],[165,8,205,6,"toBuffer"],[165,16,205,14],[165,17,205,15,"byteLength"],[165,27,205,25],[165,28,205,26],[165,29,205,27,"copy"],[165,33,205,31],[165,34,205,32,"buffer"],[165,40,205,38],[165,42,205,40],[165,43,205,41],[165,46,205,44,"byteLength"],[165,56,205,54],[165,57,205,55],[166,4,206,2],[167,4,208,2,"x"],[167,5,208,3],[167,6,208,4,"toBuffer"],[167,14,208,12],[167,15,208,13,"byteLength"],[167,25,208,23],[167,26,208,24],[167,27,208,25,"copy"],[167,31,208,29],[167,32,208,30,"buffer"],[167,38,208,36],[167,40,208,38],[167,41,208,39],[167,42,208,40],[168,4,210,2],[168,11,210,9,"buffer"],[168,17,210,15],[169,2,211,0],[169,3,211,1],[170,2,213,0,"Point"],[170,7,213,5],[170,8,213,6,"decodeFrom"],[170,18,213,16],[170,21,213,19],[170,31,213,29,"curve"],[170,36,213,34],[170,38,213,36,"buffer"],[170,44,213,42],[170,46,213,44],[171,4,214,2],[171,8,214,6,"type"],[171,12,214,10],[171,15,214,13,"buffer"],[171,21,214,19],[171,22,214,20,"readUInt8"],[171,31,214,29],[171,32,214,30],[171,33,214,31],[171,34,214,32],[172,4,215,2],[172,8,215,6,"compressed"],[172,18,215,16],[172,21,215,20,"type"],[172,25,215,24],[172,30,215,29],[172,31,215,31],[173,4,217,2],[173,8,217,6,"byteLength"],[173,18,217,16],[173,21,217,19,"Math"],[173,25,217,23],[173,26,217,24,"floor"],[173,31,217,29],[173,32,217,30],[173,33,217,31,"curve"],[173,38,217,36],[173,39,217,37,"p"],[173,40,217,38],[173,41,217,39,"bitLength"],[173,50,217,48],[173,51,217,49],[173,52,217,50],[173,55,217,53],[173,56,217,54],[173,60,217,58],[173,61,217,59],[173,62,217,60],[174,4,218,2],[174,8,218,6,"x"],[174,9,218,7],[174,12,218,10,"_$$_REQUIRE"],[174,23,218,10],[174,24,218,10,"_dependencyMap"],[174,38,218,10],[174,51,218,21,"fromBuffer"],[174,61,218,31],[174,62,218,32,"buffer"],[174,68,218,38],[174,69,218,39,"slice"],[174,74,218,44],[174,75,218,45],[174,76,218,46],[174,78,218,48],[174,79,218,49],[174,82,218,52,"byteLength"],[174,92,218,62],[174,93,218,63],[174,94,218,64],[175,4,220,2],[175,8,220,6,"Q"],[175,9,220,7],[176,4,221,2],[176,8,221,6,"compressed"],[176,18,221,16],[176,20,221,18],[177,6,222,4,"_$$_REQUIRE"],[177,17,222,4],[177,18,222,4,"_dependencyMap"],[177,32,222,4],[177,47,222,11,"equal"],[177,52,222,16],[177,53,222,17,"buffer"],[177,59,222,23],[177,60,222,24,"length"],[177,66,222,30],[177,68,222,32,"byteLength"],[177,78,222,42],[177,81,222,45],[177,82,222,46],[177,84,222,48],[177,109,222,73],[177,110,222,74],[178,6,223,4,"_$$_REQUIRE"],[178,17,223,4],[178,18,223,4,"_dependencyMap"],[178,32,223,4],[178,47,223,11,"type"],[178,51,223,15],[178,56,223,20],[178,60,223,24],[178,64,223,28,"type"],[178,68,223,32],[178,73,223,37],[178,77,223,41],[178,79,223,43],[178,101,223,65],[178,102,223,66],[179,6,225,4],[179,10,225,8,"isOdd"],[179,15,225,13],[179,18,225,17,"type"],[179,22,225,21],[179,27,225,26],[179,31,225,31],[180,6,226,4,"Q"],[180,7,226,5],[180,10,226,8,"curve"],[180,15,226,13],[180,16,226,14,"pointFromX"],[180,26,226,24],[180,27,226,25,"isOdd"],[180,32,226,30],[180,34,226,32,"x"],[180,35,226,33],[180,36,226,34],[181,4,227,2],[181,5,227,3],[181,11,227,9],[182,6,228,4,"_$$_REQUIRE"],[182,17,228,4],[182,18,228,4,"_dependencyMap"],[182,32,228,4],[182,47,228,11,"equal"],[182,52,228,16],[182,53,228,17,"buffer"],[182,59,228,23],[182,60,228,24,"length"],[182,66,228,30],[182,68,228,32],[182,69,228,33],[182,72,228,36,"byteLength"],[182,82,228,46],[182,85,228,49,"byteLength"],[182,95,228,59],[182,97,228,61],[182,122,228,86],[182,123,228,87],[183,6,230,4],[183,10,230,8,"y"],[183,11,230,9],[183,14,230,12,"_$$_REQUIRE"],[183,25,230,12],[183,26,230,12,"_dependencyMap"],[183,40,230,12],[183,53,230,23,"fromBuffer"],[183,63,230,33],[183,64,230,34,"buffer"],[183,70,230,40],[183,71,230,41,"slice"],[183,76,230,46],[183,77,230,47],[183,78,230,48],[183,81,230,51,"byteLength"],[183,91,230,61],[183,92,230,62],[183,93,230,63],[184,6,231,4,"Q"],[184,7,231,5],[184,10,231,8,"Point"],[184,15,231,13],[184,16,231,14,"fromAffine"],[184,26,231,24],[184,27,231,25,"curve"],[184,32,231,30],[184,34,231,32,"x"],[184,35,231,33],[184,37,231,35,"y"],[184,38,231,36],[184,39,231,37],[185,4,232,2],[186,4,234,2,"Q"],[186,5,234,3],[186,6,234,4,"compressed"],[186,16,234,14],[186,19,234,17,"compressed"],[186,29,234,27],[187,4,235,2],[187,11,235,9,"Q"],[187,12,235,10],[188,2,236,0],[188,3,236,1],[189,2,238,0,"Point"],[189,7,238,5],[189,8,238,6,"prototype"],[189,17,238,15],[189,18,238,16,"toString"],[189,26,238,24],[189,29,238,27],[189,41,238,39],[190,4,239,2],[190,8,239,6],[190,12,239,10],[190,13,239,11,"curve"],[190,18,239,16],[190,19,239,17,"isInfinity"],[190,29,239,27],[190,30,239,28],[190,34,239,32],[190,35,239,33],[190,37,239,35],[190,44,239,42],[190,56,239,54],[191,4,241,2],[191,11,241,9],[191,14,241,12],[191,17,241,15],[191,21,241,19],[191,22,241,20,"affineX"],[191,29,241,27],[191,30,241,28,"toString"],[191,38,241,36],[191,39,241,37],[191,40,241,38],[191,43,241,41],[191,46,241,44],[191,49,241,47],[191,53,241,51],[191,54,241,52,"affineY"],[191,61,241,59],[191,62,241,60,"toString"],[191,70,241,68],[191,71,241,69],[191,72,241,70],[191,75,241,73],[191,78,241,76],[192,2,242,0],[192,3,242,1],[193,2,244,0,"module"],[193,8,244,6],[193,9,244,7,"exports"],[193,16,244,14],[193,19,244,17,"Point"],[193,24,244,22],[194,0,244,22],[194,3]],"functionMap":{"names":["<global>","Point","Object.defineProperty$argument_2.get","Point.fromAffine","Point.prototype.equals","Point.prototype.negate","Point.prototype.add","Point.prototype.twice","Point.prototype.multiply","Point.prototype.multiplyTwo","Point.prototype.getEncoded","Point.decodeFrom","Point.prototype.toString"],"mappings":"AAA;ACM;CDU;OEG;GFM;OEI;GFE;OEI;GFE;mBGG;CHE;yBIE;CJc;yBKE;CLI;sBME;CNmC;wBOE;CP2B;2BQI;CRsB;8BSG;CTwB;6BUE;CVyB;mBWE;CXuB;2BYE;CZI"}},"type":"js/module"}]}