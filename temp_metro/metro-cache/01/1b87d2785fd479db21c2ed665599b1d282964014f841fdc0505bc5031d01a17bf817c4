{"dependencies":[{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":84,"column":0,"index":2602}}],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE="}},{"name":"../../typeFields","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":21,"index":98},"end":{"line":3,"column":48,"index":125}},{"start":{"line":3,"column":21,"index":98},"end":{"line":3,"column":48,"index":125}}],"key":"JA6Y4U+9BJNyHBqSRMPAJW1YgVo="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/toConsumableArray\");\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  var range = function range(n) {\n    return _toConsumableArray(Array(n).keys());\n  };\n  function decode(keyVal) {\n    if (keyVal.key[0] !== _$$_REQUIRE(_dependencyMap[1], \"../../typeFields\").GlobalTypes.GLOBAL_XPUB) {\n      throw new Error('Decode Error: could not decode globalXpub with key 0x' + keyVal.key.toString('hex'));\n    }\n    if (keyVal.key.length !== 79 || ![2, 3].includes(keyVal.key[46])) {\n      throw new Error('Decode Error: globalXpub has invalid extended pubkey in key 0x' + keyVal.key.toString('hex'));\n    }\n    if (keyVal.value.length / 4 % 1 !== 0) {\n      throw new Error('Decode Error: Global GLOBAL_XPUB value length should be multiple of 4');\n    }\n    var extendedPubkey = keyVal.key.slice(1);\n    var data = {\n      masterFingerprint: keyVal.value.slice(0, 4),\n      extendedPubkey: extendedPubkey,\n      path: 'm'\n    };\n    for (var i of range(keyVal.value.length / 4 - 1)) {\n      var val = keyVal.value.readUInt32LE(i * 4 + 4);\n      var isHard = !!(val & 0x80000000);\n      var idx = val & 0x7fffffff;\n      data.path += '/' + idx.toString(10) + (isHard ? \"'\" : '');\n    }\n    return data;\n  }\n  exports.decode = decode;\n  function encode(data) {\n    var head = Buffer.from([_$$_REQUIRE(_dependencyMap[1], \"../../typeFields\").GlobalTypes.GLOBAL_XPUB]);\n    var key = Buffer.concat([head, data.extendedPubkey]);\n    var splitPath = data.path.split('/');\n    var value = Buffer.allocUnsafe(splitPath.length * 4);\n    data.masterFingerprint.copy(value, 0);\n    var offset = 4;\n    splitPath.slice(1).forEach(function (level) {\n      var isHard = level.slice(-1) === \"'\";\n      var num = 0x7fffffff & parseInt(isHard ? level.slice(0, -1) : level, 10);\n      if (isHard) num += 0x80000000;\n      value.writeUInt32LE(num, offset);\n      offset += 4;\n    });\n    return {\n      key: key,\n      value: value\n    };\n  }\n  exports.encode = encode;\n  exports.expected = '{ masterFingerprint: Buffer; extendedPubkey: Buffer; path: string; }';\n  function check(data) {\n    var epk = data.extendedPubkey;\n    var mfp = data.masterFingerprint;\n    var p = data.path;\n    return Buffer.isBuffer(epk) && epk.length === 78 && [2, 3].indexOf(epk[45]) > -1 && Buffer.isBuffer(mfp) && mfp.length === 4 && typeof p === 'string' && !!p.match(/^m(\\/\\d+'?)*$/);\n  }\n  exports.check = check;\n  function canAddToArray(array, item, dupeSet) {\n    var dupeString = item.extendedPubkey.toString('hex');\n    if (dupeSet.has(dupeString)) return false;\n    dupeSet.add(dupeString);\n    return array.filter(function (v) {\n      return v.extendedPubkey.equals(item.extendedPubkey);\n    }).length === 0;\n  }\n  exports.canAddToArray = canAddToArray;\n});","lineCount":73,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_toConsumableArray"],[4,24,1,13],[4,27,1,13,"_$$_REQUIRE"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,2,0,"Object"],[5,8,2,6],[5,9,2,7,"defineProperty"],[5,23,2,21],[5,24,2,22,"exports"],[5,31,2,29],[5,33,2,31],[5,45,2,43],[5,47,2,45],[6,4,2,47,"value"],[6,9,2,52],[6,11,2,54],[7,2,2,59],[7,3,2,60],[7,4,2,61],[8,2,4,0],[8,6,4,6,"range"],[8,11,4,11],[8,14,4,14],[8,23,4,6,"range"],[8,28,4,11,"range"],[8,29,4,14,"n"],[8,30,4,15],[9,4,4,15],[9,11,4,15,"_toConsumableArray"],[9,29,4,15],[9,30,4,23,"Array"],[9,35,4,28],[9,36,4,29,"n"],[9,37,4,30],[9,38,4,31],[9,39,4,32,"keys"],[9,43,4,36],[9,44,4,37],[9,45,4,38],[10,2,4,38],[10,3,4,39],[11,2,5,0],[11,11,5,9,"decode"],[11,17,5,15,"decode"],[11,18,5,16,"keyVal"],[11,24,5,22],[11,26,5,24],[12,4,6,2],[12,8,6,6,"keyVal"],[12,14,6,12],[12,15,6,13,"key"],[12,18,6,16],[12,19,6,17],[12,20,6,18],[12,21,6,19],[12,26,6,24,"_$$_REQUIRE"],[12,37,6,24],[12,38,6,24,"_dependencyMap"],[12,52,6,24],[12,77,6,37,"GlobalTypes"],[12,88,6,48],[12,89,6,49,"GLOBAL_XPUB"],[12,100,6,60],[12,102,6,62],[13,6,7,4],[13,12,7,10],[13,16,7,14,"Error"],[13,21,7,19],[13,22,8,6],[13,77,8,61],[13,80,9,8,"keyVal"],[13,86,9,14],[13,87,9,15,"key"],[13,90,9,18],[13,91,9,19,"toString"],[13,99,9,27],[13,100,9,28],[13,105,9,33],[13,106,10,4],[13,107,10,5],[14,4,11,2],[15,4,12,2],[15,8,12,6,"keyVal"],[15,14,12,12],[15,15,12,13,"key"],[15,18,12,16],[15,19,12,17,"length"],[15,25,12,23],[15,30,12,28],[15,32,12,30],[15,36,12,34],[15,37,12,35],[15,38,12,36],[15,39,12,37],[15,41,12,39],[15,42,12,40],[15,43,12,41],[15,44,12,42,"includes"],[15,52,12,50],[15,53,12,51,"keyVal"],[15,59,12,57],[15,60,12,58,"key"],[15,63,12,61],[15,64,12,62],[15,66,12,64],[15,67,12,65],[15,68,12,66],[15,70,12,68],[16,6,13,4],[16,12,13,10],[16,16,13,14,"Error"],[16,21,13,19],[16,22,14,6],[16,86,14,70],[16,89,15,8,"keyVal"],[16,95,15,14],[16,96,15,15,"key"],[16,99,15,18],[16,100,15,19,"toString"],[16,108,15,27],[16,109,15,28],[16,114,15,33],[16,115,16,4],[16,116,16,5],[17,4,17,2],[18,4,18,2],[18,8,18,7,"keyVal"],[18,14,18,13],[18,15,18,14,"value"],[18,20,18,19],[18,21,18,20,"length"],[18,27,18,26],[18,30,18,29],[18,31,18,30],[18,34,18,34],[18,35,18,35],[18,40,18,40],[18,41,18,41],[18,43,18,43],[19,6,19,4],[19,12,19,10],[19,16,19,14,"Error"],[19,21,19,19],[19,22,20,6],[19,93,21,4],[19,94,21,5],[20,4,22,2],[21,4,23,2],[21,8,23,8,"extendedPubkey"],[21,22,23,22],[21,25,23,25,"keyVal"],[21,31,23,31],[21,32,23,32,"key"],[21,35,23,35],[21,36,23,36,"slice"],[21,41,23,41],[21,42,23,42],[21,43,23,43],[21,44,23,44],[22,4,24,2],[22,8,24,8,"data"],[22,12,24,12],[22,15,24,15],[23,6,25,4,"masterFingerprint"],[23,23,25,21],[23,25,25,23,"keyVal"],[23,31,25,29],[23,32,25,30,"value"],[23,37,25,35],[23,38,25,36,"slice"],[23,43,25,41],[23,44,25,42],[23,45,25,43],[23,47,25,45],[23,48,25,46],[23,49,25,47],[24,6,26,4,"extendedPubkey"],[24,20,26,18],[24,22,26,4,"extendedPubkey"],[24,36,26,18],[25,6,27,4,"path"],[25,10,27,8],[25,12,27,10],[26,4,28,2],[26,5,28,3],[27,4,29,2],[27,9,29,7],[27,13,29,13,"i"],[27,14,29,14],[27,18,29,18,"range"],[27,23,29,23],[27,24,29,24,"keyVal"],[27,30,29,30],[27,31,29,31,"value"],[27,36,29,36],[27,37,29,37,"length"],[27,43,29,43],[27,46,29,46],[27,47,29,47],[27,50,29,50],[27,51,29,51],[27,52,29,52],[27,54,29,54],[28,6,30,4],[28,10,30,10,"val"],[28,13,30,13],[28,16,30,16,"keyVal"],[28,22,30,22],[28,23,30,23,"value"],[28,28,30,28],[28,29,30,29,"readUInt32LE"],[28,41,30,41],[28,42,30,42,"i"],[28,43,30,43],[28,46,30,46],[28,47,30,47],[28,50,30,50],[28,51,30,51],[28,52,30,52],[29,6,31,4],[29,10,31,10,"isHard"],[29,16,31,16],[29,19,31,19],[29,20,31,20],[29,22,31,22,"val"],[29,25,31,25],[29,28,31,28],[29,38,31,38],[29,39,31,39],[30,6,32,4],[30,10,32,10,"idx"],[30,13,32,13],[30,16,32,16,"val"],[30,19,32,19],[30,22,32,22],[30,32,32,32],[31,6,33,4,"data"],[31,10,33,8],[31,11,33,9,"path"],[31,15,33,13],[31,19,33,17],[31,22,33,20],[31,25,33,23,"idx"],[31,28,33,26],[31,29,33,27,"toString"],[31,37,33,35],[31,38,33,36],[31,40,33,38],[31,41,33,39],[31,45,33,43,"isHard"],[31,51,33,49],[31,54,33,52],[31,57,33,55],[31,60,33,58],[31,62,33,60],[31,63,33,61],[32,4,34,2],[33,4,35,2],[33,11,35,9,"data"],[33,15,35,13],[34,2,36,0],[35,2,37,0,"exports"],[35,9,37,7],[35,10,37,8,"decode"],[35,16,37,14],[35,19,37,17,"decode"],[35,25,37,23],[36,2,38,0],[36,11,38,9,"encode"],[36,17,38,15,"encode"],[36,18,38,16,"data"],[36,22,38,20],[36,24,38,22],[37,4,39,2],[37,8,39,8,"head"],[37,12,39,12],[37,15,39,15,"Buffer"],[37,21,39,21],[37,22,39,22,"from"],[37,26,39,26],[37,27,39,27],[37,28,39,28,"_$$_REQUIRE"],[37,39,39,28],[37,40,39,28,"_dependencyMap"],[37,54,39,28],[37,79,39,41,"GlobalTypes"],[37,90,39,52],[37,91,39,53,"GLOBAL_XPUB"],[37,102,39,64],[37,103,39,65],[37,104,39,66],[38,4,40,2],[38,8,40,8,"key"],[38,11,40,11],[38,14,40,14,"Buffer"],[38,20,40,20],[38,21,40,21,"concat"],[38,27,40,27],[38,28,40,28],[38,29,40,29,"head"],[38,33,40,33],[38,35,40,35,"data"],[38,39,40,39],[38,40,40,40,"extendedPubkey"],[38,54,40,54],[38,55,40,55],[38,56,40,56],[39,4,41,2],[39,8,41,8,"splitPath"],[39,17,41,17],[39,20,41,20,"data"],[39,24,41,24],[39,25,41,25,"path"],[39,29,41,29],[39,30,41,30,"split"],[39,35,41,35],[39,36,41,36],[39,39,41,39],[39,40,41,40],[40,4,42,2],[40,8,42,8,"value"],[40,13,42,13],[40,16,42,16,"Buffer"],[40,22,42,22],[40,23,42,23,"allocUnsafe"],[40,34,42,34],[40,35,42,35,"splitPath"],[40,44,42,44],[40,45,42,45,"length"],[40,51,42,51],[40,54,42,54],[40,55,42,55],[40,56,42,56],[41,4,43,2,"data"],[41,8,43,6],[41,9,43,7,"masterFingerprint"],[41,26,43,24],[41,27,43,25,"copy"],[41,31,43,29],[41,32,43,30,"value"],[41,37,43,35],[41,39,43,37],[41,40,43,38],[41,41,43,39],[42,4,44,2],[42,8,44,6,"offset"],[42,14,44,12],[42,17,44,15],[42,18,44,16],[43,4,45,2,"splitPath"],[43,13,45,11],[43,14,45,12,"slice"],[43,19,45,17],[43,20,45,18],[43,21,45,19],[43,22,45,20],[43,23,45,21,"forEach"],[43,30,45,28],[43,31,45,29],[43,41,45,29,"level"],[43,46,45,34],[43,48,45,38],[44,6,46,4],[44,10,46,10,"isHard"],[44,16,46,16],[44,19,46,19,"level"],[44,24,46,24],[44,25,46,25,"slice"],[44,30,46,30],[44,31,46,31],[44,32,46,32],[44,33,46,33],[44,34,46,34],[44,39,46,39],[44,42,46,42],[45,6,47,4],[45,10,47,8,"num"],[45,13,47,11],[45,16,47,14],[45,26,47,24],[45,29,47,27,"parseInt"],[45,37,47,35],[45,38,47,36,"isHard"],[45,44,47,42],[45,47,47,45,"level"],[45,52,47,50],[45,53,47,51,"slice"],[45,58,47,56],[45,59,47,57],[45,60,47,58],[45,62,47,60],[45,63,47,61],[45,64,47,62],[45,65,47,63],[45,68,47,66,"level"],[45,73,47,71],[45,75,47,73],[45,77,47,75],[45,78,47,76],[46,6,48,4],[46,10,48,8,"isHard"],[46,16,48,14],[46,18,48,16,"num"],[46,21,48,19],[46,25,48,23],[46,35,48,33],[47,6,49,4,"value"],[47,11,49,9],[47,12,49,10,"writeUInt32LE"],[47,25,49,23],[47,26,49,24,"num"],[47,29,49,27],[47,31,49,29,"offset"],[47,37,49,35],[47,38,49,36],[48,6,50,4,"offset"],[48,12,50,10],[48,16,50,14],[48,17,50,15],[49,4,51,2],[49,5,51,3],[49,6,51,4],[50,4,52,2],[50,11,52,9],[51,6,53,4,"key"],[51,9,53,7],[51,11,53,4,"key"],[51,14,53,7],[52,6,54,4,"value"],[52,11,54,9],[52,13,54,4,"value"],[53,4,55,2],[53,5,55,3],[54,2,56,0],[55,2,57,0,"exports"],[55,9,57,7],[55,10,57,8,"encode"],[55,16,57,14],[55,19,57,17,"encode"],[55,25,57,23],[56,2,58,0,"exports"],[56,9,58,7],[56,10,58,8,"expected"],[56,18,58,16],[56,21,59,2],[56,91,59,72],[57,2,60,0],[57,11,60,9,"check"],[57,16,60,14,"check"],[57,17,60,15,"data"],[57,21,60,19],[57,23,60,21],[58,4,61,2],[58,8,61,8,"epk"],[58,11,61,11],[58,14,61,14,"data"],[58,18,61,18],[58,19,61,19,"extendedPubkey"],[58,33,61,33],[59,4,62,2],[59,8,62,8,"mfp"],[59,11,62,11],[59,14,62,14,"data"],[59,18,62,18],[59,19,62,19,"masterFingerprint"],[59,36,62,36],[60,4,63,2],[60,8,63,8,"p"],[60,9,63,9],[60,12,63,12,"data"],[60,16,63,16],[60,17,63,17,"path"],[60,21,63,21],[61,4,64,2],[61,11,65,4,"Buffer"],[61,17,65,10],[61,18,65,11,"isBuffer"],[61,26,65,19],[61,27,65,20,"epk"],[61,30,65,23],[61,31,65,24],[61,35,66,4,"epk"],[61,38,66,7],[61,39,66,8,"length"],[61,45,66,14],[61,50,66,19],[61,52,66,21],[61,56,67,4],[61,57,67,5],[61,58,67,6],[61,60,67,8],[61,61,67,9],[61,62,67,10],[61,63,67,11,"indexOf"],[61,70,67,18],[61,71,67,19,"epk"],[61,74,67,22],[61,75,67,23],[61,77,67,25],[61,78,67,26],[61,79,67,27],[61,82,67,30],[61,83,67,31],[61,84,67,32],[61,88,68,4,"Buffer"],[61,94,68,10],[61,95,68,11,"isBuffer"],[61,103,68,19],[61,104,68,20,"mfp"],[61,107,68,23],[61,108,68,24],[61,112,69,4,"mfp"],[61,115,69,7],[61,116,69,8,"length"],[61,122,69,14],[61,127,69,19],[61,128,69,20],[61,132,70,4],[61,139,70,11,"p"],[61,140,70,12],[61,145,70,17],[61,153,70,25],[61,157,71,4],[61,158,71,5],[61,159,71,6,"p"],[61,160,71,7],[61,161,71,8,"match"],[61,166,71,13],[61,167,71,14],[61,182,71,29],[61,183,71,30],[62,2,73,0],[63,2,74,0,"exports"],[63,9,74,7],[63,10,74,8,"check"],[63,15,74,13],[63,18,74,16,"check"],[63,23,74,21],[64,2,75,0],[64,11,75,9,"canAddToArray"],[64,24,75,22,"canAddToArray"],[64,25,75,23,"array"],[64,30,75,28],[64,32,75,30,"item"],[64,36,75,34],[64,38,75,36,"dupeSet"],[64,45,75,43],[64,47,75,45],[65,4,76,2],[65,8,76,8,"dupeString"],[65,18,76,18],[65,21,76,21,"item"],[65,25,76,25],[65,26,76,26,"extendedPubkey"],[65,40,76,40],[65,41,76,41,"toString"],[65,49,76,49],[65,50,76,50],[65,55,76,55],[65,56,76,56],[66,4,77,2],[66,8,77,6,"dupeSet"],[66,15,77,13],[66,16,77,14,"has"],[66,19,77,17],[66,20,77,18,"dupeString"],[66,30,77,28],[66,31,77,29],[66,33,77,31],[66,40,77,38],[66,45,77,43],[67,4,78,2,"dupeSet"],[67,11,78,9],[67,12,78,10,"add"],[67,15,78,13],[67,16,78,14,"dupeString"],[67,26,78,24],[67,27,78,25],[68,4,79,2],[68,11,80,4,"array"],[68,16,80,9],[68,17,80,10,"filter"],[68,23,80,16],[68,24,80,17],[68,34,80,17,"v"],[68,35,80,18],[69,6,80,18],[69,13,80,22,"v"],[69,14,80,23],[69,15,80,24,"extendedPubkey"],[69,29,80,38],[69,30,80,39,"equals"],[69,36,80,45],[69,37,80,46,"item"],[69,41,80,50],[69,42,80,51,"extendedPubkey"],[69,56,80,65],[69,57,80,66],[70,4,80,66],[70,6,80,67],[70,7,80,68,"length"],[70,13,80,74],[70,18,80,79],[70,19,80,80],[71,2,82,0],[72,2,83,0,"exports"],[72,9,83,7],[72,10,83,8,"canAddToArray"],[72,23,83,21],[72,26,83,24,"canAddToArray"],[72,39,83,37],[73,0,83,38],[73,3]],"functionMap":{"names":["<global>","range","decode","encode","splitPath.slice.forEach$argument_0","check","canAddToArray","array.filter$argument_0"],"mappings":"AAA;cCG,yBD;AEC;CF+B;AGE;6BCO;GDM;CHK;AKI;CLa;AME;iBCK,iDD;CNE"}},"type":"js/module"}]}