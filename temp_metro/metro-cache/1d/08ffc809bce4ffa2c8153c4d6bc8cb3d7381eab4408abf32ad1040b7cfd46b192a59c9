{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":397,"column":0,"index":14559}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":397,"column":0,"index":14559}}],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":397,"column":0,"index":14559}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":397,"column":0,"index":14559}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"bignumber.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"+tJwKP0N5JISX+Ssl/Xk2Ffv6xc="}},{"name":"bitcoinjs-lib","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":38},"end":{"line":2,"column":41,"index":79}}],"key":"/nlroPCTcjBceL8E3aKsbjY7aTo="}},{"name":"assert","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":80},"end":{"line":3,"column":28,"index":108}}],"key":"GZNHw+WT2f5kcSAMBpMaSQtjoUA="}},{"name":"../blue_modules/BlueElectrum","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":110},"end":{"line":5,"column":61,"index":171}}],"key":"yyzLdylnn1S3+d5a+wKUG28h8TQ="}},{"name":"./wallets/hd-segwit-bech32-wallet","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":172},"end":{"line":6,"column":73,"index":245}},{"start":{"line":6,"column":0,"index":172},"end":{"line":6,"column":73,"index":245}}],"key":"/ViZ4YnkvUIp68BkQVavJQ8biwE="}},{"name":"./wallets/segwit-bech32-wallet","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":246},"end":{"line":7,"column":68,"index":314}},{"start":{"line":7,"column":0,"index":246},"end":{"line":7,"column":68,"index":314}}],"key":"Nm0e0M4jOSq4xrOBaSJd2atkkcI="}},{"name":"../blue_modules/uint8array-extras","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":445},"end":{"line":10,"column":82,"index":527}},{"start":{"line":10,"column":0,"index":445},"end":{"line":10,"column":82,"index":527}},{"start":{"line":10,"column":0,"index":445},"end":{"line":10,"column":82,"index":527}},{"start":{"line":10,"column":0,"index":445},"end":{"line":10,"column":82,"index":527}}],"key":"jroZQDnFANt7Rj1zyUrv3Q7fO/E="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.HDSegwitBech32Transaction = void 0;\n  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n  var _bignumber = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"bignumber.js\"));\n  var bitcoin = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[5], \"bitcoinjs-lib\"));\n  var _assert = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"assert\"));\n  var BlueElectrum = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7], \"../blue_modules/BlueElectrum\"));\n  function _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\n  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n  /**\n   * Represents transaction of a BIP84 wallet.\n   * Helpers for RBF, CPFP etc.\n   */\n  var HDSegwitBech32Transaction = exports.HDSegwitBech32Transaction = /*#__PURE__*/function () {\n    /**\n     * @param txhex {string|null} Object is initialized with txhex\n     * @param txid {string|null} If txhex not present - txid whould be present\n     * @param wallet {HDSegwitBech32Wallet|null} If set - a wallet object to which transacton belongs\n     */\n    function HDSegwitBech32Transaction(txhex, txid, wallet) {\n      (0, _classCallCheck2.default)(this, HDSegwitBech32Transaction);\n      if (!txhex && !txid) throw new Error('Bad arguments');\n      this._txhex = txhex;\n      this._txid = txid;\n      if (wallet) {\n        if (wallet.type === _$$_REQUIRE(_dependencyMap[8], \"./wallets/hd-segwit-bech32-wallet\").HDSegwitBech32Wallet.type) {\n          /** @type {HDSegwitBech32Wallet} */\n          this._wallet = wallet;\n        } else {\n          throw new Error('Only HD Bech32 wallets supported');\n        }\n      }\n      if (this._txhex) this._txDecoded = bitcoin.Transaction.fromHex(this._txhex);\n      this._remoteTx = null;\n    }\n\n    /**\n     * If only txid present - we fetch hex\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    return (0, _createClass2.default)(HDSegwitBech32Transaction, [{\n      key: \"_fetchTxhexAndDecode\",\n      value: (function () {\n        var _fetchTxhexAndDecode2 = (0, _asyncToGenerator2.default)(function* () {\n          (0, _assert.default)(this._txid, 'this._txid must be a string');\n          var hexes = yield BlueElectrum.multiGetTransactionByTxid([this._txid], false, 10);\n          this._txhex = hexes[this._txid];\n          if (!this._txhex) throw new Error(\"Transaction can't be found in mempool\");\n          this._txDecoded = bitcoin.Transaction.fromHex(this._txhex);\n        });\n        function _fetchTxhexAndDecode() {\n          return _fetchTxhexAndDecode2.apply(this, arguments);\n        }\n        return _fetchTxhexAndDecode;\n      }()\n      /**\n       * Returns max used sequence for this transaction. Next RBF transaction\n       * should have this sequence + 1\n       *\n       * @returns {Promise<number>}\n       */\n      )\n    }, {\n      key: \"getMaxUsedSequence\",\n      value: (function () {\n        var _getMaxUsedSequence = (0, _asyncToGenerator2.default)(function* () {\n          if (!this._txDecoded) yield this._fetchTxhexAndDecode();\n          (0, _assert.default)(this._txDecoded, 'Could not fetch tx and decode');\n          var max = 0;\n          for (var inp of this._txDecoded.ins) {\n            max = Math.max(inp.sequence, max);\n          }\n          return max;\n        });\n        function getMaxUsedSequence() {\n          return _getMaxUsedSequence.apply(this, arguments);\n        }\n        return getMaxUsedSequence;\n      }()\n      /**\n       * Basic check that Sequence num for this TX is replaceable\n       *\n       * @returns {Promise<boolean>}\n       */\n      )\n    }, {\n      key: \"isSequenceReplaceable\",\n      value: (function () {\n        var _isSequenceReplaceable = (0, _asyncToGenerator2.default)(function* () {\n          return (yield this.getMaxUsedSequence()) < bitcoin.Transaction.DEFAULT_SEQUENCE;\n        });\n        function isSequenceReplaceable() {\n          return _isSequenceReplaceable.apply(this, arguments);\n        }\n        return isSequenceReplaceable;\n      }()\n      /**\n       * If internal extended tx data not set - this is a method\n       * to fetch and set this data from electrum. Its different data from\n       * decoded hex - it contains confirmations etc.\n       *\n       * @returns {Promise<void>}\n       * @private\n       */\n      )\n    }, {\n      key: \"_fetchRemoteTx\",\n      value: (function () {\n        var _fetchRemoteTx2 = (0, _asyncToGenerator2.default)(function* () {\n          var result = yield BlueElectrum.multiGetTransactionByTxid([this._txid || this._txDecoded.getId()], true);\n          this._remoteTx = Object.values(result)[0];\n        });\n        function _fetchRemoteTx() {\n          return _fetchRemoteTx2.apply(this, arguments);\n        }\n        return _fetchRemoteTx;\n      }()\n      /**\n       * Fetches from electrum actual confirmations number for this tx\n       *\n       * @returns {Promise<Number>}\n       */\n      )\n    }, {\n      key: \"getRemoteConfirmationsNum\",\n      value: (function () {\n        var _getRemoteConfirmationsNum = (0, _asyncToGenerator2.default)(function* () {\n          if (!this._remoteTx) yield this._fetchRemoteTx();\n          return this._remoteTx.confirmations || 0; // stupid undefined\n        });\n        function getRemoteConfirmationsNum() {\n          return _getRemoteConfirmationsNum.apply(this, arguments);\n        }\n        return getRemoteConfirmationsNum;\n      }()\n      /**\n       * Checks that tx belongs to a wallet and also\n       * tx value is < 0, which means its a spending transaction\n       * definitely initiated by us, can be RBF'ed.\n       *\n       * @returns {Promise<boolean>}\n       */\n      )\n    }, {\n      key: \"isOurTransaction\",\n      value: (function () {\n        var _isOurTransaction = (0, _asyncToGenerator2.default)(function* () {\n          if (!this._wallet) throw new Error('Wallet required for this method');\n          var found = false;\n          for (var tx of this._wallet.getTransactions()) {\n            if (tx.txid === (this._txid || this._txDecoded.getId())) {\n              // its our transaction, and its spending transaction, which means we initiated it\n              if (tx.value && tx.value < 0) found = true;\n            }\n          }\n          return found;\n        });\n        function isOurTransaction() {\n          return _isOurTransaction.apply(this, arguments);\n        }\n        return isOurTransaction;\n      }()\n      /**\n       * Checks that tx belongs to a wallet and also\n       * tx value is > 0, which means its a receiving transaction and thus\n       * can be CPFP'ed.\n       *\n       * @returns {Promise<boolean>}\n       */\n      )\n    }, {\n      key: \"isToUsTransaction\",\n      value: (function () {\n        var _isToUsTransaction = (0, _asyncToGenerator2.default)(function* () {\n          if (!this._wallet) throw new Error('Wallet required for this method');\n          var found = false;\n          for (var tx of this._wallet.getTransactions()) {\n            if (tx.txid === (this._txid || this._txDecoded.getId())) {\n              if (tx.value && tx.value > 0) found = true;\n            }\n          }\n          return found;\n        });\n        function isToUsTransaction() {\n          return _isToUsTransaction.apply(this, arguments);\n        }\n        return isToUsTransaction;\n      }()\n      /**\n       * Returns all the info about current transaction which is needed to do a replacement TX\n       * * fee - current tx fee\n       * * utxos - UTXOs current tx consumes\n       * * changeAmount - amount of satoshis that sent to change address (or addresses) we control\n       * * feeRate - sat/byte for current tx\n       * * targets - destination(s) of funds (outputs we do not control)\n       * * unconfirmedUtxos - UTXOs created by this transaction (only the ones we control)\n       *\n       * @returns {Promise<{fee: number, utxos: Array, unconfirmedUtxos: Array, changeAmount: number, feeRate: number, targets: Array}>}\n       */\n      )\n    }, {\n      key: \"getInfo\",\n      value: (function () {\n        var _getInfo = (0, _asyncToGenerator2.default)(function* () {\n          if (!this._wallet) throw new Error('Wallet required for this method');\n          if (!this._remoteTx) yield this._fetchRemoteTx();\n          if (!this._txDecoded) yield this._fetchTxhexAndDecode();\n          (0, _assert.default)(this._txDecoded, 'could not fetch tx and decode');\n          var prevInputs = [];\n          for (var inp of this._txDecoded.ins) {\n            prevInputs.push(Buffer.from(inp.hash).reverse().toString('hex'));\n          }\n          var prevTransactions = yield BlueElectrum.multiGetTransactionByTxid(prevInputs, true);\n\n          // fetched, now lets count how much satoshis went in\n          var wentIn = 0;\n          var utxos = [];\n          for (var _inp of this._txDecoded.ins) {\n            var reversedHash = Buffer.from(_inp.hash).reverse().toString('hex');\n            if (prevTransactions[reversedHash] && prevTransactions[reversedHash].vout && prevTransactions[reversedHash].vout[_inp.index]) {\n              var value = prevTransactions[reversedHash].vout[_inp.index].value;\n              value = new _bignumber.default(value).multipliedBy(100000000).toNumber();\n              wentIn += value;\n              var witness = _inp.witness[_inp.witness.length - 1];\n              var address = String(_$$_REQUIRE(_dependencyMap[9], \"./wallets/segwit-bech32-wallet\").SegwitBech32Wallet.witnessToAddress((0, _$$_REQUIRE(_dependencyMap[10], \"../blue_modules/uint8array-extras\").isUint8Array)(witness) ? (0, _$$_REQUIRE(_dependencyMap[10], \"../blue_modules/uint8array-extras\").uint8ArrayToHex)(witness) : witness));\n              utxos.push({\n                vout: _inp.index,\n                value: value,\n                txid: reversedHash,\n                address: address\n              });\n            }\n          }\n\n          // counting how much went into actual outputs\n\n          var wasSpent = 0;\n          for (var outp of this._txDecoded.outs) {\n            wasSpent += Number(outp.value);\n          }\n          var fee = wentIn - wasSpent;\n          var feeRate = Math.floor(fee / this._txDecoded.virtualSize());\n          if (feeRate === 0) feeRate = 1;\n\n          // lets take a look at change\n          var changeAmount = 0;\n          var targets = [];\n          for (var _outp of this._remoteTx.vout) {\n            var _address = _outp.scriptPubKey.addresses[0];\n            var _value = new _bignumber.default(_outp.value).multipliedBy(100000000).toNumber();\n            if (this._wallet.weOwnAddress(_address)) {\n              changeAmount += _value;\n            } else {\n              // this is target\n              targets.push({\n                value: _value,\n                address: _address\n              });\n            }\n          }\n\n          // lets find outputs we own that current transaction creates. can be used in CPFP\n          var unconfirmedUtxos = [];\n          for (var _outp2 of this._remoteTx.vout) {\n            var _address2 = _outp2.scriptPubKey.addresses[0];\n            var _value2 = new _bignumber.default(_outp2.value).multipliedBy(100000000).toNumber();\n            if (this._wallet.weOwnAddress(_address2)) {\n              unconfirmedUtxos.push({\n                vout: _outp2.n,\n                value: _value2,\n                txid: this._txid || this._txDecoded.getId(),\n                address: _address2\n              });\n            }\n          }\n          return {\n            fee: fee,\n            feeRate: feeRate,\n            targets: targets,\n            changeAmount: changeAmount,\n            utxos: utxos,\n            unconfirmedUtxos: unconfirmedUtxos\n          };\n        });\n        function getInfo() {\n          return _getInfo.apply(this, arguments);\n        }\n        return getInfo;\n      }()\n      /**\n       * We get _all_ our UTXOs (even spent kek),\n       * and see if each input in this transaction's UTXO is in there. If its not there - its an unknown\n       * input, we dont own it (possibly a payjoin transaction), and we cant do RBF\n       *\n       * @returns {Promise<boolean>}\n       */\n      )\n    }, {\n      key: \"thereAreUnknownInputsInTx\",\n      value: (function () {\n        var _thereAreUnknownInputsInTx = (0, _asyncToGenerator2.default)(function* () {\n          if (!this._wallet) throw new Error('Wallet required for this method');\n          if (!this._txDecoded) yield this._fetchTxhexAndDecode();\n          (0, _assert.default)(this._txDecoded, 'could not fetch tx and decode');\n          var spentUtxos = this._wallet.getDerivedUtxoFromOurTransaction(true);\n          for (var inp of this._txDecoded.ins) {\n            var txidInUtxo = Buffer.from(inp.hash).reverse().toString('hex');\n            var found = false;\n            for (var spentU of spentUtxos) {\n              if (spentU.txid === txidInUtxo && spentU.vout === inp.index) found = true;\n            }\n            if (!found) {\n              return true;\n            }\n          }\n        });\n        function thereAreUnknownInputsInTx() {\n          return _thereAreUnknownInputsInTx.apply(this, arguments);\n        }\n        return thereAreUnknownInputsInTx;\n      }()\n      /**\n       * Checks if all outputs belong to us, that\n       * means we already canceled this tx and we can only bump fees\n       *\n       * @returns {Promise<boolean>}\n       */\n      )\n    }, {\n      key: \"canCancelTx\",\n      value: (function () {\n        var _canCancelTx = (0, _asyncToGenerator2.default)(function* () {\n          if (!this._wallet) throw new Error('Wallet required for this method');\n          if (!this._txDecoded) yield this._fetchTxhexAndDecode();\n          (0, _assert.default)(this._txDecoded, 'could not fetch tx and decode');\n          if (yield this.thereAreUnknownInputsInTx()) return false;\n\n          // if theres at least one output we dont own - we can cancel this transaction!\n          for (var outp of this._txDecoded.outs) {\n            var outpScript = outp.script;\n            if (!this._wallet.weOwnAddress(String(_$$_REQUIRE(_dependencyMap[9], \"./wallets/segwit-bech32-wallet\").SegwitBech32Wallet.scriptPubKeyToAddress((0, _$$_REQUIRE(_dependencyMap[10], \"../blue_modules/uint8array-extras\").isUint8Array)(outpScript) ? (0, _$$_REQUIRE(_dependencyMap[10], \"../blue_modules/uint8array-extras\").uint8ArrayToHex)(outpScript) : outpScript)))) return true;\n          }\n          return false;\n        });\n        function canCancelTx() {\n          return _canCancelTx.apply(this, arguments);\n        }\n        return canCancelTx;\n      }())\n    }, {\n      key: \"canBumpTx\",\n      value: function () {\n        var _canBumpTx = (0, _asyncToGenerator2.default)(function* () {\n          if (!this._wallet) throw new Error('Wallet required for this method');\n          if (!this._txDecoded) yield this._fetchTxhexAndDecode();\n          if (yield this.thereAreUnknownInputsInTx()) return false;\n          return true;\n        });\n        function canBumpTx() {\n          return _canBumpTx.apply(this, arguments);\n        }\n        return canBumpTx;\n      }()\n      /**\n       * Creates an RBF transaction that can replace previous one and basically cancel it (rewrite\n       * output to the one our wallet controls). Note, this cannot add more utxo in RBF transaction if\n       * newFeerate is too high\n       *\n       * @param newFeerate {number} Sat/byte. Should be greater than previous tx feerate\n       * @returns {Promise<{outputs: Array, tx: Transaction, inputs: Array, fee: Number}>}\n       */\n    }, {\n      key: \"createRBFcancelTx\",\n      value: (function () {\n        var _createRBFcancelTx = (0, _asyncToGenerator2.default)(function* (newFeerate) {\n          if (!this._wallet) throw new Error('Wallet required for this method');\n          if (!this._remoteTx) yield this._fetchRemoteTx();\n          var _yield$this$getInfo = yield this.getInfo(),\n            feeRate = _yield$this$getInfo.feeRate,\n            utxos = _yield$this$getInfo.utxos;\n          if (newFeerate <= feeRate) throw new Error('New feerate should be bigger than the old one');\n          var myAddress = yield this._wallet.getChangeAddressAsync();\n          return this._wallet.createTransaction(utxos, [{\n            address: myAddress\n          }], newFeerate, /* meaningless in this context */myAddress, (yield this.getMaxUsedSequence()) + 1);\n        });\n        function createRBFcancelTx(_x) {\n          return _createRBFcancelTx.apply(this, arguments);\n        }\n        return createRBFcancelTx;\n      }()\n      /**\n       * Creates an RBF transaction that can bumps fee of previous one. Note, this cannot add more utxo in RBF\n       * transaction if newFeerate is too high\n       *\n       * @param newFeerate {number} Sat/byte\n       * @returns {Promise<{outputs: Array, tx: Transaction, inputs: Array, fee: Number}>}\n       */\n      )\n    }, {\n      key: \"createRBFbumpFee\",\n      value: (function () {\n        var _createRBFbumpFee = (0, _asyncToGenerator2.default)(function* (newFeerate) {\n          if (!this._wallet) throw new Error('Wallet required for this method');\n          if (!this._remoteTx) yield this._fetchRemoteTx();\n          var _yield$this$getInfo2 = yield this.getInfo(),\n            feeRate = _yield$this$getInfo2.feeRate,\n            targets = _yield$this$getInfo2.targets,\n            changeAmount = _yield$this$getInfo2.changeAmount,\n            utxos = _yield$this$getInfo2.utxos;\n          if (newFeerate <= feeRate) throw new Error('New feerate should be bigger than the old one');\n          var myAddress = yield this._wallet.getChangeAddressAsync();\n          if (changeAmount === 0) delete targets[0].value;\n          // looks like this was sendMAX transaction (because there was no change), so we cant reuse amount in this\n          // target since fee wont change. removing the amount so `createTransaction` will sendMAX correctly with new feeRate\n\n          if (targets.length === 0) {\n            // looks like this was cancelled tx with single change output, so it wasnt included in `this.getInfo()` targets\n            // so we add output paying ourselves:\n            targets.push({\n              address: this._wallet._getInternalAddressByIndex(this._wallet.next_free_change_address_index)\n            });\n            // not checking emptiness on purpose: it could unpredictably generate too far address because of unconfirmed tx.\n          }\n          return this._wallet.createTransaction(utxos, targets, newFeerate, myAddress, (yield this.getMaxUsedSequence()) + 1);\n        });\n        function createRBFbumpFee(_x2) {\n          return _createRBFbumpFee.apply(this, arguments);\n        }\n        return createRBFbumpFee;\n      }()\n      /**\n       * Creates a CPFP transaction that can bumps fee of previous one (spends created but not confirmed outputs\n       * that belong to us). Note, this cannot add more utxo in CPFP transaction if newFeerate is too high\n       *\n       * @param newFeerate {number} sat/byte\n       * @returns {Promise<{outputs: Array, tx: Transaction, inputs: Array, fee: Number}>}\n       */\n      )\n    }, {\n      key: \"createCPFPbumpFee\",\n      value: (function () {\n        var _createCPFPbumpFee = (0, _asyncToGenerator2.default)(function* (newFeerate) {\n          if (!this._wallet) throw new Error('Wallet required for this method');\n          if (!this._remoteTx) yield this._fetchRemoteTx();\n          var _yield$this$getInfo3 = yield this.getInfo(),\n            feeRate = _yield$this$getInfo3.feeRate,\n            oldFee = _yield$this$getInfo3.fee,\n            unconfirmedUtxos = _yield$this$getInfo3.unconfirmedUtxos;\n          if (newFeerate <= feeRate) throw new Error('New feerate should be bigger than the old one');\n          var myAddress = yield this._wallet.getChangeAddressAsync();\n\n          // calculating feerate for CPFP tx so that average between current and CPFP tx will equal newFeerate.\n          // this works well if both txs are +/- equal size in bytes\n          var targetFeeRate = 2 * newFeerate - feeRate;\n          var add = 0;\n          var tx, inputs, outputs, fee;\n          while (add <= 128) {\n            var createdTx = this._wallet.createTransaction(unconfirmedUtxos, [{\n              address: myAddress\n            }], targetFeeRate + add, myAddress, _$$_REQUIRE(_dependencyMap[8], \"./wallets/hd-segwit-bech32-wallet\").HDSegwitBech32Wallet.defaultRBFSequence);\n            tx = createdTx.tx;\n            inputs = createdTx.inputs;\n            outputs = createdTx.outputs;\n            fee = createdTx.fee;\n            (0, _assert.default)(tx, 'tx is createCPFPbumpFee() is undefined');\n            var combinedFeeRate = (oldFee + fee) / (this._txDecoded.virtualSize() + tx.virtualSize()); // avg\n            if (Math.round(combinedFeeRate) < newFeerate) {\n              add *= 2;\n              if (!add) add = 2;\n            } else {\n              // reached target feerate\n              break;\n            }\n          }\n\n          // @ts-ignore stfu\n          return {\n            tx: tx,\n            inputs: inputs,\n            outputs: outputs,\n            fee: fee\n          };\n        });\n        function createCPFPbumpFee(_x3) {\n          return _createCPFPbumpFee.apply(this, arguments);\n        }\n        return createCPFPbumpFee;\n      }())\n    }]);\n  }();\n});","lineCount":500,"map":[[10,2,1,0],[10,6,1,0,"_bignumber"],[10,16,1,0],[10,19,1,0,"_interopRequireDefault"],[10,41,1,0],[10,42,1,0,"_$$_REQUIRE"],[10,53,1,0],[10,54,1,0,"_dependencyMap"],[10,68,1,0],[11,2,2,0],[11,6,2,0,"bitcoin"],[11,13,2,0],[11,16,2,0,"_interopRequireWildcard"],[11,39,2,0],[11,40,2,0,"_$$_REQUIRE"],[11,51,2,0],[11,52,2,0,"_dependencyMap"],[11,66,2,0],[12,2,3,0],[12,6,3,0,"_assert"],[12,13,3,0],[12,16,3,0,"_interopRequireDefault"],[12,38,3,0],[12,39,3,0,"_$$_REQUIRE"],[12,50,3,0],[12,51,3,0,"_dependencyMap"],[12,65,3,0],[13,2,5,0],[13,6,5,0,"BlueElectrum"],[13,18,5,0],[13,21,5,0,"_interopRequireWildcard"],[13,44,5,0],[13,45,5,0,"_$$_REQUIRE"],[13,56,5,0],[13,57,5,0,"_dependencyMap"],[13,71,5,0],[14,2,5,61],[14,11,5,61,"_getRequireWildcardCache"],[14,36,5,61,"e"],[14,37,5,61],[14,66,5,61,"WeakMap"],[14,73,5,61],[14,92,5,61,"r"],[14,93,5,61],[14,100,5,61,"WeakMap"],[14,107,5,61],[14,111,5,61,"t"],[14,112,5,61],[14,119,5,61,"WeakMap"],[14,126,5,61],[14,138,5,61,"_getRequireWildcardCache"],[14,162,5,61],[14,174,5,61,"_getRequireWildcardCache"],[14,199,5,61,"e"],[14,200,5,61],[14,211,5,61,"e"],[14,212,5,61],[14,215,5,61,"t"],[14,216,5,61],[14,219,5,61,"r"],[14,220,5,61],[14,225,5,61,"e"],[14,226,5,61],[15,2,5,61],[15,11,5,61,"_interopRequireWildcard"],[15,35,5,61,"e"],[15,36,5,61],[15,38,5,61,"r"],[15,39,5,61],[15,48,5,61,"r"],[15,49,5,61],[15,53,5,61,"e"],[15,54,5,61],[15,58,5,61,"e"],[15,59,5,61],[15,60,5,61,"__esModule"],[15,70,5,61],[15,79,5,61,"e"],[15,80,5,61],[15,95,5,61,"e"],[15,96,5,61],[15,119,5,61,"e"],[15,120,5,61],[15,145,5,61,"e"],[15,146,5,61],[15,157,5,61,"default"],[15,164,5,61],[15,166,5,61,"e"],[15,167,5,61],[15,175,5,61,"t"],[15,176,5,61],[15,179,5,61,"_getRequireWildcardCache"],[15,203,5,61],[15,204,5,61,"r"],[15,205,5,61],[15,212,5,61,"t"],[15,213,5,61],[15,217,5,61,"t"],[15,218,5,61],[15,219,5,61,"has"],[15,222,5,61],[15,223,5,61,"e"],[15,224,5,61],[15,234,5,61,"t"],[15,235,5,61],[15,236,5,61,"get"],[15,239,5,61],[15,240,5,61,"e"],[15,241,5,61],[15,248,5,61,"n"],[15,249,5,61],[15,254,5,61,"__proto__"],[15,263,5,61],[15,273,5,61,"a"],[15,274,5,61],[15,277,5,61,"Object"],[15,283,5,61],[15,284,5,61,"defineProperty"],[15,298,5,61],[15,302,5,61,"Object"],[15,308,5,61],[15,309,5,61,"getOwnPropertyDescriptor"],[15,333,5,61],[15,344,5,61,"u"],[15,345,5,61],[15,349,5,61,"e"],[15,350,5,61],[15,370,5,61,"u"],[15,371,5,61],[15,378,5,61,"hasOwnProperty"],[15,392,5,61],[15,393,5,61,"call"],[15,397,5,61],[15,398,5,61,"e"],[15,399,5,61],[15,401,5,61,"u"],[15,402,5,61],[15,411,5,61,"i"],[15,412,5,61],[15,415,5,61,"a"],[15,416,5,61],[15,419,5,61,"Object"],[15,425,5,61],[15,426,5,61,"getOwnPropertyDescriptor"],[15,450,5,61],[15,451,5,61,"e"],[15,452,5,61],[15,454,5,61,"u"],[15,455,5,61],[15,465,5,61,"i"],[15,466,5,61],[15,471,5,61,"i"],[15,472,5,61],[15,473,5,61,"get"],[15,476,5,61],[15,480,5,61,"i"],[15,481,5,61],[15,482,5,61,"set"],[15,485,5,61],[15,489,5,61,"Object"],[15,495,5,61],[15,496,5,61,"defineProperty"],[15,510,5,61],[15,511,5,61,"n"],[15,512,5,61],[15,514,5,61,"u"],[15,515,5,61],[15,517,5,61,"i"],[15,518,5,61],[15,522,5,61,"n"],[15,523,5,61],[15,524,5,61,"u"],[15,525,5,61],[15,529,5,61,"e"],[15,530,5,61],[15,531,5,61,"u"],[15,532,5,61],[15,544,5,61,"n"],[15,545,5,61],[15,546,5,61,"default"],[15,553,5,61],[15,556,5,61,"e"],[15,557,5,61],[15,559,5,61,"t"],[15,560,5,61],[15,564,5,61,"t"],[15,565,5,61],[15,566,5,61,"set"],[15,569,5,61],[15,570,5,61,"e"],[15,571,5,61],[15,573,5,61,"n"],[15,574,5,61],[15,577,5,61,"n"],[15,578,5,61],[16,2,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,2,12,0],[20,6,16,13,"HDSegwitBech32Transaction"],[20,31,16,38],[20,34,16,38,"exports"],[20,41,16,38],[20,42,16,38,"HDSegwitBech32Transaction"],[20,67,16,38],[21,4,23,2],[22,0,24,0],[23,0,25,0],[24,0,26,0],[25,0,27,0],[26,4,28,2],[26,13,28,2,"HDSegwitBech32Transaction"],[26,39,28,14,"txhex"],[26,44,28,34],[26,46,28,36,"txid"],[26,50,28,55],[26,52,28,57,"wallet"],[26,58,28,92],[26,60,28,94],[27,6,28,94],[27,10,28,94,"_classCallCheck2"],[27,26,28,94],[27,27,28,94,"default"],[27,34,28,94],[27,42,28,94,"HDSegwitBech32Transaction"],[27,67,28,94],[28,6,29,4],[28,10,29,8],[28,11,29,9,"txhex"],[28,16,29,14],[28,20,29,18],[28,21,29,19,"txid"],[28,25,29,23],[28,27,29,25],[28,33,29,31],[28,37,29,35,"Error"],[28,42,29,40],[28,43,29,41],[28,58,29,56],[28,59,29,57],[29,6,30,4],[29,10,30,8],[29,11,30,9,"_txhex"],[29,17,30,15],[29,20,30,18,"txhex"],[29,25,30,23],[30,6,31,4],[30,10,31,8],[30,11,31,9,"_txid"],[30,16,31,14],[30,19,31,17,"txid"],[30,23,31,21],[31,6,33,4],[31,10,33,8,"wallet"],[31,16,33,14],[31,18,33,16],[32,8,34,6],[32,12,34,10,"wallet"],[32,18,34,16],[32,19,34,17,"type"],[32,23,34,21],[32,28,34,26,"HDSegwitBech32Wallet"],[32,58,34,26],[32,59,34,26,"HDSegwitBech32Wallet"],[32,116,34,46],[32,117,34,47,"type"],[32,121,34,51],[32,123,34,53],[33,10,35,8],[34,10,36,8],[34,14,36,12],[34,15,36,13,"_wallet"],[34,22,36,20],[34,25,36,23,"wallet"],[34,31,36,29],[35,8,37,6],[35,9,37,7],[35,15,37,13],[36,10,38,8],[36,16,38,14],[36,20,38,18,"Error"],[36,25,38,23],[36,26,38,24],[36,60,38,58],[36,61,38,59],[37,8,39,6],[38,6,40,4],[39,6,42,4],[39,10,42,8],[39,14,42,12],[39,15,42,13,"_txhex"],[39,21,42,19],[39,23,42,21],[39,27,42,25],[39,28,42,26,"_txDecoded"],[39,38,42,36],[39,41,42,39,"bitcoin"],[39,48,42,46],[39,49,42,47,"Transaction"],[39,60,42,58],[39,61,42,59,"fromHex"],[39,68,42,66],[39,69,42,67],[39,73,42,71],[39,74,42,72,"_txhex"],[39,80,42,78],[39,81,42,79],[40,6,43,4],[40,10,43,8],[40,11,43,9,"_remoteTx"],[40,20,43,18],[40,23,43,21],[40,27,43,25],[41,4,44,2],[43,4,46,2],[44,0,47,0],[45,0,48,0],[46,0,49,0],[47,0,50,0],[48,0,51,0],[49,4,46,2],[49,15,46,2,"_createClass2"],[49,28,46,2],[49,29,46,2,"default"],[49,36,46,2],[49,38,46,2,"HDSegwitBech32Transaction"],[49,63,46,2],[50,6,46,2,"key"],[50,9,46,2],[51,6,46,2,"value"],[51,11,46,2],[52,8,46,2],[52,12,46,2,"_fetchTxhexAndDecode2"],[52,33,46,2],[52,40,46,2,"_asyncToGenerator2"],[52,58,46,2],[52,59,46,2,"default"],[52,66,46,2],[52,68,52,2],[52,81,52,31],[53,10,53,4],[53,14,53,4,"assert"],[53,29,53,10],[53,31,53,11],[53,35,53,15],[53,36,53,16,"_txid"],[53,41,53,21],[53,43,53,23],[53,72,53,52],[53,73,53,53],[54,10,54,4],[54,14,54,10,"hexes"],[54,19,54,15],[54,28,54,24,"BlueElectrum"],[54,40,54,36],[54,41,54,37,"multiGetTransactionByTxid"],[54,66,54,62],[54,67,54,63],[54,68,54,64],[54,72,54,68],[54,73,54,69,"_txid"],[54,78,54,74],[54,79,54,75],[54,81,54,77],[54,86,54,82],[54,88,54,84],[54,90,54,86],[54,91,54,87],[55,10,55,4],[55,14,55,8],[55,15,55,9,"_txhex"],[55,21,55,15],[55,24,55,18,"hexes"],[55,29,55,23],[55,30,55,24],[55,34,55,28],[55,35,55,29,"_txid"],[55,40,55,34],[55,41,55,35],[56,10,56,4],[56,14,56,8],[56,15,56,9],[56,19,56,13],[56,20,56,14,"_txhex"],[56,26,56,20],[56,28,56,22],[56,34,56,28],[56,38,56,32,"Error"],[56,43,56,37],[56,44,56,38],[56,83,56,77],[56,84,56,78],[57,10,57,4],[57,14,57,8],[57,15,57,9,"_txDecoded"],[57,25,57,19],[57,28,57,22,"bitcoin"],[57,35,57,29],[57,36,57,30,"Transaction"],[57,47,57,41],[57,48,57,42,"fromHex"],[57,55,57,49],[57,56,57,50],[57,60,57,54],[57,61,57,55,"_txhex"],[57,67,57,61],[57,68,57,62],[58,8,58,2],[58,9,58,3],[59,8,58,3],[59,17,52,8,"_fetchTxhexAndDecode"],[59,37,52,28,"_fetchTxhexAndDecode"],[59,38,52,28],[60,10,52,28],[60,17,52,28,"_fetchTxhexAndDecode2"],[60,38,52,28],[60,39,52,28,"apply"],[60,44,52,28],[60,51,52,28,"arguments"],[60,60,52,28],[61,8,52,28],[62,8,52,28],[62,15,52,8,"_fetchTxhexAndDecode"],[62,35,52,28],[63,6,52,28],[64,6,60,2],[65,0,61,0],[66,0,62,0],[67,0,63,0],[68,0,64,0],[69,0,65,0],[70,6,60,2],[71,4,60,2],[72,6,60,2,"key"],[72,9,60,2],[73,6,60,2,"value"],[73,11,60,2],[74,8,60,2],[74,12,60,2,"_getMaxUsedSequence"],[74,31,60,2],[74,38,60,2,"_asyncToGenerator2"],[74,56,60,2],[74,57,60,2,"default"],[74,64,60,2],[74,66,66,2],[74,79,66,29],[75,10,67,4],[75,14,67,8],[75,15,67,9],[75,19,67,13],[75,20,67,14,"_txDecoded"],[75,30,67,24],[75,32,67,26],[75,38,67,32],[75,42,67,36],[75,43,67,37,"_fetchTxhexAndDecode"],[75,63,67,57],[75,64,67,58],[75,65,67,59],[76,10,68,4],[76,14,68,4,"assert"],[76,29,68,10],[76,31,68,11],[76,35,68,15],[76,36,68,16,"_txDecoded"],[76,46,68,26],[76,48,68,28],[76,79,68,59],[76,80,68,60],[77,10,70,4],[77,14,70,8,"max"],[77,17,70,11],[77,20,70,14],[77,21,70,15],[78,10,71,4],[78,15,71,9],[78,19,71,15,"inp"],[78,22,71,18],[78,26,71,22],[78,30,71,26],[78,31,71,27,"_txDecoded"],[78,41,71,37],[78,42,71,38,"ins"],[78,45,71,41],[78,47,71,43],[79,12,72,6,"max"],[79,15,72,9],[79,18,72,12,"Math"],[79,22,72,16],[79,23,72,17,"max"],[79,26,72,20],[79,27,72,21,"inp"],[79,30,72,24],[79,31,72,25,"sequence"],[79,39,72,33],[79,41,72,35,"max"],[79,44,72,38],[79,45,72,39],[80,10,73,4],[81,10,75,4],[81,17,75,11,"max"],[81,20,75,14],[82,8,76,2],[82,9,76,3],[83,8,76,3],[83,17,66,8,"getMaxUsedSequence"],[83,35,66,26,"getMaxUsedSequence"],[83,36,66,26],[84,10,66,26],[84,17,66,26,"_getMaxUsedSequence"],[84,36,66,26],[84,37,66,26,"apply"],[84,42,66,26],[84,49,66,26,"arguments"],[84,58,66,26],[85,8,66,26],[86,8,66,26],[86,15,66,8,"getMaxUsedSequence"],[86,33,66,26],[87,6,66,26],[88,6,78,2],[89,0,79,0],[90,0,80,0],[91,0,81,0],[92,0,82,0],[93,6,78,2],[94,4,78,2],[95,6,78,2,"key"],[95,9,78,2],[96,6,78,2,"value"],[96,11,78,2],[97,8,78,2],[97,12,78,2,"_isSequenceReplaceable"],[97,34,78,2],[97,41,78,2,"_asyncToGenerator2"],[97,59,78,2],[97,60,78,2,"default"],[97,67,78,2],[97,69,83,2],[97,82,83,32],[98,10,84,4],[98,17,84,11],[98,24,84,18],[98,28,84,22],[98,29,84,23,"getMaxUsedSequence"],[98,47,84,41],[98,48,84,42],[98,49,84,43],[98,53,84,47,"bitcoin"],[98,60,84,54],[98,61,84,55,"Transaction"],[98,72,84,66],[98,73,84,67,"DEFAULT_SEQUENCE"],[98,89,84,83],[99,8,85,2],[99,9,85,3],[100,8,85,3],[100,17,83,8,"isSequenceReplaceable"],[100,38,83,29,"isSequenceReplaceable"],[100,39,83,29],[101,10,83,29],[101,17,83,29,"_isSequenceReplaceable"],[101,39,83,29],[101,40,83,29,"apply"],[101,45,83,29],[101,52,83,29,"arguments"],[101,61,83,29],[102,8,83,29],[103,8,83,29],[103,15,83,8,"isSequenceReplaceable"],[103,36,83,29],[104,6,83,29],[105,6,87,2],[106,0,88,0],[107,0,89,0],[108,0,90,0],[109,0,91,0],[110,0,92,0],[111,0,93,0],[112,0,94,0],[113,6,87,2],[114,4,87,2],[115,6,87,2,"key"],[115,9,87,2],[116,6,87,2,"value"],[116,11,87,2],[117,8,87,2],[117,12,87,2,"_fetchRemoteTx2"],[117,27,87,2],[117,34,87,2,"_asyncToGenerator2"],[117,52,87,2],[117,53,87,2,"default"],[117,60,87,2],[117,62,95,2],[117,75,95,25],[118,10,96,4],[118,14,96,10,"result"],[118,20,96,16],[118,29,96,25,"BlueElectrum"],[118,41,96,37],[118,42,96,38,"multiGetTransactionByTxid"],[118,67,96,63],[118,68,96,64],[118,69,96,65],[118,73,96,69],[118,74,96,70,"_txid"],[118,79,96,75],[118,83,96,79],[118,87,96,83],[118,88,96,84,"_txDecoded"],[118,98,96,94],[118,99,96,96,"getId"],[118,104,96,101],[118,105,96,102],[118,106,96,103],[118,107,96,104],[118,109,96,106],[118,113,96,110],[118,114,96,111],[119,10,97,4],[119,14,97,8],[119,15,97,9,"_remoteTx"],[119,24,97,18],[119,27,97,21,"Object"],[119,33,97,27],[119,34,97,28,"values"],[119,40,97,34],[119,41,97,35,"result"],[119,47,97,41],[119,48,97,42],[119,49,97,43],[119,50,97,44],[119,51,97,45],[120,8,98,2],[120,9,98,3],[121,8,98,3],[121,17,95,8,"_fetchRemoteTx"],[121,31,95,22,"_fetchRemoteTx"],[121,32,95,22],[122,10,95,22],[122,17,95,22,"_fetchRemoteTx2"],[122,32,95,22],[122,33,95,22,"apply"],[122,38,95,22],[122,45,95,22,"arguments"],[122,54,95,22],[123,8,95,22],[124,8,95,22],[124,15,95,8,"_fetchRemoteTx"],[124,29,95,22],[125,6,95,22],[126,6,100,2],[127,0,101,0],[128,0,102,0],[129,0,103,0],[130,0,104,0],[131,6,100,2],[132,4,100,2],[133,6,100,2,"key"],[133,9,100,2],[134,6,100,2,"value"],[134,11,100,2],[135,8,100,2],[135,12,100,2,"_getRemoteConfirmationsNum"],[135,38,100,2],[135,45,100,2,"_asyncToGenerator2"],[135,63,100,2],[135,64,100,2,"default"],[135,71,100,2],[135,73,105,2],[135,86,105,36],[136,10,106,4],[136,14,106,8],[136,15,106,9],[136,19,106,13],[136,20,106,14,"_remoteTx"],[136,29,106,23],[136,31,106,25],[136,37,106,31],[136,41,106,35],[136,42,106,36,"_fetchRemoteTx"],[136,56,106,50],[136,57,106,51],[136,58,106,52],[137,10,107,4],[137,17,107,11],[137,21,107,15],[137,22,107,16,"_remoteTx"],[137,31,107,25],[137,32,107,26,"confirmations"],[137,45,107,39],[137,49,107,43],[137,50,107,44],[137,51,107,45],[137,52,107,46],[138,8,108,2],[138,9,108,3],[139,8,108,3],[139,17,105,8,"getRemoteConfirmationsNum"],[139,42,105,33,"getRemoteConfirmationsNum"],[139,43,105,33],[140,10,105,33],[140,17,105,33,"_getRemoteConfirmationsNum"],[140,43,105,33],[140,44,105,33,"apply"],[140,49,105,33],[140,56,105,33,"arguments"],[140,65,105,33],[141,8,105,33],[142,8,105,33],[142,15,105,8,"getRemoteConfirmationsNum"],[142,40,105,33],[143,6,105,33],[144,6,110,2],[145,0,111,0],[146,0,112,0],[147,0,113,0],[148,0,114,0],[149,0,115,0],[150,0,116,0],[151,6,110,2],[152,4,110,2],[153,6,110,2,"key"],[153,9,110,2],[154,6,110,2,"value"],[154,11,110,2],[155,8,110,2],[155,12,110,2,"_isOurTransaction"],[155,29,110,2],[155,36,110,2,"_asyncToGenerator2"],[155,54,110,2],[155,55,110,2,"default"],[155,62,110,2],[155,64,117,2],[155,77,117,27],[156,10,118,4],[156,14,118,8],[156,15,118,9],[156,19,118,13],[156,20,118,14,"_wallet"],[156,27,118,21],[156,29,118,23],[156,35,118,29],[156,39,118,33,"Error"],[156,44,118,38],[156,45,118,39],[156,78,118,72],[156,79,118,73],[157,10,119,4],[157,14,119,8,"found"],[157,19,119,13],[157,22,119,16],[157,27,119,21],[158,10,120,4],[158,15,120,9],[158,19,120,15,"tx"],[158,21,120,17],[158,25,120,21],[158,29,120,25],[158,30,120,26,"_wallet"],[158,37,120,33],[158,38,120,34,"getTransactions"],[158,53,120,49],[158,54,120,50],[158,55,120,51],[158,57,120,53],[159,12,121,6],[159,16,121,10,"tx"],[159,18,121,12],[159,19,121,13,"txid"],[159,23,121,17],[159,29,121,23],[159,33,121,27],[159,34,121,28,"_txid"],[159,39,121,33],[159,43,121,37],[159,47,121,41],[159,48,121,42,"_txDecoded"],[159,58,121,52],[159,59,121,54,"getId"],[159,64,121,59],[159,65,121,60],[159,66,121,61],[159,67,121,62],[159,69,121,64],[160,14,122,8],[161,14,123,8],[161,18,123,12,"tx"],[161,20,123,14],[161,21,123,15,"value"],[161,26,123,20],[161,30,123,24,"tx"],[161,32,123,26],[161,33,123,27,"value"],[161,38,123,32],[161,41,123,35],[161,42,123,36],[161,44,123,38,"found"],[161,49,123,43],[161,52,123,46],[161,56,123,50],[162,12,124,6],[163,10,125,4],[164,10,126,4],[164,17,126,11,"found"],[164,22,126,16],[165,8,127,2],[165,9,127,3],[166,8,127,3],[166,17,117,8,"isOurTransaction"],[166,33,117,24,"isOurTransaction"],[166,34,117,24],[167,10,117,24],[167,17,117,24,"_isOurTransaction"],[167,34,117,24],[167,35,117,24,"apply"],[167,40,117,24],[167,47,117,24,"arguments"],[167,56,117,24],[168,8,117,24],[169,8,117,24],[169,15,117,8,"isOurTransaction"],[169,31,117,24],[170,6,117,24],[171,6,129,2],[172,0,130,0],[173,0,131,0],[174,0,132,0],[175,0,133,0],[176,0,134,0],[177,0,135,0],[178,6,129,2],[179,4,129,2],[180,6,129,2,"key"],[180,9,129,2],[181,6,129,2,"value"],[181,11,129,2],[182,8,129,2],[182,12,129,2,"_isToUsTransaction"],[182,30,129,2],[182,37,129,2,"_asyncToGenerator2"],[182,55,129,2],[182,56,129,2,"default"],[182,63,129,2],[182,65,136,2],[182,78,136,28],[183,10,137,4],[183,14,137,8],[183,15,137,9],[183,19,137,13],[183,20,137,14,"_wallet"],[183,27,137,21],[183,29,137,23],[183,35,137,29],[183,39,137,33,"Error"],[183,44,137,38],[183,45,137,39],[183,78,137,72],[183,79,137,73],[184,10,138,4],[184,14,138,8,"found"],[184,19,138,13],[184,22,138,16],[184,27,138,21],[185,10,139,4],[185,15,139,9],[185,19,139,15,"tx"],[185,21,139,17],[185,25,139,21],[185,29,139,25],[185,30,139,26,"_wallet"],[185,37,139,33],[185,38,139,34,"getTransactions"],[185,53,139,49],[185,54,139,50],[185,55,139,51],[185,57,139,53],[186,12,140,6],[186,16,140,10,"tx"],[186,18,140,12],[186,19,140,13,"txid"],[186,23,140,17],[186,29,140,23],[186,33,140,27],[186,34,140,28,"_txid"],[186,39,140,33],[186,43,140,37],[186,47,140,41],[186,48,140,42,"_txDecoded"],[186,58,140,52],[186,59,140,54,"getId"],[186,64,140,59],[186,65,140,60],[186,66,140,61],[186,67,140,62],[186,69,140,64],[187,14,141,8],[187,18,141,12,"tx"],[187,20,141,14],[187,21,141,15,"value"],[187,26,141,20],[187,30,141,24,"tx"],[187,32,141,26],[187,33,141,27,"value"],[187,38,141,32],[187,41,141,35],[187,42,141,36],[187,44,141,38,"found"],[187,49,141,43],[187,52,141,46],[187,56,141,50],[188,12,142,6],[189,10,143,4],[190,10,144,4],[190,17,144,11,"found"],[190,22,144,16],[191,8,145,2],[191,9,145,3],[192,8,145,3],[192,17,136,8,"isToUsTransaction"],[192,34,136,25,"isToUsTransaction"],[192,35,136,25],[193,10,136,25],[193,17,136,25,"_isToUsTransaction"],[193,35,136,25],[193,36,136,25,"apply"],[193,41,136,25],[193,48,136,25,"arguments"],[193,57,136,25],[194,8,136,25],[195,8,136,25],[195,15,136,8,"isToUsTransaction"],[195,32,136,25],[196,6,136,25],[197,6,147,2],[198,0,148,0],[199,0,149,0],[200,0,150,0],[201,0,151,0],[202,0,152,0],[203,0,153,0],[204,0,154,0],[205,0,155,0],[206,0,156,0],[207,0,157,0],[208,6,147,2],[209,4,147,2],[210,6,147,2,"key"],[210,9,147,2],[211,6,147,2,"value"],[211,11,147,2],[212,8,147,2],[212,12,147,2,"_getInfo"],[212,20,147,2],[212,27,147,2,"_asyncToGenerator2"],[212,45,147,2],[212,46,147,2,"default"],[212,53,147,2],[212,55,158,2],[212,68,158,18],[213,10,159,4],[213,14,159,8],[213,15,159,9],[213,19,159,13],[213,20,159,14,"_wallet"],[213,27,159,21],[213,29,159,23],[213,35,159,29],[213,39,159,33,"Error"],[213,44,159,38],[213,45,159,39],[213,78,159,72],[213,79,159,73],[214,10,160,4],[214,14,160,8],[214,15,160,9],[214,19,160,13],[214,20,160,14,"_remoteTx"],[214,29,160,23],[214,31,160,25],[214,37,160,31],[214,41,160,35],[214,42,160,36,"_fetchRemoteTx"],[214,56,160,50],[214,57,160,51],[214,58,160,52],[215,10,161,4],[215,14,161,8],[215,15,161,9],[215,19,161,13],[215,20,161,14,"_txDecoded"],[215,30,161,24],[215,32,161,26],[215,38,161,32],[215,42,161,36],[215,43,161,37,"_fetchTxhexAndDecode"],[215,63,161,57],[215,64,161,58],[215,65,161,59],[216,10,162,4],[216,14,162,4,"assert"],[216,29,162,10],[216,31,162,11],[216,35,162,15],[216,36,162,16,"_txDecoded"],[216,46,162,26],[216,48,162,28],[216,79,162,59],[216,80,162,60],[217,10,164,4],[217,14,164,10,"prevInputs"],[217,24,164,20],[217,27,164,23],[217,29,164,25],[218,10,165,4],[218,15,165,9],[218,19,165,15,"inp"],[218,22,165,18],[218,26,165,22],[218,30,165,26],[218,31,165,27,"_txDecoded"],[218,41,165,37],[218,42,165,38,"ins"],[218,45,165,41],[218,47,165,43],[219,12,166,6,"prevInputs"],[219,22,166,16],[219,23,166,17,"push"],[219,27,166,21],[219,28,166,22,"Buffer"],[219,34,166,28],[219,35,166,29,"from"],[219,39,166,33],[219,40,166,34,"inp"],[219,43,166,37],[219,44,166,38,"hash"],[219,48,166,42],[219,49,166,43],[219,50,166,44,"reverse"],[219,57,166,51],[219,58,166,52],[219,59,166,53],[219,60,166,54,"toString"],[219,68,166,62],[219,69,166,63],[219,74,166,68],[219,75,166,69],[219,76,166,70],[220,10,167,4],[221,10,169,4],[221,14,169,10,"prevTransactions"],[221,30,169,26],[221,39,169,35,"BlueElectrum"],[221,51,169,47],[221,52,169,48,"multiGetTransactionByTxid"],[221,77,169,73],[221,78,169,74,"prevInputs"],[221,88,169,84],[221,90,169,86],[221,94,169,90],[221,95,169,91],[223,10,171,4],[224,10,172,4],[224,14,172,8,"wentIn"],[224,20,172,14],[224,23,172,17],[224,24,172,18],[225,10,173,4],[225,14,173,10,"utxos"],[225,19,173,40],[225,22,173,43],[225,24,173,45],[226,10,174,4],[226,15,174,9],[226,19,174,15,"inp"],[226,23,174,18],[226,27,174,22],[226,31,174,26],[226,32,174,27,"_txDecoded"],[226,42,174,37],[226,43,174,38,"ins"],[226,46,174,41],[226,48,174,43],[227,12,175,6],[227,16,175,12,"reversedHash"],[227,28,175,24],[227,31,175,27,"Buffer"],[227,37,175,33],[227,38,175,34,"from"],[227,42,175,38],[227,43,175,39,"inp"],[227,47,175,42],[227,48,175,43,"hash"],[227,52,175,47],[227,53,175,48],[227,54,175,49,"reverse"],[227,61,175,56],[227,62,175,57],[227,63,175,58],[227,64,175,59,"toString"],[227,72,175,67],[227,73,175,68],[227,78,175,73],[227,79,175,74],[228,12,176,6],[228,16,176,10,"prevTransactions"],[228,32,176,26],[228,33,176,27,"reversedHash"],[228,45,176,39],[228,46,176,40],[228,50,176,44,"prevTransactions"],[228,66,176,60],[228,67,176,61,"reversedHash"],[228,79,176,73],[228,80,176,74],[228,81,176,75,"vout"],[228,85,176,79],[228,89,176,83,"prevTransactions"],[228,105,176,99],[228,106,176,100,"reversedHash"],[228,118,176,112],[228,119,176,113],[228,120,176,114,"vout"],[228,124,176,118],[228,125,176,119,"inp"],[228,129,176,122],[228,130,176,123,"index"],[228,135,176,128],[228,136,176,129],[228,138,176,131],[229,14,177,8],[229,18,177,12,"value"],[229,23,177,17],[229,26,177,20,"prevTransactions"],[229,42,177,36],[229,43,177,37,"reversedHash"],[229,55,177,49],[229,56,177,50],[229,57,177,51,"vout"],[229,61,177,55],[229,62,177,56,"inp"],[229,66,177,59],[229,67,177,60,"index"],[229,72,177,65],[229,73,177,66],[229,74,177,67,"value"],[229,79,177,72],[230,14,178,8,"value"],[230,19,178,13],[230,22,178,16],[230,26,178,20,"BigNumber"],[230,44,178,29],[230,45,178,30,"value"],[230,50,178,35],[230,51,178,36],[230,52,178,37,"multipliedBy"],[230,64,178,49],[230,65,178,50],[230,74,178,59],[230,75,178,60],[230,76,178,61,"toNumber"],[230,84,178,69],[230,85,178,70],[230,86,178,71],[231,14,179,8,"wentIn"],[231,20,179,14],[231,24,179,18,"value"],[231,29,179,23],[232,14,180,8],[232,18,180,14,"witness"],[232,25,180,21],[232,28,180,24,"inp"],[232,32,180,27],[232,33,180,28,"witness"],[232,40,180,35],[232,41,180,36,"inp"],[232,45,180,39],[232,46,180,40,"witness"],[232,53,180,47],[232,54,180,48,"length"],[232,60,180,54],[232,63,180,57],[232,64,180,58],[232,65,180,59],[233,14,181,8],[233,18,181,14,"address"],[233,25,181,21],[233,28,181,24,"String"],[233,34,181,30],[233,35,181,31,"SegwitBech32Wallet"],[233,65,181,31],[233,66,181,31,"SegwitBech32Wallet"],[233,118,181,49],[233,119,181,50,"witnessToAddress"],[233,135,181,66],[233,136,181,67],[233,140,181,67,"isUint8Array"],[233,171,181,67],[233,172,181,67,"isUint8Array"],[233,221,181,79],[233,223,181,80,"witness"],[233,230,181,87],[233,231,181,88],[233,234,181,91],[233,238,181,91,"uint8ArrayToHex"],[233,269,181,91],[233,270,181,91,"uint8ArrayToHex"],[233,322,181,106],[233,324,181,107,"witness"],[233,331,181,114],[233,332,181,115],[233,335,181,118,"witness"],[233,342,181,125],[233,343,181,126],[233,344,181,127],[234,14,182,8,"utxos"],[234,19,182,13],[234,20,182,14,"push"],[234,24,182,18],[234,25,182,19],[235,16,182,21,"vout"],[235,20,182,25],[235,22,182,27,"inp"],[235,26,182,30],[235,27,182,31,"index"],[235,32,182,36],[236,16,182,38,"value"],[236,21,182,43],[236,23,182,38,"value"],[236,28,182,43],[237,16,182,45,"txid"],[237,20,182,49],[237,22,182,51,"reversedHash"],[237,34,182,63],[238,16,182,65,"address"],[238,23,182,72],[238,25,182,65,"address"],[239,14,182,73],[239,15,182,74],[239,16,182,75],[240,12,183,6],[241,10,184,4],[243,10,186,4],[245,10,188,4],[245,14,188,8,"wasSpent"],[245,22,188,16],[245,25,188,19],[245,26,188,20],[246,10,189,4],[246,15,189,9],[246,19,189,15,"outp"],[246,23,189,19],[246,27,189,23],[246,31,189,27],[246,32,189,28,"_txDecoded"],[246,42,189,38],[246,43,189,39,"outs"],[246,47,189,43],[246,49,189,45],[247,12,190,6,"wasSpent"],[247,20,190,14],[247,24,190,18,"Number"],[247,30,190,24],[247,31,190,25,"outp"],[247,35,190,29],[247,36,190,30,"value"],[247,41,190,35],[247,42,190,36],[248,10,191,4],[249,10,193,4],[249,14,193,10,"fee"],[249,17,193,13],[249,20,193,16,"wentIn"],[249,26,193,22],[249,29,193,25,"wasSpent"],[249,37,193,33],[250,10,194,4],[250,14,194,8,"feeRate"],[250,21,194,15],[250,24,194,18,"Math"],[250,28,194,22],[250,29,194,23,"floor"],[250,34,194,28],[250,35,194,29,"fee"],[250,38,194,32],[250,41,194,35],[250,45,194,39],[250,46,194,40,"_txDecoded"],[250,56,194,50],[250,57,194,51,"virtualSize"],[250,68,194,62],[250,69,194,63],[250,70,194,64],[250,71,194,65],[251,10,195,4],[251,14,195,8,"feeRate"],[251,21,195,15],[251,26,195,20],[251,27,195,21],[251,29,195,23,"feeRate"],[251,36,195,30],[251,39,195,33],[251,40,195,34],[253,10,197,4],[254,10,198,4],[254,14,198,8,"changeAmount"],[254,26,198,20],[254,29,198,23],[254,30,198,24],[255,10,199,4],[255,14,199,10,"targets"],[255,21,199,56],[255,24,199,59],[255,26,199,61],[256,10,200,4],[256,15,200,9],[256,19,200,15,"outp"],[256,24,200,19],[256,28,200,23],[256,32,200,27],[256,33,200,28,"_remoteTx"],[256,42,200,37],[256,43,200,38,"vout"],[256,47,200,42],[256,49,200,44],[257,12,201,6],[257,16,201,12,"address"],[257,24,201,19],[257,27,201,22,"outp"],[257,32,201,26],[257,33,201,27,"scriptPubKey"],[257,45,201,39],[257,46,201,40,"addresses"],[257,55,201,49],[257,56,201,50],[257,57,201,51],[257,58,201,52],[258,12,202,6],[258,16,202,12,"value"],[258,22,202,17],[258,25,202,20],[258,29,202,24,"BigNumber"],[258,47,202,33],[258,48,202,34,"outp"],[258,53,202,38],[258,54,202,39,"value"],[258,59,202,44],[258,60,202,45],[258,61,202,46,"multipliedBy"],[258,73,202,58],[258,74,202,59],[258,83,202,68],[258,84,202,69],[258,85,202,70,"toNumber"],[258,93,202,78],[258,94,202,79],[258,95,202,80],[259,12,203,6],[259,16,203,10],[259,20,203,14],[259,21,203,15,"_wallet"],[259,28,203,22],[259,29,203,23,"weOwnAddress"],[259,41,203,35],[259,42,203,36,"address"],[259,50,203,43],[259,51,203,44],[259,53,203,46],[260,14,204,8,"changeAmount"],[260,26,204,20],[260,30,204,24,"value"],[260,36,204,29],[261,12,205,6],[261,13,205,7],[261,19,205,13],[262,14,206,8],[263,14,207,8,"targets"],[263,21,207,15],[263,22,207,16,"push"],[263,26,207,20],[263,27,207,21],[264,16,207,23,"value"],[264,21,207,28],[264,23,207,23,"value"],[264,29,207,28],[265,16,207,30,"address"],[265,23,207,37],[265,25,207,30,"address"],[266,14,207,38],[266,15,207,39],[266,16,207,40],[267,12,208,6],[268,10,209,4],[270,10,211,4],[271,10,212,4],[271,14,212,10,"unconfirmedUtxos"],[271,30,212,26],[271,33,212,29],[271,35,212,31],[272,10,213,4],[272,15,213,9],[272,19,213,15,"outp"],[272,25,213,19],[272,29,213,23],[272,33,213,27],[272,34,213,28,"_remoteTx"],[272,43,213,37],[272,44,213,38,"vout"],[272,48,213,42],[272,50,213,44],[273,12,214,6],[273,16,214,12,"address"],[273,25,214,19],[273,28,214,22,"outp"],[273,34,214,26],[273,35,214,27,"scriptPubKey"],[273,47,214,39],[273,48,214,40,"addresses"],[273,57,214,49],[273,58,214,50],[273,59,214,51],[273,60,214,52],[274,12,215,6],[274,16,215,12,"value"],[274,23,215,17],[274,26,215,20],[274,30,215,24,"BigNumber"],[274,48,215,33],[274,49,215,34,"outp"],[274,55,215,38],[274,56,215,39,"value"],[274,61,215,44],[274,62,215,45],[274,63,215,46,"multipliedBy"],[274,75,215,58],[274,76,215,59],[274,85,215,68],[274,86,215,69],[274,87,215,70,"toNumber"],[274,95,215,78],[274,96,215,79],[274,97,215,80],[275,12,216,6],[275,16,216,10],[275,20,216,14],[275,21,216,15,"_wallet"],[275,28,216,22],[275,29,216,23,"weOwnAddress"],[275,41,216,35],[275,42,216,36,"address"],[275,51,216,43],[275,52,216,44],[275,54,216,46],[276,14,217,8,"unconfirmedUtxos"],[276,30,217,24],[276,31,217,25,"push"],[276,35,217,29],[276,36,217,30],[277,16,218,10,"vout"],[277,20,218,14],[277,22,218,16,"outp"],[277,28,218,20],[277,29,218,21,"n"],[277,30,218,22],[278,16,219,10,"value"],[278,21,219,15],[278,23,219,10,"value"],[278,30,219,15],[279,16,220,10,"txid"],[279,20,220,14],[279,22,220,16],[279,26,220,20],[279,27,220,21,"_txid"],[279,32,220,26],[279,36,220,30],[279,40,220,34],[279,41,220,35,"_txDecoded"],[279,51,220,45],[279,52,220,46,"getId"],[279,57,220,51],[279,58,220,52],[279,59,220,53],[280,16,221,10,"address"],[280,23,221,17],[280,25,221,10,"address"],[281,14,222,8],[281,15,222,9],[281,16,222,10],[282,12,223,6],[283,10,224,4],[284,10,226,4],[284,17,226,11],[285,12,226,13,"fee"],[285,15,226,16],[285,17,226,13,"fee"],[285,20,226,16],[286,12,226,18,"feeRate"],[286,19,226,25],[286,21,226,18,"feeRate"],[286,28,226,25],[287,12,226,27,"targets"],[287,19,226,34],[287,21,226,27,"targets"],[287,28,226,34],[288,12,226,36,"changeAmount"],[288,24,226,48],[288,26,226,36,"changeAmount"],[288,38,226,48],[289,12,226,50,"utxos"],[289,17,226,55],[289,19,226,50,"utxos"],[289,24,226,55],[290,12,226,57,"unconfirmedUtxos"],[290,28,226,73],[290,30,226,57,"unconfirmedUtxos"],[291,10,226,74],[291,11,226,75],[292,8,227,2],[292,9,227,3],[293,8,227,3],[293,17,158,8,"getInfo"],[293,24,158,15,"getInfo"],[293,25,158,15],[294,10,158,15],[294,17,158,15,"_getInfo"],[294,25,158,15],[294,26,158,15,"apply"],[294,31,158,15],[294,38,158,15,"arguments"],[294,47,158,15],[295,8,158,15],[296,8,158,15],[296,15,158,8,"getInfo"],[296,22,158,15],[297,6,158,15],[298,6,229,2],[299,0,230,0],[300,0,231,0],[301,0,232,0],[302,0,233,0],[303,0,234,0],[304,0,235,0],[305,6,229,2],[306,4,229,2],[307,6,229,2,"key"],[307,9,229,2],[308,6,229,2,"value"],[308,11,229,2],[309,8,229,2],[309,12,229,2,"_thereAreUnknownInputsInTx"],[309,38,229,2],[309,45,229,2,"_asyncToGenerator2"],[309,63,229,2],[309,64,229,2,"default"],[309,71,229,2],[309,73,236,2],[309,86,236,36],[310,10,237,4],[310,14,237,8],[310,15,237,9],[310,19,237,13],[310,20,237,14,"_wallet"],[310,27,237,21],[310,29,237,23],[310,35,237,29],[310,39,237,33,"Error"],[310,44,237,38],[310,45,237,39],[310,78,237,72],[310,79,237,73],[311,10,238,4],[311,14,238,8],[311,15,238,9],[311,19,238,13],[311,20,238,14,"_txDecoded"],[311,30,238,24],[311,32,238,26],[311,38,238,32],[311,42,238,36],[311,43,238,37,"_fetchTxhexAndDecode"],[311,63,238,57],[311,64,238,58],[311,65,238,59],[312,10,239,4],[312,14,239,4,"assert"],[312,29,239,10],[312,31,239,11],[312,35,239,15],[312,36,239,16,"_txDecoded"],[312,46,239,26],[312,48,239,28],[312,79,239,59],[312,80,239,60],[313,10,241,4],[313,14,241,10,"spentUtxos"],[313,24,241,20],[313,27,241,23],[313,31,241,27],[313,32,241,28,"_wallet"],[313,39,241,35],[313,40,241,36,"getDerivedUtxoFromOurTransaction"],[313,72,241,68],[313,73,241,69],[313,77,241,73],[313,78,241,74],[314,10,242,4],[314,15,242,9],[314,19,242,15,"inp"],[314,22,242,18],[314,26,242,22],[314,30,242,26],[314,31,242,27,"_txDecoded"],[314,41,242,37],[314,42,242,38,"ins"],[314,45,242,41],[314,47,242,43],[315,12,243,6],[315,16,243,12,"txidInUtxo"],[315,26,243,22],[315,29,243,25,"Buffer"],[315,35,243,31],[315,36,243,32,"from"],[315,40,243,36],[315,41,243,37,"inp"],[315,44,243,40],[315,45,243,41,"hash"],[315,49,243,45],[315,50,243,46],[315,51,243,47,"reverse"],[315,58,243,54],[315,59,243,55],[315,60,243,56],[315,61,243,57,"toString"],[315,69,243,65],[315,70,243,66],[315,75,243,71],[315,76,243,72],[316,12,245,6],[316,16,245,10,"found"],[316,21,245,15],[316,24,245,18],[316,29,245,23],[317,12,246,6],[317,17,246,11],[317,21,246,17,"spentU"],[317,27,246,23],[317,31,246,27,"spentUtxos"],[317,41,246,37],[317,43,246,39],[318,14,247,8],[318,18,247,12,"spentU"],[318,24,247,18],[318,25,247,19,"txid"],[318,29,247,23],[318,34,247,28,"txidInUtxo"],[318,44,247,38],[318,48,247,42,"spentU"],[318,54,247,48],[318,55,247,49,"vout"],[318,59,247,53],[318,64,247,58,"inp"],[318,67,247,61],[318,68,247,62,"index"],[318,73,247,67],[318,75,247,69,"found"],[318,80,247,74],[318,83,247,77],[318,87,247,81],[319,12,248,6],[320,12,250,6],[320,16,250,10],[320,17,250,11,"found"],[320,22,250,16],[320,24,250,18],[321,14,251,8],[321,21,251,15],[321,25,251,19],[322,12,252,6],[323,10,253,4],[324,8,254,2],[324,9,254,3],[325,8,254,3],[325,17,236,8,"thereAreUnknownInputsInTx"],[325,42,236,33,"thereAreUnknownInputsInTx"],[325,43,236,33],[326,10,236,33],[326,17,236,33,"_thereAreUnknownInputsInTx"],[326,43,236,33],[326,44,236,33,"apply"],[326,49,236,33],[326,56,236,33,"arguments"],[326,65,236,33],[327,8,236,33],[328,8,236,33],[328,15,236,8,"thereAreUnknownInputsInTx"],[328,40,236,33],[329,6,236,33],[330,6,256,2],[331,0,257,0],[332,0,258,0],[333,0,259,0],[334,0,260,0],[335,0,261,0],[336,6,256,2],[337,4,256,2],[338,6,256,2,"key"],[338,9,256,2],[339,6,256,2,"value"],[339,11,256,2],[340,8,256,2],[340,12,256,2,"_canCancelTx"],[340,24,256,2],[340,31,256,2,"_asyncToGenerator2"],[340,49,256,2],[340,50,256,2,"default"],[340,57,256,2],[340,59,262,2],[340,72,262,22],[341,10,263,4],[341,14,263,8],[341,15,263,9],[341,19,263,13],[341,20,263,14,"_wallet"],[341,27,263,21],[341,29,263,23],[341,35,263,29],[341,39,263,33,"Error"],[341,44,263,38],[341,45,263,39],[341,78,263,72],[341,79,263,73],[342,10,264,4],[342,14,264,8],[342,15,264,9],[342,19,264,13],[342,20,264,14,"_txDecoded"],[342,30,264,24],[342,32,264,26],[342,38,264,32],[342,42,264,36],[342,43,264,37,"_fetchTxhexAndDecode"],[342,63,264,57],[342,64,264,58],[342,65,264,59],[343,10,265,4],[343,14,265,4,"assert"],[343,29,265,10],[343,31,265,11],[343,35,265,15],[343,36,265,16,"_txDecoded"],[343,46,265,26],[343,48,265,28],[343,79,265,59],[343,80,265,60],[344,10,267,4],[344,20,267,14],[344,24,267,18],[344,25,267,19,"thereAreUnknownInputsInTx"],[344,50,267,44],[344,51,267,45],[344,52,267,46],[344,54,267,48],[344,61,267,55],[344,66,267,60],[346,10,269,4],[347,10,270,4],[347,15,270,9],[347,19,270,15,"outp"],[347,23,270,19],[347,27,270,23],[347,31,270,27],[347,32,270,28,"_txDecoded"],[347,42,270,38],[347,43,270,39,"outs"],[347,47,270,43],[347,49,270,45],[348,12,271,6],[348,16,271,12,"outpScript"],[348,26,271,22],[348,29,271,25,"outp"],[348,33,271,29],[348,34,271,30,"script"],[348,40,271,36],[349,12,272,6],[349,16,273,8],[349,17,273,9],[349,21,273,13],[349,22,273,14,"_wallet"],[349,29,273,21],[349,30,273,22,"weOwnAddress"],[349,42,273,34],[349,43,274,10,"String"],[349,49,274,16],[349,50,274,17,"SegwitBech32Wallet"],[349,80,274,17],[349,81,274,17,"SegwitBech32Wallet"],[349,133,274,35],[349,134,274,36,"scriptPubKeyToAddress"],[349,155,274,57],[349,156,274,58],[349,160,274,58,"isUint8Array"],[349,191,274,58],[349,192,274,58,"isUint8Array"],[349,241,274,70],[349,243,274,71,"outpScript"],[349,253,274,81],[349,254,274,82],[349,257,274,85],[349,261,274,85,"uint8ArrayToHex"],[349,292,274,85],[349,293,274,85,"uint8ArrayToHex"],[349,345,274,100],[349,347,274,101,"outpScript"],[349,357,274,111],[349,358,274,112],[349,361,274,115,"outpScript"],[349,371,274,125],[349,372,274,126],[349,373,275,8],[349,374,275,9],[349,376,277,8],[349,383,277,15],[349,387,277,19],[350,10,278,4],[351,10,280,4],[351,17,280,11],[351,22,280,16],[352,8,281,2],[352,9,281,3],[353,8,281,3],[353,17,262,8,"canCancelTx"],[353,28,262,19,"canCancelTx"],[353,29,262,19],[354,10,262,19],[354,17,262,19,"_canCancelTx"],[354,29,262,19],[354,30,262,19,"apply"],[354,35,262,19],[354,42,262,19,"arguments"],[354,51,262,19],[355,8,262,19],[356,8,262,19],[356,15,262,8,"canCancelTx"],[356,26,262,19],[357,6,262,19],[358,4,262,19],[359,6,262,19,"key"],[359,9,262,19],[360,6,262,19,"value"],[360,11,262,19],[361,8,262,19],[361,12,262,19,"_canBumpTx"],[361,22,262,19],[361,29,262,19,"_asyncToGenerator2"],[361,47,262,19],[361,48,262,19,"default"],[361,55,262,19],[361,57,283,2],[361,70,283,20],[362,10,284,4],[362,14,284,8],[362,15,284,9],[362,19,284,13],[362,20,284,14,"_wallet"],[362,27,284,21],[362,29,284,23],[362,35,284,29],[362,39,284,33,"Error"],[362,44,284,38],[362,45,284,39],[362,78,284,72],[362,79,284,73],[363,10,285,4],[363,14,285,8],[363,15,285,9],[363,19,285,13],[363,20,285,14,"_txDecoded"],[363,30,285,24],[363,32,285,26],[363,38,285,32],[363,42,285,36],[363,43,285,37,"_fetchTxhexAndDecode"],[363,63,285,57],[363,64,285,58],[363,65,285,59],[364,10,287,4],[364,20,287,14],[364,24,287,18],[364,25,287,19,"thereAreUnknownInputsInTx"],[364,50,287,44],[364,51,287,45],[364,52,287,46],[364,54,287,48],[364,61,287,55],[364,66,287,60],[365,10,289,4],[365,17,289,11],[365,21,289,15],[366,8,290,2],[366,9,290,3],[367,8,290,3],[367,17,283,8,"canBumpTx"],[367,26,283,17,"canBumpTx"],[367,27,283,17],[368,10,283,17],[368,17,283,17,"_canBumpTx"],[368,27,283,17],[368,28,283,17,"apply"],[368,33,283,17],[368,40,283,17,"arguments"],[368,49,283,17],[369,8,283,17],[370,8,283,17],[370,15,283,8,"canBumpTx"],[370,24,283,17],[371,6,283,17],[372,6,292,2],[373,0,293,0],[374,0,294,0],[375,0,295,0],[376,0,296,0],[377,0,297,0],[378,0,298,0],[379,0,299,0],[380,4,292,2],[381,6,292,2,"key"],[381,9,292,2],[382,6,292,2,"value"],[382,11,292,2],[383,8,292,2],[383,12,292,2,"_createRBFcancelTx"],[383,30,292,2],[383,37,292,2,"_asyncToGenerator2"],[383,55,292,2],[383,56,292,2,"default"],[383,63,292,2],[383,65,300,2],[383,76,300,26,"newFeerate"],[383,86,300,41],[383,88,300,43],[384,10,301,4],[384,14,301,8],[384,15,301,9],[384,19,301,13],[384,20,301,14,"_wallet"],[384,27,301,21],[384,29,301,23],[384,35,301,29],[384,39,301,33,"Error"],[384,44,301,38],[384,45,301,39],[384,78,301,72],[384,79,301,73],[385,10,302,4],[385,14,302,8],[385,15,302,9],[385,19,302,13],[385,20,302,14,"_remoteTx"],[385,29,302,23],[385,31,302,25],[385,37,302,31],[385,41,302,35],[385,42,302,36,"_fetchRemoteTx"],[385,56,302,50],[385,57,302,51],[385,58,302,52],[386,10,304,4],[386,14,304,4,"_yield$this$getInfo"],[386,33,304,4],[386,42,304,37],[386,46,304,41],[386,47,304,42,"getInfo"],[386,54,304,49],[386,55,304,50],[386,56,304,51],[387,12,304,12,"feeRate"],[387,19,304,19],[387,22,304,19,"_yield$this$getInfo"],[387,41,304,19],[387,42,304,12,"feeRate"],[387,49,304,19],[388,12,304,21,"utxos"],[388,17,304,26],[388,20,304,26,"_yield$this$getInfo"],[388,39,304,26],[388,40,304,21,"utxos"],[388,45,304,26],[389,10,306,4],[389,14,306,8,"newFeerate"],[389,24,306,18],[389,28,306,22,"feeRate"],[389,35,306,29],[389,37,306,31],[389,43,306,37],[389,47,306,41,"Error"],[389,52,306,46],[389,53,306,47],[389,100,306,94],[389,101,306,95],[390,10,307,4],[390,14,307,10,"myAddress"],[390,23,307,19],[390,32,307,28],[390,36,307,32],[390,37,307,33,"_wallet"],[390,44,307,40],[390,45,307,41,"getChangeAddressAsync"],[390,66,307,62],[390,67,307,63],[390,68,307,64],[391,10,309,4],[391,17,309,11],[391,21,309,15],[391,22,309,16,"_wallet"],[391,29,309,23],[391,30,309,24,"createTransaction"],[391,47,309,41],[391,48,310,6,"utxos"],[391,53,310,11],[391,55,311,6],[391,56,311,7],[392,12,311,9,"address"],[392,19,311,16],[392,21,311,18,"myAddress"],[393,10,311,28],[393,11,311,29],[393,12,311,30],[393,14,312,6,"newFeerate"],[393,24,312,16],[393,26,313,6],[393,59,313,40,"myAddress"],[393,68,313,49],[393,70,314,6],[393,77,314,13],[393,81,314,17],[393,82,314,18,"getMaxUsedSequence"],[393,100,314,36],[393,101,314,37],[393,102,314,38],[393,106,314,42],[393,107,315,4],[393,108,315,5],[394,8,316,2],[394,9,316,3],[395,8,316,3],[395,17,300,8,"createRBFcancelTx"],[395,34,300,25,"createRBFcancelTx"],[395,35,300,25,"_x"],[395,37,300,25],[396,10,300,25],[396,17,300,25,"_createRBFcancelTx"],[396,35,300,25],[396,36,300,25,"apply"],[396,41,300,25],[396,48,300,25,"arguments"],[396,57,300,25],[397,8,300,25],[398,8,300,25],[398,15,300,8,"createRBFcancelTx"],[398,32,300,25],[399,6,300,25],[400,6,318,2],[401,0,319,0],[402,0,320,0],[403,0,321,0],[404,0,322,0],[405,0,323,0],[406,0,324,0],[407,6,318,2],[408,4,318,2],[409,6,318,2,"key"],[409,9,318,2],[410,6,318,2,"value"],[410,11,318,2],[411,8,318,2],[411,12,318,2,"_createRBFbumpFee"],[411,29,318,2],[411,36,318,2,"_asyncToGenerator2"],[411,54,318,2],[411,55,318,2,"default"],[411,62,318,2],[411,64,325,2],[411,75,325,25,"newFeerate"],[411,85,325,43],[411,87,325,45],[412,10,326,4],[412,14,326,8],[412,15,326,9],[412,19,326,13],[412,20,326,14,"_wallet"],[412,27,326,21],[412,29,326,23],[412,35,326,29],[412,39,326,33,"Error"],[412,44,326,38],[412,45,326,39],[412,78,326,72],[412,79,326,73],[413,10,327,4],[413,14,327,8],[413,15,327,9],[413,19,327,13],[413,20,327,14,"_remoteTx"],[413,29,327,23],[413,31,327,25],[413,37,327,31],[413,41,327,35],[413,42,327,36,"_fetchRemoteTx"],[413,56,327,50],[413,57,327,51],[413,58,327,52],[414,10,329,4],[414,14,329,4,"_yield$this$getInfo2"],[414,34,329,4],[414,43,329,60],[414,47,329,64],[414,48,329,65,"getInfo"],[414,55,329,72],[414,56,329,73],[414,57,329,74],[415,12,329,12,"feeRate"],[415,19,329,19],[415,22,329,19,"_yield$this$getInfo2"],[415,42,329,19],[415,43,329,12,"feeRate"],[415,50,329,19],[416,12,329,21,"targets"],[416,19,329,28],[416,22,329,28,"_yield$this$getInfo2"],[416,42,329,28],[416,43,329,21,"targets"],[416,50,329,28],[417,12,329,30,"changeAmount"],[417,24,329,42],[417,27,329,42,"_yield$this$getInfo2"],[417,47,329,42],[417,48,329,30,"changeAmount"],[417,60,329,42],[418,12,329,44,"utxos"],[418,17,329,49],[418,20,329,49,"_yield$this$getInfo2"],[418,40,329,49],[418,41,329,44,"utxos"],[418,46,329,49],[419,10,331,4],[419,14,331,8,"newFeerate"],[419,24,331,18],[419,28,331,22,"feeRate"],[419,35,331,29],[419,37,331,31],[419,43,331,37],[419,47,331,41,"Error"],[419,52,331,46],[419,53,331,47],[419,100,331,94],[419,101,331,95],[420,10,332,4],[420,14,332,10,"myAddress"],[420,23,332,19],[420,32,332,28],[420,36,332,32],[420,37,332,33,"_wallet"],[420,44,332,40],[420,45,332,41,"getChangeAddressAsync"],[420,66,332,62],[420,67,332,63],[420,68,332,64],[421,10,334,4],[421,14,334,8,"changeAmount"],[421,26,334,20],[421,31,334,25],[421,32,334,26],[421,34,334,28],[421,41,334,35,"targets"],[421,48,334,42],[421,49,334,43],[421,50,334,44],[421,51,334,45],[421,52,334,46,"value"],[421,57,334,51],[422,10,335,4],[423,10,336,4],[425,10,338,4],[425,14,338,8,"targets"],[425,21,338,15],[425,22,338,16,"length"],[425,28,338,22],[425,33,338,27],[425,34,338,28],[425,36,338,30],[426,12,339,6],[427,12,340,6],[428,12,341,6,"targets"],[428,19,341,13],[428,20,341,14,"push"],[428,24,341,18],[428,25,341,19],[429,14,341,21,"address"],[429,21,341,28],[429,23,341,30],[429,27,341,34],[429,28,341,35,"_wallet"],[429,35,341,42],[429,36,341,43,"_getInternalAddressByIndex"],[429,62,341,69],[429,63,341,70],[429,67,341,74],[429,68,341,75,"_wallet"],[429,75,341,82],[429,76,341,83,"next_free_change_address_index"],[429,106,341,113],[430,12,341,115],[430,13,341,116],[430,14,341,117],[431,12,342,6],[432,10,343,4],[433,10,345,4],[433,17,345,11],[433,21,345,15],[433,22,345,16,"_wallet"],[433,29,345,23],[433,30,345,24,"createTransaction"],[433,47,345,41],[433,48,345,42,"utxos"],[433,53,345,47],[433,55,345,49,"targets"],[433,62,345,56],[433,64,345,58,"newFeerate"],[433,74,345,68],[433,76,345,70,"myAddress"],[433,85,345,79],[433,87,345,81],[433,94,345,88],[433,98,345,92],[433,99,345,93,"getMaxUsedSequence"],[433,117,345,111],[433,118,345,112],[433,119,345,113],[433,123,345,117],[433,124,345,118],[433,125,345,119],[434,8,346,2],[434,9,346,3],[435,8,346,3],[435,17,325,8,"createRBFbumpFee"],[435,33,325,24,"createRBFbumpFee"],[435,34,325,24,"_x2"],[435,37,325,24],[436,10,325,24],[436,17,325,24,"_createRBFbumpFee"],[436,34,325,24],[436,35,325,24,"apply"],[436,40,325,24],[436,47,325,24,"arguments"],[436,56,325,24],[437,8,325,24],[438,8,325,24],[438,15,325,8,"createRBFbumpFee"],[438,31,325,24],[439,6,325,24],[440,6,348,2],[441,0,349,0],[442,0,350,0],[443,0,351,0],[444,0,352,0],[445,0,353,0],[446,0,354,0],[447,6,348,2],[448,4,348,2],[449,6,348,2,"key"],[449,9,348,2],[450,6,348,2,"value"],[450,11,348,2],[451,8,348,2],[451,12,348,2,"_createCPFPbumpFee"],[451,30,348,2],[451,37,348,2,"_asyncToGenerator2"],[451,55,348,2],[451,56,348,2,"default"],[451,63,348,2],[451,65,355,2],[451,76,355,26,"newFeerate"],[451,86,355,44],[451,88,355,46],[452,10,356,4],[452,14,356,8],[452,15,356,9],[452,19,356,13],[452,20,356,14,"_wallet"],[452,27,356,21],[452,29,356,23],[452,35,356,29],[452,39,356,33,"Error"],[452,44,356,38],[452,45,356,39],[452,78,356,72],[452,79,356,73],[453,10,357,4],[453,14,357,8],[453,15,357,9],[453,19,357,13],[453,20,357,14,"_remoteTx"],[453,29,357,23],[453,31,357,25],[453,37,357,31],[453,41,357,35],[453,42,357,36,"_fetchRemoteTx"],[453,56,357,50],[453,57,357,51],[453,58,357,52],[454,10,359,4],[454,14,359,4,"_yield$this$getInfo3"],[454,34,359,4],[454,43,359,61],[454,47,359,65],[454,48,359,66,"getInfo"],[454,55,359,73],[454,56,359,74],[454,57,359,75],[455,12,359,12,"feeRate"],[455,19,359,19],[455,22,359,19,"_yield$this$getInfo3"],[455,42,359,19],[455,43,359,12,"feeRate"],[455,50,359,19],[456,12,359,26,"oldFee"],[456,18,359,32],[456,21,359,32,"_yield$this$getInfo3"],[456,41,359,32],[456,42,359,21,"fee"],[456,45,359,24],[457,12,359,34,"unconfirmedUtxos"],[457,28,359,50],[457,31,359,50,"_yield$this$getInfo3"],[457,51,359,50],[457,52,359,34,"unconfirmedUtxos"],[457,68,359,50],[458,10,361,4],[458,14,361,8,"newFeerate"],[458,24,361,18],[458,28,361,22,"feeRate"],[458,35,361,29],[458,37,361,31],[458,43,361,37],[458,47,361,41,"Error"],[458,52,361,46],[458,53,361,47],[458,100,361,94],[458,101,361,95],[459,10,362,4],[459,14,362,10,"myAddress"],[459,23,362,19],[459,32,362,28],[459,36,362,32],[459,37,362,33,"_wallet"],[459,44,362,40],[459,45,362,41,"getChangeAddressAsync"],[459,66,362,62],[459,67,362,63],[459,68,362,64],[461,10,364,4],[462,10,365,4],[463,10,366,4],[463,14,366,10,"targetFeeRate"],[463,27,366,23],[463,30,366,26],[463,31,366,27],[463,34,366,30,"newFeerate"],[463,44,366,40],[463,47,366,43,"feeRate"],[463,54,366,50],[464,10,368,4],[464,14,368,8,"add"],[464,17,368,11],[464,20,368,14],[464,21,368,15],[465,10,369,4],[465,14,369,8,"tx"],[465,16,369,43],[465,18,369,45,"inputs"],[465,24,369,76],[465,26,369,78,"outputs"],[465,33,369,105],[465,35,369,107,"fee"],[465,38,369,118],[466,10,370,4],[466,17,370,11,"add"],[466,20,370,14],[466,24,370,18],[466,27,370,21],[466,29,370,23],[467,12,371,6],[467,16,371,12,"createdTx"],[467,25,371,21],[467,28,371,24],[467,32,371,28],[467,33,371,29,"_wallet"],[467,40,371,36],[467,41,371,37,"createTransaction"],[467,58,371,54],[467,59,372,8,"unconfirmedUtxos"],[467,75,372,24],[467,77,373,8],[467,78,373,9],[468,14,373,11,"address"],[468,21,373,18],[468,23,373,20,"myAddress"],[469,12,373,30],[469,13,373,31],[469,14,373,32],[469,16,374,8,"targetFeeRate"],[469,29,374,21],[469,32,374,24,"add"],[469,35,374,27],[469,37,375,8,"myAddress"],[469,46,375,17],[469,48,376,8,"HDSegwitBech32Wallet"],[469,78,376,8],[469,79,376,8,"HDSegwitBech32Wallet"],[469,136,376,28],[469,137,376,29,"defaultRBFSequence"],[469,155,377,6],[469,156,377,7],[470,12,378,6,"tx"],[470,14,378,8],[470,17,378,11,"createdTx"],[470,26,378,20],[470,27,378,21,"tx"],[470,29,378,23],[471,12,379,6,"inputs"],[471,18,379,12],[471,21,379,15,"createdTx"],[471,30,379,24],[471,31,379,25,"inputs"],[471,37,379,31],[472,12,380,6,"outputs"],[472,19,380,13],[472,22,380,16,"createdTx"],[472,31,380,25],[472,32,380,26,"outputs"],[472,39,380,33],[473,12,381,6,"fee"],[473,15,381,9],[473,18,381,12,"createdTx"],[473,27,381,21],[473,28,381,22,"fee"],[473,31,381,25],[474,12,382,6],[474,16,382,6,"assert"],[474,31,382,12],[474,33,382,13,"tx"],[474,35,382,15],[474,37,382,17],[474,77,382,57],[474,78,382,58],[475,12,383,6],[475,16,383,12,"combinedFeeRate"],[475,31,383,27],[475,34,383,30],[475,35,383,31,"oldFee"],[475,41,383,37],[475,44,383,40,"fee"],[475,47,383,43],[475,52,383,48],[475,56,383,52],[475,57,383,53,"_txDecoded"],[475,67,383,63],[475,68,383,65,"virtualSize"],[475,79,383,76],[475,80,383,77],[475,81,383,78],[475,84,383,81,"tx"],[475,86,383,83],[475,87,383,84,"virtualSize"],[475,98,383,95],[475,99,383,96],[475,100,383,97],[475,101,383,98],[475,102,383,99],[475,103,383,100],[476,12,384,6],[476,16,384,10,"Math"],[476,20,384,14],[476,21,384,15,"round"],[476,26,384,20],[476,27,384,21,"combinedFeeRate"],[476,42,384,36],[476,43,384,37],[476,46,384,40,"newFeerate"],[476,56,384,50],[476,58,384,52],[477,14,385,8,"add"],[477,17,385,11],[477,21,385,15],[477,22,385,16],[478,14,386,8],[478,18,386,12],[478,19,386,13,"add"],[478,22,386,16],[478,24,386,18,"add"],[478,27,386,21],[478,30,386,24],[478,31,386,25],[479,12,387,6],[479,13,387,7],[479,19,387,13],[480,14,388,8],[481,14,389,8],[482,12,390,6],[483,10,391,4],[485,10,393,4],[486,10,394,4],[486,17,394,11],[487,12,394,13,"tx"],[487,14,394,15],[487,16,394,13,"tx"],[487,18,394,15],[488,12,394,17,"inputs"],[488,18,394,23],[488,20,394,17,"inputs"],[488,26,394,23],[489,12,394,25,"outputs"],[489,19,394,32],[489,21,394,25,"outputs"],[489,28,394,32],[490,12,394,34,"fee"],[490,15,394,37],[490,17,394,34,"fee"],[491,10,394,38],[491,11,394,39],[492,8,395,2],[492,9,395,3],[493,8,395,3],[493,17,355,8,"createCPFPbumpFee"],[493,34,355,25,"createCPFPbumpFee"],[493,35,355,25,"_x3"],[493,38,355,25],[494,10,355,25],[494,17,355,25,"_createCPFPbumpFee"],[494,35,355,25],[494,36,355,25,"apply"],[494,41,355,25],[494,48,355,25,"arguments"],[494,57,355,25],[495,8,355,25],[496,8,355,25],[496,15,355,8,"createCPFPbumpFee"],[496,32,355,25],[497,6,355,25],[498,4,355,25],[499,2,355,25],[500,0,355,25],[500,3]],"functionMap":{"names":["<global>","HDSegwitBech32Transaction","HDSegwitBech32Transaction#constructor","HDSegwitBech32Transaction#_fetchTxhexAndDecode","HDSegwitBech32Transaction#getMaxUsedSequence","HDSegwitBech32Transaction#isSequenceReplaceable","HDSegwitBech32Transaction#_fetchRemoteTx","HDSegwitBech32Transaction#getRemoteConfirmationsNum","HDSegwitBech32Transaction#isOurTransaction","HDSegwitBech32Transaction#isToUsTransaction","HDSegwitBech32Transaction#getInfo","HDSegwitBech32Transaction#thereAreUnknownInputsInTx","HDSegwitBech32Transaction#canCancelTx","HDSegwitBech32Transaction#canBumpTx","HDSegwitBech32Transaction#createRBFcancelTx","HDSegwitBech32Transaction#createRBFbumpFee","HDSegwitBech32Transaction#createCPFPbumpFee"],"mappings":"AAA;OCe;ECY;GDgB;EEQ;GFM;EGQ;GHU;EIO;GJE;EKU;GLG;EMO;GNG;EOS;GPU;EQS;GRS;ESa;GTqE;EUS;GVkB;EWQ;GXmB;EYE;GZO;EaU;GbgB;EcS;GdqB;EeS;GfwC;CDC"}},"type":"js/module"}]}