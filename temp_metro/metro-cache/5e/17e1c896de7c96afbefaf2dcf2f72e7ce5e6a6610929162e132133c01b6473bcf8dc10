{"dependencies":[{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":55,"index":55}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g="}},{"name":"./enums","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":56},"end":{"line":10,"column":17,"index":206}},{"start":{"line":2,"column":0,"index":56},"end":{"line":10,"column":17,"index":206}},{"start":{"line":2,"column":0,"index":56},"end":{"line":10,"column":17,"index":206}},{"start":{"line":2,"column":0,"index":56},"end":{"line":10,"column":17,"index":206}},{"start":{"line":2,"column":0,"index":56},"end":{"line":10,"column":17,"index":206}},{"start":{"line":2,"column":0,"index":56},"end":{"line":10,"column":17,"index":206}},{"start":{"line":2,"column":0,"index":56},"end":{"line":10,"column":17,"index":206}},{"start":{"line":2,"column":0,"index":56},"end":{"line":10,"column":17,"index":206}},{"start":{"line":2,"column":0,"index":56},"end":{"line":10,"column":17,"index":206}},{"start":{"line":2,"column":0,"index":56},"end":{"line":10,"column":17,"index":206}}],"key":"/61ZvVYnH75HFkA56ZMl9uzhQPQ="}},{"name":"./types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":366,"column":0,"index":10787},"end":{"line":366,"column":24,"index":10811}},{"start":{"line":366,"column":0,"index":10787},"end":{"line":366,"column":24,"index":10811}},{"start":{"line":366,"column":0,"index":10787},"end":{"line":366,"column":24,"index":10811}}],"key":"iV91Bk2eI9buML90FP6cK2SM5h0="}},{"name":"./normalizeOptions","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":21,"column":0,"index":386},"end":{"line":25,"column":28,"index":494}},{"start":{"line":21,"column":0,"index":386},"end":{"line":25,"column":28,"index":494}},{"start":{"line":21,"column":0,"index":386},"end":{"line":25,"column":28,"index":494}},{"start":{"line":21,"column":0,"index":386},"end":{"line":25,"column":28,"index":494}},{"start":{"line":21,"column":0,"index":386},"end":{"line":25,"column":28,"index":494}},{"start":{"line":21,"column":0,"index":386},"end":{"line":25,"column":28,"index":494}},{"start":{"line":21,"column":0,"index":386},"end":{"line":25,"column":28,"index":494}}],"key":"u1rRzRyYJtn4pkH2CzAb0ivHwHY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var _exportNames = {\n    setGenericPassword: true,\n    getGenericPassword: true,\n    hasGenericPassword: true,\n    resetGenericPassword: true,\n    getAllGenericPasswordServices: true,\n    hasInternetCredentials: true,\n    setInternetCredentials: true,\n    getInternetCredentials: true,\n    resetInternetCredentials: true,\n    getSupportedBiometryType: true,\n    requestSharedWebCredentials: true,\n    setSharedWebCredentials: true,\n    canImplyAuthentication: true,\n    getSecurityLevel: true\n  };\n  exports.canImplyAuthentication = canImplyAuthentication;\n  exports.default = void 0;\n  exports.getAllGenericPasswordServices = getAllGenericPasswordServices;\n  exports.getGenericPassword = getGenericPassword;\n  exports.getInternetCredentials = getInternetCredentials;\n  exports.getSecurityLevel = getSecurityLevel;\n  exports.getSupportedBiometryType = getSupportedBiometryType;\n  exports.hasGenericPassword = hasGenericPassword;\n  exports.hasInternetCredentials = hasInternetCredentials;\n  exports.requestSharedWebCredentials = requestSharedWebCredentials;\n  exports.resetGenericPassword = resetGenericPassword;\n  exports.resetInternetCredentials = resetInternetCredentials;\n  exports.setGenericPassword = setGenericPassword;\n  exports.setInternetCredentials = setInternetCredentials;\n  exports.setSharedWebCredentials = setSharedWebCredentials;\n  var _reactNative = _$$_REQUIRE(_dependencyMap[0], \"react-native\");\n  Object.keys(_$$_REQUIRE(_dependencyMap[1], \"./enums\")).forEach(function (key) {\n    if (key === \"default\" || key === \"__esModule\") return;\n    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n    if (key in exports && exports[key] === _$$_REQUIRE(_dependencyMap[1], \"./enums\")[key]) return;\n    Object.defineProperty(exports, key, {\n      enumerable: true,\n      get: function get() {\n        return _$$_REQUIRE(_dependencyMap[1], \"./enums\")[key];\n      }\n    });\n  });\n  Object.keys(_$$_REQUIRE(_dependencyMap[2], \"./types\")).forEach(function (key) {\n    if (key === \"default\" || key === \"__esModule\") return;\n    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n    if (key in exports && exports[key] === _$$_REQUIRE(_dependencyMap[2], \"./types\")[key]) return;\n    Object.defineProperty(exports, key, {\n      enumerable: true,\n      get: function get() {\n        return _$$_REQUIRE(_dependencyMap[2], \"./types\")[key];\n      }\n    });\n  });\n  var RNKeychainManager = _reactNative.NativeModules.RNKeychainManager;\n\n  /**\n   * Saves the `username` and `password` combination for the given service.\n   *\n   * @param {string} username - The username or e-mail to be saved.\n   * @param {string} password - The password to be saved.\n   * @param {SetOptions | string} [serviceOrOptions] - A keychain options object or a service name string. Passing a service name as a string is deprecated.\n   *\n   * @returns {Promise<false | Result>} Resolves to an object containing `service` and `storage` when successful, or `false` on failure.\n   *\n   * @example\n   * ```typescript\n   * await Keychain.setGenericPassword('username', 'password');\n   * ```\n   */\n  function setGenericPassword(username, password, serviceOrOptions) {\n    var options = (0, _$$_REQUIRE(_dependencyMap[3], \"./normalizeOptions\").normalizeServiceOption)(serviceOrOptions);\n    return RNKeychainManager.setGenericPasswordForOptions(options, username, password);\n  }\n\n  /**\n   * Fetches the `username` and `password` combination for the given service.\n   *\n   * @param {GetOptions | string} [serviceOrOptions] - A keychain options object or a service name string.\n   *\n   * @returns {Promise<false | UserCredentials>} Resolves to an object containing `service`, `username`, `password`, and `storage` when successful, or `false` on failure.\n   *\n   * @example\n   * ```typescript\n   * const credentials = await Keychain.getGenericPassword();\n   * if (credentials) {\n   *   console.log('Credentials successfully loaded for user ' + credentials.username);\n   * } else {\n   *   console.log('No credentials stored');\n   * }\n   * ```\n   */\n  function getGenericPassword(serviceOrOptions) {\n    var options = (0, _$$_REQUIRE(_dependencyMap[3], \"./normalizeOptions\").normalizeOptions)(serviceOrOptions);\n    return RNKeychainManager.getGenericPasswordForOptions(options);\n  }\n\n  /**\n   * Checks if generic password exists for the given service.\n   *\n   * @param {BaseOptions | string} [serviceOrOptions] - A keychain options object or a service name string.\n   *\n   * @returns {Promise<boolean>} Resolves to `true` if a password exists, otherwise `false`.\n   *\n   * @example\n   * ```typescript\n   * const hasPassword = await Keychain.hasGenericPassword();\n   * console.log('Password exists:', hasPassword);\n   * ```\n   */\n  function hasGenericPassword(serviceOrOptions) {\n    var options = (0, _$$_REQUIRE(_dependencyMap[3], \"./normalizeOptions\").normalizeServiceOption)(serviceOrOptions);\n    return RNKeychainManager.hasGenericPasswordForOptions(options);\n  }\n\n  /**\n   * Deletes all generic password keychain entries for the given service.\n   *\n   * @param {BaseOptions | string} [serviceOrOptions] - A keychain options object or a service name string.\n   *\n   * @returns {Promise<boolean>} Resolves to `true` when successful, otherwise `false`.\n   *\n   * @example\n   * ```typescript\n   * const success = await Keychain.resetGenericPassword();\n   * console.log('Password reset successful:', success);\n   * ```\n   */\n  function resetGenericPassword(serviceOrOptions) {\n    var options = (0, _$$_REQUIRE(_dependencyMap[3], \"./normalizeOptions\").normalizeServiceOption)(serviceOrOptions);\n    return RNKeychainManager.resetGenericPasswordForOptions(options);\n  }\n\n  /**\n   * Gets all service keys used in generic password keychain entries.\n   *\n   * @returns {Promise<string[]>} Resolves to an array of strings representing service keys.\n   *\n   * @example\n   * ```typescript\n   * const services = await Keychain.getAllGenericPasswordServices();\n   * console.log('Services:', services);\n   * ```\n   */\n  function getAllGenericPasswordServices() {\n    return RNKeychainManager.getAllGenericPasswordServices();\n  }\n\n  /**\n   * Checks if internet credentials exist for the given server.\n   *\n   * @param {string} serverOrOptions - A keychain options object or a server name string.\n   *\n   * @returns {Promise<boolean>} Resolves to `true` if internet credentials exist, otherwise `false`.\n   *\n   * @example\n   * ```typescript\n   * const hasCredentials = await Keychain.hasInternetCredentials('https://example.com');\n   * console.log('Internet credentials exist:', hasCredentials);\n   * ```\n   */\n  function hasInternetCredentials(serverOrOptions) {\n    var options = (0, _$$_REQUIRE(_dependencyMap[3], \"./normalizeOptions\").normalizeServerOption)(serverOrOptions);\n    return RNKeychainManager.hasInternetCredentialsForOptions(options);\n  }\n\n  /**\n   * Saves the internet credentials for the given server.\n   *\n   * @param {string} server - The server URL.\n   * @param {string} username - The username or e-mail to be saved.\n   * @param {string} password - The password to be saved.\n   * @param {SetOptions} [options] - A keychain options object.\n   *\n   * @returns {Promise<false | Result>} Resolves to an object containing `service` and `storage` when successful, or `false` on failure.\n   *\n   * @example\n   * ```typescript\n   * await Keychain.setInternetCredentials('https://example.com', 'username', 'password');\n   * ```\n   */\n  function setInternetCredentials(server, username, password, options) {\n    return RNKeychainManager.setInternetCredentialsForServer(server, username, password, options);\n  }\n\n  /**\n   * Fetches the internet credentials for the given server.\n   *\n   * @param {string} server - The server URL.\n   * @param {GetOptions} [options] - A keychain options object.\n   *\n   * @returns {Promise<false | UserCredentials>} Resolves to an object containing `server`, `username`, `password`, and `storage` when successful, or `false` on failure.\n   *\n   * @example\n   * ```typescript\n   * const credentials = await Keychain.getInternetCredentials('https://example.com');\n   * if (credentials) {\n   *   console.log('Credentials loaded for user ' + credentials.username);\n   * } else {\n   *   console.log('No credentials stored for server');\n   * }\n   * ```\n   */\n  function getInternetCredentials(server, options) {\n    return RNKeychainManager.getInternetCredentialsForServer(server, (0, _$$_REQUIRE(_dependencyMap[3], \"./normalizeOptions\").normalizeOptions)(options));\n  }\n\n  /**\n   * Deletes all internet password keychain entries for the given server.\n   *\n   * @param {BaseOptions | string} [serviceOrOptions] - A keychain options object or a service name string.\n   *\n   * @returns {Promise<void>} Resolves when the operation is completed.\n   *\n   * @example\n   * ```typescript\n   * await Keychain.resetInternetCredentials('https://example.com');\n   * console.log('Credentials reset for server');\n   * ```\n   */\n  function resetInternetCredentials(serverOrOptions) {\n    var options = (0, _$$_REQUIRE(_dependencyMap[3], \"./normalizeOptions\").normalizeServerOption)(serverOrOptions);\n    return RNKeychainManager.resetInternetCredentialsForOptions(options);\n  }\n\n  /**\n   * Gets the type of biometric authentication supported by the device.\n   *\n   * @returns {Promise<null | BIOMETRY_TYPE>} Resolves to a `BIOMETRY_TYPE` when supported, otherwise `null`.\n   *\n   * @example\n   * ```typescript\n   * const biometryType = await Keychain.getSupportedBiometryType();\n   * console.log('Supported Biometry Type:', biometryType);\n   * ```\n   */\n  function getSupportedBiometryType() {\n    if (!RNKeychainManager.getSupportedBiometryType) {\n      return Promise.resolve(null);\n    }\n    return RNKeychainManager.getSupportedBiometryType();\n  }\n\n  /**\n   * Request shared web credentials.\n   *\n   * @platform iOS\n   *\n   * @returns {Promise<false | SharedWebCredentials>} Resolves to an object containing `server`, `username`, and `password` if approved, or `false` if denied.\n   *\n   * @example\n   * ```typescript\n   * const credentials = await Keychain.requestSharedWebCredentials();\n   * if (credentials) {\n   *   console.log('Shared credentials retrieved:', credentials);\n   * } else {\n   *   console.log('No shared credentials available');\n   * }\n   * ```\n   */\n  function requestSharedWebCredentials() {\n    if (_reactNative.Platform.OS !== 'ios') {\n      return Promise.reject(new Error(`requestSharedWebCredentials() is not supported on ${_reactNative.Platform.OS} yet`));\n    }\n    return RNKeychainManager.requestSharedWebCredentials();\n  }\n\n  /**\n   * Sets shared web credentials.\n   *\n   * @platform iOS\n   *\n   * @param {string} server - The server URL.\n   * @param {string} username - The username or e-mail to be saved.\n   * @param {string} [password] - The password to be saved.\n   *\n   * @returns {Promise<void>} Resolves when the operation is completed.\n   *\n   * @example\n   * ```typescript\n   * await Keychain.setSharedWebCredentials('https://example.com', 'username', 'password');\n   * console.log('Shared web credentials set');\n   * ```\n   */\n  function setSharedWebCredentials(server, username, password) {\n    if (_reactNative.Platform.OS !== 'ios') {\n      return Promise.reject(new Error(`setSharedWebCredentials() is not supported on ${_reactNative.Platform.OS} yet`));\n    }\n    return RNKeychainManager.setSharedWebCredentialsForServer(server, username, password);\n  }\n\n  /**\n   * Checks if the current device supports the specified authentication policy.\n   *\n   * @platform iOS\n   *\n   * @param {AuthenticationTypeOption} [options] - A keychain options object.\n   *\n   * @returns {Promise<boolean>} Resolves to `true` when supported, otherwise `false`.\n   *\n   * @example\n   * ```typescript\n   * const canAuthenticate = await Keychain.canImplyAuthentication();\n   * console.log('Can imply authentication:', canAuthenticate);\n   * ```\n   */\n  function canImplyAuthentication(options) {\n    if (!RNKeychainManager.canCheckAuthentication) {\n      return Promise.resolve(false);\n    }\n    return RNKeychainManager.canCheckAuthentication(options);\n  }\n\n  /**\n   * Returns the security level supported by the library on the current device.\n   *\n   * @platform Android\n   *\n   * @param {AccessControlOption} [options] - A keychain options object.\n   *\n   * @returns {Promise<null | SECURITY_LEVEL>} Resolves to a `SECURITY_LEVEL` when supported, otherwise `null`.\n   *\n   * @example\n   * ```typescript\n   * const securityLevel = await Keychain.getSecurityLevel();\n   * console.log('Security Level:', securityLevel);\n   * ```\n   */\n  function getSecurityLevel(options) {\n    if (!RNKeychainManager.getSecurityLevel) {\n      return Promise.resolve(null);\n    }\n    return RNKeychainManager.getSecurityLevel(options);\n  }\n  /** @ignore */\n  var _default = exports.default = {\n    SECURITY_LEVEL: _$$_REQUIRE(_dependencyMap[1], \"./enums\").SECURITY_LEVEL,\n    ACCESSIBLE: _$$_REQUIRE(_dependencyMap[1], \"./enums\").ACCESSIBLE,\n    ACCESS_CONTROL: _$$_REQUIRE(_dependencyMap[1], \"./enums\").ACCESS_CONTROL,\n    AUTHENTICATION_TYPE: _$$_REQUIRE(_dependencyMap[1], \"./enums\").AUTHENTICATION_TYPE,\n    BIOMETRY_TYPE: _$$_REQUIRE(_dependencyMap[1], \"./enums\").BIOMETRY_TYPE,\n    STORAGE_TYPE: _$$_REQUIRE(_dependencyMap[1], \"./enums\").STORAGE_TYPE,\n    SECURITY_RULES: _$$_REQUIRE(_dependencyMap[1], \"./enums\").SECURITY_RULES,\n    getSecurityLevel: getSecurityLevel,\n    canImplyAuthentication: canImplyAuthentication,\n    getSupportedBiometryType: getSupportedBiometryType,\n    setInternetCredentials: setInternetCredentials,\n    getInternetCredentials: getInternetCredentials,\n    resetInternetCredentials: resetInternetCredentials,\n    setGenericPassword: setGenericPassword,\n    getGenericPassword: getGenericPassword,\n    getAllGenericPasswordServices: getAllGenericPasswordServices,\n    resetGenericPassword: resetGenericPassword,\n    requestSharedWebCredentials: requestSharedWebCredentials,\n    setSharedWebCredentials: setSharedWebCredentials\n  };\n});","lineCount":361,"map":[[36,2,1,0],[36,6,1,0,"_reactNative"],[36,18,1,0],[36,21,1,0,"_$$_REQUIRE"],[36,32,1,0],[36,33,1,0,"_dependencyMap"],[36,47,1,0],[37,2,365,0,"Object"],[37,8,365,0],[37,9,365,0,"keys"],[37,13,365,0],[37,14,365,0,"_$$_REQUIRE"],[37,25,365,0],[37,26,365,0,"_dependencyMap"],[37,40,365,0],[37,57,365,0,"forEach"],[37,64,365,0],[37,75,365,0,"key"],[37,78,365,0],[38,4,365,0],[38,8,365,0,"key"],[38,11,365,0],[38,29,365,0,"key"],[38,32,365,0],[39,4,365,0],[39,8,365,0,"Object"],[39,14,365,0],[39,15,365,0,"prototype"],[39,24,365,0],[39,25,365,0,"hasOwnProperty"],[39,39,365,0],[39,40,365,0,"call"],[39,44,365,0],[39,45,365,0,"_exportNames"],[39,57,365,0],[39,59,365,0,"key"],[39,62,365,0],[40,4,365,0],[40,8,365,0,"key"],[40,11,365,0],[40,15,365,0,"exports"],[40,22,365,0],[40,26,365,0,"exports"],[40,33,365,0],[40,34,365,0,"key"],[40,37,365,0],[40,43,365,0,"_$$_REQUIRE"],[40,54,365,0],[40,55,365,0,"_dependencyMap"],[40,69,365,0],[40,85,365,0,"key"],[40,88,365,0],[41,4,365,0,"Object"],[41,10,365,0],[41,11,365,0,"defineProperty"],[41,25,365,0],[41,26,365,0,"exports"],[41,33,365,0],[41,35,365,0,"key"],[41,38,365,0],[42,6,365,0,"enumerable"],[42,16,365,0],[43,6,365,0,"get"],[43,9,365,0],[43,20,365,0,"get"],[43,24,365,0],[44,8,365,0],[44,15,365,0,"_$$_REQUIRE"],[44,26,365,0],[44,27,365,0,"_dependencyMap"],[44,41,365,0],[44,57,365,0,"key"],[44,60,365,0],[45,6,365,0],[46,4,365,0],[47,2,365,0],[48,2,366,0,"Object"],[48,8,366,0],[48,9,366,0,"keys"],[48,13,366,0],[48,14,366,0,"_$$_REQUIRE"],[48,25,366,0],[48,26,366,0,"_dependencyMap"],[48,40,366,0],[48,57,366,0,"forEach"],[48,64,366,0],[48,75,366,0,"key"],[48,78,366,0],[49,4,366,0],[49,8,366,0,"key"],[49,11,366,0],[49,29,366,0,"key"],[49,32,366,0],[50,4,366,0],[50,8,366,0,"Object"],[50,14,366,0],[50,15,366,0,"prototype"],[50,24,366,0],[50,25,366,0,"hasOwnProperty"],[50,39,366,0],[50,40,366,0,"call"],[50,44,366,0],[50,45,366,0,"_exportNames"],[50,57,366,0],[50,59,366,0,"key"],[50,62,366,0],[51,4,366,0],[51,8,366,0,"key"],[51,11,366,0],[51,15,366,0,"exports"],[51,22,366,0],[51,26,366,0,"exports"],[51,33,366,0],[51,34,366,0,"key"],[51,37,366,0],[51,43,366,0,"_$$_REQUIRE"],[51,54,366,0],[51,55,366,0,"_dependencyMap"],[51,69,366,0],[51,85,366,0,"key"],[51,88,366,0],[52,4,366,0,"Object"],[52,10,366,0],[52,11,366,0,"defineProperty"],[52,25,366,0],[52,26,366,0,"exports"],[52,33,366,0],[52,35,366,0,"key"],[52,38,366,0],[53,6,366,0,"enumerable"],[53,16,366,0],[54,6,366,0,"get"],[54,9,366,0],[54,20,366,0,"get"],[54,24,366,0],[55,8,366,0],[55,15,366,0,"_$$_REQUIRE"],[55,26,366,0],[55,27,366,0,"_dependencyMap"],[55,41,366,0],[55,57,366,0,"key"],[55,60,366,0],[56,6,366,0],[57,4,366,0],[58,2,366,0],[59,2,27,0],[59,6,27,8,"RNKeychainManager"],[59,23,27,25],[59,26,27,30,"NativeModules"],[59,52,27,43],[59,53,27,8,"RNKeychainManager"],[59,70,27,25],[61,2,29,0],[62,0,30,0],[63,0,31,0],[64,0,32,0],[65,0,33,0],[66,0,34,0],[67,0,35,0],[68,0,36,0],[69,0,37,0],[70,0,38,0],[71,0,39,0],[72,0,40,0],[73,0,41,0],[74,0,42,0],[75,2,43,7],[75,11,43,16,"setGenericPassword"],[75,29,43,34,"setGenericPassword"],[75,30,44,2,"username"],[75,38,44,18],[75,40,45,2,"password"],[75,48,45,18],[75,50,46,2,"serviceOrOptions"],[75,66,46,40],[75,68,47,27],[76,4,48,2],[76,8,48,8,"options"],[76,15,48,15],[76,18,48,18],[76,22,48,18,"normalizeServiceOption"],[76,52,48,18],[76,53,48,18,"normalizeServiceOption"],[76,97,48,40],[76,99,48,41,"serviceOrOptions"],[76,115,48,57],[76,116,48,58],[77,4,49,2],[77,11,49,9,"RNKeychainManager"],[77,28,49,26],[77,29,49,27,"setGenericPasswordForOptions"],[77,57,49,55],[77,58,50,4,"options"],[77,65,50,11],[77,67,51,4,"username"],[77,75,51,12],[77,77,52,4,"password"],[77,85,53,2],[77,86,53,3],[78,2,54,0],[80,2,56,0],[81,0,57,0],[82,0,58,0],[83,0,59,0],[84,0,60,0],[85,0,61,0],[86,0,62,0],[87,0,63,0],[88,0,64,0],[89,0,65,0],[90,0,66,0],[91,0,67,0],[92,0,68,0],[93,0,69,0],[94,0,70,0],[95,0,71,0],[96,0,72,0],[97,2,73,7],[97,11,73,16,"getGenericPassword"],[97,29,73,34,"getGenericPassword"],[97,30,74,2,"serviceOrOptions"],[97,46,74,40],[97,48,75,36],[98,4,76,2],[98,8,76,8,"options"],[98,15,76,15],[98,18,76,18],[98,22,76,18,"normalizeOptions"],[98,52,76,18],[98,53,76,18,"normalizeOptions"],[98,91,76,34],[98,93,76,35,"serviceOrOptions"],[98,109,76,51],[98,110,76,52],[99,4,77,2],[99,11,77,9,"RNKeychainManager"],[99,28,77,26],[99,29,77,27,"getGenericPasswordForOptions"],[99,57,77,55],[99,58,77,56,"options"],[99,65,77,63],[99,66,77,64],[100,2,78,0],[102,2,80,0],[103,0,81,0],[104,0,82,0],[105,0,83,0],[106,0,84,0],[107,0,85,0],[108,0,86,0],[109,0,87,0],[110,0,88,0],[111,0,89,0],[112,0,90,0],[113,0,91,0],[114,0,92,0],[115,2,93,7],[115,11,93,16,"hasGenericPassword"],[115,29,93,34,"hasGenericPassword"],[115,30,94,2,"serviceOrOptions"],[115,46,94,41],[115,48,95,20],[116,4,96,2],[116,8,96,8,"options"],[116,15,96,15],[116,18,96,18],[116,22,96,18,"normalizeServiceOption"],[116,52,96,18],[116,53,96,18,"normalizeServiceOption"],[116,97,96,40],[116,99,96,41,"serviceOrOptions"],[116,115,96,57],[116,116,96,58],[117,4,97,2],[117,11,97,9,"RNKeychainManager"],[117,28,97,26],[117,29,97,27,"hasGenericPasswordForOptions"],[117,57,97,55],[117,58,97,56,"options"],[117,65,97,63],[117,66,97,64],[118,2,98,0],[120,2,100,0],[121,0,101,0],[122,0,102,0],[123,0,103,0],[124,0,104,0],[125,0,105,0],[126,0,106,0],[127,0,107,0],[128,0,108,0],[129,0,109,0],[130,0,110,0],[131,0,111,0],[132,0,112,0],[133,2,113,7],[133,11,113,16,"resetGenericPassword"],[133,31,113,36,"resetGenericPassword"],[133,32,114,2,"serviceOrOptions"],[133,48,114,41],[133,50,115,20],[134,4,116,2],[134,8,116,8,"options"],[134,15,116,15],[134,18,116,18],[134,22,116,18,"normalizeServiceOption"],[134,52,116,18],[134,53,116,18,"normalizeServiceOption"],[134,97,116,40],[134,99,116,41,"serviceOrOptions"],[134,115,116,57],[134,116,116,58],[135,4,117,2],[135,11,117,9,"RNKeychainManager"],[135,28,117,26],[135,29,117,27,"resetGenericPasswordForOptions"],[135,59,117,57],[135,60,117,58,"options"],[135,67,117,65],[135,68,117,66],[136,2,118,0],[138,2,120,0],[139,0,121,0],[140,0,122,0],[141,0,123,0],[142,0,124,0],[143,0,125,0],[144,0,126,0],[145,0,127,0],[146,0,128,0],[147,0,129,0],[148,0,130,0],[149,2,131,7],[149,11,131,16,"getAllGenericPasswordServices"],[149,40,131,45,"getAllGenericPasswordServices"],[149,41,131,45],[149,43,131,67],[150,4,132,2],[150,11,132,9,"RNKeychainManager"],[150,28,132,26],[150,29,132,27,"getAllGenericPasswordServices"],[150,58,132,56],[150,59,132,57],[150,60,132,58],[151,2,133,0],[153,2,135,0],[154,0,136,0],[155,0,137,0],[156,0,138,0],[157,0,139,0],[158,0,140,0],[159,0,141,0],[160,0,142,0],[161,0,143,0],[162,0,144,0],[163,0,145,0],[164,0,146,0],[165,0,147,0],[166,2,148,7],[166,11,148,16,"hasInternetCredentials"],[166,33,148,38,"hasInternetCredentials"],[166,34,149,2,"serverOrOptions"],[166,49,149,39],[166,51,150,20],[167,4,151,2],[167,8,151,8,"options"],[167,15,151,15],[167,18,151,18],[167,22,151,18,"normalizeServerOption"],[167,52,151,18],[167,53,151,18,"normalizeServerOption"],[167,96,151,39],[167,98,151,40,"serverOrOptions"],[167,113,151,55],[167,114,151,56],[168,4,152,2],[168,11,152,9,"RNKeychainManager"],[168,28,152,26],[168,29,152,27,"hasInternetCredentialsForOptions"],[168,61,152,59],[168,62,152,60,"options"],[168,69,152,67],[168,70,152,68],[169,2,153,0],[171,2,155,0],[172,0,156,0],[173,0,157,0],[174,0,158,0],[175,0,159,0],[176,0,160,0],[177,0,161,0],[178,0,162,0],[179,0,163,0],[180,0,164,0],[181,0,165,0],[182,0,166,0],[183,0,167,0],[184,0,168,0],[185,0,169,0],[186,2,170,7],[186,11,170,16,"setInternetCredentials"],[186,33,170,38,"setInternetCredentials"],[186,34,171,2,"server"],[186,40,171,16],[186,42,172,2,"username"],[186,50,172,18],[186,52,173,2,"password"],[186,60,173,18],[186,62,174,2,"options"],[186,69,174,22],[186,71,175,27],[187,4,176,2],[187,11,176,9,"RNKeychainManager"],[187,28,176,26],[187,29,176,27,"setInternetCredentialsForServer"],[187,60,176,58],[187,61,177,4,"server"],[187,67,177,10],[187,69,178,4,"username"],[187,77,178,12],[187,79,179,4,"password"],[187,87,179,12],[187,89,180,4,"options"],[187,96,181,2],[187,97,181,3],[188,2,182,0],[190,2,184,0],[191,0,185,0],[192,0,186,0],[193,0,187,0],[194,0,188,0],[195,0,189,0],[196,0,190,0],[197,0,191,0],[198,0,192,0],[199,0,193,0],[200,0,194,0],[201,0,195,0],[202,0,196,0],[203,0,197,0],[204,0,198,0],[205,0,199,0],[206,0,200,0],[207,0,201,0],[208,2,202,7],[208,11,202,16,"getInternetCredentials"],[208,33,202,38,"getInternetCredentials"],[208,34,203,2,"server"],[208,40,203,16],[208,42,204,2,"options"],[208,49,204,22],[208,51,205,36],[209,4,206,2],[209,11,206,9,"RNKeychainManager"],[209,28,206,26],[209,29,206,27,"getInternetCredentialsForServer"],[209,60,206,58],[209,61,207,4,"server"],[209,67,207,10],[209,69,208,4],[209,73,208,4,"normalizeOptions"],[209,103,208,4],[209,104,208,4,"normalizeOptions"],[209,142,208,20],[209,144,208,21,"options"],[209,151,208,28],[209,152,209,2],[209,153,209,3],[210,2,210,0],[212,2,212,0],[213,0,213,0],[214,0,214,0],[215,0,215,0],[216,0,216,0],[217,0,217,0],[218,0,218,0],[219,0,219,0],[220,0,220,0],[221,0,221,0],[222,0,222,0],[223,0,223,0],[224,0,224,0],[225,2,225,7],[225,11,225,16,"resetInternetCredentials"],[225,35,225,40,"resetInternetCredentials"],[225,36,226,2,"serverOrOptions"],[225,51,226,39],[225,53,227,17],[226,4,228,2],[226,8,228,8,"options"],[226,15,228,15],[226,18,228,18],[226,22,228,18,"normalizeServerOption"],[226,52,228,18],[226,53,228,18,"normalizeServerOption"],[226,96,228,39],[226,98,228,40,"serverOrOptions"],[226,113,228,55],[226,114,228,56],[227,4,229,2],[227,11,229,9,"RNKeychainManager"],[227,28,229,26],[227,29,229,27,"resetInternetCredentialsForOptions"],[227,63,229,61],[227,64,229,62,"options"],[227,71,229,69],[227,72,229,70],[228,2,230,0],[230,2,232,0],[231,0,233,0],[232,0,234,0],[233,0,235,0],[234,0,236,0],[235,0,237,0],[236,0,238,0],[237,0,239,0],[238,0,240,0],[239,0,241,0],[240,0,242,0],[241,2,243,7],[241,11,243,16,"getSupportedBiometryType"],[241,35,243,40,"getSupportedBiometryType"],[241,36,243,40],[241,38,243,74],[242,4,244,2],[242,8,244,6],[242,9,244,7,"RNKeychainManager"],[242,26,244,24],[242,27,244,25,"getSupportedBiometryType"],[242,51,244,49],[242,53,244,51],[243,6,245,4],[243,13,245,11,"Promise"],[243,20,245,18],[243,21,245,19,"resolve"],[243,28,245,26],[243,29,245,27],[243,33,245,31],[243,34,245,32],[244,4,246,2],[245,4,248,2],[245,11,248,9,"RNKeychainManager"],[245,28,248,26],[245,29,248,27,"getSupportedBiometryType"],[245,53,248,51],[245,54,248,52],[245,55,248,53],[246,2,249,0],[248,2,251,0],[249,0,252,0],[250,0,253,0],[251,0,254,0],[252,0,255,0],[253,0,256,0],[254,0,257,0],[255,0,258,0],[256,0,259,0],[257,0,260,0],[258,0,261,0],[259,0,262,0],[260,0,263,0],[261,0,264,0],[262,0,265,0],[263,0,266,0],[264,0,267,0],[265,2,268,7],[265,11,268,16,"requestSharedWebCredentials"],[265,38,268,43,"requestSharedWebCredentials"],[265,39,268,43],[265,41,270,2],[266,4,271,2],[266,8,271,6,"Platform"],[266,29,271,14],[266,30,271,15,"OS"],[266,32,271,17],[266,37,271,22],[266,42,271,27],[266,44,271,29],[267,6,272,4],[267,13,272,11,"Promise"],[267,20,272,18],[267,21,272,19,"reject"],[267,27,272,25],[267,28,273,6],[267,32,273,10,"Error"],[267,37,273,15],[267,38,274,8],[267,91,274,61,"Platform"],[267,112,274,69],[267,113,274,70,"OS"],[267,115,274,72],[267,121,275,6],[267,122,276,4],[267,123,276,5],[268,4,277,2],[269,4,278,2],[269,11,278,9,"RNKeychainManager"],[269,28,278,26],[269,29,278,27,"requestSharedWebCredentials"],[269,56,278,54],[269,57,278,55],[269,58,278,56],[270,2,279,0],[272,2,281,0],[273,0,282,0],[274,0,283,0],[275,0,284,0],[276,0,285,0],[277,0,286,0],[278,0,287,0],[279,0,288,0],[280,0,289,0],[281,0,290,0],[282,0,291,0],[283,0,292,0],[284,0,293,0],[285,0,294,0],[286,0,295,0],[287,0,296,0],[288,0,297,0],[289,2,298,7],[289,11,298,16,"setSharedWebCredentials"],[289,34,298,39,"setSharedWebCredentials"],[289,35,299,2,"server"],[289,41,299,16],[289,43,300,2,"username"],[289,51,300,18],[289,53,301,2,"password"],[289,61,301,19],[289,63,302,17],[290,4,303,2],[290,8,303,6,"Platform"],[290,29,303,14],[290,30,303,15,"OS"],[290,32,303,17],[290,37,303,22],[290,42,303,27],[290,44,303,29],[291,6,304,4],[291,13,304,11,"Promise"],[291,20,304,18],[291,21,304,19,"reject"],[291,27,304,25],[291,28,305,6],[291,32,305,10,"Error"],[291,37,305,15],[291,38,306,8],[291,87,306,57,"Platform"],[291,108,306,65],[291,109,306,66,"OS"],[291,111,306,68],[291,117,307,6],[291,118,308,4],[291,119,308,5],[292,4,309,2],[293,4,310,2],[293,11,310,9,"RNKeychainManager"],[293,28,310,26],[293,29,310,27,"setSharedWebCredentialsForServer"],[293,61,310,59],[293,62,311,4,"server"],[293,68,311,10],[293,70,312,4,"username"],[293,78,312,12],[293,80,313,4,"password"],[293,88,314,2],[293,89,314,3],[294,2,315,0],[296,2,317,0],[297,0,318,0],[298,0,319,0],[299,0,320,0],[300,0,321,0],[301,0,322,0],[302,0,323,0],[303,0,324,0],[304,0,325,0],[305,0,326,0],[306,0,327,0],[307,0,328,0],[308,0,329,0],[309,0,330,0],[310,0,331,0],[311,2,332,7],[311,11,332,16,"canImplyAuthentication"],[311,33,332,38,"canImplyAuthentication"],[311,34,333,2,"options"],[311,41,333,36],[311,43,334,20],[312,4,335,2],[312,8,335,6],[312,9,335,7,"RNKeychainManager"],[312,26,335,24],[312,27,335,25,"canCheckAuthentication"],[312,49,335,47],[312,51,335,49],[313,6,336,4],[313,13,336,11,"Promise"],[313,20,336,18],[313,21,336,19,"resolve"],[313,28,336,26],[313,29,336,27],[313,34,336,32],[313,35,336,33],[314,4,337,2],[315,4,338,2],[315,11,338,9,"RNKeychainManager"],[315,28,338,26],[315,29,338,27,"canCheckAuthentication"],[315,51,338,49],[315,52,338,50,"options"],[315,59,338,57],[315,60,338,58],[316,2,339,0],[318,2,341,0],[319,0,342,0],[320,0,343,0],[321,0,344,0],[322,0,345,0],[323,0,346,0],[324,0,347,0],[325,0,348,0],[326,0,349,0],[327,0,350,0],[328,0,351,0],[329,0,352,0],[330,0,353,0],[331,0,354,0],[332,0,355,0],[333,2,356,7],[333,11,356,16,"getSecurityLevel"],[333,27,356,32,"getSecurityLevel"],[333,28,357,2,"options"],[333,35,357,31],[333,37,358,34],[334,4,359,2],[334,8,359,6],[334,9,359,7,"RNKeychainManager"],[334,26,359,24],[334,27,359,25,"getSecurityLevel"],[334,43,359,41],[334,45,359,43],[335,6,360,4],[335,13,360,11,"Promise"],[335,20,360,18],[335,21,360,19,"resolve"],[335,28,360,26],[335,29,360,27],[335,33,360,31],[335,34,360,32],[336,4,361,2],[337,4,362,2],[337,11,362,9,"RNKeychainManager"],[337,28,362,26],[337,29,362,27,"getSecurityLevel"],[337,45,362,43],[337,46,362,44,"options"],[337,53,362,51],[337,54,362,52],[338,2,363,0],[339,2,367,0],[340,2,367,0],[340,6,367,0,"_default"],[340,14,367,0],[340,17,367,0,"exports"],[340,24,367,0],[340,25,367,0,"default"],[340,32,367,0],[340,35,368,15],[341,4,369,2,"SECURITY_LEVEL"],[341,18,369,16],[341,20,369,2,"SECURITY_LEVEL"],[341,50,369,2],[341,51,369,2,"SECURITY_LEVEL"],[341,76,369,16],[342,4,370,2,"ACCESSIBLE"],[342,14,370,12],[342,16,370,2,"ACCESSIBLE"],[342,46,370,2],[342,47,370,2,"ACCESSIBLE"],[342,68,370,12],[343,4,371,2,"ACCESS_CONTROL"],[343,18,371,16],[343,20,371,2,"ACCESS_CONTROL"],[343,50,371,2],[343,51,371,2,"ACCESS_CONTROL"],[343,76,371,16],[344,4,372,2,"AUTHENTICATION_TYPE"],[344,23,372,21],[344,25,372,2,"AUTHENTICATION_TYPE"],[344,55,372,2],[344,56,372,2,"AUTHENTICATION_TYPE"],[344,86,372,21],[345,4,373,2,"BIOMETRY_TYPE"],[345,17,373,15],[345,19,373,2,"BIOMETRY_TYPE"],[345,49,373,2],[345,50,373,2,"BIOMETRY_TYPE"],[345,74,373,15],[346,4,374,2,"STORAGE_TYPE"],[346,16,374,14],[346,18,374,2,"STORAGE_TYPE"],[346,48,374,2],[346,49,374,2,"STORAGE_TYPE"],[346,72,374,14],[347,4,375,2,"SECURITY_RULES"],[347,18,375,16],[347,20,375,2,"SECURITY_RULES"],[347,50,375,2],[347,51,375,2,"SECURITY_RULES"],[347,76,375,16],[348,4,376,2,"getSecurityLevel"],[348,20,376,18],[348,22,376,2,"getSecurityLevel"],[348,38,376,18],[349,4,377,2,"canImplyAuthentication"],[349,26,377,24],[349,28,377,2,"canImplyAuthentication"],[349,50,377,24],[350,4,378,2,"getSupportedBiometryType"],[350,28,378,26],[350,30,378,2,"getSupportedBiometryType"],[350,54,378,26],[351,4,379,2,"setInternetCredentials"],[351,26,379,24],[351,28,379,2,"setInternetCredentials"],[351,50,379,24],[352,4,380,2,"getInternetCredentials"],[352,26,380,24],[352,28,380,2,"getInternetCredentials"],[352,50,380,24],[353,4,381,2,"resetInternetCredentials"],[353,28,381,26],[353,30,381,2,"resetInternetCredentials"],[353,54,381,26],[354,4,382,2,"setGenericPassword"],[354,22,382,20],[354,24,382,2,"setGenericPassword"],[354,42,382,20],[355,4,383,2,"getGenericPassword"],[355,22,383,20],[355,24,383,2,"getGenericPassword"],[355,42,383,20],[356,4,384,2,"getAllGenericPasswordServices"],[356,33,384,31],[356,35,384,2,"getAllGenericPasswordServices"],[356,64,384,31],[357,4,385,2,"resetGenericPassword"],[357,24,385,22],[357,26,385,2,"resetGenericPassword"],[357,46,385,22],[358,4,386,2,"requestSharedWebCredentials"],[358,31,386,29],[358,33,386,2,"requestSharedWebCredentials"],[358,60,386,29],[359,4,387,2,"setSharedWebCredentials"],[359,27,387,25],[359,29,387,2,"setSharedWebCredentials"],[360,2,388,0],[360,3,388,1],[361,0,388,1],[361,3]],"functionMap":{"names":["<global>","setGenericPassword","getGenericPassword","hasGenericPassword","resetGenericPassword","getAllGenericPasswordServices","hasInternetCredentials","setInternetCredentials","getInternetCredentials","resetInternetCredentials","getSupportedBiometryType","requestSharedWebCredentials","setSharedWebCredentials","canImplyAuthentication","getSecurityLevel"],"mappings":"AAA;OC0C;CDW;OEmB;CFK;OGe;CHK;OIe;CJK;OKa;CLE;OMe;CNK;OOiB;CPY;OQoB;CRQ;OSe;CTK;OUa;CVM;OWmB;CXW;OYmB;CZiB;OaiB;CbO;OciB;CdO"}},"type":"js/module"}]}