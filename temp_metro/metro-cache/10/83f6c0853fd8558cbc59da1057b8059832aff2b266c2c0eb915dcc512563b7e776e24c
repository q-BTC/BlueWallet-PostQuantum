{"dependencies":[{"name":"./DataItem","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":25,"index":337},"end":{"line":13,"column":46,"index":358}}],"key":"ATjILdpOqfoKJDANecDHC4NgGHk="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  (function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n      define([], factory);\n    } else if (typeof module !== 'undefined' && module.exports) {\n      module.exports = factory();\n    } else {\n      global.CBOR = factory();\n    }\n  })(this, function () {\n    var _require = _$$_REQUIRE(_dependencyMap[0], \"./DataItem\"),\n      DataItem = _require.DataItem;\n    var CBOR = function () {\n      function BinaryHex(hex) {\n        this.$hex = hex;\n      }\n      BinaryHex.prototype = {\n        length: function length() {\n          return this.$hex.length / 2;\n        },\n        toString: function toString(format) {\n          if (!format || format === 'hex' || format === 16) return this.$hex;\n          if (format === 'utf-8') {\n            var encoded = '';\n            for (var i = 0; i < this.$hex.length; i += 2) {\n              encoded += '%' + this.$hex.substring(i, i + 2);\n            }\n            return decodeURIComponent(encoded);\n          }\n          if (format === 'latin') {\n            var encoded = [];\n            for (var i = 0; i < this.$hex.length; i += 2) {\n              encoded.push(parseInt(this.$hex.substring(i, i + 2), 16));\n            }\n            return String.fromCharCode.apply(String, encoded);\n          }\n          throw new Error('Unrecognised format: ' + format);\n        }\n      };\n      BinaryHex.fromLatinString = function (latinString) {\n        var hex = '';\n        for (var i = 0; i < latinString.length; i++) {\n          var pair = latinString.charCodeAt(i).toString(16);\n          if (pair.length === 1) pair = '0' + pair;\n          hex += pair;\n        }\n        return new BinaryHex(hex);\n      };\n      BinaryHex.fromUtf8String = function (utf8String) {\n        var encoded = encodeURIComponent(utf8String);\n        var hex = '';\n        for (var i = 0; i < encoded.length; i++) {\n          if (encoded.charAt(i) === '%') {\n            hex += encoded.substring(i + 1, i + 3);\n            i += 2;\n          } else {\n            var hexPair = encoded.charCodeAt(i).toString(16);\n            if (hexPair.length < 2) hexPair = '0' + hexPair;\n            hex += hexPair;\n          }\n        }\n        return new BinaryHex(hex);\n      };\n      var semanticEncoders = [];\n      var semanticDecoders = {};\n      var notImplemented = function notImplemented(label) {\n        return function () {\n          throw new Error(label + ' not implemented');\n        };\n      };\n      function Reader() {}\n      Reader.prototype = {\n        peekByte: notImplemented('peekByte'),\n        readByte: notImplemented('readByte'),\n        readChunk: notImplemented('readChunk'),\n        readFloat16: function readFloat16() {\n          var half = this.readUint16();\n          var exponent = (half & 0x7fff) >> 10;\n          var mantissa = half & 0x3ff;\n          var negative = half & 0x8000;\n          if (exponent === 0x1f) {\n            if (mantissa === 0) {\n              return negative ? -Infinity : Infinity;\n            }\n            return NaN;\n          }\n          var magnitude = exponent ? Math.pow(2, exponent - 25) * (1024 + mantissa) : Math.pow(2, -24) * mantissa;\n          return negative ? -magnitude : magnitude;\n        },\n        readFloat32: function readFloat32() {\n          var intValue = this.readUint32();\n          var exponent = (intValue & 0x7fffffff) >> 23;\n          var mantissa = intValue & 0x7fffff;\n          var negative = intValue & 0x80000000;\n          if (exponent === 0xff) {\n            if (mantissa === 0) {\n              return negative ? -Infinity : Infinity;\n            }\n            return NaN;\n          }\n          var magnitude = exponent ? Math.pow(2, exponent - 23 - 127) * (8388608 + mantissa) : Math.pow(2, -23 - 126) * mantissa;\n          return negative ? -magnitude : magnitude;\n        },\n        readFloat64: function readFloat64() {\n          var int1 = this.readUint32(),\n            int2 = this.readUint32();\n          var exponent = int1 >> 20 & 0x7ff;\n          var mantissa = (int1 & 0xfffff) * 4294967296 + int2;\n          var negative = int1 & 0x80000000;\n          if (exponent === 0x7ff) {\n            if (mantissa === 0) {\n              return negative ? -Infinity : Infinity;\n            }\n            return NaN;\n          }\n          var magnitude = exponent ? Math.pow(2, exponent - 52 - 1023) * (4503599627370496 + mantissa) : Math.pow(2, -52 - 1022) * mantissa;\n          return negative ? -magnitude : magnitude;\n        },\n        readUint16: function readUint16() {\n          return this.readByte() * 256 + this.readByte();\n        },\n        readUint32: function readUint32() {\n          return this.readUint16() * 65536 + this.readUint16();\n        },\n        readUint64: function readUint64() {\n          return this.readUint32() * 4294967296 + this.readUint32();\n        }\n      };\n      function Writer() {}\n      Writer.prototype = {\n        writeByte: notImplemented('writeByte'),\n        result: notImplemented('result'),\n        writeFloat16: notImplemented('writeFloat16'),\n        writeFloat32: notImplemented('writeFloat32'),\n        writeFloat64: notImplemented('writeFloat64'),\n        writeUint16: function writeUint16(value) {\n          this.writeByte(value >> 8 & 0xff);\n          this.writeByte(value & 0xff);\n        },\n        writeUint32: function writeUint32(value) {\n          this.writeUint16(value >> 16 & 0xffff);\n          this.writeUint16(value & 0xffff);\n        },\n        writeUint64: function writeUint64(value) {\n          if (value >= 9007199254740992 || value <= -9007199254740992) {\n            throw new Error('Cannot encode Uint64 of: ' + value + ' magnitude to big (floating point errors)');\n          }\n          this.writeUint32(Math.floor(value / 4294967296));\n          this.writeUint32(value % 4294967296);\n        },\n        writeString: notImplemented('writeString'),\n        canWriteBinary: function canWriteBinary(chunk) {\n          return false;\n        },\n        writeBinary: notImplemented('writeChunk')\n      };\n      function readHeaderRaw(reader) {\n        var firstByte = reader.readByte();\n        var majorType = firstByte >> 5,\n          value = firstByte & 0x1f;\n        return {\n          type: majorType,\n          value: value\n        };\n      }\n      function valueFromHeader(header, reader) {\n        var value = header.value;\n        if (value < 24) {\n          return value;\n        } else if (value == 24) {\n          return reader.readByte();\n        } else if (value == 25) {\n          return reader.readUint16();\n        } else if (value == 26) {\n          return reader.readUint32();\n        } else if (value == 27) {\n          return reader.readUint64();\n        } else if (value == 31) {\n          return null;\n        }\n        notImplemented('Additional info: ' + value)();\n      }\n      function writeHeaderRaw(type, value, writer) {\n        writer.writeByte(type << 5 | value);\n      }\n      function writeHeader(type, value, writer) {\n        var firstByte = type << 5;\n        if (value < 24) {\n          writer.writeByte(firstByte | value);\n        } else if (value < 256) {\n          writer.writeByte(firstByte | 24);\n          writer.writeByte(value);\n        } else if (value < 65536) {\n          writer.writeByte(firstByte | 25);\n          writer.writeUint16(value);\n        } else if (value < 4294967296) {\n          writer.writeByte(firstByte | 26);\n          writer.writeUint32(value);\n        } else {\n          writer.writeByte(firstByte | 27);\n          writer.writeUint64(value);\n        }\n      }\n      var stopCode = new Error();\n      function decodeReader(reader) {\n        var header = readHeaderRaw(reader);\n        switch (header.type) {\n          case 0:\n            return valueFromHeader(header, reader);\n          case 1:\n            return -1 - valueFromHeader(header, reader);\n          case 2:\n            return reader.readChunk(valueFromHeader(header, reader));\n          case 3:\n            var buffer = reader.readChunk(valueFromHeader(header, reader));\n            return buffer.toString('utf-8');\n          case 4:\n          case 5:\n            var arrayLength = valueFromHeader(header, reader);\n            var result = [];\n            if (arrayLength !== null) {\n              if (header.type === 5) {\n                arrayLength *= 2;\n              }\n              for (var i = 0; i < arrayLength; i++) {\n                result[i] = decodeReader(reader);\n              }\n            } else {\n              var item;\n              while ((item = decodeReader(reader)) !== stopCode) {\n                result.push(item);\n              }\n            }\n            if (header.type === 5) {\n              var objResult = {};\n              for (var i = 0; i < result.length; i += 2) {\n                objResult[result[i]] = result[i + 1];\n              }\n              return objResult;\n            } else {\n              return result;\n            }\n          case 6:\n            var tag = valueFromHeader(header, reader);\n            var decoder = semanticDecoders[tag];\n            var result = decodeReader(reader);\n            return decoder ? decoder(result) : result;\n          case 7:\n            if (header.value === 25) {\n              return reader.readFloat16();\n            } else if (header.value === 26) {\n              return reader.readFloat32();\n            } else if (header.value === 27) {\n              return reader.readFloat64();\n            }\n            switch (valueFromHeader(header, reader)) {\n              case 20:\n                return false;\n              case 21:\n                return true;\n              case 22:\n                return null;\n              case 23:\n                return undefined;\n              case null:\n                return stopCode;\n              default:\n                throw new Error('Unknown fixed value: ' + header.value);\n            }\n          default:\n            throw new Error('Unsupported header: ' + JSON.stringify(header));\n        }\n        throw new Error('not implemented yet');\n      }\n      function encodeWriter(data, writer) {\n        for (var i = 0; i < semanticEncoders.length; i++) {\n          var replacement = semanticEncoders[i].fn(data);\n          if (replacement !== undefined) {\n            writeHeader(6, semanticEncoders[i].tag, writer);\n            return encodeWriter(replacement, writer);\n          }\n        }\n        if (data && typeof data.toCBOR === 'function') {\n          data = data.toCBOR();\n        }\n        if (data === false) {\n          writeHeader(7, 20, writer);\n        } else if (data === true) {\n          writeHeader(7, 21, writer);\n        } else if (data === null) {\n          writeHeader(7, 22, writer);\n        } else if (data === undefined) {\n          writeHeader(7, 23, writer);\n        } else if (typeof data === 'number') {\n          if (Math.floor(data) === data && data < 9007199254740992 && data > -9007199254740992) {\n            if (data < 0) {\n              writeHeader(1, -1 - data, writer);\n            } else {\n              writeHeader(0, data, writer);\n            }\n          } else {\n            writeHeaderRaw(7, 27, writer);\n            writer.writeFloat64(data);\n          }\n        } else if (typeof data === 'string') {\n          writer.writeString(data, function (length) {\n            writeHeader(3, length, writer);\n          });\n        } else if (writer.canWriteBinary(data)) {\n          writer.writeBinary(data, function (length) {\n            writeHeader(2, length, writer);\n          });\n        } else if (typeof data === 'object') {\n          if (api.config.useToJSON && typeof data.toJSON === 'function') {\n            data = data.toJSON();\n          }\n          if (Array.isArray(data)) {\n            writeHeader(4, data.length, writer);\n            for (var i = 0; i < data.length; i++) {\n              encodeWriter(data[i], writer);\n            }\n          } else {\n            var keys = Object.keys(data);\n            writeHeader(5, keys.length, writer);\n            for (var i = 0; i < keys.length; i++) {\n              var number = parseInt(keys[i]);\n              if (isNaN(number)) {\n                encodeWriter(keys[i], writer);\n                encodeWriter(data[keys[i]], writer);\n              } else {\n                encodeWriter(number, writer);\n                encodeWriter(data[keys[i]], writer);\n              }\n            }\n          }\n        } else {\n          throw new Error('CBOR encoding not supported: ' + data);\n        }\n      }\n      var readerFunctions = [];\n      var writerFunctions = [];\n      var api = {\n        config: {\n          useToJSON: true\n        },\n        addWriter: function addWriter(format, writerFunction) {\n          if (typeof format === 'string') {\n            writerFunctions.push(function (f) {\n              if (format === f) return writerFunction(f);\n            });\n          } else {\n            writerFunctions.push(format);\n          }\n        },\n        addReader: function addReader(format, readerFunction) {\n          if (typeof format === 'string') {\n            readerFunctions.push(function (data, f) {\n              if (format === f) return readerFunction(data, f);\n            });\n          } else {\n            readerFunctions.push(format);\n          }\n        },\n        encode: function encode(data, format) {\n          for (var i = 0; i < writerFunctions.length; i++) {\n            var func = writerFunctions[i];\n            var writer = func(format);\n            if (writer) {\n              encodeWriter(data, writer);\n              return writer.result();\n            }\n          }\n          throw new Error('Unsupported output format: ' + format);\n        },\n        encodeDataItem: function encodeDataItem(data, format) {\n          for (var i = 0; i < writerFunctions.length; i++) {\n            var func = writerFunctions[i];\n            var writer = func(format);\n            if (writer) {\n              if (data.getTag() !== undefined) {\n                encodeWriter(data, writer);\n                return writer.result();\n              } else {\n                encodeWriter(data.getData(), writer);\n                return writer.result();\n              }\n            }\n          }\n          throw new Error('Unsupported output format: ' + format);\n        },\n        decode: function decode(data, format) {\n          for (var i = 0; i < readerFunctions.length; i++) {\n            var func = readerFunctions[i];\n            var reader = func(data, format);\n            if (reader) {\n              return decodeReader(reader);\n            }\n          }\n          throw new Error('Unsupported input format: ' + format);\n        },\n        decodeToDataItem: function decodeToDataItem(data, format) {\n          for (var i = 0; i < readerFunctions.length; i++) {\n            var func = readerFunctions[i];\n            var reader = func(data, format);\n            if (reader) {\n              var result = decodeReader(reader);\n              if (result instanceof DataItem) {\n                return result;\n              } else {\n                return new DataItem(result);\n              }\n            }\n          }\n          throw new Error('Unsupported input format: ' + format);\n        },\n        addSemanticEncode: function addSemanticEncode(tag, fn) {\n          if (typeof tag !== 'number' || tag % 1 !== 0 || tag < 0) {\n            throw new Error('Tag must be a positive integer');\n          }\n          semanticEncoders.push({\n            tag: tag,\n            fn: fn\n          });\n          return this;\n        },\n        addSemanticDecode: function addSemanticDecode(tag, fn) {\n          if (typeof tag !== 'number' || tag % 1 !== 0 || tag < 0) {\n            throw new Error('Tag must be a positive integer');\n          }\n          semanticDecoders[tag] = fn;\n          return this;\n        }\n      };\n      function BufferReader(buffer) {\n        this.buffer = buffer;\n        this.pos = 0;\n      }\n      BufferReader.prototype = Object.create(Reader.prototype);\n      BufferReader.prototype.peekByte = function () {\n        return this.buffer[this.pos];\n      };\n      BufferReader.prototype.readByte = function () {\n        return this.buffer[this.pos++];\n      };\n      BufferReader.prototype.readUint16 = function () {\n        var result = this.buffer.readUInt16BE(this.pos);\n        this.pos += 2;\n        return result;\n      };\n      BufferReader.prototype.readUint32 = function () {\n        var result = this.buffer.readUInt32BE(this.pos);\n        this.pos += 4;\n        return result;\n      };\n      BufferReader.prototype.readFloat32 = function () {\n        var result = this.buffer.readFloatBE(this.pos);\n        this.pos += 4;\n        return result;\n      };\n      BufferReader.prototype.readFloat64 = function () {\n        var result = this.buffer.readDoubleBE(this.pos);\n        this.pos += 8;\n        return result;\n      };\n      BufferReader.prototype.readChunk = function (length) {\n        var result = Buffer.alloc(length);\n        this.buffer.copy(result, 0, this.pos, this.pos += length);\n        return result;\n      };\n      function BufferWriter(stringFormat) {\n        this.byteLength = 0;\n        this.defaultBufferLength = 16384;\n        this.latestBuffer = Buffer.alloc(this.defaultBufferLength);\n        this.latestBufferOffset = 0;\n        this.completeBuffers = [];\n        this.stringFormat = stringFormat;\n      }\n      BufferWriter.prototype = Object.create(Writer.prototype);\n      BufferWriter.prototype.writeByte = function (value) {\n        this.latestBuffer[this.latestBufferOffset++] = value;\n        if (this.latestBufferOffset >= this.latestBuffer.length) {\n          this.completeBuffers.push(this.latestBuffer);\n          this.latestBuffer = Buffer.alloc(this.defaultBufferLength);\n          this.latestBufferOffset = 0;\n        }\n        this.byteLength++;\n      };\n      BufferWriter.prototype.writeFloat32 = function (value) {\n        var buffer = Buffer.alloc(4);\n        buffer.writeFloatBE(value, 0);\n        this.writeBuffer(buffer);\n      };\n      BufferWriter.prototype.writeFloat64 = function (value) {\n        var buffer = Buffer.alloc(8);\n        buffer.writeDoubleBE(value, 0);\n        this.writeBuffer(buffer);\n      };\n      BufferWriter.prototype.writeString = function (string, lengthFunc) {\n        var buffer = Buffer.from(string, 'utf-8');\n        lengthFunc(buffer.length);\n        this.writeBuffer(buffer);\n      };\n      BufferWriter.prototype.canWriteBinary = function (data) {\n        return data instanceof Buffer;\n      };\n      BufferWriter.prototype.writeBinary = function (buffer, lengthFunc) {\n        lengthFunc(buffer.length);\n        this.writeBuffer(buffer);\n      };\n      BufferWriter.prototype.writeBuffer = function (chunk) {\n        if (!(chunk instanceof Buffer)) throw new TypeError('BufferWriter only accepts Buffers');\n        if (!this.latestBufferOffset) {\n          this.completeBuffers.push(chunk);\n        } else if (this.latestBuffer.length - this.latestBufferOffset >= chunk.length) {\n          chunk.copy(this.latestBuffer, this.latestBufferOffset);\n          this.latestBufferOffset += chunk.length;\n          if (this.latestBufferOffset >= this.latestBuffer.length) {\n            this.completeBuffers.push(this.latestBuffer);\n            this.latestBuffer = Buffer.alloc(this.defaultBufferLength);\n            this.latestBufferOffset = 0;\n          }\n        } else {\n          this.completeBuffers.push(this.latestBuffer.slice(0, this.latestBufferOffset));\n          this.completeBuffers.push(chunk);\n          this.latestBuffer = Buffer.alloc(this.defaultBufferLength);\n          this.latestBufferOffset = 0;\n        }\n        this.byteLength += chunk.length;\n      };\n      BufferWriter.prototype.result = function () {\n        var result = Buffer.alloc(this.byteLength);\n        var offset = 0;\n        for (var i = 0; i < this.completeBuffers.length; i++) {\n          var buffer = this.completeBuffers[i];\n          buffer.copy(result, offset, 0, buffer.length);\n          offset += buffer.length;\n        }\n        if (this.latestBufferOffset) {\n          this.latestBuffer.copy(result, offset, 0, this.latestBufferOffset);\n        }\n        if (this.stringFormat) return result.toString(this.stringFormat);\n        return result;\n      };\n      if (typeof Buffer === 'function') {\n        api.addReader(function (data, format) {\n          if (Buffer.isBuffer(data)) {\n            return new BufferReader(data);\n          }\n          if (format === 'hex' || format === 'base64') {\n            var buffer = Buffer.from(data, format);\n            return new BufferReader(buffer);\n          }\n        });\n        api.addWriter(function (format) {\n          if (!format || format === 'buffer') {\n            return new BufferWriter();\n          } else if (format === 'hex' || format === 'base64') {\n            return new BufferWriter(format);\n          }\n        });\n      }\n      function HexReader(hex) {\n        this.hex = hex;\n        this.pos = 0;\n      }\n      HexReader.prototype = Object.create(Reader.prototype);\n      HexReader.prototype.peekByte = function () {\n        var pair = this.hex.substring(this.pos, 2);\n        return parseInt(pair, 16);\n      };\n      HexReader.prototype.readByte = function () {\n        var pair = this.hex.substring(this.pos, this.pos + 2);\n        this.pos += 2;\n        return parseInt(pair, 16);\n      };\n      HexReader.prototype.readChunk = function (length) {\n        var hex = this.hex.substring(this.pos, this.pos + length * 2);\n        this.pos += length * 2;\n        if (typeof Buffer === 'function') return Buffer.from(hex, 'hex');\n        return new BinaryHex(hex);\n      };\n      function HexWriter(finalFormat) {\n        this.$hex = '';\n        this.finalFormat = finalFormat || 'hex';\n      }\n      HexWriter.prototype = Object.create(Writer.prototype);\n      HexWriter.prototype.writeByte = function (value) {\n        if (value < 0 || value > 255) throw new Error('Byte value out of range: ' + value);\n        var hex = value.toString(16);\n        if (hex.length == 1) {\n          hex = '0' + hex;\n        }\n        this.$hex += hex;\n      };\n      HexWriter.prototype.canWriteBinary = function (chunk) {\n        return chunk instanceof BinaryHex || typeof Buffer === 'function' && chunk instanceof Buffer;\n      };\n      HexWriter.prototype.writeBinary = function (chunk, lengthFunction) {\n        if (chunk instanceof BinaryHex) {\n          lengthFunction(chunk.length());\n          this.$hex += chunk.$hex;\n        } else if (typeof Buffer === 'function' && chunk instanceof Buffer) {\n          lengthFunction(chunk.length);\n          this.$hex += chunk.toString('hex');\n        } else {\n          throw new TypeError('HexWriter only accepts BinaryHex or Buffers');\n        }\n      };\n      HexWriter.prototype.result = function () {\n        if (this.finalFormat === 'buffer' && typeof Buffer === 'function') {\n          return Buffer.from(this.$hex, 'hex');\n        }\n        return new BinaryHex(this.$hex).toString(this.finalFormat);\n      };\n      HexWriter.prototype.writeString = function (string, lengthFunction) {\n        var buffer = BinaryHex.fromUtf8String(string);\n        lengthFunction(buffer.length());\n        this.$hex += buffer.$hex;\n      };\n      api.addReader(function (data, format) {\n        if (data instanceof BinaryHex || data.$hex) {\n          return new HexReader(data.$hex);\n        }\n        if (format === 'hex') {\n          return new HexReader(data);\n        }\n      });\n      api.addWriter(function (format) {\n        if (format === 'hex') {\n          return new HexWriter();\n        }\n      });\n      return api;\n    }();\n    CBOR.addSemanticEncode(0, function (data) {\n      if (data instanceof Date) {\n        return data.toISOString();\n      }\n    }).addSemanticDecode(0, function (isoString) {\n      return new Date(isoString);\n    }).addSemanticDecode(1, function (isoString) {\n      return new Date(isoString);\n    });\n    return CBOR;\n  });\n});","lineCount":648,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,3,2,1],[4,13,2,11,"global"],[4,19,2,17],[4,21,2,19,"factory"],[4,28,2,26],[4,30,2,28],[5,4,3,4],[5,8,3,8],[5,15,3,15,"define"],[5,21,3,21],[5,26,3,26],[5,36,3,36],[5,40,3,40,"define"],[5,46,3,46],[5,47,3,47,"amd"],[5,50,3,50],[5,52,3,52],[6,6,4,8,"define"],[6,12,4,14],[6,13,4,15],[6,15,4,17],[6,17,4,19,"factory"],[6,24,4,26],[6,25,4,27],[7,4,5,4],[7,5,5,5],[7,11,6,9],[7,15,6,13],[7,22,6,20,"module"],[7,28,6,26],[7,33,6,31],[7,44,6,42],[7,48,6,46,"module"],[7,54,6,52],[7,55,6,53,"exports"],[7,62,6,60],[7,64,6,62],[8,6,7,8,"module"],[8,12,7,14],[8,13,7,15,"exports"],[8,20,7,22],[8,23,7,25,"factory"],[8,30,7,32],[8,31,7,33],[8,32,7,34],[9,4,8,4],[9,5,8,5],[9,11,9,9],[10,6,10,8,"global"],[10,12,10,14],[10,13,10,15,"CBOR"],[10,17,10,19],[10,20,10,22,"factory"],[10,27,10,29],[10,28,10,30],[10,29,10,31],[11,4,11,4],[12,2,12,0],[12,3,12,1],[12,5,12,3],[12,9,12,7],[12,11,12,9],[12,23,12,21],[13,4,13,4],[13,8,13,4,"_require"],[13,16,13,4],[13,19,13,25,"require"],[13,30,13,32],[13,31,13,32,"_dependencyMap"],[13,45,13,32],[13,62,13,45],[13,63,13,46],[14,6,13,12,"DataItem"],[14,14,13,20],[14,17,13,20,"_require"],[14,25,13,20],[14,26,13,12,"DataItem"],[14,34,13,20],[15,4,14,4],[15,8,14,8,"CBOR"],[15,12,14,12],[15,15,14,16],[15,27,14,28],[16,6,15,8],[16,15,15,17,"BinaryHex"],[16,24,15,26,"BinaryHex"],[16,25,15,27,"hex"],[16,28,15,30],[16,30,15,32],[17,8,16,12],[17,12,16,16],[17,13,16,17,"$hex"],[17,17,16,21],[17,20,16,24,"hex"],[17,23,16,27],[18,6,17,8],[19,6,18,8,"BinaryHex"],[19,15,18,17],[19,16,18,18,"prototype"],[19,25,18,27],[19,28,18,30],[20,8,19,12,"length"],[20,14,19,18],[20,16,19,20],[20,25,19,12,"length"],[20,31,19,18,"length"],[20,32,19,18],[20,34,19,32],[21,10,20,16],[21,17,20,23],[21,21,20,27],[21,22,20,28,"$hex"],[21,26,20,32],[21,27,20,33,"length"],[21,33,20,39],[21,36,20,42],[21,37,20,43],[22,8,21,12],[22,9,21,13],[23,8,22,12,"toString"],[23,16,22,20],[23,18,22,22],[23,27,22,12,"toString"],[23,35,22,20,"toString"],[23,36,22,32,"format"],[23,42,22,38],[23,44,22,40],[24,10,23,16],[24,14,23,20],[24,15,23,21,"format"],[24,21,23,27],[24,25,23,31,"format"],[24,31,23,37],[24,36,23,42],[24,41,23,47],[24,45,23,51,"format"],[24,51,23,57],[24,56,23,62],[24,58,23,64],[24,60,24,20],[24,67,24,27],[24,71,24,31],[24,72,24,32,"$hex"],[24,76,24,36],[25,10,25,16],[25,14,25,20,"format"],[25,20,25,26],[25,25,25,31],[25,32,25,38],[25,34,25,40],[26,12,26,20],[26,16,26,24,"encoded"],[26,23,26,31],[26,26,26,34],[26,28,26,36],[27,12,27,20],[27,17,27,25],[27,21,27,29,"i"],[27,22,27,30],[27,25,27,33],[27,26,27,34],[27,28,27,36,"i"],[27,29,27,37],[27,32,27,40],[27,36,27,44],[27,37,27,45,"$hex"],[27,41,27,49],[27,42,27,50,"length"],[27,48,27,56],[27,50,27,58,"i"],[27,51,27,59],[27,55,27,63],[27,56,27,64],[27,58,27,66],[28,14,28,24,"encoded"],[28,21,28,31],[28,25,28,35],[28,28,28,38],[28,31,28,41],[28,35,28,45],[28,36,28,46,"$hex"],[28,40,28,50],[28,41,28,51,"substring"],[28,50,28,60],[28,51,28,61,"i"],[28,52,28,62],[28,54,28,64,"i"],[28,55,28,65],[28,58,28,68],[28,59,28,69],[28,60,28,70],[29,12,29,20],[30,12,30,20],[30,19,30,27,"decodeURIComponent"],[30,37,30,45],[30,38,30,46,"encoded"],[30,45,30,53],[30,46,30,54],[31,10,31,16],[32,10,32,16],[32,14,32,20,"format"],[32,20,32,26],[32,25,32,31],[32,32,32,38],[32,34,32,40],[33,12,33,20],[33,16,33,24,"encoded"],[33,23,33,31],[33,26,33,34],[33,28,33,36],[34,12,34,20],[34,17,34,25],[34,21,34,29,"i"],[34,22,34,30],[34,25,34,33],[34,26,34,34],[34,28,34,36,"i"],[34,29,34,37],[34,32,34,40],[34,36,34,44],[34,37,34,45,"$hex"],[34,41,34,49],[34,42,34,50,"length"],[34,48,34,56],[34,50,34,58,"i"],[34,51,34,59],[34,55,34,63],[34,56,34,64],[34,58,34,66],[35,14,35,24,"encoded"],[35,21,35,31],[35,22,35,32,"push"],[35,26,35,36],[35,27,35,37,"parseInt"],[35,35,35,45],[35,36,35,46],[35,40,35,50],[35,41,35,51,"$hex"],[35,45,35,55],[35,46,35,56,"substring"],[35,55,35,65],[35,56,35,66,"i"],[35,57,35,67],[35,59,35,69,"i"],[35,60,35,70],[35,63,35,73],[35,64,35,74],[35,65,35,75],[35,67,35,77],[35,69,35,79],[35,70,35,80],[35,71,35,81],[36,12,36,20],[37,12,37,20],[37,19,37,27,"String"],[37,25,37,33],[37,26,37,34,"fromCharCode"],[37,38,37,46],[37,39,37,47,"apply"],[37,44,37,52],[37,45,37,53,"String"],[37,51,37,59],[37,53,37,61,"encoded"],[37,60,37,68],[37,61,37,69],[38,10,38,16],[39,10,39,16],[39,16,39,22],[39,20,39,26,"Error"],[39,25,39,31],[39,26,39,32],[39,49,39,55],[39,52,39,58,"format"],[39,58,39,64],[39,59,39,65],[40,8,40,12],[41,6,41,8],[41,7,41,9],[42,6,42,8,"BinaryHex"],[42,15,42,17],[42,16,42,18,"fromLatinString"],[42,31,42,33],[42,34,42,36],[42,44,42,46,"latinString"],[42,55,42,57],[42,57,42,59],[43,8,43,12],[43,12,43,16,"hex"],[43,15,43,19],[43,18,43,22],[43,20,43,24],[44,8,44,12],[44,13,44,17],[44,17,44,21,"i"],[44,18,44,22],[44,21,44,25],[44,22,44,26],[44,24,44,28,"i"],[44,25,44,29],[44,28,44,32,"latinString"],[44,39,44,43],[44,40,44,44,"length"],[44,46,44,50],[44,48,44,52,"i"],[44,49,44,53],[44,51,44,55],[44,53,44,57],[45,10,45,16],[45,14,45,20,"pair"],[45,18,45,24],[45,21,45,27,"latinString"],[45,32,45,38],[45,33,45,39,"charCodeAt"],[45,43,45,49],[45,44,45,50,"i"],[45,45,45,51],[45,46,45,52],[45,47,45,53,"toString"],[45,55,45,61],[45,56,45,62],[45,58,45,64],[45,59,45,65],[46,10,46,16],[46,14,46,20,"pair"],[46,18,46,24],[46,19,46,25,"length"],[46,25,46,31],[46,30,46,36],[46,31,46,37],[46,33,47,20,"pair"],[46,37,47,24],[46,40,47,27],[46,43,47,30],[46,46,47,33,"pair"],[46,50,47,37],[47,10,48,16,"hex"],[47,13,48,19],[47,17,48,23,"pair"],[47,21,48,27],[48,8,49,12],[49,8,50,12],[49,15,50,19],[49,19,50,23,"BinaryHex"],[49,28,50,32],[49,29,50,33,"hex"],[49,32,50,36],[49,33,50,37],[50,6,51,8],[50,7,51,9],[51,6,52,8,"BinaryHex"],[51,15,52,17],[51,16,52,18,"fromUtf8String"],[51,30,52,32],[51,33,52,35],[51,43,52,45,"utf8String"],[51,53,52,55],[51,55,52,57],[52,8,53,12],[52,12,53,16,"encoded"],[52,19,53,23],[52,22,53,26,"encodeURIComponent"],[52,40,53,44],[52,41,53,45,"utf8String"],[52,51,53,55],[52,52,53,56],[53,8,54,12],[53,12,54,16,"hex"],[53,15,54,19],[53,18,54,22],[53,20,54,24],[54,8,55,12],[54,13,55,17],[54,17,55,21,"i"],[54,18,55,22],[54,21,55,25],[54,22,55,26],[54,24,55,28,"i"],[54,25,55,29],[54,28,55,32,"encoded"],[54,35,55,39],[54,36,55,40,"length"],[54,42,55,46],[54,44,55,48,"i"],[54,45,55,49],[54,47,55,51],[54,49,55,53],[55,10,56,16],[55,14,56,20,"encoded"],[55,21,56,27],[55,22,56,28,"charAt"],[55,28,56,34],[55,29,56,35,"i"],[55,30,56,36],[55,31,56,37],[55,36,56,42],[55,39,56,45],[55,41,56,47],[56,12,57,20,"hex"],[56,15,57,23],[56,19,57,27,"encoded"],[56,26,57,34],[56,27,57,35,"substring"],[56,36,57,44],[56,37,57,45,"i"],[56,38,57,46],[56,41,57,49],[56,42,57,50],[56,44,57,52,"i"],[56,45,57,53],[56,48,57,56],[56,49,57,57],[56,50,57,58],[57,12,58,20,"i"],[57,13,58,21],[57,17,58,25],[57,18,58,26],[58,10,59,16],[58,11,59,17],[58,17,60,21],[59,12,61,20],[59,16,61,24,"hexPair"],[59,23,61,31],[59,26,61,34,"encoded"],[59,33,61,41],[59,34,61,42,"charCodeAt"],[59,44,61,52],[59,45,61,53,"i"],[59,46,61,54],[59,47,61,55],[59,48,61,56,"toString"],[59,56,61,64],[59,57,61,65],[59,59,61,67],[59,60,61,68],[60,12,62,20],[60,16,62,24,"hexPair"],[60,23,62,31],[60,24,62,32,"length"],[60,30,62,38],[60,33,62,41],[60,34,62,42],[60,36,63,24,"hexPair"],[60,43,63,31],[60,46,63,34],[60,49,63,37],[60,52,63,40,"hexPair"],[60,59,63,47],[61,12,64,20,"hex"],[61,15,64,23],[61,19,64,27,"hexPair"],[61,26,64,34],[62,10,65,16],[63,8,66,12],[64,8,67,12],[64,15,67,19],[64,19,67,23,"BinaryHex"],[64,28,67,32],[64,29,67,33,"hex"],[64,32,67,36],[64,33,67,37],[65,6,68,8],[65,7,68,9],[66,6,69,8],[66,10,69,12,"semanticEncoders"],[66,26,69,28],[66,29,69,31],[66,31,69,33],[67,6,70,8],[67,10,70,12,"semanticDecoders"],[67,26,70,28],[67,29,70,31],[67,30,70,32],[67,31,70,33],[68,6,71,8],[68,10,71,12,"notImplemented"],[68,24,71,26],[68,27,71,29],[68,36,71,12,"notImplemented"],[68,50,71,26,"notImplemented"],[68,51,71,39,"label"],[68,56,71,44],[68,58,71,46],[69,8,72,12],[69,15,72,19],[69,27,72,31],[70,10,73,16],[70,16,73,22],[70,20,73,26,"Error"],[70,25,73,31],[70,26,73,32,"label"],[70,31,73,37],[70,34,73,40],[70,52,73,58],[70,53,73,59],[71,8,74,12],[71,9,74,13],[72,6,75,8],[72,7,75,9],[73,6,76,8],[73,15,76,17,"Reader"],[73,21,76,23,"Reader"],[73,22,76,23],[73,24,76,26],[73,25,76,28],[74,6,77,8,"Reader"],[74,12,77,14],[74,13,77,15,"prototype"],[74,22,77,24],[74,25,77,27],[75,8,78,12,"peekByte"],[75,16,78,20],[75,18,78,22,"notImplemented"],[75,32,78,36],[75,33,78,37],[75,43,78,47],[75,44,78,48],[76,8,79,12,"readByte"],[76,16,79,20],[76,18,79,22,"notImplemented"],[76,32,79,36],[76,33,79,37],[76,43,79,47],[76,44,79,48],[77,8,80,12,"readChunk"],[77,17,80,21],[77,19,80,23,"notImplemented"],[77,33,80,37],[77,34,80,38],[77,45,80,49],[77,46,80,50],[78,8,81,12,"readFloat16"],[78,19,81,23],[78,21,81,25],[78,30,81,12,"readFloat16"],[78,41,81,23,"readFloat16"],[78,42,81,23],[78,44,81,37],[79,10,82,16],[79,14,82,20,"half"],[79,18,82,24],[79,21,82,27],[79,25,82,31],[79,26,82,32,"readUint16"],[79,36,82,42],[79,37,82,43],[79,38,82,44],[80,10,83,16],[80,14,83,20,"exponent"],[80,22,83,28],[80,25,83,31],[80,26,83,32,"half"],[80,30,83,36],[80,33,83,39],[80,39,83,45],[80,44,83,50],[80,46,83,52],[81,10,84,16],[81,14,84,20,"mantissa"],[81,22,84,28],[81,25,84,31,"half"],[81,29,84,35],[81,32,84,38],[81,37,84,43],[82,10,85,16],[82,14,85,20,"negative"],[82,22,85,28],[82,25,85,31,"half"],[82,29,85,35],[82,32,85,38],[82,38,85,44],[83,10,86,16],[83,14,86,20,"exponent"],[83,22,86,28],[83,27,86,33],[83,31,86,37],[83,33,86,39],[84,12,87,20],[84,16,87,24,"mantissa"],[84,24,87,32],[84,29,87,37],[84,30,87,38],[84,32,87,40],[85,14,88,24],[85,21,88,31,"negative"],[85,29,88,39],[85,32,88,42],[85,33,88,43,"Infinity"],[85,41,88,51],[85,44,88,54,"Infinity"],[85,52,88,62],[86,12,89,20],[87,12,90,20],[87,19,90,27,"NaN"],[87,22,90,30],[88,10,91,16],[89,10,92,16],[89,14,92,20,"magnitude"],[89,23,92,29],[89,26,92,32,"exponent"],[89,34,92,40],[89,37,93,22,"Math"],[89,41,93,26],[89,42,93,27,"pow"],[89,45,93,30],[89,46,93,31],[89,47,93,32],[89,49,93,34,"exponent"],[89,57,93,42],[89,60,93,45],[89,62,93,47],[89,63,93,48],[89,67,93,52],[89,71,93,56],[89,74,93,59,"mantissa"],[89,82,93,67],[89,83,93,68],[89,86,94,22,"Math"],[89,90,94,26],[89,91,94,27,"pow"],[89,94,94,30],[89,95,94,31],[89,96,94,32],[89,98,94,34],[89,99,94,35],[89,101,94,37],[89,102,94,38],[89,105,94,41,"mantissa"],[89,113,94,49],[90,10,95,16],[90,17,95,23,"negative"],[90,25,95,31],[90,28,95,34],[90,29,95,35,"magnitude"],[90,38,95,44],[90,41,95,47,"magnitude"],[90,50,95,56],[91,8,96,12],[91,9,96,13],[92,8,97,12,"readFloat32"],[92,19,97,23],[92,21,97,25],[92,30,97,12,"readFloat32"],[92,41,97,23,"readFloat32"],[92,42,97,23],[92,44,97,37],[93,10,98,16],[93,14,98,20,"intValue"],[93,22,98,28],[93,25,98,31],[93,29,98,35],[93,30,98,36,"readUint32"],[93,40,98,46],[93,41,98,47],[93,42,98,48],[94,10,99,16],[94,14,99,20,"exponent"],[94,22,99,28],[94,25,99,31],[94,26,99,32,"intValue"],[94,34,99,40],[94,37,99,43],[94,47,99,53],[94,52,99,58],[94,54,99,60],[95,10,100,16],[95,14,100,20,"mantissa"],[95,22,100,28],[95,25,100,31,"intValue"],[95,33,100,39],[95,36,100,42],[95,44,100,50],[96,10,101,16],[96,14,101,20,"negative"],[96,22,101,28],[96,25,101,31,"intValue"],[96,33,101,39],[96,36,101,42],[96,46,101,52],[97,10,102,16],[97,14,102,20,"exponent"],[97,22,102,28],[97,27,102,33],[97,31,102,37],[97,33,102,39],[98,12,103,20],[98,16,103,24,"mantissa"],[98,24,103,32],[98,29,103,37],[98,30,103,38],[98,32,103,40],[99,14,104,24],[99,21,104,31,"negative"],[99,29,104,39],[99,32,104,42],[99,33,104,43,"Infinity"],[99,41,104,51],[99,44,104,54,"Infinity"],[99,52,104,62],[100,12,105,20],[101,12,106,20],[101,19,106,27,"NaN"],[101,22,106,30],[102,10,107,16],[103,10,108,16],[103,14,108,20,"magnitude"],[103,23,108,29],[103,26,108,32,"exponent"],[103,34,108,40],[103,37,109,22,"Math"],[103,41,109,26],[103,42,109,27,"pow"],[103,45,109,30],[103,46,109,31],[103,47,109,32],[103,49,109,34,"exponent"],[103,57,109,42],[103,60,109,45],[103,62,109,47],[103,65,109,50],[103,68,109,53],[103,69,109,54],[103,73,109,58],[103,80,109,65],[103,83,109,68,"mantissa"],[103,91,109,76],[103,92,109,77],[103,95,110,22,"Math"],[103,99,110,26],[103,100,110,27,"pow"],[103,103,110,30],[103,104,110,31],[103,105,110,32],[103,107,110,34],[103,108,110,35],[103,110,110,37],[103,113,110,40],[103,116,110,43],[103,117,110,44],[103,120,110,47,"mantissa"],[103,128,110,55],[104,10,111,16],[104,17,111,23,"negative"],[104,25,111,31],[104,28,111,34],[104,29,111,35,"magnitude"],[104,38,111,44],[104,41,111,47,"magnitude"],[104,50,111,56],[105,8,112,12],[105,9,112,13],[106,8,113,12,"readFloat64"],[106,19,113,23],[106,21,113,25],[106,30,113,12,"readFloat64"],[106,41,113,23,"readFloat64"],[106,42,113,23],[106,44,113,37],[107,10,114,16],[107,14,114,20,"int1"],[107,18,114,24],[107,21,114,27],[107,25,114,31],[107,26,114,32,"readUint32"],[107,36,114,42],[107,37,114,43],[107,38,114,44],[108,12,114,46,"int2"],[108,16,114,50],[108,19,114,53],[108,23,114,57],[108,24,114,58,"readUint32"],[108,34,114,68],[108,35,114,69],[108,36,114,70],[109,10,115,16],[109,14,115,20,"exponent"],[109,22,115,28],[109,25,115,32,"int1"],[109,29,115,36],[109,33,115,40],[109,35,115,42],[109,38,115,46],[109,43,115,51],[110,10,116,16],[110,14,116,20,"mantissa"],[110,22,116,28],[110,25,116,31],[110,26,116,32,"int1"],[110,30,116,36],[110,33,116,39],[110,40,116,46],[110,44,116,50],[110,54,116,60],[110,57,116,63,"int2"],[110,61,116,67],[111,10,117,16],[111,14,117,20,"negative"],[111,22,117,28],[111,25,117,31,"int1"],[111,29,117,35],[111,32,117,38],[111,42,117,48],[112,10,118,16],[112,14,118,20,"exponent"],[112,22,118,28],[112,27,118,33],[112,32,118,38],[112,34,118,40],[113,12,119,20],[113,16,119,24,"mantissa"],[113,24,119,32],[113,29,119,37],[113,30,119,38],[113,32,119,40],[114,14,120,24],[114,21,120,31,"negative"],[114,29,120,39],[114,32,120,42],[114,33,120,43,"Infinity"],[114,41,120,51],[114,44,120,54,"Infinity"],[114,52,120,62],[115,12,121,20],[116,12,122,20],[116,19,122,27,"NaN"],[116,22,122,30],[117,10,123,16],[118,10,124,16],[118,14,124,20,"magnitude"],[118,23,124,29],[118,26,124,32,"exponent"],[118,34,124,40],[118,37,125,22,"Math"],[118,41,125,26],[118,42,125,27,"pow"],[118,45,125,30],[118,46,125,31],[118,47,125,32],[118,49,125,34,"exponent"],[118,57,125,42],[118,60,125,45],[118,62,125,47],[118,65,125,50],[118,69,125,54],[118,70,125,55],[118,74,125,59],[118,90,125,75],[118,93,125,78,"mantissa"],[118,101,125,86],[118,102,125,87],[118,105,126,22,"Math"],[118,109,126,26],[118,110,126,27,"pow"],[118,113,126,30],[118,114,126,31],[118,115,126,32],[118,117,126,34],[118,118,126,35],[118,120,126,37],[118,123,126,40],[118,127,126,44],[118,128,126,45],[118,131,126,48,"mantissa"],[118,139,126,56],[119,10,127,16],[119,17,127,23,"negative"],[119,25,127,31],[119,28,127,34],[119,29,127,35,"magnitude"],[119,38,127,44],[119,41,127,47,"magnitude"],[119,50,127,56],[120,8,128,12],[120,9,128,13],[121,8,129,12,"readUint16"],[121,18,129,22],[121,20,129,24],[121,29,129,12,"readUint16"],[121,39,129,22,"readUint16"],[121,40,129,22],[121,42,129,36],[122,10,130,16],[122,17,130,23],[122,21,130,27],[122,22,130,28,"readByte"],[122,30,130,36],[122,31,130,37],[122,32,130,38],[122,35,130,41],[122,38,130,44],[122,41,130,47],[122,45,130,51],[122,46,130,52,"readByte"],[122,54,130,60],[122,55,130,61],[122,56,130,62],[123,8,131,12],[123,9,131,13],[124,8,132,12,"readUint32"],[124,18,132,22],[124,20,132,24],[124,29,132,12,"readUint32"],[124,39,132,22,"readUint32"],[124,40,132,22],[124,42,132,36],[125,10,133,16],[125,17,133,23],[125,21,133,27],[125,22,133,28,"readUint16"],[125,32,133,38],[125,33,133,39],[125,34,133,40],[125,37,133,43],[125,42,133,48],[125,45,133,51],[125,49,133,55],[125,50,133,56,"readUint16"],[125,60,133,66],[125,61,133,67],[125,62,133,68],[126,8,134,12],[126,9,134,13],[127,8,135,12,"readUint64"],[127,18,135,22],[127,20,135,24],[127,29,135,12,"readUint64"],[127,39,135,22,"readUint64"],[127,40,135,22],[127,42,135,36],[128,10,136,16],[128,17,136,23],[128,21,136,27],[128,22,136,28,"readUint32"],[128,32,136,38],[128,33,136,39],[128,34,136,40],[128,37,136,43],[128,47,136,53],[128,50,136,56],[128,54,136,60],[128,55,136,61,"readUint32"],[128,65,136,71],[128,66,136,72],[128,67,136,73],[129,8,137,12],[130,6,138,8],[130,7,138,9],[131,6,139,8],[131,15,139,17,"Writer"],[131,21,139,23,"Writer"],[131,22,139,23],[131,24,139,26],[131,25,139,28],[132,6,140,8,"Writer"],[132,12,140,14],[132,13,140,15,"prototype"],[132,22,140,24],[132,25,140,27],[133,8,141,12,"writeByte"],[133,17,141,21],[133,19,141,23,"notImplemented"],[133,33,141,37],[133,34,141,38],[133,45,141,49],[133,46,141,50],[134,8,142,12,"result"],[134,14,142,18],[134,16,142,20,"notImplemented"],[134,30,142,34],[134,31,142,35],[134,39,142,43],[134,40,142,44],[135,8,143,12,"writeFloat16"],[135,20,143,24],[135,22,143,26,"notImplemented"],[135,36,143,40],[135,37,143,41],[135,51,143,55],[135,52,143,56],[136,8,144,12,"writeFloat32"],[136,20,144,24],[136,22,144,26,"notImplemented"],[136,36,144,40],[136,37,144,41],[136,51,144,55],[136,52,144,56],[137,8,145,12,"writeFloat64"],[137,20,145,24],[137,22,145,26,"notImplemented"],[137,36,145,40],[137,37,145,41],[137,51,145,55],[137,52,145,56],[138,8,146,12,"writeUint16"],[138,19,146,23],[138,21,146,25],[138,30,146,12,"writeUint16"],[138,41,146,23,"writeUint16"],[138,42,146,35,"value"],[138,47,146,40],[138,49,146,42],[139,10,147,16],[139,14,147,20],[139,15,147,21,"writeByte"],[139,24,147,30],[139,25,147,32,"value"],[139,30,147,37],[139,34,147,41],[139,35,147,42],[139,38,147,46],[139,42,147,50],[139,43,147,51],[140,10,148,16],[140,14,148,20],[140,15,148,21,"writeByte"],[140,24,148,30],[140,25,148,31,"value"],[140,30,148,36],[140,33,148,39],[140,37,148,43],[140,38,148,44],[141,8,149,12],[141,9,149,13],[142,8,150,12,"writeUint32"],[142,19,150,23],[142,21,150,25],[142,30,150,12,"writeUint32"],[142,41,150,23,"writeUint32"],[142,42,150,35,"value"],[142,47,150,40],[142,49,150,42],[143,10,151,16],[143,14,151,20],[143,15,151,21,"writeUint16"],[143,26,151,32],[143,27,151,34,"value"],[143,32,151,39],[143,36,151,43],[143,38,151,45],[143,41,151,49],[143,47,151,55],[143,48,151,56],[144,10,152,16],[144,14,152,20],[144,15,152,21,"writeUint16"],[144,26,152,32],[144,27,152,33,"value"],[144,32,152,38],[144,35,152,41],[144,41,152,47],[144,42,152,48],[145,8,153,12],[145,9,153,13],[146,8,154,12,"writeUint64"],[146,19,154,23],[146,21,154,25],[146,30,154,12,"writeUint64"],[146,41,154,23,"writeUint64"],[146,42,154,35,"value"],[146,47,154,40],[146,49,154,42],[147,10,155,16],[147,14,155,20,"value"],[147,19,155,25],[147,23,155,29],[147,39,155,45],[147,43,155,49,"value"],[147,48,155,54],[147,52,155,58],[147,53,155,59],[147,69,155,75],[147,71,155,77],[148,12,156,20],[148,18,156,26],[148,22,156,30,"Error"],[148,27,156,35],[148,28,156,36],[148,55,156,63],[148,58,157,24,"value"],[148,63,157,29],[148,66,158,24],[148,109,158,67],[148,110,158,68],[149,10,159,16],[150,10,160,16],[150,14,160,20],[150,15,160,21,"writeUint32"],[150,26,160,32],[150,27,160,33,"Math"],[150,31,160,37],[150,32,160,38,"floor"],[150,37,160,43],[150,38,160,44,"value"],[150,43,160,49],[150,46,160,52],[150,56,160,62],[150,57,160,63],[150,58,160,64],[151,10,161,16],[151,14,161,20],[151,15,161,21,"writeUint32"],[151,26,161,32],[151,27,161,33,"value"],[151,32,161,38],[151,35,161,41],[151,45,161,51],[151,46,161,52],[152,8,162,12],[152,9,162,13],[153,8,163,12,"writeString"],[153,19,163,23],[153,21,163,25,"notImplemented"],[153,35,163,39],[153,36,163,40],[153,49,163,53],[153,50,163,54],[154,8,164,12,"canWriteBinary"],[154,22,164,26],[154,24,164,28],[154,33,164,12,"canWriteBinary"],[154,47,164,26,"canWriteBinary"],[154,48,164,38,"chunk"],[154,53,164,43],[154,55,164,45],[155,10,165,16],[155,17,165,23],[155,22,165,28],[156,8,166,12],[156,9,166,13],[157,8,167,12,"writeBinary"],[157,19,167,23],[157,21,167,25,"notImplemented"],[157,35,167,39],[157,36,167,40],[157,48,167,52],[158,6,168,8],[158,7,168,9],[159,6,169,8],[159,15,169,17,"readHeaderRaw"],[159,28,169,30,"readHeaderRaw"],[159,29,169,31,"reader"],[159,35,169,37],[159,37,169,39],[160,8,170,12],[160,12,170,16,"firstByte"],[160,21,170,25],[160,24,170,28,"reader"],[160,30,170,34],[160,31,170,35,"readByte"],[160,39,170,43],[160,40,170,44],[160,41,170,45],[161,8,171,12],[161,12,171,16,"majorType"],[161,21,171,25],[161,24,171,28,"firstByte"],[161,33,171,37],[161,37,171,41],[161,38,171,42],[162,10,171,44,"value"],[162,15,171,49],[162,18,171,52,"firstByte"],[162,27,171,61],[162,30,171,64],[162,34,171,68],[163,8,172,12],[163,15,172,19],[164,10,172,21,"type"],[164,14,172,25],[164,16,172,27,"majorType"],[164,25,172,36],[165,10,172,38,"value"],[165,15,172,43],[165,17,172,45,"value"],[166,8,172,51],[166,9,172,52],[167,6,173,8],[168,6,174,8],[168,15,174,17,"valueFromHeader"],[168,30,174,32,"valueFromHeader"],[168,31,174,33,"header"],[168,37,174,39],[168,39,174,41,"reader"],[168,45,174,47],[168,47,174,49],[169,8,175,12],[169,12,175,16,"value"],[169,17,175,21],[169,20,175,24,"header"],[169,26,175,30],[169,27,175,31,"value"],[169,32,175,36],[170,8,176,12],[170,12,176,16,"value"],[170,17,176,21],[170,20,176,24],[170,22,176,26],[170,24,176,28],[171,10,177,16],[171,17,177,23,"value"],[171,22,177,28],[172,8,178,12],[172,9,178,13],[172,15,179,17],[172,19,179,21,"value"],[172,24,179,26],[172,28,179,30],[172,30,179,32],[172,32,179,34],[173,10,180,16],[173,17,180,23,"reader"],[173,23,180,29],[173,24,180,30,"readByte"],[173,32,180,38],[173,33,180,39],[173,34,180,40],[174,8,181,12],[174,9,181,13],[174,15,182,17],[174,19,182,21,"value"],[174,24,182,26],[174,28,182,30],[174,30,182,32],[174,32,182,34],[175,10,183,16],[175,17,183,23,"reader"],[175,23,183,29],[175,24,183,30,"readUint16"],[175,34,183,40],[175,35,183,41],[175,36,183,42],[176,8,184,12],[176,9,184,13],[176,15,185,17],[176,19,185,21,"value"],[176,24,185,26],[176,28,185,30],[176,30,185,32],[176,32,185,34],[177,10,186,16],[177,17,186,23,"reader"],[177,23,186,29],[177,24,186,30,"readUint32"],[177,34,186,40],[177,35,186,41],[177,36,186,42],[178,8,187,12],[178,9,187,13],[178,15,188,17],[178,19,188,21,"value"],[178,24,188,26],[178,28,188,30],[178,30,188,32],[178,32,188,34],[179,10,189,16],[179,17,189,23,"reader"],[179,23,189,29],[179,24,189,30,"readUint64"],[179,34,189,40],[179,35,189,41],[179,36,189,42],[180,8,190,12],[180,9,190,13],[180,15,191,17],[180,19,191,21,"value"],[180,24,191,26],[180,28,191,30],[180,30,191,32],[180,32,191,34],[181,10,192,16],[181,17,192,23],[181,21,192,27],[182,8,193,12],[183,8,194,12,"notImplemented"],[183,22,194,26],[183,23,194,27],[183,42,194,46],[183,45,194,49,"value"],[183,50,194,54],[183,51,194,55],[183,52,194,56],[183,53,194,57],[184,6,195,8],[185,6,196,8],[185,15,196,17,"writeHeaderRaw"],[185,29,196,31,"writeHeaderRaw"],[185,30,196,32,"type"],[185,34,196,36],[185,36,196,38,"value"],[185,41,196,43],[185,43,196,45,"writer"],[185,49,196,51],[185,51,196,53],[186,8,197,12,"writer"],[186,14,197,18],[186,15,197,19,"writeByte"],[186,24,197,28],[186,25,197,30,"type"],[186,29,197,34],[186,33,197,38],[186,34,197,39],[186,37,197,43,"value"],[186,42,197,48],[186,43,197,49],[187,6,198,8],[188,6,199,8],[188,15,199,17,"writeHeader"],[188,26,199,28,"writeHeader"],[188,27,199,29,"type"],[188,31,199,33],[188,33,199,35,"value"],[188,38,199,40],[188,40,199,42,"writer"],[188,46,199,48],[188,48,199,50],[189,8,200,12],[189,12,200,16,"firstByte"],[189,21,200,25],[189,24,200,28,"type"],[189,28,200,32],[189,32,200,36],[189,33,200,37],[190,8,201,12],[190,12,201,16,"value"],[190,17,201,21],[190,20,201,24],[190,22,201,26],[190,24,201,28],[191,10,202,16,"writer"],[191,16,202,22],[191,17,202,23,"writeByte"],[191,26,202,32],[191,27,202,33,"firstByte"],[191,36,202,42],[191,39,202,45,"value"],[191,44,202,50],[191,45,202,51],[192,8,203,12],[192,9,203,13],[192,15,204,17],[192,19,204,21,"value"],[192,24,204,26],[192,27,204,29],[192,30,204,32],[192,32,204,34],[193,10,205,16,"writer"],[193,16,205,22],[193,17,205,23,"writeByte"],[193,26,205,32],[193,27,205,33,"firstByte"],[193,36,205,42],[193,39,205,45],[193,41,205,47],[193,42,205,48],[194,10,206,16,"writer"],[194,16,206,22],[194,17,206,23,"writeByte"],[194,26,206,32],[194,27,206,33,"value"],[194,32,206,38],[194,33,206,39],[195,8,207,12],[195,9,207,13],[195,15,208,17],[195,19,208,21,"value"],[195,24,208,26],[195,27,208,29],[195,32,208,34],[195,34,208,36],[196,10,209,16,"writer"],[196,16,209,22],[196,17,209,23,"writeByte"],[196,26,209,32],[196,27,209,33,"firstByte"],[196,36,209,42],[196,39,209,45],[196,41,209,47],[196,42,209,48],[197,10,210,16,"writer"],[197,16,210,22],[197,17,210,23,"writeUint16"],[197,28,210,34],[197,29,210,35,"value"],[197,34,210,40],[197,35,210,41],[198,8,211,12],[198,9,211,13],[198,15,212,17],[198,19,212,21,"value"],[198,24,212,26],[198,27,212,29],[198,37,212,39],[198,39,212,41],[199,10,213,16,"writer"],[199,16,213,22],[199,17,213,23,"writeByte"],[199,26,213,32],[199,27,213,33,"firstByte"],[199,36,213,42],[199,39,213,45],[199,41,213,47],[199,42,213,48],[200,10,214,16,"writer"],[200,16,214,22],[200,17,214,23,"writeUint32"],[200,28,214,34],[200,29,214,35,"value"],[200,34,214,40],[200,35,214,41],[201,8,215,12],[201,9,215,13],[201,15,216,17],[202,10,217,16,"writer"],[202,16,217,22],[202,17,217,23,"writeByte"],[202,26,217,32],[202,27,217,33,"firstByte"],[202,36,217,42],[202,39,217,45],[202,41,217,47],[202,42,217,48],[203,10,218,16,"writer"],[203,16,218,22],[203,17,218,23,"writeUint64"],[203,28,218,34],[203,29,218,35,"value"],[203,34,218,40],[203,35,218,41],[204,8,219,12],[205,6,220,8],[206,6,221,8],[206,10,221,12,"stopCode"],[206,18,221,20],[206,21,221,23],[206,25,221,27,"Error"],[206,30,221,32],[206,31,221,33],[206,32,221,34],[207,6,222,8],[207,15,222,17,"decodeReader"],[207,27,222,29,"decodeReader"],[207,28,222,30,"reader"],[207,34,222,36],[207,36,222,38],[208,8,223,12],[208,12,223,16,"header"],[208,18,223,22],[208,21,223,25,"readHeaderRaw"],[208,34,223,38],[208,35,223,39,"reader"],[208,41,223,45],[208,42,223,46],[209,8,224,12],[209,16,224,20,"header"],[209,22,224,26],[209,23,224,27,"type"],[209,27,224,31],[210,10,225,16],[210,15,225,21],[210,16,225,22],[211,12,226,20],[211,19,226,27,"valueFromHeader"],[211,34,226,42],[211,35,226,43,"header"],[211,41,226,49],[211,43,226,51,"reader"],[211,49,226,57],[211,50,226,58],[212,10,227,16],[212,15,227,21],[212,16,227,22],[213,12,228,20],[213,19,228,27],[213,20,228,28],[213,21,228,29],[213,24,228,32,"valueFromHeader"],[213,39,228,47],[213,40,228,48,"header"],[213,46,228,54],[213,48,228,56,"reader"],[213,54,228,62],[213,55,228,63],[214,10,229,16],[214,15,229,21],[214,16,229,22],[215,12,230,20],[215,19,230,27,"reader"],[215,25,230,33],[215,26,230,34,"readChunk"],[215,35,230,43],[215,36,230,44,"valueFromHeader"],[215,51,230,59],[215,52,230,60,"header"],[215,58,230,66],[215,60,230,68,"reader"],[215,66,230,74],[215,67,230,75],[215,68,230,76],[216,10,231,16],[216,15,231,21],[216,16,231,22],[217,12,232,20],[217,16,232,24,"buffer"],[217,22,232,30],[217,25,232,33,"reader"],[217,31,232,39],[217,32,232,40,"readChunk"],[217,41,232,49],[217,42,232,50,"valueFromHeader"],[217,57,232,65],[217,58,232,66,"header"],[217,64,232,72],[217,66,232,74,"reader"],[217,72,232,80],[217,73,232,81],[217,74,232,82],[218,12,233,20],[218,19,233,27,"buffer"],[218,25,233,33],[218,26,233,34,"toString"],[218,34,233,42],[218,35,233,43],[218,42,233,50],[218,43,233,51],[219,10,234,16],[219,15,234,21],[219,16,234,22],[220,10,235,16],[220,15,235,21],[220,16,235,22],[221,12,236,20],[221,16,236,24,"arrayLength"],[221,27,236,35],[221,30,236,38,"valueFromHeader"],[221,45,236,53],[221,46,236,54,"header"],[221,52,236,60],[221,54,236,62,"reader"],[221,60,236,68],[221,61,236,69],[222,12,237,20],[222,16,237,24,"result"],[222,22,237,30],[222,25,237,33],[222,27,237,35],[223,12,238,20],[223,16,238,24,"arrayLength"],[223,27,238,35],[223,32,238,40],[223,36,238,44],[223,38,238,46],[224,14,239,24],[224,18,239,28,"header"],[224,24,239,34],[224,25,239,35,"type"],[224,29,239,39],[224,34,239,44],[224,35,239,45],[224,37,239,47],[225,16,240,28,"arrayLength"],[225,27,240,39],[225,31,240,43],[225,32,240,44],[226,14,241,24],[227,14,242,24],[227,19,242,29],[227,23,242,33,"i"],[227,24,242,34],[227,27,242,37],[227,28,242,38],[227,30,242,40,"i"],[227,31,242,41],[227,34,242,44,"arrayLength"],[227,45,242,55],[227,47,242,57,"i"],[227,48,242,58],[227,50,242,60],[227,52,242,62],[228,16,243,28,"result"],[228,22,243,34],[228,23,243,35,"i"],[228,24,243,36],[228,25,243,37],[228,28,243,40,"decodeReader"],[228,40,243,52],[228,41,243,53,"reader"],[228,47,243,59],[228,48,243,60],[229,14,244,24],[230,12,245,20],[230,13,245,21],[230,19,246,25],[231,14,247,24],[231,18,247,28,"item"],[231,22,247,32],[232,14,248,24],[232,21,248,31],[232,22,248,32,"item"],[232,26,248,36],[232,29,248,39,"decodeReader"],[232,41,248,51],[232,42,248,52,"reader"],[232,48,248,58],[232,49,248,59],[232,55,248,65,"stopCode"],[232,63,248,73],[232,65,248,75],[233,16,249,28,"result"],[233,22,249,34],[233,23,249,35,"push"],[233,27,249,39],[233,28,249,40,"item"],[233,32,249,44],[233,33,249,45],[234,14,250,24],[235,12,251,20],[236,12,252,20],[236,16,252,24,"header"],[236,22,252,30],[236,23,252,31,"type"],[236,27,252,35],[236,32,252,40],[236,33,252,41],[236,35,252,43],[237,14,253,24],[237,18,253,28,"objResult"],[237,27,253,37],[237,30,253,40],[237,31,253,41],[237,32,253,42],[238,14,254,24],[238,19,254,29],[238,23,254,33,"i"],[238,24,254,34],[238,27,254,37],[238,28,254,38],[238,30,254,40,"i"],[238,31,254,41],[238,34,254,44,"result"],[238,40,254,50],[238,41,254,51,"length"],[238,47,254,57],[238,49,254,59,"i"],[238,50,254,60],[238,54,254,64],[238,55,254,65],[238,57,254,67],[239,16,255,28,"objResult"],[239,25,255,37],[239,26,255,38,"result"],[239,32,255,44],[239,33,255,45,"i"],[239,34,255,46],[239,35,255,47],[239,36,255,48],[239,39,255,51,"result"],[239,45,255,57],[239,46,255,58,"i"],[239,47,255,59],[239,50,255,62],[239,51,255,63],[239,52,255,64],[240,14,256,24],[241,14,257,24],[241,21,257,31,"objResult"],[241,30,257,40],[242,12,258,20],[242,13,258,21],[242,19,259,25],[243,14,260,24],[243,21,260,31,"result"],[243,27,260,37],[244,12,261,20],[245,10,262,16],[245,15,262,21],[245,16,262,22],[246,12,263,20],[246,16,263,24,"tag"],[246,19,263,27],[246,22,263,30,"valueFromHeader"],[246,37,263,45],[246,38,263,46,"header"],[246,44,263,52],[246,46,263,54,"reader"],[246,52,263,60],[246,53,263,61],[247,12,264,20],[247,16,264,24,"decoder"],[247,23,264,31],[247,26,264,34,"semanticDecoders"],[247,42,264,50],[247,43,264,51,"tag"],[247,46,264,54],[247,47,264,55],[248,12,265,20],[248,16,265,24,"result"],[248,22,265,30],[248,25,265,33,"decodeReader"],[248,37,265,45],[248,38,265,46,"reader"],[248,44,265,52],[248,45,265,53],[249,12,266,20],[249,19,266,27,"decoder"],[249,26,266,34],[249,29,266,37,"decoder"],[249,36,266,44],[249,37,266,45,"result"],[249,43,266,51],[249,44,266,52],[249,47,266,55,"result"],[249,53,266,61],[250,10,267,16],[250,15,267,21],[250,16,267,22],[251,12,268,20],[251,16,268,24,"header"],[251,22,268,30],[251,23,268,31,"value"],[251,28,268,36],[251,33,268,41],[251,35,268,43],[251,37,268,45],[252,14,269,24],[252,21,269,31,"reader"],[252,27,269,37],[252,28,269,38,"readFloat16"],[252,39,269,49],[252,40,269,50],[252,41,269,51],[253,12,270,20],[253,13,270,21],[253,19,271,25],[253,23,271,29,"header"],[253,29,271,35],[253,30,271,36,"value"],[253,35,271,41],[253,40,271,46],[253,42,271,48],[253,44,271,50],[254,14,272,24],[254,21,272,31,"reader"],[254,27,272,37],[254,28,272,38,"readFloat32"],[254,39,272,49],[254,40,272,50],[254,41,272,51],[255,12,273,20],[255,13,273,21],[255,19,274,25],[255,23,274,29,"header"],[255,29,274,35],[255,30,274,36,"value"],[255,35,274,41],[255,40,274,46],[255,42,274,48],[255,44,274,50],[256,14,275,24],[256,21,275,31,"reader"],[256,27,275,37],[256,28,275,38,"readFloat64"],[256,39,275,49],[256,40,275,50],[256,41,275,51],[257,12,276,20],[258,12,277,20],[258,20,277,28,"valueFromHeader"],[258,35,277,43],[258,36,277,44,"header"],[258,42,277,50],[258,44,277,52,"reader"],[258,50,277,58],[258,51,277,59],[259,14,278,24],[259,19,278,29],[259,21,278,31],[260,16,279,28],[260,23,279,35],[260,28,279,40],[261,14,280,24],[261,19,280,29],[261,21,280,31],[262,16,281,28],[262,23,281,35],[262,27,281,39],[263,14,282,24],[263,19,282,29],[263,21,282,31],[264,16,283,28],[264,23,283,35],[264,27,283,39],[265,14,284,24],[265,19,284,29],[265,21,284,31],[266,16,285,28],[266,23,285,35,"undefined"],[266,32,285,44],[267,14,286,24],[267,19,286,29],[267,23,286,33],[268,16,287,28],[268,23,287,35,"stopCode"],[268,31,287,43],[269,14,288,24],[270,16,289,28],[270,22,289,34],[270,26,289,38,"Error"],[270,31,289,43],[270,32,289,44],[270,55,289,67],[270,58,289,70,"header"],[270,64,289,76],[270,65,289,77,"value"],[270,70,289,82],[270,71,289,83],[271,12,290,20],[272,10,291,16],[273,12,292,20],[273,18,292,26],[273,22,292,30,"Error"],[273,27,292,35],[273,28,292,36],[273,50,292,58],[273,53,292,61,"JSON"],[273,57,292,65],[273,58,292,66,"stringify"],[273,67,292,75],[273,68,292,76,"header"],[273,74,292,82],[273,75,292,83],[273,76,292,84],[274,8,293,12],[275,8,294,12],[275,14,294,18],[275,18,294,22,"Error"],[275,23,294,27],[275,24,294,28],[275,45,294,49],[275,46,294,50],[276,6,295,8],[277,6,296,8],[277,15,296,17,"encodeWriter"],[277,27,296,29,"encodeWriter"],[277,28,296,30,"data"],[277,32,296,34],[277,34,296,36,"writer"],[277,40,296,42],[277,42,296,44],[278,8,297,12],[278,13,297,17],[278,17,297,21,"i"],[278,18,297,22],[278,21,297,25],[278,22,297,26],[278,24,297,28,"i"],[278,25,297,29],[278,28,297,32,"semanticEncoders"],[278,44,297,48],[278,45,297,49,"length"],[278,51,297,55],[278,53,297,57,"i"],[278,54,297,58],[278,56,297,60],[278,58,297,62],[279,10,298,16],[279,14,298,20,"replacement"],[279,25,298,31],[279,28,298,34,"semanticEncoders"],[279,44,298,50],[279,45,298,51,"i"],[279,46,298,52],[279,47,298,53],[279,48,298,54,"fn"],[279,50,298,56],[279,51,298,57,"data"],[279,55,298,61],[279,56,298,62],[280,10,299,16],[280,14,299,20,"replacement"],[280,25,299,31],[280,30,299,36,"undefined"],[280,39,299,45],[280,41,299,47],[281,12,300,20,"writeHeader"],[281,23,300,31],[281,24,300,32],[281,25,300,33],[281,27,300,35,"semanticEncoders"],[281,43,300,51],[281,44,300,52,"i"],[281,45,300,53],[281,46,300,54],[281,47,300,55,"tag"],[281,50,300,58],[281,52,300,60,"writer"],[281,58,300,66],[281,59,300,67],[282,12,301,20],[282,19,301,27,"encodeWriter"],[282,31,301,39],[282,32,301,40,"replacement"],[282,43,301,51],[282,45,301,53,"writer"],[282,51,301,59],[282,52,301,60],[283,10,302,16],[284,8,303,12],[285,8,304,12],[285,12,304,16,"data"],[285,16,304,20],[285,20,304,24],[285,27,304,31,"data"],[285,31,304,35],[285,32,304,36,"toCBOR"],[285,38,304,42],[285,43,304,47],[285,53,304,57],[285,55,304,59],[286,10,305,16,"data"],[286,14,305,20],[286,17,305,23,"data"],[286,21,305,27],[286,22,305,28,"toCBOR"],[286,28,305,34],[286,29,305,35],[286,30,305,36],[287,8,306,12],[288,8,307,12],[288,12,307,16,"data"],[288,16,307,20],[288,21,307,25],[288,26,307,30],[288,28,307,32],[289,10,308,16,"writeHeader"],[289,21,308,27],[289,22,308,28],[289,23,308,29],[289,25,308,31],[289,27,308,33],[289,29,308,35,"writer"],[289,35,308,41],[289,36,308,42],[290,8,309,12],[290,9,309,13],[290,15,310,17],[290,19,310,21,"data"],[290,23,310,25],[290,28,310,30],[290,32,310,34],[290,34,310,36],[291,10,311,16,"writeHeader"],[291,21,311,27],[291,22,311,28],[291,23,311,29],[291,25,311,31],[291,27,311,33],[291,29,311,35,"writer"],[291,35,311,41],[291,36,311,42],[292,8,312,12],[292,9,312,13],[292,15,313,17],[292,19,313,21,"data"],[292,23,313,25],[292,28,313,30],[292,32,313,34],[292,34,313,36],[293,10,314,16,"writeHeader"],[293,21,314,27],[293,22,314,28],[293,23,314,29],[293,25,314,31],[293,27,314,33],[293,29,314,35,"writer"],[293,35,314,41],[293,36,314,42],[294,8,315,12],[294,9,315,13],[294,15,316,17],[294,19,316,21,"data"],[294,23,316,25],[294,28,316,30,"undefined"],[294,37,316,39],[294,39,316,41],[295,10,317,16,"writeHeader"],[295,21,317,27],[295,22,317,28],[295,23,317,29],[295,25,317,31],[295,27,317,33],[295,29,317,35,"writer"],[295,35,317,41],[295,36,317,42],[296,8,318,12],[296,9,318,13],[296,15,319,17],[296,19,319,21],[296,26,319,28,"data"],[296,30,319,32],[296,35,319,37],[296,43,319,45],[296,45,319,47],[297,10,320,16],[297,14,320,20,"Math"],[297,18,320,24],[297,19,320,25,"floor"],[297,24,320,30],[297,25,320,31,"data"],[297,29,320,35],[297,30,320,36],[297,35,320,41,"data"],[297,39,320,45],[297,43,321,20,"data"],[297,47,321,24],[297,50,321,27],[297,66,321,43],[297,70,322,20,"data"],[297,74,322,24],[297,77,322,27],[297,78,322,28],[297,94,322,44],[297,96,322,46],[298,12,323,20],[298,16,323,24,"data"],[298,20,323,28],[298,23,323,31],[298,24,323,32],[298,26,323,34],[299,14,324,24,"writeHeader"],[299,25,324,35],[299,26,324,36],[299,27,324,37],[299,29,324,39],[299,30,324,40],[299,31,324,41],[299,34,324,44,"data"],[299,38,324,48],[299,40,324,50,"writer"],[299,46,324,56],[299,47,324,57],[300,12,325,20],[300,13,325,21],[300,19,326,25],[301,14,327,24,"writeHeader"],[301,25,327,35],[301,26,327,36],[301,27,327,37],[301,29,327,39,"data"],[301,33,327,43],[301,35,327,45,"writer"],[301,41,327,51],[301,42,327,52],[302,12,328,20],[303,10,329,16],[303,11,329,17],[303,17,330,21],[304,12,331,20,"writeHeaderRaw"],[304,26,331,34],[304,27,331,35],[304,28,331,36],[304,30,331,38],[304,32,331,40],[304,34,331,42,"writer"],[304,40,331,48],[304,41,331,49],[305,12,332,20,"writer"],[305,18,332,26],[305,19,332,27,"writeFloat64"],[305,31,332,39],[305,32,332,40,"data"],[305,36,332,44],[305,37,332,45],[306,10,333,16],[307,8,334,12],[307,9,334,13],[307,15,335,17],[307,19,335,21],[307,26,335,28,"data"],[307,30,335,32],[307,35,335,37],[307,43,335,45],[307,45,335,47],[308,10,336,16,"writer"],[308,16,336,22],[308,17,336,23,"writeString"],[308,28,336,34],[308,29,336,35,"data"],[308,33,336,39],[308,35,336,41],[308,45,336,51,"length"],[308,51,336,57],[308,53,336,59],[309,12,337,20,"writeHeader"],[309,23,337,31],[309,24,337,32],[309,25,337,33],[309,27,337,35,"length"],[309,33,337,41],[309,35,337,43,"writer"],[309,41,337,49],[309,42,337,50],[310,10,338,16],[310,11,338,17],[310,12,338,18],[311,8,339,12],[311,9,339,13],[311,15,340,17],[311,19,340,21,"writer"],[311,25,340,27],[311,26,340,28,"canWriteBinary"],[311,40,340,42],[311,41,340,43,"data"],[311,45,340,47],[311,46,340,48],[311,48,340,50],[312,10,341,16,"writer"],[312,16,341,22],[312,17,341,23,"writeBinary"],[312,28,341,34],[312,29,341,35,"data"],[312,33,341,39],[312,35,341,41],[312,45,341,51,"length"],[312,51,341,57],[312,53,341,59],[313,12,342,20,"writeHeader"],[313,23,342,31],[313,24,342,32],[313,25,342,33],[313,27,342,35,"length"],[313,33,342,41],[313,35,342,43,"writer"],[313,41,342,49],[313,42,342,50],[314,10,343,16],[314,11,343,17],[314,12,343,18],[315,8,344,12],[315,9,344,13],[315,15,345,17],[315,19,345,21],[315,26,345,28,"data"],[315,30,345,32],[315,35,345,37],[315,43,345,45],[315,45,345,47],[316,10,346,16],[316,14,346,20,"api"],[316,17,346,23],[316,18,346,24,"config"],[316,24,346,30],[316,25,346,31,"useToJSON"],[316,34,346,40],[316,38,346,44],[316,45,346,51,"data"],[316,49,346,55],[316,50,346,56,"toJSON"],[316,56,346,62],[316,61,346,67],[316,71,346,77],[316,73,346,79],[317,12,347,20,"data"],[317,16,347,24],[317,19,347,27,"data"],[317,23,347,31],[317,24,347,32,"toJSON"],[317,30,347,38],[317,31,347,39],[317,32,347,40],[318,10,348,16],[319,10,349,16],[319,14,349,20,"Array"],[319,19,349,25],[319,20,349,26,"isArray"],[319,27,349,33],[319,28,349,34,"data"],[319,32,349,38],[319,33,349,39],[319,35,349,41],[320,12,350,20,"writeHeader"],[320,23,350,31],[320,24,350,32],[320,25,350,33],[320,27,350,35,"data"],[320,31,350,39],[320,32,350,40,"length"],[320,38,350,46],[320,40,350,48,"writer"],[320,46,350,54],[320,47,350,55],[321,12,351,20],[321,17,351,25],[321,21,351,29,"i"],[321,22,351,30],[321,25,351,33],[321,26,351,34],[321,28,351,36,"i"],[321,29,351,37],[321,32,351,40,"data"],[321,36,351,44],[321,37,351,45,"length"],[321,43,351,51],[321,45,351,53,"i"],[321,46,351,54],[321,48,351,56],[321,50,351,58],[322,14,352,24,"encodeWriter"],[322,26,352,36],[322,27,352,37,"data"],[322,31,352,41],[322,32,352,42,"i"],[322,33,352,43],[322,34,352,44],[322,36,352,46,"writer"],[322,42,352,52],[322,43,352,53],[323,12,353,20],[324,10,354,16],[324,11,354,17],[324,17,355,21],[325,12,356,20],[325,16,356,24,"keys"],[325,20,356,28],[325,23,356,31,"Object"],[325,29,356,37],[325,30,356,38,"keys"],[325,34,356,42],[325,35,356,43,"data"],[325,39,356,47],[325,40,356,48],[326,12,357,20,"writeHeader"],[326,23,357,31],[326,24,357,32],[326,25,357,33],[326,27,357,35,"keys"],[326,31,357,39],[326,32,357,40,"length"],[326,38,357,46],[326,40,357,48,"writer"],[326,46,357,54],[326,47,357,55],[327,12,358,20],[327,17,358,25],[327,21,358,29,"i"],[327,22,358,30],[327,25,358,33],[327,26,358,34],[327,28,358,36,"i"],[327,29,358,37],[327,32,358,40,"keys"],[327,36,358,44],[327,37,358,45,"length"],[327,43,358,51],[327,45,358,53,"i"],[327,46,358,54],[327,48,358,56],[327,50,358,58],[328,14,359,24],[328,18,359,30,"number"],[328,24,359,36],[328,27,359,39,"parseInt"],[328,35,359,47],[328,36,359,48,"keys"],[328,40,359,52],[328,41,359,53,"i"],[328,42,359,54],[328,43,359,55],[328,44,359,56],[329,14,360,24],[329,18,360,28,"isNaN"],[329,23,360,33],[329,24,360,34,"number"],[329,30,360,40],[329,31,360,41],[329,33,360,43],[330,16,361,28,"encodeWriter"],[330,28,361,40],[330,29,361,41,"keys"],[330,33,361,45],[330,34,361,46,"i"],[330,35,361,47],[330,36,361,48],[330,38,361,50,"writer"],[330,44,361,56],[330,45,361,57],[331,16,362,28,"encodeWriter"],[331,28,362,40],[331,29,362,41,"data"],[331,33,362,45],[331,34,362,46,"keys"],[331,38,362,50],[331,39,362,51,"i"],[331,40,362,52],[331,41,362,53],[331,42,362,54],[331,44,362,56,"writer"],[331,50,362,62],[331,51,362,63],[332,14,363,24],[332,15,363,25],[332,21,364,29],[333,16,365,28,"encodeWriter"],[333,28,365,40],[333,29,365,41,"number"],[333,35,365,47],[333,37,365,49,"writer"],[333,43,365,55],[333,44,365,56],[334,16,366,28,"encodeWriter"],[334,28,366,40],[334,29,366,41,"data"],[334,33,366,45],[334,34,366,46,"keys"],[334,38,366,50],[334,39,366,51,"i"],[334,40,366,52],[334,41,366,53],[334,42,366,54],[334,44,366,56,"writer"],[334,50,366,62],[334,51,366,63],[335,14,367,24],[336,12,368,20],[337,10,369,16],[338,8,370,12],[338,9,370,13],[338,15,371,17],[339,10,372,16],[339,16,372,22],[339,20,372,26,"Error"],[339,25,372,31],[339,26,372,32],[339,57,372,63],[339,60,372,66,"data"],[339,64,372,70],[339,65,372,71],[340,8,373,12],[341,6,374,8],[342,6,375,8],[342,10,375,12,"readerFunctions"],[342,25,375,27],[342,28,375,30],[342,30,375,32],[343,6,376,8],[343,10,376,12,"writerFunctions"],[343,25,376,27],[343,28,376,30],[343,30,376,32],[344,6,377,8],[344,10,377,12,"api"],[344,13,377,15],[344,16,377,18],[345,8,378,12,"config"],[345,14,378,18],[345,16,378,20],[346,10,379,16,"useToJSON"],[346,19,379,25],[346,21,379,27],[347,8,380,12],[347,9,380,13],[348,8,381,12,"addWriter"],[348,17,381,21],[348,19,381,23],[348,28,381,12,"addWriter"],[348,37,381,21,"addWriter"],[348,38,381,33,"format"],[348,44,381,39],[348,46,381,41,"writerFunction"],[348,60,381,55],[348,62,381,57],[349,10,382,16],[349,14,382,20],[349,21,382,27,"format"],[349,27,382,33],[349,32,382,38],[349,40,382,46],[349,42,382,48],[350,12,383,20,"writerFunctions"],[350,27,383,35],[350,28,383,36,"push"],[350,32,383,40],[350,33,383,41],[350,43,383,51,"f"],[350,44,383,52],[350,46,383,54],[351,14,384,24],[351,18,384,28,"format"],[351,24,384,34],[351,29,384,39,"f"],[351,30,384,40],[351,32,385,28],[351,39,385,35,"writerFunction"],[351,53,385,49],[351,54,385,50,"f"],[351,55,385,51],[351,56,385,52],[352,12,386,20],[352,13,386,21],[352,14,386,22],[353,10,387,16],[353,11,387,17],[353,17,388,21],[354,12,389,20,"writerFunctions"],[354,27,389,35],[354,28,389,36,"push"],[354,32,389,40],[354,33,389,41,"format"],[354,39,389,47],[354,40,389,48],[355,10,390,16],[356,8,391,12],[356,9,391,13],[357,8,392,12,"addReader"],[357,17,392,21],[357,19,392,23],[357,28,392,12,"addReader"],[357,37,392,21,"addReader"],[357,38,392,33,"format"],[357,44,392,39],[357,46,392,41,"readerFunction"],[357,60,392,55],[357,62,392,57],[358,10,393,16],[358,14,393,20],[358,21,393,27,"format"],[358,27,393,33],[358,32,393,38],[358,40,393,46],[358,42,393,48],[359,12,394,20,"readerFunctions"],[359,27,394,35],[359,28,394,36,"push"],[359,32,394,40],[359,33,394,41],[359,43,394,51,"data"],[359,47,394,55],[359,49,394,57,"f"],[359,50,394,58],[359,52,394,60],[360,14,395,24],[360,18,395,28,"format"],[360,24,395,34],[360,29,395,39,"f"],[360,30,395,40],[360,32,396,28],[360,39,396,35,"readerFunction"],[360,53,396,49],[360,54,396,50,"data"],[360,58,396,54],[360,60,396,56,"f"],[360,61,396,57],[360,62,396,58],[361,12,397,20],[361,13,397,21],[361,14,397,22],[362,10,398,16],[362,11,398,17],[362,17,399,21],[363,12,400,20,"readerFunctions"],[363,27,400,35],[363,28,400,36,"push"],[363,32,400,40],[363,33,400,41,"format"],[363,39,400,47],[363,40,400,48],[364,10,401,16],[365,8,402,12],[365,9,402,13],[366,8,403,12,"encode"],[366,14,403,18],[366,16,403,20],[366,25,403,12,"encode"],[366,31,403,18,"encode"],[366,32,403,30,"data"],[366,36,403,34],[366,38,403,36,"format"],[366,44,403,42],[366,46,403,44],[367,10,404,16],[367,15,404,21],[367,19,404,25,"i"],[367,20,404,26],[367,23,404,29],[367,24,404,30],[367,26,404,32,"i"],[367,27,404,33],[367,30,404,36,"writerFunctions"],[367,45,404,51],[367,46,404,52,"length"],[367,52,404,58],[367,54,404,60,"i"],[367,55,404,61],[367,57,404,63],[367,59,404,65],[368,12,405,20],[368,16,405,24,"func"],[368,20,405,28],[368,23,405,31,"writerFunctions"],[368,38,405,46],[368,39,405,47,"i"],[368,40,405,48],[368,41,405,49],[369,12,406,20],[369,16,406,24,"writer"],[369,22,406,30],[369,25,406,33,"func"],[369,29,406,37],[369,30,406,38,"format"],[369,36,406,44],[369,37,406,45],[370,12,407,20],[370,16,407,24,"writer"],[370,22,407,30],[370,24,407,32],[371,14,408,24,"encodeWriter"],[371,26,408,36],[371,27,408,37,"data"],[371,31,408,41],[371,33,408,43,"writer"],[371,39,408,49],[371,40,408,50],[372,14,409,24],[372,21,409,31,"writer"],[372,27,409,37],[372,28,409,38,"result"],[372,34,409,44],[372,35,409,45],[372,36,409,46],[373,12,410,20],[374,10,411,16],[375,10,412,16],[375,16,412,22],[375,20,412,26,"Error"],[375,25,412,31],[375,26,412,32],[375,55,412,61],[375,58,412,64,"format"],[375,64,412,70],[375,65,412,71],[376,8,413,12],[376,9,413,13],[377,8,414,12,"encodeDataItem"],[377,22,414,26],[377,24,414,28],[377,33,414,12,"encodeDataItem"],[377,47,414,26,"encodeDataItem"],[377,48,414,38,"data"],[377,52,414,42],[377,54,414,44,"format"],[377,60,414,50],[377,62,414,52],[378,10,415,16],[378,15,415,21],[378,19,415,25,"i"],[378,20,415,26],[378,23,415,29],[378,24,415,30],[378,26,415,32,"i"],[378,27,415,33],[378,30,415,36,"writerFunctions"],[378,45,415,51],[378,46,415,52,"length"],[378,52,415,58],[378,54,415,60,"i"],[378,55,415,61],[378,57,415,63],[378,59,415,65],[379,12,416,20],[379,16,416,24,"func"],[379,20,416,28],[379,23,416,31,"writerFunctions"],[379,38,416,46],[379,39,416,47,"i"],[379,40,416,48],[379,41,416,49],[380,12,417,20],[380,16,417,24,"writer"],[380,22,417,30],[380,25,417,33,"func"],[380,29,417,37],[380,30,417,38,"format"],[380,36,417,44],[380,37,417,45],[381,12,418,20],[381,16,418,24,"writer"],[381,22,418,30],[381,24,418,32],[382,14,419,24],[382,18,419,28,"data"],[382,22,419,32],[382,23,419,33,"getTag"],[382,29,419,39],[382,30,419,40],[382,31,419,41],[382,36,419,46,"undefined"],[382,45,419,55],[382,47,419,57],[383,16,420,28,"encodeWriter"],[383,28,420,40],[383,29,420,41,"data"],[383,33,420,45],[383,35,420,47,"writer"],[383,41,420,53],[383,42,420,54],[384,16,421,28],[384,23,421,35,"writer"],[384,29,421,41],[384,30,421,42,"result"],[384,36,421,48],[384,37,421,49],[384,38,421,50],[385,14,422,24],[385,15,422,25],[385,21,423,29],[386,16,424,28,"encodeWriter"],[386,28,424,40],[386,29,424,41,"data"],[386,33,424,45],[386,34,424,46,"getData"],[386,41,424,53],[386,42,424,54],[386,43,424,55],[386,45,424,57,"writer"],[386,51,424,63],[386,52,424,64],[387,16,425,28],[387,23,425,35,"writer"],[387,29,425,41],[387,30,425,42,"result"],[387,36,425,48],[387,37,425,49],[387,38,425,50],[388,14,426,24],[389,12,427,20],[390,10,428,16],[391,10,429,16],[391,16,429,22],[391,20,429,26,"Error"],[391,25,429,31],[391,26,429,32],[391,55,429,61],[391,58,429,64,"format"],[391,64,429,70],[391,65,429,71],[392,8,430,12],[392,9,430,13],[393,8,431,12,"decode"],[393,14,431,18],[393,16,431,20],[393,25,431,12,"decode"],[393,31,431,18,"decode"],[393,32,431,30,"data"],[393,36,431,34],[393,38,431,36,"format"],[393,44,431,42],[393,46,431,44],[394,10,432,16],[394,15,432,21],[394,19,432,25,"i"],[394,20,432,26],[394,23,432,29],[394,24,432,30],[394,26,432,32,"i"],[394,27,432,33],[394,30,432,36,"readerFunctions"],[394,45,432,51],[394,46,432,52,"length"],[394,52,432,58],[394,54,432,60,"i"],[394,55,432,61],[394,57,432,63],[394,59,432,65],[395,12,433,20],[395,16,433,24,"func"],[395,20,433,28],[395,23,433,31,"readerFunctions"],[395,38,433,46],[395,39,433,47,"i"],[395,40,433,48],[395,41,433,49],[396,12,434,20],[396,16,434,24,"reader"],[396,22,434,30],[396,25,434,33,"func"],[396,29,434,37],[396,30,434,38,"data"],[396,34,434,42],[396,36,434,44,"format"],[396,42,434,50],[396,43,434,51],[397,12,435,20],[397,16,435,24,"reader"],[397,22,435,30],[397,24,435,32],[398,14,436,24],[398,21,436,31,"decodeReader"],[398,33,436,43],[398,34,436,44,"reader"],[398,40,436,50],[398,41,436,51],[399,12,437,20],[400,10,438,16],[401,10,439,16],[401,16,439,22],[401,20,439,26,"Error"],[401,25,439,31],[401,26,439,32],[401,54,439,60],[401,57,439,63,"format"],[401,63,439,69],[401,64,439,70],[402,8,440,12],[402,9,440,13],[403,8,441,12,"decodeToDataItem"],[403,24,441,28],[403,26,441,30],[403,35,441,12,"decodeToDataItem"],[403,51,441,28,"decodeToDataItem"],[403,52,441,40,"data"],[403,56,441,44],[403,58,441,46,"format"],[403,64,441,52],[403,66,441,54],[404,10,442,16],[404,15,442,21],[404,19,442,25,"i"],[404,20,442,26],[404,23,442,29],[404,24,442,30],[404,26,442,32,"i"],[404,27,442,33],[404,30,442,36,"readerFunctions"],[404,45,442,51],[404,46,442,52,"length"],[404,52,442,58],[404,54,442,60,"i"],[404,55,442,61],[404,57,442,63],[404,59,442,65],[405,12,443,20],[405,16,443,24,"func"],[405,20,443,28],[405,23,443,31,"readerFunctions"],[405,38,443,46],[405,39,443,47,"i"],[405,40,443,48],[405,41,443,49],[406,12,444,20],[406,16,444,24,"reader"],[406,22,444,30],[406,25,444,33,"func"],[406,29,444,37],[406,30,444,38,"data"],[406,34,444,42],[406,36,444,44,"format"],[406,42,444,50],[406,43,444,51],[407,12,445,20],[407,16,445,24,"reader"],[407,22,445,30],[407,24,445,32],[408,14,446,24],[408,18,446,30,"result"],[408,24,446,36],[408,27,446,39,"decodeReader"],[408,39,446,51],[408,40,446,52,"reader"],[408,46,446,58],[408,47,446,59],[409,14,447,24],[409,18,447,28,"result"],[409,24,447,34],[409,36,447,46,"DataItem"],[409,44,447,54],[409,46,447,56],[410,16,448,28],[410,23,448,35,"result"],[410,29,448,41],[411,14,449,24],[411,15,449,25],[411,21,450,29],[412,16,451,28],[412,23,451,35],[412,27,451,39,"DataItem"],[412,35,451,47],[412,36,451,48,"result"],[412,42,451,54],[412,43,451,55],[413,14,452,24],[414,12,453,20],[415,10,454,16],[416,10,455,16],[416,16,455,22],[416,20,455,26,"Error"],[416,25,455,31],[416,26,455,32],[416,54,455,60],[416,57,455,63,"format"],[416,63,455,69],[416,64,455,70],[417,8,456,12],[417,9,456,13],[418,8,457,12,"addSemanticEncode"],[418,25,457,29],[418,27,457,31],[418,36,457,12,"addSemanticEncode"],[418,53,457,29,"addSemanticEncode"],[418,54,457,41,"tag"],[418,57,457,44],[418,59,457,46,"fn"],[418,61,457,48],[418,63,457,50],[419,10,458,16],[419,14,458,20],[419,21,458,27,"tag"],[419,24,458,30],[419,29,458,35],[419,37,458,43],[419,41,458,47,"tag"],[419,44,458,50],[419,47,458,53],[419,48,458,54],[419,53,458,59],[419,54,458,60],[419,58,458,64,"tag"],[419,61,458,67],[419,64,458,70],[419,65,458,71],[419,67,458,73],[420,12,459,20],[420,18,459,26],[420,22,459,30,"Error"],[420,27,459,35],[420,28,459,36],[420,60,459,68],[420,61,459,69],[421,10,460,16],[422,10,461,16,"semanticEncoders"],[422,26,461,32],[422,27,461,33,"push"],[422,31,461,37],[422,32,461,38],[423,12,461,40,"tag"],[423,15,461,43],[423,17,461,45,"tag"],[423,20,461,48],[424,12,461,50,"fn"],[424,14,461,52],[424,16,461,54,"fn"],[425,10,461,57],[425,11,461,58],[425,12,461,59],[426,10,462,16],[426,17,462,23],[426,21,462,27],[427,8,463,12],[427,9,463,13],[428,8,464,12,"addSemanticDecode"],[428,25,464,29],[428,27,464,31],[428,36,464,12,"addSemanticDecode"],[428,53,464,29,"addSemanticDecode"],[428,54,464,41,"tag"],[428,57,464,44],[428,59,464,46,"fn"],[428,61,464,48],[428,63,464,50],[429,10,465,16],[429,14,465,20],[429,21,465,27,"tag"],[429,24,465,30],[429,29,465,35],[429,37,465,43],[429,41,465,47,"tag"],[429,44,465,50],[429,47,465,53],[429,48,465,54],[429,53,465,59],[429,54,465,60],[429,58,465,64,"tag"],[429,61,465,67],[429,64,465,70],[429,65,465,71],[429,67,465,73],[430,12,466,20],[430,18,466,26],[430,22,466,30,"Error"],[430,27,466,35],[430,28,466,36],[430,60,466,68],[430,61,466,69],[431,10,467,16],[432,10,468,16,"semanticDecoders"],[432,26,468,32],[432,27,468,33,"tag"],[432,30,468,36],[432,31,468,37],[432,34,468,40,"fn"],[432,36,468,42],[433,10,469,16],[433,17,469,23],[433,21,469,27],[434,8,470,12],[435,6,471,8],[435,7,471,9],[436,6,472,8],[436,15,472,17,"BufferReader"],[436,27,472,29,"BufferReader"],[436,28,472,30,"buffer"],[436,34,472,36],[436,36,472,38],[437,8,473,12],[437,12,473,16],[437,13,473,17,"buffer"],[437,19,473,23],[437,22,473,26,"buffer"],[437,28,473,32],[438,8,474,12],[438,12,474,16],[438,13,474,17,"pos"],[438,16,474,20],[438,19,474,23],[438,20,474,24],[439,6,475,8],[440,6,476,8,"BufferReader"],[440,18,476,20],[440,19,476,21,"prototype"],[440,28,476,30],[440,31,476,33,"Object"],[440,37,476,39],[440,38,476,40,"create"],[440,44,476,46],[440,45,476,47,"Reader"],[440,51,476,53],[440,52,476,54,"prototype"],[440,61,476,63],[440,62,476,64],[441,6,477,8,"BufferReader"],[441,18,477,20],[441,19,477,21,"prototype"],[441,28,477,30],[441,29,477,31,"peekByte"],[441,37,477,39],[441,40,477,42],[441,52,477,54],[442,8,478,12],[442,15,478,19],[442,19,478,23],[442,20,478,24,"buffer"],[442,26,478,30],[442,27,478,31],[442,31,478,35],[442,32,478,36,"pos"],[442,35,478,39],[442,36,478,40],[443,6,479,8],[443,7,479,9],[444,6,480,8,"BufferReader"],[444,18,480,20],[444,19,480,21,"prototype"],[444,28,480,30],[444,29,480,31,"readByte"],[444,37,480,39],[444,40,480,42],[444,52,480,54],[445,8,481,12],[445,15,481,19],[445,19,481,23],[445,20,481,24,"buffer"],[445,26,481,30],[445,27,481,31],[445,31,481,35],[445,32,481,36,"pos"],[445,35,481,39],[445,37,481,41],[445,38,481,42],[446,6,482,8],[446,7,482,9],[447,6,483,8,"BufferReader"],[447,18,483,20],[447,19,483,21,"prototype"],[447,28,483,30],[447,29,483,31,"readUint16"],[447,39,483,41],[447,42,483,44],[447,54,483,56],[448,8,484,12],[448,12,484,16,"result"],[448,18,484,22],[448,21,484,25],[448,25,484,29],[448,26,484,30,"buffer"],[448,32,484,36],[448,33,484,37,"readUInt16BE"],[448,45,484,49],[448,46,484,50],[448,50,484,54],[448,51,484,55,"pos"],[448,54,484,58],[448,55,484,59],[449,8,485,12],[449,12,485,16],[449,13,485,17,"pos"],[449,16,485,20],[449,20,485,24],[449,21,485,25],[450,8,486,12],[450,15,486,19,"result"],[450,21,486,25],[451,6,487,8],[451,7,487,9],[452,6,488,8,"BufferReader"],[452,18,488,20],[452,19,488,21,"prototype"],[452,28,488,30],[452,29,488,31,"readUint32"],[452,39,488,41],[452,42,488,44],[452,54,488,56],[453,8,489,12],[453,12,489,16,"result"],[453,18,489,22],[453,21,489,25],[453,25,489,29],[453,26,489,30,"buffer"],[453,32,489,36],[453,33,489,37,"readUInt32BE"],[453,45,489,49],[453,46,489,50],[453,50,489,54],[453,51,489,55,"pos"],[453,54,489,58],[453,55,489,59],[454,8,490,12],[454,12,490,16],[454,13,490,17,"pos"],[454,16,490,20],[454,20,490,24],[454,21,490,25],[455,8,491,12],[455,15,491,19,"result"],[455,21,491,25],[456,6,492,8],[456,7,492,9],[457,6,493,8,"BufferReader"],[457,18,493,20],[457,19,493,21,"prototype"],[457,28,493,30],[457,29,493,31,"readFloat32"],[457,40,493,42],[457,43,493,45],[457,55,493,57],[458,8,494,12],[458,12,494,16,"result"],[458,18,494,22],[458,21,494,25],[458,25,494,29],[458,26,494,30,"buffer"],[458,32,494,36],[458,33,494,37,"readFloatBE"],[458,44,494,48],[458,45,494,49],[458,49,494,53],[458,50,494,54,"pos"],[458,53,494,57],[458,54,494,58],[459,8,495,12],[459,12,495,16],[459,13,495,17,"pos"],[459,16,495,20],[459,20,495,24],[459,21,495,25],[460,8,496,12],[460,15,496,19,"result"],[460,21,496,25],[461,6,497,8],[461,7,497,9],[462,6,498,8,"BufferReader"],[462,18,498,20],[462,19,498,21,"prototype"],[462,28,498,30],[462,29,498,31,"readFloat64"],[462,40,498,42],[462,43,498,45],[462,55,498,57],[463,8,499,12],[463,12,499,16,"result"],[463,18,499,22],[463,21,499,25],[463,25,499,29],[463,26,499,30,"buffer"],[463,32,499,36],[463,33,499,37,"readDoubleBE"],[463,45,499,49],[463,46,499,50],[463,50,499,54],[463,51,499,55,"pos"],[463,54,499,58],[463,55,499,59],[464,8,500,12],[464,12,500,16],[464,13,500,17,"pos"],[464,16,500,20],[464,20,500,24],[464,21,500,25],[465,8,501,12],[465,15,501,19,"result"],[465,21,501,25],[466,6,502,8],[466,7,502,9],[467,6,503,8,"BufferReader"],[467,18,503,20],[467,19,503,21,"prototype"],[467,28,503,30],[467,29,503,31,"readChunk"],[467,38,503,40],[467,41,503,43],[467,51,503,53,"length"],[467,57,503,59],[467,59,503,61],[468,8,504,12],[468,12,504,16,"result"],[468,18,504,22],[468,21,504,25,"Buffer"],[468,27,504,31],[468,28,504,32,"alloc"],[468,33,504,37],[468,34,504,38,"length"],[468,40,504,44],[468,41,504,45],[469,8,505,12],[469,12,505,16],[469,13,505,17,"buffer"],[469,19,505,23],[469,20,505,24,"copy"],[469,24,505,28],[469,25,505,29,"result"],[469,31,505,35],[469,33,505,37],[469,34,505,38],[469,36,505,40],[469,40,505,44],[469,41,505,45,"pos"],[469,44,505,48],[469,46,505,51],[469,50,505,55],[469,51,505,56,"pos"],[469,54,505,59],[469,58,505,63,"length"],[469,64,505,70],[469,65,505,71],[470,8,506,12],[470,15,506,19,"result"],[470,21,506,25],[471,6,507,8],[471,7,507,9],[472,6,508,8],[472,15,508,17,"BufferWriter"],[472,27,508,29,"BufferWriter"],[472,28,508,30,"stringFormat"],[472,40,508,42],[472,42,508,44],[473,8,509,12],[473,12,509,16],[473,13,509,17,"byteLength"],[473,23,509,27],[473,26,509,30],[473,27,509,31],[474,8,510,12],[474,12,510,16],[474,13,510,17,"defaultBufferLength"],[474,32,510,36],[474,35,510,39],[474,40,510,44],[475,8,511,12],[475,12,511,16],[475,13,511,17,"latestBuffer"],[475,25,511,29],[475,28,511,32,"Buffer"],[475,34,511,38],[475,35,511,39,"alloc"],[475,40,511,44],[475,41,511,45],[475,45,511,49],[475,46,511,50,"defaultBufferLength"],[475,65,511,69],[475,66,511,70],[476,8,512,12],[476,12,512,16],[476,13,512,17,"latestBufferOffset"],[476,31,512,35],[476,34,512,38],[476,35,512,39],[477,8,513,12],[477,12,513,16],[477,13,513,17,"completeBuffers"],[477,28,513,32],[477,31,513,35],[477,33,513,37],[478,8,514,12],[478,12,514,16],[478,13,514,17,"stringFormat"],[478,25,514,29],[478,28,514,32,"stringFormat"],[478,40,514,44],[479,6,515,8],[480,6,516,8,"BufferWriter"],[480,18,516,20],[480,19,516,21,"prototype"],[480,28,516,30],[480,31,516,33,"Object"],[480,37,516,39],[480,38,516,40,"create"],[480,44,516,46],[480,45,516,47,"Writer"],[480,51,516,53],[480,52,516,54,"prototype"],[480,61,516,63],[480,62,516,64],[481,6,517,8,"BufferWriter"],[481,18,517,20],[481,19,517,21,"prototype"],[481,28,517,30],[481,29,517,31,"writeByte"],[481,38,517,40],[481,41,517,43],[481,51,517,53,"value"],[481,56,517,58],[481,58,517,60],[482,8,518,12],[482,12,518,16],[482,13,518,17,"latestBuffer"],[482,25,518,29],[482,26,518,30],[482,30,518,34],[482,31,518,35,"latestBufferOffset"],[482,49,518,53],[482,51,518,55],[482,52,518,56],[482,55,518,59,"value"],[482,60,518,64],[483,8,519,12],[483,12,519,16],[483,16,519,20],[483,17,519,21,"latestBufferOffset"],[483,35,519,39],[483,39,519,43],[483,43,519,47],[483,44,519,48,"latestBuffer"],[483,56,519,60],[483,57,519,61,"length"],[483,63,519,67],[483,65,519,69],[484,10,520,16],[484,14,520,20],[484,15,520,21,"completeBuffers"],[484,30,520,36],[484,31,520,37,"push"],[484,35,520,41],[484,36,520,42],[484,40,520,46],[484,41,520,47,"latestBuffer"],[484,53,520,59],[484,54,520,60],[485,10,521,16],[485,14,521,20],[485,15,521,21,"latestBuffer"],[485,27,521,33],[485,30,521,36,"Buffer"],[485,36,521,42],[485,37,521,43,"alloc"],[485,42,521,48],[485,43,521,49],[485,47,521,53],[485,48,521,54,"defaultBufferLength"],[485,67,521,73],[485,68,521,74],[486,10,522,16],[486,14,522,20],[486,15,522,21,"latestBufferOffset"],[486,33,522,39],[486,36,522,42],[486,37,522,43],[487,8,523,12],[488,8,524,12],[488,12,524,16],[488,13,524,17,"byteLength"],[488,23,524,27],[488,25,524,29],[489,6,525,8],[489,7,525,9],[490,6,526,8,"BufferWriter"],[490,18,526,20],[490,19,526,21,"prototype"],[490,28,526,30],[490,29,526,31,"writeFloat32"],[490,41,526,43],[490,44,526,46],[490,54,526,56,"value"],[490,59,526,61],[490,61,526,63],[491,8,527,12],[491,12,527,16,"buffer"],[491,18,527,22],[491,21,527,25,"Buffer"],[491,27,527,31],[491,28,527,32,"alloc"],[491,33,527,37],[491,34,527,38],[491,35,527,39],[491,36,527,40],[492,8,528,12,"buffer"],[492,14,528,18],[492,15,528,19,"writeFloatBE"],[492,27,528,31],[492,28,528,32,"value"],[492,33,528,37],[492,35,528,39],[492,36,528,40],[492,37,528,41],[493,8,529,12],[493,12,529,16],[493,13,529,17,"writeBuffer"],[493,24,529,28],[493,25,529,29,"buffer"],[493,31,529,35],[493,32,529,36],[494,6,530,8],[494,7,530,9],[495,6,531,8,"BufferWriter"],[495,18,531,20],[495,19,531,21,"prototype"],[495,28,531,30],[495,29,531,31,"writeFloat64"],[495,41,531,43],[495,44,531,46],[495,54,531,56,"value"],[495,59,531,61],[495,61,531,63],[496,8,532,12],[496,12,532,16,"buffer"],[496,18,532,22],[496,21,532,25,"Buffer"],[496,27,532,31],[496,28,532,32,"alloc"],[496,33,532,37],[496,34,532,38],[496,35,532,39],[496,36,532,40],[497,8,533,12,"buffer"],[497,14,533,18],[497,15,533,19,"writeDoubleBE"],[497,28,533,32],[497,29,533,33,"value"],[497,34,533,38],[497,36,533,40],[497,37,533,41],[497,38,533,42],[498,8,534,12],[498,12,534,16],[498,13,534,17,"writeBuffer"],[498,24,534,28],[498,25,534,29,"buffer"],[498,31,534,35],[498,32,534,36],[499,6,535,8],[499,7,535,9],[500,6,536,8,"BufferWriter"],[500,18,536,20],[500,19,536,21,"prototype"],[500,28,536,30],[500,29,536,31,"writeString"],[500,40,536,42],[500,43,536,45],[500,53,536,55,"string"],[500,59,536,61],[500,61,536,63,"lengthFunc"],[500,71,536,73],[500,73,536,75],[501,8,537,12],[501,12,537,16,"buffer"],[501,18,537,22],[501,21,537,25,"Buffer"],[501,27,537,31],[501,28,537,32,"from"],[501,32,537,36],[501,33,537,37,"string"],[501,39,537,43],[501,41,537,45],[501,48,537,52],[501,49,537,53],[502,8,538,12,"lengthFunc"],[502,18,538,22],[502,19,538,23,"buffer"],[502,25,538,29],[502,26,538,30,"length"],[502,32,538,36],[502,33,538,37],[503,8,539,12],[503,12,539,16],[503,13,539,17,"writeBuffer"],[503,24,539,28],[503,25,539,29,"buffer"],[503,31,539,35],[503,32,539,36],[504,6,540,8],[504,7,540,9],[505,6,541,8,"BufferWriter"],[505,18,541,20],[505,19,541,21,"prototype"],[505,28,541,30],[505,29,541,31,"canWriteBinary"],[505,43,541,45],[505,46,541,48],[505,56,541,58,"data"],[505,60,541,62],[505,62,541,64],[506,8,542,12],[506,15,542,19,"data"],[506,19,542,23],[506,31,542,35,"Buffer"],[506,37,542,41],[507,6,543,8],[507,7,543,9],[508,6,544,8,"BufferWriter"],[508,18,544,20],[508,19,544,21,"prototype"],[508,28,544,30],[508,29,544,31,"writeBinary"],[508,40,544,42],[508,43,544,45],[508,53,544,55,"buffer"],[508,59,544,61],[508,61,544,63,"lengthFunc"],[508,71,544,73],[508,73,544,75],[509,8,545,12,"lengthFunc"],[509,18,545,22],[509,19,545,23,"buffer"],[509,25,545,29],[509,26,545,30,"length"],[509,32,545,36],[509,33,545,37],[510,8,546,12],[510,12,546,16],[510,13,546,17,"writeBuffer"],[510,24,546,28],[510,25,546,29,"buffer"],[510,31,546,35],[510,32,546,36],[511,6,547,8],[511,7,547,9],[512,6,548,8,"BufferWriter"],[512,18,548,20],[512,19,548,21,"prototype"],[512,28,548,30],[512,29,548,31,"writeBuffer"],[512,40,548,42],[512,43,548,45],[512,53,548,55,"chunk"],[512,58,548,60],[512,60,548,62],[513,8,549,12],[513,12,549,16],[513,14,549,18,"chunk"],[513,19,549,23],[513,31,549,35,"Buffer"],[513,37,549,41],[513,38,549,42],[513,40,550,16],[513,46,550,22],[513,50,550,26,"TypeError"],[513,59,550,35],[513,60,550,36],[513,95,550,71],[513,96,550,72],[514,8,551,12],[514,12,551,16],[514,13,551,17],[514,17,551,21],[514,18,551,22,"latestBufferOffset"],[514,36,551,40],[514,38,551,42],[515,10,552,16],[515,14,552,20],[515,15,552,21,"completeBuffers"],[515,30,552,36],[515,31,552,37,"push"],[515,35,552,41],[515,36,552,42,"chunk"],[515,41,552,47],[515,42,552,48],[516,8,553,12],[516,9,553,13],[516,15,554,17],[516,19,554,21],[516,23,554,25],[516,24,554,26,"latestBuffer"],[516,36,554,38],[516,37,554,39,"length"],[516,43,554,45],[516,46,554,48],[516,50,554,52],[516,51,554,53,"latestBufferOffset"],[516,69,554,71],[516,73,555,16,"chunk"],[516,78,555,21],[516,79,555,22,"length"],[516,85,555,28],[516,87,555,30],[517,10,556,16,"chunk"],[517,15,556,21],[517,16,556,22,"copy"],[517,20,556,26],[517,21,556,27],[517,25,556,31],[517,26,556,32,"latestBuffer"],[517,38,556,44],[517,40,556,46],[517,44,556,50],[517,45,556,51,"latestBufferOffset"],[517,63,556,69],[517,64,556,70],[518,10,557,16],[518,14,557,20],[518,15,557,21,"latestBufferOffset"],[518,33,557,39],[518,37,557,43,"chunk"],[518,42,557,48],[518,43,557,49,"length"],[518,49,557,55],[519,10,558,16],[519,14,558,20],[519,18,558,24],[519,19,558,25,"latestBufferOffset"],[519,37,558,43],[519,41,558,47],[519,45,558,51],[519,46,558,52,"latestBuffer"],[519,58,558,64],[519,59,558,65,"length"],[519,65,558,71],[519,67,558,73],[520,12,559,20],[520,16,559,24],[520,17,559,25,"completeBuffers"],[520,32,559,40],[520,33,559,41,"push"],[520,37,559,45],[520,38,559,46],[520,42,559,50],[520,43,559,51,"latestBuffer"],[520,55,559,63],[520,56,559,64],[521,12,560,20],[521,16,560,24],[521,17,560,25,"latestBuffer"],[521,29,560,37],[521,32,560,40,"Buffer"],[521,38,560,46],[521,39,560,47,"alloc"],[521,44,560,52],[521,45,560,53],[521,49,560,57],[521,50,560,58,"defaultBufferLength"],[521,69,560,77],[521,70,560,78],[522,12,561,20],[522,16,561,24],[522,17,561,25,"latestBufferOffset"],[522,35,561,43],[522,38,561,46],[522,39,561,47],[523,10,562,16],[524,8,563,12],[524,9,563,13],[524,15,564,17],[525,10,565,16],[525,14,565,20],[525,15,565,21,"completeBuffers"],[525,30,565,36],[525,31,565,37,"push"],[525,35,565,41],[525,36,565,42],[525,40,565,46],[525,41,565,47,"latestBuffer"],[525,53,565,59],[525,54,565,60,"slice"],[525,59,565,65],[525,60,565,66],[525,61,565,67],[525,63,565,69],[525,67,565,73],[525,68,565,74,"latestBufferOffset"],[525,86,565,92],[525,87,565,93],[525,88,565,94],[526,10,566,16],[526,14,566,20],[526,15,566,21,"completeBuffers"],[526,30,566,36],[526,31,566,37,"push"],[526,35,566,41],[526,36,566,42,"chunk"],[526,41,566,47],[526,42,566,48],[527,10,567,16],[527,14,567,20],[527,15,567,21,"latestBuffer"],[527,27,567,33],[527,30,567,36,"Buffer"],[527,36,567,42],[527,37,567,43,"alloc"],[527,42,567,48],[527,43,567,49],[527,47,567,53],[527,48,567,54,"defaultBufferLength"],[527,67,567,73],[527,68,567,74],[528,10,568,16],[528,14,568,20],[528,15,568,21,"latestBufferOffset"],[528,33,568,39],[528,36,568,42],[528,37,568,43],[529,8,569,12],[530,8,570,12],[530,12,570,16],[530,13,570,17,"byteLength"],[530,23,570,27],[530,27,570,31,"chunk"],[530,32,570,36],[530,33,570,37,"length"],[530,39,570,43],[531,6,571,8],[531,7,571,9],[532,6,572,8,"BufferWriter"],[532,18,572,20],[532,19,572,21,"prototype"],[532,28,572,30],[532,29,572,31,"result"],[532,35,572,37],[532,38,572,40],[532,50,572,52],[533,8,573,12],[533,12,573,16,"result"],[533,18,573,22],[533,21,573,25,"Buffer"],[533,27,573,31],[533,28,573,32,"alloc"],[533,33,573,37],[533,34,573,38],[533,38,573,42],[533,39,573,43,"byteLength"],[533,49,573,53],[533,50,573,54],[534,8,574,12],[534,12,574,16,"offset"],[534,18,574,22],[534,21,574,25],[534,22,574,26],[535,8,575,12],[535,13,575,17],[535,17,575,21,"i"],[535,18,575,22],[535,21,575,25],[535,22,575,26],[535,24,575,28,"i"],[535,25,575,29],[535,28,575,32],[535,32,575,36],[535,33,575,37,"completeBuffers"],[535,48,575,52],[535,49,575,53,"length"],[535,55,575,59],[535,57,575,61,"i"],[535,58,575,62],[535,60,575,64],[535,62,575,66],[536,10,576,16],[536,14,576,20,"buffer"],[536,20,576,26],[536,23,576,29],[536,27,576,33],[536,28,576,34,"completeBuffers"],[536,43,576,49],[536,44,576,50,"i"],[536,45,576,51],[536,46,576,52],[537,10,577,16,"buffer"],[537,16,577,22],[537,17,577,23,"copy"],[537,21,577,27],[537,22,577,28,"result"],[537,28,577,34],[537,30,577,36,"offset"],[537,36,577,42],[537,38,577,44],[537,39,577,45],[537,41,577,47,"buffer"],[537,47,577,53],[537,48,577,54,"length"],[537,54,577,60],[537,55,577,61],[538,10,578,16,"offset"],[538,16,578,22],[538,20,578,26,"buffer"],[538,26,578,32],[538,27,578,33,"length"],[538,33,578,39],[539,8,579,12],[540,8,580,12],[540,12,580,16],[540,16,580,20],[540,17,580,21,"latestBufferOffset"],[540,35,580,39],[540,37,580,41],[541,10,581,16],[541,14,581,20],[541,15,581,21,"latestBuffer"],[541,27,581,33],[541,28,581,34,"copy"],[541,32,581,38],[541,33,581,39,"result"],[541,39,581,45],[541,41,581,47,"offset"],[541,47,581,53],[541,49,581,55],[541,50,581,56],[541,52,581,58],[541,56,581,62],[541,57,581,63,"latestBufferOffset"],[541,75,581,81],[541,76,581,82],[542,8,582,12],[543,8,583,12],[543,12,583,16],[543,16,583,20],[543,17,583,21,"stringFormat"],[543,29,583,33],[543,31,584,16],[543,38,584,23,"result"],[543,44,584,29],[543,45,584,30,"toString"],[543,53,584,38],[543,54,584,39],[543,58,584,43],[543,59,584,44,"stringFormat"],[543,71,584,56],[543,72,584,57],[544,8,585,12],[544,15,585,19,"result"],[544,21,585,25],[545,6,586,8],[545,7,586,9],[546,6,587,8],[546,10,587,12],[546,17,587,19,"Buffer"],[546,23,587,25],[546,28,587,30],[546,38,587,40],[546,40,587,42],[547,8,588,12,"api"],[547,11,588,15],[547,12,588,16,"addReader"],[547,21,588,25],[547,22,588,26],[547,32,588,36,"data"],[547,36,588,40],[547,38,588,42,"format"],[547,44,588,48],[547,46,588,50],[548,10,589,16],[548,14,589,20,"Buffer"],[548,20,589,26],[548,21,589,27,"isBuffer"],[548,29,589,35],[548,30,589,36,"data"],[548,34,589,40],[548,35,589,41],[548,37,589,43],[549,12,590,20],[549,19,590,27],[549,23,590,31,"BufferReader"],[549,35,590,43],[549,36,590,44,"data"],[549,40,590,48],[549,41,590,49],[550,10,591,16],[551,10,592,16],[551,14,592,20,"format"],[551,20,592,26],[551,25,592,31],[551,30,592,36],[551,34,592,40,"format"],[551,40,592,46],[551,45,592,51],[551,53,592,59],[551,55,592,61],[552,12,593,20],[552,16,593,24,"buffer"],[552,22,593,30],[552,25,593,33,"Buffer"],[552,31,593,39],[552,32,593,40,"from"],[552,36,593,44],[552,37,593,45,"data"],[552,41,593,49],[552,43,593,51,"format"],[552,49,593,57],[552,50,593,58],[553,12,594,20],[553,19,594,27],[553,23,594,31,"BufferReader"],[553,35,594,43],[553,36,594,44,"buffer"],[553,42,594,50],[553,43,594,51],[554,10,595,16],[555,8,596,12],[555,9,596,13],[555,10,596,14],[556,8,597,12,"api"],[556,11,597,15],[556,12,597,16,"addWriter"],[556,21,597,25],[556,22,597,26],[556,32,597,36,"format"],[556,38,597,42],[556,40,597,44],[557,10,598,16],[557,14,598,20],[557,15,598,21,"format"],[557,21,598,27],[557,25,598,31,"format"],[557,31,598,37],[557,36,598,42],[557,44,598,50],[557,46,598,52],[558,12,599,20],[558,19,599,27],[558,23,599,31,"BufferWriter"],[558,35,599,43],[558,36,599,44],[558,37,599,45],[559,10,600,16],[559,11,600,17],[559,17,601,21],[559,21,601,25,"format"],[559,27,601,31],[559,32,601,36],[559,37,601,41],[559,41,601,45,"format"],[559,47,601,51],[559,52,601,56],[559,60,601,64],[559,62,601,66],[560,12,602,20],[560,19,602,27],[560,23,602,31,"BufferWriter"],[560,35,602,43],[560,36,602,44,"format"],[560,42,602,50],[560,43,602,51],[561,10,603,16],[562,8,604,12],[562,9,604,13],[562,10,604,14],[563,6,605,8],[564,6,606,8],[564,15,606,17,"HexReader"],[564,24,606,26,"HexReader"],[564,25,606,27,"hex"],[564,28,606,30],[564,30,606,32],[565,8,607,12],[565,12,607,16],[565,13,607,17,"hex"],[565,16,607,20],[565,19,607,23,"hex"],[565,22,607,26],[566,8,608,12],[566,12,608,16],[566,13,608,17,"pos"],[566,16,608,20],[566,19,608,23],[566,20,608,24],[567,6,609,8],[568,6,610,8,"HexReader"],[568,15,610,17],[568,16,610,18,"prototype"],[568,25,610,27],[568,28,610,30,"Object"],[568,34,610,36],[568,35,610,37,"create"],[568,41,610,43],[568,42,610,44,"Reader"],[568,48,610,50],[568,49,610,51,"prototype"],[568,58,610,60],[568,59,610,61],[569,6,611,8,"HexReader"],[569,15,611,17],[569,16,611,18,"prototype"],[569,25,611,27],[569,26,611,28,"peekByte"],[569,34,611,36],[569,37,611,39],[569,49,611,51],[570,8,612,12],[570,12,612,16,"pair"],[570,16,612,20],[570,19,612,23],[570,23,612,27],[570,24,612,28,"hex"],[570,27,612,31],[570,28,612,32,"substring"],[570,37,612,41],[570,38,612,42],[570,42,612,46],[570,43,612,47,"pos"],[570,46,612,50],[570,48,612,52],[570,49,612,53],[570,50,612,54],[571,8,613,12],[571,15,613,19,"parseInt"],[571,23,613,27],[571,24,613,28,"pair"],[571,28,613,32],[571,30,613,34],[571,32,613,36],[571,33,613,37],[572,6,614,8],[572,7,614,9],[573,6,615,8,"HexReader"],[573,15,615,17],[573,16,615,18,"prototype"],[573,25,615,27],[573,26,615,28,"readByte"],[573,34,615,36],[573,37,615,39],[573,49,615,51],[574,8,616,12],[574,12,616,16,"pair"],[574,16,616,20],[574,19,616,23],[574,23,616,27],[574,24,616,28,"hex"],[574,27,616,31],[574,28,616,32,"substring"],[574,37,616,41],[574,38,616,42],[574,42,616,46],[574,43,616,47,"pos"],[574,46,616,50],[574,48,616,52],[574,52,616,56],[574,53,616,57,"pos"],[574,56,616,60],[574,59,616,63],[574,60,616,64],[574,61,616,65],[575,8,617,12],[575,12,617,16],[575,13,617,17,"pos"],[575,16,617,20],[575,20,617,24],[575,21,617,25],[576,8,618,12],[576,15,618,19,"parseInt"],[576,23,618,27],[576,24,618,28,"pair"],[576,28,618,32],[576,30,618,34],[576,32,618,36],[576,33,618,37],[577,6,619,8],[577,7,619,9],[578,6,620,8,"HexReader"],[578,15,620,17],[578,16,620,18,"prototype"],[578,25,620,27],[578,26,620,28,"readChunk"],[578,35,620,37],[578,38,620,40],[578,48,620,50,"length"],[578,54,620,56],[578,56,620,58],[579,8,621,12],[579,12,621,16,"hex"],[579,15,621,19],[579,18,621,22],[579,22,621,26],[579,23,621,27,"hex"],[579,26,621,30],[579,27,621,31,"substring"],[579,36,621,40],[579,37,621,41],[579,41,621,45],[579,42,621,46,"pos"],[579,45,621,49],[579,47,621,51],[579,51,621,55],[579,52,621,56,"pos"],[579,55,621,59],[579,58,621,62,"length"],[579,64,621,68],[579,67,621,71],[579,68,621,72],[579,69,621,73],[580,8,622,12],[580,12,622,16],[580,13,622,17,"pos"],[580,16,622,20],[580,20,622,24,"length"],[580,26,622,30],[580,29,622,33],[580,30,622,34],[581,8,623,12],[581,12,623,16],[581,19,623,23,"Buffer"],[581,25,623,29],[581,30,623,34],[581,40,623,44],[581,42,624,16],[581,49,624,23,"Buffer"],[581,55,624,29],[581,56,624,30,"from"],[581,60,624,34],[581,61,624,35,"hex"],[581,64,624,38],[581,66,624,40],[581,71,624,45],[581,72,624,46],[582,8,625,12],[582,15,625,19],[582,19,625,23,"BinaryHex"],[582,28,625,32],[582,29,625,33,"hex"],[582,32,625,36],[582,33,625,37],[583,6,626,8],[583,7,626,9],[584,6,627,8],[584,15,627,17,"HexWriter"],[584,24,627,26,"HexWriter"],[584,25,627,27,"finalFormat"],[584,36,627,38],[584,38,627,40],[585,8,628,12],[585,12,628,16],[585,13,628,17,"$hex"],[585,17,628,21],[585,20,628,24],[585,22,628,26],[586,8,629,12],[586,12,629,16],[586,13,629,17,"finalFormat"],[586,24,629,28],[586,27,629,31,"finalFormat"],[586,38,629,42],[586,42,629,46],[586,47,629,51],[587,6,630,8],[588,6,631,8,"HexWriter"],[588,15,631,17],[588,16,631,18,"prototype"],[588,25,631,27],[588,28,631,30,"Object"],[588,34,631,36],[588,35,631,37,"create"],[588,41,631,43],[588,42,631,44,"Writer"],[588,48,631,50],[588,49,631,51,"prototype"],[588,58,631,60],[588,59,631,61],[589,6,632,8,"HexWriter"],[589,15,632,17],[589,16,632,18,"prototype"],[589,25,632,27],[589,26,632,28,"writeByte"],[589,35,632,37],[589,38,632,40],[589,48,632,50,"value"],[589,53,632,55],[589,55,632,57],[590,8,633,12],[590,12,633,16,"value"],[590,17,633,21],[590,20,633,24],[590,21,633,25],[590,25,633,29,"value"],[590,30,633,34],[590,33,633,37],[590,36,633,40],[590,38,634,16],[590,44,634,22],[590,48,634,26,"Error"],[590,53,634,31],[590,54,634,32],[590,81,634,59],[590,84,634,62,"value"],[590,89,634,67],[590,90,634,68],[591,8,635,12],[591,12,635,16,"hex"],[591,15,635,19],[591,18,635,22,"value"],[591,23,635,27],[591,24,635,28,"toString"],[591,32,635,36],[591,33,635,37],[591,35,635,39],[591,36,635,40],[592,8,636,12],[592,12,636,16,"hex"],[592,15,636,19],[592,16,636,20,"length"],[592,22,636,26],[592,26,636,30],[592,27,636,31],[592,29,636,33],[593,10,637,16,"hex"],[593,13,637,19],[593,16,637,22],[593,19,637,25],[593,22,637,28,"hex"],[593,25,637,31],[594,8,638,12],[595,8,639,12],[595,12,639,16],[595,13,639,17,"$hex"],[595,17,639,21],[595,21,639,25,"hex"],[595,24,639,28],[596,6,640,8],[596,7,640,9],[597,6,641,8,"HexWriter"],[597,15,641,17],[597,16,641,18,"prototype"],[597,25,641,27],[597,26,641,28,"canWriteBinary"],[597,40,641,42],[597,43,641,45],[597,53,641,55,"chunk"],[597,58,641,60],[597,60,641,62],[598,8,642,12],[598,15,642,20,"chunk"],[598,20,642,25],[598,32,642,37,"BinaryHex"],[598,41,642,46],[598,45,643,17],[598,52,643,24,"Buffer"],[598,58,643,30],[598,63,643,35],[598,73,643,45],[598,77,643,49,"chunk"],[598,82,643,54],[598,94,643,66,"Buffer"],[598,100,643,73],[599,6,644,8],[599,7,644,9],[600,6,645,8,"HexWriter"],[600,15,645,17],[600,16,645,18,"prototype"],[600,25,645,27],[600,26,645,28,"writeBinary"],[600,37,645,39],[600,40,645,42],[600,50,645,52,"chunk"],[600,55,645,57],[600,57,645,59,"lengthFunction"],[600,71,645,73],[600,73,645,75],[601,8,646,12],[601,12,646,16,"chunk"],[601,17,646,21],[601,29,646,33,"BinaryHex"],[601,38,646,42],[601,40,646,44],[602,10,647,16,"lengthFunction"],[602,24,647,30],[602,25,647,31,"chunk"],[602,30,647,36],[602,31,647,37,"length"],[602,37,647,43],[602,38,647,44],[602,39,647,45],[602,40,647,46],[603,10,648,16],[603,14,648,20],[603,15,648,21,"$hex"],[603,19,648,25],[603,23,648,29,"chunk"],[603,28,648,34],[603,29,648,35,"$hex"],[603,33,648,39],[604,8,649,12],[604,9,649,13],[604,15,650,17],[604,19,650,21],[604,26,650,28,"Buffer"],[604,32,650,34],[604,37,650,39],[604,47,650,49],[604,51,650,53,"chunk"],[604,56,650,58],[604,68,650,70,"Buffer"],[604,74,650,76],[604,76,650,78],[605,10,651,16,"lengthFunction"],[605,24,651,30],[605,25,651,31,"chunk"],[605,30,651,36],[605,31,651,37,"length"],[605,37,651,43],[605,38,651,44],[606,10,652,16],[606,14,652,20],[606,15,652,21,"$hex"],[606,19,652,25],[606,23,652,29,"chunk"],[606,28,652,34],[606,29,652,35,"toString"],[606,37,652,43],[606,38,652,44],[606,43,652,49],[606,44,652,50],[607,8,653,12],[607,9,653,13],[607,15,654,17],[608,10,655,16],[608,16,655,22],[608,20,655,26,"TypeError"],[608,29,655,35],[608,30,655,36],[608,75,655,81],[608,76,655,82],[609,8,656,12],[610,6,657,8],[610,7,657,9],[611,6,658,8,"HexWriter"],[611,15,658,17],[611,16,658,18,"prototype"],[611,25,658,27],[611,26,658,28,"result"],[611,32,658,34],[611,35,658,37],[611,47,658,49],[612,8,659,12],[612,12,659,16],[612,16,659,20],[612,17,659,21,"finalFormat"],[612,28,659,32],[612,33,659,37],[612,41,659,45],[612,45,659,49],[612,52,659,56,"Buffer"],[612,58,659,62],[612,63,659,67],[612,73,659,77],[612,75,659,79],[613,10,660,16],[613,17,660,23,"Buffer"],[613,23,660,29],[613,24,660,30,"from"],[613,28,660,34],[613,29,660,35],[613,33,660,39],[613,34,660,40,"$hex"],[613,38,660,44],[613,40,660,46],[613,45,660,51],[613,46,660,52],[614,8,661,12],[615,8,662,12],[615,15,662,19],[615,19,662,23,"BinaryHex"],[615,28,662,32],[615,29,662,33],[615,33,662,37],[615,34,662,38,"$hex"],[615,38,662,42],[615,39,662,43],[615,40,662,44,"toString"],[615,48,662,52],[615,49,662,53],[615,53,662,57],[615,54,662,58,"finalFormat"],[615,65,662,69],[615,66,662,70],[616,6,663,8],[616,7,663,9],[617,6,664,8,"HexWriter"],[617,15,664,17],[617,16,664,18,"prototype"],[617,25,664,27],[617,26,664,28,"writeString"],[617,37,664,39],[617,40,664,42],[617,50,664,52,"string"],[617,56,664,58],[617,58,664,60,"lengthFunction"],[617,72,664,74],[617,74,664,76],[618,8,665,12],[618,12,665,16,"buffer"],[618,18,665,22],[618,21,665,25,"BinaryHex"],[618,30,665,34],[618,31,665,35,"fromUtf8String"],[618,45,665,49],[618,46,665,50,"string"],[618,52,665,56],[618,53,665,57],[619,8,666,12,"lengthFunction"],[619,22,666,26],[619,23,666,27,"buffer"],[619,29,666,33],[619,30,666,34,"length"],[619,36,666,40],[619,37,666,41],[619,38,666,42],[619,39,666,43],[620,8,667,12],[620,12,667,16],[620,13,667,17,"$hex"],[620,17,667,21],[620,21,667,25,"buffer"],[620,27,667,31],[620,28,667,32,"$hex"],[620,32,667,36],[621,6,668,8],[621,7,668,9],[622,6,669,8,"api"],[622,9,669,11],[622,10,669,12,"addReader"],[622,19,669,21],[622,20,669,22],[622,30,669,32,"data"],[622,34,669,36],[622,36,669,38,"format"],[622,42,669,44],[622,44,669,46],[623,8,670,12],[623,12,670,16,"data"],[623,16,670,20],[623,28,670,32,"BinaryHex"],[623,37,670,41],[623,41,670,45,"data"],[623,45,670,49],[623,46,670,50,"$hex"],[623,50,670,54],[623,52,670,56],[624,10,671,16],[624,17,671,23],[624,21,671,27,"HexReader"],[624,30,671,36],[624,31,671,37,"data"],[624,35,671,41],[624,36,671,42,"$hex"],[624,40,671,46],[624,41,671,47],[625,8,672,12],[626,8,673,12],[626,12,673,16,"format"],[626,18,673,22],[626,23,673,27],[626,28,673,32],[626,30,673,34],[627,10,674,16],[627,17,674,23],[627,21,674,27,"HexReader"],[627,30,674,36],[627,31,674,37,"data"],[627,35,674,41],[627,36,674,42],[628,8,675,12],[629,6,676,8],[629,7,676,9],[629,8,676,10],[630,6,677,8,"api"],[630,9,677,11],[630,10,677,12,"addWriter"],[630,19,677,21],[630,20,677,22],[630,30,677,32,"format"],[630,36,677,38],[630,38,677,40],[631,8,678,12],[631,12,678,16,"format"],[631,18,678,22],[631,23,678,27],[631,28,678,32],[631,30,678,34],[632,10,679,16],[632,17,679,23],[632,21,679,27,"HexWriter"],[632,30,679,36],[632,31,679,37],[632,32,679,38],[633,8,680,12],[634,6,681,8],[634,7,681,9],[634,8,681,10],[635,6,682,8],[635,13,682,15,"api"],[635,16,682,18],[636,4,683,4],[636,5,683,5],[636,6,683,7],[636,7,683,8],[637,4,684,4,"CBOR"],[637,8,684,8],[637,9,684,9,"addSemanticEncode"],[637,26,684,26],[637,27,684,27],[637,28,684,28],[637,30,684,30],[637,40,684,40,"data"],[637,44,684,44],[637,46,684,46],[638,6,685,8],[638,10,685,12,"data"],[638,14,685,16],[638,26,685,28,"Date"],[638,30,685,32],[638,32,685,34],[639,8,686,12],[639,15,686,19,"data"],[639,19,686,23],[639,20,686,24,"toISOString"],[639,31,686,35],[639,32,686,36],[639,33,686,37],[640,6,687,8],[641,4,688,4],[641,5,688,5],[641,6,688,6],[641,7,689,9,"addSemanticDecode"],[641,24,689,26],[641,25,689,27],[641,26,689,28],[641,28,689,30],[641,38,689,40,"isoString"],[641,47,689,49],[641,49,689,51],[642,6,690,8],[642,13,690,15],[642,17,690,19,"Date"],[642,21,690,23],[642,22,690,24,"isoString"],[642,31,690,33],[642,32,690,34],[643,4,691,4],[643,5,691,5],[643,6,691,6],[643,7,692,9,"addSemanticDecode"],[643,24,692,26],[643,25,692,27],[643,26,692,28],[643,28,692,30],[643,38,692,40,"isoString"],[643,47,692,49],[643,49,692,51],[644,6,693,8],[644,13,693,15],[644,17,693,19,"Date"],[644,21,693,23],[644,22,693,24,"isoString"],[644,31,693,33],[644,32,693,34],[645,4,694,4],[645,5,694,5],[645,6,694,6],[646,4,695,4],[646,11,695,11,"CBOR"],[646,15,695,15],[647,2,696,0],[647,3,696,1],[647,4,696,2],[648,0,696,3],[648,3]],"functionMap":{"names":["<global>","<anonymous>","BinaryHex","BinaryHex.prototype.length","BinaryHex.prototype.toString","BinaryHex.fromLatinString","BinaryHex.fromUtf8String","notImplemented","Reader","Reader.prototype.readFloat16","Reader.prototype.readFloat32","Reader.prototype.readFloat64","Reader.prototype.readUint16","Reader.prototype.readUint32","Reader.prototype.readUint64","Writer","Writer.prototype.writeUint16","Writer.prototype.writeUint32","Writer.prototype.writeUint64","Writer.prototype.canWriteBinary","readHeaderRaw","valueFromHeader","writeHeaderRaw","writeHeader","decodeReader","encodeWriter","writer.writeString$argument_1","writer.writeBinary$argument_1","api.addWriter","writerFunctions.push$argument_0","api.addReader","readerFunctions.push$argument_0","api.encode","api.encodeDataItem","api.decode","api.decodeToDataItem","api.addSemanticEncode","api.addSemanticDecode","BufferReader","BufferReader.prototype.peekByte","BufferReader.prototype.readByte","BufferReader.prototype.readUint16","BufferReader.prototype.readUint32","BufferReader.prototype.readFloat32","BufferReader.prototype.readFloat64","BufferReader.prototype.readChunk","BufferWriter","BufferWriter.prototype.writeByte","BufferWriter.prototype.writeFloat32","BufferWriter.prototype.writeFloat64","BufferWriter.prototype.writeString","BufferWriter.prototype.canWriteBinary","BufferWriter.prototype.writeBinary","BufferWriter.prototype.writeBuffer","BufferWriter.prototype.result","api.addReader$argument_0","api.addWriter$argument_0","HexReader","HexReader.prototype.peekByte","HexReader.prototype.readByte","HexReader.prototype.readChunk","HexWriter","HexWriter.prototype.writeByte","HexWriter.prototype.canWriteBinary","HexWriter.prototype.writeBinary","HexWriter.prototype.result","HexWriter.prototype.writeString","CBOR.addSemanticEncode$argument_1","CBOR.addSemanticEncode.addSemanticDecode$argument_1","CBOR.addSemanticEncode.addSemanticDecode.addSemanticDecode$argument_1"],"mappings":"AAA;CCC;CDU,QC;QCG;SDE;oBEE;aFE;sBGC;aHkB;oCIE;SJS;mCKC;SLgB;6BMG;mBNC;aME;SNC;QOC,qBP;yBQK;aRe;yBSC;aTe;yBUC;aVe;wBWC;aXE;wBYC;aZE;wBaC;abE;QcE,qBd;yBeO;afG;yBgBC;ahBG;yBiBC;ajBQ;4BkBE;alBE;QmBG;SnBI;QoBC;SpBqB;QqBC;SrBE;QsBC;StBqB;QuBE;SvByE;QwBC;yCCwC;iBDE;yCEG;iBFE;SxB+B;uB2BO;yCCE;qBDG;a3BK;uB6BC;yCCE;qBDG;a7BK;oB+BC;a/BU;4BgCC;ahCgB;oBiCC;ajCS;8BkCC;alCe;+BmCC;anCM;+BoCC;apCM;QqCE;SrCG;0CsCE;StCE;0CuCC;SvCE;4CwCC;SxCI;4CyCC;SzCI;6C0CC;S1CI;6C2CC;S3CI;2C4CC;S5CI;Q6CC;S7CO;2C8CE;S9CQ;8C+CC;S/CI;8CgDC;ShDI;6CiDC;SjDI;gDkDC;SlDE;6CmDC;SnDG;6CoDC;SpDuB;wCqDC;SrDc;0BsDE;atDQ;0BuDC;avDO;QwDE;SxDG;uCyDE;SzDG;uC0DC;S1DI;wC2DC;S3DM;Q4DC;S5DG;wC6DE;S7DQ;6C8DC;S9DG;0C+DC;S/DY;qCgEC;ShEK;0CiEC;SjEI;sBsDC;StDO;sBuDC;SvDI;8BkEG;KlEI;8BmEC;KnEE;8BoEC;KpEE;CDE"}},"type":"js/module"}]}