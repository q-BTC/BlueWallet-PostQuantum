{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":80,"column":0,"index":2955}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":80,"column":0,"index":2955}}],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE="}},{"name":"bip39","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":31,"index":31}}],"key":"QQUIxv/Rmue50N7SMxVd96Ng/bc="}},{"name":"create-hash","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":32},"end":{"line":2,"column":37,"index":69}}],"key":"S+LTcEsr9DE4tXbLBAdDMJflQ0A="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.generateChecksumWords = generateChecksumWords;\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n  var bip39 = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2], \"bip39\"));\n  var _createHash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"create-hash\"));\n  function _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\n  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n  // partial (11 or 23 word) seed phrase\n  function generateChecksumWords(stringSeedPhrase) {\n    var seedPhrase = stringSeedPhrase.toLowerCase().trim().split(' ');\n    if ((seedPhrase.length + 1) % 3 > 0) {\n      return false; // Partial mnemonic size must be multiple of three words, less one.\n    }\n    var wordList = bip39.wordlists[bip39.getDefaultWordlist()];\n    var concatLenBits = seedPhrase.length * 11;\n    var concatBits = new Array(concatLenBits);\n    var wordindex = 0;\n    for (var i = 0; i < seedPhrase.length; i++) {\n      var word = seedPhrase[i];\n      var ndx = wordList.indexOf(word.toLowerCase());\n      if (ndx === -1) return false;\n      // Set the next 11 bits to the value of the index.\n      for (var ii = 0; ii < 11; ++ii) {\n        concatBits[wordindex * 11 + ii] = (ndx & 1 << 10 - ii) !== 0; // eslint-disable-line no-bitwise\n      }\n      ++wordindex;\n    }\n    var checksumLengthBits = (concatLenBits + 11) / 33;\n    var entropyLengthBits = concatLenBits + 11 - checksumLengthBits;\n    var varyingLengthBits = entropyLengthBits - concatLenBits;\n    var numPermutations = 2 ** varyingLengthBits;\n    var bitPermutations = new Array(numPermutations);\n    for (var _i = 0; _i < numPermutations; _i++) {\n      if (bitPermutations[_i] === undefined || bitPermutations[_i] === null) bitPermutations[_i] = new Array(varyingLengthBits);\n      for (var j = 0; j < varyingLengthBits; j++) {\n        bitPermutations[_i][j] = (_i >> j & 1) === 1; // eslint-disable-line no-bitwise\n      }\n    }\n    var possibleWords = [];\n    for (var _i2 = 0; _i2 < bitPermutations.length; _i2++) {\n      var bitPermutation = bitPermutations[_i2];\n      var entropyBits = new Array(concatLenBits + varyingLengthBits);\n      entropyBits.splice.apply(entropyBits, [0, 0].concat(concatBits));\n      entropyBits.splice.apply(entropyBits, [concatBits.length, 0].concat((0, _toConsumableArray2.default)(bitPermutation.slice(0, varyingLengthBits))));\n      var entropy = new Array(entropyLengthBits / 8);\n      for (var _ii = 0; _ii < entropy.length; ++_ii) {\n        for (var jj = 0; jj < 8; ++jj) {\n          if (entropyBits[_ii * 8 + jj]) {\n            entropy[_ii] |= 1 << 7 - jj; // eslint-disable-line no-bitwise\n          }\n        }\n      }\n      var hash = (0, _createHash.default)('sha256').update(Buffer.from(entropy)).digest();\n      var hashBits = new Array(hash.length * 8);\n      for (var iq = 0; iq < hash.length; ++iq) for (var jq = 0; jq < 8; ++jq) hashBits[iq * 8 + jq] = (hash[iq] & 1 << 7 - jq) !== 0; // eslint-disable-line no-bitwise\n\n      var wordBits = new Array(11);\n      wordBits.splice.apply(wordBits, [0, 0].concat((0, _toConsumableArray2.default)(bitPermutation.slice(0, varyingLengthBits))));\n      wordBits.splice.apply(wordBits, [varyingLengthBits, 0].concat((0, _toConsumableArray2.default)(hashBits.slice(0, checksumLengthBits))));\n      var index = 0;\n      for (var _j = 0; _j < 11; ++_j) {\n        index <<= 1; // eslint-disable-line no-bitwise\n        if (wordBits[_j]) {\n          index |= 0x1; // eslint-disable-line no-bitwise\n        }\n      }\n      possibleWords.push(wordList[index]);\n    }\n    return possibleWords;\n  }\n});","lineCount":75,"map":[[8,2,1,0],[8,6,1,0,"bip39"],[8,11,1,0],[8,14,1,0,"_interopRequireWildcard"],[8,37,1,0],[8,38,1,0,"_$$_REQUIRE"],[8,49,1,0],[8,50,1,0,"_dependencyMap"],[8,64,1,0],[9,2,2,0],[9,6,2,0,"_createHash"],[9,17,2,0],[9,20,2,0,"_interopRequireDefault"],[9,42,2,0],[9,43,2,0,"_$$_REQUIRE"],[9,54,2,0],[9,55,2,0,"_dependencyMap"],[9,69,2,0],[10,2,2,37],[10,11,2,37,"_getRequireWildcardCache"],[10,36,2,37,"e"],[10,37,2,37],[10,66,2,37,"WeakMap"],[10,73,2,37],[10,92,2,37,"r"],[10,93,2,37],[10,100,2,37,"WeakMap"],[10,107,2,37],[10,111,2,37,"t"],[10,112,2,37],[10,119,2,37,"WeakMap"],[10,126,2,37],[10,138,2,37,"_getRequireWildcardCache"],[10,162,2,37],[10,174,2,37,"_getRequireWildcardCache"],[10,199,2,37,"e"],[10,200,2,37],[10,211,2,37,"e"],[10,212,2,37],[10,215,2,37,"t"],[10,216,2,37],[10,219,2,37,"r"],[10,220,2,37],[10,225,2,37,"e"],[10,226,2,37],[11,2,2,37],[11,11,2,37,"_interopRequireWildcard"],[11,35,2,37,"e"],[11,36,2,37],[11,38,2,37,"r"],[11,39,2,37],[11,48,2,37,"r"],[11,49,2,37],[11,53,2,37,"e"],[11,54,2,37],[11,58,2,37,"e"],[11,59,2,37],[11,60,2,37,"__esModule"],[11,70,2,37],[11,79,2,37,"e"],[11,80,2,37],[11,95,2,37,"e"],[11,96,2,37],[11,119,2,37,"e"],[11,120,2,37],[11,145,2,37,"e"],[11,146,2,37],[11,157,2,37,"default"],[11,164,2,37],[11,166,2,37,"e"],[11,167,2,37],[11,175,2,37,"t"],[11,176,2,37],[11,179,2,37,"_getRequireWildcardCache"],[11,203,2,37],[11,204,2,37,"r"],[11,205,2,37],[11,212,2,37,"t"],[11,213,2,37],[11,217,2,37,"t"],[11,218,2,37],[11,219,2,37,"has"],[11,222,2,37],[11,223,2,37,"e"],[11,224,2,37],[11,234,2,37,"t"],[11,235,2,37],[11,236,2,37,"get"],[11,239,2,37],[11,240,2,37,"e"],[11,241,2,37],[11,248,2,37,"n"],[11,249,2,37],[11,254,2,37,"__proto__"],[11,263,2,37],[11,273,2,37,"a"],[11,274,2,37],[11,277,2,37,"Object"],[11,283,2,37],[11,284,2,37,"defineProperty"],[11,298,2,37],[11,302,2,37,"Object"],[11,308,2,37],[11,309,2,37,"getOwnPropertyDescriptor"],[11,333,2,37],[11,344,2,37,"u"],[11,345,2,37],[11,349,2,37,"e"],[11,350,2,37],[11,370,2,37,"u"],[11,371,2,37],[11,378,2,37,"hasOwnProperty"],[11,392,2,37],[11,393,2,37,"call"],[11,397,2,37],[11,398,2,37,"e"],[11,399,2,37],[11,401,2,37,"u"],[11,402,2,37],[11,411,2,37,"i"],[11,412,2,37],[11,415,2,37,"a"],[11,416,2,37],[11,419,2,37,"Object"],[11,425,2,37],[11,426,2,37,"getOwnPropertyDescriptor"],[11,450,2,37],[11,451,2,37,"e"],[11,452,2,37],[11,454,2,37,"u"],[11,455,2,37],[11,465,2,37,"i"],[11,466,2,37],[11,471,2,37,"i"],[11,472,2,37],[11,473,2,37,"get"],[11,476,2,37],[11,480,2,37,"i"],[11,481,2,37],[11,482,2,37,"set"],[11,485,2,37],[11,489,2,37,"Object"],[11,495,2,37],[11,496,2,37,"defineProperty"],[11,510,2,37],[11,511,2,37,"n"],[11,512,2,37],[11,514,2,37,"u"],[11,515,2,37],[11,517,2,37,"i"],[11,518,2,37],[11,522,2,37,"n"],[11,523,2,37],[11,524,2,37,"u"],[11,525,2,37],[11,529,2,37,"e"],[11,530,2,37],[11,531,2,37,"u"],[11,532,2,37],[11,544,2,37,"n"],[11,545,2,37],[11,546,2,37,"default"],[11,553,2,37],[11,556,2,37,"e"],[11,557,2,37],[11,559,2,37,"t"],[11,560,2,37],[11,564,2,37,"t"],[11,565,2,37],[11,566,2,37,"set"],[11,569,2,37],[11,570,2,37,"e"],[11,571,2,37],[11,573,2,37,"n"],[11,574,2,37],[11,577,2,37,"n"],[11,578,2,37],[12,2,4,0],[13,2,5,7],[13,11,5,16,"generateChecksumWords"],[13,32,5,37,"generateChecksumWords"],[13,33,5,38,"stringSeedPhrase"],[13,49,5,62],[13,51,5,64],[14,4,6,2],[14,8,6,8,"seedPhrase"],[14,18,6,18],[14,21,6,21,"stringSeedPhrase"],[14,37,6,37],[14,38,6,38,"toLowerCase"],[14,49,6,49],[14,50,6,50],[14,51,6,51],[14,52,6,52,"trim"],[14,56,6,56],[14,57,6,57],[14,58,6,58],[14,59,6,59,"split"],[14,64,6,64],[14,65,6,65],[14,68,6,68],[14,69,6,69],[15,4,8,2],[15,8,8,6],[15,9,8,7,"seedPhrase"],[15,19,8,17],[15,20,8,18,"length"],[15,26,8,24],[15,29,8,27],[15,30,8,28],[15,34,8,32],[15,35,8,33],[15,38,8,36],[15,39,8,37],[15,41,8,39],[16,6,9,4],[16,13,9,11],[16,18,9,16],[16,19,9,17],[16,20,9,18],[17,4,10,2],[18,4,12,2],[18,8,12,8,"wordList"],[18,16,12,16],[18,19,12,19,"bip39"],[18,24,12,24],[18,25,12,25,"wordlists"],[18,34,12,34],[18,35,12,35,"bip39"],[18,40,12,40],[18,41,12,41,"getDefaultWordlist"],[18,59,12,59],[18,60,12,60],[18,61,12,61],[18,62,12,62],[19,4,14,2],[19,8,14,8,"concatLenBits"],[19,21,14,21],[19,24,14,24,"seedPhrase"],[19,34,14,34],[19,35,14,35,"length"],[19,41,14,41],[19,44,14,44],[19,46,14,46],[20,4,15,2],[20,8,15,8,"concatBits"],[20,18,15,18],[20,21,15,21],[20,25,15,25,"Array"],[20,30,15,30],[20,31,15,31,"concatLenBits"],[20,44,15,44],[20,45,15,45],[21,4,16,2],[21,8,16,6,"wordindex"],[21,17,16,15],[21,20,16,18],[21,21,16,19],[22,4,17,2],[22,9,17,7],[22,13,17,11,"i"],[22,14,17,12],[22,17,17,15],[22,18,17,16],[22,20,17,18,"i"],[22,21,17,19],[22,24,17,22,"seedPhrase"],[22,34,17,32],[22,35,17,33,"length"],[22,41,17,39],[22,43,17,41,"i"],[22,44,17,42],[22,46,17,44],[22,48,17,46],[23,6,18,4],[23,10,18,10,"word"],[23,14,18,14],[23,17,18,17,"seedPhrase"],[23,27,18,27],[23,28,18,28,"i"],[23,29,18,29],[23,30,18,30],[24,6,19,4],[24,10,19,10,"ndx"],[24,13,19,13],[24,16,19,16,"wordList"],[24,24,19,24],[24,25,19,25,"indexOf"],[24,32,19,32],[24,33,19,33,"word"],[24,37,19,37],[24,38,19,38,"toLowerCase"],[24,49,19,49],[24,50,19,50],[24,51,19,51],[24,52,19,52],[25,6,20,4],[25,10,20,8,"ndx"],[25,13,20,11],[25,18,20,16],[25,19,20,17],[25,20,20,18],[25,22,20,20],[25,29,20,27],[25,34,20,32],[26,6,21,4],[27,6,22,4],[27,11,22,9],[27,15,22,13,"ii"],[27,17,22,15],[27,20,22,18],[27,21,22,19],[27,23,22,21,"ii"],[27,25,22,23],[27,28,22,26],[27,30,22,28],[27,32,22,30],[27,34,22,32,"ii"],[27,36,22,34],[27,38,22,36],[28,8,23,6,"concatBits"],[28,18,23,16],[28,19,23,17,"wordindex"],[28,28,23,26],[28,31,23,29],[28,33,23,31],[28,36,23,34,"ii"],[28,38,23,36],[28,39,23,37],[28,42,23,40],[28,43,23,41,"ndx"],[28,46,23,44],[28,49,23,48],[28,50,23,49],[28,54,23,54],[28,56,23,56],[28,59,23,59,"ii"],[28,61,23,63],[28,67,23,69],[28,68,23,70],[28,69,23,71],[28,70,23,72],[29,6,24,4],[30,6,25,4],[30,8,25,6,"wordindex"],[30,17,25,15],[31,4,26,2],[32,4,28,2],[32,8,28,8,"checksumLengthBits"],[32,26,28,26],[32,29,28,29],[32,30,28,30,"concatLenBits"],[32,43,28,43],[32,46,28,46],[32,48,28,48],[32,52,28,52],[32,54,28,54],[33,4,29,2],[33,8,29,8,"entropyLengthBits"],[33,25,29,25],[33,28,29,28,"concatLenBits"],[33,41,29,41],[33,44,29,44],[33,46,29,46],[33,49,29,49,"checksumLengthBits"],[33,67,29,67],[34,4,30,2],[34,8,30,8,"varyingLengthBits"],[34,25,30,25],[34,28,30,28,"entropyLengthBits"],[34,45,30,45],[34,48,30,48,"concatLenBits"],[34,61,30,61],[35,4,31,2],[35,8,31,8,"numPermutations"],[35,23,31,23],[35,26,31,26],[35,27,31,27],[35,31,31,31,"varyingLengthBits"],[35,48,31,48],[36,4,33,2],[36,8,33,8,"bitPermutations"],[36,23,33,23],[36,26,33,26],[36,30,33,30,"Array"],[36,35,33,35],[36,36,33,36,"numPermutations"],[36,51,33,51],[36,52,33,52],[37,4,35,2],[37,9,35,7],[37,13,35,11,"i"],[37,15,35,12],[37,18,35,15],[37,19,35,16],[37,21,35,18,"i"],[37,23,35,19],[37,26,35,22,"numPermutations"],[37,41,35,37],[37,43,35,39,"i"],[37,45,35,40],[37,47,35,42],[37,49,35,44],[38,6,36,4],[38,10,36,8,"bitPermutations"],[38,25,36,23],[38,26,36,24,"i"],[38,28,36,25],[38,29,36,26],[38,34,36,31,"undefined"],[38,43,36,40],[38,47,36,44,"bitPermutations"],[38,62,36,59],[38,63,36,60,"i"],[38,65,36,61],[38,66,36,62],[38,71,36,67],[38,75,36,71],[38,77,36,73,"bitPermutations"],[38,92,36,88],[38,93,36,89,"i"],[38,95,36,90],[38,96,36,91],[38,99,36,94],[38,103,36,98,"Array"],[38,108,36,103],[38,109,36,104,"varyingLengthBits"],[38,126,36,121],[38,127,36,122],[39,6,37,4],[39,11,37,9],[39,15,37,13,"j"],[39,16,37,14],[39,19,37,17],[39,20,37,18],[39,22,37,20,"j"],[39,23,37,21],[39,26,37,24,"varyingLengthBits"],[39,43,37,41],[39,45,37,43,"j"],[39,46,37,44],[39,48,37,46],[39,50,37,48],[40,8,38,6,"bitPermutations"],[40,23,38,21],[40,24,38,22,"i"],[40,26,38,23],[40,27,38,24],[40,28,38,25,"j"],[40,29,38,26],[40,30,38,27],[40,33,38,30],[40,34,38,32,"i"],[40,36,38,33],[40,40,38,37,"j"],[40,41,38,38],[40,44,38,42],[40,45,38,43],[40,51,38,49],[40,52,38,50],[40,53,38,51],[40,54,38,52],[41,6,39,4],[42,4,40,2],[43,4,42,2],[43,8,42,8,"possibleWords"],[43,21,42,21],[43,24,42,24],[43,26,42,26],[44,4,43,2],[44,9,43,7],[44,13,43,11,"i"],[44,16,43,12],[44,19,43,15],[44,20,43,16],[44,22,43,18,"i"],[44,25,43,19],[44,28,43,22,"bitPermutations"],[44,43,43,37],[44,44,43,38,"length"],[44,50,43,44],[44,52,43,46,"i"],[44,55,43,47],[44,57,43,49],[44,59,43,51],[45,6,44,4],[45,10,44,10,"bitPermutation"],[45,24,44,24],[45,27,44,27,"bitPermutations"],[45,42,44,42],[45,43,44,43,"i"],[45,46,44,44],[45,47,44,45],[46,6,45,4],[46,10,45,10,"entropyBits"],[46,21,45,21],[46,24,45,24],[46,28,45,28,"Array"],[46,33,45,33],[46,34,45,34,"concatLenBits"],[46,47,45,47],[46,50,45,50,"varyingLengthBits"],[46,67,45,67],[46,68,45,68],[47,6,46,4,"entropyBits"],[47,17,46,15],[47,18,46,16,"splice"],[47,24,46,22],[47,25,46,22,"apply"],[47,30,46,22],[47,31,46,4,"entropyBits"],[47,42,46,15],[47,45,46,23],[47,46,46,24],[47,48,46,26],[47,49,46,27],[47,51,46,27,"concat"],[47,57,46,27],[47,58,46,32,"concatBits"],[47,68,46,42],[47,70,46,43],[48,6,47,4,"entropyBits"],[48,17,47,15],[48,18,47,16,"splice"],[48,24,47,22],[48,25,47,22,"apply"],[48,30,47,22],[48,31,47,4,"entropyBits"],[48,42,47,15],[48,45,47,23,"concatBits"],[48,55,47,33],[48,56,47,34,"length"],[48,62,47,40],[48,64,47,42],[48,65,47,43],[48,67,47,43,"concat"],[48,73,47,43],[48,78,47,43,"_toConsumableArray2"],[48,97,47,43],[48,98,47,43,"default"],[48,105,47,43],[48,107,47,48,"bitPermutation"],[48,121,47,62],[48,122,47,63,"slice"],[48,127,47,68],[48,128,47,69],[48,129,47,70],[48,131,47,72,"varyingLengthBits"],[48,148,47,89],[48,149,47,90],[48,152,47,91],[49,6,49,4],[49,10,49,10,"entropy"],[49,17,49,17],[49,20,49,20],[49,24,49,24,"Array"],[49,29,49,29],[49,30,49,30,"entropyLengthBits"],[49,47,49,47],[49,50,49,50],[49,51,49,51],[49,52,49,52],[50,6,50,4],[50,11,50,9],[50,15,50,13,"ii"],[50,18,50,15],[50,21,50,18],[50,22,50,19],[50,24,50,21,"ii"],[50,27,50,23],[50,30,50,26,"entropy"],[50,37,50,33],[50,38,50,34,"length"],[50,44,50,40],[50,46,50,42],[50,48,50,44,"ii"],[50,51,50,46],[50,53,50,48],[51,8,51,6],[51,13,51,11],[51,17,51,15,"jj"],[51,19,51,17],[51,22,51,20],[51,23,51,21],[51,25,51,23,"jj"],[51,27,51,25],[51,30,51,28],[51,31,51,29],[51,33,51,31],[51,35,51,33,"jj"],[51,37,51,35],[51,39,51,37],[52,10,52,8],[52,14,52,12,"entropyBits"],[52,25,52,23],[52,26,52,24,"ii"],[52,29,52,26],[52,32,52,29],[52,33,52,30],[52,36,52,33,"jj"],[52,38,52,35],[52,39,52,36],[52,41,52,38],[53,12,53,10,"entropy"],[53,19,53,17],[53,20,53,18,"ii"],[53,23,53,20],[53,24,53,21],[53,28,53,25],[53,29,53,26],[53,33,53,31],[53,34,53,32],[53,37,53,35,"jj"],[53,39,53,38],[53,40,53,39],[53,41,53,40],[54,10,54,8],[55,8,55,6],[56,6,56,4],[57,6,58,4],[57,10,58,10,"hash"],[57,14,58,14],[57,17,58,17],[57,21,58,17,"createHash"],[57,40,58,27],[57,42,58,28],[57,50,58,36],[57,51,58,37],[57,52,58,38,"update"],[57,58,58,44],[57,59,58,45,"Buffer"],[57,65,58,51],[57,66,58,52,"from"],[57,70,58,56],[57,71,58,57,"entropy"],[57,78,58,64],[57,79,58,65],[57,80,58,66],[57,81,58,67,"digest"],[57,87,58,73],[57,88,58,74],[57,89,58,75],[58,6,60,4],[58,10,60,10,"hashBits"],[58,18,60,18],[58,21,60,21],[58,25,60,25,"Array"],[58,30,60,30],[58,31,60,31,"hash"],[58,35,60,35],[58,36,60,36,"length"],[58,42,60,42],[58,45,60,45],[58,46,60,46],[58,47,60,47],[59,6,61,4],[59,11,61,9],[59,15,61,13,"iq"],[59,17,61,15],[59,20,61,18],[59,21,61,19],[59,23,61,21,"iq"],[59,25,61,23],[59,28,61,26,"hash"],[59,32,61,30],[59,33,61,31,"length"],[59,39,61,37],[59,41,61,39],[59,43,61,41,"iq"],[59,45,61,43],[59,47,61,45],[59,52,61,50],[59,56,61,54,"jq"],[59,58,61,56],[59,61,61,59],[59,62,61,60],[59,64,61,62,"jq"],[59,66,61,64],[59,69,61,67],[59,70,61,68],[59,72,61,70],[59,74,61,72,"jq"],[59,76,61,74],[59,78,61,76,"hashBits"],[59,86,61,84],[59,87,61,85,"iq"],[59,89,61,87],[59,92,61,90],[59,93,61,91],[59,96,61,94,"jq"],[59,98,61,96],[59,99,61,97],[59,102,61,100],[59,103,61,101,"hash"],[59,107,61,105],[59,108,61,106,"iq"],[59,110,61,108],[59,111,61,109],[59,114,61,113],[59,115,61,114],[59,119,61,119],[59,120,61,120],[59,123,61,123,"jq"],[59,125,61,127],[59,131,61,133],[59,132,61,134],[59,133,61,135],[59,134,61,136],[61,6,63,4],[61,10,63,10,"wordBits"],[61,18,63,18],[61,21,63,21],[61,25,63,25,"Array"],[61,30,63,30],[61,31,63,31],[61,33,63,33],[61,34,63,34],[62,6,64,4,"wordBits"],[62,14,64,12],[62,15,64,13,"splice"],[62,21,64,19],[62,22,64,19,"apply"],[62,27,64,19],[62,28,64,4,"wordBits"],[62,36,64,12],[62,39,64,20],[62,40,64,21],[62,42,64,23],[62,43,64,24],[62,45,64,24,"concat"],[62,51,64,24],[62,56,64,24,"_toConsumableArray2"],[62,75,64,24],[62,76,64,24,"default"],[62,83,64,24],[62,85,64,29,"bitPermutation"],[62,99,64,43],[62,100,64,44,"slice"],[62,105,64,49],[62,106,64,50],[62,107,64,51],[62,109,64,53,"varyingLengthBits"],[62,126,64,70],[62,127,64,71],[62,130,64,72],[63,6,65,4,"wordBits"],[63,14,65,12],[63,15,65,13,"splice"],[63,21,65,19],[63,22,65,19,"apply"],[63,27,65,19],[63,28,65,4,"wordBits"],[63,36,65,12],[63,39,65,20,"varyingLengthBits"],[63,56,65,37],[63,58,65,39],[63,59,65,40],[63,61,65,40,"concat"],[63,67,65,40],[63,72,65,40,"_toConsumableArray2"],[63,91,65,40],[63,92,65,40,"default"],[63,99,65,40],[63,101,65,45,"hashBits"],[63,109,65,53],[63,110,65,54,"slice"],[63,115,65,59],[63,116,65,60],[63,117,65,61],[63,119,65,63,"checksumLengthBits"],[63,137,65,81],[63,138,65,82],[63,141,65,83],[64,6,67,4],[64,10,67,8,"index"],[64,15,67,13],[64,18,67,16],[64,19,67,17],[65,6,68,4],[65,11,68,9],[65,15,68,13,"j"],[65,17,68,14],[65,20,68,17],[65,21,68,18],[65,23,68,20,"j"],[65,25,68,21],[65,28,68,24],[65,30,68,26],[65,32,68,28],[65,34,68,30,"j"],[65,36,68,31],[65,38,68,33],[66,8,69,6,"index"],[66,13,69,11],[66,18,69,16],[66,19,69,17],[66,20,69,18],[66,21,69,19],[67,8,70,6],[67,12,70,10,"wordBits"],[67,20,70,18],[67,21,70,19,"j"],[67,23,70,20],[67,24,70,21],[67,26,70,23],[68,10,71,8,"index"],[68,15,71,13],[68,19,71,17],[68,22,71,20],[68,23,71,21],[68,24,71,22],[69,8,72,6],[70,6,73,4],[71,6,75,4,"possibleWords"],[71,19,75,17],[71,20,75,18,"push"],[71,24,75,22],[71,25,75,23,"wordList"],[71,33,75,31],[71,34,75,32,"index"],[71,39,75,37],[71,40,75,38],[71,41,75,39],[72,4,76,2],[73,4,78,2],[73,11,78,9,"possibleWords"],[73,24,78,22],[74,2,79,0],[75,0,79,1],[75,3]],"functionMap":{"names":["<global>","generateChecksumWords"],"mappings":"AAA;OCI;CD0E"}},"type":"js/module"}]}