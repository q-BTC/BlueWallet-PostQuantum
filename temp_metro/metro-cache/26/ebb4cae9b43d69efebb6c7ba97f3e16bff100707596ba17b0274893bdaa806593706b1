{"dependencies":[{"name":"stackframe","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":33,"index":366},"end":{"line":9,"column":54,"index":387}}],"key":"dZPDJKyYJyrQnzdEmzWiowCBMas="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  (function (root, factory) {\n    'use strict';\n\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n      define('stack-generator', ['stackframe'], factory);\n    } else if (typeof exports === 'object') {\n      module.exports = factory(_$$_REQUIRE(_dependencyMap[0], \"stackframe\"));\n    } else {\n      root.StackGenerator = factory(root.StackFrame);\n    }\n  })(this, function (StackFrame) {\n    return {\n      backtrace: function StackGenerator$$backtrace(opts) {\n        var stack = [];\n        var maxStackSize = 10;\n        if (typeof opts === 'object' && typeof opts.maxStackSize === 'number') {\n          maxStackSize = opts.maxStackSize;\n        }\n        var curr = arguments.callee;\n        while (curr && stack.length < maxStackSize && curr['arguments']) {\n          // Allow V8 optimizations\n          var args = new Array(curr['arguments'].length);\n          for (var i = 0; i < args.length; ++i) {\n            args[i] = curr['arguments'][i];\n          }\n          if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n            stack.push(new StackFrame({\n              functionName: RegExp.$1 || undefined,\n              args: args\n            }));\n          } else {\n            stack.push(new StackFrame({\n              args: args\n            }));\n          }\n          try {\n            curr = curr.caller;\n          } catch (e) {\n            break;\n          }\n        }\n        return stack;\n      }\n    };\n  });\n});","lineCount":50,"map":[[2,2,1,1],[2,13,1,10,"root"],[2,17,1,14],[2,19,1,16,"factory"],[2,26,1,23],[2,28,1,25],[3,4,2,4],[3,16,2,16],[5,4,3,4],[7,4,5,4],[8,4,6,4],[8,8,6,8],[8,15,6,15,"define"],[8,21,6,21],[8,26,6,26],[8,36,6,36],[8,40,6,40,"define"],[8,46,6,46],[8,47,6,47,"amd"],[8,50,6,50],[8,52,6,52],[9,6,7,8,"define"],[9,12,7,14],[9,13,7,15],[9,30,7,32],[9,32,7,34],[9,33,7,35],[9,45,7,47],[9,46,7,48],[9,48,7,50,"factory"],[9,55,7,57],[9,56,7,58],[10,4,8,4],[10,5,8,5],[10,11,8,11],[10,15,8,15],[10,22,8,22,"exports"],[10,29,8,29],[10,34,8,34],[10,42,8,42],[10,44,8,44],[11,6,9,8,"module"],[11,12,9,14],[11,13,9,15,"exports"],[11,20,9,22],[11,23,9,25,"factory"],[11,30,9,32],[11,31,9,33,"require"],[11,42,9,40],[11,43,9,40,"_dependencyMap"],[11,57,9,40],[11,74,9,53],[11,75,9,54],[11,76,9,55],[12,4,10,4],[12,5,10,5],[12,11,10,11],[13,6,11,8,"root"],[13,10,11,12],[13,11,11,13,"StackGenerator"],[13,25,11,27],[13,28,11,30,"factory"],[13,35,11,37],[13,36,11,38,"root"],[13,40,11,42],[13,41,11,43,"StackFrame"],[13,51,11,53],[13,52,11,54],[14,4,12,4],[15,2,13,0],[15,3,13,1],[15,5,13,2],[15,9,13,6],[15,11,13,8],[15,21,13,17,"StackFrame"],[15,31,13,27],[15,33,13,29],[16,4,14,4],[16,11,14,11],[17,6,15,8,"backtrace"],[17,15,15,17],[17,17,15,19],[17,26,15,28,"StackGenerator$$backtrace"],[17,51,15,53,"StackGenerator$$backtrace"],[17,52,15,54,"opts"],[17,56,15,58],[17,58,15,60],[18,8,16,12],[18,12,16,16,"stack"],[18,17,16,21],[18,20,16,24],[18,22,16,26],[19,8,17,12],[19,12,17,16,"maxStackSize"],[19,24,17,28],[19,27,17,31],[19,29,17,33],[20,8,19,12],[20,12,19,16],[20,19,19,23,"opts"],[20,23,19,27],[20,28,19,32],[20,36,19,40],[20,40,19,44],[20,47,19,51,"opts"],[20,51,19,55],[20,52,19,56,"maxStackSize"],[20,64,19,68],[20,69,19,73],[20,77,19,81],[20,79,19,83],[21,10,20,16,"maxStackSize"],[21,22,20,28],[21,25,20,31,"opts"],[21,29,20,35],[21,30,20,36,"maxStackSize"],[21,42,20,48],[22,8,21,12],[23,8,23,12],[23,12,23,16,"curr"],[23,16,23,20],[23,19,23,23,"arguments"],[23,28,23,32],[23,29,23,33,"callee"],[23,35,23,39],[24,8,24,12],[24,15,24,19,"curr"],[24,19,24,23],[24,23,24,27,"stack"],[24,28,24,32],[24,29,24,33,"length"],[24,35,24,39],[24,38,24,42,"maxStackSize"],[24,50,24,54],[24,54,24,58,"curr"],[24,58,24,62],[24,59,24,63],[24,70,24,74],[24,71,24,75],[24,73,24,77],[25,10,25,16],[26,10,26,16],[26,14,26,20,"args"],[26,18,26,24],[26,21,26,27],[26,25,26,31,"Array"],[26,30,26,36],[26,31,26,37,"curr"],[26,35,26,41],[26,36,26,42],[26,47,26,53],[26,48,26,54],[26,49,26,55,"length"],[26,55,26,61],[26,56,26,62],[27,10,27,16],[27,15,27,21],[27,19,27,25,"i"],[27,20,27,26],[27,23,27,29],[27,24,27,30],[27,26,27,32,"i"],[27,27,27,33],[27,30,27,36,"args"],[27,34,27,40],[27,35,27,41,"length"],[27,41,27,47],[27,43,27,49],[27,45,27,51,"i"],[27,46,27,52],[27,48,27,54],[28,12,28,20,"args"],[28,16,28,24],[28,17,28,25,"i"],[28,18,28,26],[28,19,28,27],[28,22,28,30,"curr"],[28,26,28,34],[28,27,28,35],[28,38,28,46],[28,39,28,47],[28,40,28,48,"i"],[28,41,28,49],[28,42,28,50],[29,10,29,16],[30,10,30,16],[30,14,30,20],[30,45,30,51],[30,46,30,52,"test"],[30,50,30,56],[30,51,30,57,"curr"],[30,55,30,61],[30,56,30,62,"toString"],[30,64,30,70],[30,65,30,71],[30,66,30,72],[30,67,30,73],[30,69,30,75],[31,12,31,20,"stack"],[31,17,31,25],[31,18,31,26,"push"],[31,22,31,30],[31,23,31,31],[31,27,31,35,"StackFrame"],[31,37,31,45],[31,38,31,46],[32,14,31,47,"functionName"],[32,26,31,59],[32,28,31,61,"RegExp"],[32,34,31,67],[32,35,31,68,"$1"],[32,37,31,70],[32,41,31,74,"undefined"],[32,50,31,83],[33,14,31,85,"args"],[33,18,31,89],[33,20,31,91,"args"],[34,12,31,95],[34,13,31,96],[34,14,31,97],[34,15,31,98],[35,10,32,16],[35,11,32,17],[35,17,32,23],[36,12,33,20,"stack"],[36,17,33,25],[36,18,33,26,"push"],[36,22,33,30],[36,23,33,31],[36,27,33,35,"StackFrame"],[36,37,33,45],[36,38,33,46],[37,14,33,47,"args"],[37,18,33,51],[37,20,33,53,"args"],[38,12,33,57],[38,13,33,58],[38,14,33,59],[38,15,33,60],[39,10,34,16],[40,10,36,16],[40,14,36,20],[41,12,37,20,"curr"],[41,16,37,24],[41,19,37,27,"curr"],[41,23,37,31],[41,24,37,32,"caller"],[41,30,37,38],[42,10,38,16],[42,11,38,17],[42,12,38,18],[42,19,38,25,"e"],[42,20,38,26],[42,22,38,28],[43,12,39,20],[44,10,40,16],[45,8,41,12],[46,8,42,12],[46,15,42,19,"stack"],[46,20,42,24],[47,6,43,8],[48,4,44,4],[48,5,44,5],[49,2,45,0],[49,3,45,1],[49,4,45,2],[50,0,45,4],[50,3]],"functionMap":{"names":["<global>","<anonymous>","StackGenerator$$backtrace"],"mappings":"AAA,CC;CDY,OC;mBCE;SD4B;CDE"}},"type":"js/module"}]}