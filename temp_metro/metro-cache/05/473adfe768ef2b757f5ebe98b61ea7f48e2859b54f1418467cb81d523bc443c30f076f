{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1163,"column":0,"index":39851}}],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1163,"column":0,"index":39851}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1163,"column":0,"index":39851}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"crypto","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":19,"index":391},"end":{"line":5,"column":36,"index":408}}],"key":"qkQHogusroKbdlr5of4h1Mv5pUg="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\n  var _asyncToGenerator = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.utils = exports.schnorr = exports.verify = exports.signSync = exports.sign = exports.getSharedSecret = exports.recoverPublicKey = exports.getPublicKey = exports.Signature = exports.Point = exports.CURVE = void 0;\n  var _0n = BigInt(0);\n  var _1n = BigInt(1);\n  var _2n = BigInt(2);\n  var _3n = BigInt(3);\n  var _8n = BigInt(8);\n  var POW_2_256 = _2n ** BigInt(256);\n  var CURVE = {\n    a: _0n,\n    b: BigInt(7),\n    P: POW_2_256 - _2n ** BigInt(32) - BigInt(977),\n    n: POW_2_256 - BigInt('432420386565659656852420866394968145599'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee')\n  };\n  exports.CURVE = CURVE;\n  function weistrass(x) {\n    var a = CURVE.a,\n      b = CURVE.b;\n    var x2 = mod(x * x);\n    var x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n  }\n  var USE_ENDOMORPHISM = CURVE.a === _0n;\n  var JacobianPoint = /*#__PURE__*/function () {\n    function JacobianPoint(x, y, z) {\n      _classCallCheck(this, JacobianPoint);\n      this.x = x;\n      this.y = y;\n      this.z = z;\n    }\n    return _createClass(JacobianPoint, [{\n      key: \"equals\",\n      value: function equals(other) {\n        if (!(other instanceof JacobianPoint)) throw new TypeError('JacobianPoint expected');\n        var X1 = this.x,\n          Y1 = this.y,\n          Z1 = this.z;\n        var X2 = other.x,\n          Y2 = other.y,\n          Z2 = other.z;\n        var Z1Z1 = mod(Z1 ** _2n);\n        var Z2Z2 = mod(Z2 ** _2n);\n        var U1 = mod(X1 * Z2Z2);\n        var U2 = mod(X2 * Z1Z1);\n        var S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        var S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n      }\n    }, {\n      key: \"negate\",\n      value: function negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n      }\n    }, {\n      key: \"double\",\n      value: function double() {\n        var X1 = this.x,\n          Y1 = this.y,\n          Z1 = this.z;\n        var A = mod(X1 ** _2n);\n        var B = mod(Y1 ** _2n);\n        var C = mod(B ** _2n);\n        var D = mod(_2n * (mod((X1 + B) ** _2n) - A - C));\n        var E = mod(_3n * A);\n        var F = mod(E ** _2n);\n        var X3 = mod(F - _2n * D);\n        var Y3 = mod(E * (D - X3) - _8n * C);\n        var Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n      }\n    }, {\n      key: \"add\",\n      value: function add(other) {\n        if (!(other instanceof JacobianPoint)) throw new TypeError('JacobianPoint expected');\n        var X1 = this.x,\n          Y1 = this.y,\n          Z1 = this.z;\n        var X2 = other.x,\n          Y2 = other.y,\n          Z2 = other.z;\n        if (X2 === _0n || Y2 === _0n) return this;\n        if (X1 === _0n || Y1 === _0n) return other;\n        var Z1Z1 = mod(Z1 ** _2n);\n        var Z2Z2 = mod(Z2 ** _2n);\n        var U1 = mod(X1 * Z2Z2);\n        var U2 = mod(X2 * Z1Z1);\n        var S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        var S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        var H = mod(U2 - U1);\n        var r = mod(S2 - S1);\n        if (H === _0n) {\n          if (r === _0n) {\n            return this.double();\n          } else {\n            return JacobianPoint.ZERO;\n          }\n        }\n        var HH = mod(H ** _2n);\n        var HHH = mod(H * HH);\n        var V = mod(U1 * HH);\n        var X3 = mod(r ** _2n - HHH - _2n * V);\n        var Y3 = mod(r * (V - X3) - S1 * HHH);\n        var Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n      }\n    }, {\n      key: \"subtract\",\n      value: function subtract(other) {\n        return this.add(other.negate());\n      }\n    }, {\n      key: \"multiplyUnsafe\",\n      value: function multiplyUnsafe(scalar) {\n        var P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n) return P0;\n        var n = normalizeScalar(scalar);\n        if (n === _1n) return this;\n        if (!USE_ENDOMORPHISM) {\n          var p = P0;\n          var _d = this;\n          while (n > _0n) {\n            if (n & _1n) p = p.add(_d);\n            _d = _d.double();\n            n >>= _1n;\n          }\n          return p;\n        }\n        var _splitScalarEndo = splitScalarEndo(n),\n          k1neg = _splitScalarEndo.k1neg,\n          k1 = _splitScalarEndo.k1,\n          k2neg = _splitScalarEndo.k2neg,\n          k2 = _splitScalarEndo.k2;\n        var k1p = P0;\n        var k2p = P0;\n        var d = this;\n        while (k1 > _0n || k2 > _0n) {\n          if (k1 & _1n) k1p = k1p.add(d);\n          if (k2 & _1n) k2p = k2p.add(d);\n          d = d.double();\n          k1 >>= _1n;\n          k2 >>= _1n;\n        }\n        if (k1neg) k1p = k1p.negate();\n        if (k2neg) k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n      }\n    }, {\n      key: \"precomputeWindow\",\n      value: function precomputeWindow(W) {\n        var windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        var points = [];\n        var p = this;\n        var base = p;\n        for (var window = 0; window < windows; window++) {\n          base = p;\n          points.push(base);\n          for (var i = 1; i < 2 ** (W - 1); i++) {\n            base = base.add(p);\n            points.push(base);\n          }\n          p = base.double();\n        }\n        return points;\n      }\n    }, {\n      key: \"wNAF\",\n      value: function wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE)) affinePoint = Point.BASE;\n        var W = affinePoint && affinePoint._WINDOW_SIZE || 1;\n        if (256 % W) {\n          throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        var precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n          precomputes = this.precomputeWindow(W);\n          if (affinePoint && W !== 1) {\n            precomputes = JacobianPoint.normalizeZ(precomputes);\n            pointPrecomputes.set(affinePoint, precomputes);\n          }\n        }\n        var p = JacobianPoint.ZERO;\n        var f = JacobianPoint.ZERO;\n        var windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        var windowSize = 2 ** (W - 1);\n        var mask = BigInt(2 ** W - 1);\n        var maxNumber = 2 ** W;\n        var shiftBy = BigInt(W);\n        for (var window = 0; window < windows; window++) {\n          var offset = window * windowSize;\n          var wbits = Number(n & mask);\n          n >>= shiftBy;\n          if (wbits > windowSize) {\n            wbits -= maxNumber;\n            n += _1n;\n          }\n          if (wbits === 0) {\n            var pr = precomputes[offset];\n            if (window % 2) pr = pr.negate();\n            f = f.add(pr);\n          } else {\n            var cached = precomputes[offset + Math.abs(wbits) - 1];\n            if (wbits < 0) cached = cached.negate();\n            p = p.add(cached);\n          }\n        }\n        return {\n          p: p,\n          f: f\n        };\n      }\n    }, {\n      key: \"multiply\",\n      value: function multiply(scalar, affinePoint) {\n        var n = normalizeScalar(scalar);\n        var point;\n        var fake;\n        if (USE_ENDOMORPHISM) {\n          var _splitScalarEndo2 = splitScalarEndo(n),\n            k1neg = _splitScalarEndo2.k1neg,\n            k1 = _splitScalarEndo2.k1,\n            k2neg = _splitScalarEndo2.k2neg,\n            k2 = _splitScalarEndo2.k2;\n          var _this$wNAF = this.wNAF(k1, affinePoint),\n            k1p = _this$wNAF.p,\n            f1p = _this$wNAF.f;\n          var _this$wNAF2 = this.wNAF(k2, affinePoint),\n            k2p = _this$wNAF2.p,\n            f2p = _this$wNAF2.f;\n          if (k1neg) k1p = k1p.negate();\n          if (k2neg) k2p = k2p.negate();\n          k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n          point = k1p.add(k2p);\n          fake = f1p.add(f2p);\n        } else {\n          var _this$wNAF3 = this.wNAF(n, affinePoint),\n            p = _this$wNAF3.p,\n            f = _this$wNAF3.f;\n          point = p;\n          fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n      }\n    }, {\n      key: \"toAffine\",\n      value: function toAffine() {\n        var invZ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : invert(this.z);\n        var x = this.x,\n          y = this.y,\n          z = this.z;\n        var iz1 = invZ;\n        var iz2 = mod(iz1 * iz1);\n        var iz3 = mod(iz2 * iz1);\n        var ax = mod(x * iz2);\n        var ay = mod(y * iz3);\n        var zz = mod(z * iz1);\n        if (zz !== _1n) throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n      }\n    }], [{\n      key: \"fromAffine\",\n      value: function fromAffine(p) {\n        if (!(p instanceof Point)) {\n          throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n      }\n    }, {\n      key: \"toAffineBatch\",\n      value: function toAffineBatch(points) {\n        var toInv = invertBatch(points.map(function (p) {\n          return p.z;\n        }));\n        return points.map(function (p, i) {\n          return p.toAffine(toInv[i]);\n        });\n      }\n    }, {\n      key: \"normalizeZ\",\n      value: function normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n      }\n    }]);\n  }();\n  JacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\n  JacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\n  var pointPrecomputes = new WeakMap();\n  var Point = /*#__PURE__*/function () {\n    function Point(x, y) {\n      _classCallCheck(this, Point);\n      this.x = x;\n      this.y = y;\n    }\n    return _createClass(Point, [{\n      key: \"_setWindowSize\",\n      value: function _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n      }\n    }, {\n      key: \"toRawBytes\",\n      value: function toRawBytes() {\n        var isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        return hexToBytes(this.toHex(isCompressed));\n      }\n    }, {\n      key: \"toHex\",\n      value: function toHex() {\n        var isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var x = numTo32bStr(this.x);\n        if (isCompressed) {\n          var prefix = this.y & _1n ? '03' : '02';\n          return `${prefix}${x}`;\n        } else {\n          return `04${x}${numTo32bStr(this.y)}`;\n        }\n      }\n    }, {\n      key: \"toHexX\",\n      value: function toHexX() {\n        return this.toHex(true).slice(2);\n      }\n    }, {\n      key: \"toRawX\",\n      value: function toRawX() {\n        return this.toRawBytes(true).slice(1);\n      }\n    }, {\n      key: \"assertValidity\",\n      value: function assertValidity() {\n        var msg = 'Point is not on elliptic curve';\n        var x = this.x,\n          y = this.y;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y)) throw new Error(msg);\n        var left = mod(y * y);\n        var right = weistrass(x);\n        if (mod(left - right) !== _0n) throw new Error(msg);\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(other) {\n        return this.x === other.x && this.y === other.y;\n      }\n    }, {\n      key: \"negate\",\n      value: function negate() {\n        return new Point(this.x, mod(-this.y));\n      }\n    }, {\n      key: \"double\",\n      value: function double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n      }\n    }, {\n      key: \"add\",\n      value: function add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n      }\n    }, {\n      key: \"subtract\",\n      value: function subtract(other) {\n        return this.add(other.negate());\n      }\n    }, {\n      key: \"multiply\",\n      value: function multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n      }\n    }, {\n      key: \"multiplyAndAddUnsafe\",\n      value: function multiplyAndAddUnsafe(Q, a, b) {\n        var P = JacobianPoint.fromAffine(this);\n        var aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        var bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        var sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n      }\n    }], [{\n      key: \"fromCompressedHex\",\n      value: function fromCompressedHex(bytes) {\n        var isShort = bytes.length === 32;\n        var x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        var y2 = weistrass(x);\n        var y = sqrtMod(y2);\n        var isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n          if (isYOdd) y = mod(-y);\n        } else {\n          var isFirstByteOdd = (bytes[0] & 1) === 1;\n          if (isFirstByteOdd !== isYOdd) y = mod(-y);\n        }\n        var point = new Point(x, y);\n        point.assertValidity();\n        return point;\n      }\n    }, {\n      key: \"fromUncompressedHex\",\n      value: function fromUncompressedHex(bytes) {\n        var x = bytesToNumber(bytes.subarray(1, 33));\n        var y = bytesToNumber(bytes.subarray(33, 65));\n        var point = new Point(x, y);\n        point.assertValidity();\n        return point;\n      }\n    }, {\n      key: \"fromHex\",\n      value: function fromHex(hex) {\n        var bytes = ensureBytes(hex);\n        var len = bytes.length;\n        var header = bytes[0];\n        if (len === 32 || len === 33 && (header === 0x02 || header === 0x03)) {\n          return this.fromCompressedHex(bytes);\n        }\n        if (len === 65 && header === 0x04) return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n      }\n    }, {\n      key: \"fromPrivateKey\",\n      value: function fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n      }\n    }, {\n      key: \"fromSignature\",\n      value: function fromSignature(msgHash, signature, recovery) {\n        msgHash = ensureBytes(msgHash);\n        var h = truncateHash(msgHash);\n        var _normalizeSignature = normalizeSignature(signature),\n          r = _normalizeSignature.r,\n          s = _normalizeSignature.s;\n        if (recovery !== 0 && recovery !== 1) {\n          throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        var prefix = recovery & 1 ? '03' : '02';\n        var R = Point.fromHex(prefix + numTo32bStr(r));\n        var n = CURVE.n;\n        var rinv = invert(r, n);\n        var u1 = mod(-h * rinv, n);\n        var u2 = mod(s * rinv, n);\n        var Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q) throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n      }\n    }]);\n  }();\n  exports.Point = Point;\n  Point.BASE = new Point(CURVE.Gx, CURVE.Gy);\n  Point.ZERO = new Point(_0n, _0n);\n  function sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n  }\n  function parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n      throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    var len = data[1];\n    var res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n      throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n      throw new Error('Invalid signature integer: trailing length');\n    }\n    return {\n      data: bytesToNumber(res),\n      left: data.subarray(len + 2)\n    };\n  }\n  function parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n      throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n      throw new Error('Invalid signature: incorrect length');\n    }\n    var _parseDERInt = parseDERInt(data.subarray(2)),\n      r = _parseDERInt.data,\n      sBytes = _parseDERInt.left;\n    var _parseDERInt2 = parseDERInt(sBytes),\n      s = _parseDERInt2.data,\n      rBytesLeft = _parseDERInt2.left;\n    if (rBytesLeft.length) {\n      throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return {\n      r: r,\n      s: s\n    };\n  }\n  var Signature = /*#__PURE__*/function () {\n    function Signature(r, s) {\n      _classCallCheck(this, Signature);\n      this.r = r;\n      this.s = s;\n      this.assertValidity();\n    }\n    return _createClass(Signature, [{\n      key: \"assertValidity\",\n      value: function assertValidity() {\n        var r = this.r,\n          s = this.s;\n        if (!isWithinCurveOrder(r)) throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s)) throw new Error('Invalid Signature: s must be 0 < s < n');\n      }\n    }, {\n      key: \"hasHighS\",\n      value: function hasHighS() {\n        var HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n      }\n    }, {\n      key: \"normalizeS\",\n      value: function normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n      }\n    }, {\n      key: \"toDERRawBytes\",\n      value: function toDERRawBytes() {\n        var isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        return hexToBytes(this.toDERHex(isCompressed));\n      }\n    }, {\n      key: \"toDERHex\",\n      value: function toDERHex() {\n        var isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var sHex = sliceDER(numberToHexUnpadded(this.s));\n        if (isCompressed) return sHex;\n        var rHex = sliceDER(numberToHexUnpadded(this.r));\n        var rLen = numberToHexUnpadded(rHex.length / 2);\n        var sLen = numberToHexUnpadded(sHex.length / 2);\n        var length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n      }\n    }, {\n      key: \"toRawBytes\",\n      value: function toRawBytes() {\n        return this.toDERRawBytes();\n      }\n    }, {\n      key: \"toHex\",\n      value: function toHex() {\n        return this.toDERHex();\n      }\n    }, {\n      key: \"toCompactRawBytes\",\n      value: function toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n      }\n    }, {\n      key: \"toCompactHex\",\n      value: function toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n      }\n    }], [{\n      key: \"fromCompact\",\n      value: function fromCompact(hex) {\n        var arr = isUint8a(hex);\n        var name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr) throw new TypeError(`${name}: Expected string or Uint8Array`);\n        var str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128) throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n      }\n    }, {\n      key: \"fromDER\",\n      value: function fromDER(hex) {\n        var arr = isUint8a(hex);\n        if (typeof hex !== 'string' && !arr) throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        var _parseDERSignature = parseDERSignature(arr ? hex : hexToBytes(hex)),\n          r = _parseDERSignature.r,\n          s = _parseDERSignature.s;\n        return new Signature(r, s);\n      }\n    }, {\n      key: \"fromHex\",\n      value: function fromHex(hex) {\n        return this.fromDER(hex);\n      }\n    }]);\n  }();\n  exports.Signature = Signature;\n  function concatBytes() {\n    for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n      arrays[_key] = arguments[_key];\n    }\n    if (!arrays.every(isUint8a)) throw new Error('Uint8Array list expected');\n    if (arrays.length === 1) return arrays[0];\n    var length = arrays.reduce(function (a, arr) {\n      return a + arr.length;\n    }, 0);\n    var result = new Uint8Array(length);\n    for (var i = 0, pad = 0; i < arrays.length; i++) {\n      var arr = arrays[i];\n      result.set(arr, pad);\n      pad += arr.length;\n    }\n    return result;\n  }\n  function isUint8a(bytes) {\n    return bytes instanceof Uint8Array;\n  }\n  var hexes = Array.from({\n    length: 256\n  }, function (v, i) {\n    return i.toString(16).padStart(2, '0');\n  });\n  function bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n    var hex = '';\n    for (var i = 0; i < uint8a.length; i++) {\n      hex += hexes[uint8a[i]];\n    }\n    return hex;\n  }\n  function numTo32bStr(num) {\n    if (num > POW_2_256) throw new Error('Expected number < 2^256');\n    return num.toString(16).padStart(64, '0');\n  }\n  function numTo32b(num) {\n    return hexToBytes(numTo32bStr(num));\n  }\n  function numberToHexUnpadded(num) {\n    var hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n  }\n  function hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n      throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n  }\n  function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n      throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    var array = new Uint8Array(hex.length / 2);\n    for (var i = 0; i < array.length; i++) {\n      var j = i * 2;\n      var hexByte = hex.slice(j, j + 2);\n      var byte = Number.parseInt(hexByte, 16);\n      if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n      array[i] = byte;\n    }\n    return array;\n  }\n  function bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n  }\n  function ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n  }\n  function normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0) return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num)) return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n  }\n  function mod(a) {\n    var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n    var result = a % b;\n    return result >= _0n ? result : b + result;\n  }\n  function pow2(x, power) {\n    var P = CURVE.P;\n    var res = x;\n    while (power-- > _0n) {\n      res *= res;\n      res %= P;\n    }\n    return res;\n  }\n  function sqrtMod(x) {\n    var P = CURVE.P;\n    var _6n = BigInt(6);\n    var _11n = BigInt(11);\n    var _22n = BigInt(22);\n    var _23n = BigInt(23);\n    var _44n = BigInt(44);\n    var _88n = BigInt(88);\n    var b2 = x * x * x % P;\n    var b3 = b2 * b2 * x % P;\n    var b6 = pow2(b3, _3n) * b3 % P;\n    var b9 = pow2(b6, _3n) * b3 % P;\n    var b11 = pow2(b9, _2n) * b2 % P;\n    var b22 = pow2(b11, _11n) * b11 % P;\n    var b44 = pow2(b22, _22n) * b22 % P;\n    var b88 = pow2(b44, _44n) * b44 % P;\n    var b176 = pow2(b88, _88n) * b88 % P;\n    var b220 = pow2(b176, _44n) * b44 % P;\n    var b223 = pow2(b220, _3n) * b3 % P;\n    var t1 = pow2(b223, _23n) * b22 % P;\n    var t2 = pow2(t1, _6n) * b2 % P;\n    return pow2(t2, _2n);\n  }\n  function invert(number) {\n    var modulo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n    if (number === _0n || modulo <= _0n) {\n      throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    var a = mod(number, modulo);\n    var b = modulo;\n    var x = _0n,\n      y = _1n,\n      u = _1n,\n      v = _0n;\n    while (a !== _0n) {\n      var q = b / a;\n      var r = b % a;\n      var m = x - u * q;\n      var n = y - v * q;\n      b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    var gcd = b;\n    if (gcd !== _1n) throw new Error('invert: does not exist');\n    return mod(x, modulo);\n  }\n  function invertBatch(nums) {\n    var p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n    var scratch = new Array(nums.length);\n    var lastMultiplied = nums.reduce(function (acc, num, i) {\n      if (num === _0n) return acc;\n      scratch[i] = acc;\n      return mod(acc * num, p);\n    }, _1n);\n    var inverted = invert(lastMultiplied, p);\n    nums.reduceRight(function (acc, num, i) {\n      if (num === _0n) return acc;\n      scratch[i] = mod(acc * scratch[i], p);\n      return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n  }\n  var divNearest = function divNearest(a, b) {\n    return (a + b / _2n) / b;\n  };\n  var POW_2_128 = _2n ** BigInt(128);\n  function splitScalarEndo(k) {\n    var n = CURVE.n;\n    var a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n    var b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n    var a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n    var b2 = a1;\n    var c1 = divNearest(b2 * k, n);\n    var c2 = divNearest(-b1 * k, n);\n    var k1 = mod(k - c1 * a1 - c2 * a2, n);\n    var k2 = mod(-c1 * b1 - c2 * b2, n);\n    var k1neg = k1 > POW_2_128;\n    var k2neg = k2 > POW_2_128;\n    if (k1neg) k1 = n - k1;\n    if (k2neg) k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\n      throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n    }\n    return {\n      k1neg: k1neg,\n      k1: k1,\n      k2neg: k2neg,\n      k2: k2\n    };\n  }\n  function truncateHash(hash) {\n    var n = CURVE.n;\n    var byteLength = hash.length;\n    var delta = byteLength * 8 - 256;\n    var h = bytesToNumber(hash);\n    if (delta > 0) h = h >> BigInt(delta);\n    if (h >= n) h -= n;\n    return h;\n  }\n  var HmacDrbg = /*#__PURE__*/function () {\n    function HmacDrbg() {\n      _classCallCheck(this, HmacDrbg);\n      this.v = new Uint8Array(32).fill(1);\n      this.k = new Uint8Array(32).fill(0);\n      this.counter = 0;\n    }\n    return _createClass(HmacDrbg, [{\n      key: \"hmac\",\n      value: function hmac() {\n        var _exports$utils;\n        for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          values[_key2] = arguments[_key2];\n        }\n        return (_exports$utils = exports.utils).hmacSha256.apply(_exports$utils, [this.k].concat(values));\n      }\n    }, {\n      key: \"hmacSync\",\n      value: function hmacSync() {\n        var _exports$utils2;\n        if (typeof exports.utils.hmacSha256Sync !== 'function') throw new Error('utils.hmacSha256Sync is undefined, you need to set it');\n        for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          values[_key3] = arguments[_key3];\n        }\n        var res = (_exports$utils2 = exports.utils).hmacSha256Sync.apply(_exports$utils2, [this.k].concat(values));\n        if (res instanceof Promise) throw new Error('To use sync sign(), ensure utils.hmacSha256 is sync');\n        return res;\n      }\n    }, {\n      key: \"incr\",\n      value: function incr() {\n        if (this.counter >= 1000) {\n          throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        }\n        this.counter += 1;\n      }\n    }, {\n      key: \"reseed\",\n      value: function () {\n        var _reseed = _asyncToGenerator(function* () {\n          var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();\n          this.k = yield this.hmac(this.v, Uint8Array.from([0x00]), seed);\n          this.v = yield this.hmac(this.v);\n          if (seed.length === 0) return;\n          this.k = yield this.hmac(this.v, Uint8Array.from([0x01]), seed);\n          this.v = yield this.hmac(this.v);\n        });\n        function reseed() {\n          return _reseed.apply(this, arguments);\n        }\n        return reseed;\n      }()\n    }, {\n      key: \"reseedSync\",\n      value: function reseedSync() {\n        var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0) return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n      }\n    }, {\n      key: \"generate\",\n      value: function () {\n        var _generate = _asyncToGenerator(function* () {\n          this.incr();\n          this.v = yield this.hmac(this.v);\n          return this.v;\n        });\n        function generate() {\n          return _generate.apply(this, arguments);\n        }\n        return generate;\n      }()\n    }, {\n      key: \"generateSync\",\n      value: function generateSync() {\n        this.incr();\n        this.v = this.hmacSync(this.v);\n        return this.v;\n      }\n    }]);\n  }();\n  function isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n  }\n  function isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n  }\n  function kmdToSig(kBytes, m, d) {\n    var k = bytesToNumber(kBytes);\n    if (!isWithinCurveOrder(k)) return;\n    var n = CURVE.n;\n    var q = Point.BASE.multiply(k);\n    var r = mod(q.x, n);\n    if (r === _0n) return;\n    var s = mod(invert(k, n) * mod(m + d * r, n), n);\n    if (s === _0n) return;\n    var sig = new Signature(r, s);\n    var recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    return {\n      sig: sig,\n      recovery: recovery\n    };\n  }\n  function normalizePrivateKey(key) {\n    var num;\n    if (typeof key === 'bigint') {\n      num = key;\n    } else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n      num = BigInt(key);\n    } else if (typeof key === 'string') {\n      if (key.length !== 64) throw new Error('Expected 32 bytes of private key');\n      num = hexToNumber(key);\n    } else if (isUint8a(key)) {\n      if (key.length !== 32) throw new Error('Expected 32 bytes of private key');\n      num = bytesToNumber(key);\n    } else {\n      throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num)) throw new Error('Expected private key: 0 < key < n');\n    return num;\n  }\n  function normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n      publicKey.assertValidity();\n      return publicKey;\n    } else {\n      return Point.fromHex(publicKey);\n    }\n  }\n  function normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n      signature.assertValidity();\n      return signature;\n    }\n    try {\n      return Signature.fromDER(signature);\n    } catch (error) {\n      return Signature.fromCompact(signature);\n    }\n  }\n  function getPublicKey(privateKey) {\n    var isCompressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n  exports.getPublicKey = getPublicKey;\n  function recoverPublicKey(msgHash, signature, recovery) {\n    var isCompressed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n  }\n  exports.recoverPublicKey = recoverPublicKey;\n  function isPub(item) {\n    var arr = isUint8a(item);\n    var str = typeof item === 'string';\n    var len = (arr || str) && item.length;\n    if (arr) return len === 33 || len === 65;\n    if (str) return len === 66 || len === 130;\n    if (item instanceof Point) return true;\n    return false;\n  }\n  function getSharedSecret(privateA, publicB) {\n    var isCompressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (isPub(privateA)) throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isPub(publicB)) throw new TypeError('getSharedSecret: second arg must be public key');\n    var b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n  }\n  exports.getSharedSecret = getSharedSecret;\n  function bits2int(bytes) {\n    var slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n    return bytesToNumber(slice);\n  }\n  function bits2octets(bytes) {\n    var z1 = bits2int(bytes);\n    var z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n  }\n  function int2octets(num) {\n    if (typeof num !== 'bigint') throw new Error('Expected bigint');\n    var hex = numTo32bStr(num);\n    return hexToBytes(hex);\n  }\n  function initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null) throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    var h1 = ensureBytes(msgHash);\n    var d = normalizePrivateKey(privateKey);\n    var seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n      if (extraEntropy === true) extraEntropy = exports.utils.randomBytes(32);\n      var e = ensureBytes(extraEntropy);\n      if (e.length !== 32) throw new Error('sign: Expected 32 bytes of extra data');\n      seedArgs.push(e);\n    }\n    var seed = concatBytes.apply(void 0, seedArgs);\n    var m = bits2int(h1);\n    return {\n      seed: seed,\n      m: m,\n      d: d\n    };\n  }\n  function finalizeSig(recSig, opts) {\n    var sig = recSig.sig,\n      recovery = recSig.recovery;\n    var _Object$assign = Object.assign({\n        canonical: true,\n        der: true\n      }, opts),\n      canonical = _Object$assign.canonical,\n      der = _Object$assign.der,\n      recovered = _Object$assign.recovered;\n    if (canonical && sig.hasHighS()) {\n      sig = sig.normalizeS();\n      recovery ^= 1;\n    }\n    var hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n  }\n  function sign(_x, _x2) {\n    return _sign.apply(this, arguments);\n  }\n  function _sign() {\n    _sign = _asyncToGenerator(function* (msgHash, privKey) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _initSigArgs2 = initSigArgs(msgHash, privKey, opts.extraEntropy),\n        seed = _initSigArgs2.seed,\n        m = _initSigArgs2.m,\n        d = _initSigArgs2.d;\n      var sig;\n      var drbg = new HmacDrbg();\n      yield drbg.reseed(seed);\n      while (!(sig = kmdToSig(yield drbg.generate(), m, d))) yield drbg.reseed();\n      return finalizeSig(sig, opts);\n    });\n    return _sign.apply(this, arguments);\n  }\n  exports.sign = sign;\n  function signSync(msgHash, privKey) {\n    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var _initSigArgs = initSigArgs(msgHash, privKey, opts.extraEntropy),\n      seed = _initSigArgs.seed,\n      m = _initSigArgs.m,\n      d = _initSigArgs.d;\n    var sig;\n    var drbg = new HmacDrbg();\n    drbg.reseedSync(seed);\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d))) drbg.reseedSync();\n    return finalizeSig(sig, opts);\n  }\n  exports.signSync = signSync;\n  var vopts = {\n    strict: true\n  };\n  function verify(signature, msgHash, publicKey) {\n    var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : vopts;\n    var sig;\n    try {\n      sig = normalizeSignature(signature);\n      msgHash = ensureBytes(msgHash);\n    } catch (error) {\n      return false;\n    }\n    var _sig = sig,\n      r = _sig.r,\n      s = _sig.s;\n    if (opts.strict && sig.hasHighS()) return false;\n    var h = truncateHash(msgHash);\n    var P;\n    try {\n      P = normalizePublicKey(publicKey);\n    } catch (error) {\n      return false;\n    }\n    var n = CURVE.n;\n    var sinv = invert(s, n);\n    var u1 = mod(h * sinv, n);\n    var u2 = mod(r * sinv, n);\n    var R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R) return false;\n    var v = mod(R.x, n);\n    return v === r;\n  }\n  exports.verify = verify;\n  function finalizeSchnorrChallenge(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n  }\n  function hasEvenY(point) {\n    return (point.y & _1n) === _0n;\n  }\n  var SchnorrSignature = /*#__PURE__*/function () {\n    function SchnorrSignature(r, s) {\n      _classCallCheck(this, SchnorrSignature);\n      this.r = r;\n      this.s = s;\n      this.assertValidity();\n    }\n    return _createClass(SchnorrSignature, [{\n      key: \"assertValidity\",\n      value: function assertValidity() {\n        var r = this.r,\n          s = this.s;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s)) throw new Error('Invalid signature');\n      }\n    }, {\n      key: \"toHex\",\n      value: function toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n      }\n    }, {\n      key: \"toRawBytes\",\n      value: function toRawBytes() {\n        return hexToBytes(this.toHex());\n      }\n    }], [{\n      key: \"fromHex\",\n      value: function fromHex(hex) {\n        var bytes = ensureBytes(hex);\n        if (bytes.length !== 64) throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        var r = bytesToNumber(bytes.subarray(0, 32));\n        var s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n      }\n    }]);\n  }();\n  function schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n  }\n  function initSchnorrSigArgs(message, privateKey, auxRand) {\n    if (message == null) throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n    var m = ensureBytes(message);\n    var d0 = normalizePrivateKey(privateKey);\n    var rand = ensureBytes(auxRand);\n    if (rand.length !== 32) throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    var P = Point.fromPrivateKey(d0);\n    var px = P.toRawX();\n    var d = hasEvenY(P) ? d0 : CURVE.n - d0;\n    return {\n      m: m,\n      P: P,\n      px: px,\n      d: d,\n      rand: rand\n    };\n  }\n  function initSchnorrNonce(d, t0h) {\n    return numTo32b(d ^ bytesToNumber(t0h));\n  }\n  function finalizeSchnorrNonce(k0h) {\n    var k0 = mod(bytesToNumber(k0h), CURVE.n);\n    if (k0 === _0n) throw new Error('sign: Creation of signature failed. k is zero');\n    var R = Point.fromPrivateKey(k0);\n    var rx = R.toRawX();\n    var k = hasEvenY(R) ? k0 : CURVE.n - k0;\n    return {\n      R: R,\n      rx: rx,\n      k: k\n    };\n  }\n  function finalizeSchnorrSig(R, k, e, d) {\n    return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n  }\n  function schnorrSign(_x3, _x4) {\n    return _schnorrSign.apply(this, arguments);\n  }\n  function _schnorrSign() {\n    _schnorrSign = _asyncToGenerator(function* (message, privateKey) {\n      var auxRand = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : exports.utils.randomBytes();\n      var _initSchnorrSigArgs2 = initSchnorrSigArgs(message, privateKey, auxRand),\n        m = _initSchnorrSigArgs2.m,\n        px = _initSchnorrSigArgs2.px,\n        d = _initSchnorrSigArgs2.d,\n        rand = _initSchnorrSigArgs2.rand;\n      var t = initSchnorrNonce(d, yield exports.utils.taggedHash(TAGS.aux, rand));\n      var _finalizeSchnorrNonce2 = finalizeSchnorrNonce(yield exports.utils.taggedHash(TAGS.nonce, t, px, m)),\n        R = _finalizeSchnorrNonce2.R,\n        rx = _finalizeSchnorrNonce2.rx,\n        k = _finalizeSchnorrNonce2.k;\n      var e = finalizeSchnorrChallenge(yield exports.utils.taggedHash(TAGS.challenge, rx, px, m));\n      var sig = finalizeSchnorrSig(R, k, e, d);\n      var isValid = yield schnorrVerify(sig, m, px);\n      if (!isValid) throw new Error('sign: Invalid signature produced');\n      return sig;\n    });\n    return _schnorrSign.apply(this, arguments);\n  }\n  function schnorrSignSync(message, privateKey) {\n    var auxRand = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : exports.utils.randomBytes();\n    var _initSchnorrSigArgs = initSchnorrSigArgs(message, privateKey, auxRand),\n      m = _initSchnorrSigArgs.m,\n      px = _initSchnorrSigArgs.px,\n      d = _initSchnorrSigArgs.d,\n      rand = _initSchnorrSigArgs.rand;\n    var t = initSchnorrNonce(d, exports.utils.taggedHashSync(TAGS.aux, rand));\n    var _finalizeSchnorrNonce = finalizeSchnorrNonce(exports.utils.taggedHashSync(TAGS.nonce, t, px, m)),\n      R = _finalizeSchnorrNonce.R,\n      rx = _finalizeSchnorrNonce.rx,\n      k = _finalizeSchnorrNonce.k;\n    var e = finalizeSchnorrChallenge(exports.utils.taggedHashSync(TAGS.challenge, rx, px, m));\n    var sig = finalizeSchnorrSig(R, k, e, d);\n    var isValid = schnorrVerifySync(sig, m, px);\n    if (!isValid) throw new Error('sign: Invalid signature produced');\n    return sig;\n  }\n  function initSchnorrVerify(signature, message, publicKey) {\n    var raw = signature instanceof SchnorrSignature;\n    var sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw) sig.assertValidity();\n    return Object.assign({}, sig, {\n      m: ensureBytes(message),\n      P: normalizePublicKey(publicKey)\n    });\n  }\n  function finalizeSchnorrVerify(r, P, s, e) {\n    var R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !hasEvenY(R) || R.x !== r) return false;\n    return true;\n  }\n  function schnorrVerify(_x5, _x6, _x7) {\n    return _schnorrVerify.apply(this, arguments);\n  }\n  function _schnorrVerify() {\n    _schnorrVerify = _asyncToGenerator(function* (signature, message, publicKey) {\n      try {\n        var _initSchnorrVerify2 = initSchnorrVerify(signature, message, publicKey),\n          r = _initSchnorrVerify2.r,\n          s = _initSchnorrVerify2.s,\n          m = _initSchnorrVerify2.m,\n          P = _initSchnorrVerify2.P;\n        var e = finalizeSchnorrChallenge(yield exports.utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n      } catch (error) {\n        return false;\n      }\n    });\n    return _schnorrVerify.apply(this, arguments);\n  }\n  function schnorrVerifySync(signature, message, publicKey) {\n    try {\n      var _initSchnorrVerify = initSchnorrVerify(signature, message, publicKey),\n        r = _initSchnorrVerify.r,\n        s = _initSchnorrVerify.s,\n        m = _initSchnorrVerify.m,\n        P = _initSchnorrVerify.P;\n      var e = finalizeSchnorrChallenge(exports.utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n      return finalizeSchnorrVerify(r, P, s, e);\n    } catch (error) {\n      return false;\n    }\n  }\n  exports.schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync\n  };\n  Point.BASE._setWindowSize(8);\n  var crypto = {\n    node: _$$_REQUIRE(_dependencyMap[3], \"crypto\"),\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined\n  };\n  var TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce'\n  };\n  var TAGGED_HASH_PREFIXES = {};\n  exports.utils = {\n    isValidPrivateKey: function isValidPrivateKey(privateKey) {\n      try {\n        normalizePrivateKey(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    privateAdd: function privateAdd(privateKey, tweak) {\n      var p = normalizePrivateKey(privateKey);\n      var t = normalizePrivateKey(tweak);\n      return numTo32b(mod(p + t, CURVE.n));\n    },\n    privateNegate: function privateNegate(privateKey) {\n      var p = normalizePrivateKey(privateKey);\n      return numTo32b(CURVE.n - p);\n    },\n    pointAddScalar: function pointAddScalar(p, tweak, isCompressed) {\n      var P = Point.fromHex(p);\n      var t = normalizePrivateKey(tweak);\n      var Q = Point.BASE.multiplyAndAddUnsafe(P, t, _1n);\n      if (!Q) throw new Error('Tweaked point at infinity');\n      return Q.toRawBytes(isCompressed);\n    },\n    pointMultiply: function pointMultiply(p, tweak, isCompressed) {\n      var P = Point.fromHex(p);\n      var t = bytesToNumber(ensureBytes(tweak));\n      return P.multiply(t).toRawBytes(isCompressed);\n    },\n    hashToPrivateKey: function hashToPrivateKey(hash) {\n      hash = ensureBytes(hash);\n      if (hash.length < 40 || hash.length > 1024) throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n      var num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n      return numTo32b(num);\n    },\n    randomBytes: function randomBytes() {\n      var bytesLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;\n      if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n      } else if (crypto.node) {\n        var _randomBytes = crypto.node.randomBytes;\n        return Uint8Array.from(_randomBytes(bytesLength));\n      } else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n      }\n    },\n    randomPrivateKey: function randomPrivateKey() {\n      return exports.utils.hashToPrivateKey(exports.utils.randomBytes(40));\n    },\n    bytesToHex: bytesToHex,\n    hexToBytes: hexToBytes,\n    concatBytes: concatBytes,\n    mod: mod,\n    invert: invert,\n    sha256: function () {\n      var _sha = _asyncToGenerator(function* () {\n        for (var _len4 = arguments.length, messages = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          messages[_key4] = arguments[_key4];\n        }\n        if (crypto.web) {\n          var buffer = yield crypto.web.subtle.digest('SHA-256', concatBytes.apply(void 0, messages));\n          return new Uint8Array(buffer);\n        } else if (crypto.node) {\n          var createHash = crypto.node.createHash;\n          var hash = createHash('sha256');\n          messages.forEach(function (m) {\n            return hash.update(m);\n          });\n          return Uint8Array.from(hash.digest());\n        } else {\n          throw new Error(\"The environment doesn't have sha256 function\");\n        }\n      });\n      function sha256() {\n        return _sha.apply(this, arguments);\n      }\n      return sha256;\n    }(),\n    hmacSha256: function () {\n      var _hmacSha = _asyncToGenerator(function* (key) {\n        for (var _len5 = arguments.length, messages = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n          messages[_key5 - 1] = arguments[_key5];\n        }\n        if (crypto.web) {\n          var ckey = yield crypto.web.subtle.importKey('raw', key, {\n            name: 'HMAC',\n            hash: {\n              name: 'SHA-256'\n            }\n          }, false, ['sign']);\n          var message = concatBytes.apply(void 0, messages);\n          var buffer = yield crypto.web.subtle.sign('HMAC', ckey, message);\n          return new Uint8Array(buffer);\n        } else if (crypto.node) {\n          var createHmac = crypto.node.createHmac;\n          var hash = createHmac('sha256', key);\n          messages.forEach(function (m) {\n            return hash.update(m);\n          });\n          return Uint8Array.from(hash.digest());\n        } else {\n          throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n      });\n      function hmacSha256(_x8) {\n        return _hmacSha.apply(this, arguments);\n      }\n      return hmacSha256;\n    }(),\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: function () {\n      var _taggedHash = _asyncToGenerator(function* (tag) {\n        var _exports$utils3;\n        var tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n          var tagH = yield exports.utils.sha256(Uint8Array.from(tag, function (c) {\n            return c.charCodeAt(0);\n          }));\n          tagP = concatBytes(tagH, tagH);\n          TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        for (var _len6 = arguments.length, messages = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n          messages[_key6 - 1] = arguments[_key6];\n        }\n        return (_exports$utils3 = exports.utils).sha256.apply(_exports$utils3, [tagP].concat(messages));\n      });\n      function taggedHash(_x9) {\n        return _taggedHash.apply(this, arguments);\n      }\n      return taggedHash;\n    }(),\n    taggedHashSync: function taggedHashSync(tag) {\n      var _exports$utils4;\n      if (typeof exports.utils.sha256Sync !== 'function') throw new Error('utils.sha256Sync is undefined, you need to set it');\n      var tagP = TAGGED_HASH_PREFIXES[tag];\n      if (tagP === undefined) {\n        var tagH = exports.utils.sha256Sync(Uint8Array.from(tag, function (c) {\n          return c.charCodeAt(0);\n        }));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n      }\n      for (var _len7 = arguments.length, messages = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n        messages[_key7 - 1] = arguments[_key7];\n      }\n      return (_exports$utils4 = exports.utils).sha256Sync.apply(_exports$utils4, [tagP].concat(messages));\n    },\n    precompute: function precompute() {\n      var windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n      var point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;\n      var cached = point === Point.BASE ? point : new Point(point.x, point.y);\n      cached._setWindowSize(windowSize);\n      cached.multiply(_3n);\n      return cached;\n    }\n  };\n});","lineCount":1414,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,2,2,0],[5,6,2,0,"_asyncToGenerator"],[5,23,2,0],[5,26,2,0,"_$$_REQUIRE"],[5,37,2,0],[5,38,2,0,"_dependencyMap"],[5,52,2,0],[6,2,2,0],[6,6,2,0,"_classCallCheck"],[6,21,2,0],[6,24,2,0,"_$$_REQUIRE"],[6,35,2,0],[6,36,2,0,"_dependencyMap"],[6,50,2,0],[7,2,2,0],[7,6,2,0,"_createClass"],[7,18,2,0],[7,21,2,0,"_$$_REQUIRE"],[7,32,2,0],[7,33,2,0,"_dependencyMap"],[7,47,2,0],[8,2,3,0,"Object"],[8,8,3,6],[8,9,3,7,"defineProperty"],[8,23,3,21],[8,24,3,22,"exports"],[8,31,3,29],[8,33,3,31],[8,45,3,43],[8,47,3,45],[9,4,3,47,"value"],[9,9,3,52],[9,11,3,54],[10,2,3,59],[10,3,3,60],[10,4,3,61],[11,2,4,0,"exports"],[11,9,4,7],[11,10,4,8,"utils"],[11,15,4,13],[11,18,4,16,"exports"],[11,25,4,23],[11,26,4,24,"schnorr"],[11,33,4,31],[11,36,4,34,"exports"],[11,43,4,41],[11,44,4,42,"verify"],[11,50,4,48],[11,53,4,51,"exports"],[11,60,4,58],[11,61,4,59,"signSync"],[11,69,4,67],[11,72,4,70,"exports"],[11,79,4,77],[11,80,4,78,"sign"],[11,84,4,82],[11,87,4,85,"exports"],[11,94,4,92],[11,95,4,93,"getSharedSecret"],[11,110,4,108],[11,113,4,111,"exports"],[11,120,4,118],[11,121,4,119,"recoverPublicKey"],[11,137,4,135],[11,140,4,138,"exports"],[11,147,4,145],[11,148,4,146,"getPublicKey"],[11,160,4,158],[11,163,4,161,"exports"],[11,170,4,168],[11,171,4,169,"Signature"],[11,180,4,178],[11,183,4,181,"exports"],[11,190,4,188],[11,191,4,189,"Point"],[11,196,4,194],[11,199,4,197,"exports"],[11,206,4,204],[11,207,4,205,"CURVE"],[11,212,4,210],[11,215,4,213],[11,220,4,218],[11,221,4,219],[12,2,6,0],[12,6,6,6,"_0n"],[12,9,6,9],[12,12,6,12,"BigInt"],[12,18,6,18],[12,19,6,19],[12,20,6,20],[12,21,6,21],[13,2,7,0],[13,6,7,6,"_1n"],[13,9,7,9],[13,12,7,12,"BigInt"],[13,18,7,18],[13,19,7,19],[13,20,7,20],[13,21,7,21],[14,2,8,0],[14,6,8,6,"_2n"],[14,9,8,9],[14,12,8,12,"BigInt"],[14,18,8,18],[14,19,8,19],[14,20,8,20],[14,21,8,21],[15,2,9,0],[15,6,9,6,"_3n"],[15,9,9,9],[15,12,9,12,"BigInt"],[15,18,9,18],[15,19,9,19],[15,20,9,20],[15,21,9,21],[16,2,10,0],[16,6,10,6,"_8n"],[16,9,10,9],[16,12,10,12,"BigInt"],[16,18,10,18],[16,19,10,19],[16,20,10,20],[16,21,10,21],[17,2,11,0],[17,6,11,6,"POW_2_256"],[17,15,11,15],[17,18,11,18,"_2n"],[17,21,11,21],[17,25,11,25,"BigInt"],[17,31,11,31],[17,32,11,32],[17,35,11,35],[17,36,11,36],[18,2,12,0],[18,6,12,6,"CURVE"],[18,11,12,11],[18,14,12,14],[19,4,13,4,"a"],[19,5,13,5],[19,7,13,7,"_0n"],[19,10,13,10],[20,4,14,4,"b"],[20,5,14,5],[20,7,14,7,"BigInt"],[20,13,14,13],[20,14,14,14],[20,15,14,15],[20,16,14,16],[21,4,15,4,"P"],[21,5,15,5],[21,7,15,7,"POW_2_256"],[21,16,15,16],[21,19,15,19,"_2n"],[21,22,15,22],[21,26,15,26,"BigInt"],[21,32,15,32],[21,33,15,33],[21,35,15,35],[21,36,15,36],[21,39,15,39,"BigInt"],[21,45,15,45],[21,46,15,46],[21,49,15,49],[21,50,15,50],[22,4,16,4,"n"],[22,5,16,5],[22,7,16,7,"POW_2_256"],[22,16,16,16],[22,19,16,19,"BigInt"],[22,25,16,25],[22,26,16,26],[22,67,16,67],[22,68,16,68],[23,4,17,4,"h"],[23,5,17,5],[23,7,17,7,"_1n"],[23,10,17,10],[24,4,18,4,"Gx"],[24,6,18,6],[24,8,18,8,"BigInt"],[24,14,18,14],[24,15,18,15],[24,94,18,94],[24,95,18,95],[25,4,19,4,"Gy"],[25,6,19,6],[25,8,19,8,"BigInt"],[25,14,19,14],[25,15,19,15],[25,94,19,94],[25,95,19,95],[26,4,20,4,"beta"],[26,8,20,8],[26,10,20,10,"BigInt"],[26,16,20,16],[26,17,20,17],[26,85,20,85],[27,2,21,0],[27,3,21,1],[28,2,22,0,"exports"],[28,9,22,7],[28,10,22,8,"CURVE"],[28,15,22,13],[28,18,22,16,"CURVE"],[28,23,22,21],[29,2,23,0],[29,11,23,9,"weistrass"],[29,20,23,18,"weistrass"],[29,21,23,19,"x"],[29,22,23,20],[29,24,23,22],[30,4,24,4],[30,8,24,12,"a"],[30,9,24,13],[30,12,24,21,"CURVE"],[30,17,24,26],[30,18,24,12,"a"],[30,19,24,13],[31,6,24,15,"b"],[31,7,24,16],[31,10,24,21,"CURVE"],[31,15,24,26],[31,16,24,15,"b"],[31,17,24,16],[32,4,25,4],[32,8,25,10,"x2"],[32,10,25,12],[32,13,25,15,"mod"],[32,16,25,18],[32,17,25,19,"x"],[32,18,25,20],[32,21,25,23,"x"],[32,22,25,24],[32,23,25,25],[33,4,26,4],[33,8,26,10,"x3"],[33,10,26,12],[33,13,26,15,"mod"],[33,16,26,18],[33,17,26,19,"x2"],[33,19,26,21],[33,22,26,24,"x"],[33,23,26,25],[33,24,26,26],[34,4,27,4],[34,11,27,11,"mod"],[34,14,27,14],[34,15,27,15,"x3"],[34,17,27,17],[34,20,27,20,"a"],[34,21,27,21],[34,24,27,24,"x"],[34,25,27,25],[34,28,27,28,"b"],[34,29,27,29],[34,30,27,30],[35,2,28,0],[36,2,29,0],[36,6,29,6,"USE_ENDOMORPHISM"],[36,22,29,22],[36,25,29,25,"CURVE"],[36,30,29,30],[36,31,29,31,"a"],[36,32,29,32],[36,37,29,37,"_0n"],[36,40,29,40],[37,2,29,41],[37,6,30,6,"JacobianPoint"],[37,19,30,19],[38,4,31,4],[38,13,31,4,"JacobianPoint"],[38,27,31,16,"x"],[38,28,31,17],[38,30,31,19,"y"],[38,31,31,20],[38,33,31,22,"z"],[38,34,31,23],[38,36,31,25],[39,6,31,25,"_classCallCheck"],[39,21,31,25],[39,28,31,25,"JacobianPoint"],[39,41,31,25],[40,6,32,8],[40,10,32,12],[40,11,32,13,"x"],[40,12,32,14],[40,15,32,17,"x"],[40,16,32,18],[41,6,33,8],[41,10,33,12],[41,11,33,13,"y"],[41,12,33,14],[41,15,33,17,"y"],[41,16,33,18],[42,6,34,8],[42,10,34,12],[42,11,34,13,"z"],[42,12,34,14],[42,15,34,17,"z"],[42,16,34,18],[43,4,35,4],[44,4,35,5],[44,11,35,5,"_createClass"],[44,23,35,5],[44,24,35,5,"JacobianPoint"],[44,37,35,5],[45,6,35,5,"key"],[45,9,35,5],[46,6,35,5,"value"],[46,11,35,5],[46,13,49,4],[46,22,49,4,"equals"],[46,28,49,10,"equals"],[46,29,49,11,"other"],[46,34,49,16],[46,36,49,18],[47,8,50,8],[47,12,50,12],[47,14,50,14,"other"],[47,19,50,19],[47,31,50,31,"JacobianPoint"],[47,44,50,44],[47,45,50,45],[47,47,51,12],[47,53,51,18],[47,57,51,22,"TypeError"],[47,66,51,31],[47,67,51,32],[47,91,51,56],[47,92,51,57],[48,8,52,8],[48,12,52,19,"X1"],[48,14,52,21],[48,17,52,40],[48,21,52,44],[48,22,52,16,"x"],[48,23,52,17],[49,10,52,26,"Y1"],[49,12,52,28],[49,15,52,40],[49,19,52,44],[49,20,52,23,"y"],[49,21,52,24],[50,10,52,33,"Z1"],[50,12,52,35],[50,15,52,40],[50,19,52,44],[50,20,52,30,"z"],[50,21,52,31],[51,8,53,8],[51,12,53,19,"X2"],[51,14,53,21],[51,17,53,40,"other"],[51,22,53,45],[51,23,53,16,"x"],[51,24,53,17],[52,10,53,26,"Y2"],[52,12,53,28],[52,15,53,40,"other"],[52,20,53,45],[52,21,53,23,"y"],[52,22,53,24],[53,10,53,33,"Z2"],[53,12,53,35],[53,15,53,40,"other"],[53,20,53,45],[53,21,53,30,"z"],[53,22,53,31],[54,8,54,8],[54,12,54,14,"Z1Z1"],[54,16,54,18],[54,19,54,21,"mod"],[54,22,54,24],[54,23,54,25,"Z1"],[54,25,54,27],[54,29,54,31,"_2n"],[54,32,54,34],[54,33,54,35],[55,8,55,8],[55,12,55,14,"Z2Z2"],[55,16,55,18],[55,19,55,21,"mod"],[55,22,55,24],[55,23,55,25,"Z2"],[55,25,55,27],[55,29,55,31,"_2n"],[55,32,55,34],[55,33,55,35],[56,8,56,8],[56,12,56,14,"U1"],[56,14,56,16],[56,17,56,19,"mod"],[56,20,56,22],[56,21,56,23,"X1"],[56,23,56,25],[56,26,56,28,"Z2Z2"],[56,30,56,32],[56,31,56,33],[57,8,57,8],[57,12,57,14,"U2"],[57,14,57,16],[57,17,57,19,"mod"],[57,20,57,22],[57,21,57,23,"X2"],[57,23,57,25],[57,26,57,28,"Z1Z1"],[57,30,57,32],[57,31,57,33],[58,8,58,8],[58,12,58,14,"S1"],[58,14,58,16],[58,17,58,19,"mod"],[58,20,58,22],[58,21,58,23,"mod"],[58,24,58,26],[58,25,58,27,"Y1"],[58,27,58,29],[58,30,58,32,"Z2"],[58,32,58,34],[58,33,58,35],[58,36,58,38,"Z2Z2"],[58,40,58,42],[58,41,58,43],[59,8,59,8],[59,12,59,14,"S2"],[59,14,59,16],[59,17,59,19,"mod"],[59,20,59,22],[59,21,59,23,"mod"],[59,24,59,26],[59,25,59,27,"Y2"],[59,27,59,29],[59,30,59,32,"Z1"],[59,32,59,34],[59,33,59,35],[59,36,59,38,"Z1Z1"],[59,40,59,42],[59,41,59,43],[60,8,60,8],[60,15,60,15,"U1"],[60,17,60,17],[60,22,60,22,"U2"],[60,24,60,24],[60,28,60,28,"S1"],[60,30,60,30],[60,35,60,35,"S2"],[60,37,60,37],[61,6,61,4],[62,4,61,5],[63,6,61,5,"key"],[63,9,61,5],[64,6,61,5,"value"],[64,11,61,5],[64,13,62,4],[64,22,62,4,"negate"],[64,28,62,10,"negate"],[64,29,62,10],[64,31,62,13],[65,8,63,8],[65,15,63,15],[65,19,63,19,"JacobianPoint"],[65,32,63,32],[65,33,63,33],[65,37,63,37],[65,38,63,38,"x"],[65,39,63,39],[65,41,63,41,"mod"],[65,44,63,44],[65,45,63,45],[65,46,63,46],[65,50,63,50],[65,51,63,51,"y"],[65,52,63,52],[65,53,63,53],[65,55,63,55],[65,59,63,59],[65,60,63,60,"z"],[65,61,63,61],[65,62,63,62],[66,6,64,4],[67,4,64,5],[68,6,64,5,"key"],[68,9,64,5],[69,6,64,5,"value"],[69,11,64,5],[69,13,65,4],[69,22,65,4,"double"],[69,28,65,10,"double"],[69,29,65,10],[69,31,65,13],[70,8,66,8],[70,12,66,19,"X1"],[70,14,66,21],[70,17,66,40],[70,21,66,44],[70,22,66,16,"x"],[70,23,66,17],[71,10,66,26,"Y1"],[71,12,66,28],[71,15,66,40],[71,19,66,44],[71,20,66,23,"y"],[71,21,66,24],[72,10,66,33,"Z1"],[72,12,66,35],[72,15,66,40],[72,19,66,44],[72,20,66,30,"z"],[72,21,66,31],[73,8,67,8],[73,12,67,14,"A"],[73,13,67,15],[73,16,67,18,"mod"],[73,19,67,21],[73,20,67,22,"X1"],[73,22,67,24],[73,26,67,28,"_2n"],[73,29,67,31],[73,30,67,32],[74,8,68,8],[74,12,68,14,"B"],[74,13,68,15],[74,16,68,18,"mod"],[74,19,68,21],[74,20,68,22,"Y1"],[74,22,68,24],[74,26,68,28,"_2n"],[74,29,68,31],[74,30,68,32],[75,8,69,8],[75,12,69,14,"C"],[75,13,69,15],[75,16,69,18,"mod"],[75,19,69,21],[75,20,69,22,"B"],[75,21,69,23],[75,25,69,27,"_2n"],[75,28,69,30],[75,29,69,31],[76,8,70,8],[76,12,70,14,"D"],[76,13,70,15],[76,16,70,18,"mod"],[76,19,70,21],[76,20,70,22,"_2n"],[76,23,70,25],[76,27,70,29,"mod"],[76,30,70,32],[76,31,70,33],[76,32,70,34,"X1"],[76,34,70,36],[76,37,70,39,"B"],[76,38,70,40],[76,43,70,45,"_2n"],[76,46,70,48],[76,47,70,49],[76,50,70,52,"A"],[76,51,70,53],[76,54,70,56,"C"],[76,55,70,57],[76,56,70,58],[76,57,70,59],[77,8,71,8],[77,12,71,14,"E"],[77,13,71,15],[77,16,71,18,"mod"],[77,19,71,21],[77,20,71,22,"_3n"],[77,23,71,25],[77,26,71,28,"A"],[77,27,71,29],[77,28,71,30],[78,8,72,8],[78,12,72,14,"F"],[78,13,72,15],[78,16,72,18,"mod"],[78,19,72,21],[78,20,72,22,"E"],[78,21,72,23],[78,25,72,27,"_2n"],[78,28,72,30],[78,29,72,31],[79,8,73,8],[79,12,73,14,"X3"],[79,14,73,16],[79,17,73,19,"mod"],[79,20,73,22],[79,21,73,23,"F"],[79,22,73,24],[79,25,73,27,"_2n"],[79,28,73,30],[79,31,73,33,"D"],[79,32,73,34],[79,33,73,35],[80,8,74,8],[80,12,74,14,"Y3"],[80,14,74,16],[80,17,74,19,"mod"],[80,20,74,22],[80,21,74,23,"E"],[80,22,74,24],[80,26,74,28,"D"],[80,27,74,29],[80,30,74,32,"X3"],[80,32,74,34],[80,33,74,35],[80,36,74,38,"_8n"],[80,39,74,41],[80,42,74,44,"C"],[80,43,74,45],[80,44,74,46],[81,8,75,8],[81,12,75,14,"Z3"],[81,14,75,16],[81,17,75,19,"mod"],[81,20,75,22],[81,21,75,23,"_2n"],[81,24,75,26],[81,27,75,29,"Y1"],[81,29,75,31],[81,32,75,34,"Z1"],[81,34,75,36],[81,35,75,37],[82,8,76,8],[82,15,76,15],[82,19,76,19,"JacobianPoint"],[82,32,76,32],[82,33,76,33,"X3"],[82,35,76,35],[82,37,76,37,"Y3"],[82,39,76,39],[82,41,76,41,"Z3"],[82,43,76,43],[82,44,76,44],[83,6,77,4],[84,4,77,5],[85,6,77,5,"key"],[85,9,77,5],[86,6,77,5,"value"],[86,11,77,5],[86,13,78,4],[86,22,78,4,"add"],[86,25,78,7,"add"],[86,26,78,8,"other"],[86,31,78,13],[86,33,78,15],[87,8,79,8],[87,12,79,12],[87,14,79,14,"other"],[87,19,79,19],[87,31,79,31,"JacobianPoint"],[87,44,79,44],[87,45,79,45],[87,47,80,12],[87,53,80,18],[87,57,80,22,"TypeError"],[87,66,80,31],[87,67,80,32],[87,91,80,56],[87,92,80,57],[88,8,81,8],[88,12,81,19,"X1"],[88,14,81,21],[88,17,81,40],[88,21,81,44],[88,22,81,16,"x"],[88,23,81,17],[89,10,81,26,"Y1"],[89,12,81,28],[89,15,81,40],[89,19,81,44],[89,20,81,23,"y"],[89,21,81,24],[90,10,81,33,"Z1"],[90,12,81,35],[90,15,81,40],[90,19,81,44],[90,20,81,30,"z"],[90,21,81,31],[91,8,82,8],[91,12,82,19,"X2"],[91,14,82,21],[91,17,82,40,"other"],[91,22,82,45],[91,23,82,16,"x"],[91,24,82,17],[92,10,82,26,"Y2"],[92,12,82,28],[92,15,82,40,"other"],[92,20,82,45],[92,21,82,23,"y"],[92,22,82,24],[93,10,82,33,"Z2"],[93,12,82,35],[93,15,82,40,"other"],[93,20,82,45],[93,21,82,30,"z"],[93,22,82,31],[94,8,83,8],[94,12,83,12,"X2"],[94,14,83,14],[94,19,83,19,"_0n"],[94,22,83,22],[94,26,83,26,"Y2"],[94,28,83,28],[94,33,83,33,"_0n"],[94,36,83,36],[94,38,84,12],[94,45,84,19],[94,49,84,23],[95,8,85,8],[95,12,85,12,"X1"],[95,14,85,14],[95,19,85,19,"_0n"],[95,22,85,22],[95,26,85,26,"Y1"],[95,28,85,28],[95,33,85,33,"_0n"],[95,36,85,36],[95,38,86,12],[95,45,86,19,"other"],[95,50,86,24],[96,8,87,8],[96,12,87,14,"Z1Z1"],[96,16,87,18],[96,19,87,21,"mod"],[96,22,87,24],[96,23,87,25,"Z1"],[96,25,87,27],[96,29,87,31,"_2n"],[96,32,87,34],[96,33,87,35],[97,8,88,8],[97,12,88,14,"Z2Z2"],[97,16,88,18],[97,19,88,21,"mod"],[97,22,88,24],[97,23,88,25,"Z2"],[97,25,88,27],[97,29,88,31,"_2n"],[97,32,88,34],[97,33,88,35],[98,8,89,8],[98,12,89,14,"U1"],[98,14,89,16],[98,17,89,19,"mod"],[98,20,89,22],[98,21,89,23,"X1"],[98,23,89,25],[98,26,89,28,"Z2Z2"],[98,30,89,32],[98,31,89,33],[99,8,90,8],[99,12,90,14,"U2"],[99,14,90,16],[99,17,90,19,"mod"],[99,20,90,22],[99,21,90,23,"X2"],[99,23,90,25],[99,26,90,28,"Z1Z1"],[99,30,90,32],[99,31,90,33],[100,8,91,8],[100,12,91,14,"S1"],[100,14,91,16],[100,17,91,19,"mod"],[100,20,91,22],[100,21,91,23,"mod"],[100,24,91,26],[100,25,91,27,"Y1"],[100,27,91,29],[100,30,91,32,"Z2"],[100,32,91,34],[100,33,91,35],[100,36,91,38,"Z2Z2"],[100,40,91,42],[100,41,91,43],[101,8,92,8],[101,12,92,14,"S2"],[101,14,92,16],[101,17,92,19,"mod"],[101,20,92,22],[101,21,92,23,"mod"],[101,24,92,26],[101,25,92,27,"Y2"],[101,27,92,29],[101,30,92,32,"Z1"],[101,32,92,34],[101,33,92,35],[101,36,92,38,"Z1Z1"],[101,40,92,42],[101,41,92,43],[102,8,93,8],[102,12,93,14,"H"],[102,13,93,15],[102,16,93,18,"mod"],[102,19,93,21],[102,20,93,22,"U2"],[102,22,93,24],[102,25,93,27,"U1"],[102,27,93,29],[102,28,93,30],[103,8,94,8],[103,12,94,14,"r"],[103,13,94,15],[103,16,94,18,"mod"],[103,19,94,21],[103,20,94,22,"S2"],[103,22,94,24],[103,25,94,27,"S1"],[103,27,94,29],[103,28,94,30],[104,8,95,8],[104,12,95,12,"H"],[104,13,95,13],[104,18,95,18,"_0n"],[104,21,95,21],[104,23,95,23],[105,10,96,12],[105,14,96,16,"r"],[105,15,96,17],[105,20,96,22,"_0n"],[105,23,96,25],[105,25,96,27],[106,12,97,16],[106,19,97,23],[106,23,97,27],[106,24,97,28,"double"],[106,30,97,34],[106,31,97,35],[106,32,97,36],[107,10,98,12],[107,11,98,13],[107,17,99,17],[108,12,100,16],[108,19,100,23,"JacobianPoint"],[108,32,100,36],[108,33,100,37,"ZERO"],[108,37,100,41],[109,10,101,12],[110,8,102,8],[111,8,103,8],[111,12,103,14,"HH"],[111,14,103,16],[111,17,103,19,"mod"],[111,20,103,22],[111,21,103,23,"H"],[111,22,103,24],[111,26,103,28,"_2n"],[111,29,103,31],[111,30,103,32],[112,8,104,8],[112,12,104,14,"HHH"],[112,15,104,17],[112,18,104,20,"mod"],[112,21,104,23],[112,22,104,24,"H"],[112,23,104,25],[112,26,104,28,"HH"],[112,28,104,30],[112,29,104,31],[113,8,105,8],[113,12,105,14,"V"],[113,13,105,15],[113,16,105,18,"mod"],[113,19,105,21],[113,20,105,22,"U1"],[113,22,105,24],[113,25,105,27,"HH"],[113,27,105,29],[113,28,105,30],[114,8,106,8],[114,12,106,14,"X3"],[114,14,106,16],[114,17,106,19,"mod"],[114,20,106,22],[114,21,106,23,"r"],[114,22,106,24],[114,26,106,28,"_2n"],[114,29,106,31],[114,32,106,34,"HHH"],[114,35,106,37],[114,38,106,40,"_2n"],[114,41,106,43],[114,44,106,46,"V"],[114,45,106,47],[114,46,106,48],[115,8,107,8],[115,12,107,14,"Y3"],[115,14,107,16],[115,17,107,19,"mod"],[115,20,107,22],[115,21,107,23,"r"],[115,22,107,24],[115,26,107,28,"V"],[115,27,107,29],[115,30,107,32,"X3"],[115,32,107,34],[115,33,107,35],[115,36,107,38,"S1"],[115,38,107,40],[115,41,107,43,"HHH"],[115,44,107,46],[115,45,107,47],[116,8,108,8],[116,12,108,14,"Z3"],[116,14,108,16],[116,17,108,19,"mod"],[116,20,108,22],[116,21,108,23,"Z1"],[116,23,108,25],[116,26,108,28,"Z2"],[116,28,108,30],[116,31,108,33,"H"],[116,32,108,34],[116,33,108,35],[117,8,109,8],[117,15,109,15],[117,19,109,19,"JacobianPoint"],[117,32,109,32],[117,33,109,33,"X3"],[117,35,109,35],[117,37,109,37,"Y3"],[117,39,109,39],[117,41,109,41,"Z3"],[117,43,109,43],[117,44,109,44],[118,6,110,4],[119,4,110,5],[120,6,110,5,"key"],[120,9,110,5],[121,6,110,5,"value"],[121,11,110,5],[121,13,111,4],[121,22,111,4,"subtract"],[121,30,111,12,"subtract"],[121,31,111,13,"other"],[121,36,111,18],[121,38,111,20],[122,8,112,8],[122,15,112,15],[122,19,112,19],[122,20,112,20,"add"],[122,23,112,23],[122,24,112,24,"other"],[122,29,112,29],[122,30,112,30,"negate"],[122,36,112,36],[122,37,112,37],[122,38,112,38],[122,39,112,39],[123,6,113,4],[124,4,113,5],[125,6,113,5,"key"],[125,9,113,5],[126,6,113,5,"value"],[126,11,113,5],[126,13,114,4],[126,22,114,4,"multiplyUnsafe"],[126,36,114,18,"multiplyUnsafe"],[126,37,114,19,"scalar"],[126,43,114,25],[126,45,114,27],[127,8,115,8],[127,12,115,14,"P0"],[127,14,115,16],[127,17,115,19,"JacobianPoint"],[127,30,115,32],[127,31,115,33,"ZERO"],[127,35,115,37],[128,8,116,8],[128,12,116,12],[128,19,116,19,"scalar"],[128,25,116,25],[128,30,116,30],[128,38,116,38],[128,42,116,42,"scalar"],[128,48,116,48],[128,53,116,53,"_0n"],[128,56,116,56],[128,58,117,12],[128,65,117,19,"P0"],[128,67,117,21],[129,8,118,8],[129,12,118,12,"n"],[129,13,118,13],[129,16,118,16,"normalizeScalar"],[129,31,118,31],[129,32,118,32,"scalar"],[129,38,118,38],[129,39,118,39],[130,8,119,8],[130,12,119,12,"n"],[130,13,119,13],[130,18,119,18,"_1n"],[130,21,119,21],[130,23,120,12],[130,30,120,19],[130,34,120,23],[131,8,121,8],[131,12,121,12],[131,13,121,13,"USE_ENDOMORPHISM"],[131,29,121,29],[131,31,121,31],[132,10,122,12],[132,14,122,16,"p"],[132,15,122,17],[132,18,122,20,"P0"],[132,20,122,22],[133,10,123,12],[133,14,123,16,"d"],[133,16,123,17],[133,19,123,20],[133,23,123,24],[134,10,124,12],[134,17,124,19,"n"],[134,18,124,20],[134,21,124,23,"_0n"],[134,24,124,26],[134,26,124,28],[135,12,125,16],[135,16,125,20,"n"],[135,17,125,21],[135,20,125,24,"_1n"],[135,23,125,27],[135,25,126,20,"p"],[135,26,126,21],[135,29,126,24,"p"],[135,30,126,25],[135,31,126,26,"add"],[135,34,126,29],[135,35,126,30,"d"],[135,37,126,31],[135,38,126,32],[136,12,127,16,"d"],[136,14,127,17],[136,17,127,20,"d"],[136,19,127,21],[136,20,127,22,"double"],[136,26,127,28],[136,27,127,29],[136,28,127,30],[137,12,128,16,"n"],[137,13,128,17],[137,18,128,22,"_1n"],[137,21,128,25],[138,10,129,12],[139,10,130,12],[139,17,130,19,"p"],[139,18,130,20],[140,8,131,8],[141,8,132,8],[141,12,132,8,"_splitScalarEndo"],[141,28,132,8],[141,31,132,39,"splitScalarEndo"],[141,46,132,54],[141,47,132,55,"n"],[141,48,132,56],[141,49,132,57],[142,10,132,14,"k1neg"],[142,15,132,19],[142,18,132,19,"_splitScalarEndo"],[142,34,132,19],[142,35,132,14,"k1neg"],[142,40,132,19],[143,10,132,21,"k1"],[143,12,132,23],[143,15,132,23,"_splitScalarEndo"],[143,31,132,23],[143,32,132,21,"k1"],[143,34,132,23],[144,10,132,25,"k2neg"],[144,15,132,30],[144,18,132,30,"_splitScalarEndo"],[144,34,132,30],[144,35,132,25,"k2neg"],[144,40,132,30],[145,10,132,32,"k2"],[145,12,132,34],[145,15,132,34,"_splitScalarEndo"],[145,31,132,34],[145,32,132,32,"k2"],[145,34,132,34],[146,8,133,8],[146,12,133,12,"k1p"],[146,15,133,15],[146,18,133,18,"P0"],[146,20,133,20],[147,8,134,8],[147,12,134,12,"k2p"],[147,15,134,15],[147,18,134,18,"P0"],[147,20,134,20],[148,8,135,8],[148,12,135,12,"d"],[148,13,135,13],[148,16,135,16],[148,20,135,20],[149,8,136,8],[149,15,136,15,"k1"],[149,17,136,17],[149,20,136,20,"_0n"],[149,23,136,23],[149,27,136,27,"k2"],[149,29,136,29],[149,32,136,32,"_0n"],[149,35,136,35],[149,37,136,37],[150,10,137,12],[150,14,137,16,"k1"],[150,16,137,18],[150,19,137,21,"_1n"],[150,22,137,24],[150,24,138,16,"k1p"],[150,27,138,19],[150,30,138,22,"k1p"],[150,33,138,25],[150,34,138,26,"add"],[150,37,138,29],[150,38,138,30,"d"],[150,39,138,31],[150,40,138,32],[151,10,139,12],[151,14,139,16,"k2"],[151,16,139,18],[151,19,139,21,"_1n"],[151,22,139,24],[151,24,140,16,"k2p"],[151,27,140,19],[151,30,140,22,"k2p"],[151,33,140,25],[151,34,140,26,"add"],[151,37,140,29],[151,38,140,30,"d"],[151,39,140,31],[151,40,140,32],[152,10,141,12,"d"],[152,11,141,13],[152,14,141,16,"d"],[152,15,141,17],[152,16,141,18,"double"],[152,22,141,24],[152,23,141,25],[152,24,141,26],[153,10,142,12,"k1"],[153,12,142,14],[153,17,142,19,"_1n"],[153,20,142,22],[154,10,143,12,"k2"],[154,12,143,14],[154,17,143,19,"_1n"],[154,20,143,22],[155,8,144,8],[156,8,145,8],[156,12,145,12,"k1neg"],[156,17,145,17],[156,19,146,12,"k1p"],[156,22,146,15],[156,25,146,18,"k1p"],[156,28,146,21],[156,29,146,22,"negate"],[156,35,146,28],[156,36,146,29],[156,37,146,30],[157,8,147,8],[157,12,147,12,"k2neg"],[157,17,147,17],[157,19,148,12,"k2p"],[157,22,148,15],[157,25,148,18,"k2p"],[157,28,148,21],[157,29,148,22,"negate"],[157,35,148,28],[157,36,148,29],[157,37,148,30],[158,8,149,8,"k2p"],[158,11,149,11],[158,14,149,14],[158,18,149,18,"JacobianPoint"],[158,31,149,31],[158,32,149,32,"mod"],[158,35,149,35],[158,36,149,36,"k2p"],[158,39,149,39],[158,40,149,40,"x"],[158,41,149,41],[158,44,149,44,"CURVE"],[158,49,149,49],[158,50,149,50,"beta"],[158,54,149,54],[158,55,149,55],[158,57,149,57,"k2p"],[158,60,149,60],[158,61,149,61,"y"],[158,62,149,62],[158,64,149,64,"k2p"],[158,67,149,67],[158,68,149,68,"z"],[158,69,149,69],[158,70,149,70],[159,8,150,8],[159,15,150,15,"k1p"],[159,18,150,18],[159,19,150,19,"add"],[159,22,150,22],[159,23,150,23,"k2p"],[159,26,150,26],[159,27,150,27],[160,6,151,4],[161,4,151,5],[162,6,151,5,"key"],[162,9,151,5],[163,6,151,5,"value"],[163,11,151,5],[163,13,152,4],[163,22,152,4,"precomputeWindow"],[163,38,152,20,"precomputeWindow"],[163,39,152,21,"W"],[163,40,152,22],[163,42,152,24],[164,8,153,8],[164,12,153,14,"windows"],[164,19,153,21],[164,22,153,24,"USE_ENDOMORPHISM"],[164,38,153,40],[164,41,153,43],[164,44,153,46],[164,47,153,49,"W"],[164,48,153,50],[164,51,153,53],[164,52,153,54],[164,55,153,57],[164,58,153,60],[164,61,153,63,"W"],[164,62,153,64],[164,65,153,67],[164,66,153,68],[165,8,154,8],[165,12,154,14,"points"],[165,18,154,20],[165,21,154,23],[165,23,154,25],[166,8,155,8],[166,12,155,12,"p"],[166,13,155,13],[166,16,155,16],[166,20,155,20],[167,8,156,8],[167,12,156,12,"base"],[167,16,156,16],[167,19,156,19,"p"],[167,20,156,20],[168,8,157,8],[168,13,157,13],[168,17,157,17,"window"],[168,23,157,23],[168,26,157,26],[168,27,157,27],[168,29,157,29,"window"],[168,35,157,35],[168,38,157,38,"windows"],[168,45,157,45],[168,47,157,47,"window"],[168,53,157,53],[168,55,157,55],[168,57,157,57],[169,10,158,12,"base"],[169,14,158,16],[169,17,158,19,"p"],[169,18,158,20],[170,10,159,12,"points"],[170,16,159,18],[170,17,159,19,"push"],[170,21,159,23],[170,22,159,24,"base"],[170,26,159,28],[170,27,159,29],[171,10,160,12],[171,15,160,17],[171,19,160,21,"i"],[171,20,160,22],[171,23,160,25],[171,24,160,26],[171,26,160,28,"i"],[171,27,160,29],[171,30,160,32],[171,31,160,33],[171,36,160,38,"W"],[171,37,160,39],[171,40,160,42],[171,41,160,43],[171,42,160,44],[171,44,160,46,"i"],[171,45,160,47],[171,47,160,49],[171,49,160,51],[172,12,161,16,"base"],[172,16,161,20],[172,19,161,23,"base"],[172,23,161,27],[172,24,161,28,"add"],[172,27,161,31],[172,28,161,32,"p"],[172,29,161,33],[172,30,161,34],[173,12,162,16,"points"],[173,18,162,22],[173,19,162,23,"push"],[173,23,162,27],[173,24,162,28,"base"],[173,28,162,32],[173,29,162,33],[174,10,163,12],[175,10,164,12,"p"],[175,11,164,13],[175,14,164,16,"base"],[175,18,164,20],[175,19,164,21,"double"],[175,25,164,27],[175,26,164,28],[175,27,164,29],[176,8,165,8],[177,8,166,8],[177,15,166,15,"points"],[177,21,166,21],[178,6,167,4],[179,4,167,5],[180,6,167,5,"key"],[180,9,167,5],[181,6,167,5,"value"],[181,11,167,5],[181,13,168,4],[181,22,168,4,"wNAF"],[181,26,168,8,"wNAF"],[181,27,168,9,"n"],[181,28,168,10],[181,30,168,12,"affinePoint"],[181,41,168,23],[181,43,168,25],[182,8,169,8],[182,12,169,12],[182,13,169,13,"affinePoint"],[182,24,169,24],[182,28,169,28],[182,32,169,32],[182,33,169,33,"equals"],[182,39,169,39],[182,40,169,40,"JacobianPoint"],[182,53,169,53],[182,54,169,54,"BASE"],[182,58,169,58],[182,59,169,59],[182,61,170,12,"affinePoint"],[182,72,170,23],[182,75,170,26,"Point"],[182,80,170,31],[182,81,170,32,"BASE"],[182,85,170,36],[183,8,171,8],[183,12,171,14,"W"],[183,13,171,15],[183,16,171,19,"affinePoint"],[183,27,171,30],[183,31,171,34,"affinePoint"],[183,42,171,45],[183,43,171,46,"_WINDOW_SIZE"],[183,55,171,58],[183,59,171,63],[183,60,171,64],[184,8,172,8],[184,12,172,12],[184,15,172,15],[184,18,172,18,"W"],[184,19,172,19],[184,21,172,21],[185,10,173,12],[185,16,173,18],[185,20,173,22,"Error"],[185,25,173,27],[185,26,173,28],[185,89,173,91],[185,90,173,92],[186,8,174,8],[187,8,175,8],[187,12,175,12,"precomputes"],[187,23,175,23],[187,26,175,26,"affinePoint"],[187,37,175,37],[187,41,175,41,"pointPrecomputes"],[187,57,175,57],[187,58,175,58,"get"],[187,61,175,61],[187,62,175,62,"affinePoint"],[187,73,175,73],[187,74,175,74],[188,8,176,8],[188,12,176,12],[188,13,176,13,"precomputes"],[188,24,176,24],[188,26,176,26],[189,10,177,12,"precomputes"],[189,21,177,23],[189,24,177,26],[189,28,177,30],[189,29,177,31,"precomputeWindow"],[189,45,177,47],[189,46,177,48,"W"],[189,47,177,49],[189,48,177,50],[190,10,178,12],[190,14,178,16,"affinePoint"],[190,25,178,27],[190,29,178,31,"W"],[190,30,178,32],[190,35,178,37],[190,36,178,38],[190,38,178,40],[191,12,179,16,"precomputes"],[191,23,179,27],[191,26,179,30,"JacobianPoint"],[191,39,179,43],[191,40,179,44,"normalizeZ"],[191,50,179,54],[191,51,179,55,"precomputes"],[191,62,179,66],[191,63,179,67],[192,12,180,16,"pointPrecomputes"],[192,28,180,32],[192,29,180,33,"set"],[192,32,180,36],[192,33,180,37,"affinePoint"],[192,44,180,48],[192,46,180,50,"precomputes"],[192,57,180,61],[192,58,180,62],[193,10,181,12],[194,8,182,8],[195,8,183,8],[195,12,183,12,"p"],[195,13,183,13],[195,16,183,16,"JacobianPoint"],[195,29,183,29],[195,30,183,30,"ZERO"],[195,34,183,34],[196,8,184,8],[196,12,184,12,"f"],[196,13,184,13],[196,16,184,16,"JacobianPoint"],[196,29,184,29],[196,30,184,30,"ZERO"],[196,34,184,34],[197,8,185,8],[197,12,185,14,"windows"],[197,19,185,21],[197,22,185,24],[197,23,185,25],[197,27,185,29,"USE_ENDOMORPHISM"],[197,43,185,45],[197,46,185,48],[197,49,185,51],[197,52,185,54,"W"],[197,53,185,55],[197,56,185,58],[197,59,185,61],[197,62,185,64,"W"],[197,63,185,65],[197,64,185,66],[198,8,186,8],[198,12,186,14,"windowSize"],[198,22,186,24],[198,25,186,27],[198,26,186,28],[198,31,186,33,"W"],[198,32,186,34],[198,35,186,37],[198,36,186,38],[198,37,186,39],[199,8,187,8],[199,12,187,14,"mask"],[199,16,187,18],[199,19,187,21,"BigInt"],[199,25,187,27],[199,26,187,28],[199,27,187,29],[199,31,187,33,"W"],[199,32,187,34],[199,35,187,37],[199,36,187,38],[199,37,187,39],[200,8,188,8],[200,12,188,14,"maxNumber"],[200,21,188,23],[200,24,188,26],[200,25,188,27],[200,29,188,31,"W"],[200,30,188,32],[201,8,189,8],[201,12,189,14,"shiftBy"],[201,19,189,21],[201,22,189,24,"BigInt"],[201,28,189,30],[201,29,189,31,"W"],[201,30,189,32],[201,31,189,33],[202,8,190,8],[202,13,190,13],[202,17,190,17,"window"],[202,23,190,23],[202,26,190,26],[202,27,190,27],[202,29,190,29,"window"],[202,35,190,35],[202,38,190,38,"windows"],[202,45,190,45],[202,47,190,47,"window"],[202,53,190,53],[202,55,190,55],[202,57,190,57],[203,10,191,12],[203,14,191,18,"offset"],[203,20,191,24],[203,23,191,27,"window"],[203,29,191,33],[203,32,191,36,"windowSize"],[203,42,191,46],[204,10,192,12],[204,14,192,16,"wbits"],[204,19,192,21],[204,22,192,24,"Number"],[204,28,192,30],[204,29,192,31,"n"],[204,30,192,32],[204,33,192,35,"mask"],[204,37,192,39],[204,38,192,40],[205,10,193,12,"n"],[205,11,193,13],[205,16,193,18,"shiftBy"],[205,23,193,25],[206,10,194,12],[206,14,194,16,"wbits"],[206,19,194,21],[206,22,194,24,"windowSize"],[206,32,194,34],[206,34,194,36],[207,12,195,16,"wbits"],[207,17,195,21],[207,21,195,25,"maxNumber"],[207,30,195,34],[208,12,196,16,"n"],[208,13,196,17],[208,17,196,21,"_1n"],[208,20,196,24],[209,10,197,12],[210,10,198,12],[210,14,198,16,"wbits"],[210,19,198,21],[210,24,198,26],[210,25,198,27],[210,27,198,29],[211,12,199,16],[211,16,199,20,"pr"],[211,18,199,22],[211,21,199,25,"precomputes"],[211,32,199,36],[211,33,199,37,"offset"],[211,39,199,43],[211,40,199,44],[212,12,200,16],[212,16,200,20,"window"],[212,22,200,26],[212,25,200,29],[212,26,200,30],[212,28,201,20,"pr"],[212,30,201,22],[212,33,201,25,"pr"],[212,35,201,27],[212,36,201,28,"negate"],[212,42,201,34],[212,43,201,35],[212,44,201,36],[213,12,202,16,"f"],[213,13,202,17],[213,16,202,20,"f"],[213,17,202,21],[213,18,202,22,"add"],[213,21,202,25],[213,22,202,26,"pr"],[213,24,202,28],[213,25,202,29],[214,10,203,12],[214,11,203,13],[214,17,204,17],[215,12,205,16],[215,16,205,20,"cached"],[215,22,205,26],[215,25,205,29,"precomputes"],[215,36,205,40],[215,37,205,41,"offset"],[215,43,205,47],[215,46,205,50,"Math"],[215,50,205,54],[215,51,205,55,"abs"],[215,54,205,58],[215,55,205,59,"wbits"],[215,60,205,64],[215,61,205,65],[215,64,205,68],[215,65,205,69],[215,66,205,70],[216,12,206,16],[216,16,206,20,"wbits"],[216,21,206,25],[216,24,206,28],[216,25,206,29],[216,27,207,20,"cached"],[216,33,207,26],[216,36,207,29,"cached"],[216,42,207,35],[216,43,207,36,"negate"],[216,49,207,42],[216,50,207,43],[216,51,207,44],[217,12,208,16,"p"],[217,13,208,17],[217,16,208,20,"p"],[217,17,208,21],[217,18,208,22,"add"],[217,21,208,25],[217,22,208,26,"cached"],[217,28,208,32],[217,29,208,33],[218,10,209,12],[219,8,210,8],[220,8,211,8],[220,15,211,15],[221,10,211,17,"p"],[221,11,211,18],[221,13,211,17,"p"],[221,14,211,18],[222,10,211,20,"f"],[222,11,211,21],[222,13,211,20,"f"],[223,8,211,22],[223,9,211,23],[224,6,212,4],[225,4,212,5],[226,6,212,5,"key"],[226,9,212,5],[227,6,212,5,"value"],[227,11,212,5],[227,13,213,4],[227,22,213,4,"multiply"],[227,30,213,12,"multiply"],[227,31,213,13,"scalar"],[227,37,213,19],[227,39,213,21,"affinePoint"],[227,50,213,32],[227,52,213,34],[228,8,214,8],[228,12,214,12,"n"],[228,13,214,13],[228,16,214,16,"normalizeScalar"],[228,31,214,31],[228,32,214,32,"scalar"],[228,38,214,38],[228,39,214,39],[229,8,215,8],[229,12,215,12,"point"],[229,17,215,17],[230,8,216,8],[230,12,216,12,"fake"],[230,16,216,16],[231,8,217,8],[231,12,217,12,"USE_ENDOMORPHISM"],[231,28,217,28],[231,30,217,30],[232,10,218,12],[232,14,218,12,"_splitScalarEndo2"],[232,31,218,12],[232,34,218,45,"splitScalarEndo"],[232,49,218,60],[232,50,218,61,"n"],[232,51,218,62],[232,52,218,63],[233,12,218,20,"k1neg"],[233,17,218,25],[233,20,218,25,"_splitScalarEndo2"],[233,37,218,25],[233,38,218,20,"k1neg"],[233,43,218,25],[234,12,218,27,"k1"],[234,14,218,29],[234,17,218,29,"_splitScalarEndo2"],[234,34,218,29],[234,35,218,27,"k1"],[234,37,218,29],[235,12,218,31,"k2neg"],[235,17,218,36],[235,20,218,36,"_splitScalarEndo2"],[235,37,218,36],[235,38,218,31,"k2neg"],[235,43,218,36],[236,12,218,38,"k2"],[236,14,218,40],[236,17,218,40,"_splitScalarEndo2"],[236,34,218,40],[236,35,218,38,"k2"],[236,37,218,40],[237,10,219,12],[237,14,219,12,"_this$wNAF"],[237,24,219,12],[237,27,219,37],[237,31,219,41],[237,32,219,42,"wNAF"],[237,36,219,46],[237,37,219,47,"k1"],[237,39,219,49],[237,41,219,51,"affinePoint"],[237,52,219,62],[237,53,219,63],[238,12,219,21,"k1p"],[238,15,219,24],[238,18,219,24,"_this$wNAF"],[238,28,219,24],[238,29,219,18,"p"],[238,30,219,19],[239,12,219,29,"f1p"],[239,15,219,32],[239,18,219,32,"_this$wNAF"],[239,28,219,32],[239,29,219,26,"f"],[239,30,219,27],[240,10,220,12],[240,14,220,12,"_this$wNAF2"],[240,25,220,12],[240,28,220,37],[240,32,220,41],[240,33,220,42,"wNAF"],[240,37,220,46],[240,38,220,47,"k2"],[240,40,220,49],[240,42,220,51,"affinePoint"],[240,53,220,62],[240,54,220,63],[241,12,220,21,"k2p"],[241,15,220,24],[241,18,220,24,"_this$wNAF2"],[241,29,220,24],[241,30,220,18,"p"],[241,31,220,19],[242,12,220,29,"f2p"],[242,15,220,32],[242,18,220,32,"_this$wNAF2"],[242,29,220,32],[242,30,220,26,"f"],[242,31,220,27],[243,10,221,12],[243,14,221,16,"k1neg"],[243,19,221,21],[243,21,222,16,"k1p"],[243,24,222,19],[243,27,222,22,"k1p"],[243,30,222,25],[243,31,222,26,"negate"],[243,37,222,32],[243,38,222,33],[243,39,222,34],[244,10,223,12],[244,14,223,16,"k2neg"],[244,19,223,21],[244,21,224,16,"k2p"],[244,24,224,19],[244,27,224,22,"k2p"],[244,30,224,25],[244,31,224,26,"negate"],[244,37,224,32],[244,38,224,33],[244,39,224,34],[245,10,225,12,"k2p"],[245,13,225,15],[245,16,225,18],[245,20,225,22,"JacobianPoint"],[245,33,225,35],[245,34,225,36,"mod"],[245,37,225,39],[245,38,225,40,"k2p"],[245,41,225,43],[245,42,225,44,"x"],[245,43,225,45],[245,46,225,48,"CURVE"],[245,51,225,53],[245,52,225,54,"beta"],[245,56,225,58],[245,57,225,59],[245,59,225,61,"k2p"],[245,62,225,64],[245,63,225,65,"y"],[245,64,225,66],[245,66,225,68,"k2p"],[245,69,225,71],[245,70,225,72,"z"],[245,71,225,73],[245,72,225,74],[246,10,226,12,"point"],[246,15,226,17],[246,18,226,20,"k1p"],[246,21,226,23],[246,22,226,24,"add"],[246,25,226,27],[246,26,226,28,"k2p"],[246,29,226,31],[246,30,226,32],[247,10,227,12,"fake"],[247,14,227,16],[247,17,227,19,"f1p"],[247,20,227,22],[247,21,227,23,"add"],[247,24,227,26],[247,25,227,27,"f2p"],[247,28,227,30],[247,29,227,31],[248,8,228,8],[248,9,228,9],[248,15,229,13],[249,10,230,12],[249,14,230,12,"_this$wNAF3"],[249,25,230,12],[249,28,230,29],[249,32,230,33],[249,33,230,34,"wNAF"],[249,37,230,38],[249,38,230,39,"n"],[249,39,230,40],[249,41,230,42,"affinePoint"],[249,52,230,53],[249,53,230,54],[250,12,230,20,"p"],[250,13,230,21],[250,16,230,21,"_this$wNAF3"],[250,27,230,21],[250,28,230,20,"p"],[250,29,230,21],[251,12,230,23,"f"],[251,13,230,24],[251,16,230,24,"_this$wNAF3"],[251,27,230,24],[251,28,230,23,"f"],[251,29,230,24],[252,10,231,12,"point"],[252,15,231,17],[252,18,231,20,"p"],[252,19,231,21],[253,10,232,12,"fake"],[253,14,232,16],[253,17,232,19,"f"],[253,18,232,20],[254,8,233,8],[255,8,234,8],[255,15,234,15,"JacobianPoint"],[255,28,234,28],[255,29,234,29,"normalizeZ"],[255,39,234,39],[255,40,234,40],[255,41,234,41,"point"],[255,46,234,46],[255,48,234,48,"fake"],[255,52,234,52],[255,53,234,53],[255,54,234,54],[255,55,234,55],[255,56,234,56],[255,57,234,57],[256,6,235,4],[257,4,235,5],[258,6,235,5,"key"],[258,9,235,5],[259,6,235,5,"value"],[259,11,235,5],[259,13,236,4],[259,22,236,4,"toAffine"],[259,30,236,12,"toAffine"],[259,31,236,12],[259,33,236,36],[260,8,236,36],[260,12,236,13,"invZ"],[260,16,236,17],[260,19,236,17,"arguments"],[260,28,236,17],[260,29,236,17,"length"],[260,35,236,17],[260,43,236,17,"arguments"],[260,52,236,17],[260,60,236,17,"undefined"],[260,69,236,17],[260,72,236,17,"arguments"],[260,81,236,17],[260,87,236,20,"invert"],[260,93,236,26],[260,94,236,27],[260,98,236,31],[260,99,236,32,"z"],[260,100,236,33],[260,101,236,34],[261,8,237,8],[261,12,237,16,"x"],[261,13,237,17],[261,16,237,28],[261,20,237,32],[261,21,237,16,"x"],[261,22,237,17],[262,10,237,19,"y"],[262,11,237,20],[262,14,237,28],[262,18,237,32],[262,19,237,19,"y"],[262,20,237,20],[263,10,237,22,"z"],[263,11,237,23],[263,14,237,28],[263,18,237,32],[263,19,237,22,"z"],[263,20,237,23],[264,8,238,8],[264,12,238,14,"iz1"],[264,15,238,17],[264,18,238,20,"invZ"],[264,22,238,24],[265,8,239,8],[265,12,239,14,"iz2"],[265,15,239,17],[265,18,239,20,"mod"],[265,21,239,23],[265,22,239,24,"iz1"],[265,25,239,27],[265,28,239,30,"iz1"],[265,31,239,33],[265,32,239,34],[266,8,240,8],[266,12,240,14,"iz3"],[266,15,240,17],[266,18,240,20,"mod"],[266,21,240,23],[266,22,240,24,"iz2"],[266,25,240,27],[266,28,240,30,"iz1"],[266,31,240,33],[266,32,240,34],[267,8,241,8],[267,12,241,14,"ax"],[267,14,241,16],[267,17,241,19,"mod"],[267,20,241,22],[267,21,241,23,"x"],[267,22,241,24],[267,25,241,27,"iz2"],[267,28,241,30],[267,29,241,31],[268,8,242,8],[268,12,242,14,"ay"],[268,14,242,16],[268,17,242,19,"mod"],[268,20,242,22],[268,21,242,23,"y"],[268,22,242,24],[268,25,242,27,"iz3"],[268,28,242,30],[268,29,242,31],[269,8,243,8],[269,12,243,14,"zz"],[269,14,243,16],[269,17,243,19,"mod"],[269,20,243,22],[269,21,243,23,"z"],[269,22,243,24],[269,25,243,27,"iz1"],[269,28,243,30],[269,29,243,31],[270,8,244,8],[270,12,244,12,"zz"],[270,14,244,14],[270,19,244,19,"_1n"],[270,22,244,22],[270,24,245,12],[270,30,245,18],[270,34,245,22,"Error"],[270,39,245,27],[270,40,245,28],[270,58,245,46],[270,59,245,47],[271,8,246,8],[271,15,246,15],[271,19,246,19,"Point"],[271,24,246,24],[271,25,246,25,"ax"],[271,27,246,27],[271,29,246,29,"ay"],[271,31,246,31],[271,32,246,32],[272,6,247,4],[273,4,247,5],[274,6,247,5,"key"],[274,9,247,5],[275,6,247,5,"value"],[275,11,247,5],[275,13,36,4],[275,22,36,11,"fromAffine"],[275,32,36,21,"fromAffine"],[275,33,36,22,"p"],[275,34,36,23],[275,36,36,25],[276,8,37,8],[276,12,37,12],[276,14,37,14,"p"],[276,15,37,15],[276,27,37,27,"Point"],[276,32,37,32],[276,33,37,33],[276,35,37,35],[277,10,38,12],[277,16,38,18],[277,20,38,22,"TypeError"],[277,29,38,31],[277,30,38,32],[277,72,38,74],[277,73,38,75],[278,8,39,8],[279,8,40,8],[279,15,40,15],[279,19,40,19,"JacobianPoint"],[279,32,40,32],[279,33,40,33,"p"],[279,34,40,34],[279,35,40,35,"x"],[279,36,40,36],[279,38,40,38,"p"],[279,39,40,39],[279,40,40,40,"y"],[279,41,40,41],[279,43,40,43,"_1n"],[279,46,40,46],[279,47,40,47],[280,6,41,4],[281,4,41,5],[282,6,41,5,"key"],[282,9,41,5],[283,6,41,5,"value"],[283,11,41,5],[283,13,42,4],[283,22,42,11,"toAffineBatch"],[283,35,42,24,"toAffineBatch"],[283,36,42,25,"points"],[283,42,42,31],[283,44,42,33],[284,8,43,8],[284,12,43,14,"toInv"],[284,17,43,19],[284,20,43,22,"invertBatch"],[284,31,43,33],[284,32,43,34,"points"],[284,38,43,40],[284,39,43,41,"map"],[284,42,43,44],[284,43,43,45],[284,53,43,46,"p"],[284,54,43,47],[285,10,43,47],[285,17,43,52,"p"],[285,18,43,53],[285,19,43,54,"z"],[285,20,43,55],[286,8,43,55],[286,10,43,56],[286,11,43,57],[287,8,44,8],[287,15,44,15,"points"],[287,21,44,21],[287,22,44,22,"map"],[287,25,44,25],[287,26,44,26],[287,36,44,27,"p"],[287,37,44,28],[287,39,44,30,"i"],[287,40,44,31],[288,10,44,31],[288,17,44,36,"p"],[288,18,44,37],[288,19,44,38,"toAffine"],[288,27,44,46],[288,28,44,47,"toInv"],[288,33,44,52],[288,34,44,53,"i"],[288,35,44,54],[288,36,44,55],[288,37,44,56],[289,8,44,56],[289,10,44,57],[290,6,45,4],[291,4,45,5],[292,6,45,5,"key"],[292,9,45,5],[293,6,45,5,"value"],[293,11,45,5],[293,13,46,4],[293,22,46,11,"normalizeZ"],[293,32,46,21,"normalizeZ"],[293,33,46,22,"points"],[293,39,46,28],[293,41,46,30],[294,8,47,8],[294,15,47,15,"JacobianPoint"],[294,28,47,28],[294,29,47,29,"toAffineBatch"],[294,42,47,42],[294,43,47,43,"points"],[294,49,47,49],[294,50,47,50],[294,51,47,51,"map"],[294,54,47,54],[294,55,47,55,"JacobianPoint"],[294,68,47,68],[294,69,47,69,"fromAffine"],[294,79,47,79],[294,80,47,80],[295,6,48,4],[296,4,48,5],[297,2,48,5],[298,2,249,0,"JacobianPoint"],[298,15,249,13],[298,16,249,14,"BASE"],[298,20,249,18],[298,23,249,21],[298,27,249,25,"JacobianPoint"],[298,40,249,38],[298,41,249,39,"CURVE"],[298,46,249,44],[298,47,249,45,"Gx"],[298,49,249,47],[298,51,249,49,"CURVE"],[298,56,249,54],[298,57,249,55,"Gy"],[298,59,249,57],[298,61,249,59,"_1n"],[298,64,249,62],[298,65,249,63],[299,2,250,0,"JacobianPoint"],[299,15,250,13],[299,16,250,14,"ZERO"],[299,20,250,18],[299,23,250,21],[299,27,250,25,"JacobianPoint"],[299,40,250,38],[299,41,250,39,"_0n"],[299,44,250,42],[299,46,250,44,"_1n"],[299,49,250,47],[299,51,250,49,"_0n"],[299,54,250,52],[299,55,250,53],[300,2,251,0],[300,6,251,6,"pointPrecomputes"],[300,22,251,22],[300,25,251,25],[300,29,251,29,"WeakMap"],[300,36,251,36],[300,37,251,37],[300,38,251,38],[301,2,251,39],[301,6,252,6,"Point"],[301,11,252,11],[302,4,253,4],[302,13,253,4,"Point"],[302,19,253,16,"x"],[302,20,253,17],[302,22,253,19,"y"],[302,23,253,20],[302,25,253,22],[303,6,253,22,"_classCallCheck"],[303,21,253,22],[303,28,253,22,"Point"],[303,33,253,22],[304,6,254,8],[304,10,254,12],[304,11,254,13,"x"],[304,12,254,14],[304,15,254,17,"x"],[304,16,254,18],[305,6,255,8],[305,10,255,12],[305,11,255,13,"y"],[305,12,255,14],[305,15,255,17,"y"],[305,16,255,18],[306,4,256,4],[307,4,256,5],[307,11,256,5,"_createClass"],[307,23,256,5],[307,24,256,5,"Point"],[307,29,256,5],[308,6,256,5,"key"],[308,9,256,5],[309,6,256,5,"value"],[309,11,256,5],[309,13,257,4],[309,22,257,4,"_setWindowSize"],[309,36,257,18,"_setWindowSize"],[309,37,257,19,"windowSize"],[309,47,257,29],[309,49,257,31],[310,8,258,8],[310,12,258,12],[310,13,258,13,"_WINDOW_SIZE"],[310,25,258,25],[310,28,258,28,"windowSize"],[310,38,258,38],[311,8,259,8,"pointPrecomputes"],[311,24,259,24],[311,25,259,25,"delete"],[311,31,259,31],[311,32,259,32],[311,36,259,36],[311,37,259,37],[312,6,260,4],[313,4,260,5],[314,6,260,5,"key"],[314,9,260,5],[315,6,260,5,"value"],[315,11,260,5],[315,13,322,4],[315,22,322,4,"toRawBytes"],[315,32,322,14,"toRawBytes"],[315,33,322,14],[315,35,322,37],[316,8,322,37],[316,12,322,15,"isCompressed"],[316,24,322,27],[316,27,322,27,"arguments"],[316,36,322,27],[316,37,322,27,"length"],[316,43,322,27],[316,51,322,27,"arguments"],[316,60,322,27],[316,68,322,27,"undefined"],[316,77,322,27],[316,80,322,27,"arguments"],[316,89,322,27],[316,95,322,30],[316,100,322,35],[317,8,323,8],[317,15,323,15,"hexToBytes"],[317,25,323,25],[317,26,323,26],[317,30,323,30],[317,31,323,31,"toHex"],[317,36,323,36],[317,37,323,37,"isCompressed"],[317,49,323,49],[317,50,323,50],[317,51,323,51],[318,6,324,4],[319,4,324,5],[320,6,324,5,"key"],[320,9,324,5],[321,6,324,5,"value"],[321,11,324,5],[321,13,325,4],[321,22,325,4,"toHex"],[321,27,325,9,"toHex"],[321,28,325,9],[321,30,325,32],[322,8,325,32],[322,12,325,10,"isCompressed"],[322,24,325,22],[322,27,325,22,"arguments"],[322,36,325,22],[322,37,325,22,"length"],[322,43,325,22],[322,51,325,22,"arguments"],[322,60,325,22],[322,68,325,22,"undefined"],[322,77,325,22],[322,80,325,22,"arguments"],[322,89,325,22],[322,95,325,25],[322,100,325,30],[323,8,326,8],[323,12,326,14,"x"],[323,13,326,15],[323,16,326,18,"numTo32bStr"],[323,27,326,29],[323,28,326,30],[323,32,326,34],[323,33,326,35,"x"],[323,34,326,36],[323,35,326,37],[324,8,327,8],[324,12,327,12,"isCompressed"],[324,24,327,24],[324,26,327,26],[325,10,328,12],[325,14,328,18,"prefix"],[325,20,328,24],[325,23,328,27],[325,27,328,31],[325,28,328,32,"y"],[325,29,328,33],[325,32,328,36,"_1n"],[325,35,328,39],[325,38,328,42],[325,42,328,46],[325,45,328,49],[325,49,328,53],[326,10,329,12],[326,17,329,19],[326,20,329,22,"prefix"],[326,26,329,28],[326,29,329,31,"x"],[326,30,329,32],[326,32,329,34],[327,8,330,8],[327,9,330,9],[327,15,331,13],[328,10,332,12],[328,17,332,19],[328,22,332,24,"x"],[328,23,332,25],[328,26,332,28,"numTo32bStr"],[328,37,332,39],[328,38,332,40],[328,42,332,44],[328,43,332,45,"y"],[328,44,332,46],[328,45,332,47],[328,47,332,49],[329,8,333,8],[330,6,334,4],[331,4,334,5],[332,6,334,5,"key"],[332,9,334,5],[333,6,334,5,"value"],[333,11,334,5],[333,13,335,4],[333,22,335,4,"toHexX"],[333,28,335,10,"toHexX"],[333,29,335,10],[333,31,335,13],[334,8,336,8],[334,15,336,15],[334,19,336,19],[334,20,336,20,"toHex"],[334,25,336,25],[334,26,336,26],[334,30,336,30],[334,31,336,31],[334,32,336,32,"slice"],[334,37,336,37],[334,38,336,38],[334,39,336,39],[334,40,336,40],[335,6,337,4],[336,4,337,5],[337,6,337,5,"key"],[337,9,337,5],[338,6,337,5,"value"],[338,11,337,5],[338,13,338,4],[338,22,338,4,"toRawX"],[338,28,338,10,"toRawX"],[338,29,338,10],[338,31,338,13],[339,8,339,8],[339,15,339,15],[339,19,339,19],[339,20,339,20,"toRawBytes"],[339,30,339,30],[339,31,339,31],[339,35,339,35],[339,36,339,36],[339,37,339,37,"slice"],[339,42,339,42],[339,43,339,43],[339,44,339,44],[339,45,339,45],[340,6,340,4],[341,4,340,5],[342,6,340,5,"key"],[342,9,340,5],[343,6,340,5,"value"],[343,11,340,5],[343,13,341,4],[343,22,341,4,"assertValidity"],[343,36,341,18,"assertValidity"],[343,37,341,18],[343,39,341,21],[344,8,342,8],[344,12,342,14,"msg"],[344,15,342,17],[344,18,342,20],[344,50,342,52],[345,8,343,8],[345,12,343,16,"x"],[345,13,343,17],[345,16,343,25],[345,20,343,29],[345,21,343,16,"x"],[345,22,343,17],[346,10,343,19,"y"],[346,11,343,20],[346,14,343,25],[346,18,343,29],[346,19,343,19,"y"],[346,20,343,20],[347,8,344,8],[347,12,344,12],[347,13,344,13,"isValidFieldElement"],[347,32,344,32],[347,33,344,33,"x"],[347,34,344,34],[347,35,344,35],[347,39,344,39],[347,40,344,40,"isValidFieldElement"],[347,59,344,59],[347,60,344,60,"y"],[347,61,344,61],[347,62,344,62],[347,64,345,12],[347,70,345,18],[347,74,345,22,"Error"],[347,79,345,27],[347,80,345,28,"msg"],[347,83,345,31],[347,84,345,32],[348,8,346,8],[348,12,346,14,"left"],[348,16,346,18],[348,19,346,21,"mod"],[348,22,346,24],[348,23,346,25,"y"],[348,24,346,26],[348,27,346,29,"y"],[348,28,346,30],[348,29,346,31],[349,8,347,8],[349,12,347,14,"right"],[349,17,347,19],[349,20,347,22,"weistrass"],[349,29,347,31],[349,30,347,32,"x"],[349,31,347,33],[349,32,347,34],[350,8,348,8],[350,12,348,12,"mod"],[350,15,348,15],[350,16,348,16,"left"],[350,20,348,20],[350,23,348,23,"right"],[350,28,348,28],[350,29,348,29],[350,34,348,34,"_0n"],[350,37,348,37],[350,39,349,12],[350,45,349,18],[350,49,349,22,"Error"],[350,54,349,27],[350,55,349,28,"msg"],[350,58,349,31],[350,59,349,32],[351,6,350,4],[352,4,350,5],[353,6,350,5,"key"],[353,9,350,5],[354,6,350,5,"value"],[354,11,350,5],[354,13,351,4],[354,22,351,4,"equals"],[354,28,351,10,"equals"],[354,29,351,11,"other"],[354,34,351,16],[354,36,351,18],[355,8,352,8],[355,15,352,15],[355,19,352,19],[355,20,352,20,"x"],[355,21,352,21],[355,26,352,26,"other"],[355,31,352,31],[355,32,352,32,"x"],[355,33,352,33],[355,37,352,37],[355,41,352,41],[355,42,352,42,"y"],[355,43,352,43],[355,48,352,48,"other"],[355,53,352,53],[355,54,352,54,"y"],[355,55,352,55],[356,6,353,4],[357,4,353,5],[358,6,353,5,"key"],[358,9,353,5],[359,6,353,5,"value"],[359,11,353,5],[359,13,354,4],[359,22,354,4,"negate"],[359,28,354,10,"negate"],[359,29,354,10],[359,31,354,13],[360,8,355,8],[360,15,355,15],[360,19,355,19,"Point"],[360,24,355,24],[360,25,355,25],[360,29,355,29],[360,30,355,30,"x"],[360,31,355,31],[360,33,355,33,"mod"],[360,36,355,36],[360,37,355,37],[360,38,355,38],[360,42,355,42],[360,43,355,43,"y"],[360,44,355,44],[360,45,355,45],[360,46,355,46],[361,6,356,4],[362,4,356,5],[363,6,356,5,"key"],[363,9,356,5],[364,6,356,5,"value"],[364,11,356,5],[364,13,357,4],[364,22,357,4,"double"],[364,28,357,10,"double"],[364,29,357,10],[364,31,357,13],[365,8,358,8],[365,15,358,15,"JacobianPoint"],[365,28,358,28],[365,29,358,29,"fromAffine"],[365,39,358,39],[365,40,358,40],[365,44,358,44],[365,45,358,45],[365,46,358,46,"double"],[365,52,358,52],[365,53,358,53],[365,54,358,54],[365,55,358,55,"toAffine"],[365,63,358,63],[365,64,358,64],[365,65,358,65],[366,6,359,4],[367,4,359,5],[368,6,359,5,"key"],[368,9,359,5],[369,6,359,5,"value"],[369,11,359,5],[369,13,360,4],[369,22,360,4,"add"],[369,25,360,7,"add"],[369,26,360,8,"other"],[369,31,360,13],[369,33,360,15],[370,8,361,8],[370,15,361,15,"JacobianPoint"],[370,28,361,28],[370,29,361,29,"fromAffine"],[370,39,361,39],[370,40,361,40],[370,44,361,44],[370,45,361,45],[370,46,361,46,"add"],[370,49,361,49],[370,50,361,50,"JacobianPoint"],[370,63,361,63],[370,64,361,64,"fromAffine"],[370,74,361,74],[370,75,361,75,"other"],[370,80,361,80],[370,81,361,81],[370,82,361,82],[370,83,361,83,"toAffine"],[370,91,361,91],[370,92,361,92],[370,93,361,93],[371,6,362,4],[372,4,362,5],[373,6,362,5,"key"],[373,9,362,5],[374,6,362,5,"value"],[374,11,362,5],[374,13,363,4],[374,22,363,4,"subtract"],[374,30,363,12,"subtract"],[374,31,363,13,"other"],[374,36,363,18],[374,38,363,20],[375,8,364,8],[375,15,364,15],[375,19,364,19],[375,20,364,20,"add"],[375,23,364,23],[375,24,364,24,"other"],[375,29,364,29],[375,30,364,30,"negate"],[375,36,364,36],[375,37,364,37],[375,38,364,38],[375,39,364,39],[376,6,365,4],[377,4,365,5],[378,6,365,5,"key"],[378,9,365,5],[379,6,365,5,"value"],[379,11,365,5],[379,13,366,4],[379,22,366,4,"multiply"],[379,30,366,12,"multiply"],[379,31,366,13,"scalar"],[379,37,366,19],[379,39,366,21],[380,8,367,8],[380,15,367,15,"JacobianPoint"],[380,28,367,28],[380,29,367,29,"fromAffine"],[380,39,367,39],[380,40,367,40],[380,44,367,44],[380,45,367,45],[380,46,367,46,"multiply"],[380,54,367,54],[380,55,367,55,"scalar"],[380,61,367,61],[380,63,367,63],[380,67,367,67],[380,68,367,68],[380,69,367,69,"toAffine"],[380,77,367,77],[380,78,367,78],[380,79,367,79],[381,6,368,4],[382,4,368,5],[383,6,368,5,"key"],[383,9,368,5],[384,6,368,5,"value"],[384,11,368,5],[384,13,369,4],[384,22,369,4,"multiplyAndAddUnsafe"],[384,42,369,24,"multiplyAndAddUnsafe"],[384,43,369,25,"Q"],[384,44,369,26],[384,46,369,28,"a"],[384,47,369,29],[384,49,369,31,"b"],[384,50,369,32],[384,52,369,34],[385,8,370,8],[385,12,370,14,"P"],[385,13,370,15],[385,16,370,18,"JacobianPoint"],[385,29,370,31],[385,30,370,32,"fromAffine"],[385,40,370,42],[385,41,370,43],[385,45,370,47],[385,46,370,48],[386,8,371,8],[386,12,371,14,"aP"],[386,14,371,16],[386,17,371,19,"a"],[386,18,371,20],[386,23,371,25,"_0n"],[386,26,371,28],[386,30,371,32,"a"],[386,31,371,33],[386,36,371,38,"_1n"],[386,39,371,41],[386,43,371,45],[386,47,371,49],[386,52,371,54,"Point"],[386,57,371,59],[386,58,371,60,"BASE"],[386,62,371,64],[386,65,371,67,"P"],[386,66,371,68],[386,67,371,69,"multiplyUnsafe"],[386,81,371,83],[386,82,371,84,"a"],[386,83,371,85],[386,84,371,86],[386,87,371,89,"P"],[386,88,371,90],[386,89,371,91,"multiply"],[386,97,371,99],[386,98,371,100,"a"],[386,99,371,101],[386,100,371,102],[387,8,372,8],[387,12,372,14,"bQ"],[387,14,372,16],[387,17,372,19,"JacobianPoint"],[387,30,372,32],[387,31,372,33,"fromAffine"],[387,41,372,43],[387,42,372,44,"Q"],[387,43,372,45],[387,44,372,46],[387,45,372,47,"multiplyUnsafe"],[387,59,372,61],[387,60,372,62,"b"],[387,61,372,63],[387,62,372,64],[388,8,373,8],[388,12,373,14,"sum"],[388,15,373,17],[388,18,373,20,"aP"],[388,20,373,22],[388,21,373,23,"add"],[388,24,373,26],[388,25,373,27,"bQ"],[388,27,373,29],[388,28,373,30],[389,8,374,8],[389,15,374,15,"sum"],[389,18,374,18],[389,19,374,19,"equals"],[389,25,374,25],[389,26,374,26,"JacobianPoint"],[389,39,374,39],[389,40,374,40,"ZERO"],[389,44,374,44],[389,45,374,45],[389,48,374,48,"undefined"],[389,57,374,57],[389,60,374,60,"sum"],[389,63,374,63],[389,64,374,64,"toAffine"],[389,72,374,72],[389,73,374,73],[389,74,374,74],[390,6,375,4],[391,4,375,5],[392,6,375,5,"key"],[392,9,375,5],[393,6,375,5,"value"],[393,11,375,5],[393,13,261,4],[393,22,261,11,"fromCompressedHex"],[393,39,261,28,"fromCompressedHex"],[393,40,261,29,"bytes"],[393,45,261,34],[393,47,261,36],[394,8,262,8],[394,12,262,14,"isShort"],[394,19,262,21],[394,22,262,24,"bytes"],[394,27,262,29],[394,28,262,30,"length"],[394,34,262,36],[394,39,262,41],[394,41,262,43],[395,8,263,8],[395,12,263,14,"x"],[395,13,263,15],[395,16,263,18,"bytesToNumber"],[395,29,263,31],[395,30,263,32,"isShort"],[395,37,263,39],[395,40,263,42,"bytes"],[395,45,263,47],[395,48,263,50,"bytes"],[395,53,263,55],[395,54,263,56,"subarray"],[395,62,263,64],[395,63,263,65],[395,64,263,66],[395,65,263,67],[395,66,263,68],[396,8,264,8],[396,12,264,12],[396,13,264,13,"isValidFieldElement"],[396,32,264,32],[396,33,264,33,"x"],[396,34,264,34],[396,35,264,35],[396,37,265,12],[396,43,265,18],[396,47,265,22,"Error"],[396,52,265,27],[396,53,265,28],[396,76,265,51],[396,77,265,52],[397,8,266,8],[397,12,266,14,"y2"],[397,14,266,16],[397,17,266,19,"weistrass"],[397,26,266,28],[397,27,266,29,"x"],[397,28,266,30],[397,29,266,31],[398,8,267,8],[398,12,267,12,"y"],[398,13,267,13],[398,16,267,16,"sqrtMod"],[398,23,267,23],[398,24,267,24,"y2"],[398,26,267,26],[398,27,267,27],[399,8,268,8],[399,12,268,14,"isYOdd"],[399,18,268,20],[399,21,268,23],[399,22,268,24,"y"],[399,23,268,25],[399,26,268,28,"_1n"],[399,29,268,31],[399,35,268,37,"_1n"],[399,38,268,40],[400,8,269,8],[400,12,269,12,"isShort"],[400,19,269,19],[400,21,269,21],[401,10,270,12],[401,14,270,16,"isYOdd"],[401,20,270,22],[401,22,271,16,"y"],[401,23,271,17],[401,26,271,20,"mod"],[401,29,271,23],[401,30,271,24],[401,31,271,25,"y"],[401,32,271,26],[401,33,271,27],[402,8,272,8],[402,9,272,9],[402,15,273,13],[403,10,274,12],[403,14,274,18,"isFirstByteOdd"],[403,28,274,32],[403,31,274,35],[403,32,274,36,"bytes"],[403,37,274,41],[403,38,274,42],[403,39,274,43],[403,40,274,44],[403,43,274,47],[403,44,274,48],[403,50,274,54],[403,51,274,55],[404,10,275,12],[404,14,275,16,"isFirstByteOdd"],[404,28,275,30],[404,33,275,35,"isYOdd"],[404,39,275,41],[404,41,276,16,"y"],[404,42,276,17],[404,45,276,20,"mod"],[404,48,276,23],[404,49,276,24],[404,50,276,25,"y"],[404,51,276,26],[404,52,276,27],[405,8,277,8],[406,8,278,8],[406,12,278,14,"point"],[406,17,278,19],[406,20,278,22],[406,24,278,26,"Point"],[406,29,278,31],[406,30,278,32,"x"],[406,31,278,33],[406,33,278,35,"y"],[406,34,278,36],[406,35,278,37],[407,8,279,8,"point"],[407,13,279,13],[407,14,279,14,"assertValidity"],[407,28,279,28],[407,29,279,29],[407,30,279,30],[408,8,280,8],[408,15,280,15,"point"],[408,20,280,20],[409,6,281,4],[410,4,281,5],[411,6,281,5,"key"],[411,9,281,5],[412,6,281,5,"value"],[412,11,281,5],[412,13,282,4],[412,22,282,11,"fromUncompressedHex"],[412,41,282,30,"fromUncompressedHex"],[412,42,282,31,"bytes"],[412,47,282,36],[412,49,282,38],[413,8,283,8],[413,12,283,14,"x"],[413,13,283,15],[413,16,283,18,"bytesToNumber"],[413,29,283,31],[413,30,283,32,"bytes"],[413,35,283,37],[413,36,283,38,"subarray"],[413,44,283,46],[413,45,283,47],[413,46,283,48],[413,48,283,50],[413,50,283,52],[413,51,283,53],[413,52,283,54],[414,8,284,8],[414,12,284,14,"y"],[414,13,284,15],[414,16,284,18,"bytesToNumber"],[414,29,284,31],[414,30,284,32,"bytes"],[414,35,284,37],[414,36,284,38,"subarray"],[414,44,284,46],[414,45,284,47],[414,47,284,49],[414,49,284,51],[414,51,284,53],[414,52,284,54],[414,53,284,55],[415,8,285,8],[415,12,285,14,"point"],[415,17,285,19],[415,20,285,22],[415,24,285,26,"Point"],[415,29,285,31],[415,30,285,32,"x"],[415,31,285,33],[415,33,285,35,"y"],[415,34,285,36],[415,35,285,37],[416,8,286,8,"point"],[416,13,286,13],[416,14,286,14,"assertValidity"],[416,28,286,28],[416,29,286,29],[416,30,286,30],[417,8,287,8],[417,15,287,15,"point"],[417,20,287,20],[418,6,288,4],[419,4,288,5],[420,6,288,5,"key"],[420,9,288,5],[421,6,288,5,"value"],[421,11,288,5],[421,13,289,4],[421,22,289,11,"fromHex"],[421,29,289,18,"fromHex"],[421,30,289,19,"hex"],[421,33,289,22],[421,35,289,24],[422,8,290,8],[422,12,290,14,"bytes"],[422,17,290,19],[422,20,290,22,"ensureBytes"],[422,31,290,33],[422,32,290,34,"hex"],[422,35,290,37],[422,36,290,38],[423,8,291,8],[423,12,291,14,"len"],[423,15,291,17],[423,18,291,20,"bytes"],[423,23,291,25],[423,24,291,26,"length"],[423,30,291,32],[424,8,292,8],[424,12,292,14,"header"],[424,18,292,20],[424,21,292,23,"bytes"],[424,26,292,28],[424,27,292,29],[424,28,292,30],[424,29,292,31],[425,8,293,8],[425,12,293,12,"len"],[425,15,293,15],[425,20,293,20],[425,22,293,22],[425,26,293,27,"len"],[425,29,293,30],[425,34,293,35],[425,36,293,37],[425,41,293,42,"header"],[425,47,293,48],[425,52,293,53],[425,56,293,57],[425,60,293,61,"header"],[425,66,293,67],[425,71,293,72],[425,75,293,76],[425,76,293,78],[425,78,293,80],[426,10,294,12],[426,17,294,19],[426,21,294,23],[426,22,294,24,"fromCompressedHex"],[426,39,294,41],[426,40,294,42,"bytes"],[426,45,294,47],[426,46,294,48],[427,8,295,8],[428,8,296,8],[428,12,296,12,"len"],[428,15,296,15],[428,20,296,20],[428,22,296,22],[428,26,296,26,"header"],[428,32,296,32],[428,37,296,37],[428,41,296,41],[428,43,297,12],[428,50,297,19],[428,54,297,23],[428,55,297,24,"fromUncompressedHex"],[428,74,297,43],[428,75,297,44,"bytes"],[428,80,297,49],[428,81,297,50],[429,8,298,8],[429,14,298,14],[429,18,298,18,"Error"],[429,23,298,23],[429,24,298,24],[429,128,298,128,"len"],[429,131,298,131],[429,133,298,133],[429,134,298,134],[430,6,299,4],[431,4,299,5],[432,6,299,5,"key"],[432,9,299,5],[433,6,299,5,"value"],[433,11,299,5],[433,13,300,4],[433,22,300,11,"fromPrivateKey"],[433,36,300,25,"fromPrivateKey"],[433,37,300,26,"privateKey"],[433,47,300,36],[433,49,300,38],[434,8,301,8],[434,15,301,15,"Point"],[434,20,301,20],[434,21,301,21,"BASE"],[434,25,301,25],[434,26,301,26,"multiply"],[434,34,301,34],[434,35,301,35,"normalizePrivateKey"],[434,54,301,54],[434,55,301,55,"privateKey"],[434,65,301,65],[434,66,301,66],[434,67,301,67],[435,6,302,4],[436,4,302,5],[437,6,302,5,"key"],[437,9,302,5],[438,6,302,5,"value"],[438,11,302,5],[438,13,303,4],[438,22,303,11,"fromSignature"],[438,35,303,24,"fromSignature"],[438,36,303,25,"msgHash"],[438,43,303,32],[438,45,303,34,"signature"],[438,54,303,43],[438,56,303,45,"recovery"],[438,64,303,53],[438,66,303,55],[439,8,304,8,"msgHash"],[439,15,304,15],[439,18,304,18,"ensureBytes"],[439,29,304,29],[439,30,304,30,"msgHash"],[439,37,304,37],[439,38,304,38],[440,8,305,8],[440,12,305,14,"h"],[440,13,305,15],[440,16,305,18,"truncateHash"],[440,28,305,30],[440,29,305,31,"msgHash"],[440,36,305,38],[440,37,305,39],[441,8,306,8],[441,12,306,8,"_normalizeSignature"],[441,31,306,8],[441,34,306,25,"normalizeSignature"],[441,52,306,43],[441,53,306,44,"signature"],[441,62,306,53],[441,63,306,54],[442,10,306,16,"r"],[442,11,306,17],[442,14,306,17,"_normalizeSignature"],[442,33,306,17],[442,34,306,16,"r"],[442,35,306,17],[443,10,306,19,"s"],[443,11,306,20],[443,14,306,20,"_normalizeSignature"],[443,33,306,20],[443,34,306,19,"s"],[443,35,306,20],[444,8,307,8],[444,12,307,12,"recovery"],[444,20,307,20],[444,25,307,25],[444,26,307,26],[444,30,307,30,"recovery"],[444,38,307,38],[444,43,307,43],[444,44,307,44],[444,46,307,46],[445,10,308,12],[445,16,308,18],[445,20,308,22,"Error"],[445,25,308,27],[445,26,308,28],[445,74,308,76],[445,75,308,77],[446,8,309,8],[447,8,310,8],[447,12,310,14,"prefix"],[447,18,310,20],[447,21,310,23,"recovery"],[447,29,310,31],[447,32,310,34],[447,33,310,35],[447,36,310,38],[447,40,310,42],[447,43,310,45],[447,47,310,49],[448,8,311,8],[448,12,311,14,"R"],[448,13,311,15],[448,16,311,18,"Point"],[448,21,311,23],[448,22,311,24,"fromHex"],[448,29,311,31],[448,30,311,32,"prefix"],[448,36,311,38],[448,39,311,41,"numTo32bStr"],[448,50,311,52],[448,51,311,53,"r"],[448,52,311,54],[448,53,311,55],[448,54,311,56],[449,8,312,8],[449,12,312,16,"n"],[449,13,312,17],[449,16,312,22,"CURVE"],[449,21,312,27],[449,22,312,16,"n"],[449,23,312,17],[450,8,313,8],[450,12,313,14,"rinv"],[450,16,313,18],[450,19,313,21,"invert"],[450,25,313,27],[450,26,313,28,"r"],[450,27,313,29],[450,29,313,31,"n"],[450,30,313,32],[450,31,313,33],[451,8,314,8],[451,12,314,14,"u1"],[451,14,314,16],[451,17,314,19,"mod"],[451,20,314,22],[451,21,314,23],[451,22,314,24,"h"],[451,23,314,25],[451,26,314,28,"rinv"],[451,30,314,32],[451,32,314,34,"n"],[451,33,314,35],[451,34,314,36],[452,8,315,8],[452,12,315,14,"u2"],[452,14,315,16],[452,17,315,19,"mod"],[452,20,315,22],[452,21,315,23,"s"],[452,22,315,24],[452,25,315,27,"rinv"],[452,29,315,31],[452,31,315,33,"n"],[452,32,315,34],[452,33,315,35],[453,8,316,8],[453,12,316,14,"Q"],[453,13,316,15],[453,16,316,18,"Point"],[453,21,316,23],[453,22,316,24,"BASE"],[453,26,316,28],[453,27,316,29,"multiplyAndAddUnsafe"],[453,47,316,49],[453,48,316,50,"R"],[453,49,316,51],[453,51,316,53,"u1"],[453,53,316,55],[453,55,316,57,"u2"],[453,57,316,59],[453,58,316,60],[454,8,317,8],[454,12,317,12],[454,13,317,13,"Q"],[454,14,317,14],[454,16,318,12],[454,22,318,18],[454,26,318,22,"Error"],[454,31,318,27],[454,32,318,28],[454,77,318,73],[454,78,318,74],[455,8,319,8,"Q"],[455,9,319,9],[455,10,319,10,"assertValidity"],[455,24,319,24],[455,25,319,25],[455,26,319,26],[456,8,320,8],[456,15,320,15,"Q"],[456,16,320,16],[457,6,321,4],[458,4,321,5],[459,2,321,5],[460,2,377,0,"exports"],[460,9,377,7],[460,10,377,8,"Point"],[460,15,377,13],[460,18,377,16,"Point"],[460,23,377,21],[461,2,378,0,"Point"],[461,7,378,5],[461,8,378,6,"BASE"],[461,12,378,10],[461,15,378,13],[461,19,378,17,"Point"],[461,24,378,22],[461,25,378,23,"CURVE"],[461,30,378,28],[461,31,378,29,"Gx"],[461,33,378,31],[461,35,378,33,"CURVE"],[461,40,378,38],[461,41,378,39,"Gy"],[461,43,378,41],[461,44,378,42],[462,2,379,0,"Point"],[462,7,379,5],[462,8,379,6,"ZERO"],[462,12,379,10],[462,15,379,13],[462,19,379,17,"Point"],[462,24,379,22],[462,25,379,23,"_0n"],[462,28,379,26],[462,30,379,28,"_0n"],[462,33,379,31],[462,34,379,32],[463,2,380,0],[463,11,380,9,"sliceDER"],[463,19,380,17,"sliceDER"],[463,20,380,18,"s"],[463,21,380,19],[463,23,380,21],[464,4,381,4],[464,11,381,11,"Number"],[464,17,381,17],[464,18,381,18,"parseInt"],[464,26,381,26],[464,27,381,27,"s"],[464,28,381,28],[464,29,381,29],[464,30,381,30],[464,31,381,31],[464,33,381,33],[464,35,381,35],[464,36,381,36],[464,40,381,40],[464,41,381,41],[464,44,381,44],[464,48,381,48],[464,51,381,51,"s"],[464,52,381,52],[464,55,381,55,"s"],[464,56,381,56],[465,2,382,0],[466,2,383,0],[466,11,383,9,"parseDERInt"],[466,22,383,20,"parseDERInt"],[466,23,383,21,"data"],[466,27,383,25],[466,29,383,27],[467,4,384,4],[467,8,384,8,"data"],[467,12,384,12],[467,13,384,13,"length"],[467,19,384,19],[467,22,384,22],[467,23,384,23],[467,27,384,27,"data"],[467,31,384,31],[467,32,384,32],[467,33,384,33],[467,34,384,34],[467,39,384,39],[467,43,384,43],[467,45,384,45],[468,6,385,8],[468,12,385,14],[468,16,385,18,"Error"],[468,21,385,23],[468,22,385,24],[468,56,385,58,"bytesToHex"],[468,66,385,68],[468,67,385,69,"data"],[468,71,385,73],[468,72,385,74],[468,74,385,76],[468,75,385,77],[469,4,386,4],[470,4,387,4],[470,8,387,10,"len"],[470,11,387,13],[470,14,387,16,"data"],[470,18,387,20],[470,19,387,21],[470,20,387,22],[470,21,387,23],[471,4,388,4],[471,8,388,10,"res"],[471,11,388,13],[471,14,388,16,"data"],[471,18,388,20],[471,19,388,21,"subarray"],[471,27,388,29],[471,28,388,30],[471,29,388,31],[471,31,388,33,"len"],[471,34,388,36],[471,37,388,39],[471,38,388,40],[471,39,388,41],[472,4,389,4],[472,8,389,8],[472,9,389,9,"len"],[472,12,389,12],[472,16,389,16,"res"],[472,19,389,19],[472,20,389,20,"length"],[472,26,389,26],[472,31,389,31,"len"],[472,34,389,34],[472,36,389,36],[473,6,390,8],[473,12,390,14],[473,16,390,18,"Error"],[473,21,390,23],[473,22,390,24],[473,63,390,65],[473,64,390,66],[474,4,391,4],[475,4,392,4],[475,8,392,8,"res"],[475,11,392,11],[475,12,392,12],[475,13,392,13],[475,14,392,14],[475,19,392,19],[475,23,392,23],[475,27,392,27,"res"],[475,30,392,30],[475,31,392,31],[475,32,392,32],[475,33,392,33],[475,37,392,37],[475,41,392,41],[475,43,392,43],[476,6,393,8],[476,12,393,14],[476,16,393,18,"Error"],[476,21,393,23],[476,22,393,24],[476,66,393,68],[476,67,393,69],[477,4,394,4],[478,4,395,4],[478,11,395,11],[479,6,395,13,"data"],[479,10,395,17],[479,12,395,19,"bytesToNumber"],[479,25,395,32],[479,26,395,33,"res"],[479,29,395,36],[479,30,395,37],[480,6,395,39,"left"],[480,10,395,43],[480,12,395,45,"data"],[480,16,395,49],[480,17,395,50,"subarray"],[480,25,395,58],[480,26,395,59,"len"],[480,29,395,62],[480,32,395,65],[480,33,395,66],[481,4,395,68],[481,5,395,69],[482,2,396,0],[483,2,397,0],[483,11,397,9,"parseDERSignature"],[483,28,397,26,"parseDERSignature"],[483,29,397,27,"data"],[483,33,397,31],[483,35,397,33],[484,4,398,4],[484,8,398,8,"data"],[484,12,398,12],[484,13,398,13,"length"],[484,19,398,19],[484,22,398,22],[484,23,398,23],[484,27,398,27,"data"],[484,31,398,31],[484,32,398,32],[484,33,398,33],[484,34,398,34],[484,38,398,38],[484,42,398,42],[484,44,398,44],[485,6,399,8],[485,12,399,14],[485,16,399,18,"Error"],[485,21,399,23],[485,22,399,24],[485,48,399,50,"bytesToHex"],[485,58,399,60],[485,59,399,61,"data"],[485,63,399,65],[485,64,399,66],[485,66,399,68],[485,67,399,69],[486,4,400,4],[487,4,401,4],[487,8,401,8,"data"],[487,12,401,12],[487,13,401,13],[487,14,401,14],[487,15,401,15],[487,20,401,20,"data"],[487,24,401,24],[487,25,401,25,"length"],[487,31,401,31],[487,34,401,34],[487,35,401,35],[487,37,401,37],[488,6,402,8],[488,12,402,14],[488,16,402,18,"Error"],[488,21,402,23],[488,22,402,24],[488,59,402,61],[488,60,402,62],[489,4,403,4],[490,4,404,4],[490,8,404,4,"_parseDERInt"],[490,20,404,4],[490,23,404,38,"parseDERInt"],[490,34,404,49],[490,35,404,50,"data"],[490,39,404,54],[490,40,404,55,"subarray"],[490,48,404,63],[490,49,404,64],[490,50,404,65],[490,51,404,66],[490,52,404,67],[491,6,404,18,"r"],[491,7,404,19],[491,10,404,19,"_parseDERInt"],[491,22,404,19],[491,23,404,12,"data"],[491,27,404,16],[492,6,404,27,"sBytes"],[492,12,404,33],[492,15,404,33,"_parseDERInt"],[492,27,404,33],[492,28,404,21,"left"],[492,32,404,25],[493,4,405,4],[493,8,405,4,"_parseDERInt2"],[493,21,405,4],[493,24,405,42,"parseDERInt"],[493,35,405,53],[493,36,405,54,"sBytes"],[493,42,405,60],[493,43,405,61],[494,6,405,18,"s"],[494,7,405,19],[494,10,405,19,"_parseDERInt2"],[494,23,405,19],[494,24,405,12,"data"],[494,28,405,16],[495,6,405,27,"rBytesLeft"],[495,16,405,37],[495,19,405,37,"_parseDERInt2"],[495,32,405,37],[495,33,405,21,"left"],[495,37,405,25],[496,4,406,4],[496,8,406,8,"rBytesLeft"],[496,18,406,18],[496,19,406,19,"length"],[496,25,406,25],[496,27,406,27],[497,6,407,8],[497,12,407,14],[497,16,407,18,"Error"],[497,21,407,23],[497,22,407,24],[497,70,407,72,"bytesToHex"],[497,80,407,82],[497,81,407,83,"rBytesLeft"],[497,91,407,93],[497,92,407,94],[497,94,407,96],[497,95,407,97],[498,4,408,4],[499,4,409,4],[499,11,409,11],[500,6,409,13,"r"],[500,7,409,14],[500,9,409,13,"r"],[500,10,409,14],[501,6,409,16,"s"],[501,7,409,17],[501,9,409,16,"s"],[502,4,409,18],[502,5,409,19],[503,2,410,0],[504,2,410,1],[504,6,411,6,"Signature"],[504,15,411,15],[505,4,412,4],[505,13,412,4,"Signature"],[505,23,412,16,"r"],[505,24,412,17],[505,26,412,19,"s"],[505,27,412,20],[505,29,412,22],[506,6,412,22,"_classCallCheck"],[506,21,412,22],[506,28,412,22,"Signature"],[506,37,412,22],[507,6,413,8],[507,10,413,12],[507,11,413,13,"r"],[507,12,413,14],[507,15,413,17,"r"],[507,16,413,18],[508,6,414,8],[508,10,414,12],[508,11,414,13,"s"],[508,12,414,14],[508,15,414,17,"s"],[508,16,414,18],[509,6,415,8],[509,10,415,12],[509,11,415,13,"assertValidity"],[509,25,415,27],[509,26,415,28],[509,27,415,29],[510,4,416,4],[511,4,416,5],[511,11,416,5,"_createClass"],[511,23,416,5],[511,24,416,5,"Signature"],[511,33,416,5],[512,6,416,5,"key"],[512,9,416,5],[513,6,416,5,"value"],[513,11,416,5],[513,13,437,4],[513,22,437,4,"assertValidity"],[513,36,437,18,"assertValidity"],[513,37,437,18],[513,39,437,21],[514,8,438,8],[514,12,438,16,"r"],[514,13,438,17],[514,16,438,25],[514,20,438,29],[514,21,438,16,"r"],[514,22,438,17],[515,10,438,19,"s"],[515,11,438,20],[515,14,438,25],[515,18,438,29],[515,19,438,19,"s"],[515,20,438,20],[516,8,439,8],[516,12,439,12],[516,13,439,13,"isWithinCurveOrder"],[516,31,439,31],[516,32,439,32,"r"],[516,33,439,33],[516,34,439,34],[516,36,440,12],[516,42,440,18],[516,46,440,22,"Error"],[516,51,440,27],[516,52,440,28],[516,92,440,68],[516,93,440,69],[517,8,441,8],[517,12,441,12],[517,13,441,13,"isWithinCurveOrder"],[517,31,441,31],[517,32,441,32,"s"],[517,33,441,33],[517,34,441,34],[517,36,442,12],[517,42,442,18],[517,46,442,22,"Error"],[517,51,442,27],[517,52,442,28],[517,92,442,68],[517,93,442,69],[518,6,443,4],[519,4,443,5],[520,6,443,5,"key"],[520,9,443,5],[521,6,443,5,"value"],[521,11,443,5],[521,13,444,4],[521,22,444,4,"hasHighS"],[521,30,444,12,"hasHighS"],[521,31,444,12],[521,33,444,15],[522,8,445,8],[522,12,445,14,"HALF"],[522,16,445,18],[522,19,445,21,"CURVE"],[522,24,445,26],[522,25,445,27,"n"],[522,26,445,28],[522,30,445,32,"_1n"],[522,33,445,35],[523,8,446,8],[523,15,446,15],[523,19,446,19],[523,20,446,20,"s"],[523,21,446,21],[523,24,446,24,"HALF"],[523,28,446,28],[524,6,447,4],[525,4,447,5],[526,6,447,5,"key"],[526,9,447,5],[527,6,447,5,"value"],[527,11,447,5],[527,13,448,4],[527,22,448,4,"normalizeS"],[527,32,448,14,"normalizeS"],[527,33,448,14],[527,35,448,17],[528,8,449,8],[528,15,449,15],[528,19,449,19],[528,20,449,20,"hasHighS"],[528,28,449,28],[528,29,449,29],[528,30,449,30],[528,33,449,33],[528,37,449,37,"Signature"],[528,46,449,46],[528,47,449,47],[528,51,449,51],[528,52,449,52,"r"],[528,53,449,53],[528,55,449,55,"CURVE"],[528,60,449,60],[528,61,449,61,"n"],[528,62,449,62],[528,65,449,65],[528,69,449,69],[528,70,449,70,"s"],[528,71,449,71],[528,72,449,72],[528,75,449,75],[528,79,449,79],[529,6,450,4],[530,4,450,5],[531,6,450,5,"key"],[531,9,450,5],[532,6,450,5,"value"],[532,11,450,5],[532,13,451,4],[532,22,451,4,"toDERRawBytes"],[532,35,451,17,"toDERRawBytes"],[532,36,451,17],[532,38,451,40],[533,8,451,40],[533,12,451,18,"isCompressed"],[533,24,451,30],[533,27,451,30,"arguments"],[533,36,451,30],[533,37,451,30,"length"],[533,43,451,30],[533,51,451,30,"arguments"],[533,60,451,30],[533,68,451,30,"undefined"],[533,77,451,30],[533,80,451,30,"arguments"],[533,89,451,30],[533,95,451,33],[533,100,451,38],[534,8,452,8],[534,15,452,15,"hexToBytes"],[534,25,452,25],[534,26,452,26],[534,30,452,30],[534,31,452,31,"toDERHex"],[534,39,452,39],[534,40,452,40,"isCompressed"],[534,52,452,52],[534,53,452,53],[534,54,452,54],[535,6,453,4],[536,4,453,5],[537,6,453,5,"key"],[537,9,453,5],[538,6,453,5,"value"],[538,11,453,5],[538,13,454,4],[538,22,454,4,"toDERHex"],[538,30,454,12,"toDERHex"],[538,31,454,12],[538,33,454,35],[539,8,454,35],[539,12,454,13,"isCompressed"],[539,24,454,25],[539,27,454,25,"arguments"],[539,36,454,25],[539,37,454,25,"length"],[539,43,454,25],[539,51,454,25,"arguments"],[539,60,454,25],[539,68,454,25,"undefined"],[539,77,454,25],[539,80,454,25,"arguments"],[539,89,454,25],[539,95,454,28],[539,100,454,33],[540,8,455,8],[540,12,455,14,"sHex"],[540,16,455,18],[540,19,455,21,"sliceDER"],[540,27,455,29],[540,28,455,30,"numberToHexUnpadded"],[540,47,455,49],[540,48,455,50],[540,52,455,54],[540,53,455,55,"s"],[540,54,455,56],[540,55,455,57],[540,56,455,58],[541,8,456,8],[541,12,456,12,"isCompressed"],[541,24,456,24],[541,26,457,12],[541,33,457,19,"sHex"],[541,37,457,23],[542,8,458,8],[542,12,458,14,"rHex"],[542,16,458,18],[542,19,458,21,"sliceDER"],[542,27,458,29],[542,28,458,30,"numberToHexUnpadded"],[542,47,458,49],[542,48,458,50],[542,52,458,54],[542,53,458,55,"r"],[542,54,458,56],[542,55,458,57],[542,56,458,58],[543,8,459,8],[543,12,459,14,"rLen"],[543,16,459,18],[543,19,459,21,"numberToHexUnpadded"],[543,38,459,40],[543,39,459,41,"rHex"],[543,43,459,45],[543,44,459,46,"length"],[543,50,459,52],[543,53,459,55],[543,54,459,56],[543,55,459,57],[544,8,460,8],[544,12,460,14,"sLen"],[544,16,460,18],[544,19,460,21,"numberToHexUnpadded"],[544,38,460,40],[544,39,460,41,"sHex"],[544,43,460,45],[544,44,460,46,"length"],[544,50,460,52],[544,53,460,55],[544,54,460,56],[544,55,460,57],[545,8,461,8],[545,12,461,14,"length"],[545,18,461,20],[545,21,461,23,"numberToHexUnpadded"],[545,40,461,42],[545,41,461,43,"rHex"],[545,45,461,47],[545,46,461,48,"length"],[545,52,461,54],[545,55,461,57],[545,56,461,58],[545,59,461,61,"sHex"],[545,63,461,65],[545,64,461,66,"length"],[545,70,461,72],[545,73,461,75],[545,74,461,76],[545,77,461,79],[545,78,461,80],[545,79,461,81],[546,8,462,8],[546,15,462,15],[546,20,462,20,"length"],[546,26,462,26],[546,31,462,31,"rLen"],[546,35,462,35],[546,38,462,38,"rHex"],[546,42,462,42],[546,47,462,47,"sLen"],[546,51,462,51],[546,54,462,54,"sHex"],[546,58,462,58],[546,60,462,60],[547,6,463,4],[548,4,463,5],[549,6,463,5,"key"],[549,9,463,5],[550,6,463,5,"value"],[550,11,463,5],[550,13,464,4],[550,22,464,4,"toRawBytes"],[550,32,464,14,"toRawBytes"],[550,33,464,14],[550,35,464,17],[551,8,465,8],[551,15,465,15],[551,19,465,19],[551,20,465,20,"toDERRawBytes"],[551,33,465,33],[551,34,465,34],[551,35,465,35],[552,6,466,4],[553,4,466,5],[554,6,466,5,"key"],[554,9,466,5],[555,6,466,5,"value"],[555,11,466,5],[555,13,467,4],[555,22,467,4,"toHex"],[555,27,467,9,"toHex"],[555,28,467,9],[555,30,467,12],[556,8,468,8],[556,15,468,15],[556,19,468,19],[556,20,468,20,"toDERHex"],[556,28,468,28],[556,29,468,29],[556,30,468,30],[557,6,469,4],[558,4,469,5],[559,6,469,5,"key"],[559,9,469,5],[560,6,469,5,"value"],[560,11,469,5],[560,13,470,4],[560,22,470,4,"toCompactRawBytes"],[560,39,470,21,"toCompactRawBytes"],[560,40,470,21],[560,42,470,24],[561,8,471,8],[561,15,471,15,"hexToBytes"],[561,25,471,25],[561,26,471,26],[561,30,471,30],[561,31,471,31,"toCompactHex"],[561,43,471,43],[561,44,471,44],[561,45,471,45],[561,46,471,46],[562,6,472,4],[563,4,472,5],[564,6,472,5,"key"],[564,9,472,5],[565,6,472,5,"value"],[565,11,472,5],[565,13,473,4],[565,22,473,4,"toCompactHex"],[565,34,473,16,"toCompactHex"],[565,35,473,16],[565,37,473,19],[566,8,474,8],[566,15,474,15,"numTo32bStr"],[566,26,474,26],[566,27,474,27],[566,31,474,31],[566,32,474,32,"r"],[566,33,474,33],[566,34,474,34],[566,37,474,37,"numTo32bStr"],[566,48,474,48],[566,49,474,49],[566,53,474,53],[566,54,474,54,"s"],[566,55,474,55],[566,56,474,56],[567,6,475,4],[568,4,475,5],[569,6,475,5,"key"],[569,9,475,5],[570,6,475,5,"value"],[570,11,475,5],[570,13,417,4],[570,22,417,11,"fromCompact"],[570,33,417,22,"fromCompact"],[570,34,417,23,"hex"],[570,37,417,26],[570,39,417,28],[571,8,418,8],[571,12,418,14,"arr"],[571,15,418,17],[571,18,418,20,"isUint8a"],[571,26,418,28],[571,27,418,29,"hex"],[571,30,418,32],[571,31,418,33],[572,8,419,8],[572,12,419,14,"name"],[572,16,419,18],[572,19,419,21],[572,42,419,44],[573,8,420,8],[573,12,420,12],[573,19,420,19,"hex"],[573,22,420,22],[573,27,420,27],[573,35,420,35],[573,39,420,39],[573,40,420,40,"arr"],[573,43,420,43],[573,45,421,12],[573,51,421,18],[573,55,421,22,"TypeError"],[573,64,421,31],[573,65,421,32],[573,68,421,35,"name"],[573,72,421,39],[573,105,421,72],[573,106,421,73],[574,8,422,8],[574,12,422,14,"str"],[574,15,422,17],[574,18,422,20,"arr"],[574,21,422,23],[574,24,422,26,"bytesToHex"],[574,34,422,36],[574,35,422,37,"hex"],[574,38,422,40],[574,39,422,41],[574,42,422,44,"hex"],[574,45,422,47],[575,8,423,8],[575,12,423,12,"str"],[575,15,423,15],[575,16,423,16,"length"],[575,22,423,22],[575,27,423,27],[575,30,423,30],[575,32,424,12],[575,38,424,18],[575,42,424,22,"Error"],[575,47,424,27],[575,48,424,28],[575,51,424,31,"name"],[575,55,424,35],[575,79,424,59],[575,80,424,60],[576,8,425,8],[576,15,425,15],[576,19,425,19,"Signature"],[576,28,425,28],[576,29,425,29,"hexToNumber"],[576,40,425,40],[576,41,425,41,"str"],[576,44,425,44],[576,45,425,45,"slice"],[576,50,425,50],[576,51,425,51],[576,52,425,52],[576,54,425,54],[576,56,425,56],[576,57,425,57],[576,58,425,58],[576,60,425,60,"hexToNumber"],[576,71,425,71],[576,72,425,72,"str"],[576,75,425,75],[576,76,425,76,"slice"],[576,81,425,81],[576,82,425,82],[576,84,425,84],[576,86,425,86],[576,89,425,89],[576,90,425,90],[576,91,425,91],[576,92,425,92],[577,6,426,4],[578,4,426,5],[579,6,426,5,"key"],[579,9,426,5],[580,6,426,5,"value"],[580,11,426,5],[580,13,427,4],[580,22,427,11,"fromDER"],[580,29,427,18,"fromDER"],[580,30,427,19,"hex"],[580,33,427,22],[580,35,427,24],[581,8,428,8],[581,12,428,14,"arr"],[581,15,428,17],[581,18,428,20,"isUint8a"],[581,26,428,28],[581,27,428,29,"hex"],[581,30,428,32],[581,31,428,33],[582,8,429,8],[582,12,429,12],[582,19,429,19,"hex"],[582,22,429,22],[582,27,429,27],[582,35,429,35],[582,39,429,39],[582,40,429,40,"arr"],[582,43,429,43],[582,45,430,12],[582,51,430,18],[582,55,430,22,"TypeError"],[582,64,430,31],[582,65,430,32],[582,115,430,82],[582,116,430,83],[583,8,431,8],[583,12,431,8,"_parseDERSignature"],[583,30,431,8],[583,33,431,25,"parseDERSignature"],[583,50,431,42],[583,51,431,43,"arr"],[583,54,431,46],[583,57,431,49,"hex"],[583,60,431,52],[583,63,431,55,"hexToBytes"],[583,73,431,65],[583,74,431,66,"hex"],[583,77,431,69],[583,78,431,70],[583,79,431,71],[584,10,431,16,"r"],[584,11,431,17],[584,14,431,17,"_parseDERSignature"],[584,32,431,17],[584,33,431,16,"r"],[584,34,431,17],[585,10,431,19,"s"],[585,11,431,20],[585,14,431,20,"_parseDERSignature"],[585,32,431,20],[585,33,431,19,"s"],[585,34,431,20],[586,8,432,8],[586,15,432,15],[586,19,432,19,"Signature"],[586,28,432,28],[586,29,432,29,"r"],[586,30,432,30],[586,32,432,32,"s"],[586,33,432,33],[586,34,432,34],[587,6,433,4],[588,4,433,5],[589,6,433,5,"key"],[589,9,433,5],[590,6,433,5,"value"],[590,11,433,5],[590,13,434,4],[590,22,434,11,"fromHex"],[590,29,434,18,"fromHex"],[590,30,434,19,"hex"],[590,33,434,22],[590,35,434,24],[591,8,435,8],[591,15,435,15],[591,19,435,19],[591,20,435,20,"fromDER"],[591,27,435,27],[591,28,435,28,"hex"],[591,31,435,31],[591,32,435,32],[592,6,436,4],[593,4,436,5],[594,2,436,5],[595,2,477,0,"exports"],[595,9,477,7],[595,10,477,8,"Signature"],[595,19,477,17],[595,22,477,20,"Signature"],[595,31,477,29],[596,2,478,0],[596,11,478,9,"concatBytes"],[596,22,478,20,"concatBytes"],[596,23,478,20],[596,25,478,32],[597,4,478,32],[597,13,478,32,"_len"],[597,17,478,32],[597,20,478,32,"arguments"],[597,29,478,32],[597,30,478,32,"length"],[597,36,478,32],[597,38,478,24,"arrays"],[597,44,478,30],[597,51,478,30,"Array"],[597,56,478,30],[597,57,478,30,"_len"],[597,61,478,30],[597,64,478,30,"_key"],[597,68,478,30],[597,74,478,30,"_key"],[597,78,478,30],[597,81,478,30,"_len"],[597,85,478,30],[597,87,478,30,"_key"],[597,91,478,30],[598,6,478,24,"arrays"],[598,12,478,30],[598,13,478,30,"_key"],[598,17,478,30],[598,21,478,30,"arguments"],[598,30,478,30],[598,31,478,30,"_key"],[598,35,478,30],[599,4,478,30],[600,4,479,4],[600,8,479,8],[600,9,479,9,"arrays"],[600,15,479,15],[600,16,479,16,"every"],[600,21,479,21],[600,22,479,22,"isUint8a"],[600,30,479,30],[600,31,479,31],[600,33,480,8],[600,39,480,14],[600,43,480,18,"Error"],[600,48,480,23],[600,49,480,24],[600,75,480,50],[600,76,480,51],[601,4,481,4],[601,8,481,8,"arrays"],[601,14,481,14],[601,15,481,15,"length"],[601,21,481,21],[601,26,481,26],[601,27,481,27],[601,29,482,8],[601,36,482,15,"arrays"],[601,42,482,21],[601,43,482,22],[601,44,482,23],[601,45,482,24],[602,4,483,4],[602,8,483,10,"length"],[602,14,483,16],[602,17,483,19,"arrays"],[602,23,483,25],[602,24,483,26,"reduce"],[602,30,483,32],[602,31,483,33],[602,41,483,34,"a"],[602,42,483,35],[602,44,483,37,"arr"],[602,47,483,40],[603,6,483,40],[603,13,483,45,"a"],[603,14,483,46],[603,17,483,49,"arr"],[603,20,483,52],[603,21,483,53,"length"],[603,27,483,59],[604,4,483,59],[604,7,483,61],[604,8,483,62],[604,9,483,63],[605,4,484,4],[605,8,484,10,"result"],[605,14,484,16],[605,17,484,19],[605,21,484,23,"Uint8Array"],[605,31,484,33],[605,32,484,34,"length"],[605,38,484,40],[605,39,484,41],[606,4,485,4],[606,9,485,9],[606,13,485,13,"i"],[606,14,485,14],[606,17,485,17],[606,18,485,18],[606,20,485,20,"pad"],[606,23,485,23],[606,26,485,26],[606,27,485,27],[606,29,485,29,"i"],[606,30,485,30],[606,33,485,33,"arrays"],[606,39,485,39],[606,40,485,40,"length"],[606,46,485,46],[606,48,485,48,"i"],[606,49,485,49],[606,51,485,51],[606,53,485,53],[607,6,486,8],[607,10,486,14,"arr"],[607,13,486,17],[607,16,486,20,"arrays"],[607,22,486,26],[607,23,486,27,"i"],[607,24,486,28],[607,25,486,29],[608,6,487,8,"result"],[608,12,487,14],[608,13,487,15,"set"],[608,16,487,18],[608,17,487,19,"arr"],[608,20,487,22],[608,22,487,24,"pad"],[608,25,487,27],[608,26,487,28],[609,6,488,8,"pad"],[609,9,488,11],[609,13,488,15,"arr"],[609,16,488,18],[609,17,488,19,"length"],[609,23,488,25],[610,4,489,4],[611,4,490,4],[611,11,490,11,"result"],[611,17,490,17],[612,2,491,0],[613,2,492,0],[613,11,492,9,"isUint8a"],[613,19,492,17,"isUint8a"],[613,20,492,18,"bytes"],[613,25,492,23],[613,27,492,25],[614,4,493,4],[614,11,493,11,"bytes"],[614,16,493,16],[614,28,493,28,"Uint8Array"],[614,38,493,38],[615,2,494,0],[616,2,495,0],[616,6,495,6,"hexes"],[616,11,495,11],[616,14,495,14,"Array"],[616,19,495,19],[616,20,495,20,"from"],[616,24,495,24],[616,25,495,25],[617,4,495,27,"length"],[617,10,495,33],[617,12,495,35],[618,2,495,39],[618,3,495,40],[618,5,495,42],[618,15,495,43,"v"],[618,16,495,44],[618,18,495,46,"i"],[618,19,495,47],[619,4,495,47],[619,11,495,52,"i"],[619,12,495,53],[619,13,495,54,"toString"],[619,21,495,62],[619,22,495,63],[619,24,495,65],[619,25,495,66],[619,26,495,67,"padStart"],[619,34,495,75],[619,35,495,76],[619,36,495,77],[619,38,495,79],[619,41,495,82],[619,42,495,83],[620,2,495,83],[620,4,495,84],[621,2,496,0],[621,11,496,9,"bytesToHex"],[621,21,496,19,"bytesToHex"],[621,22,496,20,"uint8a"],[621,28,496,26],[621,30,496,28],[622,4,497,4],[622,8,497,8],[622,10,497,10,"uint8a"],[622,16,497,16],[622,28,497,28,"Uint8Array"],[622,38,497,38],[622,39,497,39],[622,41,498,8],[622,47,498,14],[622,51,498,18,"Error"],[622,56,498,23],[622,57,498,24],[622,78,498,45],[622,79,498,46],[623,4,499,4],[623,8,499,8,"hex"],[623,11,499,11],[623,14,499,14],[623,16,499,16],[624,4,500,4],[624,9,500,9],[624,13,500,13,"i"],[624,14,500,14],[624,17,500,17],[624,18,500,18],[624,20,500,20,"i"],[624,21,500,21],[624,24,500,24,"uint8a"],[624,30,500,30],[624,31,500,31,"length"],[624,37,500,37],[624,39,500,39,"i"],[624,40,500,40],[624,42,500,42],[624,44,500,44],[625,6,501,8,"hex"],[625,9,501,11],[625,13,501,15,"hexes"],[625,18,501,20],[625,19,501,21,"uint8a"],[625,25,501,27],[625,26,501,28,"i"],[625,27,501,29],[625,28,501,30],[625,29,501,31],[626,4,502,4],[627,4,503,4],[627,11,503,11,"hex"],[627,14,503,14],[628,2,504,0],[629,2,505,0],[629,11,505,9,"numTo32bStr"],[629,22,505,20,"numTo32bStr"],[629,23,505,21,"num"],[629,26,505,24],[629,28,505,26],[630,4,506,4],[630,8,506,8,"num"],[630,11,506,11],[630,14,506,14,"POW_2_256"],[630,23,506,23],[630,25,507,8],[630,31,507,14],[630,35,507,18,"Error"],[630,40,507,23],[630,41,507,24],[630,66,507,49],[630,67,507,50],[631,4,508,4],[631,11,508,11,"num"],[631,14,508,14],[631,15,508,15,"toString"],[631,23,508,23],[631,24,508,24],[631,26,508,26],[631,27,508,27],[631,28,508,28,"padStart"],[631,36,508,36],[631,37,508,37],[631,39,508,39],[631,41,508,41],[631,44,508,44],[631,45,508,45],[632,2,509,0],[633,2,510,0],[633,11,510,9,"numTo32b"],[633,19,510,17,"numTo32b"],[633,20,510,18,"num"],[633,23,510,21],[633,25,510,23],[634,4,511,4],[634,11,511,11,"hexToBytes"],[634,21,511,21],[634,22,511,22,"numTo32bStr"],[634,33,511,33],[634,34,511,34,"num"],[634,37,511,37],[634,38,511,38],[634,39,511,39],[635,2,512,0],[636,2,513,0],[636,11,513,9,"numberToHexUnpadded"],[636,30,513,28,"numberToHexUnpadded"],[636,31,513,29,"num"],[636,34,513,32],[636,36,513,34],[637,4,514,4],[637,8,514,10,"hex"],[637,11,514,13],[637,14,514,16,"num"],[637,17,514,19],[637,18,514,20,"toString"],[637,26,514,28],[637,27,514,29],[637,29,514,31],[637,30,514,32],[638,4,515,4],[638,11,515,11,"hex"],[638,14,515,14],[638,15,515,15,"length"],[638,21,515,21],[638,24,515,24],[638,25,515,25],[638,28,515,28],[638,32,515,32,"hex"],[638,35,515,35],[638,37,515,37],[638,40,515,40,"hex"],[638,43,515,43],[639,2,516,0],[640,2,517,0],[640,11,517,9,"hexToNumber"],[640,22,517,20,"hexToNumber"],[640,23,517,21,"hex"],[640,26,517,24],[640,28,517,26],[641,4,518,4],[641,8,518,8],[641,15,518,15,"hex"],[641,18,518,18],[641,23,518,23],[641,31,518,31],[641,33,518,33],[642,6,519,8],[642,12,519,14],[642,16,519,18,"TypeError"],[642,25,519,27],[642,26,519,28],[642,62,519,64],[642,65,519,67],[642,72,519,74,"hex"],[642,75,519,77],[642,76,519,78],[643,4,520,4],[644,4,521,4],[644,11,521,11,"BigInt"],[644,17,521,17],[644,18,521,18],[644,23,521,23,"hex"],[644,26,521,26],[644,28,521,28],[644,29,521,29],[645,2,522,0],[646,2,523,0],[646,11,523,9,"hexToBytes"],[646,21,523,19,"hexToBytes"],[646,22,523,20,"hex"],[646,25,523,23],[646,27,523,25],[647,4,524,4],[647,8,524,8],[647,15,524,15,"hex"],[647,18,524,18],[647,23,524,23],[647,31,524,31],[647,33,524,33],[648,6,525,8],[648,12,525,14],[648,16,525,18,"TypeError"],[648,25,525,27],[648,26,525,28],[648,61,525,63],[648,64,525,66],[648,71,525,73,"hex"],[648,74,525,76],[648,75,525,77],[649,4,526,4],[650,4,527,4],[650,8,527,8,"hex"],[650,11,527,11],[650,12,527,12,"length"],[650,18,527,18],[650,21,527,21],[650,22,527,22],[650,24,528,8],[650,30,528,14],[650,34,528,18,"Error"],[650,39,528,23],[650,40,528,24],[650,83,528,67],[650,86,528,70,"hex"],[650,89,528,73],[650,90,528,74,"length"],[650,96,528,80],[650,97,528,81],[651,4,529,4],[651,8,529,10,"array"],[651,13,529,15],[651,16,529,18],[651,20,529,22,"Uint8Array"],[651,30,529,32],[651,31,529,33,"hex"],[651,34,529,36],[651,35,529,37,"length"],[651,41,529,43],[651,44,529,46],[651,45,529,47],[651,46,529,48],[652,4,530,4],[652,9,530,9],[652,13,530,13,"i"],[652,14,530,14],[652,17,530,17],[652,18,530,18],[652,20,530,20,"i"],[652,21,530,21],[652,24,530,24,"array"],[652,29,530,29],[652,30,530,30,"length"],[652,36,530,36],[652,38,530,38,"i"],[652,39,530,39],[652,41,530,41],[652,43,530,43],[653,6,531,8],[653,10,531,14,"j"],[653,11,531,15],[653,14,531,18,"i"],[653,15,531,19],[653,18,531,22],[653,19,531,23],[654,6,532,8],[654,10,532,14,"hexByte"],[654,17,532,21],[654,20,532,24,"hex"],[654,23,532,27],[654,24,532,28,"slice"],[654,29,532,33],[654,30,532,34,"j"],[654,31,532,35],[654,33,532,37,"j"],[654,34,532,38],[654,37,532,41],[654,38,532,42],[654,39,532,43],[655,6,533,8],[655,10,533,14,"byte"],[655,14,533,18],[655,17,533,21,"Number"],[655,23,533,27],[655,24,533,28,"parseInt"],[655,32,533,36],[655,33,533,37,"hexByte"],[655,40,533,44],[655,42,533,46],[655,44,533,48],[655,45,533,49],[656,6,534,8],[656,10,534,12,"Number"],[656,16,534,18],[656,17,534,19,"isNaN"],[656,22,534,24],[656,23,534,25,"byte"],[656,27,534,29],[656,28,534,30],[656,32,534,34,"byte"],[656,36,534,38],[656,39,534,41],[656,40,534,42],[656,42,535,12],[656,48,535,18],[656,52,535,22,"Error"],[656,57,535,27],[656,58,535,28],[656,81,535,51],[656,82,535,52],[657,6,536,8,"array"],[657,11,536,13],[657,12,536,14,"i"],[657,13,536,15],[657,14,536,16],[657,17,536,19,"byte"],[657,21,536,23],[658,4,537,4],[659,4,538,4],[659,11,538,11,"array"],[659,16,538,16],[660,2,539,0],[661,2,540,0],[661,11,540,9,"bytesToNumber"],[661,24,540,22,"bytesToNumber"],[661,25,540,23,"bytes"],[661,30,540,28],[661,32,540,30],[662,4,541,4],[662,11,541,11,"hexToNumber"],[662,22,541,22],[662,23,541,23,"bytesToHex"],[662,33,541,33],[662,34,541,34,"bytes"],[662,39,541,39],[662,40,541,40],[662,41,541,41],[663,2,542,0],[664,2,543,0],[664,11,543,9,"ensureBytes"],[664,22,543,20,"ensureBytes"],[664,23,543,21,"hex"],[664,26,543,24],[664,28,543,26],[665,4,544,4],[665,11,544,11,"hex"],[665,14,544,14],[665,26,544,26,"Uint8Array"],[665,36,544,36],[665,39,544,39,"Uint8Array"],[665,49,544,49],[665,50,544,50,"from"],[665,54,544,54],[665,55,544,55,"hex"],[665,58,544,58],[665,59,544,59],[665,62,544,62,"hexToBytes"],[665,72,544,72],[665,73,544,73,"hex"],[665,76,544,76],[665,77,544,77],[666,2,545,0],[667,2,546,0],[667,11,546,9,"normalizeScalar"],[667,26,546,24,"normalizeScalar"],[667,27,546,25,"num"],[667,30,546,28],[667,32,546,30],[668,4,547,4],[668,8,547,8],[668,15,547,15,"num"],[668,18,547,18],[668,23,547,23],[668,31,547,31],[668,35,547,35,"Number"],[668,41,547,41],[668,42,547,42,"isSafeInteger"],[668,55,547,55],[668,56,547,56,"num"],[668,59,547,59],[668,60,547,60],[668,64,547,64,"num"],[668,67,547,67],[668,70,547,70],[668,71,547,71],[668,73,548,8],[668,80,548,15,"BigInt"],[668,86,548,21],[668,87,548,22,"num"],[668,90,548,25],[668,91,548,26],[669,4,549,4],[669,8,549,8],[669,15,549,15,"num"],[669,18,549,18],[669,23,549,23],[669,31,549,31],[669,35,549,35,"isWithinCurveOrder"],[669,53,549,53],[669,54,549,54,"num"],[669,57,549,57],[669,58,549,58],[669,60,550,8],[669,67,550,15,"num"],[669,70,550,18],[670,4,551,4],[670,10,551,10],[670,14,551,14,"TypeError"],[670,23,551,23],[670,24,551,24],[670,77,551,77],[670,78,551,78],[671,2,552,0],[672,2,553,0],[672,11,553,9,"mod"],[672,14,553,12,"mod"],[672,15,553,13,"a"],[672,16,553,14],[672,18,553,29],[673,4,553,29],[673,8,553,16,"b"],[673,9,553,17],[673,12,553,17,"arguments"],[673,21,553,17],[673,22,553,17,"length"],[673,28,553,17],[673,36,553,17,"arguments"],[673,45,553,17],[673,53,553,17,"undefined"],[673,62,553,17],[673,65,553,17,"arguments"],[673,74,553,17],[673,80,553,20,"CURVE"],[673,85,553,25],[673,86,553,26,"P"],[673,87,553,27],[674,4,554,4],[674,8,554,10,"result"],[674,14,554,16],[674,17,554,19,"a"],[674,18,554,20],[674,21,554,23,"b"],[674,22,554,24],[675,4,555,4],[675,11,555,11,"result"],[675,17,555,17],[675,21,555,21,"_0n"],[675,24,555,24],[675,27,555,27,"result"],[675,33,555,33],[675,36,555,36,"b"],[675,37,555,37],[675,40,555,40,"result"],[675,46,555,46],[676,2,556,0],[677,2,557,0],[677,11,557,9,"pow2"],[677,15,557,13,"pow2"],[677,16,557,14,"x"],[677,17,557,15],[677,19,557,17,"power"],[677,24,557,22],[677,26,557,24],[678,4,558,4],[678,8,558,12,"P"],[678,9,558,13],[678,12,558,18,"CURVE"],[678,17,558,23],[678,18,558,12,"P"],[678,19,558,13],[679,4,559,4],[679,8,559,8,"res"],[679,11,559,11],[679,14,559,14,"x"],[679,15,559,15],[680,4,560,4],[680,11,560,11,"power"],[680,16,560,16],[680,18,560,18],[680,21,560,21,"_0n"],[680,24,560,24],[680,26,560,26],[681,6,561,8,"res"],[681,9,561,11],[681,13,561,15,"res"],[681,16,561,18],[682,6,562,8,"res"],[682,9,562,11],[682,13,562,15,"P"],[682,14,562,16],[683,4,563,4],[684,4,564,4],[684,11,564,11,"res"],[684,14,564,14],[685,2,565,0],[686,2,566,0],[686,11,566,9,"sqrtMod"],[686,18,566,16,"sqrtMod"],[686,19,566,17,"x"],[686,20,566,18],[686,22,566,20],[687,4,567,4],[687,8,567,12,"P"],[687,9,567,13],[687,12,567,18,"CURVE"],[687,17,567,23],[687,18,567,12,"P"],[687,19,567,13],[688,4,568,4],[688,8,568,10,"_6n"],[688,11,568,13],[688,14,568,16,"BigInt"],[688,20,568,22],[688,21,568,23],[688,22,568,24],[688,23,568,25],[689,4,569,4],[689,8,569,10,"_11n"],[689,12,569,14],[689,15,569,17,"BigInt"],[689,21,569,23],[689,22,569,24],[689,24,569,26],[689,25,569,27],[690,4,570,4],[690,8,570,10,"_22n"],[690,12,570,14],[690,15,570,17,"BigInt"],[690,21,570,23],[690,22,570,24],[690,24,570,26],[690,25,570,27],[691,4,571,4],[691,8,571,10,"_23n"],[691,12,571,14],[691,15,571,17,"BigInt"],[691,21,571,23],[691,22,571,24],[691,24,571,26],[691,25,571,27],[692,4,572,4],[692,8,572,10,"_44n"],[692,12,572,14],[692,15,572,17,"BigInt"],[692,21,572,23],[692,22,572,24],[692,24,572,26],[692,25,572,27],[693,4,573,4],[693,8,573,10,"_88n"],[693,12,573,14],[693,15,573,17,"BigInt"],[693,21,573,23],[693,22,573,24],[693,24,573,26],[693,25,573,27],[694,4,574,4],[694,8,574,10,"b2"],[694,10,574,12],[694,13,574,16,"x"],[694,14,574,17],[694,17,574,20,"x"],[694,18,574,21],[694,21,574,24,"x"],[694,22,574,25],[694,25,574,29,"P"],[694,26,574,30],[695,4,575,4],[695,8,575,10,"b3"],[695,10,575,12],[695,13,575,16,"b2"],[695,15,575,18],[695,18,575,21,"b2"],[695,20,575,23],[695,23,575,26,"x"],[695,24,575,27],[695,27,575,31,"P"],[695,28,575,32],[696,4,576,4],[696,8,576,10,"b6"],[696,10,576,12],[696,13,576,16,"pow2"],[696,17,576,20],[696,18,576,21,"b3"],[696,20,576,23],[696,22,576,25,"_3n"],[696,25,576,28],[696,26,576,29],[696,29,576,32,"b3"],[696,31,576,34],[696,34,576,38,"P"],[696,35,576,39],[697,4,577,4],[697,8,577,10,"b9"],[697,10,577,12],[697,13,577,16,"pow2"],[697,17,577,20],[697,18,577,21,"b6"],[697,20,577,23],[697,22,577,25,"_3n"],[697,25,577,28],[697,26,577,29],[697,29,577,32,"b3"],[697,31,577,34],[697,34,577,38,"P"],[697,35,577,39],[698,4,578,4],[698,8,578,10,"b11"],[698,11,578,13],[698,14,578,17,"pow2"],[698,18,578,21],[698,19,578,22,"b9"],[698,21,578,24],[698,23,578,26,"_2n"],[698,26,578,29],[698,27,578,30],[698,30,578,33,"b2"],[698,32,578,35],[698,35,578,39,"P"],[698,36,578,40],[699,4,579,4],[699,8,579,10,"b22"],[699,11,579,13],[699,14,579,17,"pow2"],[699,18,579,21],[699,19,579,22,"b11"],[699,22,579,25],[699,24,579,27,"_11n"],[699,28,579,31],[699,29,579,32],[699,32,579,35,"b11"],[699,35,579,38],[699,38,579,42,"P"],[699,39,579,43],[700,4,580,4],[700,8,580,10,"b44"],[700,11,580,13],[700,14,580,17,"pow2"],[700,18,580,21],[700,19,580,22,"b22"],[700,22,580,25],[700,24,580,27,"_22n"],[700,28,580,31],[700,29,580,32],[700,32,580,35,"b22"],[700,35,580,38],[700,38,580,42,"P"],[700,39,580,43],[701,4,581,4],[701,8,581,10,"b88"],[701,11,581,13],[701,14,581,17,"pow2"],[701,18,581,21],[701,19,581,22,"b44"],[701,22,581,25],[701,24,581,27,"_44n"],[701,28,581,31],[701,29,581,32],[701,32,581,35,"b44"],[701,35,581,38],[701,38,581,42,"P"],[701,39,581,43],[702,4,582,4],[702,8,582,10,"b176"],[702,12,582,14],[702,15,582,18,"pow2"],[702,19,582,22],[702,20,582,23,"b88"],[702,23,582,26],[702,25,582,28,"_88n"],[702,29,582,32],[702,30,582,33],[702,33,582,36,"b88"],[702,36,582,39],[702,39,582,43,"P"],[702,40,582,44],[703,4,583,4],[703,8,583,10,"b220"],[703,12,583,14],[703,15,583,18,"pow2"],[703,19,583,22],[703,20,583,23,"b176"],[703,24,583,27],[703,26,583,29,"_44n"],[703,30,583,33],[703,31,583,34],[703,34,583,37,"b44"],[703,37,583,40],[703,40,583,44,"P"],[703,41,583,45],[704,4,584,4],[704,8,584,10,"b223"],[704,12,584,14],[704,15,584,18,"pow2"],[704,19,584,22],[704,20,584,23,"b220"],[704,24,584,27],[704,26,584,29,"_3n"],[704,29,584,32],[704,30,584,33],[704,33,584,36,"b3"],[704,35,584,38],[704,38,584,42,"P"],[704,39,584,43],[705,4,585,4],[705,8,585,10,"t1"],[705,10,585,12],[705,13,585,16,"pow2"],[705,17,585,20],[705,18,585,21,"b223"],[705,22,585,25],[705,24,585,27,"_23n"],[705,28,585,31],[705,29,585,32],[705,32,585,35,"b22"],[705,35,585,38],[705,38,585,42,"P"],[705,39,585,43],[706,4,586,4],[706,8,586,10,"t2"],[706,10,586,12],[706,13,586,16,"pow2"],[706,17,586,20],[706,18,586,21,"t1"],[706,20,586,23],[706,22,586,25,"_6n"],[706,25,586,28],[706,26,586,29],[706,29,586,32,"b2"],[706,31,586,34],[706,34,586,38,"P"],[706,35,586,39],[707,4,587,4],[707,11,587,11,"pow2"],[707,15,587,15],[707,16,587,16,"t2"],[707,18,587,18],[707,20,587,20,"_2n"],[707,23,587,23],[707,24,587,24],[708,2,588,0],[709,2,589,0],[709,11,589,9,"invert"],[709,17,589,15,"invert"],[709,18,589,16,"number"],[709,24,589,22],[709,26,589,42],[710,4,589,42],[710,8,589,24,"modulo"],[710,14,589,30],[710,17,589,30,"arguments"],[710,26,589,30],[710,27,589,30,"length"],[710,33,589,30],[710,41,589,30,"arguments"],[710,50,589,30],[710,58,589,30,"undefined"],[710,67,589,30],[710,70,589,30,"arguments"],[710,79,589,30],[710,85,589,33,"CURVE"],[710,90,589,38],[710,91,589,39,"P"],[710,92,589,40],[711,4,590,4],[711,8,590,8,"number"],[711,14,590,14],[711,19,590,19,"_0n"],[711,22,590,22],[711,26,590,26,"modulo"],[711,32,590,32],[711,36,590,36,"_0n"],[711,39,590,39],[711,41,590,41],[712,6,591,8],[712,12,591,14],[712,16,591,18,"Error"],[712,21,591,23],[712,22,591,24],[712,67,591,69,"number"],[712,73,591,75],[712,81,591,83,"modulo"],[712,87,591,89],[712,89,591,91],[712,90,591,92],[713,4,592,4],[714,4,593,4],[714,8,593,8,"a"],[714,9,593,9],[714,12,593,12,"mod"],[714,15,593,15],[714,16,593,16,"number"],[714,22,593,22],[714,24,593,24,"modulo"],[714,30,593,30],[714,31,593,31],[715,4,594,4],[715,8,594,8,"b"],[715,9,594,9],[715,12,594,12,"modulo"],[715,18,594,18],[716,4,595,4],[716,8,595,8,"x"],[716,9,595,9],[716,12,595,12,"_0n"],[716,15,595,15],[717,6,595,17,"y"],[717,7,595,18],[717,10,595,21,"_1n"],[717,13,595,24],[718,6,595,26,"u"],[718,7,595,27],[718,10,595,30,"_1n"],[718,13,595,33],[719,6,595,35,"v"],[719,7,595,36],[719,10,595,39,"_0n"],[719,13,595,42],[720,4,596,4],[720,11,596,11,"a"],[720,12,596,12],[720,17,596,17,"_0n"],[720,20,596,20],[720,22,596,22],[721,6,597,8],[721,10,597,14,"q"],[721,11,597,15],[721,14,597,18,"b"],[721,15,597,19],[721,18,597,22,"a"],[721,19,597,23],[722,6,598,8],[722,10,598,14,"r"],[722,11,598,15],[722,14,598,18,"b"],[722,15,598,19],[722,18,598,22,"a"],[722,19,598,23],[723,6,599,8],[723,10,599,14,"m"],[723,11,599,15],[723,14,599,18,"x"],[723,15,599,19],[723,18,599,22,"u"],[723,19,599,23],[723,22,599,26,"q"],[723,23,599,27],[724,6,600,8],[724,10,600,14,"n"],[724,11,600,15],[724,14,600,18,"y"],[724,15,600,19],[724,18,600,22,"v"],[724,19,600,23],[724,22,600,26,"q"],[724,23,600,27],[725,6,601,8,"b"],[725,7,601,9],[725,10,601,12,"a"],[725,11,601,13],[725,13,601,15,"a"],[725,14,601,16],[725,17,601,19,"r"],[725,18,601,20],[725,20,601,22,"x"],[725,21,601,23],[725,24,601,26,"u"],[725,25,601,27],[725,27,601,29,"y"],[725,28,601,30],[725,31,601,33,"v"],[725,32,601,34],[725,34,601,36,"u"],[725,35,601,37],[725,38,601,40,"m"],[725,39,601,41],[725,41,601,43,"v"],[725,42,601,44],[725,45,601,47,"n"],[725,46,601,48],[726,4,602,4],[727,4,603,4],[727,8,603,10,"gcd"],[727,11,603,13],[727,14,603,16,"b"],[727,15,603,17],[728,4,604,4],[728,8,604,8,"gcd"],[728,11,604,11],[728,16,604,16,"_1n"],[728,19,604,19],[728,21,605,8],[728,27,605,14],[728,31,605,18,"Error"],[728,36,605,23],[728,37,605,24],[728,61,605,48],[728,62,605,49],[729,4,606,4],[729,11,606,11,"mod"],[729,14,606,14],[729,15,606,15,"x"],[729,16,606,16],[729,18,606,18,"modulo"],[729,24,606,24],[729,25,606,25],[730,2,607,0],[731,2,608,0],[731,11,608,9,"invertBatch"],[731,22,608,20,"invertBatch"],[731,23,608,21,"nums"],[731,27,608,25],[731,29,608,40],[732,4,608,40],[732,8,608,27,"p"],[732,9,608,28],[732,12,608,28,"arguments"],[732,21,608,28],[732,22,608,28,"length"],[732,28,608,28],[732,36,608,28,"arguments"],[732,45,608,28],[732,53,608,28,"undefined"],[732,62,608,28],[732,65,608,28,"arguments"],[732,74,608,28],[732,80,608,31,"CURVE"],[732,85,608,36],[732,86,608,37,"P"],[732,87,608,38],[733,4,609,4],[733,8,609,10,"scratch"],[733,15,609,17],[733,18,609,20],[733,22,609,24,"Array"],[733,27,609,29],[733,28,609,30,"nums"],[733,32,609,34],[733,33,609,35,"length"],[733,39,609,41],[733,40,609,42],[734,4,610,4],[734,8,610,10,"lastMultiplied"],[734,22,610,24],[734,25,610,27,"nums"],[734,29,610,31],[734,30,610,32,"reduce"],[734,36,610,38],[734,37,610,39],[734,47,610,40,"acc"],[734,50,610,43],[734,52,610,45,"num"],[734,55,610,48],[734,57,610,50,"i"],[734,58,610,51],[734,60,610,56],[735,6,611,8],[735,10,611,12,"num"],[735,13,611,15],[735,18,611,20,"_0n"],[735,21,611,23],[735,23,612,12],[735,30,612,19,"acc"],[735,33,612,22],[736,6,613,8,"scratch"],[736,13,613,15],[736,14,613,16,"i"],[736,15,613,17],[736,16,613,18],[736,19,613,21,"acc"],[736,22,613,24],[737,6,614,8],[737,13,614,15,"mod"],[737,16,614,18],[737,17,614,19,"acc"],[737,20,614,22],[737,23,614,25,"num"],[737,26,614,28],[737,28,614,30,"p"],[737,29,614,31],[737,30,614,32],[738,4,615,4],[738,5,615,5],[738,7,615,7,"_1n"],[738,10,615,10],[738,11,615,11],[739,4,616,4],[739,8,616,10,"inverted"],[739,16,616,18],[739,19,616,21,"invert"],[739,25,616,27],[739,26,616,28,"lastMultiplied"],[739,40,616,42],[739,42,616,44,"p"],[739,43,616,45],[739,44,616,46],[740,4,617,4,"nums"],[740,8,617,8],[740,9,617,9,"reduceRight"],[740,20,617,20],[740,21,617,21],[740,31,617,22,"acc"],[740,34,617,25],[740,36,617,27,"num"],[740,39,617,30],[740,41,617,32,"i"],[740,42,617,33],[740,44,617,38],[741,6,618,8],[741,10,618,12,"num"],[741,13,618,15],[741,18,618,20,"_0n"],[741,21,618,23],[741,23,619,12],[741,30,619,19,"acc"],[741,33,619,22],[742,6,620,8,"scratch"],[742,13,620,15],[742,14,620,16,"i"],[742,15,620,17],[742,16,620,18],[742,19,620,21,"mod"],[742,22,620,24],[742,23,620,25,"acc"],[742,26,620,28],[742,29,620,31,"scratch"],[742,36,620,38],[742,37,620,39,"i"],[742,38,620,40],[742,39,620,41],[742,41,620,43,"p"],[742,42,620,44],[742,43,620,45],[743,6,621,8],[743,13,621,15,"mod"],[743,16,621,18],[743,17,621,19,"acc"],[743,20,621,22],[743,23,621,25,"num"],[743,26,621,28],[743,28,621,30,"p"],[743,29,621,31],[743,30,621,32],[744,4,622,4],[744,5,622,5],[744,7,622,7,"inverted"],[744,15,622,15],[744,16,622,16],[745,4,623,4],[745,11,623,11,"scratch"],[745,18,623,18],[746,2,624,0],[747,2,625,0],[747,6,625,6,"divNearest"],[747,16,625,16],[747,19,625,19],[747,28,625,6,"divNearest"],[747,38,625,16,"divNearest"],[747,39,625,20,"a"],[747,40,625,21],[747,42,625,23,"b"],[747,43,625,24],[748,4,625,24],[748,11,625,29],[748,12,625,30,"a"],[748,13,625,31],[748,16,625,34,"b"],[748,17,625,35],[748,20,625,38,"_2n"],[748,23,625,41],[748,27,625,45,"b"],[748,28,625,46],[749,2,625,46],[750,2,626,0],[750,6,626,6,"POW_2_128"],[750,15,626,15],[750,18,626,18,"_2n"],[750,21,626,21],[750,25,626,25,"BigInt"],[750,31,626,31],[750,32,626,32],[750,35,626,35],[750,36,626,36],[751,2,627,0],[751,11,627,9,"splitScalarEndo"],[751,26,627,24,"splitScalarEndo"],[751,27,627,25,"k"],[751,28,627,26],[751,30,627,28],[752,4,628,4],[752,8,628,12,"n"],[752,9,628,13],[752,12,628,18,"CURVE"],[752,17,628,23],[752,18,628,12,"n"],[752,19,628,13],[753,4,629,4],[753,8,629,10,"a1"],[753,10,629,12],[753,13,629,15,"BigInt"],[753,19,629,21],[753,20,629,22],[753,56,629,58],[753,57,629,59],[754,4,630,4],[754,8,630,10,"b1"],[754,10,630,12],[754,13,630,15],[754,14,630,16,"_1n"],[754,17,630,19],[754,20,630,22,"BigInt"],[754,26,630,28],[754,27,630,29],[754,63,630,65],[754,64,630,66],[755,4,631,4],[755,8,631,10,"a2"],[755,10,631,12],[755,13,631,15,"BigInt"],[755,19,631,21],[755,20,631,22],[755,57,631,59],[755,58,631,60],[756,4,632,4],[756,8,632,10,"b2"],[756,10,632,12],[756,13,632,15,"a1"],[756,15,632,17],[757,4,633,4],[757,8,633,10,"c1"],[757,10,633,12],[757,13,633,15,"divNearest"],[757,23,633,25],[757,24,633,26,"b2"],[757,26,633,28],[757,29,633,31,"k"],[757,30,633,32],[757,32,633,34,"n"],[757,33,633,35],[757,34,633,36],[758,4,634,4],[758,8,634,10,"c2"],[758,10,634,12],[758,13,634,15,"divNearest"],[758,23,634,25],[758,24,634,26],[758,25,634,27,"b1"],[758,27,634,29],[758,30,634,32,"k"],[758,31,634,33],[758,33,634,35,"n"],[758,34,634,36],[758,35,634,37],[759,4,635,4],[759,8,635,8,"k1"],[759,10,635,10],[759,13,635,13,"mod"],[759,16,635,16],[759,17,635,17,"k"],[759,18,635,18],[759,21,635,21,"c1"],[759,23,635,23],[759,26,635,26,"a1"],[759,28,635,28],[759,31,635,31,"c2"],[759,33,635,33],[759,36,635,36,"a2"],[759,38,635,38],[759,40,635,40,"n"],[759,41,635,41],[759,42,635,42],[760,4,636,4],[760,8,636,8,"k2"],[760,10,636,10],[760,13,636,13,"mod"],[760,16,636,16],[760,17,636,17],[760,18,636,18,"c1"],[760,20,636,20],[760,23,636,23,"b1"],[760,25,636,25],[760,28,636,28,"c2"],[760,30,636,30],[760,33,636,33,"b2"],[760,35,636,35],[760,37,636,37,"n"],[760,38,636,38],[760,39,636,39],[761,4,637,4],[761,8,637,10,"k1neg"],[761,13,637,15],[761,16,637,18,"k1"],[761,18,637,20],[761,21,637,23,"POW_2_128"],[761,30,637,32],[762,4,638,4],[762,8,638,10,"k2neg"],[762,13,638,15],[762,16,638,18,"k2"],[762,18,638,20],[762,21,638,23,"POW_2_128"],[762,30,638,32],[763,4,639,4],[763,8,639,8,"k1neg"],[763,13,639,13],[763,15,640,8,"k1"],[763,17,640,10],[763,20,640,13,"n"],[763,21,640,14],[763,24,640,17,"k1"],[763,26,640,19],[764,4,641,4],[764,8,641,8,"k2neg"],[764,13,641,13],[764,15,642,8,"k2"],[764,17,642,10],[764,20,642,13,"n"],[764,21,642,14],[764,24,642,17,"k2"],[764,26,642,19],[765,4,643,4],[765,8,643,8,"k1"],[765,10,643,10],[765,13,643,13,"POW_2_128"],[765,22,643,22],[765,26,643,26,"k2"],[765,28,643,28],[765,31,643,31,"POW_2_128"],[765,40,643,40],[765,42,643,42],[766,6,644,8],[766,12,644,14],[766,16,644,18,"Error"],[766,21,644,23],[766,22,644,24],[766,64,644,66],[766,67,644,69,"k"],[766,68,644,70],[766,69,644,71],[767,4,645,4],[768,4,646,4],[768,11,646,11],[769,6,646,13,"k1neg"],[769,11,646,18],[769,13,646,13,"k1neg"],[769,18,646,18],[770,6,646,20,"k1"],[770,8,646,22],[770,10,646,20,"k1"],[770,12,646,22],[771,6,646,24,"k2neg"],[771,11,646,29],[771,13,646,24,"k2neg"],[771,18,646,29],[772,6,646,31,"k2"],[772,8,646,33],[772,10,646,31,"k2"],[773,4,646,34],[773,5,646,35],[774,2,647,0],[775,2,648,0],[775,11,648,9,"truncateHash"],[775,23,648,21,"truncateHash"],[775,24,648,22,"hash"],[775,28,648,26],[775,30,648,28],[776,4,649,4],[776,8,649,12,"n"],[776,9,649,13],[776,12,649,18,"CURVE"],[776,17,649,23],[776,18,649,12,"n"],[776,19,649,13],[777,4,650,4],[777,8,650,10,"byteLength"],[777,18,650,20],[777,21,650,23,"hash"],[777,25,650,27],[777,26,650,28,"length"],[777,32,650,34],[778,4,651,4],[778,8,651,10,"delta"],[778,13,651,15],[778,16,651,18,"byteLength"],[778,26,651,28],[778,29,651,31],[778,30,651,32],[778,33,651,35],[778,36,651,38],[779,4,652,4],[779,8,652,8,"h"],[779,9,652,9],[779,12,652,12,"bytesToNumber"],[779,25,652,25],[779,26,652,26,"hash"],[779,30,652,30],[779,31,652,31],[780,4,653,4],[780,8,653,8,"delta"],[780,13,653,13],[780,16,653,16],[780,17,653,17],[780,19,654,8,"h"],[780,20,654,9],[780,23,654,12,"h"],[780,24,654,13],[780,28,654,17,"BigInt"],[780,34,654,23],[780,35,654,24,"delta"],[780,40,654,29],[780,41,654,30],[781,4,655,4],[781,8,655,8,"h"],[781,9,655,9],[781,13,655,13,"n"],[781,14,655,14],[781,16,656,8,"h"],[781,17,656,9],[781,21,656,13,"n"],[781,22,656,14],[782,4,657,4],[782,11,657,11,"h"],[782,12,657,12],[783,2,658,0],[784,2,658,1],[784,6,659,6,"HmacDrbg"],[784,14,659,14],[785,4,660,4],[785,13,660,4,"HmacDrbg"],[785,22,660,4],[785,24,660,18],[786,6,660,18,"_classCallCheck"],[786,21,660,18],[786,28,660,18,"HmacDrbg"],[786,36,660,18],[787,6,661,8],[787,10,661,12],[787,11,661,13,"v"],[787,12,661,14],[787,15,661,17],[787,19,661,21,"Uint8Array"],[787,29,661,31],[787,30,661,32],[787,32,661,34],[787,33,661,35],[787,34,661,36,"fill"],[787,38,661,40],[787,39,661,41],[787,40,661,42],[787,41,661,43],[788,6,662,8],[788,10,662,12],[788,11,662,13,"k"],[788,12,662,14],[788,15,662,17],[788,19,662,21,"Uint8Array"],[788,29,662,31],[788,30,662,32],[788,32,662,34],[788,33,662,35],[788,34,662,36,"fill"],[788,38,662,40],[788,39,662,41],[788,40,662,42],[788,41,662,43],[789,6,663,8],[789,10,663,12],[789,11,663,13,"counter"],[789,18,663,20],[789,21,663,23],[789,22,663,24],[790,4,664,4],[791,4,664,5],[791,11,664,5,"_createClass"],[791,23,664,5],[791,24,664,5,"HmacDrbg"],[791,32,664,5],[792,6,664,5,"key"],[792,9,664,5],[793,6,664,5,"value"],[793,11,664,5],[793,13,665,4],[793,22,665,4,"hmac"],[793,26,665,8,"hmac"],[793,27,665,8],[793,29,665,20],[794,8,665,20],[794,12,665,20,"_exports$utils"],[794,26,665,20],[795,8,665,20],[795,17,665,20,"_len2"],[795,22,665,20],[795,25,665,20,"arguments"],[795,34,665,20],[795,35,665,20,"length"],[795,41,665,20],[795,43,665,12,"values"],[795,49,665,18],[795,56,665,18,"Array"],[795,61,665,18],[795,62,665,18,"_len2"],[795,67,665,18],[795,70,665,18,"_key2"],[795,75,665,18],[795,81,665,18,"_key2"],[795,86,665,18],[795,89,665,18,"_len2"],[795,94,665,18],[795,96,665,18,"_key2"],[795,101,665,18],[796,10,665,12,"values"],[796,16,665,18],[796,17,665,18,"_key2"],[796,22,665,18],[796,26,665,18,"arguments"],[796,35,665,18],[796,36,665,18,"_key2"],[796,41,665,18],[797,8,665,18],[798,8,666,8],[798,15,666,15],[798,16,666,15,"_exports$utils"],[798,30,666,15],[798,33,666,15,"exports"],[798,40,666,22],[798,41,666,23,"utils"],[798,46,666,28],[798,48,666,29,"hmacSha256"],[798,58,666,39],[798,59,666,39,"apply"],[798,64,666,39],[798,65,666,39,"_exports$utils"],[798,79,666,39],[798,82,666,40],[798,86,666,44],[798,87,666,45,"k"],[798,88,666,46],[798,90,666,46,"concat"],[798,96,666,46],[798,97,666,51,"values"],[798,103,666,57],[798,105,666,58],[799,6,667,4],[800,4,667,5],[801,6,667,5,"key"],[801,9,667,5],[802,6,667,5,"value"],[802,11,667,5],[802,13,668,4],[802,22,668,4,"hmacSync"],[802,30,668,12,"hmacSync"],[802,31,668,12],[802,33,668,24],[803,8,668,24],[803,12,668,24,"_exports$utils2"],[803,27,668,24],[804,8,669,8],[804,12,669,12],[804,19,669,19,"exports"],[804,26,669,26],[804,27,669,27,"utils"],[804,32,669,32],[804,33,669,33,"hmacSha256Sync"],[804,47,669,47],[804,52,669,52],[804,62,669,62],[804,64,670,12],[804,70,670,18],[804,74,670,22,"Error"],[804,79,670,27],[804,80,670,28],[804,135,670,83],[804,136,670,84],[805,8,670,85],[805,17,670,85,"_len3"],[805,22,670,85],[805,25,670,85,"arguments"],[805,34,670,85],[805,35,670,85,"length"],[805,41,670,85],[805,43,668,16,"values"],[805,49,668,22],[805,56,668,22,"Array"],[805,61,668,22],[805,62,668,22,"_len3"],[805,67,668,22],[805,70,668,22,"_key3"],[805,75,668,22],[805,81,668,22,"_key3"],[805,86,668,22],[805,89,668,22,"_len3"],[805,94,668,22],[805,96,668,22,"_key3"],[805,101,668,22],[806,10,668,16,"values"],[806,16,668,22],[806,17,668,22,"_key3"],[806,22,668,22],[806,26,668,22,"arguments"],[806,35,668,22],[806,36,668,22,"_key3"],[806,41,668,22],[807,8,668,22],[808,8,671,8],[808,12,671,14,"res"],[808,15,671,17],[808,18,671,20],[808,19,671,20,"_exports$utils2"],[808,34,671,20],[808,37,671,20,"exports"],[808,44,671,27],[808,45,671,28,"utils"],[808,50,671,33],[808,52,671,34,"hmacSha256Sync"],[808,66,671,48],[808,67,671,48,"apply"],[808,72,671,48],[808,73,671,48,"_exports$utils2"],[808,88,671,48],[808,91,671,49],[808,95,671,53],[808,96,671,54,"k"],[808,97,671,55],[808,99,671,55,"concat"],[808,105,671,55],[808,106,671,60,"values"],[808,112,671,66],[808,114,671,67],[809,8,672,8],[809,12,672,12,"res"],[809,15,672,15],[809,27,672,27,"Promise"],[809,34,672,34],[809,36,673,12],[809,42,673,18],[809,46,673,22,"Error"],[809,51,673,27],[809,52,673,28],[809,105,673,81],[809,106,673,82],[810,8,674,8],[810,15,674,15,"res"],[810,18,674,18],[811,6,675,4],[812,4,675,5],[813,6,675,5,"key"],[813,9,675,5],[814,6,675,5,"value"],[814,11,675,5],[814,13,676,4],[814,22,676,4,"incr"],[814,26,676,8,"incr"],[814,27,676,8],[814,29,676,11],[815,8,677,8],[815,12,677,12],[815,16,677,16],[815,17,677,17,"counter"],[815,24,677,24],[815,28,677,28],[815,32,677,32],[815,34,677,34],[816,10,678,12],[816,16,678,18],[816,20,678,22,"Error"],[816,25,678,27],[816,26,678,28],[816,77,678,79],[816,78,678,80],[817,8,679,8],[818,8,680,8],[818,12,680,12],[818,13,680,13,"counter"],[818,20,680,20],[818,24,680,24],[818,25,680,25],[819,6,681,4],[820,4,681,5],[821,6,681,5,"key"],[821,9,681,5],[822,6,681,5,"value"],[822,11,681,5],[823,8,681,5],[823,12,681,5,"_reseed"],[823,19,681,5],[823,22,681,5,"_asyncToGenerator"],[823,39,681,5],[823,40,682,4],[823,53,682,42],[824,10,682,42],[824,14,682,17,"seed"],[824,18,682,21],[824,21,682,21,"arguments"],[824,30,682,21],[824,31,682,21,"length"],[824,37,682,21],[824,45,682,21,"arguments"],[824,54,682,21],[824,62,682,21,"undefined"],[824,71,682,21],[824,74,682,21,"arguments"],[824,83,682,21],[824,89,682,24],[824,93,682,28,"Uint8Array"],[824,103,682,38],[824,104,682,39],[824,105,682,40],[825,10,683,8],[825,14,683,12],[825,15,683,13,"k"],[825,16,683,14],[825,25,683,23],[825,29,683,27],[825,30,683,28,"hmac"],[825,34,683,32],[825,35,683,33],[825,39,683,37],[825,40,683,38,"v"],[825,41,683,39],[825,43,683,41,"Uint8Array"],[825,53,683,51],[825,54,683,52,"from"],[825,58,683,56],[825,59,683,57],[825,60,683,58],[825,64,683,62],[825,65,683,63],[825,66,683,64],[825,68,683,66,"seed"],[825,72,683,70],[825,73,683,71],[826,10,684,8],[826,14,684,12],[826,15,684,13,"v"],[826,16,684,14],[826,25,684,23],[826,29,684,27],[826,30,684,28,"hmac"],[826,34,684,32],[826,35,684,33],[826,39,684,37],[826,40,684,38,"v"],[826,41,684,39],[826,42,684,40],[827,10,685,8],[827,14,685,12,"seed"],[827,18,685,16],[827,19,685,17,"length"],[827,25,685,23],[827,30,685,28],[827,31,685,29],[827,33,686,12],[828,10,687,8],[828,14,687,12],[828,15,687,13,"k"],[828,16,687,14],[828,25,687,23],[828,29,687,27],[828,30,687,28,"hmac"],[828,34,687,32],[828,35,687,33],[828,39,687,37],[828,40,687,38,"v"],[828,41,687,39],[828,43,687,41,"Uint8Array"],[828,53,687,51],[828,54,687,52,"from"],[828,58,687,56],[828,59,687,57],[828,60,687,58],[828,64,687,62],[828,65,687,63],[828,66,687,64],[828,68,687,66,"seed"],[828,72,687,70],[828,73,687,71],[829,10,688,8],[829,14,688,12],[829,15,688,13,"v"],[829,16,688,14],[829,25,688,23],[829,29,688,27],[829,30,688,28,"hmac"],[829,34,688,32],[829,35,688,33],[829,39,688,37],[829,40,688,38,"v"],[829,41,688,39],[829,42,688,40],[830,8,689,4],[830,9,689,5],[831,8,689,5],[831,17,682,10,"reseed"],[831,23,682,16,"reseed"],[831,24,682,16],[832,10,682,16],[832,17,682,16,"_reseed"],[832,24,682,16],[832,25,682,16,"apply"],[832,30,682,16],[832,37,682,16,"arguments"],[832,46,682,16],[833,8,682,16],[834,8,682,16],[834,15,682,10,"reseed"],[834,21,682,16],[835,6,682,16],[836,4,682,16],[837,6,682,16,"key"],[837,9,682,16],[838,6,682,16,"value"],[838,11,682,16],[838,13,690,4],[838,22,690,4,"reseedSync"],[838,32,690,14,"reseedSync"],[838,33,690,14],[838,35,690,40],[839,8,690,40],[839,12,690,15,"seed"],[839,16,690,19],[839,19,690,19,"arguments"],[839,28,690,19],[839,29,690,19,"length"],[839,35,690,19],[839,43,690,19,"arguments"],[839,52,690,19],[839,60,690,19,"undefined"],[839,69,690,19],[839,72,690,19,"arguments"],[839,81,690,19],[839,87,690,22],[839,91,690,26,"Uint8Array"],[839,101,690,36],[839,102,690,37],[839,103,690,38],[840,8,691,8],[840,12,691,12],[840,13,691,13,"k"],[840,14,691,14],[840,17,691,17],[840,21,691,21],[840,22,691,22,"hmacSync"],[840,30,691,30],[840,31,691,31],[840,35,691,35],[840,36,691,36,"v"],[840,37,691,37],[840,39,691,39,"Uint8Array"],[840,49,691,49],[840,50,691,50,"from"],[840,54,691,54],[840,55,691,55],[840,56,691,56],[840,60,691,60],[840,61,691,61],[840,62,691,62],[840,64,691,64,"seed"],[840,68,691,68],[840,69,691,69],[841,8,692,8],[841,12,692,12],[841,13,692,13,"v"],[841,14,692,14],[841,17,692,17],[841,21,692,21],[841,22,692,22,"hmacSync"],[841,30,692,30],[841,31,692,31],[841,35,692,35],[841,36,692,36,"v"],[841,37,692,37],[841,38,692,38],[842,8,693,8],[842,12,693,12,"seed"],[842,16,693,16],[842,17,693,17,"length"],[842,23,693,23],[842,28,693,28],[842,29,693,29],[842,31,694,12],[843,8,695,8],[843,12,695,12],[843,13,695,13,"k"],[843,14,695,14],[843,17,695,17],[843,21,695,21],[843,22,695,22,"hmacSync"],[843,30,695,30],[843,31,695,31],[843,35,695,35],[843,36,695,36,"v"],[843,37,695,37],[843,39,695,39,"Uint8Array"],[843,49,695,49],[843,50,695,50,"from"],[843,54,695,54],[843,55,695,55],[843,56,695,56],[843,60,695,60],[843,61,695,61],[843,62,695,62],[843,64,695,64,"seed"],[843,68,695,68],[843,69,695,69],[844,8,696,8],[844,12,696,12],[844,13,696,13,"v"],[844,14,696,14],[844,17,696,17],[844,21,696,21],[844,22,696,22,"hmacSync"],[844,30,696,30],[844,31,696,31],[844,35,696,35],[844,36,696,36,"v"],[844,37,696,37],[844,38,696,38],[845,6,697,4],[846,4,697,5],[847,6,697,5,"key"],[847,9,697,5],[848,6,697,5,"value"],[848,11,697,5],[849,8,697,5],[849,12,697,5,"_generate"],[849,21,697,5],[849,24,697,5,"_asyncToGenerator"],[849,41,697,5],[849,42,698,4],[849,55,698,21],[850,10,699,8],[850,14,699,12],[850,15,699,13,"incr"],[850,19,699,17],[850,20,699,18],[850,21,699,19],[851,10,700,8],[851,14,700,12],[851,15,700,13,"v"],[851,16,700,14],[851,25,700,23],[851,29,700,27],[851,30,700,28,"hmac"],[851,34,700,32],[851,35,700,33],[851,39,700,37],[851,40,700,38,"v"],[851,41,700,39],[851,42,700,40],[852,10,701,8],[852,17,701,15],[852,21,701,19],[852,22,701,20,"v"],[852,23,701,21],[853,8,702,4],[853,9,702,5],[854,8,702,5],[854,17,698,10,"generate"],[854,25,698,18,"generate"],[854,26,698,18],[855,10,698,18],[855,17,698,18,"_generate"],[855,26,698,18],[855,27,698,18,"apply"],[855,32,698,18],[855,39,698,18,"arguments"],[855,48,698,18],[856,8,698,18],[857,8,698,18],[857,15,698,10,"generate"],[857,23,698,18],[858,6,698,18],[859,4,698,18],[860,6,698,18,"key"],[860,9,698,18],[861,6,698,18,"value"],[861,11,698,18],[861,13,703,4],[861,22,703,4,"generateSync"],[861,34,703,16,"generateSync"],[861,35,703,16],[861,37,703,19],[862,8,704,8],[862,12,704,12],[862,13,704,13,"incr"],[862,17,704,17],[862,18,704,18],[862,19,704,19],[863,8,705,8],[863,12,705,12],[863,13,705,13,"v"],[863,14,705,14],[863,17,705,17],[863,21,705,21],[863,22,705,22,"hmacSync"],[863,30,705,30],[863,31,705,31],[863,35,705,35],[863,36,705,36,"v"],[863,37,705,37],[863,38,705,38],[864,8,706,8],[864,15,706,15],[864,19,706,19],[864,20,706,20,"v"],[864,21,706,21],[865,6,707,4],[866,4,707,5],[867,2,707,5],[868,2,709,0],[868,11,709,9,"isWithinCurveOrder"],[868,29,709,27,"isWithinCurveOrder"],[868,30,709,28,"num"],[868,33,709,31],[868,35,709,33],[869,4,710,4],[869,11,710,11,"_0n"],[869,14,710,14],[869,17,710,17,"num"],[869,20,710,20],[869,24,710,24,"num"],[869,27,710,27],[869,30,710,30,"CURVE"],[869,35,710,35],[869,36,710,36,"n"],[869,37,710,37],[870,2,711,0],[871,2,712,0],[871,11,712,9,"isValidFieldElement"],[871,30,712,28,"isValidFieldElement"],[871,31,712,29,"num"],[871,34,712,32],[871,36,712,34],[872,4,713,4],[872,11,713,11,"_0n"],[872,14,713,14],[872,17,713,17,"num"],[872,20,713,20],[872,24,713,24,"num"],[872,27,713,27],[872,30,713,30,"CURVE"],[872,35,713,35],[872,36,713,36,"P"],[872,37,713,37],[873,2,714,0],[874,2,715,0],[874,11,715,9,"kmdToSig"],[874,19,715,17,"kmdToSig"],[874,20,715,18,"kBytes"],[874,26,715,24],[874,28,715,26,"m"],[874,29,715,27],[874,31,715,29,"d"],[874,32,715,30],[874,34,715,32],[875,4,716,4],[875,8,716,10,"k"],[875,9,716,11],[875,12,716,14,"bytesToNumber"],[875,25,716,27],[875,26,716,28,"kBytes"],[875,32,716,34],[875,33,716,35],[876,4,717,4],[876,8,717,8],[876,9,717,9,"isWithinCurveOrder"],[876,27,717,27],[876,28,717,28,"k"],[876,29,717,29],[876,30,717,30],[876,32,718,8],[877,4,719,4],[877,8,719,12,"n"],[877,9,719,13],[877,12,719,18,"CURVE"],[877,17,719,23],[877,18,719,12,"n"],[877,19,719,13],[878,4,720,4],[878,8,720,10,"q"],[878,9,720,11],[878,12,720,14,"Point"],[878,17,720,19],[878,18,720,20,"BASE"],[878,22,720,24],[878,23,720,25,"multiply"],[878,31,720,33],[878,32,720,34,"k"],[878,33,720,35],[878,34,720,36],[879,4,721,4],[879,8,721,10,"r"],[879,9,721,11],[879,12,721,14,"mod"],[879,15,721,17],[879,16,721,18,"q"],[879,17,721,19],[879,18,721,20,"x"],[879,19,721,21],[879,21,721,23,"n"],[879,22,721,24],[879,23,721,25],[880,4,722,4],[880,8,722,8,"r"],[880,9,722,9],[880,14,722,14,"_0n"],[880,17,722,17],[880,19,723,8],[881,4,724,4],[881,8,724,10,"s"],[881,9,724,11],[881,12,724,14,"mod"],[881,15,724,17],[881,16,724,18,"invert"],[881,22,724,24],[881,23,724,25,"k"],[881,24,724,26],[881,26,724,28,"n"],[881,27,724,29],[881,28,724,30],[881,31,724,33,"mod"],[881,34,724,36],[881,35,724,37,"m"],[881,36,724,38],[881,39,724,41,"d"],[881,40,724,42],[881,43,724,45,"r"],[881,44,724,46],[881,46,724,48,"n"],[881,47,724,49],[881,48,724,50],[881,50,724,52,"n"],[881,51,724,53],[881,52,724,54],[882,4,725,4],[882,8,725,8,"s"],[882,9,725,9],[882,14,725,14,"_0n"],[882,17,725,17],[882,19,726,8],[883,4,727,4],[883,8,727,10,"sig"],[883,11,727,13],[883,14,727,16],[883,18,727,20,"Signature"],[883,27,727,29],[883,28,727,30,"r"],[883,29,727,31],[883,31,727,33,"s"],[883,32,727,34],[883,33,727,35],[884,4,728,4],[884,8,728,10,"recovery"],[884,16,728,18],[884,19,728,21],[884,20,728,22,"q"],[884,21,728,23],[884,22,728,24,"x"],[884,23,728,25],[884,28,728,30,"sig"],[884,31,728,33],[884,32,728,34,"r"],[884,33,728,35],[884,36,728,38],[884,37,728,39],[884,40,728,42],[884,41,728,43],[884,45,728,47,"Number"],[884,51,728,53],[884,52,728,54,"q"],[884,53,728,55],[884,54,728,56,"y"],[884,55,728,57],[884,58,728,60,"_1n"],[884,61,728,63],[884,62,728,64],[885,4,729,4],[885,11,729,11],[886,6,729,13,"sig"],[886,9,729,16],[886,11,729,13,"sig"],[886,14,729,16],[887,6,729,18,"recovery"],[887,14,729,26],[887,16,729,18,"recovery"],[888,4,729,27],[888,5,729,28],[889,2,730,0],[890,2,731,0],[890,11,731,9,"normalizePrivateKey"],[890,30,731,28,"normalizePrivateKey"],[890,31,731,29,"key"],[890,34,731,32],[890,36,731,34],[891,4,732,4],[891,8,732,8,"num"],[891,11,732,11],[892,4,733,4],[892,8,733,8],[892,15,733,15,"key"],[892,18,733,18],[892,23,733,23],[892,31,733,31],[892,33,733,33],[893,6,734,8,"num"],[893,9,734,11],[893,12,734,14,"key"],[893,15,734,17],[894,4,735,4],[894,5,735,5],[894,11,736,9],[894,15,736,13],[894,22,736,20,"key"],[894,25,736,23],[894,30,736,28],[894,38,736,36],[894,42,736,40,"Number"],[894,48,736,46],[894,49,736,47,"isSafeInteger"],[894,62,736,60],[894,63,736,61,"key"],[894,66,736,64],[894,67,736,65],[894,71,736,69,"key"],[894,74,736,72],[894,77,736,75],[894,78,736,76],[894,80,736,78],[895,6,737,8,"num"],[895,9,737,11],[895,12,737,14,"BigInt"],[895,18,737,20],[895,19,737,21,"key"],[895,22,737,24],[895,23,737,25],[896,4,738,4],[896,5,738,5],[896,11,739,9],[896,15,739,13],[896,22,739,20,"key"],[896,25,739,23],[896,30,739,28],[896,38,739,36],[896,40,739,38],[897,6,740,8],[897,10,740,12,"key"],[897,13,740,15],[897,14,740,16,"length"],[897,20,740,22],[897,25,740,27],[897,27,740,29],[897,29,741,12],[897,35,741,18],[897,39,741,22,"Error"],[897,44,741,27],[897,45,741,28],[897,79,741,62],[897,80,741,63],[898,6,742,8,"num"],[898,9,742,11],[898,12,742,14,"hexToNumber"],[898,23,742,25],[898,24,742,26,"key"],[898,27,742,29],[898,28,742,30],[899,4,743,4],[899,5,743,5],[899,11,744,9],[899,15,744,13,"isUint8a"],[899,23,744,21],[899,24,744,22,"key"],[899,27,744,25],[899,28,744,26],[899,30,744,28],[900,6,745,8],[900,10,745,12,"key"],[900,13,745,15],[900,14,745,16,"length"],[900,20,745,22],[900,25,745,27],[900,27,745,29],[900,29,746,12],[900,35,746,18],[900,39,746,22,"Error"],[900,44,746,27],[900,45,746,28],[900,79,746,62],[900,80,746,63],[901,6,747,8,"num"],[901,9,747,11],[901,12,747,14,"bytesToNumber"],[901,25,747,27],[901,26,747,28,"key"],[901,29,747,31],[901,30,747,32],[902,4,748,4],[902,5,748,5],[902,11,749,9],[903,6,750,8],[903,12,750,14],[903,16,750,18,"TypeError"],[903,25,750,27],[903,26,750,28],[903,54,750,56],[903,55,750,57],[904,4,751,4],[905,4,752,4],[905,8,752,8],[905,9,752,9,"isWithinCurveOrder"],[905,27,752,27],[905,28,752,28,"num"],[905,31,752,31],[905,32,752,32],[905,34,753,8],[905,40,753,14],[905,44,753,18,"Error"],[905,49,753,23],[905,50,753,24],[905,85,753,59],[905,86,753,60],[906,4,754,4],[906,11,754,11,"num"],[906,14,754,14],[907,2,755,0],[908,2,756,0],[908,11,756,9,"normalizePublicKey"],[908,29,756,27,"normalizePublicKey"],[908,30,756,28,"publicKey"],[908,39,756,37],[908,41,756,39],[909,4,757,4],[909,8,757,8,"publicKey"],[909,17,757,17],[909,29,757,29,"Point"],[909,34,757,34],[909,36,757,36],[910,6,758,8,"publicKey"],[910,15,758,17],[910,16,758,18,"assertValidity"],[910,30,758,32],[910,31,758,33],[910,32,758,34],[911,6,759,8],[911,13,759,15,"publicKey"],[911,22,759,24],[912,4,760,4],[912,5,760,5],[912,11,761,9],[913,6,762,8],[913,13,762,15,"Point"],[913,18,762,20],[913,19,762,21,"fromHex"],[913,26,762,28],[913,27,762,29,"publicKey"],[913,36,762,38],[913,37,762,39],[914,4,763,4],[915,2,764,0],[916,2,765,0],[916,11,765,9,"normalizeSignature"],[916,29,765,27,"normalizeSignature"],[916,30,765,28,"signature"],[916,39,765,37],[916,41,765,39],[917,4,766,4],[917,8,766,8,"signature"],[917,17,766,17],[917,29,766,29,"Signature"],[917,38,766,38],[917,40,766,40],[918,6,767,8,"signature"],[918,15,767,17],[918,16,767,18,"assertValidity"],[918,30,767,32],[918,31,767,33],[918,32,767,34],[919,6,768,8],[919,13,768,15,"signature"],[919,22,768,24],[920,4,769,4],[921,4,770,4],[921,8,770,8],[922,6,771,8],[922,13,771,15,"Signature"],[922,22,771,24],[922,23,771,25,"fromDER"],[922,30,771,32],[922,31,771,33,"signature"],[922,40,771,42],[922,41,771,43],[923,4,772,4],[923,5,772,5],[923,6,773,4],[923,13,773,11,"error"],[923,18,773,16],[923,20,773,18],[924,6,774,8],[924,13,774,15,"Signature"],[924,22,774,24],[924,23,774,25,"fromCompact"],[924,34,774,36],[924,35,774,37,"signature"],[924,44,774,46],[924,45,774,47],[925,4,775,4],[926,2,776,0],[927,2,777,0],[927,11,777,9,"getPublicKey"],[927,23,777,21,"getPublicKey"],[927,24,777,22,"privateKey"],[927,34,777,32],[927,36,777,56],[928,4,777,56],[928,8,777,34,"isCompressed"],[928,20,777,46],[928,23,777,46,"arguments"],[928,32,777,46],[928,33,777,46,"length"],[928,39,777,46],[928,47,777,46,"arguments"],[928,56,777,46],[928,64,777,46,"undefined"],[928,73,777,46],[928,76,777,46,"arguments"],[928,85,777,46],[928,91,777,49],[928,96,777,54],[929,4,778,4],[929,11,778,11,"Point"],[929,16,778,16],[929,17,778,17,"fromPrivateKey"],[929,31,778,31],[929,32,778,32,"privateKey"],[929,42,778,42],[929,43,778,43],[929,44,778,44,"toRawBytes"],[929,54,778,54],[929,55,778,55,"isCompressed"],[929,67,778,67],[929,68,778,68],[930,2,779,0],[931,2,780,0,"exports"],[931,9,780,7],[931,10,780,8,"getPublicKey"],[931,22,780,20],[931,25,780,23,"getPublicKey"],[931,37,780,35],[932,2,781,0],[932,11,781,9,"recoverPublicKey"],[932,27,781,25,"recoverPublicKey"],[932,28,781,26,"msgHash"],[932,35,781,33],[932,37,781,35,"signature"],[932,46,781,44],[932,48,781,46,"recovery"],[932,56,781,54],[932,58,781,78],[933,4,781,78],[933,8,781,56,"isCompressed"],[933,20,781,68],[933,23,781,68,"arguments"],[933,32,781,68],[933,33,781,68,"length"],[933,39,781,68],[933,47,781,68,"arguments"],[933,56,781,68],[933,64,781,68,"undefined"],[933,73,781,68],[933,76,781,68,"arguments"],[933,85,781,68],[933,91,781,71],[933,96,781,76],[934,4,782,4],[934,11,782,11,"Point"],[934,16,782,16],[934,17,782,17,"fromSignature"],[934,30,782,30],[934,31,782,31,"msgHash"],[934,38,782,38],[934,40,782,40,"signature"],[934,49,782,49],[934,51,782,51,"recovery"],[934,59,782,59],[934,60,782,60],[934,61,782,61,"toRawBytes"],[934,71,782,71],[934,72,782,72,"isCompressed"],[934,84,782,84],[934,85,782,85],[935,2,783,0],[936,2,784,0,"exports"],[936,9,784,7],[936,10,784,8,"recoverPublicKey"],[936,26,784,24],[936,29,784,27,"recoverPublicKey"],[936,45,784,43],[937,2,785,0],[937,11,785,9,"isPub"],[937,16,785,14,"isPub"],[937,17,785,15,"item"],[937,21,785,19],[937,23,785,21],[938,4,786,4],[938,8,786,10,"arr"],[938,11,786,13],[938,14,786,16,"isUint8a"],[938,22,786,24],[938,23,786,25,"item"],[938,27,786,29],[938,28,786,30],[939,4,787,4],[939,8,787,10,"str"],[939,11,787,13],[939,14,787,16],[939,21,787,23,"item"],[939,25,787,27],[939,30,787,32],[939,38,787,40],[940,4,788,4],[940,8,788,10,"len"],[940,11,788,13],[940,14,788,16],[940,15,788,17,"arr"],[940,18,788,20],[940,22,788,24,"str"],[940,25,788,27],[940,30,788,32,"item"],[940,34,788,36],[940,35,788,37,"length"],[940,41,788,43],[941,4,789,4],[941,8,789,8,"arr"],[941,11,789,11],[941,13,790,8],[941,20,790,15,"len"],[941,23,790,18],[941,28,790,23],[941,30,790,25],[941,34,790,29,"len"],[941,37,790,32],[941,42,790,37],[941,44,790,39],[942,4,791,4],[942,8,791,8,"str"],[942,11,791,11],[942,13,792,8],[942,20,792,15,"len"],[942,23,792,18],[942,28,792,23],[942,30,792,25],[942,34,792,29,"len"],[942,37,792,32],[942,42,792,37],[942,45,792,40],[943,4,793,4],[943,8,793,8,"item"],[943,12,793,12],[943,24,793,24,"Point"],[943,29,793,29],[943,31,794,8],[943,38,794,15],[943,42,794,19],[944,4,795,4],[944,11,795,11],[944,16,795,16],[945,2,796,0],[946,2,797,0],[946,11,797,9,"getSharedSecret"],[946,26,797,24,"getSharedSecret"],[946,27,797,25,"privateA"],[946,35,797,33],[946,37,797,35,"publicB"],[946,44,797,42],[946,46,797,66],[947,4,797,66],[947,8,797,44,"isCompressed"],[947,20,797,56],[947,23,797,56,"arguments"],[947,32,797,56],[947,33,797,56,"length"],[947,39,797,56],[947,47,797,56,"arguments"],[947,56,797,56],[947,64,797,56,"undefined"],[947,73,797,56],[947,76,797,56,"arguments"],[947,85,797,56],[947,91,797,59],[947,96,797,64],[948,4,798,4],[948,8,798,8,"isPub"],[948,13,798,13],[948,14,798,14,"privateA"],[948,22,798,22],[948,23,798,23],[948,25,799,8],[948,31,799,14],[948,35,799,18,"TypeError"],[948,44,799,27],[948,45,799,28],[948,93,799,76],[948,94,799,77],[949,4,800,4],[949,8,800,8],[949,9,800,9,"isPub"],[949,14,800,14],[949,15,800,15,"publicB"],[949,22,800,22],[949,23,800,23],[949,25,801,8],[949,31,801,14],[949,35,801,18,"TypeError"],[949,44,801,27],[949,45,801,28],[949,93,801,76],[949,94,801,77],[950,4,802,4],[950,8,802,10,"b"],[950,9,802,11],[950,12,802,14,"normalizePublicKey"],[950,30,802,32],[950,31,802,33,"publicB"],[950,38,802,40],[950,39,802,41],[951,4,803,4,"b"],[951,5,803,5],[951,6,803,6,"assertValidity"],[951,20,803,20],[951,21,803,21],[951,22,803,22],[952,4,804,4],[952,11,804,11,"b"],[952,12,804,12],[952,13,804,13,"multiply"],[952,21,804,21],[952,22,804,22,"normalizePrivateKey"],[952,41,804,41],[952,42,804,42,"privateA"],[952,50,804,50],[952,51,804,51],[952,52,804,52],[952,53,804,53,"toRawBytes"],[952,63,804,63],[952,64,804,64,"isCompressed"],[952,76,804,76],[952,77,804,77],[953,2,805,0],[954,2,806,0,"exports"],[954,9,806,7],[954,10,806,8,"getSharedSecret"],[954,25,806,23],[954,28,806,26,"getSharedSecret"],[954,43,806,41],[955,2,807,0],[955,11,807,9,"bits2int"],[955,19,807,17,"bits2int"],[955,20,807,18,"bytes"],[955,25,807,23],[955,27,807,25],[956,4,808,4],[956,8,808,10,"slice"],[956,13,808,15],[956,16,808,18,"bytes"],[956,21,808,23],[956,22,808,24,"length"],[956,28,808,30],[956,31,808,33],[956,33,808,35],[956,36,808,38,"bytes"],[956,41,808,43],[956,42,808,44,"slice"],[956,47,808,49],[956,48,808,50],[956,49,808,51],[956,51,808,53],[956,53,808,55],[956,54,808,56],[956,57,808,59,"bytes"],[956,62,808,64],[957,4,809,4],[957,11,809,11,"bytesToNumber"],[957,24,809,24],[957,25,809,25,"slice"],[957,30,809,30],[957,31,809,31],[958,2,810,0],[959,2,811,0],[959,11,811,9,"bits2octets"],[959,22,811,20,"bits2octets"],[959,23,811,21,"bytes"],[959,28,811,26],[959,30,811,28],[960,4,812,4],[960,8,812,10,"z1"],[960,10,812,12],[960,13,812,15,"bits2int"],[960,21,812,23],[960,22,812,24,"bytes"],[960,27,812,29],[960,28,812,30],[961,4,813,4],[961,8,813,10,"z2"],[961,10,813,12],[961,13,813,15,"mod"],[961,16,813,18],[961,17,813,19,"z1"],[961,19,813,21],[961,21,813,23,"CURVE"],[961,26,813,28],[961,27,813,29,"n"],[961,28,813,30],[961,29,813,31],[962,4,814,4],[962,11,814,11,"int2octets"],[962,21,814,21],[962,22,814,22,"z2"],[962,24,814,24],[962,27,814,27,"_0n"],[962,30,814,30],[962,33,814,33,"z1"],[962,35,814,35],[962,38,814,38,"z2"],[962,40,814,40],[962,41,814,41],[963,2,815,0],[964,2,816,0],[964,11,816,9,"int2octets"],[964,21,816,19,"int2octets"],[964,22,816,20,"num"],[964,25,816,23],[964,27,816,25],[965,4,817,4],[965,8,817,8],[965,15,817,15,"num"],[965,18,817,18],[965,23,817,23],[965,31,817,31],[965,33,818,8],[965,39,818,14],[965,43,818,18,"Error"],[965,48,818,23],[965,49,818,24],[965,66,818,41],[965,67,818,42],[966,4,819,4],[966,8,819,10,"hex"],[966,11,819,13],[966,14,819,16,"numTo32bStr"],[966,25,819,27],[966,26,819,28,"num"],[966,29,819,31],[966,30,819,32],[967,4,820,4],[967,11,820,11,"hexToBytes"],[967,21,820,21],[967,22,820,22,"hex"],[967,25,820,25],[967,26,820,26],[968,2,821,0],[969,2,822,0],[969,11,822,9,"initSigArgs"],[969,22,822,20,"initSigArgs"],[969,23,822,21,"msgHash"],[969,30,822,28],[969,32,822,30,"privateKey"],[969,42,822,40],[969,44,822,42,"extraEntropy"],[969,56,822,54],[969,58,822,56],[970,4,823,4],[970,8,823,8,"msgHash"],[970,15,823,15],[970,19,823,19],[970,23,823,23],[970,25,824,8],[970,31,824,14],[970,35,824,18,"Error"],[970,40,824,23],[970,41,824,24],[970,84,824,67,"msgHash"],[970,91,824,74],[970,94,824,77],[970,95,824,78],[971,4,825,4],[971,8,825,10,"h1"],[971,10,825,12],[971,13,825,15,"ensureBytes"],[971,24,825,26],[971,25,825,27,"msgHash"],[971,32,825,34],[971,33,825,35],[972,4,826,4],[972,8,826,10,"d"],[972,9,826,11],[972,12,826,14,"normalizePrivateKey"],[972,31,826,33],[972,32,826,34,"privateKey"],[972,42,826,44],[972,43,826,45],[973,4,827,4],[973,8,827,10,"seedArgs"],[973,16,827,18],[973,19,827,21],[973,20,827,22,"int2octets"],[973,30,827,32],[973,31,827,33,"d"],[973,32,827,34],[973,33,827,35],[973,35,827,37,"bits2octets"],[973,46,827,48],[973,47,827,49,"h1"],[973,49,827,51],[973,50,827,52],[973,51,827,53],[974,4,828,4],[974,8,828,8,"extraEntropy"],[974,20,828,20],[974,24,828,24],[974,28,828,28],[974,30,828,30],[975,6,829,8],[975,10,829,12,"extraEntropy"],[975,22,829,24],[975,27,829,29],[975,31,829,33],[975,33,830,12,"extraEntropy"],[975,45,830,24],[975,48,830,27,"exports"],[975,55,830,34],[975,56,830,35,"utils"],[975,61,830,40],[975,62,830,41,"randomBytes"],[975,73,830,52],[975,74,830,53],[975,76,830,55],[975,77,830,56],[976,6,831,8],[976,10,831,14,"e"],[976,11,831,15],[976,14,831,18,"ensureBytes"],[976,25,831,29],[976,26,831,30,"extraEntropy"],[976,38,831,42],[976,39,831,43],[977,6,832,8],[977,10,832,12,"e"],[977,11,832,13],[977,12,832,14,"length"],[977,18,832,20],[977,23,832,25],[977,25,832,27],[977,27,833,12],[977,33,833,18],[977,37,833,22,"Error"],[977,42,833,27],[977,43,833,28],[977,82,833,67],[977,83,833,68],[978,6,834,8,"seedArgs"],[978,14,834,16],[978,15,834,17,"push"],[978,19,834,21],[978,20,834,22,"e"],[978,21,834,23],[978,22,834,24],[979,4,835,4],[980,4,836,4],[980,8,836,10,"seed"],[980,12,836,14],[980,15,836,17,"concatBytes"],[980,26,836,28],[980,27,836,28,"apply"],[980,32,836,28],[980,41,836,32,"seedArgs"],[980,49,836,40],[980,50,836,41],[981,4,837,4],[981,8,837,10,"m"],[981,9,837,11],[981,12,837,14,"bits2int"],[981,20,837,22],[981,21,837,23,"h1"],[981,23,837,25],[981,24,837,26],[982,4,838,4],[982,11,838,11],[983,6,838,13,"seed"],[983,10,838,17],[983,12,838,13,"seed"],[983,16,838,17],[984,6,838,19,"m"],[984,7,838,20],[984,9,838,19,"m"],[984,10,838,20],[985,6,838,22,"d"],[985,7,838,23],[985,9,838,22,"d"],[986,4,838,24],[986,5,838,25],[987,2,839,0],[988,2,840,0],[988,11,840,9,"finalizeSig"],[988,22,840,20,"finalizeSig"],[988,23,840,21,"recSig"],[988,29,840,27],[988,31,840,29,"opts"],[988,35,840,33],[988,37,840,35],[989,4,841,4],[989,8,841,10,"sig"],[989,11,841,13],[989,14,841,28,"recSig"],[989,20,841,34],[989,21,841,10,"sig"],[989,24,841,13],[990,6,841,15,"recovery"],[990,14,841,23],[990,17,841,28,"recSig"],[990,23,841,34],[990,24,841,15,"recovery"],[990,32,841,23],[991,4,842,4],[991,8,842,4,"_Object$assign"],[991,22,842,4],[991,25,842,42,"Object"],[991,31,842,48],[991,32,842,49,"assign"],[991,38,842,55],[991,39,842,56],[992,8,842,58,"canonical"],[992,17,842,67],[992,19,842,69],[992,23,842,73],[993,8,842,75,"der"],[993,11,842,78],[993,13,842,80],[994,6,842,85],[994,7,842,86],[994,9,842,88,"opts"],[994,13,842,92],[994,14,842,93],[995,6,842,12,"canonical"],[995,15,842,21],[995,18,842,21,"_Object$assign"],[995,32,842,21],[995,33,842,12,"canonical"],[995,42,842,21],[996,6,842,23,"der"],[996,9,842,26],[996,12,842,26,"_Object$assign"],[996,26,842,26],[996,27,842,23,"der"],[996,30,842,26],[997,6,842,28,"recovered"],[997,15,842,37],[997,18,842,37,"_Object$assign"],[997,32,842,37],[997,33,842,28,"recovered"],[997,42,842,37],[998,4,843,4],[998,8,843,8,"canonical"],[998,17,843,17],[998,21,843,21,"sig"],[998,24,843,24],[998,25,843,25,"hasHighS"],[998,33,843,33],[998,34,843,34],[998,35,843,35],[998,37,843,37],[999,6,844,8,"sig"],[999,9,844,11],[999,12,844,14,"sig"],[999,15,844,17],[999,16,844,18,"normalizeS"],[999,26,844,28],[999,27,844,29],[999,28,844,30],[1000,6,845,8,"recovery"],[1000,14,845,16],[1000,18,845,20],[1000,19,845,21],[1001,4,846,4],[1002,4,847,4],[1002,8,847,10,"hashed"],[1002,14,847,16],[1002,17,847,19,"der"],[1002,20,847,22],[1002,23,847,25,"sig"],[1002,26,847,28],[1002,27,847,29,"toDERRawBytes"],[1002,40,847,42],[1002,41,847,43],[1002,42,847,44],[1002,45,847,47,"sig"],[1002,48,847,50],[1002,49,847,51,"toCompactRawBytes"],[1002,66,847,68],[1002,67,847,69],[1002,68,847,70],[1003,4,848,4],[1003,11,848,11,"recovered"],[1003,20,848,20],[1003,23,848,23],[1003,24,848,24,"hashed"],[1003,30,848,30],[1003,32,848,32,"recovery"],[1003,40,848,40],[1003,41,848,41],[1003,44,848,44,"hashed"],[1003,50,848,50],[1004,2,849,0],[1005,2,849,1],[1005,11,850,15,"sign"],[1005,15,850,19,"sign"],[1005,16,850,19,"_x"],[1005,18,850,19],[1005,20,850,19,"_x2"],[1005,23,850,19],[1006,4,850,19],[1006,11,850,19,"_sign"],[1006,16,850,19],[1006,17,850,19,"apply"],[1006,22,850,19],[1006,29,850,19,"arguments"],[1006,38,850,19],[1007,2,850,19],[1008,2,850,19],[1008,11,850,19,"_sign"],[1008,17,850,19],[1009,4,850,19,"_sign"],[1009,9,850,19],[1009,12,850,19,"_asyncToGenerator"],[1009,29,850,19],[1009,30,850,0],[1009,41,850,20,"msgHash"],[1009,48,850,27],[1009,50,850,29,"privKey"],[1009,57,850,36],[1009,59,850,49],[1010,6,850,49],[1010,10,850,38,"opts"],[1010,14,850,42],[1010,17,850,42,"arguments"],[1010,26,850,42],[1010,27,850,42,"length"],[1010,33,850,42],[1010,41,850,42,"arguments"],[1010,50,850,42],[1010,58,850,42,"undefined"],[1010,67,850,42],[1010,70,850,42,"arguments"],[1010,79,850,42],[1010,85,850,45],[1010,86,850,46],[1010,87,850,47],[1011,6,851,4],[1011,10,851,4,"_initSigArgs2"],[1011,23,851,4],[1011,26,851,27,"initSigArgs"],[1011,37,851,38],[1011,38,851,39,"msgHash"],[1011,45,851,46],[1011,47,851,48,"privKey"],[1011,54,851,55],[1011,56,851,57,"opts"],[1011,60,851,61],[1011,61,851,62,"extraEntropy"],[1011,73,851,74],[1011,74,851,75],[1012,8,851,12,"seed"],[1012,12,851,16],[1012,15,851,16,"_initSigArgs2"],[1012,28,851,16],[1012,29,851,12,"seed"],[1012,33,851,16],[1013,8,851,18,"m"],[1013,9,851,19],[1013,12,851,19,"_initSigArgs2"],[1013,25,851,19],[1013,26,851,18,"m"],[1013,27,851,19],[1014,8,851,21,"d"],[1014,9,851,22],[1014,12,851,22,"_initSigArgs2"],[1014,25,851,22],[1014,26,851,21,"d"],[1014,27,851,22],[1015,6,852,4],[1015,10,852,8,"sig"],[1015,13,852,11],[1016,6,853,4],[1016,10,853,10,"drbg"],[1016,14,853,14],[1016,17,853,17],[1016,21,853,21,"HmacDrbg"],[1016,29,853,29],[1016,30,853,30],[1016,31,853,31],[1017,6,854,4],[1017,12,854,10,"drbg"],[1017,16,854,14],[1017,17,854,15,"reseed"],[1017,23,854,21],[1017,24,854,22,"seed"],[1017,28,854,26],[1017,29,854,27],[1018,6,855,4],[1018,13,855,11],[1018,15,855,13,"sig"],[1018,18,855,16],[1018,21,855,19,"kmdToSig"],[1018,29,855,27],[1018,36,855,34,"drbg"],[1018,40,855,38],[1018,41,855,39,"generate"],[1018,49,855,47],[1018,50,855,48],[1018,51,855,49],[1018,53,855,51,"m"],[1018,54,855,52],[1018,56,855,54,"d"],[1018,57,855,55],[1018,58,855,56],[1018,59,855,57],[1018,61,856,8],[1018,67,856,14,"drbg"],[1018,71,856,18],[1018,72,856,19,"reseed"],[1018,78,856,25],[1018,79,856,26],[1018,80,856,27],[1019,6,857,4],[1019,13,857,11,"finalizeSig"],[1019,24,857,22],[1019,25,857,23,"sig"],[1019,28,857,26],[1019,30,857,28,"opts"],[1019,34,857,32],[1019,35,857,33],[1020,4,858,0],[1020,5,858,1],[1021,4,858,1],[1021,11,858,1,"_sign"],[1021,16,858,1],[1021,17,858,1,"apply"],[1021,22,858,1],[1021,29,858,1,"arguments"],[1021,38,858,1],[1022,2,858,1],[1023,2,859,0,"exports"],[1023,9,859,7],[1023,10,859,8,"sign"],[1023,14,859,12],[1023,17,859,15,"sign"],[1023,21,859,19],[1024,2,860,0],[1024,11,860,9,"signSync"],[1024,19,860,17,"signSync"],[1024,20,860,18,"msgHash"],[1024,27,860,25],[1024,29,860,27,"privKey"],[1024,36,860,34],[1024,38,860,47],[1025,4,860,47],[1025,8,860,36,"opts"],[1025,12,860,40],[1025,15,860,40,"arguments"],[1025,24,860,40],[1025,25,860,40,"length"],[1025,31,860,40],[1025,39,860,40,"arguments"],[1025,48,860,40],[1025,56,860,40,"undefined"],[1025,65,860,40],[1025,68,860,40,"arguments"],[1025,77,860,40],[1025,83,860,43],[1025,84,860,44],[1025,85,860,45],[1026,4,861,4],[1026,8,861,4,"_initSigArgs"],[1026,20,861,4],[1026,23,861,27,"initSigArgs"],[1026,34,861,38],[1026,35,861,39,"msgHash"],[1026,42,861,46],[1026,44,861,48,"privKey"],[1026,51,861,55],[1026,53,861,57,"opts"],[1026,57,861,61],[1026,58,861,62,"extraEntropy"],[1026,70,861,74],[1026,71,861,75],[1027,6,861,12,"seed"],[1027,10,861,16],[1027,13,861,16,"_initSigArgs"],[1027,25,861,16],[1027,26,861,12,"seed"],[1027,30,861,16],[1028,6,861,18,"m"],[1028,7,861,19],[1028,10,861,19,"_initSigArgs"],[1028,22,861,19],[1028,23,861,18,"m"],[1028,24,861,19],[1029,6,861,21,"d"],[1029,7,861,22],[1029,10,861,22,"_initSigArgs"],[1029,22,861,22],[1029,23,861,21,"d"],[1029,24,861,22],[1030,4,862,4],[1030,8,862,8,"sig"],[1030,11,862,11],[1031,4,863,4],[1031,8,863,10,"drbg"],[1031,12,863,14],[1031,15,863,17],[1031,19,863,21,"HmacDrbg"],[1031,27,863,29],[1031,28,863,30],[1031,29,863,31],[1032,4,864,4,"drbg"],[1032,8,864,8],[1032,9,864,9,"reseedSync"],[1032,19,864,19],[1032,20,864,20,"seed"],[1032,24,864,24],[1032,25,864,25],[1033,4,865,4],[1033,11,865,11],[1033,13,865,13,"sig"],[1033,16,865,16],[1033,19,865,19,"kmdToSig"],[1033,27,865,27],[1033,28,865,28,"drbg"],[1033,32,865,32],[1033,33,865,33,"generateSync"],[1033,45,865,45],[1033,46,865,46],[1033,47,865,47],[1033,49,865,49,"m"],[1033,50,865,50],[1033,52,865,52,"d"],[1033,53,865,53],[1033,54,865,54],[1033,55,865,55],[1033,57,866,8,"drbg"],[1033,61,866,12],[1033,62,866,13,"reseedSync"],[1033,72,866,23],[1033,73,866,24],[1033,74,866,25],[1034,4,867,4],[1034,11,867,11,"finalizeSig"],[1034,22,867,22],[1034,23,867,23,"sig"],[1034,26,867,26],[1034,28,867,28,"opts"],[1034,32,867,32],[1034,33,867,33],[1035,2,868,0],[1036,2,869,0,"exports"],[1036,9,869,7],[1036,10,869,8,"signSync"],[1036,18,869,16],[1036,21,869,19,"signSync"],[1036,29,869,27],[1037,2,870,0],[1037,6,870,6,"vopts"],[1037,11,870,11],[1037,14,870,14],[1038,4,870,16,"strict"],[1038,10,870,22],[1038,12,870,24],[1039,2,870,29],[1039,3,870,30],[1040,2,871,0],[1040,11,871,9,"verify"],[1040,17,871,15,"verify"],[1040,18,871,16,"signature"],[1040,27,871,25],[1040,29,871,27,"msgHash"],[1040,36,871,34],[1040,38,871,36,"publicKey"],[1040,47,871,45],[1040,49,871,61],[1041,4,871,61],[1041,8,871,47,"opts"],[1041,12,871,51],[1041,15,871,51,"arguments"],[1041,24,871,51],[1041,25,871,51,"length"],[1041,31,871,51],[1041,39,871,51,"arguments"],[1041,48,871,51],[1041,56,871,51,"undefined"],[1041,65,871,51],[1041,68,871,51,"arguments"],[1041,77,871,51],[1041,83,871,54,"vopts"],[1041,88,871,59],[1042,4,872,4],[1042,8,872,8,"sig"],[1042,11,872,11],[1043,4,873,4],[1043,8,873,8],[1044,6,874,8,"sig"],[1044,9,874,11],[1044,12,874,14,"normalizeSignature"],[1044,30,874,32],[1044,31,874,33,"signature"],[1044,40,874,42],[1044,41,874,43],[1045,6,875,8,"msgHash"],[1045,13,875,15],[1045,16,875,18,"ensureBytes"],[1045,27,875,29],[1045,28,875,30,"msgHash"],[1045,35,875,37],[1045,36,875,38],[1046,4,876,4],[1046,5,876,5],[1046,6,877,4],[1046,13,877,11,"error"],[1046,18,877,16],[1046,20,877,18],[1047,6,878,8],[1047,13,878,15],[1047,18,878,20],[1048,4,879,4],[1049,4,880,4],[1049,8,880,4,"_sig"],[1049,12,880,4],[1049,15,880,21,"sig"],[1049,18,880,24],[1050,6,880,12,"r"],[1050,7,880,13],[1050,10,880,13,"_sig"],[1050,14,880,13],[1050,15,880,12,"r"],[1050,16,880,13],[1051,6,880,15,"s"],[1051,7,880,16],[1051,10,880,16,"_sig"],[1051,14,880,16],[1051,15,880,15,"s"],[1051,16,880,16],[1052,4,881,4],[1052,8,881,8,"opts"],[1052,12,881,12],[1052,13,881,13,"strict"],[1052,19,881,19],[1052,23,881,23,"sig"],[1052,26,881,26],[1052,27,881,27,"hasHighS"],[1052,35,881,35],[1052,36,881,36],[1052,37,881,37],[1052,39,882,8],[1052,46,882,15],[1052,51,882,20],[1053,4,883,4],[1053,8,883,10,"h"],[1053,9,883,11],[1053,12,883,14,"truncateHash"],[1053,24,883,26],[1053,25,883,27,"msgHash"],[1053,32,883,34],[1053,33,883,35],[1054,4,884,4],[1054,8,884,8,"P"],[1054,9,884,9],[1055,4,885,4],[1055,8,885,8],[1056,6,886,8,"P"],[1056,7,886,9],[1056,10,886,12,"normalizePublicKey"],[1056,28,886,30],[1056,29,886,31,"publicKey"],[1056,38,886,40],[1056,39,886,41],[1057,4,887,4],[1057,5,887,5],[1057,6,888,4],[1057,13,888,11,"error"],[1057,18,888,16],[1057,20,888,18],[1058,6,889,8],[1058,13,889,15],[1058,18,889,20],[1059,4,890,4],[1060,4,891,4],[1060,8,891,12,"n"],[1060,9,891,13],[1060,12,891,18,"CURVE"],[1060,17,891,23],[1060,18,891,12,"n"],[1060,19,891,13],[1061,4,892,4],[1061,8,892,10,"sinv"],[1061,12,892,14],[1061,15,892,17,"invert"],[1061,21,892,23],[1061,22,892,24,"s"],[1061,23,892,25],[1061,25,892,27,"n"],[1061,26,892,28],[1061,27,892,29],[1062,4,893,4],[1062,8,893,10,"u1"],[1062,10,893,12],[1062,13,893,15,"mod"],[1062,16,893,18],[1062,17,893,19,"h"],[1062,18,893,20],[1062,21,893,23,"sinv"],[1062,25,893,27],[1062,27,893,29,"n"],[1062,28,893,30],[1062,29,893,31],[1063,4,894,4],[1063,8,894,10,"u2"],[1063,10,894,12],[1063,13,894,15,"mod"],[1063,16,894,18],[1063,17,894,19,"r"],[1063,18,894,20],[1063,21,894,23,"sinv"],[1063,25,894,27],[1063,27,894,29,"n"],[1063,28,894,30],[1063,29,894,31],[1064,4,895,4],[1064,8,895,10,"R"],[1064,9,895,11],[1064,12,895,14,"Point"],[1064,17,895,19],[1064,18,895,20,"BASE"],[1064,22,895,24],[1064,23,895,25,"multiplyAndAddUnsafe"],[1064,43,895,45],[1064,44,895,46,"P"],[1064,45,895,47],[1064,47,895,49,"u1"],[1064,49,895,51],[1064,51,895,53,"u2"],[1064,53,895,55],[1064,54,895,56],[1065,4,896,4],[1065,8,896,8],[1065,9,896,9,"R"],[1065,10,896,10],[1065,12,897,8],[1065,19,897,15],[1065,24,897,20],[1066,4,898,4],[1066,8,898,10,"v"],[1066,9,898,11],[1066,12,898,14,"mod"],[1066,15,898,17],[1066,16,898,18,"R"],[1066,17,898,19],[1066,18,898,20,"x"],[1066,19,898,21],[1066,21,898,23,"n"],[1066,22,898,24],[1066,23,898,25],[1067,4,899,4],[1067,11,899,11,"v"],[1067,12,899,12],[1067,17,899,17,"r"],[1067,18,899,18],[1068,2,900,0],[1069,2,901,0,"exports"],[1069,9,901,7],[1069,10,901,8,"verify"],[1069,16,901,14],[1069,19,901,17,"verify"],[1069,25,901,23],[1070,2,902,0],[1070,11,902,9,"finalizeSchnorrChallenge"],[1070,35,902,33,"finalizeSchnorrChallenge"],[1070,36,902,34,"ch"],[1070,38,902,36],[1070,40,902,38],[1071,4,903,4],[1071,11,903,11,"mod"],[1071,14,903,14],[1071,15,903,15,"bytesToNumber"],[1071,28,903,28],[1071,29,903,29,"ch"],[1071,31,903,31],[1071,32,903,32],[1071,34,903,34,"CURVE"],[1071,39,903,39],[1071,40,903,40,"n"],[1071,41,903,41],[1071,42,903,42],[1072,2,904,0],[1073,2,905,0],[1073,11,905,9,"hasEvenY"],[1073,19,905,17,"hasEvenY"],[1073,20,905,18,"point"],[1073,25,905,23],[1073,27,905,25],[1074,4,906,4],[1074,11,906,11],[1074,12,906,12,"point"],[1074,17,906,17],[1074,18,906,18,"y"],[1074,19,906,19],[1074,22,906,22,"_1n"],[1074,25,906,25],[1074,31,906,31,"_0n"],[1074,34,906,34],[1075,2,907,0],[1076,2,907,1],[1076,6,908,6,"SchnorrSignature"],[1076,22,908,22],[1077,4,909,4],[1077,13,909,4,"SchnorrSignature"],[1077,30,909,16,"r"],[1077,31,909,17],[1077,33,909,19,"s"],[1077,34,909,20],[1077,36,909,22],[1078,6,909,22,"_classCallCheck"],[1078,21,909,22],[1078,28,909,22,"SchnorrSignature"],[1078,44,909,22],[1079,6,910,8],[1079,10,910,12],[1079,11,910,13,"r"],[1079,12,910,14],[1079,15,910,17,"r"],[1079,16,910,18],[1080,6,911,8],[1080,10,911,12],[1080,11,911,13,"s"],[1080,12,911,14],[1080,15,911,17,"s"],[1080,16,911,18],[1081,6,912,8],[1081,10,912,12],[1081,11,912,13,"assertValidity"],[1081,25,912,27],[1081,26,912,28],[1081,27,912,29],[1082,4,913,4],[1083,4,913,5],[1083,11,913,5,"_createClass"],[1083,23,913,5],[1083,24,913,5,"SchnorrSignature"],[1083,40,913,5],[1084,6,913,5,"key"],[1084,9,913,5],[1085,6,913,5,"value"],[1085,11,913,5],[1085,13,922,4],[1085,22,922,4,"assertValidity"],[1085,36,922,18,"assertValidity"],[1085,37,922,18],[1085,39,922,21],[1086,8,923,8],[1086,12,923,16,"r"],[1086,13,923,17],[1086,16,923,25],[1086,20,923,29],[1086,21,923,16,"r"],[1086,22,923,17],[1087,10,923,19,"s"],[1087,11,923,20],[1087,14,923,25],[1087,18,923,29],[1087,19,923,19,"s"],[1087,20,923,20],[1088,8,924,8],[1088,12,924,12],[1088,13,924,13,"isValidFieldElement"],[1088,32,924,32],[1088,33,924,33,"r"],[1088,34,924,34],[1088,35,924,35],[1088,39,924,39],[1088,40,924,40,"isWithinCurveOrder"],[1088,58,924,58],[1088,59,924,59,"s"],[1088,60,924,60],[1088,61,924,61],[1088,63,925,12],[1088,69,925,18],[1088,73,925,22,"Error"],[1088,78,925,27],[1088,79,925,28],[1088,98,925,47],[1088,99,925,48],[1089,6,926,4],[1090,4,926,5],[1091,6,926,5,"key"],[1091,9,926,5],[1092,6,926,5,"value"],[1092,11,926,5],[1092,13,927,4],[1092,22,927,4,"toHex"],[1092,27,927,9,"toHex"],[1092,28,927,9],[1092,30,927,12],[1093,8,928,8],[1093,15,928,15,"numTo32bStr"],[1093,26,928,26],[1093,27,928,27],[1093,31,928,31],[1093,32,928,32,"r"],[1093,33,928,33],[1093,34,928,34],[1093,37,928,37,"numTo32bStr"],[1093,48,928,48],[1093,49,928,49],[1093,53,928,53],[1093,54,928,54,"s"],[1093,55,928,55],[1093,56,928,56],[1094,6,929,4],[1095,4,929,5],[1096,6,929,5,"key"],[1096,9,929,5],[1097,6,929,5,"value"],[1097,11,929,5],[1097,13,930,4],[1097,22,930,4,"toRawBytes"],[1097,32,930,14,"toRawBytes"],[1097,33,930,14],[1097,35,930,17],[1098,8,931,8],[1098,15,931,15,"hexToBytes"],[1098,25,931,25],[1098,26,931,26],[1098,30,931,30],[1098,31,931,31,"toHex"],[1098,36,931,36],[1098,37,931,37],[1098,38,931,38],[1098,39,931,39],[1099,6,932,4],[1100,4,932,5],[1101,6,932,5,"key"],[1101,9,932,5],[1102,6,932,5,"value"],[1102,11,932,5],[1102,13,914,4],[1102,22,914,11,"fromHex"],[1102,29,914,18,"fromHex"],[1102,30,914,19,"hex"],[1102,33,914,22],[1102,35,914,24],[1103,8,915,8],[1103,12,915,14,"bytes"],[1103,17,915,19],[1103,20,915,22,"ensureBytes"],[1103,31,915,33],[1103,32,915,34,"hex"],[1103,35,915,37],[1103,36,915,38],[1104,8,916,8],[1104,12,916,12,"bytes"],[1104,17,916,17],[1104,18,916,18,"length"],[1104,24,916,24],[1104,29,916,29],[1104,31,916,31],[1104,33,917,12],[1104,39,917,18],[1104,43,917,22,"TypeError"],[1104,52,917,31],[1104,53,917,32],[1104,105,917,84,"bytes"],[1104,110,917,89],[1104,111,917,90,"length"],[1104,117,917,96],[1104,119,917,98],[1104,120,917,99],[1105,8,918,8],[1105,12,918,14,"r"],[1105,13,918,15],[1105,16,918,18,"bytesToNumber"],[1105,29,918,31],[1105,30,918,32,"bytes"],[1105,35,918,37],[1105,36,918,38,"subarray"],[1105,44,918,46],[1105,45,918,47],[1105,46,918,48],[1105,48,918,50],[1105,50,918,52],[1105,51,918,53],[1105,52,918,54],[1106,8,919,8],[1106,12,919,14,"s"],[1106,13,919,15],[1106,16,919,18,"bytesToNumber"],[1106,29,919,31],[1106,30,919,32,"bytes"],[1106,35,919,37],[1106,36,919,38,"subarray"],[1106,44,919,46],[1106,45,919,47],[1106,47,919,49],[1106,49,919,51],[1106,51,919,53],[1106,52,919,54],[1106,53,919,55],[1107,8,920,8],[1107,15,920,15],[1107,19,920,19,"SchnorrSignature"],[1107,35,920,35],[1107,36,920,36,"r"],[1107,37,920,37],[1107,39,920,39,"s"],[1107,40,920,40],[1107,41,920,41],[1108,6,921,4],[1109,4,921,5],[1110,2,921,5],[1111,2,934,0],[1111,11,934,9,"schnorrGetPublicKey"],[1111,30,934,28,"schnorrGetPublicKey"],[1111,31,934,29,"privateKey"],[1111,41,934,39],[1111,43,934,41],[1112,4,935,4],[1112,11,935,11,"Point"],[1112,16,935,16],[1112,17,935,17,"fromPrivateKey"],[1112,31,935,31],[1112,32,935,32,"privateKey"],[1112,42,935,42],[1112,43,935,43],[1112,44,935,44,"toRawX"],[1112,50,935,50],[1112,51,935,51],[1112,52,935,52],[1113,2,936,0],[1114,2,937,0],[1114,11,937,9,"initSchnorrSigArgs"],[1114,29,937,27,"initSchnorrSigArgs"],[1114,30,937,28,"message"],[1114,37,937,35],[1114,39,937,37,"privateKey"],[1114,49,937,47],[1114,51,937,49,"auxRand"],[1114,58,937,56],[1114,60,937,58],[1115,4,938,4],[1115,8,938,8,"message"],[1115,15,938,15],[1115,19,938,19],[1115,23,938,23],[1115,25,939,8],[1115,31,939,14],[1115,35,939,18,"TypeError"],[1115,44,939,27],[1115,45,939,28],[1115,83,939,66,"message"],[1115,90,939,73],[1115,93,939,76],[1115,94,939,77],[1116,4,940,4],[1116,8,940,10,"m"],[1116,9,940,11],[1116,12,940,14,"ensureBytes"],[1116,23,940,25],[1116,24,940,26,"message"],[1116,31,940,33],[1116,32,940,34],[1117,4,941,4],[1117,8,941,10,"d0"],[1117,10,941,12],[1117,13,941,15,"normalizePrivateKey"],[1117,32,941,34],[1117,33,941,35,"privateKey"],[1117,43,941,45],[1117,44,941,46],[1118,4,942,4],[1118,8,942,10,"rand"],[1118,12,942,14],[1118,15,942,17,"ensureBytes"],[1118,26,942,28],[1118,27,942,29,"auxRand"],[1118,34,942,36],[1118,35,942,37],[1119,4,943,4],[1119,8,943,8,"rand"],[1119,12,943,12],[1119,13,943,13,"length"],[1119,19,943,19],[1119,24,943,24],[1119,26,943,26],[1119,28,944,8],[1119,34,944,14],[1119,38,944,18,"TypeError"],[1119,47,944,27],[1119,48,944,28],[1119,91,944,71],[1119,92,944,72],[1120,4,945,4],[1120,8,945,10,"P"],[1120,9,945,11],[1120,12,945,14,"Point"],[1120,17,945,19],[1120,18,945,20,"fromPrivateKey"],[1120,32,945,34],[1120,33,945,35,"d0"],[1120,35,945,37],[1120,36,945,38],[1121,4,946,4],[1121,8,946,10,"px"],[1121,10,946,12],[1121,13,946,15,"P"],[1121,14,946,16],[1121,15,946,17,"toRawX"],[1121,21,946,23],[1121,22,946,24],[1121,23,946,25],[1122,4,947,4],[1122,8,947,10,"d"],[1122,9,947,11],[1122,12,947,14,"hasEvenY"],[1122,20,947,22],[1122,21,947,23,"P"],[1122,22,947,24],[1122,23,947,25],[1122,26,947,28,"d0"],[1122,28,947,30],[1122,31,947,33,"CURVE"],[1122,36,947,38],[1122,37,947,39,"n"],[1122,38,947,40],[1122,41,947,43,"d0"],[1122,43,947,45],[1123,4,948,4],[1123,11,948,11],[1124,6,948,13,"m"],[1124,7,948,14],[1124,9,948,13,"m"],[1124,10,948,14],[1125,6,948,16,"P"],[1125,7,948,17],[1125,9,948,16,"P"],[1125,10,948,17],[1126,6,948,19,"px"],[1126,8,948,21],[1126,10,948,19,"px"],[1126,12,948,21],[1127,6,948,23,"d"],[1127,7,948,24],[1127,9,948,23,"d"],[1127,10,948,24],[1128,6,948,26,"rand"],[1128,10,948,30],[1128,12,948,26,"rand"],[1129,4,948,31],[1129,5,948,32],[1130,2,949,0],[1131,2,950,0],[1131,11,950,9,"initSchnorrNonce"],[1131,27,950,25,"initSchnorrNonce"],[1131,28,950,26,"d"],[1131,29,950,27],[1131,31,950,29,"t0h"],[1131,34,950,32],[1131,36,950,34],[1132,4,951,4],[1132,11,951,11,"numTo32b"],[1132,19,951,19],[1132,20,951,20,"d"],[1132,21,951,21],[1132,24,951,24,"bytesToNumber"],[1132,37,951,37],[1132,38,951,38,"t0h"],[1132,41,951,41],[1132,42,951,42],[1132,43,951,43],[1133,2,952,0],[1134,2,953,0],[1134,11,953,9,"finalizeSchnorrNonce"],[1134,31,953,29,"finalizeSchnorrNonce"],[1134,32,953,30,"k0h"],[1134,35,953,33],[1134,37,953,35],[1135,4,954,4],[1135,8,954,10,"k0"],[1135,10,954,12],[1135,13,954,15,"mod"],[1135,16,954,18],[1135,17,954,19,"bytesToNumber"],[1135,30,954,32],[1135,31,954,33,"k0h"],[1135,34,954,36],[1135,35,954,37],[1135,37,954,39,"CURVE"],[1135,42,954,44],[1135,43,954,45,"n"],[1135,44,954,46],[1135,45,954,47],[1136,4,955,4],[1136,8,955,8,"k0"],[1136,10,955,10],[1136,15,955,15,"_0n"],[1136,18,955,18],[1136,20,956,8],[1136,26,956,14],[1136,30,956,18,"Error"],[1136,35,956,23],[1136,36,956,24],[1136,83,956,71],[1136,84,956,72],[1137,4,957,4],[1137,8,957,10,"R"],[1137,9,957,11],[1137,12,957,14,"Point"],[1137,17,957,19],[1137,18,957,20,"fromPrivateKey"],[1137,32,957,34],[1137,33,957,35,"k0"],[1137,35,957,37],[1137,36,957,38],[1138,4,958,4],[1138,8,958,10,"rx"],[1138,10,958,12],[1138,13,958,15,"R"],[1138,14,958,16],[1138,15,958,17,"toRawX"],[1138,21,958,23],[1138,22,958,24],[1138,23,958,25],[1139,4,959,4],[1139,8,959,10,"k"],[1139,9,959,11],[1139,12,959,14,"hasEvenY"],[1139,20,959,22],[1139,21,959,23,"R"],[1139,22,959,24],[1139,23,959,25],[1139,26,959,28,"k0"],[1139,28,959,30],[1139,31,959,33,"CURVE"],[1139,36,959,38],[1139,37,959,39,"n"],[1139,38,959,40],[1139,41,959,43,"k0"],[1139,43,959,45],[1140,4,960,4],[1140,11,960,11],[1141,6,960,13,"R"],[1141,7,960,14],[1141,9,960,13,"R"],[1141,10,960,14],[1142,6,960,16,"rx"],[1142,8,960,18],[1142,10,960,16,"rx"],[1142,12,960,18],[1143,6,960,20,"k"],[1143,7,960,21],[1143,9,960,20,"k"],[1144,4,960,22],[1144,5,960,23],[1145,2,961,0],[1146,2,962,0],[1146,11,962,9,"finalizeSchnorrSig"],[1146,29,962,27,"finalizeSchnorrSig"],[1146,30,962,28,"R"],[1146,31,962,29],[1146,33,962,31,"k"],[1146,34,962,32],[1146,36,962,34,"e"],[1146,37,962,35],[1146,39,962,37,"d"],[1146,40,962,38],[1146,42,962,40],[1147,4,963,4],[1147,11,963,11],[1147,15,963,15,"SchnorrSignature"],[1147,31,963,31],[1147,32,963,32,"R"],[1147,33,963,33],[1147,34,963,34,"x"],[1147,35,963,35],[1147,37,963,37,"mod"],[1147,40,963,40],[1147,41,963,41,"k"],[1147,42,963,42],[1147,45,963,45,"e"],[1147,46,963,46],[1147,49,963,49,"d"],[1147,50,963,50],[1147,52,963,52,"CURVE"],[1147,57,963,57],[1147,58,963,58,"n"],[1147,59,963,59],[1147,60,963,60],[1147,61,963,61],[1147,62,963,62,"toRawBytes"],[1147,72,963,72],[1147,73,963,73],[1147,74,963,74],[1148,2,964,0],[1149,2,964,1],[1149,11,965,15,"schnorrSign"],[1149,22,965,26,"schnorrSign"],[1149,23,965,26,"_x3"],[1149,26,965,26],[1149,28,965,26,"_x4"],[1149,31,965,26],[1150,4,965,26],[1150,11,965,26,"_schnorrSign"],[1150,23,965,26],[1150,24,965,26,"apply"],[1150,29,965,26],[1150,36,965,26,"arguments"],[1150,45,965,26],[1151,2,965,26],[1152,2,965,26],[1152,11,965,26,"_schnorrSign"],[1152,24,965,26],[1153,4,965,26,"_schnorrSign"],[1153,16,965,26],[1153,19,965,26,"_asyncToGenerator"],[1153,36,965,26],[1153,37,965,0],[1153,48,965,27,"message"],[1153,55,965,34],[1153,57,965,36,"privateKey"],[1153,67,965,46],[1153,69,965,87],[1154,6,965,87],[1154,10,965,48,"auxRand"],[1154,17,965,55],[1154,20,965,55,"arguments"],[1154,29,965,55],[1154,30,965,55,"length"],[1154,36,965,55],[1154,44,965,55,"arguments"],[1154,53,965,55],[1154,61,965,55,"undefined"],[1154,70,965,55],[1154,73,965,55,"arguments"],[1154,82,965,55],[1154,88,965,58,"exports"],[1154,95,965,65],[1154,96,965,66,"utils"],[1154,101,965,71],[1154,102,965,72,"randomBytes"],[1154,113,965,83],[1154,114,965,84],[1154,115,965,85],[1155,6,966,4],[1155,10,966,4,"_initSchnorrSigArgs2"],[1155,30,966,4],[1155,33,966,31,"initSchnorrSigArgs"],[1155,51,966,49],[1155,52,966,50,"message"],[1155,59,966,57],[1155,61,966,59,"privateKey"],[1155,71,966,69],[1155,73,966,71,"auxRand"],[1155,80,966,78],[1155,81,966,79],[1156,8,966,12,"m"],[1156,9,966,13],[1156,12,966,13,"_initSchnorrSigArgs2"],[1156,32,966,13],[1156,33,966,12,"m"],[1156,34,966,13],[1157,8,966,15,"px"],[1157,10,966,17],[1157,13,966,17,"_initSchnorrSigArgs2"],[1157,33,966,17],[1157,34,966,15,"px"],[1157,36,966,17],[1158,8,966,19,"d"],[1158,9,966,20],[1158,12,966,20,"_initSchnorrSigArgs2"],[1158,32,966,20],[1158,33,966,19,"d"],[1158,34,966,20],[1159,8,966,22,"rand"],[1159,12,966,26],[1159,15,966,26,"_initSchnorrSigArgs2"],[1159,35,966,26],[1159,36,966,22,"rand"],[1159,40,966,26],[1160,6,967,4],[1160,10,967,10,"t"],[1160,11,967,11],[1160,14,967,14,"initSchnorrNonce"],[1160,30,967,30],[1160,31,967,31,"d"],[1160,32,967,32],[1160,40,967,40,"exports"],[1160,47,967,47],[1160,48,967,48,"utils"],[1160,53,967,53],[1160,54,967,54,"taggedHash"],[1160,64,967,64],[1160,65,967,65,"TAGS"],[1160,69,967,69],[1160,70,967,70,"aux"],[1160,73,967,73],[1160,75,967,75,"rand"],[1160,79,967,79],[1160,80,967,80],[1160,81,967,81],[1161,6,968,4],[1161,10,968,4,"_finalizeSchnorrNonce2"],[1161,32,968,4],[1161,35,968,25,"finalizeSchnorrNonce"],[1161,55,968,45],[1161,62,968,52,"exports"],[1161,69,968,59],[1161,70,968,60,"utils"],[1161,75,968,65],[1161,76,968,66,"taggedHash"],[1161,86,968,76],[1161,87,968,77,"TAGS"],[1161,91,968,81],[1161,92,968,82,"nonce"],[1161,97,968,87],[1161,99,968,89,"t"],[1161,100,968,90],[1161,102,968,92,"px"],[1161,104,968,94],[1161,106,968,96,"m"],[1161,107,968,97],[1161,108,968,98],[1161,109,968,99],[1162,8,968,12,"R"],[1162,9,968,13],[1162,12,968,13,"_finalizeSchnorrNonce2"],[1162,34,968,13],[1162,35,968,12,"R"],[1162,36,968,13],[1163,8,968,15,"rx"],[1163,10,968,17],[1163,13,968,17,"_finalizeSchnorrNonce2"],[1163,35,968,17],[1163,36,968,15,"rx"],[1163,38,968,17],[1164,8,968,19,"k"],[1164,9,968,20],[1164,12,968,20,"_finalizeSchnorrNonce2"],[1164,34,968,20],[1164,35,968,19,"k"],[1164,36,968,20],[1165,6,969,4],[1165,10,969,10,"e"],[1165,11,969,11],[1165,14,969,14,"finalizeSchnorrChallenge"],[1165,38,969,38],[1165,45,969,45,"exports"],[1165,52,969,52],[1165,53,969,53,"utils"],[1165,58,969,58],[1165,59,969,59,"taggedHash"],[1165,69,969,69],[1165,70,969,70,"TAGS"],[1165,74,969,74],[1165,75,969,75,"challenge"],[1165,84,969,84],[1165,86,969,86,"rx"],[1165,88,969,88],[1165,90,969,90,"px"],[1165,92,969,92],[1165,94,969,94,"m"],[1165,95,969,95],[1165,96,969,96],[1165,97,969,97],[1166,6,970,4],[1166,10,970,10,"sig"],[1166,13,970,13],[1166,16,970,16,"finalizeSchnorrSig"],[1166,34,970,34],[1166,35,970,35,"R"],[1166,36,970,36],[1166,38,970,38,"k"],[1166,39,970,39],[1166,41,970,41,"e"],[1166,42,970,42],[1166,44,970,44,"d"],[1166,45,970,45],[1166,46,970,46],[1167,6,971,4],[1167,10,971,10,"isValid"],[1167,17,971,17],[1167,26,971,26,"schnorrVerify"],[1167,39,971,39],[1167,40,971,40,"sig"],[1167,43,971,43],[1167,45,971,45,"m"],[1167,46,971,46],[1167,48,971,48,"px"],[1167,50,971,50],[1167,51,971,51],[1168,6,972,4],[1168,10,972,8],[1168,11,972,9,"isValid"],[1168,18,972,16],[1168,20,973,8],[1168,26,973,14],[1168,30,973,18,"Error"],[1168,35,973,23],[1168,36,973,24],[1168,70,973,58],[1168,71,973,59],[1169,6,974,4],[1169,13,974,11,"sig"],[1169,16,974,14],[1170,4,975,0],[1170,5,975,1],[1171,4,975,1],[1171,11,975,1,"_schnorrSign"],[1171,23,975,1],[1171,24,975,1,"apply"],[1171,29,975,1],[1171,36,975,1,"arguments"],[1171,45,975,1],[1172,2,975,1],[1173,2,976,0],[1173,11,976,9,"schnorrSignSync"],[1173,26,976,24,"schnorrSignSync"],[1173,27,976,25,"message"],[1173,34,976,32],[1173,36,976,34,"privateKey"],[1173,46,976,44],[1173,48,976,85],[1174,4,976,85],[1174,8,976,46,"auxRand"],[1174,15,976,53],[1174,18,976,53,"arguments"],[1174,27,976,53],[1174,28,976,53,"length"],[1174,34,976,53],[1174,42,976,53,"arguments"],[1174,51,976,53],[1174,59,976,53,"undefined"],[1174,68,976,53],[1174,71,976,53,"arguments"],[1174,80,976,53],[1174,86,976,56,"exports"],[1174,93,976,63],[1174,94,976,64,"utils"],[1174,99,976,69],[1174,100,976,70,"randomBytes"],[1174,111,976,81],[1174,112,976,82],[1174,113,976,83],[1175,4,977,4],[1175,8,977,4,"_initSchnorrSigArgs"],[1175,27,977,4],[1175,30,977,31,"initSchnorrSigArgs"],[1175,48,977,49],[1175,49,977,50,"message"],[1175,56,977,57],[1175,58,977,59,"privateKey"],[1175,68,977,69],[1175,70,977,71,"auxRand"],[1175,77,977,78],[1175,78,977,79],[1176,6,977,12,"m"],[1176,7,977,13],[1176,10,977,13,"_initSchnorrSigArgs"],[1176,29,977,13],[1176,30,977,12,"m"],[1176,31,977,13],[1177,6,977,15,"px"],[1177,8,977,17],[1177,11,977,17,"_initSchnorrSigArgs"],[1177,30,977,17],[1177,31,977,15,"px"],[1177,33,977,17],[1178,6,977,19,"d"],[1178,7,977,20],[1178,10,977,20,"_initSchnorrSigArgs"],[1178,29,977,20],[1178,30,977,19,"d"],[1178,31,977,20],[1179,6,977,22,"rand"],[1179,10,977,26],[1179,13,977,26,"_initSchnorrSigArgs"],[1179,32,977,26],[1179,33,977,22,"rand"],[1179,37,977,26],[1180,4,978,4],[1180,8,978,10,"t"],[1180,9,978,11],[1180,12,978,14,"initSchnorrNonce"],[1180,28,978,30],[1180,29,978,31,"d"],[1180,30,978,32],[1180,32,978,34,"exports"],[1180,39,978,41],[1180,40,978,42,"utils"],[1180,45,978,47],[1180,46,978,48,"taggedHashSync"],[1180,60,978,62],[1180,61,978,63,"TAGS"],[1180,65,978,67],[1180,66,978,68,"aux"],[1180,69,978,71],[1180,71,978,73,"rand"],[1180,75,978,77],[1180,76,978,78],[1180,77,978,79],[1181,4,979,4],[1181,8,979,4,"_finalizeSchnorrNonce"],[1181,29,979,4],[1181,32,979,25,"finalizeSchnorrNonce"],[1181,52,979,45],[1181,53,979,46,"exports"],[1181,60,979,53],[1181,61,979,54,"utils"],[1181,66,979,59],[1181,67,979,60,"taggedHashSync"],[1181,81,979,74],[1181,82,979,75,"TAGS"],[1181,86,979,79],[1181,87,979,80,"nonce"],[1181,92,979,85],[1181,94,979,87,"t"],[1181,95,979,88],[1181,97,979,90,"px"],[1181,99,979,92],[1181,101,979,94,"m"],[1181,102,979,95],[1181,103,979,96],[1181,104,979,97],[1182,6,979,12,"R"],[1182,7,979,13],[1182,10,979,13,"_finalizeSchnorrNonce"],[1182,31,979,13],[1182,32,979,12,"R"],[1182,33,979,13],[1183,6,979,15,"rx"],[1183,8,979,17],[1183,11,979,17,"_finalizeSchnorrNonce"],[1183,32,979,17],[1183,33,979,15,"rx"],[1183,35,979,17],[1184,6,979,19,"k"],[1184,7,979,20],[1184,10,979,20,"_finalizeSchnorrNonce"],[1184,31,979,20],[1184,32,979,19,"k"],[1184,33,979,20],[1185,4,980,4],[1185,8,980,10,"e"],[1185,9,980,11],[1185,12,980,14,"finalizeSchnorrChallenge"],[1185,36,980,38],[1185,37,980,39,"exports"],[1185,44,980,46],[1185,45,980,47,"utils"],[1185,50,980,52],[1185,51,980,53,"taggedHashSync"],[1185,65,980,67],[1185,66,980,68,"TAGS"],[1185,70,980,72],[1185,71,980,73,"challenge"],[1185,80,980,82],[1185,82,980,84,"rx"],[1185,84,980,86],[1185,86,980,88,"px"],[1185,88,980,90],[1185,90,980,92,"m"],[1185,91,980,93],[1185,92,980,94],[1185,93,980,95],[1186,4,981,4],[1186,8,981,10,"sig"],[1186,11,981,13],[1186,14,981,16,"finalizeSchnorrSig"],[1186,32,981,34],[1186,33,981,35,"R"],[1186,34,981,36],[1186,36,981,38,"k"],[1186,37,981,39],[1186,39,981,41,"e"],[1186,40,981,42],[1186,42,981,44,"d"],[1186,43,981,45],[1186,44,981,46],[1187,4,982,4],[1187,8,982,10,"isValid"],[1187,15,982,17],[1187,18,982,20,"schnorrVerifySync"],[1187,35,982,37],[1187,36,982,38,"sig"],[1187,39,982,41],[1187,41,982,43,"m"],[1187,42,982,44],[1187,44,982,46,"px"],[1187,46,982,48],[1187,47,982,49],[1188,4,983,4],[1188,8,983,8],[1188,9,983,9,"isValid"],[1188,16,983,16],[1188,18,984,8],[1188,24,984,14],[1188,28,984,18,"Error"],[1188,33,984,23],[1188,34,984,24],[1188,68,984,58],[1188,69,984,59],[1189,4,985,4],[1189,11,985,11,"sig"],[1189,14,985,14],[1190,2,986,0],[1191,2,987,0],[1191,11,987,9,"initSchnorrVerify"],[1191,28,987,26,"initSchnorrVerify"],[1191,29,987,27,"signature"],[1191,38,987,36],[1191,40,987,38,"message"],[1191,47,987,45],[1191,49,987,47,"publicKey"],[1191,58,987,56],[1191,60,987,58],[1192,4,988,4],[1192,8,988,10,"raw"],[1192,11,988,13],[1192,14,988,16,"signature"],[1192,23,988,25],[1192,35,988,37,"SchnorrSignature"],[1192,51,988,53],[1193,4,989,4],[1193,8,989,10,"sig"],[1193,11,989,13],[1193,14,989,16,"raw"],[1193,17,989,19],[1193,20,989,22,"signature"],[1193,29,989,31],[1193,32,989,34,"SchnorrSignature"],[1193,48,989,50],[1193,49,989,51,"fromHex"],[1193,56,989,58],[1193,57,989,59,"signature"],[1193,66,989,68],[1193,67,989,69],[1194,4,990,4],[1194,8,990,8,"raw"],[1194,11,990,11],[1194,13,991,8,"sig"],[1194,16,991,11],[1194,17,991,12,"assertValidity"],[1194,31,991,26],[1194,32,991,27],[1194,33,991,28],[1195,4,992,4],[1195,11,992,4,"Object"],[1195,17,992,4],[1195,18,992,4,"assign"],[1195,24,992,4],[1195,29,993,11,"sig"],[1195,32,993,14],[1196,6,994,8,"m"],[1196,7,994,9],[1196,9,994,11,"ensureBytes"],[1196,20,994,22],[1196,21,994,23,"message"],[1196,28,994,30],[1196,29,994,31],[1197,6,995,8,"P"],[1197,7,995,9],[1197,9,995,11,"normalizePublicKey"],[1197,27,995,29],[1197,28,995,30,"publicKey"],[1197,37,995,39],[1198,4,995,40],[1199,2,997,0],[1200,2,998,0],[1200,11,998,9,"finalizeSchnorrVerify"],[1200,32,998,30,"finalizeSchnorrVerify"],[1200,33,998,31,"r"],[1200,34,998,32],[1200,36,998,34,"P"],[1200,37,998,35],[1200,39,998,37,"s"],[1200,40,998,38],[1200,42,998,40,"e"],[1200,43,998,41],[1200,45,998,43],[1201,4,999,4],[1201,8,999,10,"R"],[1201,9,999,11],[1201,12,999,14,"Point"],[1201,17,999,19],[1201,18,999,20,"BASE"],[1201,22,999,24],[1201,23,999,25,"multiplyAndAddUnsafe"],[1201,43,999,45],[1201,44,999,46,"P"],[1201,45,999,47],[1201,47,999,49,"normalizePrivateKey"],[1201,66,999,68],[1201,67,999,69,"s"],[1201,68,999,70],[1201,69,999,71],[1201,71,999,73,"mod"],[1201,74,999,76],[1201,75,999,77],[1201,76,999,78,"e"],[1201,77,999,79],[1201,79,999,81,"CURVE"],[1201,84,999,86],[1201,85,999,87,"n"],[1201,86,999,88],[1201,87,999,89],[1201,88,999,90],[1202,4,1000,4],[1202,8,1000,8],[1202,9,1000,9,"R"],[1202,10,1000,10],[1202,14,1000,14],[1202,15,1000,15,"hasEvenY"],[1202,23,1000,23],[1202,24,1000,24,"R"],[1202,25,1000,25],[1202,26,1000,26],[1202,30,1000,30,"R"],[1202,31,1000,31],[1202,32,1000,32,"x"],[1202,33,1000,33],[1202,38,1000,38,"r"],[1202,39,1000,39],[1202,41,1001,8],[1202,48,1001,15],[1202,53,1001,20],[1203,4,1002,4],[1203,11,1002,11],[1203,15,1002,15],[1204,2,1003,0],[1205,2,1003,1],[1205,11,1004,15,"schnorrVerify"],[1205,24,1004,28,"schnorrVerify"],[1205,25,1004,28,"_x5"],[1205,28,1004,28],[1205,30,1004,28,"_x6"],[1205,33,1004,28],[1205,35,1004,28,"_x7"],[1205,38,1004,28],[1206,4,1004,28],[1206,11,1004,28,"_schnorrVerify"],[1206,25,1004,28],[1206,26,1004,28,"apply"],[1206,31,1004,28],[1206,38,1004,28,"arguments"],[1206,47,1004,28],[1207,2,1004,28],[1208,2,1004,28],[1208,11,1004,28,"_schnorrVerify"],[1208,26,1004,28],[1209,4,1004,28,"_schnorrVerify"],[1209,18,1004,28],[1209,21,1004,28,"_asyncToGenerator"],[1209,38,1004,28],[1209,39,1004,0],[1209,50,1004,29,"signature"],[1209,59,1004,38],[1209,61,1004,40,"message"],[1209,68,1004,47],[1209,70,1004,49,"publicKey"],[1209,79,1004,58],[1209,81,1004,60],[1210,6,1005,4],[1210,10,1005,8],[1211,8,1006,8],[1211,12,1006,8,"_initSchnorrVerify2"],[1211,31,1006,8],[1211,34,1006,31,"initSchnorrVerify"],[1211,51,1006,48],[1211,52,1006,49,"signature"],[1211,61,1006,58],[1211,63,1006,60,"message"],[1211,70,1006,67],[1211,72,1006,69,"publicKey"],[1211,81,1006,78],[1211,82,1006,79],[1212,10,1006,16,"r"],[1212,11,1006,17],[1212,14,1006,17,"_initSchnorrVerify2"],[1212,33,1006,17],[1212,34,1006,16,"r"],[1212,35,1006,17],[1213,10,1006,19,"s"],[1213,11,1006,20],[1213,14,1006,20,"_initSchnorrVerify2"],[1213,33,1006,20],[1213,34,1006,19,"s"],[1213,35,1006,20],[1214,10,1006,22,"m"],[1214,11,1006,23],[1214,14,1006,23,"_initSchnorrVerify2"],[1214,33,1006,23],[1214,34,1006,22,"m"],[1214,35,1006,23],[1215,10,1006,25,"P"],[1215,11,1006,26],[1215,14,1006,26,"_initSchnorrVerify2"],[1215,33,1006,26],[1215,34,1006,25,"P"],[1215,35,1006,26],[1216,8,1007,8],[1216,12,1007,14,"e"],[1216,13,1007,15],[1216,16,1007,18,"finalizeSchnorrChallenge"],[1216,40,1007,42],[1216,47,1007,49,"exports"],[1216,54,1007,56],[1216,55,1007,57,"utils"],[1216,60,1007,62],[1216,61,1007,63,"taggedHash"],[1216,71,1007,73],[1216,72,1007,74,"TAGS"],[1216,76,1007,78],[1216,77,1007,79,"challenge"],[1216,86,1007,88],[1216,88,1007,90,"numTo32b"],[1216,96,1007,98],[1216,97,1007,99,"r"],[1216,98,1007,100],[1216,99,1007,101],[1216,101,1007,103,"P"],[1216,102,1007,104],[1216,103,1007,105,"toRawX"],[1216,109,1007,111],[1216,110,1007,112],[1216,111,1007,113],[1216,113,1007,115,"m"],[1216,114,1007,116],[1216,115,1007,117],[1216,116,1007,118],[1217,8,1008,8],[1217,15,1008,15,"finalizeSchnorrVerify"],[1217,36,1008,36],[1217,37,1008,37,"r"],[1217,38,1008,38],[1217,40,1008,40,"P"],[1217,41,1008,41],[1217,43,1008,43,"s"],[1217,44,1008,44],[1217,46,1008,46,"e"],[1217,47,1008,47],[1217,48,1008,48],[1218,6,1009,4],[1218,7,1009,5],[1218,8,1010,4],[1218,15,1010,11,"error"],[1218,20,1010,16],[1218,22,1010,18],[1219,8,1011,8],[1219,15,1011,15],[1219,20,1011,20],[1220,6,1012,4],[1221,4,1013,0],[1221,5,1013,1],[1222,4,1013,1],[1222,11,1013,1,"_schnorrVerify"],[1222,25,1013,1],[1222,26,1013,1,"apply"],[1222,31,1013,1],[1222,38,1013,1,"arguments"],[1222,47,1013,1],[1223,2,1013,1],[1224,2,1014,0],[1224,11,1014,9,"schnorrVerifySync"],[1224,28,1014,26,"schnorrVerifySync"],[1224,29,1014,27,"signature"],[1224,38,1014,36],[1224,40,1014,38,"message"],[1224,47,1014,45],[1224,49,1014,47,"publicKey"],[1224,58,1014,56],[1224,60,1014,58],[1225,4,1015,4],[1225,8,1015,8],[1226,6,1016,8],[1226,10,1016,8,"_initSchnorrVerify"],[1226,28,1016,8],[1226,31,1016,31,"initSchnorrVerify"],[1226,48,1016,48],[1226,49,1016,49,"signature"],[1226,58,1016,58],[1226,60,1016,60,"message"],[1226,67,1016,67],[1226,69,1016,69,"publicKey"],[1226,78,1016,78],[1226,79,1016,79],[1227,8,1016,16,"r"],[1227,9,1016,17],[1227,12,1016,17,"_initSchnorrVerify"],[1227,30,1016,17],[1227,31,1016,16,"r"],[1227,32,1016,17],[1228,8,1016,19,"s"],[1228,9,1016,20],[1228,12,1016,20,"_initSchnorrVerify"],[1228,30,1016,20],[1228,31,1016,19,"s"],[1228,32,1016,20],[1229,8,1016,22,"m"],[1229,9,1016,23],[1229,12,1016,23,"_initSchnorrVerify"],[1229,30,1016,23],[1229,31,1016,22,"m"],[1229,32,1016,23],[1230,8,1016,25,"P"],[1230,9,1016,26],[1230,12,1016,26,"_initSchnorrVerify"],[1230,30,1016,26],[1230,31,1016,25,"P"],[1230,32,1016,26],[1231,6,1017,8],[1231,10,1017,14,"e"],[1231,11,1017,15],[1231,14,1017,18,"finalizeSchnorrChallenge"],[1231,38,1017,42],[1231,39,1017,43,"exports"],[1231,46,1017,50],[1231,47,1017,51,"utils"],[1231,52,1017,56],[1231,53,1017,57,"taggedHashSync"],[1231,67,1017,71],[1231,68,1017,72,"TAGS"],[1231,72,1017,76],[1231,73,1017,77,"challenge"],[1231,82,1017,86],[1231,84,1017,88,"numTo32b"],[1231,92,1017,96],[1231,93,1017,97,"r"],[1231,94,1017,98],[1231,95,1017,99],[1231,97,1017,101,"P"],[1231,98,1017,102],[1231,99,1017,103,"toRawX"],[1231,105,1017,109],[1231,106,1017,110],[1231,107,1017,111],[1231,109,1017,113,"m"],[1231,110,1017,114],[1231,111,1017,115],[1231,112,1017,116],[1232,6,1018,8],[1232,13,1018,15,"finalizeSchnorrVerify"],[1232,34,1018,36],[1232,35,1018,37,"r"],[1232,36,1018,38],[1232,38,1018,40,"P"],[1232,39,1018,41],[1232,41,1018,43,"s"],[1232,42,1018,44],[1232,44,1018,46,"e"],[1232,45,1018,47],[1232,46,1018,48],[1233,4,1019,4],[1233,5,1019,5],[1233,6,1020,4],[1233,13,1020,11,"error"],[1233,18,1020,16],[1233,20,1020,18],[1234,6,1021,8],[1234,13,1021,15],[1234,18,1021,20],[1235,4,1022,4],[1236,2,1023,0],[1237,2,1024,0,"exports"],[1237,9,1024,7],[1237,10,1024,8,"schnorr"],[1237,17,1024,15],[1237,20,1024,18],[1238,4,1025,4,"Signature"],[1238,13,1025,13],[1238,15,1025,15,"SchnorrSignature"],[1238,31,1025,31],[1239,4,1026,4,"getPublicKey"],[1239,16,1026,16],[1239,18,1026,18,"schnorrGetPublicKey"],[1239,37,1026,37],[1240,4,1027,4,"sign"],[1240,8,1027,8],[1240,10,1027,10,"schnorrSign"],[1240,21,1027,21],[1241,4,1028,4,"verify"],[1241,10,1028,10],[1241,12,1028,12,"schnorrVerify"],[1241,25,1028,25],[1242,4,1029,4,"signSync"],[1242,12,1029,12],[1242,14,1029,14,"schnorrSignSync"],[1242,29,1029,29],[1243,4,1030,4,"verifySync"],[1243,14,1030,14],[1243,16,1030,16,"schnorrVerifySync"],[1244,2,1031,0],[1244,3,1031,1],[1245,2,1032,0,"Point"],[1245,7,1032,5],[1245,8,1032,6,"BASE"],[1245,12,1032,10],[1245,13,1032,11,"_setWindowSize"],[1245,27,1032,25],[1245,28,1032,26],[1245,29,1032,27],[1245,30,1032,28],[1246,2,1033,0],[1246,6,1033,6,"crypto"],[1246,12,1033,12],[1246,15,1033,15],[1247,4,1034,4,"node"],[1247,8,1034,8],[1247,10,1034,8,"_$$_REQUIRE"],[1247,21,1034,8],[1247,22,1034,8,"_dependencyMap"],[1247,36,1034,8],[1247,50,1034,20],[1248,4,1035,4,"web"],[1248,7,1035,7],[1248,9,1035,9],[1248,16,1035,16,"self"],[1248,20,1035,20],[1248,25,1035,25],[1248,33,1035,33],[1248,37,1035,37],[1248,45,1035,45],[1248,49,1035,49,"self"],[1248,53,1035,53],[1248,56,1035,56,"self"],[1248,60,1035,60],[1248,61,1035,61,"crypto"],[1248,67,1035,67],[1248,70,1035,70,"undefined"],[1249,2,1036,0],[1249,3,1036,1],[1250,2,1037,0],[1250,6,1037,6,"TAGS"],[1250,10,1037,10],[1250,13,1037,13],[1251,4,1038,4,"challenge"],[1251,13,1038,13],[1251,15,1038,15],[1251,34,1038,34],[1252,4,1039,4,"aux"],[1252,7,1039,7],[1252,9,1039,9],[1252,22,1039,22],[1253,4,1040,4,"nonce"],[1253,9,1040,9],[1253,11,1040,11],[1254,2,1041,0],[1254,3,1041,1],[1255,2,1042,0],[1255,6,1042,6,"TAGGED_HASH_PREFIXES"],[1255,26,1042,26],[1255,29,1042,29],[1255,30,1042,30],[1255,31,1042,31],[1256,2,1043,0,"exports"],[1256,9,1043,7],[1256,10,1043,8,"utils"],[1256,15,1043,13],[1256,18,1043,16],[1257,4,1044,4,"isValidPrivateKey"],[1257,21,1044,21],[1257,32,1044,4,"isValidPrivateKey"],[1257,49,1044,21,"isValidPrivateKey"],[1257,50,1044,22,"privateKey"],[1257,60,1044,32],[1257,62,1044,34],[1258,6,1045,8],[1258,10,1045,12],[1259,8,1046,12,"normalizePrivateKey"],[1259,27,1046,31],[1259,28,1046,32,"privateKey"],[1259,38,1046,42],[1259,39,1046,43],[1260,8,1047,12],[1260,15,1047,19],[1260,19,1047,23],[1261,6,1048,8],[1261,7,1048,9],[1261,8,1049,8],[1261,15,1049,15,"error"],[1261,20,1049,20],[1261,22,1049,22],[1262,8,1050,12],[1262,15,1050,19],[1262,20,1050,24],[1263,6,1051,8],[1264,4,1052,4],[1264,5,1052,5],[1265,4,1053,4,"privateAdd"],[1265,14,1053,14],[1265,16,1053,16],[1265,25,1053,4,"privateAdd"],[1265,35,1053,14,"privateAdd"],[1265,36,1053,17,"privateKey"],[1265,46,1053,27],[1265,48,1053,29,"tweak"],[1265,53,1053,34],[1265,55,1053,39],[1266,6,1054,8],[1266,10,1054,14,"p"],[1266,11,1054,15],[1266,14,1054,18,"normalizePrivateKey"],[1266,33,1054,37],[1266,34,1054,38,"privateKey"],[1266,44,1054,48],[1266,45,1054,49],[1267,6,1055,8],[1267,10,1055,14,"t"],[1267,11,1055,15],[1267,14,1055,18,"normalizePrivateKey"],[1267,33,1055,37],[1267,34,1055,38,"tweak"],[1267,39,1055,43],[1267,40,1055,44],[1268,6,1056,8],[1268,13,1056,15,"numTo32b"],[1268,21,1056,23],[1268,22,1056,24,"mod"],[1268,25,1056,27],[1268,26,1056,28,"p"],[1268,27,1056,29],[1268,30,1056,32,"t"],[1268,31,1056,33],[1268,33,1056,35,"CURVE"],[1268,38,1056,40],[1268,39,1056,41,"n"],[1268,40,1056,42],[1268,41,1056,43],[1268,42,1056,44],[1269,4,1057,4],[1269,5,1057,5],[1270,4,1058,4,"privateNegate"],[1270,17,1058,17],[1270,19,1058,19],[1270,28,1058,4,"privateNegate"],[1270,41,1058,17,"privateNegate"],[1270,42,1058,20,"privateKey"],[1270,52,1058,30],[1270,54,1058,35],[1271,6,1059,8],[1271,10,1059,14,"p"],[1271,11,1059,15],[1271,14,1059,18,"normalizePrivateKey"],[1271,33,1059,37],[1271,34,1059,38,"privateKey"],[1271,44,1059,48],[1271,45,1059,49],[1272,6,1060,8],[1272,13,1060,15,"numTo32b"],[1272,21,1060,23],[1272,22,1060,24,"CURVE"],[1272,27,1060,29],[1272,28,1060,30,"n"],[1272,29,1060,31],[1272,32,1060,34,"p"],[1272,33,1060,35],[1272,34,1060,36],[1273,4,1061,4],[1273,5,1061,5],[1274,4,1062,4,"pointAddScalar"],[1274,18,1062,18],[1274,20,1062,20],[1274,29,1062,4,"pointAddScalar"],[1274,43,1062,18,"pointAddScalar"],[1274,44,1062,21,"p"],[1274,45,1062,22],[1274,47,1062,24,"tweak"],[1274,52,1062,29],[1274,54,1062,31,"isCompressed"],[1274,66,1062,43],[1274,68,1062,48],[1275,6,1063,8],[1275,10,1063,14,"P"],[1275,11,1063,15],[1275,14,1063,18,"Point"],[1275,19,1063,23],[1275,20,1063,24,"fromHex"],[1275,27,1063,31],[1275,28,1063,32,"p"],[1275,29,1063,33],[1275,30,1063,34],[1276,6,1064,8],[1276,10,1064,14,"t"],[1276,11,1064,15],[1276,14,1064,18,"normalizePrivateKey"],[1276,33,1064,37],[1276,34,1064,38,"tweak"],[1276,39,1064,43],[1276,40,1064,44],[1277,6,1065,8],[1277,10,1065,14,"Q"],[1277,11,1065,15],[1277,14,1065,18,"Point"],[1277,19,1065,23],[1277,20,1065,24,"BASE"],[1277,24,1065,28],[1277,25,1065,29,"multiplyAndAddUnsafe"],[1277,45,1065,49],[1277,46,1065,50,"P"],[1277,47,1065,51],[1277,49,1065,53,"t"],[1277,50,1065,54],[1277,52,1065,56,"_1n"],[1277,55,1065,59],[1277,56,1065,60],[1278,6,1066,8],[1278,10,1066,12],[1278,11,1066,13,"Q"],[1278,12,1066,14],[1278,14,1067,12],[1278,20,1067,18],[1278,24,1067,22,"Error"],[1278,29,1067,27],[1278,30,1067,28],[1278,57,1067,55],[1278,58,1067,56],[1279,6,1068,8],[1279,13,1068,15,"Q"],[1279,14,1068,16],[1279,15,1068,17,"toRawBytes"],[1279,25,1068,27],[1279,26,1068,28,"isCompressed"],[1279,38,1068,40],[1279,39,1068,41],[1280,4,1069,4],[1280,5,1069,5],[1281,4,1070,4,"pointMultiply"],[1281,17,1070,17],[1281,19,1070,19],[1281,28,1070,4,"pointMultiply"],[1281,41,1070,17,"pointMultiply"],[1281,42,1070,20,"p"],[1281,43,1070,21],[1281,45,1070,23,"tweak"],[1281,50,1070,28],[1281,52,1070,30,"isCompressed"],[1281,64,1070,42],[1281,66,1070,47],[1282,6,1071,8],[1282,10,1071,14,"P"],[1282,11,1071,15],[1282,14,1071,18,"Point"],[1282,19,1071,23],[1282,20,1071,24,"fromHex"],[1282,27,1071,31],[1282,28,1071,32,"p"],[1282,29,1071,33],[1282,30,1071,34],[1283,6,1072,8],[1283,10,1072,14,"t"],[1283,11,1072,15],[1283,14,1072,18,"bytesToNumber"],[1283,27,1072,31],[1283,28,1072,32,"ensureBytes"],[1283,39,1072,43],[1283,40,1072,44,"tweak"],[1283,45,1072,49],[1283,46,1072,50],[1283,47,1072,51],[1284,6,1073,8],[1284,13,1073,15,"P"],[1284,14,1073,16],[1284,15,1073,17,"multiply"],[1284,23,1073,25],[1284,24,1073,26,"t"],[1284,25,1073,27],[1284,26,1073,28],[1284,27,1073,29,"toRawBytes"],[1284,37,1073,39],[1284,38,1073,40,"isCompressed"],[1284,50,1073,52],[1284,51,1073,53],[1285,4,1074,4],[1285,5,1074,5],[1286,4,1075,4,"hashToPrivateKey"],[1286,20,1075,20],[1286,22,1075,22],[1286,31,1075,4,"hashToPrivateKey"],[1286,47,1075,20,"hashToPrivateKey"],[1286,48,1075,23,"hash"],[1286,52,1075,27],[1286,54,1075,32],[1287,6,1076,8,"hash"],[1287,10,1076,12],[1287,13,1076,15,"ensureBytes"],[1287,24,1076,26],[1287,25,1076,27,"hash"],[1287,29,1076,31],[1287,30,1076,32],[1288,6,1077,8],[1288,10,1077,12,"hash"],[1288,14,1077,16],[1288,15,1077,17,"length"],[1288,21,1077,23],[1288,24,1077,26],[1288,26,1077,28],[1288,30,1077,32,"hash"],[1288,34,1077,36],[1288,35,1077,37,"length"],[1288,41,1077,43],[1288,44,1077,46],[1288,48,1077,50],[1288,50,1078,12],[1288,56,1078,18],[1288,60,1078,22,"Error"],[1288,65,1078,27],[1288,66,1078,28],[1288,121,1078,83],[1288,122,1078,84],[1289,6,1079,8],[1289,10,1079,14,"num"],[1289,13,1079,17],[1289,16,1079,20,"mod"],[1289,19,1079,23],[1289,20,1079,24,"bytesToNumber"],[1289,33,1079,37],[1289,34,1079,38,"hash"],[1289,38,1079,42],[1289,39,1079,43],[1289,41,1079,45,"CURVE"],[1289,46,1079,50],[1289,47,1079,51,"n"],[1289,48,1079,52],[1289,51,1079,55,"_1n"],[1289,54,1079,58],[1289,55,1079,59],[1289,58,1079,62,"_1n"],[1289,61,1079,65],[1290,6,1080,8],[1290,13,1080,15,"numTo32b"],[1290,21,1080,23],[1290,22,1080,24,"num"],[1290,25,1080,27],[1290,26,1080,28],[1291,4,1081,4],[1291,5,1081,5],[1292,4,1082,4,"randomBytes"],[1292,15,1082,15],[1292,17,1082,17],[1292,26,1082,4,"randomBytes"],[1292,37,1082,15,"randomBytes"],[1292,38,1082,15],[1292,40,1082,39],[1293,6,1082,39],[1293,10,1082,18,"bytesLength"],[1293,21,1082,29],[1293,24,1082,29,"arguments"],[1293,33,1082,29],[1293,34,1082,29,"length"],[1293,40,1082,29],[1293,48,1082,29,"arguments"],[1293,57,1082,29],[1293,65,1082,29,"undefined"],[1293,74,1082,29],[1293,77,1082,29,"arguments"],[1293,86,1082,29],[1293,92,1082,32],[1293,94,1082,34],[1294,6,1083,8],[1294,10,1083,12,"crypto"],[1294,16,1083,18],[1294,17,1083,19,"web"],[1294,20,1083,22],[1294,22,1083,24],[1295,8,1084,12],[1295,15,1084,19,"crypto"],[1295,21,1084,25],[1295,22,1084,26,"web"],[1295,25,1084,29],[1295,26,1084,30,"getRandomValues"],[1295,41,1084,45],[1295,42,1084,46],[1295,46,1084,50,"Uint8Array"],[1295,56,1084,60],[1295,57,1084,61,"bytesLength"],[1295,68,1084,72],[1295,69,1084,73],[1295,70,1084,74],[1296,6,1085,8],[1296,7,1085,9],[1296,13,1086,13],[1296,17,1086,17,"crypto"],[1296,23,1086,23],[1296,24,1086,24,"node"],[1296,28,1086,28],[1296,30,1086,30],[1297,8,1087,12],[1297,12,1087,20,"randomBytes"],[1297,24,1087,31],[1297,27,1087,36,"crypto"],[1297,33,1087,42],[1297,34,1087,43,"node"],[1297,38,1087,47],[1297,39,1087,20,"randomBytes"],[1297,50,1087,31],[1298,8,1088,12],[1298,15,1088,19,"Uint8Array"],[1298,25,1088,29],[1298,26,1088,30,"from"],[1298,30,1088,34],[1298,31,1088,35,"randomBytes"],[1298,43,1088,46],[1298,44,1088,47,"bytesLength"],[1298,55,1088,58],[1298,56,1088,59],[1298,57,1088,60],[1299,6,1089,8],[1299,7,1089,9],[1299,13,1090,13],[1300,8,1091,12],[1300,14,1091,18],[1300,18,1091,22,"Error"],[1300,23,1091,27],[1300,24,1091,28],[1300,75,1091,79],[1300,76,1091,80],[1301,6,1092,8],[1302,4,1093,4],[1302,5,1093,5],[1303,4,1094,4,"randomPrivateKey"],[1303,20,1094,20],[1303,22,1094,22],[1303,31,1094,4,"randomPrivateKey"],[1303,47,1094,20,"randomPrivateKey"],[1303,48,1094,20],[1303,50,1094,28],[1304,6,1095,8],[1304,13,1095,15,"exports"],[1304,20,1095,22],[1304,21,1095,23,"utils"],[1304,26,1095,28],[1304,27,1095,29,"hashToPrivateKey"],[1304,43,1095,45],[1304,44,1095,46,"exports"],[1304,51,1095,53],[1304,52,1095,54,"utils"],[1304,57,1095,59],[1304,58,1095,60,"randomBytes"],[1304,69,1095,71],[1304,70,1095,72],[1304,72,1095,74],[1304,73,1095,75],[1304,74,1095,76],[1305,4,1096,4],[1305,5,1096,5],[1306,4,1097,4,"bytesToHex"],[1306,14,1097,14],[1306,16,1097,4,"bytesToHex"],[1306,26,1097,14],[1307,4,1098,4,"hexToBytes"],[1307,14,1098,14],[1307,16,1098,4,"hexToBytes"],[1307,26,1098,14],[1308,4,1099,4,"concatBytes"],[1308,15,1099,15],[1308,17,1099,4,"concatBytes"],[1308,28,1099,15],[1309,4,1100,4,"mod"],[1309,7,1100,7],[1309,9,1100,4,"mod"],[1309,12,1100,7],[1310,4,1101,4,"invert"],[1310,10,1101,10],[1310,12,1101,4,"invert"],[1310,18,1101,10],[1311,4,1102,4,"sha256"],[1311,10,1102,10],[1312,6,1102,10],[1312,10,1102,10,"_sha"],[1312,14,1102,10],[1312,17,1102,10,"_asyncToGenerator"],[1312,34,1102,10],[1312,35,1102,12],[1312,48,1102,35],[1313,8,1102,35],[1313,17,1102,35,"_len4"],[1313,22,1102,35],[1313,25,1102,35,"arguments"],[1313,34,1102,35],[1313,35,1102,35,"length"],[1313,41,1102,35],[1313,43,1102,22,"messages"],[1313,51,1102,30],[1313,58,1102,30,"Array"],[1313,63,1102,30],[1313,64,1102,30,"_len4"],[1313,69,1102,30],[1313,72,1102,30,"_key4"],[1313,77,1102,30],[1313,83,1102,30,"_key4"],[1313,88,1102,30],[1313,91,1102,30,"_len4"],[1313,96,1102,30],[1313,98,1102,30,"_key4"],[1313,103,1102,30],[1314,10,1102,22,"messages"],[1314,18,1102,30],[1314,19,1102,30,"_key4"],[1314,24,1102,30],[1314,28,1102,30,"arguments"],[1314,37,1102,30],[1314,38,1102,30,"_key4"],[1314,43,1102,30],[1315,8,1102,30],[1316,8,1103,8],[1316,12,1103,12,"crypto"],[1316,18,1103,18],[1316,19,1103,19,"web"],[1316,22,1103,22],[1316,24,1103,24],[1317,10,1104,12],[1317,14,1104,18,"buffer"],[1317,20,1104,24],[1317,29,1104,33,"crypto"],[1317,35,1104,39],[1317,36,1104,40,"web"],[1317,39,1104,43],[1317,40,1104,44,"subtle"],[1317,46,1104,50],[1317,47,1104,51,"digest"],[1317,53,1104,57],[1317,54,1104,58],[1317,63,1104,67],[1317,65,1104,69,"concatBytes"],[1317,76,1104,80],[1317,77,1104,80,"apply"],[1317,82,1104,80],[1317,91,1104,84,"messages"],[1317,99,1104,92],[1317,100,1104,93],[1317,101,1104,94],[1318,10,1105,12],[1318,17,1105,19],[1318,21,1105,23,"Uint8Array"],[1318,31,1105,33],[1318,32,1105,34,"buffer"],[1318,38,1105,40],[1318,39,1105,41],[1319,8,1106,8],[1319,9,1106,9],[1319,15,1107,13],[1319,19,1107,17,"crypto"],[1319,25,1107,23],[1319,26,1107,24,"node"],[1319,30,1107,28],[1319,32,1107,30],[1320,10,1108,12],[1320,14,1108,20,"createHash"],[1320,24,1108,30],[1320,27,1108,35,"crypto"],[1320,33,1108,41],[1320,34,1108,42,"node"],[1320,38,1108,46],[1320,39,1108,20,"createHash"],[1320,49,1108,30],[1321,10,1109,12],[1321,14,1109,18,"hash"],[1321,18,1109,22],[1321,21,1109,25,"createHash"],[1321,31,1109,35],[1321,32,1109,36],[1321,40,1109,44],[1321,41,1109,45],[1322,10,1110,12,"messages"],[1322,18,1110,20],[1322,19,1110,21,"forEach"],[1322,26,1110,28],[1322,27,1110,29],[1322,37,1110,30,"m"],[1322,38,1110,31],[1323,12,1110,31],[1323,19,1110,36,"hash"],[1323,23,1110,40],[1323,24,1110,41,"update"],[1323,30,1110,47],[1323,31,1110,48,"m"],[1323,32,1110,49],[1323,33,1110,50],[1324,10,1110,50],[1324,12,1110,51],[1325,10,1111,12],[1325,17,1111,19,"Uint8Array"],[1325,27,1111,29],[1325,28,1111,30,"from"],[1325,32,1111,34],[1325,33,1111,35,"hash"],[1325,37,1111,39],[1325,38,1111,40,"digest"],[1325,44,1111,46],[1325,45,1111,47],[1325,46,1111,48],[1325,47,1111,49],[1326,8,1112,8],[1326,9,1112,9],[1326,15,1113,13],[1327,10,1114,12],[1327,16,1114,18],[1327,20,1114,22,"Error"],[1327,25,1114,27],[1327,26,1114,28],[1327,72,1114,74],[1327,73,1114,75],[1328,8,1115,8],[1329,6,1116,4],[1329,7,1116,5],[1330,6,1116,5],[1330,15,1102,4,"sha256"],[1330,21,1102,10,"sha256"],[1330,22,1102,10],[1331,8,1102,10],[1331,15,1102,10,"_sha"],[1331,19,1102,10],[1331,20,1102,10,"apply"],[1331,25,1102,10],[1331,32,1102,10,"arguments"],[1331,41,1102,10],[1332,6,1102,10],[1333,6,1102,10],[1333,13,1102,4,"sha256"],[1333,19,1102,10],[1334,4,1102,10],[1334,7,1116,5],[1335,4,1117,4,"hmacSha256"],[1335,14,1117,14],[1336,6,1117,14],[1336,10,1117,14,"_hmacSha"],[1336,18,1117,14],[1336,21,1117,14,"_asyncToGenerator"],[1336,38,1117,14],[1336,39,1117,16],[1336,50,1117,23,"key"],[1336,53,1117,26],[1336,55,1117,44],[1337,8,1117,44],[1337,17,1117,44,"_len5"],[1337,22,1117,44],[1337,25,1117,44,"arguments"],[1337,34,1117,44],[1337,35,1117,44,"length"],[1337,41,1117,44],[1337,43,1117,31,"messages"],[1337,51,1117,39],[1337,58,1117,39,"Array"],[1337,63,1117,39],[1337,64,1117,39,"_len5"],[1337,69,1117,39],[1337,76,1117,39,"_len5"],[1337,81,1117,39],[1337,92,1117,39,"_key5"],[1337,97,1117,39],[1337,103,1117,39,"_key5"],[1337,108,1117,39],[1337,111,1117,39,"_len5"],[1337,116,1117,39],[1337,118,1117,39,"_key5"],[1337,123,1117,39],[1338,10,1117,31,"messages"],[1338,18,1117,39],[1338,19,1117,39,"_key5"],[1338,24,1117,39],[1338,32,1117,39,"arguments"],[1338,41,1117,39],[1338,42,1117,39,"_key5"],[1338,47,1117,39],[1339,8,1117,39],[1340,8,1118,8],[1340,12,1118,12,"crypto"],[1340,18,1118,18],[1340,19,1118,19,"web"],[1340,22,1118,22],[1340,24,1118,24],[1341,10,1119,12],[1341,14,1119,18,"ckey"],[1341,18,1119,22],[1341,27,1119,31,"crypto"],[1341,33,1119,37],[1341,34,1119,38,"web"],[1341,37,1119,41],[1341,38,1119,42,"subtle"],[1341,44,1119,48],[1341,45,1119,49,"importKey"],[1341,54,1119,58],[1341,55,1119,59],[1341,60,1119,64],[1341,62,1119,66,"key"],[1341,65,1119,69],[1341,67,1119,71],[1342,12,1119,73,"name"],[1342,16,1119,77],[1342,18,1119,79],[1342,24,1119,85],[1343,12,1119,87,"hash"],[1343,16,1119,91],[1343,18,1119,93],[1344,14,1119,95,"name"],[1344,18,1119,99],[1344,20,1119,101],[1345,12,1119,111],[1346,10,1119,113],[1346,11,1119,114],[1346,13,1119,116],[1346,18,1119,121],[1346,20,1119,123],[1346,21,1119,124],[1346,27,1119,130],[1346,28,1119,131],[1346,29,1119,132],[1347,10,1120,12],[1347,14,1120,18,"message"],[1347,21,1120,25],[1347,24,1120,28,"concatBytes"],[1347,35,1120,39],[1347,36,1120,39,"apply"],[1347,41,1120,39],[1347,50,1120,43,"messages"],[1347,58,1120,51],[1347,59,1120,52],[1348,10,1121,12],[1348,14,1121,18,"buffer"],[1348,20,1121,24],[1348,29,1121,33,"crypto"],[1348,35,1121,39],[1348,36,1121,40,"web"],[1348,39,1121,43],[1348,40,1121,44,"subtle"],[1348,46,1121,50],[1348,47,1121,51,"sign"],[1348,51,1121,55],[1348,52,1121,56],[1348,58,1121,62],[1348,60,1121,64,"ckey"],[1348,64,1121,68],[1348,66,1121,70,"message"],[1348,73,1121,77],[1348,74,1121,78],[1349,10,1122,12],[1349,17,1122,19],[1349,21,1122,23,"Uint8Array"],[1349,31,1122,33],[1349,32,1122,34,"buffer"],[1349,38,1122,40],[1349,39,1122,41],[1350,8,1123,8],[1350,9,1123,9],[1350,15,1124,13],[1350,19,1124,17,"crypto"],[1350,25,1124,23],[1350,26,1124,24,"node"],[1350,30,1124,28],[1350,32,1124,30],[1351,10,1125,12],[1351,14,1125,20,"createHmac"],[1351,24,1125,30],[1351,27,1125,35,"crypto"],[1351,33,1125,41],[1351,34,1125,42,"node"],[1351,38,1125,46],[1351,39,1125,20,"createHmac"],[1351,49,1125,30],[1352,10,1126,12],[1352,14,1126,18,"hash"],[1352,18,1126,22],[1352,21,1126,25,"createHmac"],[1352,31,1126,35],[1352,32,1126,36],[1352,40,1126,44],[1352,42,1126,46,"key"],[1352,45,1126,49],[1352,46,1126,50],[1353,10,1127,12,"messages"],[1353,18,1127,20],[1353,19,1127,21,"forEach"],[1353,26,1127,28],[1353,27,1127,29],[1353,37,1127,30,"m"],[1353,38,1127,31],[1354,12,1127,31],[1354,19,1127,36,"hash"],[1354,23,1127,40],[1354,24,1127,41,"update"],[1354,30,1127,47],[1354,31,1127,48,"m"],[1354,32,1127,49],[1354,33,1127,50],[1355,10,1127,50],[1355,12,1127,51],[1356,10,1128,12],[1356,17,1128,19,"Uint8Array"],[1356,27,1128,29],[1356,28,1128,30,"from"],[1356,32,1128,34],[1356,33,1128,35,"hash"],[1356,37,1128,39],[1356,38,1128,40,"digest"],[1356,44,1128,46],[1356,45,1128,47],[1356,46,1128,48],[1356,47,1128,49],[1357,8,1129,8],[1357,9,1129,9],[1357,15,1130,13],[1358,10,1131,12],[1358,16,1131,18],[1358,20,1131,22,"Error"],[1358,25,1131,27],[1358,26,1131,28],[1358,77,1131,79],[1358,78,1131,80],[1359,8,1132,8],[1360,6,1133,4],[1360,7,1133,5],[1361,6,1133,5],[1361,15,1117,4,"hmacSha256"],[1361,25,1117,14,"hmacSha256"],[1361,26,1117,14,"_x8"],[1361,29,1117,14],[1362,8,1117,14],[1362,15,1117,14,"_hmacSha"],[1362,23,1117,14],[1362,24,1117,14,"apply"],[1362,29,1117,14],[1362,36,1117,14,"arguments"],[1362,45,1117,14],[1363,6,1117,14],[1364,6,1117,14],[1364,13,1117,4,"hmacSha256"],[1364,23,1117,14],[1365,4,1117,14],[1365,7,1133,5],[1366,4,1134,4,"sha256Sync"],[1366,14,1134,14],[1366,16,1134,16,"undefined"],[1366,25,1134,25],[1367,4,1135,4,"hmacSha256Sync"],[1367,18,1135,18],[1367,20,1135,20,"undefined"],[1367,29,1135,29],[1368,4,1136,4,"taggedHash"],[1368,14,1136,14],[1369,6,1136,14],[1369,10,1136,14,"_taggedHash"],[1369,21,1136,14],[1369,24,1136,14,"_asyncToGenerator"],[1369,41,1136,14],[1369,42,1136,16],[1369,53,1136,23,"tag"],[1369,56,1136,26],[1369,58,1136,44],[1370,8,1136,44],[1370,12,1136,44,"_exports$utils3"],[1370,27,1136,44],[1371,8,1137,8],[1371,12,1137,12,"tagP"],[1371,16,1137,16],[1371,19,1137,19,"TAGGED_HASH_PREFIXES"],[1371,39,1137,39],[1371,40,1137,40,"tag"],[1371,43,1137,43],[1371,44,1137,44],[1372,8,1138,8],[1372,12,1138,12,"tagP"],[1372,16,1138,16],[1372,21,1138,21,"undefined"],[1372,30,1138,30],[1372,32,1138,32],[1373,10,1139,12],[1373,14,1139,18,"tagH"],[1373,18,1139,22],[1373,27,1139,31,"exports"],[1373,34,1139,38],[1373,35,1139,39,"utils"],[1373,40,1139,44],[1373,41,1139,45,"sha256"],[1373,47,1139,51],[1373,48,1139,52,"Uint8Array"],[1373,58,1139,62],[1373,59,1139,63,"from"],[1373,63,1139,67],[1373,64,1139,68,"tag"],[1373,67,1139,71],[1373,69,1139,73],[1373,79,1139,74,"c"],[1373,80,1139,75],[1374,12,1139,75],[1374,19,1139,80,"c"],[1374,20,1139,81],[1374,21,1139,82,"charCodeAt"],[1374,31,1139,92],[1374,32,1139,93],[1374,33,1139,94],[1374,34,1139,95],[1375,10,1139,95],[1375,12,1139,96],[1375,13,1139,97],[1376,10,1140,12,"tagP"],[1376,14,1140,16],[1376,17,1140,19,"concatBytes"],[1376,28,1140,30],[1376,29,1140,31,"tagH"],[1376,33,1140,35],[1376,35,1140,37,"tagH"],[1376,39,1140,41],[1376,40,1140,42],[1377,10,1141,12,"TAGGED_HASH_PREFIXES"],[1377,30,1141,32],[1377,31,1141,33,"tag"],[1377,34,1141,36],[1377,35,1141,37],[1377,38,1141,40,"tagP"],[1377,42,1141,44],[1378,8,1142,8],[1379,8,1142,9],[1379,17,1142,9,"_len6"],[1379,22,1142,9],[1379,25,1142,9,"arguments"],[1379,34,1142,9],[1379,35,1142,9,"length"],[1379,41,1142,9],[1379,43,1136,31,"messages"],[1379,51,1136,39],[1379,58,1136,39,"Array"],[1379,63,1136,39],[1379,64,1136,39,"_len6"],[1379,69,1136,39],[1379,76,1136,39,"_len6"],[1379,81,1136,39],[1379,92,1136,39,"_key6"],[1379,97,1136,39],[1379,103,1136,39,"_key6"],[1379,108,1136,39],[1379,111,1136,39,"_len6"],[1379,116,1136,39],[1379,118,1136,39,"_key6"],[1379,123,1136,39],[1380,10,1136,31,"messages"],[1380,18,1136,39],[1380,19,1136,39,"_key6"],[1380,24,1136,39],[1380,32,1136,39,"arguments"],[1380,41,1136,39],[1380,42,1136,39,"_key6"],[1380,47,1136,39],[1381,8,1136,39],[1382,8,1143,8],[1382,15,1143,15],[1382,16,1143,15,"_exports$utils3"],[1382,31,1143,15],[1382,34,1143,15,"exports"],[1382,41,1143,22],[1382,42,1143,23,"utils"],[1382,47,1143,28],[1382,49,1143,29,"sha256"],[1382,55,1143,35],[1382,56,1143,35,"apply"],[1382,61,1143,35],[1382,62,1143,35,"_exports$utils3"],[1382,77,1143,35],[1382,80,1143,36,"tagP"],[1382,84,1143,40],[1382,86,1143,40,"concat"],[1382,92,1143,40],[1382,93,1143,45,"messages"],[1382,101,1143,53],[1382,103,1143,54],[1383,6,1144,4],[1383,7,1144,5],[1384,6,1144,5],[1384,15,1136,4,"taggedHash"],[1384,25,1136,14,"taggedHash"],[1384,26,1136,14,"_x9"],[1384,29,1136,14],[1385,8,1136,14],[1385,15,1136,14,"_taggedHash"],[1385,26,1136,14],[1385,27,1136,14,"apply"],[1385,32,1136,14],[1385,39,1136,14,"arguments"],[1385,48,1136,14],[1386,6,1136,14],[1387,6,1136,14],[1387,13,1136,4,"taggedHash"],[1387,23,1136,14],[1388,4,1136,14],[1388,7,1144,5],[1389,4,1145,4,"taggedHashSync"],[1389,18,1145,18],[1389,20,1145,20],[1389,29,1145,4,"taggedHashSync"],[1389,43,1145,18,"taggedHashSync"],[1389,44,1145,21,"tag"],[1389,47,1145,24],[1389,49,1145,42],[1390,6,1145,42],[1390,10,1145,42,"_exports$utils4"],[1390,25,1145,42],[1391,6,1146,8],[1391,10,1146,12],[1391,17,1146,19,"exports"],[1391,24,1146,26],[1391,25,1146,27,"utils"],[1391,30,1146,32],[1391,31,1146,33,"sha256Sync"],[1391,41,1146,43],[1391,46,1146,48],[1391,56,1146,58],[1391,58,1147,12],[1391,64,1147,18],[1391,68,1147,22,"Error"],[1391,73,1147,27],[1391,74,1147,28],[1391,125,1147,79],[1391,126,1147,80],[1392,6,1148,8],[1392,10,1148,12,"tagP"],[1392,14,1148,16],[1392,17,1148,19,"TAGGED_HASH_PREFIXES"],[1392,37,1148,39],[1392,38,1148,40,"tag"],[1392,41,1148,43],[1392,42,1148,44],[1393,6,1149,8],[1393,10,1149,12,"tagP"],[1393,14,1149,16],[1393,19,1149,21,"undefined"],[1393,28,1149,30],[1393,30,1149,32],[1394,8,1150,12],[1394,12,1150,18,"tagH"],[1394,16,1150,22],[1394,19,1150,25,"exports"],[1394,26,1150,32],[1394,27,1150,33,"utils"],[1394,32,1150,38],[1394,33,1150,39,"sha256Sync"],[1394,43,1150,49],[1394,44,1150,50,"Uint8Array"],[1394,54,1150,60],[1394,55,1150,61,"from"],[1394,59,1150,65],[1394,60,1150,66,"tag"],[1394,63,1150,69],[1394,65,1150,71],[1394,75,1150,72,"c"],[1394,76,1150,73],[1395,10,1150,73],[1395,17,1150,78,"c"],[1395,18,1150,79],[1395,19,1150,80,"charCodeAt"],[1395,29,1150,90],[1395,30,1150,91],[1395,31,1150,92],[1395,32,1150,93],[1396,8,1150,93],[1396,10,1150,94],[1396,11,1150,95],[1397,8,1151,12,"tagP"],[1397,12,1151,16],[1397,15,1151,19,"concatBytes"],[1397,26,1151,30],[1397,27,1151,31,"tagH"],[1397,31,1151,35],[1397,33,1151,37,"tagH"],[1397,37,1151,41],[1397,38,1151,42],[1398,8,1152,12,"TAGGED_HASH_PREFIXES"],[1398,28,1152,32],[1398,29,1152,33,"tag"],[1398,32,1152,36],[1398,33,1152,37],[1398,36,1152,40,"tagP"],[1398,40,1152,44],[1399,6,1153,8],[1400,6,1153,9],[1400,15,1153,9,"_len7"],[1400,20,1153,9],[1400,23,1153,9,"arguments"],[1400,32,1153,9],[1400,33,1153,9,"length"],[1400,39,1153,9],[1400,41,1145,29,"messages"],[1400,49,1145,37],[1400,56,1145,37,"Array"],[1400,61,1145,37],[1400,62,1145,37,"_len7"],[1400,67,1145,37],[1400,74,1145,37,"_len7"],[1400,79,1145,37],[1400,90,1145,37,"_key7"],[1400,95,1145,37],[1400,101,1145,37,"_key7"],[1400,106,1145,37],[1400,109,1145,37,"_len7"],[1400,114,1145,37],[1400,116,1145,37,"_key7"],[1400,121,1145,37],[1401,8,1145,29,"messages"],[1401,16,1145,37],[1401,17,1145,37,"_key7"],[1401,22,1145,37],[1401,30,1145,37,"arguments"],[1401,39,1145,37],[1401,40,1145,37,"_key7"],[1401,45,1145,37],[1402,6,1145,37],[1403,6,1154,8],[1403,13,1154,15],[1403,14,1154,15,"_exports$utils4"],[1403,29,1154,15],[1403,32,1154,15,"exports"],[1403,39,1154,22],[1403,40,1154,23,"utils"],[1403,45,1154,28],[1403,47,1154,29,"sha256Sync"],[1403,57,1154,39],[1403,58,1154,39,"apply"],[1403,63,1154,39],[1403,64,1154,39,"_exports$utils4"],[1403,79,1154,39],[1403,82,1154,40,"tagP"],[1403,86,1154,44],[1403,88,1154,44,"concat"],[1403,94,1154,44],[1403,95,1154,49,"messages"],[1403,103,1154,57],[1403,105,1154,58],[1404,4,1155,4],[1404,5,1155,5],[1405,4,1156,4,"precompute"],[1405,14,1156,14],[1405,25,1156,4,"precompute"],[1405,35,1156,14,"precompute"],[1405,36,1156,14],[1405,38,1156,51],[1406,6,1156,51],[1406,10,1156,15,"windowSize"],[1406,20,1156,25],[1406,23,1156,25,"arguments"],[1406,32,1156,25],[1406,33,1156,25,"length"],[1406,39,1156,25],[1406,47,1156,25,"arguments"],[1406,56,1156,25],[1406,64,1156,25,"undefined"],[1406,73,1156,25],[1406,76,1156,25,"arguments"],[1406,85,1156,25],[1406,91,1156,28],[1406,92,1156,29],[1407,6,1156,29],[1407,10,1156,31,"point"],[1407,15,1156,36],[1407,18,1156,36,"arguments"],[1407,27,1156,36],[1407,28,1156,36,"length"],[1407,34,1156,36],[1407,42,1156,36,"arguments"],[1407,51,1156,36],[1407,59,1156,36,"undefined"],[1407,68,1156,36],[1407,71,1156,36,"arguments"],[1407,80,1156,36],[1407,86,1156,39,"Point"],[1407,91,1156,44],[1407,92,1156,45,"BASE"],[1407,96,1156,49],[1408,6,1157,8],[1408,10,1157,14,"cached"],[1408,16,1157,20],[1408,19,1157,23,"point"],[1408,24,1157,28],[1408,29,1157,33,"Point"],[1408,34,1157,38],[1408,35,1157,39,"BASE"],[1408,39,1157,43],[1408,42,1157,46,"point"],[1408,47,1157,51],[1408,50,1157,54],[1408,54,1157,58,"Point"],[1408,59,1157,63],[1408,60,1157,64,"point"],[1408,65,1157,69],[1408,66,1157,70,"x"],[1408,67,1157,71],[1408,69,1157,73,"point"],[1408,74,1157,78],[1408,75,1157,79,"y"],[1408,76,1157,80],[1408,77,1157,81],[1409,6,1158,8,"cached"],[1409,12,1158,14],[1409,13,1158,15,"_setWindowSize"],[1409,27,1158,29],[1409,28,1158,30,"windowSize"],[1409,38,1158,40],[1409,39,1158,41],[1410,6,1159,8,"cached"],[1410,12,1159,14],[1410,13,1159,15,"multiply"],[1410,21,1159,23],[1410,22,1159,24,"_3n"],[1410,25,1159,27],[1410,26,1159,28],[1411,6,1160,8],[1411,13,1160,15,"cached"],[1411,19,1160,21],[1412,4,1161,4],[1413,2,1162,0],[1413,3,1162,1],[1414,0,1162,2],[1414,3]],"functionMap":{"names":["<global>","weistrass","JacobianPoint","JacobianPoint#constructor","JacobianPoint.fromAffine","JacobianPoint.toAffineBatch","points.map$argument_0","JacobianPoint.normalizeZ","JacobianPoint#equals","JacobianPoint#negate","JacobianPoint#double","JacobianPoint#add","JacobianPoint#subtract","JacobianPoint#multiplyUnsafe","JacobianPoint#precomputeWindow","JacobianPoint#wNAF","JacobianPoint#multiply","JacobianPoint#toAffine","Point","Point#constructor","Point#_setWindowSize","Point.fromCompressedHex","Point.fromUncompressedHex","Point.fromHex","Point.fromPrivateKey","Point.fromSignature","Point#toRawBytes","Point#toHex","Point#toHexX","Point#toRawX","Point#assertValidity","Point#equals","Point#negate","Point#double","Point#add","Point#subtract","Point#multiply","Point#multiplyAndAddUnsafe","sliceDER","parseDERInt","parseDERSignature","Signature","Signature#constructor","Signature.fromCompact","Signature.fromDER","Signature.fromHex","Signature#assertValidity","Signature#hasHighS","Signature#normalizeS","Signature#toDERRawBytes","Signature#toDERHex","Signature#toRawBytes","Signature#toHex","Signature#toCompactRawBytes","Signature#toCompactHex","concatBytes","arrays.reduce$argument_0","isUint8a","Array.from$argument_1","bytesToHex","numTo32bStr","numTo32b","numberToHexUnpadded","hexToNumber","hexToBytes","bytesToNumber","ensureBytes","normalizeScalar","mod","pow2","sqrtMod","invert","invertBatch","nums.reduce$argument_0","nums.reduceRight$argument_0","divNearest","splitScalarEndo","truncateHash","HmacDrbg","HmacDrbg#constructor","HmacDrbg#hmac","HmacDrbg#hmacSync","HmacDrbg#incr","HmacDrbg#reseed","HmacDrbg#reseedSync","HmacDrbg#generate","HmacDrbg#generateSync","isWithinCurveOrder","isValidFieldElement","kmdToSig","normalizePrivateKey","normalizePublicKey","normalizeSignature","getPublicKey","recoverPublicKey","isPub","getSharedSecret","bits2int","bits2octets","int2octets","initSigArgs","finalizeSig","sign","signSync","verify","finalizeSchnorrChallenge","hasEvenY","SchnorrSignature","SchnorrSignature#constructor","SchnorrSignature.fromHex","SchnorrSignature#assertValidity","SchnorrSignature#toHex","SchnorrSignature#toRawBytes","schnorrGetPublicKey","initSchnorrSigArgs","initSchnorrNonce","finalizeSchnorrNonce","finalizeSchnorrSig","schnorrSign","schnorrSignSync","initSchnorrVerify","finalizeSchnorrVerify","schnorrVerify","schnorrVerifySync","exports.utils.isValidPrivateKey","exports.utils.privateAdd","exports.utils.privateNegate","exports.utils.pointAddScalar","exports.utils.pointMultiply","exports.utils.hashToPrivateKey","exports.utils.randomBytes","exports.utils.randomPrivateKey","exports.utils.sha256","messages.forEach$argument_0","exports.utils.hmacSha256","exports.utils.taggedHash","Uint8Array.from$argument_1","exports.utils.taggedHashSync","exports.utils.precompute"],"mappings":"AAA;ACsB;CDK;AEE;ICC;KDI;IEC;KFK;IGC;6CCC,UD;0BCC,8BD;KHC;IKC;KLE;IMC;KNY;IOC;KPE;IQC;KRY;ISC;KTgC;IUC;KVE;IWC;KXqC;IYC;KZe;IaC;Kb4C;IcC;KdsB;IeC;KfW;CFC;AkBI;ICC;KDG;IEC;KFG;IGC;KHoB;IIC;KJM;IKC;KLU;IMC;KNE;IOC;KPkB;IQC;KRE;ISC;KTS;IUC;KVE;IWC;KXE;IYC;KZS;IaC;KbE;IcC;KdE;IeC;KfE;IgBC;KhBE;IiBC;KjBE;IkBC;KlBE;ImBC;KnBM;ClBC;AsCI;CtCE;AuCC;CvCa;AwCC;CxCa;AyCC;ICC;KDI;IEC;KFS;IGC;KHM;IIC;KJE;IKC;KLM;IMC;KNG;IOC;KPE;IQC;KRE;ISC;KTS;IUC;KVE;IWC;KXE;IYC;KZE;IaC;KbE;CzCC;AuDE;iCCK,0BD;CvDQ;AyDC;CzDE;0C0DC,yC1D;A2DC;C3DQ;A4DC;C5DI;A6DC;C7DE;A8DC;C9DG;A+DC;C/DK;AgEC;ChEgB;AiEC;CjEE;AkEC;ClEE;AmEC;CnEM;AoEC;CpEG;AqEC;CrEQ;AsEC;CtEsB;AuEC;CvEkB;AwEC;uCCE;KDK;qBEE;KFK;CxEE;mB2EC,2B3E;A4EE;C5EoB;A6EC;C7EU;A8EC;ICC;KDI;IEC;KFE;IGC;KHO;IIC;KJK;IKC;KLO;IMC;KNO;IOC;KPI;IQC;KRI;C9EC;AuFC;CvFE;AwFC;CxFE;AyFC;CzFe;A0FC;C1FwB;A2FC;C3FQ;A4FC;C5FW;A6FC;C7FE;A8FE;C9FE;A+FE;C/FW;AgGC;ChGQ;AiGE;CjGG;AkGC;ClGI;AmGC;CnGK;AoGC;CpGiB;AqGC;CrGS;AsGC;CtGQ;AuGE;CvGQ;AwGG;CxG6B;AyGE;CzGE;A0GC;C1GE;A2GC;ICC;KDI;IEC;KFO;IGC;KHI;IIC;KJE;IKC;KLE;C3GC;AiHC;CjHE;AkHC;ClHY;AmHC;CnHE;AoHC;CpHQ;AqHC;CrHE;AsHC;CtHU;AuHC;CvHU;AwHC;CxHU;AyHC;CzHK;A0HC;C1HS;A2HC;C3HS;I4HqB;K5HQ;gB6HC;K7HI;mB8HC;K9HG;oB+HC;K/HO;mBgIC;KhII;sBiIC;KjIM;iBkIC;KlIW;sBmIC;KnIE;YoIM;6BCQ,qBD;KpIM;gBsIC;6BDU,qBC;KtIM;gBuIG;yECG,sBD;KvIK;oByIC;uEDK,sBC;KzIK;I0IC;K1IK"}},"type":"js/module"}]}