{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":467,"column":0,"index":14949}}],"key":"5y7e5+zC7teYEEC6niD9f5zII1M="}},{"name":"./match-graph","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":22,"index":431},"end":{"line":9,"column":62,"index":471}},{"start":{"line":9,"column":22,"index":431},"end":{"line":9,"column":62,"index":471}},{"start":{"line":9,"column":22,"index":431},"end":{"line":9,"column":62,"index":471}},{"start":{"line":9,"column":22,"index":431},"end":{"line":9,"column":62,"index":471}}],"key":"FCZvlNKlTD5d7PCxUNzj1QfxgE4="}},{"name":"../definition-syntax/generate","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":15,"index":269},"end":{"line":6,"column":55,"index":309}},{"start":{"line":6,"column":15,"index":269},"end":{"line":6,"column":55,"index":309}}],"key":"w0l5t/Jf1sNLF1hV0Sc5Cra1Bgg="}},{"name":"./trace","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":12,"index":535},"end":{"line":11,"column":30,"index":553}},{"start":{"line":11,"column":12,"index":535},"end":{"line":11,"column":30,"index":553}},{"start":{"line":11,"column":12,"index":535},"end":{"line":11,"column":30,"index":553}},{"start":{"line":11,"column":12,"index":535},"end":{"line":11,"column":30,"index":553}}],"key":"iRFsLcgtciI9N1wyLWhAVOdtROY="}},{"name":"./prepare-tokens","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":20,"index":380},"end":{"line":8,"column":47,"index":407}}],"key":"dELhmCyz+QIZtgVSf/ybIOe80KQ="}},{"name":"./match","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":18,"index":491},"end":{"line":10,"column":48,"index":521}},{"start":{"line":10,"column":18,"index":491},"end":{"line":10,"column":48,"index":521}}],"key":"i/V+fCltWAqmU/ZaqT2uhzqXnW0="}},{"name":"./error","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":23,"index":91},"end":{"line":2,"column":58,"index":126}},{"start":{"line":1,"column":27,"index":27},"end":{"line":1,"column":66,"index":66}},{"start":{"line":1,"column":27,"index":27},"end":{"line":1,"column":66,"index":66}},{"start":{"line":1,"column":27,"index":27},"end":{"line":1,"column":66,"index":66}},{"start":{"line":1,"column":27,"index":27},"end":{"line":1,"column":66,"index":66}},{"start":{"line":1,"column":27,"index":27},"end":{"line":1,"column":66,"index":66}}],"key":"ABL1W5lBwNEqpjG9q/KVa7squiQ="}},{"name":"./structure","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":29,"index":618},"end":{"line":13,"column":74,"index":663}}],"key":"9LD0W5ODTigK+6pHJszl+pI+i8w="}},{"name":"./generic","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":14,"index":181},"end":{"line":4,"column":34,"index":201}},{"start":{"line":4,"column":14,"index":181},"end":{"line":4,"column":34,"index":201}},{"start":{"line":4,"column":14,"index":181},"end":{"line":4,"column":34,"index":201}}],"key":"oWN8T1FewMEPfRgNVLHWQbhlrwg="}},{"name":"../definition-syntax/parse","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":12,"index":215},"end":{"line":5,"column":49,"index":252}}],"key":"sn+RN7tJU4ThPOKAEy6L7OdQWFs="}},{"name":"../utils/names","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":12,"index":140},"end":{"line":3,"column":37,"index":165}},{"start":{"line":3,"column":12,"index":140},"end":{"line":3,"column":37,"index":165}},{"start":{"line":3,"column":12,"index":140},"end":{"line":3,"column":37,"index":165}},{"start":{"line":3,"column":12,"index":140},"end":{"line":3,"column":37,"index":165}},{"start":{"line":3,"column":12,"index":140},"end":{"line":3,"column":37,"index":165}}],"key":"L2MKZtQXn0W8qTjLJhkpTgzKTxA="}},{"name":"./search","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":13,"index":568},"end":{"line":12,"column":32,"index":587}},{"start":{"line":12,"column":13,"index":568},"end":{"line":12,"column":32,"index":587}}],"key":"xPlM0I1iuKDSFJx1zl3Iq73ihV0="}},{"name":"../definition-syntax/walk","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":11,"index":322},"end":{"line":7,"column":47,"index":358}}],"key":"/W+O35B4MJwzhxMaxq4wfrc2ofA="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var cssWideKeywords = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").buildMatchGraph('inherit | initial | unset');\n  var cssWideKeywordsWithExpression = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").buildMatchGraph('inherit | initial | unset | <-ms-legacy-expression>');\n  function dumpMapSyntax(map, compact, syntaxAsAst) {\n    var result = {};\n    for (var name in map) {\n      if (map[name].syntax) {\n        result[name] = syntaxAsAst ? map[name].syntax : _$$_REQUIRE(_dependencyMap[2], \"../definition-syntax/generate\")(map[name].syntax, {\n          compact: compact\n        });\n      }\n    }\n    return result;\n  }\n  function dumpAtruleMapSyntax(map, compact, syntaxAsAst) {\n    var result = {};\n    for (var _ref of Object.entries(map)) {\n      var _ref2 = _slicedToArray(_ref, 2);\n      var name = _ref2[0];\n      var atrule = _ref2[1];\n      result[name] = {\n        prelude: atrule.prelude && (syntaxAsAst ? atrule.prelude.syntax : _$$_REQUIRE(_dependencyMap[2], \"../definition-syntax/generate\")(atrule.prelude.syntax, {\n          compact: compact\n        })),\n        descriptors: atrule.descriptors && dumpMapSyntax(atrule.descriptors, compact, syntaxAsAst)\n      };\n    }\n    return result;\n  }\n  function valueHasVar(tokens) {\n    for (var i = 0; i < tokens.length; i++) {\n      if (tokens[i].value.toLowerCase() === 'var(') {\n        return true;\n      }\n    }\n    return false;\n  }\n  function buildMatchResult(match, error, iterations) {\n    return {\n      matched: match,\n      iterations: iterations,\n      error: error,\n      getTrace: _$$_REQUIRE(_dependencyMap[3], \"./trace\").getTrace,\n      isType: _$$_REQUIRE(_dependencyMap[3], \"./trace\").isType,\n      isProperty: _$$_REQUIRE(_dependencyMap[3], \"./trace\").isProperty,\n      isKeyword: _$$_REQUIRE(_dependencyMap[3], \"./trace\").isKeyword\n    };\n  }\n  function matchSyntax(lexer, syntax, value, useCommon) {\n    var tokens = _$$_REQUIRE(_dependencyMap[4], \"./prepare-tokens\")(value, lexer.syntax);\n    var result;\n    if (valueHasVar(tokens)) {\n      return buildMatchResult(null, new Error('Matching for a tree with var() is not supported'));\n    }\n    if (useCommon) {\n      result = _$$_REQUIRE(_dependencyMap[5], \"./match\").matchAsTree(tokens, lexer.valueCommonSyntax, lexer);\n    }\n    if (!useCommon || !result.match) {\n      result = _$$_REQUIRE(_dependencyMap[5], \"./match\").matchAsTree(tokens, syntax.match, lexer);\n      if (!result.match) {\n        return buildMatchResult(null, new (_$$_REQUIRE(_dependencyMap[6], \"./error\").SyntaxMatchError)(result.reason, syntax.syntax, value, result), result.iterations);\n      }\n    }\n    return buildMatchResult(result.match, null, result.iterations);\n  }\n  var Lexer = function Lexer(config, syntax, structure) {\n    this.valueCommonSyntax = cssWideKeywords;\n    this.syntax = syntax;\n    this.generic = false;\n    this.atrules = {};\n    this.properties = {};\n    this.types = {};\n    this.structure = structure || _$$_REQUIRE(_dependencyMap[7], \"./structure\").getStructureFromConfig(config);\n    if (config) {\n      if (config.types) {\n        for (var name in config.types) {\n          this.addType_(name, config.types[name]);\n        }\n      }\n      if (config.generic) {\n        this.generic = true;\n        for (var name in _$$_REQUIRE(_dependencyMap[8], \"./generic\")) {\n          this.addType_(name, _$$_REQUIRE(_dependencyMap[8], \"./generic\")[name]);\n        }\n      }\n      if (config.atrules) {\n        for (var name in config.atrules) {\n          this.addAtrule_(name, config.atrules[name]);\n        }\n      }\n      if (config.properties) {\n        for (var name in config.properties) {\n          this.addProperty_(name, config.properties[name]);\n        }\n      }\n    }\n  };\n  Lexer.prototype = {\n    structure: {},\n    checkStructure: function checkStructure(ast) {\n      function collectWarning(node, message) {\n        warns.push({\n          node: node,\n          message: message\n        });\n      }\n      var structure = this.structure;\n      var warns = [];\n      this.syntax.walk(ast, function (node) {\n        if (structure.hasOwnProperty(node.type)) {\n          structure[node.type].check(node, collectWarning);\n        } else {\n          collectWarning(node, 'Unknown node type `' + node.type + '`');\n        }\n      });\n      return warns.length ? warns : false;\n    },\n    createDescriptor: function createDescriptor(syntax, type, name) {\n      var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var ref = {\n        type: type,\n        name: name\n      };\n      var descriptor = {\n        type: type,\n        name: name,\n        parent: parent,\n        syntax: null,\n        match: null\n      };\n      if (typeof syntax === 'function') {\n        descriptor.match = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").buildMatchGraph(syntax, ref);\n      } else {\n        if (typeof syntax === 'string') {\n          // lazy parsing on first access\n          Object.defineProperty(descriptor, 'syntax', {\n            get: function get() {\n              Object.defineProperty(descriptor, 'syntax', {\n                value: _$$_REQUIRE(_dependencyMap[9], \"../definition-syntax/parse\")(syntax)\n              });\n              return descriptor.syntax;\n            }\n          });\n        } else {\n          descriptor.syntax = syntax;\n        }\n\n        // lazy graph build on first access\n        Object.defineProperty(descriptor, 'match', {\n          get: function get() {\n            Object.defineProperty(descriptor, 'match', {\n              value: _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").buildMatchGraph(descriptor.syntax, ref)\n            });\n            return descriptor.match;\n          }\n        });\n      }\n      return descriptor;\n    },\n    addAtrule_: function addAtrule_(name, syntax) {\n      var _this = this;\n      if (!syntax) {\n        return;\n      }\n      this.atrules[name] = {\n        type: 'Atrule',\n        name: name,\n        prelude: syntax.prelude ? this.createDescriptor(syntax.prelude, 'AtrulePrelude', name) : null,\n        descriptors: syntax.descriptors ? Object.keys(syntax.descriptors).reduce(function (res, descName) {\n          res[descName] = _this.createDescriptor(syntax.descriptors[descName], 'AtruleDescriptor', descName, name);\n          return res;\n        }, {}) : null\n      };\n    },\n    addProperty_: function addProperty_(name, syntax) {\n      if (!syntax) {\n        return;\n      }\n      this.properties[name] = this.createDescriptor(syntax, 'Property', name);\n    },\n    addType_: function addType_(name, syntax) {\n      if (!syntax) {\n        return;\n      }\n      this.types[name] = this.createDescriptor(syntax, 'Type', name);\n      if (syntax === _$$_REQUIRE(_dependencyMap[8], \"./generic\")['-ms-legacy-expression']) {\n        this.valueCommonSyntax = cssWideKeywordsWithExpression;\n      }\n    },\n    checkAtruleName: function checkAtruleName(atruleName) {\n      if (!this.getAtrule(atruleName)) {\n        return new (_$$_REQUIRE(_dependencyMap[6], \"./error\").SyntaxReferenceError)('Unknown at-rule', '@' + atruleName);\n      }\n    },\n    checkAtrulePrelude: function checkAtrulePrelude(atruleName, prelude) {\n      var error = this.checkAtruleName(atruleName);\n      if (error) {\n        return error;\n      }\n      var atrule = this.getAtrule(atruleName);\n      if (!atrule.prelude && prelude) {\n        return new SyntaxError('At-rule `@' + atruleName + '` should not contain a prelude');\n      }\n      if (atrule.prelude && !prelude) {\n        return new SyntaxError('At-rule `@' + atruleName + '` should contain a prelude');\n      }\n    },\n    checkAtruleDescriptorName: function checkAtruleDescriptorName(atruleName, descriptorName) {\n      var error = this.checkAtruleName(atruleName);\n      if (error) {\n        return error;\n      }\n      var atrule = this.getAtrule(atruleName);\n      var descriptor = _$$_REQUIRE(_dependencyMap[10], \"../utils/names\").keyword(descriptorName);\n      if (!atrule.descriptors) {\n        return new SyntaxError('At-rule `@' + atruleName + '` has no known descriptors');\n      }\n      if (!atrule.descriptors[descriptor.name] && !atrule.descriptors[descriptor.basename]) {\n        return new (_$$_REQUIRE(_dependencyMap[6], \"./error\").SyntaxReferenceError)('Unknown at-rule descriptor', descriptorName);\n      }\n    },\n    checkPropertyName: function checkPropertyName(propertyName) {\n      var property = _$$_REQUIRE(_dependencyMap[10], \"../utils/names\").property(propertyName);\n\n      // don't match syntax for a custom property\n      if (property.custom) {\n        return new Error('Lexer matching doesn\\'t applicable for custom properties');\n      }\n      if (!this.getProperty(propertyName)) {\n        return new (_$$_REQUIRE(_dependencyMap[6], \"./error\").SyntaxReferenceError)('Unknown property', propertyName);\n      }\n    },\n    matchAtrulePrelude: function matchAtrulePrelude(atruleName, prelude) {\n      var error = this.checkAtrulePrelude(atruleName, prelude);\n      if (error) {\n        return buildMatchResult(null, error);\n      }\n      if (!prelude) {\n        return buildMatchResult(null, null);\n      }\n      return matchSyntax(this, this.getAtrule(atruleName).prelude, prelude, false);\n    },\n    matchAtruleDescriptor: function matchAtruleDescriptor(atruleName, descriptorName, value) {\n      var error = this.checkAtruleDescriptorName(atruleName, descriptorName);\n      if (error) {\n        return buildMatchResult(null, error);\n      }\n      var atrule = this.getAtrule(atruleName);\n      var descriptor = _$$_REQUIRE(_dependencyMap[10], \"../utils/names\").keyword(descriptorName);\n      return matchSyntax(this, atrule.descriptors[descriptor.name] || atrule.descriptors[descriptor.basename], value, false);\n    },\n    matchDeclaration: function matchDeclaration(node) {\n      if (node.type !== 'Declaration') {\n        return buildMatchResult(null, new Error('Not a Declaration node'));\n      }\n      return this.matchProperty(node.property, node.value);\n    },\n    matchProperty: function matchProperty(propertyName, value) {\n      var error = this.checkPropertyName(propertyName);\n      if (error) {\n        return buildMatchResult(null, error);\n      }\n      return matchSyntax(this, this.getProperty(propertyName), value, true);\n    },\n    matchType: function matchType(typeName, value) {\n      var typeSyntax = this.getType(typeName);\n      if (!typeSyntax) {\n        return buildMatchResult(null, new (_$$_REQUIRE(_dependencyMap[6], \"./error\").SyntaxReferenceError)('Unknown type', typeName));\n      }\n      return matchSyntax(this, typeSyntax, value, false);\n    },\n    match: function match(syntax, value) {\n      if (typeof syntax !== 'string' && (!syntax || !syntax.type)) {\n        return buildMatchResult(null, new (_$$_REQUIRE(_dependencyMap[6], \"./error\").SyntaxReferenceError)('Bad syntax'));\n      }\n      if (typeof syntax === 'string' || !syntax.match) {\n        syntax = this.createDescriptor(syntax, 'Type', 'anonymous');\n      }\n      return matchSyntax(this, syntax, value, false);\n    },\n    findValueFragments: function findValueFragments(propertyName, value, type, name) {\n      return _$$_REQUIRE(_dependencyMap[11], \"./search\").matchFragments(this, value, this.matchProperty(propertyName, value), type, name);\n    },\n    findDeclarationValueFragments: function findDeclarationValueFragments(declaration, type, name) {\n      return _$$_REQUIRE(_dependencyMap[11], \"./search\").matchFragments(this, declaration.value, this.matchDeclaration(declaration), type, name);\n    },\n    findAllFragments: function findAllFragments(ast, type, name) {\n      var result = [];\n      this.syntax.walk(ast, {\n        visit: 'Declaration',\n        enter: function (declaration) {\n          result.push.apply(result, this.findDeclarationValueFragments(declaration, type, name));\n        }.bind(this)\n      });\n      return result;\n    },\n    getAtrule: function getAtrule(atruleName) {\n      var fallbackBasename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var atrule = _$$_REQUIRE(_dependencyMap[10], \"../utils/names\").keyword(atruleName);\n      var atruleEntry = atrule.vendor && fallbackBasename ? this.atrules[atrule.name] || this.atrules[atrule.basename] : this.atrules[atrule.name];\n      return atruleEntry || null;\n    },\n    getAtrulePrelude: function getAtrulePrelude(atruleName) {\n      var fallbackBasename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var atrule = this.getAtrule(atruleName, fallbackBasename);\n      return atrule && atrule.prelude || null;\n    },\n    getAtruleDescriptor: function getAtruleDescriptor(atruleName, name) {\n      return this.atrules.hasOwnProperty(atruleName) && this.atrules.declarators ? this.atrules[atruleName].declarators[name] || null : null;\n    },\n    getProperty: function getProperty(propertyName) {\n      var fallbackBasename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var property = _$$_REQUIRE(_dependencyMap[10], \"../utils/names\").property(propertyName);\n      var propertyEntry = property.vendor && fallbackBasename ? this.properties[property.name] || this.properties[property.basename] : this.properties[property.name];\n      return propertyEntry || null;\n    },\n    getType: function getType(name) {\n      return this.types.hasOwnProperty(name) ? this.types[name] : null;\n    },\n    validate: function validate() {\n      function validate(syntax, name, broken, descriptor) {\n        if (broken.hasOwnProperty(name)) {\n          return broken[name];\n        }\n        broken[name] = false;\n        if (descriptor.syntax !== null) {\n          _$$_REQUIRE(_dependencyMap[12], \"../definition-syntax/walk\")(descriptor.syntax, function (node) {\n            if (node.type !== 'Type' && node.type !== 'Property') {\n              return;\n            }\n            var map = node.type === 'Type' ? syntax.types : syntax.properties;\n            var brokenMap = node.type === 'Type' ? brokenTypes : brokenProperties;\n            if (!map.hasOwnProperty(node.name) || validate(syntax, node.name, brokenMap, map[node.name])) {\n              broken[name] = true;\n            }\n          }, this);\n        }\n      }\n      var brokenTypes = {};\n      var brokenProperties = {};\n      for (var key in this.types) {\n        validate(this, key, brokenTypes, this.types[key]);\n      }\n      for (var key in this.properties) {\n        validate(this, key, brokenProperties, this.properties[key]);\n      }\n      brokenTypes = Object.keys(brokenTypes).filter(function (name) {\n        return brokenTypes[name];\n      });\n      brokenProperties = Object.keys(brokenProperties).filter(function (name) {\n        return brokenProperties[name];\n      });\n      if (brokenTypes.length || brokenProperties.length) {\n        return {\n          types: brokenTypes,\n          properties: brokenProperties\n        };\n      }\n      return null;\n    },\n    dump: function dump(syntaxAsAst, pretty) {\n      return {\n        generic: this.generic,\n        types: dumpMapSyntax(this.types, !pretty, syntaxAsAst),\n        properties: dumpMapSyntax(this.properties, !pretty, syntaxAsAst),\n        atrules: dumpAtruleMapSyntax(this.atrules, !pretty, syntaxAsAst)\n      };\n    },\n    toString: function toString() {\n      return JSON.stringify(this.dump());\n    }\n  };\n  module.exports = Lexer;\n});","lineCount":375,"map":[[3,2,14,0],[3,6,14,4,"cssWideKeywords"],[3,21,14,19],[3,24,14,22,"_$$_REQUIRE"],[3,35,14,22],[3,36,14,22,"_dependencyMap"],[3,50,14,22],[3,72,14,22,"buildMatchGraph"],[3,87,14,22],[3,88,14,38],[3,115,14,65],[3,116,14,66],[4,2,15,0],[4,6,15,4,"cssWideKeywordsWithExpression"],[4,35,15,33],[4,38,15,36,"_$$_REQUIRE"],[4,49,15,36],[4,50,15,36,"_dependencyMap"],[4,64,15,36],[4,86,15,36,"buildMatchGraph"],[4,101,15,36],[4,102,15,52],[4,155,15,105],[4,156,15,106],[5,2,17,0],[5,11,17,9,"dumpMapSyntax"],[5,24,17,22,"dumpMapSyntax"],[5,25,17,23,"map"],[5,28,17,26],[5,30,17,28,"compact"],[5,37,17,35],[5,39,17,37,"syntaxAsAst"],[5,50,17,48],[5,52,17,50],[6,4,18,4],[6,8,18,8,"result"],[6,14,18,14],[6,17,18,17],[6,18,18,18],[6,19,18,19],[7,4,20,4],[7,9,20,9],[7,13,20,13,"name"],[7,17,20,17],[7,21,20,21,"map"],[7,24,20,24],[7,26,20,26],[8,6,21,8],[8,10,21,12,"map"],[8,13,21,15],[8,14,21,16,"name"],[8,18,21,20],[8,19,21,21],[8,20,21,22,"syntax"],[8,26,21,28],[8,28,21,30],[9,8,22,12,"result"],[9,14,22,18],[9,15,22,19,"name"],[9,19,22,23],[9,20,22,24],[9,23,22,27,"syntaxAsAst"],[9,34,22,38],[9,37,23,18,"map"],[9,40,23,21],[9,41,23,22,"name"],[9,45,23,26],[9,46,23,27],[9,47,23,28,"syntax"],[9,53,23,34],[9,56,24,18,"_$$_REQUIRE"],[9,67,24,18],[9,68,24,18,"_dependencyMap"],[9,82,24,18],[9,120,24,27,"map"],[9,123,24,30],[9,124,24,31,"name"],[9,128,24,35],[9,129,24,36],[9,130,24,37,"syntax"],[9,136,24,43],[9,138,24,45],[10,10,24,47,"compact"],[10,17,24,54],[10,19,24,56,"compact"],[11,8,24,64],[11,9,24,65],[11,10,24,66],[12,6,25,8],[13,4,26,4],[14,4,28,4],[14,11,28,11,"result"],[14,17,28,17],[15,2,29,0],[16,2,31,0],[16,11,31,9,"dumpAtruleMapSyntax"],[16,30,31,28,"dumpAtruleMapSyntax"],[16,31,31,29,"map"],[16,34,31,32],[16,36,31,34,"compact"],[16,43,31,41],[16,45,31,43,"syntaxAsAst"],[16,56,31,54],[16,58,31,56],[17,4,32,4],[17,8,32,10,"result"],[17,14,32,16],[17,17,32,19],[17,18,32,20],[17,19,32,21],[18,4,34,4],[18,13,34,4,"_ref"],[18,17,34,4],[18,21,34,33,"Object"],[18,27,34,39],[18,28,34,40,"entries"],[18,35,34,47],[18,36,34,48,"map"],[18,39,34,51],[18,40,34,52],[18,42,34,54],[19,6,34,54],[19,10,34,54,"_ref2"],[19,15,34,54],[19,18,34,54,"_slicedToArray"],[19,32,34,54],[19,33,34,54,"_ref"],[19,37,34,54],[20,6,34,54],[20,10,34,16,"name"],[20,14,34,20],[20,17,34,20,"_ref2"],[20,22,34,20],[21,6,34,20],[21,10,34,22,"atrule"],[21,16,34,28],[21,19,34,28,"_ref2"],[21,24,34,28],[22,6,35,8,"result"],[22,12,35,14],[22,13,35,15,"name"],[22,17,35,19],[22,18,35,20],[22,21,35,23],[23,8,36,12,"prelude"],[23,15,36,19],[23,17,36,21,"atrule"],[23,23,36,27],[23,24,36,28,"prelude"],[23,31,36,35],[23,36,37,16,"syntaxAsAst"],[23,47,37,27],[23,50,38,22,"atrule"],[23,56,38,28],[23,57,38,29,"prelude"],[23,64,38,36],[23,65,38,37,"syntax"],[23,71,38,43],[23,74,39,22,"_$$_REQUIRE"],[23,85,39,22],[23,86,39,22,"_dependencyMap"],[23,100,39,22],[23,138,39,31,"atrule"],[23,144,39,37],[23,145,39,38,"prelude"],[23,152,39,45],[23,153,39,46,"syntax"],[23,159,39,52],[23,161,39,54],[24,10,39,56,"compact"],[24,17,39,63],[24,19,39,56,"compact"],[25,8,39,64],[25,9,39,65],[25,10,39,66],[25,11,40,13],[26,8,41,12,"descriptors"],[26,19,41,23],[26,21,41,25,"atrule"],[26,27,41,31],[26,28,41,32,"descriptors"],[26,39,41,43],[26,43,41,47,"dumpMapSyntax"],[26,56,41,60],[26,57,41,61,"atrule"],[26,63,41,67],[26,64,41,68,"descriptors"],[26,75,41,79],[26,77,41,81,"compact"],[26,84,41,88],[26,86,41,90,"syntaxAsAst"],[26,97,41,101],[27,6,42,8],[27,7,42,9],[28,4,43,4],[29,4,45,4],[29,11,45,11,"result"],[29,17,45,17],[30,2,46,0],[31,2,48,0],[31,11,48,9,"valueHasVar"],[31,22,48,20,"valueHasVar"],[31,23,48,21,"tokens"],[31,29,48,27],[31,31,48,29],[32,4,49,4],[32,9,49,9],[32,13,49,13,"i"],[32,14,49,14],[32,17,49,17],[32,18,49,18],[32,20,49,20,"i"],[32,21,49,21],[32,24,49,24,"tokens"],[32,30,49,30],[32,31,49,31,"length"],[32,37,49,37],[32,39,49,39,"i"],[32,40,49,40],[32,42,49,42],[32,44,49,44],[33,6,50,8],[33,10,50,12,"tokens"],[33,16,50,18],[33,17,50,19,"i"],[33,18,50,20],[33,19,50,21],[33,20,50,22,"value"],[33,25,50,27],[33,26,50,28,"toLowerCase"],[33,37,50,39],[33,38,50,40],[33,39,50,41],[33,44,50,46],[33,50,50,52],[33,52,50,54],[34,8,51,12],[34,15,51,19],[34,19,51,23],[35,6,52,8],[36,4,53,4],[37,4,55,4],[37,11,55,11],[37,16,55,16],[38,2,56,0],[39,2,58,0],[39,11,58,9,"buildMatchResult"],[39,27,58,25,"buildMatchResult"],[39,28,58,26,"match"],[39,33,58,31],[39,35,58,33,"error"],[39,40,58,38],[39,42,58,40,"iterations"],[39,52,58,50],[39,54,58,52],[40,4,59,4],[40,11,59,11],[41,6,60,8,"matched"],[41,13,60,15],[41,15,60,17,"match"],[41,20,60,22],[42,6,61,8,"iterations"],[42,16,61,18],[42,18,61,20,"iterations"],[42,28,61,30],[43,6,62,8,"error"],[43,11,62,13],[43,13,62,15,"error"],[43,18,62,20],[44,6,63,8,"getTrace"],[44,14,63,16],[44,16,63,18,"_$$_REQUIRE"],[44,27,63,18],[44,28,63,18,"_dependencyMap"],[44,42,63,18],[44,58,63,24,"getTrace"],[44,66,63,32],[45,6,64,8,"isType"],[45,12,64,14],[45,14,64,16,"_$$_REQUIRE"],[45,25,64,16],[45,26,64,16,"_dependencyMap"],[45,40,64,16],[45,56,64,22,"isType"],[45,62,64,28],[46,6,65,8,"isProperty"],[46,16,65,18],[46,18,65,20,"_$$_REQUIRE"],[46,29,65,20],[46,30,65,20,"_dependencyMap"],[46,44,65,20],[46,60,65,26,"isProperty"],[46,70,65,36],[47,6,66,8,"isKeyword"],[47,15,66,17],[47,17,66,19,"_$$_REQUIRE"],[47,28,66,19],[47,29,66,19,"_dependencyMap"],[47,43,66,19],[47,59,66,25,"isKeyword"],[48,4,67,4],[48,5,67,5],[49,2,68,0],[50,2,70,0],[50,11,70,9,"matchSyntax"],[50,22,70,20,"matchSyntax"],[50,23,70,21,"lexer"],[50,28,70,26],[50,30,70,28,"syntax"],[50,36,70,34],[50,38,70,36,"value"],[50,43,70,41],[50,45,70,43,"useCommon"],[50,54,70,52],[50,56,70,54],[51,4,71,4],[51,8,71,8,"tokens"],[51,14,71,14],[51,17,71,17,"_$$_REQUIRE"],[51,28,71,17],[51,29,71,17,"_dependencyMap"],[51,43,71,17],[51,68,71,31,"value"],[51,73,71,36],[51,75,71,38,"lexer"],[51,80,71,43],[51,81,71,44,"syntax"],[51,87,71,50],[51,88,71,51],[52,4,72,4],[52,8,72,8,"result"],[52,14,72,14],[53,4,74,4],[53,8,74,8,"valueHasVar"],[53,19,74,19],[53,20,74,20,"tokens"],[53,26,74,26],[53,27,74,27],[53,29,74,29],[54,6,75,8],[54,13,75,15,"buildMatchResult"],[54,29,75,31],[54,30,75,32],[54,34,75,36],[54,36,75,38],[54,40,75,42,"Error"],[54,45,75,47],[54,46,75,48],[54,95,75,97],[54,96,75,98],[54,97,75,99],[55,4,76,4],[56,4,78,4],[56,8,78,8,"useCommon"],[56,17,78,17],[56,19,78,19],[57,6,79,8,"result"],[57,12,79,14],[57,15,79,17,"_$$_REQUIRE"],[57,26,79,17],[57,27,79,17,"_dependencyMap"],[57,41,79,17],[57,57,79,17,"matchAsTree"],[57,68,79,17],[57,69,79,29,"tokens"],[57,75,79,35],[57,77,79,37,"lexer"],[57,82,79,42],[57,83,79,43,"valueCommonSyntax"],[57,100,79,60],[57,102,79,62,"lexer"],[57,107,79,67],[57,108,79,68],[58,4,80,4],[59,4,82,4],[59,8,82,8],[59,9,82,9,"useCommon"],[59,18,82,18],[59,22,82,22],[59,23,82,23,"result"],[59,29,82,29],[59,30,82,30,"match"],[59,35,82,35],[59,37,82,37],[60,6,83,8,"result"],[60,12,83,14],[60,15,83,17,"_$$_REQUIRE"],[60,26,83,17],[60,27,83,17,"_dependencyMap"],[60,41,83,17],[60,57,83,17,"matchAsTree"],[60,68,83,17],[60,69,83,29,"tokens"],[60,75,83,35],[60,77,83,37,"syntax"],[60,83,83,43],[60,84,83,44,"match"],[60,89,83,49],[60,91,83,51,"lexer"],[60,96,83,56],[60,97,83,57],[61,6,84,8],[61,10,84,12],[61,11,84,13,"result"],[61,17,84,19],[61,18,84,20,"match"],[61,23,84,25],[61,25,84,27],[62,8,85,12],[62,15,85,19,"buildMatchResult"],[62,31,85,35],[62,32,86,16],[62,36,86,20],[62,38,87,16],[62,43,87,16,"_$$_REQUIRE"],[62,54,87,16],[62,55,87,16,"_dependencyMap"],[62,69,87,16],[62,85,87,16,"SyntaxMatchError"],[62,101,87,16],[62,103,87,37,"result"],[62,109,87,43],[62,110,87,44,"reason"],[62,116,87,50],[62,118,87,52,"syntax"],[62,124,87,58],[62,125,87,59,"syntax"],[62,131,87,65],[62,133,87,67,"value"],[62,138,87,72],[62,140,87,74,"result"],[62,146,87,80],[62,147,87,81],[62,149,88,16,"result"],[62,155,88,22],[62,156,88,23,"iterations"],[62,166,89,12],[62,167,89,13],[63,6,90,8],[64,4,91,4],[65,4,93,4],[65,11,93,11,"buildMatchResult"],[65,27,93,27],[65,28,93,28,"result"],[65,34,93,34],[65,35,93,35,"match"],[65,40,93,40],[65,42,93,42],[65,46,93,46],[65,48,93,48,"result"],[65,54,93,54],[65,55,93,55,"iterations"],[65,65,93,65],[65,66,93,66],[66,2,94,0],[67,2,96,0],[67,6,96,4,"Lexer"],[67,11,96,9],[67,14,96,12],[67,23,96,4,"Lexer"],[67,28,96,9,"Lexer"],[67,29,96,21,"config"],[67,35,96,27],[67,37,96,29,"syntax"],[67,43,96,35],[67,45,96,37,"structure"],[67,54,96,46],[67,56,96,48],[68,4,97,4],[68,8,97,8],[68,9,97,9,"valueCommonSyntax"],[68,26,97,26],[68,29,97,29,"cssWideKeywords"],[68,44,97,44],[69,4,98,4],[69,8,98,8],[69,9,98,9,"syntax"],[69,15,98,15],[69,18,98,18,"syntax"],[69,24,98,24],[70,4,99,4],[70,8,99,8],[70,9,99,9,"generic"],[70,16,99,16],[70,19,99,19],[70,24,99,24],[71,4,100,4],[71,8,100,8],[71,9,100,9,"atrules"],[71,16,100,16],[71,19,100,19],[71,20,100,20],[71,21,100,21],[72,4,101,4],[72,8,101,8],[72,9,101,9,"properties"],[72,19,101,19],[72,22,101,22],[72,23,101,23],[72,24,101,24],[73,4,102,4],[73,8,102,8],[73,9,102,9,"types"],[73,14,102,14],[73,17,102,17],[73,18,102,18],[73,19,102,19],[74,4,103,4],[74,8,103,8],[74,9,103,9,"structure"],[74,18,103,18],[74,21,103,21,"structure"],[74,30,103,30],[74,34,103,34,"_$$_REQUIRE"],[74,45,103,34],[74,46,103,34,"_dependencyMap"],[74,60,103,34],[74,80,103,34,"getStructureFromConfig"],[74,102,103,34],[74,103,103,57,"config"],[74,109,103,63],[74,110,103,64],[75,4,105,4],[75,8,105,8,"config"],[75,14,105,14],[75,16,105,16],[76,6,106,8],[76,10,106,12,"config"],[76,16,106,18],[76,17,106,19,"types"],[76,22,106,24],[76,24,106,26],[77,8,107,12],[77,13,107,17],[77,17,107,21,"name"],[77,21,107,25],[77,25,107,29,"config"],[77,31,107,35],[77,32,107,36,"types"],[77,37,107,41],[77,39,107,43],[78,10,108,16],[78,14,108,20],[78,15,108,21,"addType_"],[78,23,108,29],[78,24,108,30,"name"],[78,28,108,34],[78,30,108,36,"config"],[78,36,108,42],[78,37,108,43,"types"],[78,42,108,48],[78,43,108,49,"name"],[78,47,108,53],[78,48,108,54],[78,49,108,55],[79,8,109,12],[80,6,110,8],[81,6,112,8],[81,10,112,12,"config"],[81,16,112,18],[81,17,112,19,"generic"],[81,24,112,26],[81,26,112,28],[82,8,113,12],[82,12,113,16],[82,13,113,17,"generic"],[82,20,113,24],[82,23,113,27],[82,27,113,31],[83,8,114,12],[83,13,114,17],[83,17,114,21,"name"],[83,21,114,25],[83,25,114,25,"_$$_REQUIRE"],[83,36,114,25],[83,37,114,25,"_dependencyMap"],[83,51,114,25],[83,70,114,38],[84,10,115,16],[84,14,115,20],[84,15,115,21,"addType_"],[84,23,115,29],[84,24,115,30,"name"],[84,28,115,34],[84,30,115,36,"_$$_REQUIRE"],[84,41,115,36],[84,42,115,36,"_dependencyMap"],[84,56,115,36],[84,74,115,44,"name"],[84,78,115,48],[84,79,115,49],[84,80,115,50],[85,8,116,12],[86,6,117,8],[87,6,119,8],[87,10,119,12,"config"],[87,16,119,18],[87,17,119,19,"atrules"],[87,24,119,26],[87,26,119,28],[88,8,120,12],[88,13,120,17],[88,17,120,21,"name"],[88,21,120,25],[88,25,120,29,"config"],[88,31,120,35],[88,32,120,36,"atrules"],[88,39,120,43],[88,41,120,45],[89,10,121,16],[89,14,121,20],[89,15,121,21,"addAtrule_"],[89,25,121,31],[89,26,121,32,"name"],[89,30,121,36],[89,32,121,38,"config"],[89,38,121,44],[89,39,121,45,"atrules"],[89,46,121,52],[89,47,121,53,"name"],[89,51,121,57],[89,52,121,58],[89,53,121,59],[90,8,122,12],[91,6,123,8],[92,6,125,8],[92,10,125,12,"config"],[92,16,125,18],[92,17,125,19,"properties"],[92,27,125,29],[92,29,125,31],[93,8,126,12],[93,13,126,17],[93,17,126,21,"name"],[93,21,126,25],[93,25,126,29,"config"],[93,31,126,35],[93,32,126,36,"properties"],[93,42,126,46],[93,44,126,48],[94,10,127,16],[94,14,127,20],[94,15,127,21,"addProperty_"],[94,27,127,33],[94,28,127,34,"name"],[94,32,127,38],[94,34,127,40,"config"],[94,40,127,46],[94,41,127,47,"properties"],[94,51,127,57],[94,52,127,58,"name"],[94,56,127,62],[94,57,127,63],[94,58,127,64],[95,8,128,12],[96,6,129,8],[97,4,130,4],[98,2,131,0],[98,3,131,1],[99,2,133,0,"Lexer"],[99,7,133,5],[99,8,133,6,"prototype"],[99,17,133,15],[99,20,133,18],[100,4,134,4,"structure"],[100,13,134,13],[100,15,134,15],[100,16,134,16],[100,17,134,17],[101,4,135,4,"checkStructure"],[101,18,135,18],[101,20,135,20],[101,29,135,4,"checkStructure"],[101,43,135,18,"checkStructure"],[101,44,135,29,"ast"],[101,47,135,32],[101,49,135,34],[102,6,136,8],[102,15,136,17,"collectWarning"],[102,29,136,31,"collectWarning"],[102,30,136,32,"node"],[102,34,136,36],[102,36,136,38,"message"],[102,43,136,45],[102,45,136,47],[103,8,137,12,"warns"],[103,13,137,17],[103,14,137,18,"push"],[103,18,137,22],[103,19,137,23],[104,10,138,16,"node"],[104,14,138,20],[104,16,138,22,"node"],[104,20,138,26],[105,10,139,16,"message"],[105,17,139,23],[105,19,139,25,"message"],[106,8,140,12],[106,9,140,13],[106,10,140,14],[107,6,141,8],[108,6,143,8],[108,10,143,12,"structure"],[108,19,143,21],[108,22,143,24],[108,26,143,28],[108,27,143,29,"structure"],[108,36,143,38],[109,6,144,8],[109,10,144,12,"warns"],[109,15,144,17],[109,18,144,20],[109,20,144,22],[110,6,146,8],[110,10,146,12],[110,11,146,13,"syntax"],[110,17,146,19],[110,18,146,20,"walk"],[110,22,146,24],[110,23,146,25,"ast"],[110,26,146,28],[110,28,146,30],[110,38,146,39,"node"],[110,42,146,43],[110,44,146,45],[111,8,147,12],[111,12,147,16,"structure"],[111,21,147,25],[111,22,147,26,"hasOwnProperty"],[111,36,147,40],[111,37,147,41,"node"],[111,41,147,45],[111,42,147,46,"type"],[111,46,147,50],[111,47,147,51],[111,49,147,53],[112,10,148,16,"structure"],[112,19,148,25],[112,20,148,26,"node"],[112,24,148,30],[112,25,148,31,"type"],[112,29,148,35],[112,30,148,36],[112,31,148,37,"check"],[112,36,148,42],[112,37,148,43,"node"],[112,41,148,47],[112,43,148,49,"collectWarning"],[112,57,148,63],[112,58,148,64],[113,8,149,12],[113,9,149,13],[113,15,149,19],[114,10,150,16,"collectWarning"],[114,24,150,30],[114,25,150,31,"node"],[114,29,150,35],[114,31,150,37],[114,52,150,58],[114,55,150,61,"node"],[114,59,150,65],[114,60,150,66,"type"],[114,64,150,70],[114,67,150,73],[114,70,150,76],[114,71,150,77],[115,8,151,12],[116,6,152,8],[116,7,152,9],[116,8,152,10],[117,6,154,8],[117,13,154,15,"warns"],[117,18,154,20],[117,19,154,21,"length"],[117,25,154,27],[117,28,154,30,"warns"],[117,33,154,35],[117,36,154,38],[117,41,154,43],[118,4,155,4],[118,5,155,5],[119,4,157,4,"createDescriptor"],[119,20,157,20],[119,22,157,22],[119,31,157,4,"createDescriptor"],[119,47,157,20,"createDescriptor"],[119,48,157,31,"syntax"],[119,54,157,37],[119,56,157,39,"type"],[119,60,157,43],[119,62,157,45,"name"],[119,66,157,49],[119,68,157,66],[120,6,157,66],[120,10,157,51,"parent"],[120,16,157,57],[120,19,157,57,"arguments"],[120,28,157,57],[120,29,157,57,"length"],[120,35,157,57],[120,43,157,57,"arguments"],[120,52,157,57],[120,60,157,57,"undefined"],[120,69,157,57],[120,72,157,57,"arguments"],[120,81,157,57],[120,87,157,60],[120,91,157,64],[121,6,158,8],[121,10,158,12,"ref"],[121,13,158,15],[121,16,158,18],[122,8,159,12,"type"],[122,12,159,16],[122,14,159,18,"type"],[122,18,159,22],[123,8,160,12,"name"],[123,12,160,16],[123,14,160,18,"name"],[124,6,161,8],[124,7,161,9],[125,6,162,8],[125,10,162,12,"descriptor"],[125,20,162,22],[125,23,162,25],[126,8,163,12,"type"],[126,12,163,16],[126,14,163,18,"type"],[126,18,163,22],[127,8,164,12,"name"],[127,12,164,16],[127,14,164,18,"name"],[127,18,164,22],[128,8,165,12,"parent"],[128,14,165,18],[128,16,165,20,"parent"],[128,22,165,26],[129,8,166,12,"syntax"],[129,14,166,18],[129,16,166,20],[129,20,166,24],[130,8,167,12,"match"],[130,13,167,17],[130,15,167,19],[131,6,168,8],[131,7,168,9],[132,6,170,8],[132,10,170,12],[132,17,170,19,"syntax"],[132,23,170,25],[132,28,170,30],[132,38,170,40],[132,40,170,42],[133,8,171,12,"descriptor"],[133,18,171,22],[133,19,171,23,"match"],[133,24,171,28],[133,27,171,31,"_$$_REQUIRE"],[133,38,171,31],[133,39,171,31,"_dependencyMap"],[133,53,171,31],[133,75,171,31,"buildMatchGraph"],[133,90,171,31],[133,91,171,47,"syntax"],[133,97,171,53],[133,99,171,55,"ref"],[133,102,171,58],[133,103,171,59],[134,6,172,8],[134,7,172,9],[134,13,172,15],[135,8,173,12],[135,12,173,16],[135,19,173,23,"syntax"],[135,25,173,29],[135,30,173,34],[135,38,173,42],[135,40,173,44],[136,10,174,16],[137,10,175,16,"Object"],[137,16,175,22],[137,17,175,23,"defineProperty"],[137,31,175,37],[137,32,175,38,"descriptor"],[137,42,175,48],[137,44,175,50],[137,52,175,58],[137,54,175,60],[138,12,176,20,"get"],[138,15,176,23],[138,17,176,25],[138,26,176,20,"get"],[138,29,176,23,"get"],[138,30,176,23],[138,32,176,36],[139,14,177,24,"Object"],[139,20,177,30],[139,21,177,31,"defineProperty"],[139,35,177,45],[139,36,177,46,"descriptor"],[139,46,177,56],[139,48,177,58],[139,56,177,66],[139,58,177,68],[140,16,178,28,"value"],[140,21,178,33],[140,23,178,35,"_$$_REQUIRE"],[140,34,178,35],[140,35,178,35,"_dependencyMap"],[140,49,178,35],[140,84,178,41,"syntax"],[140,90,178,47],[141,14,179,24],[141,15,179,25],[141,16,179,26],[142,14,181,24],[142,21,181,31,"descriptor"],[142,31,181,41],[142,32,181,42,"syntax"],[142,38,181,48],[143,12,182,20],[144,10,183,16],[144,11,183,17],[144,12,183,18],[145,8,184,12],[145,9,184,13],[145,15,184,19],[146,10,185,16,"descriptor"],[146,20,185,26],[146,21,185,27,"syntax"],[146,27,185,33],[146,30,185,36,"syntax"],[146,36,185,42],[147,8,186,12],[149,8,188,12],[150,8,189,12,"Object"],[150,14,189,18],[150,15,189,19,"defineProperty"],[150,29,189,33],[150,30,189,34,"descriptor"],[150,40,189,44],[150,42,189,46],[150,49,189,53],[150,51,189,55],[151,10,190,16,"get"],[151,13,190,19],[151,15,190,21],[151,24,190,16,"get"],[151,27,190,19,"get"],[151,28,190,19],[151,30,190,32],[152,12,191,20,"Object"],[152,18,191,26],[152,19,191,27,"defineProperty"],[152,33,191,41],[152,34,191,42,"descriptor"],[152,44,191,52],[152,46,191,54],[152,53,191,61],[152,55,191,63],[153,14,192,24,"value"],[153,19,192,29],[153,21,192,31,"_$$_REQUIRE"],[153,32,192,31],[153,33,192,31,"_dependencyMap"],[153,47,192,31],[153,69,192,31,"buildMatchGraph"],[153,84,192,31],[153,85,192,47,"descriptor"],[153,95,192,57],[153,96,192,58,"syntax"],[153,102,192,64],[153,104,192,66,"ref"],[153,107,192,69],[154,12,193,20],[154,13,193,21],[154,14,193,22],[155,12,195,20],[155,19,195,27,"descriptor"],[155,29,195,37],[155,30,195,38,"match"],[155,35,195,43],[156,10,196,16],[157,8,197,12],[157,9,197,13],[157,10,197,14],[158,6,198,8],[159,6,200,8],[159,13,200,15,"descriptor"],[159,23,200,25],[160,4,201,4],[160,5,201,5],[161,4,202,4,"addAtrule_"],[161,14,202,14],[161,16,202,16],[161,25,202,4,"addAtrule_"],[161,35,202,14,"addAtrule_"],[161,36,202,25,"name"],[161,40,202,29],[161,42,202,31,"syntax"],[161,48,202,37],[161,50,202,39],[162,6,202,39],[162,10,202,39,"_this"],[162,15,202,39],[163,6,203,8],[163,10,203,12],[163,11,203,13,"syntax"],[163,17,203,19],[163,19,203,21],[164,8,204,12],[165,6,205,8],[166,6,207,8],[166,10,207,12],[166,11,207,13,"atrules"],[166,18,207,20],[166,19,207,21,"name"],[166,23,207,25],[166,24,207,26],[166,27,207,29],[167,8,208,12,"type"],[167,12,208,16],[167,14,208,18],[167,22,208,26],[168,8,209,12,"name"],[168,12,209,16],[168,14,209,18,"name"],[168,18,209,22],[169,8,210,12,"prelude"],[169,15,210,19],[169,17,210,21,"syntax"],[169,23,210,27],[169,24,210,28,"prelude"],[169,31,210,35],[169,34,210,38],[169,38,210,42],[169,39,210,43,"createDescriptor"],[169,55,210,59],[169,56,210,60,"syntax"],[169,62,210,66],[169,63,210,67,"prelude"],[169,70,210,74],[169,72,210,76],[169,87,210,91],[169,89,210,93,"name"],[169,93,210,97],[169,94,210,98],[169,97,210,101],[169,101,210,105],[170,8,211,12,"descriptors"],[170,19,211,23],[170,21,211,25,"syntax"],[170,27,211,31],[170,28,211,32,"descriptors"],[170,39,211,43],[170,42,212,18,"Object"],[170,48,212,24],[170,49,212,25,"keys"],[170,53,212,29],[170,54,212,30,"syntax"],[170,60,212,36],[170,61,212,37,"descriptors"],[170,72,212,48],[170,73,212,49],[170,74,212,50,"reduce"],[170,80,212,56],[170,81,212,57],[170,91,212,58,"res"],[170,94,212,61],[170,96,212,63,"descName"],[170,104,212,71],[170,106,212,76],[171,10,213,20,"res"],[171,13,213,23],[171,14,213,24,"descName"],[171,22,213,32],[171,23,213,33],[171,26,213,36,"_this"],[171,31,213,40],[171,32,213,41,"createDescriptor"],[171,48,213,57],[171,49,213,58,"syntax"],[171,55,213,64],[171,56,213,65,"descriptors"],[171,67,213,76],[171,68,213,77,"descName"],[171,76,213,85],[171,77,213,86],[171,79,213,88],[171,97,213,106],[171,99,213,108,"descName"],[171,107,213,116],[171,109,213,118,"name"],[171,113,213,122],[171,114,213,123],[172,10,214,20],[172,17,214,27,"res"],[172,20,214,30],[173,8,215,16],[173,9,215,17],[173,11,215,19],[173,12,215,20],[173,13,215,21],[173,14,215,22],[173,17,216,18],[174,6,217,8],[174,7,217,9],[175,4,218,4],[175,5,218,5],[176,4,219,4,"addProperty_"],[176,16,219,16],[176,18,219,18],[176,27,219,4,"addProperty_"],[176,39,219,16,"addProperty_"],[176,40,219,27,"name"],[176,44,219,31],[176,46,219,33,"syntax"],[176,52,219,39],[176,54,219,41],[177,6,220,8],[177,10,220,12],[177,11,220,13,"syntax"],[177,17,220,19],[177,19,220,21],[178,8,221,12],[179,6,222,8],[180,6,224,8],[180,10,224,12],[180,11,224,13,"properties"],[180,21,224,23],[180,22,224,24,"name"],[180,26,224,28],[180,27,224,29],[180,30,224,32],[180,34,224,36],[180,35,224,37,"createDescriptor"],[180,51,224,53],[180,52,224,54,"syntax"],[180,58,224,60],[180,60,224,62],[180,70,224,72],[180,72,224,74,"name"],[180,76,224,78],[180,77,224,79],[181,4,225,4],[181,5,225,5],[182,4,226,4,"addType_"],[182,12,226,12],[182,14,226,14],[182,23,226,4,"addType_"],[182,31,226,12,"addType_"],[182,32,226,23,"name"],[182,36,226,27],[182,38,226,29,"syntax"],[182,44,226,35],[182,46,226,37],[183,6,227,8],[183,10,227,12],[183,11,227,13,"syntax"],[183,17,227,19],[183,19,227,21],[184,8,228,12],[185,6,229,8],[186,6,231,8],[186,10,231,12],[186,11,231,13,"types"],[186,16,231,18],[186,17,231,19,"name"],[186,21,231,23],[186,22,231,24],[186,25,231,27],[186,29,231,31],[186,30,231,32,"createDescriptor"],[186,46,231,48],[186,47,231,49,"syntax"],[186,53,231,55],[186,55,231,57],[186,61,231,63],[186,63,231,65,"name"],[186,67,231,69],[186,68,231,70],[187,6,233,8],[187,10,233,12,"syntax"],[187,16,233,18],[187,21,233,23,"_$$_REQUIRE"],[187,32,233,23],[187,33,233,23,"_dependencyMap"],[187,47,233,23],[187,65,233,31],[187,88,233,54],[187,89,233,55],[187,91,233,57],[188,8,234,12],[188,12,234,16],[188,13,234,17,"valueCommonSyntax"],[188,30,234,34],[188,33,234,37,"cssWideKeywordsWithExpression"],[188,62,234,66],[189,6,235,8],[190,4,236,4],[190,5,236,5],[191,4,238,4,"checkAtruleName"],[191,19,238,19],[191,21,238,21],[191,30,238,4,"checkAtruleName"],[191,45,238,19,"checkAtruleName"],[191,46,238,30,"atruleName"],[191,56,238,40],[191,58,238,42],[192,6,239,8],[192,10,239,12],[192,11,239,13],[192,15,239,17],[192,16,239,18,"getAtrule"],[192,25,239,27],[192,26,239,28,"atruleName"],[192,36,239,38],[192,37,239,39],[192,39,239,41],[193,8,240,12],[193,15,240,19],[193,20,240,19,"_$$_REQUIRE"],[193,31,240,19],[193,32,240,19,"_dependencyMap"],[193,46,240,19],[193,62,240,19,"SyntaxReferenceError"],[193,82,240,19],[193,84,240,44],[193,101,240,61],[193,103,240,63],[193,106,240,66],[193,109,240,69,"atruleName"],[193,119,240,79],[193,120,240,80],[194,6,241,8],[195,4,242,4],[195,5,242,5],[196,4,243,4,"checkAtrulePrelude"],[196,22,243,22],[196,24,243,24],[196,33,243,4,"checkAtrulePrelude"],[196,51,243,22,"checkAtrulePrelude"],[196,52,243,33,"atruleName"],[196,62,243,43],[196,64,243,45,"prelude"],[196,71,243,52],[196,73,243,54],[197,6,244,8],[197,10,244,12,"error"],[197,15,244,17],[197,18,244,20],[197,22,244,24],[197,23,244,25,"checkAtruleName"],[197,38,244,40],[197,39,244,41,"atruleName"],[197,49,244,51],[197,50,244,52],[198,6,246,8],[198,10,246,12,"error"],[198,15,246,17],[198,17,246,19],[199,8,247,12],[199,15,247,19,"error"],[199,20,247,24],[200,6,248,8],[201,6,250,8],[201,10,250,12,"atrule"],[201,16,250,18],[201,19,250,21],[201,23,250,25],[201,24,250,26,"getAtrule"],[201,33,250,35],[201,34,250,36,"atruleName"],[201,44,250,46],[201,45,250,47],[202,6,252,8],[202,10,252,12],[202,11,252,13,"atrule"],[202,17,252,19],[202,18,252,20,"prelude"],[202,25,252,27],[202,29,252,31,"prelude"],[202,36,252,38],[202,38,252,40],[203,8,253,12],[203,15,253,19],[203,19,253,23,"SyntaxError"],[203,30,253,34],[203,31,253,35],[203,43,253,47],[203,46,253,50,"atruleName"],[203,56,253,60],[203,59,253,63],[203,91,253,95],[203,92,253,96],[204,6,254,8],[205,6,256,8],[205,10,256,12,"atrule"],[205,16,256,18],[205,17,256,19,"prelude"],[205,24,256,26],[205,28,256,30],[205,29,256,31,"prelude"],[205,36,256,38],[205,38,256,40],[206,8,257,12],[206,15,257,19],[206,19,257,23,"SyntaxError"],[206,30,257,34],[206,31,257,35],[206,43,257,47],[206,46,257,50,"atruleName"],[206,56,257,60],[206,59,257,63],[206,87,257,91],[206,88,257,92],[207,6,258,8],[208,4,259,4],[208,5,259,5],[209,4,260,4,"checkAtruleDescriptorName"],[209,29,260,29],[209,31,260,31],[209,40,260,4,"checkAtruleDescriptorName"],[209,65,260,29,"checkAtruleDescriptorName"],[209,66,260,40,"atruleName"],[209,76,260,50],[209,78,260,52,"descriptorName"],[209,92,260,66],[209,94,260,68],[210,6,261,8],[210,10,261,12,"error"],[210,15,261,17],[210,18,261,20],[210,22,261,24],[210,23,261,25,"checkAtruleName"],[210,38,261,40],[210,39,261,41,"atruleName"],[210,49,261,51],[210,50,261,52],[211,6,263,8],[211,10,263,12,"error"],[211,15,263,17],[211,17,263,19],[212,8,264,12],[212,15,264,19,"error"],[212,20,264,24],[213,6,265,8],[214,6,267,8],[214,10,267,12,"atrule"],[214,16,267,18],[214,19,267,21],[214,23,267,25],[214,24,267,26,"getAtrule"],[214,33,267,35],[214,34,267,36,"atruleName"],[214,44,267,46],[214,45,267,47],[215,6,268,8],[215,10,268,12,"descriptor"],[215,20,268,22],[215,23,268,25,"_$$_REQUIRE"],[215,34,268,25],[215,35,268,25,"_dependencyMap"],[215,49,268,25],[215,73,268,31,"keyword"],[215,80,268,38],[215,81,268,39,"descriptorName"],[215,95,268,53],[215,96,268,54],[216,6,270,8],[216,10,270,12],[216,11,270,13,"atrule"],[216,17,270,19],[216,18,270,20,"descriptors"],[216,29,270,31],[216,31,270,33],[217,8,271,12],[217,15,271,19],[217,19,271,23,"SyntaxError"],[217,30,271,34],[217,31,271,35],[217,43,271,47],[217,46,271,50,"atruleName"],[217,56,271,60],[217,59,271,63],[217,87,271,91],[217,88,271,92],[218,6,272,8],[219,6,274,8],[219,10,274,12],[219,11,274,13,"atrule"],[219,17,274,19],[219,18,274,20,"descriptors"],[219,29,274,31],[219,30,274,32,"descriptor"],[219,40,274,42],[219,41,274,43,"name"],[219,45,274,47],[219,46,274,48],[219,50,275,12],[219,51,275,13,"atrule"],[219,57,275,19],[219,58,275,20,"descriptors"],[219,69,275,31],[219,70,275,32,"descriptor"],[219,80,275,42],[219,81,275,43,"basename"],[219,89,275,51],[219,90,275,52],[219,92,275,54],[220,8,276,12],[220,15,276,19],[220,20,276,19,"_$$_REQUIRE"],[220,31,276,19],[220,32,276,19,"_dependencyMap"],[220,46,276,19],[220,62,276,19,"SyntaxReferenceError"],[220,82,276,19],[220,84,276,44],[220,112,276,72],[220,114,276,74,"descriptorName"],[220,128,276,88],[220,129,276,89],[221,6,277,8],[222,4,278,4],[222,5,278,5],[223,4,279,4,"checkPropertyName"],[223,21,279,21],[223,23,279,23],[223,32,279,4,"checkPropertyName"],[223,49,279,21,"checkPropertyName"],[223,50,279,32,"propertyName"],[223,62,279,44],[223,64,279,46],[224,6,280,8],[224,10,280,12,"property"],[224,18,280,20],[224,21,280,23,"_$$_REQUIRE"],[224,32,280,23],[224,33,280,23,"_dependencyMap"],[224,47,280,23],[224,71,280,29,"property"],[224,79,280,37],[224,80,280,38,"propertyName"],[224,92,280,50],[224,93,280,51],[226,6,282,8],[227,6,283,8],[227,10,283,12,"property"],[227,18,283,20],[227,19,283,21,"custom"],[227,25,283,27],[227,27,283,29],[228,8,284,12],[228,15,284,19],[228,19,284,23,"Error"],[228,24,284,28],[228,25,284,29],[228,83,284,87],[228,84,284,88],[229,6,285,8],[230,6,287,8],[230,10,287,12],[230,11,287,13],[230,15,287,17],[230,16,287,18,"getProperty"],[230,27,287,29],[230,28,287,30,"propertyName"],[230,40,287,42],[230,41,287,43],[230,43,287,45],[231,8,288,12],[231,15,288,19],[231,20,288,19,"_$$_REQUIRE"],[231,31,288,19],[231,32,288,19,"_dependencyMap"],[231,46,288,19],[231,62,288,19,"SyntaxReferenceError"],[231,82,288,19],[231,84,288,44],[231,102,288,62],[231,104,288,64,"propertyName"],[231,116,288,76],[231,117,288,77],[232,6,289,8],[233,4,290,4],[233,5,290,5],[234,4,292,4,"matchAtrulePrelude"],[234,22,292,22],[234,24,292,24],[234,33,292,4,"matchAtrulePrelude"],[234,51,292,22,"matchAtrulePrelude"],[234,52,292,33,"atruleName"],[234,62,292,43],[234,64,292,45,"prelude"],[234,71,292,52],[234,73,292,54],[235,6,293,8],[235,10,293,12,"error"],[235,15,293,17],[235,18,293,20],[235,22,293,24],[235,23,293,25,"checkAtrulePrelude"],[235,41,293,43],[235,42,293,44,"atruleName"],[235,52,293,54],[235,54,293,56,"prelude"],[235,61,293,63],[235,62,293,64],[236,6,295,8],[236,10,295,12,"error"],[236,15,295,17],[236,17,295,19],[237,8,296,12],[237,15,296,19,"buildMatchResult"],[237,31,296,35],[237,32,296,36],[237,36,296,40],[237,38,296,42,"error"],[237,43,296,47],[237,44,296,48],[238,6,297,8],[239,6,299,8],[239,10,299,12],[239,11,299,13,"prelude"],[239,18,299,20],[239,20,299,22],[240,8,300,12],[240,15,300,19,"buildMatchResult"],[240,31,300,35],[240,32,300,36],[240,36,300,40],[240,38,300,42],[240,42,300,46],[240,43,300,47],[241,6,301,8],[242,6,303,8],[242,13,303,15,"matchSyntax"],[242,24,303,26],[242,25,303,27],[242,29,303,31],[242,31,303,33],[242,35,303,37],[242,36,303,38,"getAtrule"],[242,45,303,47],[242,46,303,48,"atruleName"],[242,56,303,58],[242,57,303,59],[242,58,303,60,"prelude"],[242,65,303,67],[242,67,303,69,"prelude"],[242,74,303,76],[242,76,303,78],[242,81,303,83],[242,82,303,84],[243,4,304,4],[243,5,304,5],[244,4,305,4,"matchAtruleDescriptor"],[244,25,305,25],[244,27,305,27],[244,36,305,4,"matchAtruleDescriptor"],[244,57,305,25,"matchAtruleDescriptor"],[244,58,305,36,"atruleName"],[244,68,305,46],[244,70,305,48,"descriptorName"],[244,84,305,62],[244,86,305,64,"value"],[244,91,305,69],[244,93,305,71],[245,6,306,8],[245,10,306,12,"error"],[245,15,306,17],[245,18,306,20],[245,22,306,24],[245,23,306,25,"checkAtruleDescriptorName"],[245,48,306,50],[245,49,306,51,"atruleName"],[245,59,306,61],[245,61,306,63,"descriptorName"],[245,75,306,77],[245,76,306,78],[246,6,308,8],[246,10,308,12,"error"],[246,15,308,17],[246,17,308,19],[247,8,309,12],[247,15,309,19,"buildMatchResult"],[247,31,309,35],[247,32,309,36],[247,36,309,40],[247,38,309,42,"error"],[247,43,309,47],[247,44,309,48],[248,6,310,8],[249,6,312,8],[249,10,312,12,"atrule"],[249,16,312,18],[249,19,312,21],[249,23,312,25],[249,24,312,26,"getAtrule"],[249,33,312,35],[249,34,312,36,"atruleName"],[249,44,312,46],[249,45,312,47],[250,6,313,8],[250,10,313,12,"descriptor"],[250,20,313,22],[250,23,313,25,"_$$_REQUIRE"],[250,34,313,25],[250,35,313,25,"_dependencyMap"],[250,49,313,25],[250,73,313,31,"keyword"],[250,80,313,38],[250,81,313,39,"descriptorName"],[250,95,313,53],[250,96,313,54],[251,6,315,8],[251,13,315,15,"matchSyntax"],[251,24,315,26],[251,25,315,27],[251,29,315,31],[251,31,315,33,"atrule"],[251,37,315,39],[251,38,315,40,"descriptors"],[251,49,315,51],[251,50,315,52,"descriptor"],[251,60,315,62],[251,61,315,63,"name"],[251,65,315,67],[251,66,315,68],[251,70,315,72,"atrule"],[251,76,315,78],[251,77,315,79,"descriptors"],[251,88,315,90],[251,89,315,91,"descriptor"],[251,99,315,101],[251,100,315,102,"basename"],[251,108,315,110],[251,109,315,111],[251,111,315,113,"value"],[251,116,315,118],[251,118,315,120],[251,123,315,125],[251,124,315,126],[252,4,316,4],[252,5,316,5],[253,4,317,4,"matchDeclaration"],[253,20,317,20],[253,22,317,22],[253,31,317,4,"matchDeclaration"],[253,47,317,20,"matchDeclaration"],[253,48,317,31,"node"],[253,52,317,35],[253,54,317,37],[254,6,318,8],[254,10,318,12,"node"],[254,14,318,16],[254,15,318,17,"type"],[254,19,318,21],[254,24,318,26],[254,37,318,39],[254,39,318,41],[255,8,319,12],[255,15,319,19,"buildMatchResult"],[255,31,319,35],[255,32,319,36],[255,36,319,40],[255,38,319,42],[255,42,319,46,"Error"],[255,47,319,51],[255,48,319,52],[255,72,319,76],[255,73,319,77],[255,74,319,78],[256,6,320,8],[257,6,322,8],[257,13,322,15],[257,17,322,19],[257,18,322,20,"matchProperty"],[257,31,322,33],[257,32,322,34,"node"],[257,36,322,38],[257,37,322,39,"property"],[257,45,322,47],[257,47,322,49,"node"],[257,51,322,53],[257,52,322,54,"value"],[257,57,322,59],[257,58,322,60],[258,4,323,4],[258,5,323,5],[259,4,324,4,"matchProperty"],[259,17,324,17],[259,19,324,19],[259,28,324,4,"matchProperty"],[259,41,324,17,"matchProperty"],[259,42,324,28,"propertyName"],[259,54,324,40],[259,56,324,42,"value"],[259,61,324,47],[259,63,324,49],[260,6,325,8],[260,10,325,12,"error"],[260,15,325,17],[260,18,325,20],[260,22,325,24],[260,23,325,25,"checkPropertyName"],[260,40,325,42],[260,41,325,43,"propertyName"],[260,53,325,55],[260,54,325,56],[261,6,327,8],[261,10,327,12,"error"],[261,15,327,17],[261,17,327,19],[262,8,328,12],[262,15,328,19,"buildMatchResult"],[262,31,328,35],[262,32,328,36],[262,36,328,40],[262,38,328,42,"error"],[262,43,328,47],[262,44,328,48],[263,6,329,8],[264,6,331,8],[264,13,331,15,"matchSyntax"],[264,24,331,26],[264,25,331,27],[264,29,331,31],[264,31,331,33],[264,35,331,37],[264,36,331,38,"getProperty"],[264,47,331,49],[264,48,331,50,"propertyName"],[264,60,331,62],[264,61,331,63],[264,63,331,65,"value"],[264,68,331,70],[264,70,331,72],[264,74,331,76],[264,75,331,77],[265,4,332,4],[265,5,332,5],[266,4,333,4,"matchType"],[266,13,333,13],[266,15,333,15],[266,24,333,4,"matchType"],[266,33,333,13,"matchType"],[266,34,333,24,"typeName"],[266,42,333,32],[266,44,333,34,"value"],[266,49,333,39],[266,51,333,41],[267,6,334,8],[267,10,334,12,"typeSyntax"],[267,20,334,22],[267,23,334,25],[267,27,334,29],[267,28,334,30,"getType"],[267,35,334,37],[267,36,334,38,"typeName"],[267,44,334,46],[267,45,334,47],[268,6,336,8],[268,10,336,12],[268,11,336,13,"typeSyntax"],[268,21,336,23],[268,23,336,25],[269,8,337,12],[269,15,337,19,"buildMatchResult"],[269,31,337,35],[269,32,337,36],[269,36,337,40],[269,38,337,42],[269,43,337,42,"_$$_REQUIRE"],[269,54,337,42],[269,55,337,42,"_dependencyMap"],[269,69,337,42],[269,85,337,42,"SyntaxReferenceError"],[269,105,337,42],[269,107,337,67],[269,121,337,81],[269,123,337,83,"typeName"],[269,131,337,91],[269,132,337,92],[269,133,337,93],[270,6,338,8],[271,6,340,8],[271,13,340,15,"matchSyntax"],[271,24,340,26],[271,25,340,27],[271,29,340,31],[271,31,340,33,"typeSyntax"],[271,41,340,43],[271,43,340,45,"value"],[271,48,340,50],[271,50,340,52],[271,55,340,57],[271,56,340,58],[272,4,341,4],[272,5,341,5],[273,4,342,4,"match"],[273,9,342,9],[273,11,342,11],[273,20,342,4,"match"],[273,25,342,9,"match"],[273,26,342,20,"syntax"],[273,32,342,26],[273,34,342,28,"value"],[273,39,342,33],[273,41,342,35],[274,6,343,8],[274,10,343,12],[274,17,343,19,"syntax"],[274,23,343,25],[274,28,343,30],[274,36,343,38],[274,41,343,43],[274,42,343,44,"syntax"],[274,48,343,50],[274,52,343,54],[274,53,343,55,"syntax"],[274,59,343,61],[274,60,343,62,"type"],[274,64,343,66],[274,65,343,67],[274,67,343,69],[275,8,344,12],[275,15,344,19,"buildMatchResult"],[275,31,344,35],[275,32,344,36],[275,36,344,40],[275,38,344,42],[275,43,344,42,"_$$_REQUIRE"],[275,54,344,42],[275,55,344,42,"_dependencyMap"],[275,69,344,42],[275,85,344,42,"SyntaxReferenceError"],[275,105,344,42],[275,107,344,67],[275,119,344,79],[275,120,344,80],[275,121,344,81],[276,6,345,8],[277,6,347,8],[277,10,347,12],[277,17,347,19,"syntax"],[277,23,347,25],[277,28,347,30],[277,36,347,38],[277,40,347,42],[277,41,347,43,"syntax"],[277,47,347,49],[277,48,347,50,"match"],[277,53,347,55],[277,55,347,57],[278,8,348,12,"syntax"],[278,14,348,18],[278,17,348,21],[278,21,348,25],[278,22,348,26,"createDescriptor"],[278,38,348,42],[278,39,348,43,"syntax"],[278,45,348,49],[278,47,348,51],[278,53,348,57],[278,55,348,59],[278,66,348,70],[278,67,348,71],[279,6,349,8],[280,6,351,8],[280,13,351,15,"matchSyntax"],[280,24,351,26],[280,25,351,27],[280,29,351,31],[280,31,351,33,"syntax"],[280,37,351,39],[280,39,351,41,"value"],[280,44,351,46],[280,46,351,48],[280,51,351,53],[280,52,351,54],[281,4,352,4],[281,5,352,5],[282,4,354,4,"findValueFragments"],[282,22,354,22],[282,24,354,24],[282,33,354,4,"findValueFragments"],[282,51,354,22,"findValueFragments"],[282,52,354,33,"propertyName"],[282,64,354,45],[282,66,354,47,"value"],[282,71,354,52],[282,73,354,54,"type"],[282,77,354,58],[282,79,354,60,"name"],[282,83,354,64],[282,85,354,66],[283,6,355,8],[283,13,355,15,"_$$_REQUIRE"],[283,24,355,15],[283,25,355,15,"_dependencyMap"],[283,39,355,15],[283,57,355,22,"matchFragments"],[283,71,355,36],[283,72,355,37],[283,76,355,41],[283,78,355,43,"value"],[283,83,355,48],[283,85,355,50],[283,89,355,54],[283,90,355,55,"matchProperty"],[283,103,355,68],[283,104,355,69,"propertyName"],[283,116,355,81],[283,118,355,83,"value"],[283,123,355,88],[283,124,355,89],[283,126,355,91,"type"],[283,130,355,95],[283,132,355,97,"name"],[283,136,355,101],[283,137,355,102],[284,4,356,4],[284,5,356,5],[285,4,357,4,"findDeclarationValueFragments"],[285,33,357,33],[285,35,357,35],[285,44,357,4,"findDeclarationValueFragments"],[285,73,357,33,"findDeclarationValueFragments"],[285,74,357,44,"declaration"],[285,85,357,55],[285,87,357,57,"type"],[285,91,357,61],[285,93,357,63,"name"],[285,97,357,67],[285,99,357,69],[286,6,358,8],[286,13,358,15,"_$$_REQUIRE"],[286,24,358,15],[286,25,358,15,"_dependencyMap"],[286,39,358,15],[286,57,358,22,"matchFragments"],[286,71,358,36],[286,72,358,37],[286,76,358,41],[286,78,358,43,"declaration"],[286,89,358,54],[286,90,358,55,"value"],[286,95,358,60],[286,97,358,62],[286,101,358,66],[286,102,358,67,"matchDeclaration"],[286,118,358,83],[286,119,358,84,"declaration"],[286,130,358,95],[286,131,358,96],[286,133,358,98,"type"],[286,137,358,102],[286,139,358,104,"name"],[286,143,358,108],[286,144,358,109],[287,4,359,4],[287,5,359,5],[288,4,360,4,"findAllFragments"],[288,20,360,20],[288,22,360,22],[288,31,360,4,"findAllFragments"],[288,47,360,20,"findAllFragments"],[288,48,360,31,"ast"],[288,51,360,34],[288,53,360,36,"type"],[288,57,360,40],[288,59,360,42,"name"],[288,63,360,46],[288,65,360,48],[289,6,361,8],[289,10,361,12,"result"],[289,16,361,18],[289,19,361,21],[289,21,361,23],[290,6,363,8],[290,10,363,12],[290,11,363,13,"syntax"],[290,17,363,19],[290,18,363,20,"walk"],[290,22,363,24],[290,23,363,25,"ast"],[290,26,363,28],[290,28,363,30],[291,8,364,12,"visit"],[291,13,364,17],[291,15,364,19],[291,28,364,32],[292,8,365,12,"enter"],[292,13,365,17],[292,15,365,19],[292,25,365,28,"declaration"],[292,36,365,39],[292,38,365,41],[293,10,366,16,"result"],[293,16,366,22],[293,17,366,23,"push"],[293,21,366,27],[293,22,366,28,"apply"],[293,27,366,33],[293,28,366,34,"result"],[293,34,366,40],[293,36,366,42],[293,40,366,46],[293,41,366,47,"findDeclarationValueFragments"],[293,70,366,76],[293,71,366,77,"declaration"],[293,82,366,88],[293,84,366,90,"type"],[293,88,366,94],[293,90,366,96,"name"],[293,94,366,100],[293,95,366,101],[293,96,366,102],[294,8,367,12],[294,9,367,13],[294,10,367,14,"bind"],[294,14,367,18],[294,15,367,19],[294,19,367,23],[295,6,368,8],[295,7,368,9],[295,8,368,10],[296,6,370,8],[296,13,370,15,"result"],[296,19,370,21],[297,4,371,4],[297,5,371,5],[298,4,373,4,"getAtrule"],[298,13,373,13],[298,15,373,15],[298,24,373,4,"getAtrule"],[298,33,373,13,"getAtrule"],[298,34,373,24,"atruleName"],[298,44,373,34],[298,46,373,61],[299,6,373,61],[299,10,373,36,"fallbackBasename"],[299,26,373,52],[299,29,373,52,"arguments"],[299,38,373,52],[299,39,373,52,"length"],[299,45,373,52],[299,53,373,52,"arguments"],[299,62,373,52],[299,70,373,52,"undefined"],[299,79,373,52],[299,82,373,52,"arguments"],[299,91,373,52],[299,97,373,55],[299,101,373,59],[300,6,374,8],[300,10,374,12,"atrule"],[300,16,374,18],[300,19,374,21,"_$$_REQUIRE"],[300,30,374,21],[300,31,374,21,"_dependencyMap"],[300,45,374,21],[300,69,374,27,"keyword"],[300,76,374,34],[300,77,374,35,"atruleName"],[300,87,374,45],[300,88,374,46],[301,6,375,8],[301,10,375,12,"atruleEntry"],[301,21,375,23],[301,24,375,26,"atrule"],[301,30,375,32],[301,31,375,33,"vendor"],[301,37,375,39],[301,41,375,43,"fallbackBasename"],[301,57,375,59],[301,60,376,14],[301,64,376,18],[301,65,376,19,"atrules"],[301,72,376,26],[301,73,376,27,"atrule"],[301,79,376,33],[301,80,376,34,"name"],[301,84,376,38],[301,85,376,39],[301,89,376,43],[301,93,376,47],[301,94,376,48,"atrules"],[301,101,376,55],[301,102,376,56,"atrule"],[301,108,376,62],[301,109,376,63,"basename"],[301,117,376,71],[301,118,376,72],[301,121,377,14],[301,125,377,18],[301,126,377,19,"atrules"],[301,133,377,26],[301,134,377,27,"atrule"],[301,140,377,33],[301,141,377,34,"name"],[301,145,377,38],[301,146,377,39],[302,6,379,8],[302,13,379,15,"atruleEntry"],[302,24,379,26],[302,28,379,30],[302,32,379,34],[303,4,380,4],[303,5,380,5],[304,4,381,4,"getAtrulePrelude"],[304,20,381,20],[304,22,381,22],[304,31,381,4,"getAtrulePrelude"],[304,47,381,20,"getAtrulePrelude"],[304,48,381,31,"atruleName"],[304,58,381,41],[304,60,381,68],[305,6,381,68],[305,10,381,43,"fallbackBasename"],[305,26,381,59],[305,29,381,59,"arguments"],[305,38,381,59],[305,39,381,59,"length"],[305,45,381,59],[305,53,381,59,"arguments"],[305,62,381,59],[305,70,381,59,"undefined"],[305,79,381,59],[305,82,381,59,"arguments"],[305,91,381,59],[305,97,381,62],[305,101,381,66],[306,6,382,8],[306,10,382,14,"atrule"],[306,16,382,20],[306,19,382,23],[306,23,382,27],[306,24,382,28,"getAtrule"],[306,33,382,37],[306,34,382,38,"atruleName"],[306,44,382,48],[306,46,382,50,"fallbackBasename"],[306,62,382,66],[306,63,382,67],[307,6,384,8],[307,13,384,15,"atrule"],[307,19,384,21],[307,23,384,25,"atrule"],[307,29,384,31],[307,30,384,32,"prelude"],[307,37,384,39],[307,41,384,43],[307,45,384,47],[308,4,385,4],[308,5,385,5],[309,4,386,4,"getAtruleDescriptor"],[309,23,386,23],[309,25,386,25],[309,34,386,4,"getAtruleDescriptor"],[309,53,386,23,"getAtruleDescriptor"],[309,54,386,34,"atruleName"],[309,64,386,44],[309,66,386,46,"name"],[309,70,386,50],[309,72,386,52],[310,6,387,8],[310,13,387,15],[310,17,387,19],[310,18,387,20,"atrules"],[310,25,387,27],[310,26,387,28,"hasOwnProperty"],[310,40,387,42],[310,41,387,43,"atruleName"],[310,51,387,53],[310,52,387,54],[310,56,387,58],[310,60,387,62],[310,61,387,63,"atrules"],[310,68,387,70],[310,69,387,71,"declarators"],[310,80,387,82],[310,83,388,14],[310,87,388,18],[310,88,388,19,"atrules"],[310,95,388,26],[310,96,388,27,"atruleName"],[310,106,388,37],[310,107,388,38],[310,108,388,39,"declarators"],[310,119,388,50],[310,120,388,51,"name"],[310,124,388,55],[310,125,388,56],[310,129,388,60],[310,133,388,64],[310,136,389,14],[310,140,389,18],[311,4,390,4],[311,5,390,5],[312,4,391,4,"getProperty"],[312,15,391,15],[312,17,391,17],[312,26,391,4,"getProperty"],[312,37,391,15,"getProperty"],[312,38,391,26,"propertyName"],[312,50,391,38],[312,52,391,65],[313,6,391,65],[313,10,391,40,"fallbackBasename"],[313,26,391,56],[313,29,391,56,"arguments"],[313,38,391,56],[313,39,391,56,"length"],[313,45,391,56],[313,53,391,56,"arguments"],[313,62,391,56],[313,70,391,56,"undefined"],[313,79,391,56],[313,82,391,56,"arguments"],[313,91,391,56],[313,97,391,59],[313,101,391,63],[314,6,392,8],[314,10,392,12,"property"],[314,18,392,20],[314,21,392,23,"_$$_REQUIRE"],[314,32,392,23],[314,33,392,23,"_dependencyMap"],[314,47,392,23],[314,71,392,29,"property"],[314,79,392,37],[314,80,392,38,"propertyName"],[314,92,392,50],[314,93,392,51],[315,6,393,8],[315,10,393,12,"propertyEntry"],[315,23,393,25],[315,26,393,28,"property"],[315,34,393,36],[315,35,393,37,"vendor"],[315,41,393,43],[315,45,393,47,"fallbackBasename"],[315,61,393,63],[315,64,394,14],[315,68,394,18],[315,69,394,19,"properties"],[315,79,394,29],[315,80,394,30,"property"],[315,88,394,38],[315,89,394,39,"name"],[315,93,394,43],[315,94,394,44],[315,98,394,48],[315,102,394,52],[315,103,394,53,"properties"],[315,113,394,63],[315,114,394,64,"property"],[315,122,394,72],[315,123,394,73,"basename"],[315,131,394,81],[315,132,394,82],[315,135,395,14],[315,139,395,18],[315,140,395,19,"properties"],[315,150,395,29],[315,151,395,30,"property"],[315,159,395,38],[315,160,395,39,"name"],[315,164,395,43],[315,165,395,44],[316,6,397,8],[316,13,397,15,"propertyEntry"],[316,26,397,28],[316,30,397,32],[316,34,397,36],[317,4,398,4],[317,5,398,5],[318,4,399,4,"getType"],[318,11,399,11],[318,13,399,13],[318,22,399,4,"getType"],[318,29,399,11,"getType"],[318,30,399,22,"name"],[318,34,399,26],[318,36,399,28],[319,6,400,8],[319,13,400,15],[319,17,400,19],[319,18,400,20,"types"],[319,23,400,25],[319,24,400,26,"hasOwnProperty"],[319,38,400,40],[319,39,400,41,"name"],[319,43,400,45],[319,44,400,46],[319,47,400,49],[319,51,400,53],[319,52,400,54,"types"],[319,57,400,59],[319,58,400,60,"name"],[319,62,400,64],[319,63,400,65],[319,66,400,68],[319,70,400,72],[320,4,401,4],[320,5,401,5],[321,4,403,4,"validate"],[321,12,403,12],[321,14,403,14],[321,23,403,4,"validate"],[321,31,403,12,"validate"],[321,32,403,12],[321,34,403,25],[322,6,404,8],[322,15,404,17,"validate"],[322,23,404,25,"validate"],[322,24,404,26,"syntax"],[322,30,404,32],[322,32,404,34,"name"],[322,36,404,38],[322,38,404,40,"broken"],[322,44,404,46],[322,46,404,48,"descriptor"],[322,56,404,58],[322,58,404,60],[323,8,405,12],[323,12,405,16,"broken"],[323,18,405,22],[323,19,405,23,"hasOwnProperty"],[323,33,405,37],[323,34,405,38,"name"],[323,38,405,42],[323,39,405,43],[323,41,405,45],[324,10,406,16],[324,17,406,23,"broken"],[324,23,406,29],[324,24,406,30,"name"],[324,28,406,34],[324,29,406,35],[325,8,407,12],[326,8,409,12,"broken"],[326,14,409,18],[326,15,409,19,"name"],[326,19,409,23],[326,20,409,24],[326,23,409,27],[326,28,409,32],[327,8,410,12],[327,12,410,16,"descriptor"],[327,22,410,26],[327,23,410,27,"syntax"],[327,29,410,33],[327,34,410,38],[327,38,410,42],[327,40,410,44],[328,10,411,16,"_$$_REQUIRE"],[328,21,411,16],[328,22,411,16,"_dependencyMap"],[328,36,411,16],[328,71,411,21,"descriptor"],[328,81,411,31],[328,82,411,32,"syntax"],[328,88,411,38],[328,90,411,40],[328,100,411,49,"node"],[328,104,411,53],[328,106,411,55],[329,12,412,20],[329,16,412,24,"node"],[329,20,412,28],[329,21,412,29,"type"],[329,25,412,33],[329,30,412,38],[329,36,412,44],[329,40,412,48,"node"],[329,44,412,52],[329,45,412,53,"type"],[329,49,412,57],[329,54,412,62],[329,64,412,72],[329,66,412,74],[330,14,413,24],[331,12,414,20],[332,12,416,20],[332,16,416,24,"map"],[332,19,416,27],[332,22,416,30,"node"],[332,26,416,34],[332,27,416,35,"type"],[332,31,416,39],[332,36,416,44],[332,42,416,50],[332,45,416,53,"syntax"],[332,51,416,59],[332,52,416,60,"types"],[332,57,416,65],[332,60,416,68,"syntax"],[332,66,416,74],[332,67,416,75,"properties"],[332,77,416,85],[333,12,417,20],[333,16,417,24,"brokenMap"],[333,25,417,33],[333,28,417,36,"node"],[333,32,417,40],[333,33,417,41,"type"],[333,37,417,45],[333,42,417,50],[333,48,417,56],[333,51,417,59,"brokenTypes"],[333,62,417,70],[333,65,417,73,"brokenProperties"],[333,81,417,89],[334,12,419,20],[334,16,419,24],[334,17,419,25,"map"],[334,20,419,28],[334,21,419,29,"hasOwnProperty"],[334,35,419,43],[334,36,419,44,"node"],[334,40,419,48],[334,41,419,49,"name"],[334,45,419,53],[334,46,419,54],[334,50,419,58,"validate"],[334,58,419,66],[334,59,419,67,"syntax"],[334,65,419,73],[334,67,419,75,"node"],[334,71,419,79],[334,72,419,80,"name"],[334,76,419,84],[334,78,419,86,"brokenMap"],[334,87,419,95],[334,89,419,97,"map"],[334,92,419,100],[334,93,419,101,"node"],[334,97,419,105],[334,98,419,106,"name"],[334,102,419,110],[334,103,419,111],[334,104,419,112],[334,106,419,114],[335,14,420,24,"broken"],[335,20,420,30],[335,21,420,31,"name"],[335,25,420,35],[335,26,420,36],[335,29,420,39],[335,33,420,43],[336,12,421,20],[337,10,422,16],[337,11,422,17],[337,13,422,19],[337,17,422,23],[337,18,422,24],[338,8,423,12],[339,6,424,8],[340,6,426,8],[340,10,426,12,"brokenTypes"],[340,21,426,23],[340,24,426,26],[340,25,426,27],[340,26,426,28],[341,6,427,8],[341,10,427,12,"brokenProperties"],[341,26,427,28],[341,29,427,31],[341,30,427,32],[341,31,427,33],[342,6,429,8],[342,11,429,13],[342,15,429,17,"key"],[342,18,429,20],[342,22,429,24],[342,26,429,28],[342,27,429,29,"types"],[342,32,429,34],[342,34,429,36],[343,8,430,12,"validate"],[343,16,430,20],[343,17,430,21],[343,21,430,25],[343,23,430,27,"key"],[343,26,430,30],[343,28,430,32,"brokenTypes"],[343,39,430,43],[343,41,430,45],[343,45,430,49],[343,46,430,50,"types"],[343,51,430,55],[343,52,430,56,"key"],[343,55,430,59],[343,56,430,60],[343,57,430,61],[344,6,431,8],[345,6,433,8],[345,11,433,13],[345,15,433,17,"key"],[345,18,433,20],[345,22,433,24],[345,26,433,28],[345,27,433,29,"properties"],[345,37,433,39],[345,39,433,41],[346,8,434,12,"validate"],[346,16,434,20],[346,17,434,21],[346,21,434,25],[346,23,434,27,"key"],[346,26,434,30],[346,28,434,32,"brokenProperties"],[346,44,434,48],[346,46,434,50],[346,50,434,54],[346,51,434,55,"properties"],[346,61,434,65],[346,62,434,66,"key"],[346,65,434,69],[346,66,434,70],[346,67,434,71],[347,6,435,8],[348,6,437,8,"brokenTypes"],[348,17,437,19],[348,20,437,22,"Object"],[348,26,437,28],[348,27,437,29,"keys"],[348,31,437,33],[348,32,437,34,"brokenTypes"],[348,43,437,45],[348,44,437,46],[348,45,437,47,"filter"],[348,51,437,53],[348,52,437,54],[348,62,437,63,"name"],[348,66,437,67],[348,68,437,69],[349,8,438,12],[349,15,438,19,"brokenTypes"],[349,26,438,30],[349,27,438,31,"name"],[349,31,438,35],[349,32,438,36],[350,6,439,8],[350,7,439,9],[350,8,439,10],[351,6,440,8,"brokenProperties"],[351,22,440,24],[351,25,440,27,"Object"],[351,31,440,33],[351,32,440,34,"keys"],[351,36,440,38],[351,37,440,39,"brokenProperties"],[351,53,440,55],[351,54,440,56],[351,55,440,57,"filter"],[351,61,440,63],[351,62,440,64],[351,72,440,73,"name"],[351,76,440,77],[351,78,440,79],[352,8,441,12],[352,15,441,19,"brokenProperties"],[352,31,441,35],[352,32,441,36,"name"],[352,36,441,40],[352,37,441,41],[353,6,442,8],[353,7,442,9],[353,8,442,10],[354,6,444,8],[354,10,444,12,"brokenTypes"],[354,21,444,23],[354,22,444,24,"length"],[354,28,444,30],[354,32,444,34,"brokenProperties"],[354,48,444,50],[354,49,444,51,"length"],[354,55,444,57],[354,57,444,59],[355,8,445,12],[355,15,445,19],[356,10,446,16,"types"],[356,15,446,21],[356,17,446,23,"brokenTypes"],[356,28,446,34],[357,10,447,16,"properties"],[357,20,447,26],[357,22,447,28,"brokenProperties"],[358,8,448,12],[358,9,448,13],[359,6,449,8],[360,6,451,8],[360,13,451,15],[360,17,451,19],[361,4,452,4],[361,5,452,5],[362,4,453,4,"dump"],[362,8,453,8],[362,10,453,10],[362,19,453,4,"dump"],[362,23,453,8,"dump"],[362,24,453,19,"syntaxAsAst"],[362,35,453,30],[362,37,453,32,"pretty"],[362,43,453,38],[362,45,453,40],[363,6,454,8],[363,13,454,15],[364,8,455,12,"generic"],[364,15,455,19],[364,17,455,21],[364,21,455,25],[364,22,455,26,"generic"],[364,29,455,33],[365,8,456,12,"types"],[365,13,456,17],[365,15,456,19,"dumpMapSyntax"],[365,28,456,32],[365,29,456,33],[365,33,456,37],[365,34,456,38,"types"],[365,39,456,43],[365,41,456,45],[365,42,456,46,"pretty"],[365,48,456,52],[365,50,456,54,"syntaxAsAst"],[365,61,456,65],[365,62,456,66],[366,8,457,12,"properties"],[366,18,457,22],[366,20,457,24,"dumpMapSyntax"],[366,33,457,37],[366,34,457,38],[366,38,457,42],[366,39,457,43,"properties"],[366,49,457,53],[366,51,457,55],[366,52,457,56,"pretty"],[366,58,457,62],[366,60,457,64,"syntaxAsAst"],[366,71,457,75],[366,72,457,76],[367,8,458,12,"atrules"],[367,15,458,19],[367,17,458,21,"dumpAtruleMapSyntax"],[367,36,458,40],[367,37,458,41],[367,41,458,45],[367,42,458,46,"atrules"],[367,49,458,53],[367,51,458,55],[367,52,458,56,"pretty"],[367,58,458,62],[367,60,458,64,"syntaxAsAst"],[367,71,458,75],[368,6,459,8],[368,7,459,9],[369,4,460,4],[369,5,460,5],[370,4,461,4,"toString"],[370,12,461,12],[370,14,461,14],[370,23,461,4,"toString"],[370,31,461,12,"toString"],[370,32,461,12],[370,34,461,25],[371,6,462,8],[371,13,462,15,"JSON"],[371,17,462,19],[371,18,462,20,"stringify"],[371,27,462,29],[371,28,462,30],[371,32,462,34],[371,33,462,35,"dump"],[371,37,462,39],[371,38,462,40],[371,39,462,41],[371,40,462,42],[372,4,463,4],[373,2,464,0],[373,3,464,1],[374,2,466,0,"module"],[374,8,466,6],[374,9,466,7,"exports"],[374,16,466,14],[374,19,466,17,"Lexer"],[374,24,466,22],[375,0,466,23],[375,3]],"functionMap":{"names":["<global>","dumpMapSyntax","dumpAtruleMapSyntax","valueHasVar","buildMatchResult","matchSyntax","Lexer","prototype.checkStructure","collectWarning","syntax.walk$argument_1","prototype.createDescriptor","Object.defineProperty$argument_2.get","prototype.addAtrule_","Object.keys.reduce$argument_0","prototype.addProperty_","prototype.addType_","prototype.checkAtruleName","prototype.checkAtrulePrelude","prototype.checkAtruleDescriptorName","prototype.checkPropertyName","prototype.matchAtrulePrelude","prototype.matchAtruleDescriptor","prototype.matchDeclaration","prototype.matchProperty","prototype.matchType","prototype.match","prototype.findValueFragments","prototype.findDeclarationValueFragments","prototype.findAllFragments","<anonymous>","prototype.getAtrule","prototype.getAtrulePrelude","prototype.getAtruleDescriptor","prototype.getProperty","prototype.getType","prototype.validate","validate","walk$argument_1","Object.keys.filter$argument_0","prototype.dump","prototype.toString"],"mappings":"AAA;ACgB;CDY;AEE;CFe;AGE;CHQ;AIE;CJU;AKE;CLwB;YME;CNmC;oBOI;QCC;SDK;8BEK;SFM;KPG;sBUE;yBCmB;qBDM;qBCQ;iBDM;KVK;gBYC;yDCU;iBDG;KZG;kBcC;KdM;ceC;KfU;qBgBE;KhBI;wBiBC;KjBgB;+BkBC;KlBkB;uBmBC;KnBW;wBoBE;KpBY;2BqBC;KrBW;sBsBC;KtBM;mBuBC;KvBQ;ewBC;KxBQ;WyBC;KzBU;wB0BE;K1BE;mC2BC;K3BE;sB4BC;mBCK;aDE;K5BI;e8BE;K9BO;sB+BC;K/BI;yBgCC;KhCI;iBiCC;KjCO;akCC;KlCE;cmCE;QCC;wCCO;iBDW;SDE;sDGa;SHE;gEGC;SHE;KnCU;UuCC;KvCO;cwCC;KxCE"}},"type":"js/module"}]}