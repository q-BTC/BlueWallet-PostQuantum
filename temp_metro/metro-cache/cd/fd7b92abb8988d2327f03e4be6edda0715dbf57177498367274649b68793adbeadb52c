{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":203,"column":0,"index":5677}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":203,"column":0,"index":5677}}],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":203,"column":0,"index":5677}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":203,"column":0,"index":5677}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":203,"column":0,"index":5677}}],"key":"aU3Lrys8xTVpYSDJal2nhppojC8="}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":203,"column":0,"index":5677}}],"key":"4DwyfFXBA53CJWVTVj5w3kH1PUg="}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":203,"column":0,"index":5677}}],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA="}},{"name":"bip32","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":37},"end":{"line":2,"column":33,"index":70}}],"key":"N06/O/9WKiQ+JvkVogn1t6zAaK0="}},{"name":"bitcoinjs-lib","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":71},"end":{"line":3,"column":41,"index":112}}],"key":"/nlroPCTcjBceL8E3aKsbjY7aTo="}},{"name":"bs58check","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":113},"end":{"line":4,"column":28,"index":141}}],"key":"NLzwLXOhrhT51Y7aP9purlo+2cM="}},{"name":"../../blue_modules/noble_ecc","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":143},"end":{"line":6,"column":47,"index":190}}],"key":"Aqf0Vm30DplNvzAB1bhpm+uOhYU="}},{"name":"aezeed","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":36,"index":36}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":36,"index":36}}],"key":"eSJVc+L01iqQRrE/0BckPq1UPjo=","isOptional":true}},{"name":"./abstract-hd-electrum-wallet","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":191},"end":{"line":7,"column":73,"index":264}}],"key":"A/Wx3xahkB658fXb/ksu5385tqM="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.HDAezeedWallet = void 0;\n  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/getPrototypeOf\"));\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/inherits\"));\n  var _bip = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"bip32\"));\n  var bitcoin = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8], \"bitcoinjs-lib\"));\n  var _bs58check = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9], \"bs58check\"));\n  var _noble_ecc = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10], \"../../blue_modules/noble_ecc\"));\n  function _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\n  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\n  var bip32 = (0, _bip.default)(_noble_ecc.default);\n\n  /**\n   * AEZEED mnemonics support, which is used in LND\n   * Support only BIP84 (native segwit) derivations\n   *\n   * @see https://github.com/lightningnetwork/lnd/tree/master/aezeed\n   * @see https://github.com/bitcoinjs/aezeed\n   * @see https://github.com/lightningnetwork/lnd/issues/4960\n   * @see https://github.com/guggero/chantools/blob/master/doc/chantools_genimportscript.md\n   * @see https://github.com/lightningnetwork/lnd/blob/master/keychain/derivation.go\n   */\n  var HDAezeedWallet = exports.HDAezeedWallet = /*#__PURE__*/function (_AbstractHDElectrumWa) {\n    function HDAezeedWallet() {\n      var _this;\n      (0, _classCallCheck2.default)(this, HDAezeedWallet);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, HDAezeedWallet, [].concat(args));\n      _this.segwitType = 'p2wpkh';\n      // @ts-ignore: override\n      _this.type = HDAezeedWallet.type;\n      // @ts-ignore: override\n      _this.typeReadable = HDAezeedWallet.typeReadable;\n      return _this;\n    }\n    (0, _inherits2.default)(HDAezeedWallet, _AbstractHDElectrumWa);\n    return (0, _createClass2.default)(HDAezeedWallet, [{\n      key: \"setSecret\",\n      value: function setSecret(newSecret) {\n        this.secret = newSecret.trim();\n        this.secret = this.secret.replace(/[^a-zA-Z0-9]/g, ' ').replace(/\\s+/g, ' ');\n        return this;\n      }\n    }, {\n      key: \"_getEntropyCached\",\n      value: function _getEntropyCached() {\n        if (this._entropyHex) {\n          // cache hit\n          return Buffer.from(this._entropyHex, 'hex');\n        } else {\n          throw new Error('Entropy cache is not filled');\n        }\n      }\n    }, {\n      key: \"getXpub\",\n      value: function getXpub() {\n        // first, getting xpub\n        var root = bip32.fromSeed(this._getEntropyCached());\n        var path = \"m/84'/0'/0'\";\n        var child = root.derivePath(path).neutered();\n        var xpub = child.toBase58();\n\n        // bitcoinjs does not support zpub yet, so we just convert it from xpub\n        var data = _bs58check.default.decode(xpub);\n        data = data.slice(4);\n        data = Buffer.concat([Buffer.from('04b24746', 'hex'), data]);\n        this._xpub = _bs58check.default.encode(data);\n        return this._xpub;\n      }\n    }, {\n      key: \"validateMnemonic\",\n      value: function validateMnemonic() {\n        throw new Error('Use validateMnemonicAsync()');\n      }\n    }, {\n      key: \"validateMnemonicAsync\",\n      value: function () {\n        var _validateMnemonicAsync = (0, _asyncToGenerator2.default)(function* () {\n          var passphrase = this.getPassphrase() || 'aezeed';\n          try {\n            var cipherSeed1 = yield _$$_REQUIRE(_dependencyMap[11], \"aezeed\").CipherSeed.fromMnemonic(this.secret, passphrase);\n            this._entropyHex = cipherSeed1.entropy.toString('hex'); // save cache\n            return !!cipherSeed1.entropy;\n          } catch (_) {\n            return false;\n          }\n        });\n        function validateMnemonicAsync() {\n          return _validateMnemonicAsync.apply(this, arguments);\n        }\n        return validateMnemonicAsync;\n      }()\n    }, {\n      key: \"mnemonicInvalidPassword\",\n      value: function () {\n        var _mnemonicInvalidPassword = (0, _asyncToGenerator2.default)(function* () {\n          var passphrase = this.getPassphrase() || 'aezeed';\n          try {\n            var cipherSeed1 = yield _$$_REQUIRE(_dependencyMap[11], \"aezeed\").CipherSeed.fromMnemonic(this.secret, passphrase);\n            this._entropyHex = cipherSeed1.entropy.toString('hex'); // save cache\n          } catch (error) {\n            return error.message === 'Invalid Password';\n          }\n          return false;\n        });\n        function mnemonicInvalidPassword() {\n          return _mnemonicInvalidPassword.apply(this, arguments);\n        }\n        return mnemonicInvalidPassword;\n      }()\n    }, {\n      key: \"generate\",\n      value: function () {\n        var _generate = (0, _asyncToGenerator2.default)(function* () {\n          throw new Error('Not implemented');\n        });\n        function generate() {\n          return _generate.apply(this, arguments);\n        }\n        return generate;\n      }()\n    }, {\n      key: \"_getNode0\",\n      value: function _getNode0() {\n        var root = bip32.fromSeed(this._getEntropyCached());\n        var node = root.derivePath(\"m/84'/0'/0'\");\n        return node.derive(0);\n      }\n    }, {\n      key: \"_getNode1\",\n      value: function _getNode1() {\n        var root = bip32.fromSeed(this._getEntropyCached());\n        var node = root.derivePath(\"m/84'/0'/0'\");\n        return node.derive(1);\n      }\n    }, {\n      key: \"_getInternalAddressByIndex\",\n      value: function _getInternalAddressByIndex(index) {\n        index = index * 1; // cast to int\n        if (this.internal_addresses_cache[index]) return this.internal_addresses_cache[index]; // cache hit\n\n        this._node1 = this._node1 || this._getNode1(); // cache\n\n        var address = bitcoin.payments.p2wpkh({\n          pubkey: this._node1.derive(index).publicKey\n        }).address;\n        if (!address) {\n          throw new Error('Internal error: no address in _getInternalAddressByIndex');\n        }\n        return this.internal_addresses_cache[index] = address;\n      }\n    }, {\n      key: \"_getExternalAddressByIndex\",\n      value: function _getExternalAddressByIndex(index) {\n        index = index * 1; // cast to int\n        if (this.external_addresses_cache[index]) return this.external_addresses_cache[index]; // cache hit\n\n        this._node0 = this._node0 || this._getNode0(); // cache\n\n        var address = bitcoin.payments.p2wpkh({\n          pubkey: this._node0.derive(index).publicKey\n        }).address;\n        if (!address) {\n          throw new Error('Internal error: no address in _getExternalAddressByIndex');\n        }\n        return this.external_addresses_cache[index] = address;\n      }\n    }, {\n      key: \"_getWIFByIndex\",\n      value: function _getWIFByIndex(internal, index) {\n        if (!this.secret) return false;\n        var root = bip32.fromSeed(this._getEntropyCached());\n        var path = `m/84'/0'/0'/${internal ? 1 : 0}/${index}`;\n        var child = root.derivePath(path);\n        return child.toWIF();\n      }\n    }, {\n      key: \"_getNodePubkeyByIndex\",\n      value: function _getNodePubkeyByIndex(node, index) {\n        index = index * 1; // cast to int\n\n        if (node === 0 && !this._node0) {\n          this._node0 = this._getNode0();\n        }\n        if (node === 1 && !this._node1) {\n          this._node1 = this._getNode1();\n        }\n        if (node === 0 && this._node0) {\n          return this._node0.derive(index).publicKey;\n        }\n        if (node === 1 && this._node1) {\n          return this._node1.derive(index).publicKey;\n        }\n        throw new Error('Internal error: this._node0 or this._node1 is undefined');\n      }\n    }, {\n      key: \"getIdentityPubkey\",\n      value: function getIdentityPubkey() {\n        var root = bip32.fromSeed(this._getEntropyCached());\n        var node = root.derivePath(\"m/1017'/0'/6'/0/0\");\n        return node.publicKey.toString('hex');\n      }\n\n      // since its basically a bip84 wallet, we allow all other standard BIP84 features:\n    }, {\n      key: \"allowSend\",\n      value: function allowSend() {\n        return true;\n      }\n    }, {\n      key: \"allowRBF\",\n      value: function allowRBF() {\n        return true;\n      }\n    }, {\n      key: \"allowPayJoin\",\n      value: function allowPayJoin() {\n        return true;\n      }\n    }, {\n      key: \"isSegwit\",\n      value: function isSegwit() {\n        return true;\n      }\n    }, {\n      key: \"allowSignVerifyMessage\",\n      value: function allowSignVerifyMessage() {\n        return true;\n      }\n    }, {\n      key: \"allowXpub\",\n      value: function allowXpub() {\n        return true;\n      }\n    }]);\n  }(_$$_REQUIRE(_dependencyMap[12], \"./abstract-hd-electrum-wallet\").AbstractHDElectrumWallet);\n  HDAezeedWallet.type = 'HDAezeedWallet';\n  HDAezeedWallet.typeReadable = 'HD Aezeed';\n  HDAezeedWallet.derivationPath = \"m/84'/0'/0'\";\n});","lineCount":252,"map":[[13,2,2,0],[13,6,2,0,"_bip"],[13,10,2,0],[13,13,2,0,"_interopRequireDefault"],[13,35,2,0],[13,36,2,0,"_$$_REQUIRE"],[13,47,2,0],[13,48,2,0,"_dependencyMap"],[13,62,2,0],[14,2,3,0],[14,6,3,0,"bitcoin"],[14,13,3,0],[14,16,3,0,"_interopRequireWildcard"],[14,39,3,0],[14,40,3,0,"_$$_REQUIRE"],[14,51,3,0],[14,52,3,0,"_dependencyMap"],[14,66,3,0],[15,2,4,0],[15,6,4,0,"_bs58check"],[15,16,4,0],[15,19,4,0,"_interopRequireDefault"],[15,41,4,0],[15,42,4,0,"_$$_REQUIRE"],[15,53,4,0],[15,54,4,0,"_dependencyMap"],[15,68,4,0],[16,2,6,0],[16,6,6,0,"_noble_ecc"],[16,16,6,0],[16,19,6,0,"_interopRequireDefault"],[16,41,6,0],[16,42,6,0,"_$$_REQUIRE"],[16,53,6,0],[16,54,6,0,"_dependencyMap"],[16,68,6,0],[17,2,6,47],[17,11,6,47,"_getRequireWildcardCache"],[17,36,6,47,"e"],[17,37,6,47],[17,66,6,47,"WeakMap"],[17,73,6,47],[17,92,6,47,"r"],[17,93,6,47],[17,100,6,47,"WeakMap"],[17,107,6,47],[17,111,6,47,"t"],[17,112,6,47],[17,119,6,47,"WeakMap"],[17,126,6,47],[17,138,6,47,"_getRequireWildcardCache"],[17,162,6,47],[17,174,6,47,"_getRequireWildcardCache"],[17,199,6,47,"e"],[17,200,6,47],[17,211,6,47,"e"],[17,212,6,47],[17,215,6,47,"t"],[17,216,6,47],[17,219,6,47,"r"],[17,220,6,47],[17,225,6,47,"e"],[17,226,6,47],[18,2,6,47],[18,11,6,47,"_interopRequireWildcard"],[18,35,6,47,"e"],[18,36,6,47],[18,38,6,47,"r"],[18,39,6,47],[18,48,6,47,"r"],[18,49,6,47],[18,53,6,47,"e"],[18,54,6,47],[18,58,6,47,"e"],[18,59,6,47],[18,60,6,47,"__esModule"],[18,70,6,47],[18,79,6,47,"e"],[18,80,6,47],[18,95,6,47,"e"],[18,96,6,47],[18,119,6,47,"e"],[18,120,6,47],[18,145,6,47,"e"],[18,146,6,47],[18,157,6,47,"default"],[18,164,6,47],[18,166,6,47,"e"],[18,167,6,47],[18,175,6,47,"t"],[18,176,6,47],[18,179,6,47,"_getRequireWildcardCache"],[18,203,6,47],[18,204,6,47,"r"],[18,205,6,47],[18,212,6,47,"t"],[18,213,6,47],[18,217,6,47,"t"],[18,218,6,47],[18,219,6,47,"has"],[18,222,6,47],[18,223,6,47,"e"],[18,224,6,47],[18,234,6,47,"t"],[18,235,6,47],[18,236,6,47,"get"],[18,239,6,47],[18,240,6,47,"e"],[18,241,6,47],[18,248,6,47,"n"],[18,249,6,47],[18,254,6,47,"__proto__"],[18,263,6,47],[18,273,6,47,"a"],[18,274,6,47],[18,277,6,47,"Object"],[18,283,6,47],[18,284,6,47,"defineProperty"],[18,298,6,47],[18,302,6,47,"Object"],[18,308,6,47],[18,309,6,47,"getOwnPropertyDescriptor"],[18,333,6,47],[18,344,6,47,"u"],[18,345,6,47],[18,349,6,47,"e"],[18,350,6,47],[18,370,6,47,"u"],[18,371,6,47],[18,378,6,47,"hasOwnProperty"],[18,392,6,47],[18,393,6,47,"call"],[18,397,6,47],[18,398,6,47,"e"],[18,399,6,47],[18,401,6,47,"u"],[18,402,6,47],[18,411,6,47,"i"],[18,412,6,47],[18,415,6,47,"a"],[18,416,6,47],[18,419,6,47,"Object"],[18,425,6,47],[18,426,6,47,"getOwnPropertyDescriptor"],[18,450,6,47],[18,451,6,47,"e"],[18,452,6,47],[18,454,6,47,"u"],[18,455,6,47],[18,465,6,47,"i"],[18,466,6,47],[18,471,6,47,"i"],[18,472,6,47],[18,473,6,47,"get"],[18,476,6,47],[18,480,6,47,"i"],[18,481,6,47],[18,482,6,47,"set"],[18,485,6,47],[18,489,6,47,"Object"],[18,495,6,47],[18,496,6,47,"defineProperty"],[18,510,6,47],[18,511,6,47,"n"],[18,512,6,47],[18,514,6,47,"u"],[18,515,6,47],[18,517,6,47,"i"],[18,518,6,47],[18,522,6,47,"n"],[18,523,6,47],[18,524,6,47,"u"],[18,525,6,47],[18,529,6,47,"e"],[18,530,6,47],[18,531,6,47,"u"],[18,532,6,47],[18,544,6,47,"n"],[18,545,6,47],[18,546,6,47,"default"],[18,553,6,47],[18,556,6,47,"e"],[18,557,6,47],[18,559,6,47,"t"],[18,560,6,47],[18,564,6,47,"t"],[18,565,6,47],[18,566,6,47,"set"],[18,569,6,47],[18,570,6,47,"e"],[18,571,6,47],[18,573,6,47,"n"],[18,574,6,47],[18,577,6,47,"n"],[18,578,6,47],[19,2,6,47],[19,11,6,47,"_callSuper"],[19,22,6,47,"t"],[19,23,6,47],[19,25,6,47,"o"],[19,26,6,47],[19,28,6,47,"e"],[19,29,6,47],[19,40,6,47,"o"],[19,41,6,47],[19,48,6,47,"_getPrototypeOf2"],[19,64,6,47],[19,65,6,47,"default"],[19,72,6,47],[19,74,6,47,"o"],[19,75,6,47],[19,82,6,47,"_possibleConstructorReturn2"],[19,109,6,47],[19,110,6,47,"default"],[19,117,6,47],[19,119,6,47,"t"],[19,120,6,47],[19,122,6,47,"_isNativeReflectConstruct"],[19,147,6,47],[19,152,6,47,"Reflect"],[19,159,6,47],[19,160,6,47,"construct"],[19,169,6,47],[19,170,6,47,"o"],[19,171,6,47],[19,173,6,47,"e"],[19,174,6,47],[19,186,6,47,"_getPrototypeOf2"],[19,202,6,47],[19,203,6,47,"default"],[19,210,6,47],[19,212,6,47,"t"],[19,213,6,47],[19,215,6,47,"constructor"],[19,226,6,47],[19,230,6,47,"o"],[19,231,6,47],[19,232,6,47,"apply"],[19,237,6,47],[19,238,6,47,"t"],[19,239,6,47],[19,241,6,47,"e"],[19,242,6,47],[20,2,6,47],[20,11,6,47,"_isNativeReflectConstruct"],[20,37,6,47],[20,51,6,47,"t"],[20,52,6,47],[20,56,6,47,"Boolean"],[20,63,6,47],[20,64,6,47,"prototype"],[20,73,6,47],[20,74,6,47,"valueOf"],[20,81,6,47],[20,82,6,47,"call"],[20,86,6,47],[20,87,6,47,"Reflect"],[20,94,6,47],[20,95,6,47,"construct"],[20,104,6,47],[20,105,6,47,"Boolean"],[20,112,6,47],[20,145,6,47,"t"],[20,146,6,47],[20,159,6,47,"_isNativeReflectConstruct"],[20,184,6,47],[20,196,6,47,"_isNativeReflectConstruct"],[20,222,6,47],[20,235,6,47,"t"],[20,236,6,47],[21,2,9,0],[21,6,9,6,"bip32"],[21,11,9,11],[21,14,9,14],[21,18,9,14,"BIP32Factory"],[21,30,9,26],[21,32,9,27,"ecc"],[21,50,9,30],[21,51,9,31],[23,2,11,0],[24,0,12,0],[25,0,13,0],[26,0,14,0],[27,0,15,0],[28,0,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,2,11,0],[33,6,21,13,"HDAezeedWallet"],[33,20,21,27],[33,23,21,27,"exports"],[33,30,21,27],[33,31,21,27,"HDAezeedWallet"],[33,45,21,27],[33,71,21,27,"_AbstractHDElectrumWa"],[33,92,21,27],[34,4,21,27],[34,13,21,27,"HDAezeedWallet"],[34,28,21,27],[35,6,21,27],[35,10,21,27,"_this"],[35,15,21,27],[36,6,21,27],[36,10,21,27,"_classCallCheck2"],[36,26,21,27],[36,27,21,27,"default"],[36,34,21,27],[36,42,21,27,"HDAezeedWallet"],[36,56,21,27],[37,6,21,27],[37,15,21,27,"_len"],[37,19,21,27],[37,22,21,27,"arguments"],[37,31,21,27],[37,32,21,27,"length"],[37,38,21,27],[37,40,21,27,"args"],[37,44,21,27],[37,51,21,27,"Array"],[37,56,21,27],[37,57,21,27,"_len"],[37,61,21,27],[37,64,21,27,"_key"],[37,68,21,27],[37,74,21,27,"_key"],[37,78,21,27],[37,81,21,27,"_len"],[37,85,21,27],[37,87,21,27,"_key"],[37,91,21,27],[38,8,21,27,"args"],[38,12,21,27],[38,13,21,27,"_key"],[38,17,21,27],[38,21,21,27,"arguments"],[38,30,21,27],[38,31,21,27,"_key"],[38,35,21,27],[39,6,21,27],[40,6,21,27,"_this"],[40,11,21,27],[40,14,21,27,"_callSuper"],[40,24,21,27],[40,31,21,27,"HDAezeedWallet"],[40,45,21,27],[40,50,21,27,"concat"],[40,56,21,27],[40,57,21,27,"args"],[40,61,21,27],[41,6,21,27,"_this"],[41,11,21,27],[41,12,24,18,"segwitType"],[41,22,24,28],[41,25,24,31],[41,33,24,39],[42,6,26,2],[43,6,26,2,"_this"],[43,11,26,2],[43,12,27,18,"type"],[43,16,27,22],[43,19,27,25,"HDAezeedWallet"],[43,33,27,39],[43,34,27,40,"type"],[43,38,27,44],[44,6,28,2],[45,6,28,2,"_this"],[45,11,28,2],[45,12,29,18,"typeReadable"],[45,24,29,30],[45,27,29,33,"HDAezeedWallet"],[45,41,29,47],[45,42,29,48,"typeReadable"],[45,54,29,60],[46,6,29,60],[46,13,29,60,"_this"],[46,18,29,60],[47,4,29,60],[48,4,29,60],[48,8,29,60,"_inherits2"],[48,18,29,60],[48,19,29,60,"default"],[48,26,29,60],[48,28,29,60,"HDAezeedWallet"],[48,42,29,60],[48,44,29,60,"_AbstractHDElectrumWa"],[48,65,29,60],[49,4,29,60],[49,15,29,60,"_createClass2"],[49,28,29,60],[49,29,29,60,"default"],[49,36,29,60],[49,38,29,60,"HDAezeedWallet"],[49,52,29,60],[50,6,29,60,"key"],[50,9,29,60],[51,6,29,60,"value"],[51,11,29,60],[51,13,33,2],[51,22,33,2,"setSecret"],[51,31,33,11,"setSecret"],[51,32,33,12,"newSecret"],[51,41,33,29],[51,43,33,37],[52,8,34,4],[52,12,34,8],[52,13,34,9,"secret"],[52,19,34,15],[52,22,34,18,"newSecret"],[52,31,34,27],[52,32,34,28,"trim"],[52,36,34,32],[52,37,34,33],[52,38,34,34],[53,8,35,4],[53,12,35,8],[53,13,35,9,"secret"],[53,19,35,15],[53,22,35,18],[53,26,35,22],[53,27,35,23,"secret"],[53,33,35,29],[53,34,35,30,"replace"],[53,41,35,37],[53,42,35,38],[53,57,35,53],[53,59,35,55],[53,62,35,58],[53,63,35,59],[53,64,35,60,"replace"],[53,71,35,67],[53,72,35,68],[53,78,35,74],[53,80,35,76],[53,83,35,79],[53,84,35,80],[54,8,36,4],[54,15,36,11],[54,19,36,15],[55,6,37,2],[56,4,37,3],[57,6,37,3,"key"],[57,9,37,3],[58,6,37,3,"value"],[58,11,37,3],[58,13,39,2],[58,22,39,2,"_getEntropyCached"],[58,39,39,19,"_getEntropyCached"],[58,40,39,19],[58,42,39,22],[59,8,40,4],[59,12,40,8],[59,16,40,12],[59,17,40,13,"_entropyHex"],[59,28,40,24],[59,30,40,26],[60,10,41,6],[61,10,42,6],[61,17,42,13,"Buffer"],[61,23,42,19],[61,24,42,20,"from"],[61,28,42,24],[61,29,42,25],[61,33,42,29],[61,34,42,30,"_entropyHex"],[61,45,42,41],[61,47,42,43],[61,52,42,48],[61,53,42,49],[62,8,43,4],[62,9,43,5],[62,15,43,11],[63,10,44,6],[63,16,44,12],[63,20,44,16,"Error"],[63,25,44,21],[63,26,44,22],[63,55,44,51],[63,56,44,52],[64,8,45,4],[65,6,46,2],[66,4,46,3],[67,6,46,3,"key"],[67,9,46,3],[68,6,46,3,"value"],[68,11,46,3],[68,13,48,2],[68,22,48,2,"getXpub"],[68,29,48,9,"getXpub"],[68,30,48,9],[68,32,48,12],[69,8,49,4],[70,8,50,4],[70,12,50,10,"root"],[70,16,50,14],[70,19,50,17,"bip32"],[70,24,50,22],[70,25,50,23,"fromSeed"],[70,33,50,31],[70,34,50,32],[70,38,50,36],[70,39,50,37,"_getEntropyCached"],[70,56,50,54],[70,57,50,55],[70,58,50,56],[70,59,50,57],[71,8,52,4],[71,12,52,10,"path"],[71,16,52,14],[71,19,52,17],[71,32,52,30],[72,8,53,4],[72,12,53,10,"child"],[72,17,53,15],[72,20,53,18,"root"],[72,24,53,22],[72,25,53,23,"derivePath"],[72,35,53,33],[72,36,53,34,"path"],[72,40,53,38],[72,41,53,39],[72,42,53,40,"neutered"],[72,50,53,48],[72,51,53,49],[72,52,53,50],[73,8,54,4],[73,12,54,10,"xpub"],[73,16,54,14],[73,19,54,17,"child"],[73,24,54,22],[73,25,54,23,"toBase58"],[73,33,54,31],[73,34,54,32],[73,35,54,33],[75,8,56,4],[76,8,57,4],[76,12,57,8,"data"],[76,16,57,12],[76,19,57,15,"b58"],[76,37,57,18],[76,38,57,19,"decode"],[76,44,57,25],[76,45,57,26,"xpub"],[76,49,57,30],[76,50,57,31],[77,8,58,4,"data"],[77,12,58,8],[77,15,58,11,"data"],[77,19,58,15],[77,20,58,16,"slice"],[77,25,58,21],[77,26,58,22],[77,27,58,23],[77,28,58,24],[78,8,59,4,"data"],[78,12,59,8],[78,15,59,11,"Buffer"],[78,21,59,17],[78,22,59,18,"concat"],[78,28,59,24],[78,29,59,25],[78,30,59,26,"Buffer"],[78,36,59,32],[78,37,59,33,"from"],[78,41,59,37],[78,42,59,38],[78,52,59,48],[78,54,59,50],[78,59,59,55],[78,60,59,56],[78,62,59,58,"data"],[78,66,59,62],[78,67,59,63],[78,68,59,64],[79,8,60,4],[79,12,60,8],[79,13,60,9,"_xpub"],[79,18,60,14],[79,21,60,17,"b58"],[79,39,60,20],[79,40,60,21,"encode"],[79,46,60,27],[79,47,60,28,"data"],[79,51,60,32],[79,52,60,33],[80,8,62,4],[80,15,62,11],[80,19,62,15],[80,20,62,16,"_xpub"],[80,25,62,21],[81,6,63,2],[82,4,63,3],[83,6,63,3,"key"],[83,9,63,3],[84,6,63,3,"value"],[84,11,63,3],[84,13,65,2],[84,22,65,2,"validateMnemonic"],[84,38,65,18,"validateMnemonic"],[84,39,65,18],[84,41,65,30],[85,8,66,4],[85,14,66,10],[85,18,66,14,"Error"],[85,23,66,19],[85,24,66,20],[85,53,66,49],[85,54,66,50],[86,6,67,2],[87,4,67,3],[88,6,67,3,"key"],[88,9,67,3],[89,6,67,3,"value"],[89,11,67,3],[90,8,67,3],[90,12,67,3,"_validateMnemonicAsync"],[90,34,67,3],[90,41,67,3,"_asyncToGenerator2"],[90,59,67,3],[90,60,67,3,"default"],[90,67,67,3],[90,69,69,2],[90,82,69,32],[91,10,70,4],[91,14,70,10,"passphrase"],[91,24,70,20],[91,27,70,23],[91,31,70,27],[91,32,70,28,"getPassphrase"],[91,45,70,41],[91,46,70,42],[91,47,70,43],[91,51,70,47],[91,59,70,55],[92,10,71,4],[92,14,71,8],[93,12,72,6],[93,16,72,12,"cipherSeed1"],[93,27,72,23],[93,36,72,32,"CipherSeed"],[93,67,72,32],[93,68,72,32,"CipherSeed"],[93,88,72,42],[93,89,72,43,"fromMnemonic"],[93,101,72,55],[93,102,72,56],[93,106,72,60],[93,107,72,61,"secret"],[93,113,72,67],[93,115,72,69,"passphrase"],[93,125,72,79],[93,126,72,80],[94,12,73,6],[94,16,73,10],[94,17,73,11,"_entropyHex"],[94,28,73,22],[94,31,73,25,"cipherSeed1"],[94,42,73,36],[94,43,73,37,"entropy"],[94,50,73,44],[94,51,73,45,"toString"],[94,59,73,53],[94,60,73,54],[94,65,73,59],[94,66,73,60],[94,67,73,61],[94,68,73,62],[95,12,74,6],[95,19,74,13],[95,20,74,14],[95,21,74,15,"cipherSeed1"],[95,32,74,26],[95,33,74,27,"entropy"],[95,40,74,34],[96,10,75,4],[96,11,75,5],[96,12,75,6],[96,19,75,13,"_"],[96,20,75,14],[96,22,75,16],[97,12,76,6],[97,19,76,13],[97,24,76,18],[98,10,77,4],[99,8,78,2],[99,9,78,3],[100,8,78,3],[100,17,69,8,"validateMnemonicAsync"],[100,38,69,29,"validateMnemonicAsync"],[100,39,69,29],[101,10,69,29],[101,17,69,29,"_validateMnemonicAsync"],[101,39,69,29],[101,40,69,29,"apply"],[101,45,69,29],[101,52,69,29,"arguments"],[101,61,69,29],[102,8,69,29],[103,8,69,29],[103,15,69,8,"validateMnemonicAsync"],[103,36,69,29],[104,6,69,29],[105,4,69,29],[106,6,69,29,"key"],[106,9,69,29],[107,6,69,29,"value"],[107,11,69,29],[108,8,69,29],[108,12,69,29,"_mnemonicInvalidPassword"],[108,36,69,29],[108,43,69,29,"_asyncToGenerator2"],[108,61,69,29],[108,62,69,29,"default"],[108,69,69,29],[108,71,80,2],[108,84,80,34],[109,10,81,4],[109,14,81,10,"passphrase"],[109,24,81,20],[109,27,81,23],[109,31,81,27],[109,32,81,28,"getPassphrase"],[109,45,81,41],[109,46,81,42],[109,47,81,43],[109,51,81,47],[109,59,81,55],[110,10,82,4],[110,14,82,8],[111,12,83,6],[111,16,83,12,"cipherSeed1"],[111,27,83,23],[111,36,83,32,"CipherSeed"],[111,67,83,32],[111,68,83,32,"CipherSeed"],[111,88,83,42],[111,89,83,43,"fromMnemonic"],[111,101,83,55],[111,102,83,56],[111,106,83,60],[111,107,83,61,"secret"],[111,113,83,67],[111,115,83,69,"passphrase"],[111,125,83,79],[111,126,83,80],[112,12,84,6],[112,16,84,10],[112,17,84,11,"_entropyHex"],[112,28,84,22],[112,31,84,25,"cipherSeed1"],[112,42,84,36],[112,43,84,37,"entropy"],[112,50,84,44],[112,51,84,45,"toString"],[112,59,84,53],[112,60,84,54],[112,65,84,59],[112,66,84,60],[112,67,84,61],[112,68,84,62],[113,10,85,4],[113,11,85,5],[113,12,85,6],[113,19,85,13,"error"],[113,24,85,23],[113,26,85,25],[114,12,86,6],[114,19,86,13,"error"],[114,24,86,18],[114,25,86,19,"message"],[114,32,86,26],[114,37,86,31],[114,55,86,49],[115,10,87,4],[116,10,88,4],[116,17,88,11],[116,22,88,16],[117,8,89,2],[117,9,89,3],[118,8,89,3],[118,17,80,8,"mnemonicInvalidPassword"],[118,40,80,31,"mnemonicInvalidPassword"],[118,41,80,31],[119,10,80,31],[119,17,80,31,"_mnemonicInvalidPassword"],[119,41,80,31],[119,42,80,31,"apply"],[119,47,80,31],[119,54,80,31,"arguments"],[119,63,80,31],[120,8,80,31],[121,8,80,31],[121,15,80,8,"mnemonicInvalidPassword"],[121,38,80,31],[122,6,80,31],[123,4,80,31],[124,6,80,31,"key"],[124,9,80,31],[125,6,80,31,"value"],[125,11,80,31],[126,8,80,31],[126,12,80,31,"_generate"],[126,21,80,31],[126,28,80,31,"_asyncToGenerator2"],[126,46,80,31],[126,47,80,31,"default"],[126,54,80,31],[126,56,91,2],[126,69,91,19],[127,10,92,4],[127,16,92,10],[127,20,92,14,"Error"],[127,25,92,19],[127,26,92,20],[127,43,92,37],[127,44,92,38],[128,8,93,2],[128,9,93,3],[129,8,93,3],[129,17,91,8,"generate"],[129,25,91,16,"generate"],[129,26,91,16],[130,10,91,16],[130,17,91,16,"_generate"],[130,26,91,16],[130,27,91,16,"apply"],[130,32,91,16],[130,39,91,16,"arguments"],[130,48,91,16],[131,8,91,16],[132,8,91,16],[132,15,91,8,"generate"],[132,23,91,16],[133,6,91,16],[134,4,91,16],[135,6,91,16,"key"],[135,9,91,16],[136,6,91,16,"value"],[136,11,91,16],[136,13,95,2],[136,22,95,2,"_getNode0"],[136,31,95,11,"_getNode0"],[136,32,95,11],[136,34,95,14],[137,8,96,4],[137,12,96,10,"root"],[137,16,96,14],[137,19,96,17,"bip32"],[137,24,96,22],[137,25,96,23,"fromSeed"],[137,33,96,31],[137,34,96,32],[137,38,96,36],[137,39,96,37,"_getEntropyCached"],[137,56,96,54],[137,57,96,55],[137,58,96,56],[137,59,96,57],[138,8,97,4],[138,12,97,10,"node"],[138,16,97,14],[138,19,97,17,"root"],[138,23,97,21],[138,24,97,22,"derivePath"],[138,34,97,32],[138,35,97,33],[138,48,97,46],[138,49,97,47],[139,8,98,4],[139,15,98,11,"node"],[139,19,98,15],[139,20,98,16,"derive"],[139,26,98,22],[139,27,98,23],[139,28,98,24],[139,29,98,25],[140,6,99,2],[141,4,99,3],[142,6,99,3,"key"],[142,9,99,3],[143,6,99,3,"value"],[143,11,99,3],[143,13,101,2],[143,22,101,2,"_getNode1"],[143,31,101,11,"_getNode1"],[143,32,101,11],[143,34,101,14],[144,8,102,4],[144,12,102,10,"root"],[144,16,102,14],[144,19,102,17,"bip32"],[144,24,102,22],[144,25,102,23,"fromSeed"],[144,33,102,31],[144,34,102,32],[144,38,102,36],[144,39,102,37,"_getEntropyCached"],[144,56,102,54],[144,57,102,55],[144,58,102,56],[144,59,102,57],[145,8,103,4],[145,12,103,10,"node"],[145,16,103,14],[145,19,103,17,"root"],[145,23,103,21],[145,24,103,22,"derivePath"],[145,34,103,32],[145,35,103,33],[145,48,103,46],[145,49,103,47],[146,8,104,4],[146,15,104,11,"node"],[146,19,104,15],[146,20,104,16,"derive"],[146,26,104,22],[146,27,104,23],[146,28,104,24],[146,29,104,25],[147,6,105,2],[148,4,105,3],[149,6,105,3,"key"],[149,9,105,3],[150,6,105,3,"value"],[150,11,105,3],[150,13,107,2],[150,22,107,2,"_getInternalAddressByIndex"],[150,48,107,28,"_getInternalAddressByIndex"],[150,49,107,29,"index"],[150,54,107,42],[150,56,107,52],[151,8,108,4,"index"],[151,13,108,9],[151,16,108,12,"index"],[151,21,108,17],[151,24,108,20],[151,25,108,21],[151,26,108,22],[151,27,108,23],[152,8,109,4],[152,12,109,8],[152,16,109,12],[152,17,109,13,"internal_addresses_cache"],[152,41,109,37],[152,42,109,38,"index"],[152,47,109,43],[152,48,109,44],[152,50,109,46],[152,57,109,53],[152,61,109,57],[152,62,109,58,"internal_addresses_cache"],[152,86,109,82],[152,87,109,83,"index"],[152,92,109,88],[152,93,109,89],[152,94,109,90],[152,95,109,91],[154,8,111,4],[154,12,111,8],[154,13,111,9,"_node1"],[154,19,111,15],[154,22,111,18],[154,26,111,22],[154,27,111,23,"_node1"],[154,33,111,29],[154,37,111,33],[154,41,111,37],[154,42,111,38,"_getNode1"],[154,51,111,47],[154,52,111,48],[154,53,111,49],[154,54,111,50],[154,55,111,51],[156,8,113,4],[156,12,113,10,"address"],[156,19,113,17],[156,22,113,20,"bitcoin"],[156,29,113,27],[156,30,113,28,"payments"],[156,38,113,36],[156,39,113,37,"p2wpkh"],[156,45,113,43],[156,46,113,44],[157,10,114,6,"pubkey"],[157,16,114,12],[157,18,114,14],[157,22,114,18],[157,23,114,19,"_node1"],[157,29,114,25],[157,30,114,26,"derive"],[157,36,114,32],[157,37,114,33,"index"],[157,42,114,38],[157,43,114,39],[157,44,114,40,"publicKey"],[158,8,115,4],[158,9,115,5],[158,10,115,6],[158,11,115,7,"address"],[158,18,115,14],[159,8,116,4],[159,12,116,8],[159,13,116,9,"address"],[159,20,116,16],[159,22,116,18],[160,10,117,6],[160,16,117,12],[160,20,117,16,"Error"],[160,25,117,21],[160,26,117,22],[160,84,117,80],[160,85,117,81],[161,8,118,4],[162,8,120,4],[162,15,120,12],[162,19,120,16],[162,20,120,17,"internal_addresses_cache"],[162,44,120,41],[162,45,120,42,"index"],[162,50,120,47],[162,51,120,48],[162,54,120,51,"address"],[162,61,120,58],[163,6,121,2],[164,4,121,3],[165,6,121,3,"key"],[165,9,121,3],[166,6,121,3,"value"],[166,11,121,3],[166,13,123,2],[166,22,123,2,"_getExternalAddressByIndex"],[166,48,123,28,"_getExternalAddressByIndex"],[166,49,123,29,"index"],[166,54,123,42],[166,56,123,52],[167,8,124,4,"index"],[167,13,124,9],[167,16,124,12,"index"],[167,21,124,17],[167,24,124,20],[167,25,124,21],[167,26,124,22],[167,27,124,23],[168,8,125,4],[168,12,125,8],[168,16,125,12],[168,17,125,13,"external_addresses_cache"],[168,41,125,37],[168,42,125,38,"index"],[168,47,125,43],[168,48,125,44],[168,50,125,46],[168,57,125,53],[168,61,125,57],[168,62,125,58,"external_addresses_cache"],[168,86,125,82],[168,87,125,83,"index"],[168,92,125,88],[168,93,125,89],[168,94,125,90],[168,95,125,91],[170,8,127,4],[170,12,127,8],[170,13,127,9,"_node0"],[170,19,127,15],[170,22,127,18],[170,26,127,22],[170,27,127,23,"_node0"],[170,33,127,29],[170,37,127,33],[170,41,127,37],[170,42,127,38,"_getNode0"],[170,51,127,47],[170,52,127,48],[170,53,127,49],[170,54,127,50],[170,55,127,51],[172,8,129,4],[172,12,129,10,"address"],[172,19,129,17],[172,22,129,20,"bitcoin"],[172,29,129,27],[172,30,129,28,"payments"],[172,38,129,36],[172,39,129,37,"p2wpkh"],[172,45,129,43],[172,46,129,44],[173,10,130,6,"pubkey"],[173,16,130,12],[173,18,130,14],[173,22,130,18],[173,23,130,19,"_node0"],[173,29,130,25],[173,30,130,26,"derive"],[173,36,130,32],[173,37,130,33,"index"],[173,42,130,38],[173,43,130,39],[173,44,130,40,"publicKey"],[174,8,131,4],[174,9,131,5],[174,10,131,6],[174,11,131,7,"address"],[174,18,131,14],[175,8,132,4],[175,12,132,8],[175,13,132,9,"address"],[175,20,132,16],[175,22,132,18],[176,10,133,6],[176,16,133,12],[176,20,133,16,"Error"],[176,25,133,21],[176,26,133,22],[176,84,133,80],[176,85,133,81],[177,8,134,4],[178,8,136,4],[178,15,136,12],[178,19,136,16],[178,20,136,17,"external_addresses_cache"],[178,44,136,41],[178,45,136,42,"index"],[178,50,136,47],[178,51,136,48],[178,54,136,51,"address"],[178,61,136,58],[179,6,137,2],[180,4,137,3],[181,6,137,3,"key"],[181,9,137,3],[182,6,137,3,"value"],[182,11,137,3],[182,13,139,2],[182,22,139,2,"_getWIFByIndex"],[182,36,139,16,"_getWIFByIndex"],[182,37,139,17,"internal"],[182,45,139,34],[182,47,139,36,"index"],[182,52,139,49],[182,54,139,67],[183,8,140,4],[183,12,140,8],[183,13,140,9],[183,17,140,13],[183,18,140,14,"secret"],[183,24,140,20],[183,26,140,22],[183,33,140,29],[183,38,140,34],[184,8,141,4],[184,12,141,10,"root"],[184,16,141,14],[184,19,141,17,"bip32"],[184,24,141,22],[184,25,141,23,"fromSeed"],[184,33,141,31],[184,34,141,32],[184,38,141,36],[184,39,141,37,"_getEntropyCached"],[184,56,141,54],[184,57,141,55],[184,58,141,56],[184,59,141,57],[185,8,142,4],[185,12,142,10,"path"],[185,16,142,14],[185,19,142,17],[185,34,142,32,"internal"],[185,42,142,40],[185,45,142,43],[185,46,142,44],[185,49,142,47],[185,50,142,48],[185,54,142,52,"index"],[185,59,142,57],[185,61,142,59],[186,8,143,4],[186,12,143,10,"child"],[186,17,143,15],[186,20,143,18,"root"],[186,24,143,22],[186,25,143,23,"derivePath"],[186,35,143,33],[186,36,143,34,"path"],[186,40,143,38],[186,41,143,39],[187,8,145,4],[187,15,145,11,"child"],[187,20,145,16],[187,21,145,17,"toWIF"],[187,26,145,22],[187,27,145,23],[187,28,145,24],[188,6,146,2],[189,4,146,3],[190,6,146,3,"key"],[190,9,146,3],[191,6,146,3,"value"],[191,11,146,3],[191,13,148,2],[191,22,148,2,"_getNodePubkeyByIndex"],[191,43,148,23,"_getNodePubkeyByIndex"],[191,44,148,24,"node"],[191,48,148,36],[191,50,148,38,"index"],[191,55,148,51],[191,57,148,53],[192,8,149,4,"index"],[192,13,149,9],[192,16,149,12,"index"],[192,21,149,17],[192,24,149,20],[192,25,149,21],[192,26,149,22],[192,27,149,23],[194,8,151,4],[194,12,151,8,"node"],[194,16,151,12],[194,21,151,17],[194,22,151,18],[194,26,151,22],[194,27,151,23],[194,31,151,27],[194,32,151,28,"_node0"],[194,38,151,34],[194,40,151,36],[195,10,152,6],[195,14,152,10],[195,15,152,11,"_node0"],[195,21,152,17],[195,24,152,20],[195,28,152,24],[195,29,152,25,"_getNode0"],[195,38,152,34],[195,39,152,35],[195,40,152,36],[196,8,153,4],[197,8,155,4],[197,12,155,8,"node"],[197,16,155,12],[197,21,155,17],[197,22,155,18],[197,26,155,22],[197,27,155,23],[197,31,155,27],[197,32,155,28,"_node1"],[197,38,155,34],[197,40,155,36],[198,10,156,6],[198,14,156,10],[198,15,156,11,"_node1"],[198,21,156,17],[198,24,156,20],[198,28,156,24],[198,29,156,25,"_getNode1"],[198,38,156,34],[198,39,156,35],[198,40,156,36],[199,8,157,4],[200,8,159,4],[200,12,159,8,"node"],[200,16,159,12],[200,21,159,17],[200,22,159,18],[200,26,159,22],[200,30,159,26],[200,31,159,27,"_node0"],[200,37,159,33],[200,39,159,35],[201,10,160,6],[201,17,160,13],[201,21,160,17],[201,22,160,18,"_node0"],[201,28,160,24],[201,29,160,25,"derive"],[201,35,160,31],[201,36,160,32,"index"],[201,41,160,37],[201,42,160,38],[201,43,160,39,"publicKey"],[201,52,160,48],[202,8,161,4],[203,8,163,4],[203,12,163,8,"node"],[203,16,163,12],[203,21,163,17],[203,22,163,18],[203,26,163,22],[203,30,163,26],[203,31,163,27,"_node1"],[203,37,163,33],[203,39,163,35],[204,10,164,6],[204,17,164,13],[204,21,164,17],[204,22,164,18,"_node1"],[204,28,164,24],[204,29,164,25,"derive"],[204,35,164,31],[204,36,164,32,"index"],[204,41,164,37],[204,42,164,38],[204,43,164,39,"publicKey"],[204,52,164,48],[205,8,165,4],[206,8,167,4],[206,14,167,10],[206,18,167,14,"Error"],[206,23,167,19],[206,24,167,20],[206,81,167,77],[206,82,167,78],[207,6,168,2],[208,4,168,3],[209,6,168,3,"key"],[209,9,168,3],[210,6,168,3,"value"],[210,11,168,3],[210,13,170,2],[210,22,170,2,"getIdentityPubkey"],[210,39,170,19,"getIdentityPubkey"],[210,40,170,19],[210,42,170,22],[211,8,171,4],[211,12,171,10,"root"],[211,16,171,14],[211,19,171,17,"bip32"],[211,24,171,22],[211,25,171,23,"fromSeed"],[211,33,171,31],[211,34,171,32],[211,38,171,36],[211,39,171,37,"_getEntropyCached"],[211,56,171,54],[211,57,171,55],[211,58,171,56],[211,59,171,57],[212,8,172,4],[212,12,172,10,"node"],[212,16,172,14],[212,19,172,17,"root"],[212,23,172,21],[212,24,172,22,"derivePath"],[212,34,172,32],[212,35,172,33],[212,54,172,52],[212,55,172,53],[213,8,174,4],[213,15,174,11,"node"],[213,19,174,15],[213,20,174,16,"publicKey"],[213,29,174,25],[213,30,174,26,"toString"],[213,38,174,34],[213,39,174,35],[213,44,174,40],[213,45,174,41],[214,6,175,2],[216,6,177,2],[217,4,177,2],[218,6,177,2,"key"],[218,9,177,2],[219,6,177,2,"value"],[219,11,177,2],[219,13,179,2],[219,22,179,2,"allowSend"],[219,31,179,11,"allowSend"],[219,32,179,11],[219,34,179,14],[220,8,180,4],[220,15,180,11],[220,19,180,15],[221,6,181,2],[222,4,181,3],[223,6,181,3,"key"],[223,9,181,3],[224,6,181,3,"value"],[224,11,181,3],[224,13,183,2],[224,22,183,2,"allowRBF"],[224,30,183,10,"allowRBF"],[224,31,183,10],[224,33,183,13],[225,8,184,4],[225,15,184,11],[225,19,184,15],[226,6,185,2],[227,4,185,3],[228,6,185,3,"key"],[228,9,185,3],[229,6,185,3,"value"],[229,11,185,3],[229,13,187,2],[229,22,187,2,"allowPayJoin"],[229,34,187,14,"allowPayJoin"],[229,35,187,14],[229,37,187,17],[230,8,188,4],[230,15,188,11],[230,19,188,15],[231,6,189,2],[232,4,189,3],[233,6,189,3,"key"],[233,9,189,3],[234,6,189,3,"value"],[234,11,189,3],[234,13,191,2],[234,22,191,2,"isSegwit"],[234,30,191,10,"isSegwit"],[234,31,191,10],[234,33,191,13],[235,8,192,4],[235,15,192,11],[235,19,192,15],[236,6,193,2],[237,4,193,3],[238,6,193,3,"key"],[238,9,193,3],[239,6,193,3,"value"],[239,11,193,3],[239,13,195,2],[239,22,195,2,"allowSignVerifyMessage"],[239,44,195,24,"allowSignVerifyMessage"],[239,45,195,24],[239,47,195,27],[240,8,196,4],[240,15,196,11],[240,19,196,15],[241,6,197,2],[242,4,197,3],[243,6,197,3,"key"],[243,9,197,3],[244,6,197,3,"value"],[244,11,197,3],[244,13,199,2],[244,22,199,2,"allowXpub"],[244,31,199,11,"allowXpub"],[244,32,199,11],[244,34,199,14],[245,8,200,4],[245,15,200,11],[245,19,200,15],[246,6,201,2],[247,4,201,3],[248,2,201,3],[248,4,21,36,"AbstractHDElectrumWallet"],[248,35,21,36],[248,36,21,36,"AbstractHDElectrumWallet"],[248,93,21,60],[249,2,21,13,"HDAezeedWallet"],[249,16,21,27],[249,17,22,18,"type"],[249,21,22,22],[249,24,22,25],[249,40,22,41],[250,2,21,13,"HDAezeedWallet"],[250,16,21,27],[250,17,23,18,"typeReadable"],[250,29,23,30],[250,32,23,33],[250,43,23,44],[251,2,21,13,"HDAezeedWallet"],[251,16,21,27],[251,17,25,18,"derivationPath"],[251,31,25,32],[251,34,25,35],[251,47,25,48],[252,0,25,48],[252,3]],"functionMap":{"names":["<global>","HDAezeedWallet","HDAezeedWallet#setSecret","HDAezeedWallet#_getEntropyCached","HDAezeedWallet#getXpub","HDAezeedWallet#validateMnemonic","HDAezeedWallet#validateMnemonicAsync","HDAezeedWallet#mnemonicInvalidPassword","HDAezeedWallet#generate","HDAezeedWallet#_getNode0","HDAezeedWallet#_getNode1","HDAezeedWallet#_getInternalAddressByIndex","HDAezeedWallet#_getExternalAddressByIndex","HDAezeedWallet#_getWIFByIndex","HDAezeedWallet#_getNodePubkeyByIndex","HDAezeedWallet#getIdentityPubkey","HDAezeedWallet#allowSend","HDAezeedWallet#allowRBF","HDAezeedWallet#allowPayJoin","HDAezeedWallet#isSegwit","HDAezeedWallet#allowSignVerifyMessage","HDAezeedWallet#allowXpub"],"mappings":"AAA;OCoB;ECY;GDI;EEE;GFO;EGE;GHe;EIE;GJE;EKE;GLS;EME;GNS;EOE;GPE;EQE;GRI;ESE;GTI;EUE;GVc;EWE;GXc;EYE;GZO;EaE;GboB;EcE;GdK;EeI;GfE;EgBE;GhBE;EiBE;GjBE;EkBE;GlBE;EmBE;GnBE;EoBE;GpBE;CDC"}},"type":"js/module"}]}