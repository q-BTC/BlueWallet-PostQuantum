{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":146,"column":35,"index":4933}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":146,"column":35,"index":4933}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"./binding","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":18,"index":864},"end":{"line":21,"column":38,"index":884}},{"start":{"line":21,"column":18,"index":864},"end":{"line":21,"column":38,"index":884}},{"start":{"line":21,"column":18,"index":864},"end":{"line":21,"column":38,"index":884}}],"key":"OjrA0Bxm3t0WtSdWtaEky0moQW8="}},{"name":"./errors","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":23,"column":17,"index":941},"end":{"line":23,"column":36,"index":960}}],"key":"GlkDztMSsNRYmp31iO+V/Albin8="}},{"name":"./assert","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":22,"column":17,"index":903},"end":{"line":22,"column":36,"index":922}},{"start":{"line":22,"column":17,"index":903},"end":{"line":22,"column":36,"index":922}},{"start":{"line":22,"column":17,"index":903},"end":{"line":22,"column":36,"index":922}},{"start":{"line":22,"column":17,"index":903},"end":{"line":22,"column":36,"index":922}},{"start":{"line":22,"column":17,"index":903},"end":{"line":22,"column":36,"index":922}},{"start":{"line":22,"column":17,"index":903},"end":{"line":22,"column":36,"index":922}},{"start":{"line":22,"column":17,"index":903},"end":{"line":22,"column":36,"index":922}}],"key":"PRSWv9Op+8jXiipitv94+qE/Tqo="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  ////////////////////////////////////////////////////////////////////////////\n  //\n  // Copyright 2024 Realm Inc.\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  // http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n  //\n  ////////////////////////////////////////////////////////////////////////////\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Counter = void 0;\n  var REALM = Symbol(\"Counter#realm\");\n  var OBJ = Symbol(\"Counter#obj\");\n  var COLUMN_KEY = Symbol(\"Counter#columnKey\");\n  /**\n   * A logical counter representation for performing numeric updates that need\n   * to be synchronized as sequentially consistent events rather than individual\n   * reassignments of the number.\n   *\n   * For instance, offline Client 1 and Client 2 which both see `Counter.value`\n   * as `0`, can both call `Counter.increment(1)`. Once online, the value will\n   * converge to `2`.\n   *\n   * ### Counter types are *not* supported as:\n   *\n   * - `Mixed` values\n   * - Primary keys\n   * - Inside collections\n   * - Query arguments for placeholders (e.g. `$0`) in {@link Realm.Results.filtered | filtered()}\n   *   - If you need to use the value of the `Counter` when filtering, use `Counter.value`.\n   *\n   * ### Declaring a counter\n   *\n   * A property schema is declared as either:\n   * - `\"counter\"`\n   * - `{ type: \"int\", presentation: \"counter\" }`\n   *\n   * ### Creating a counter\n   *\n   * Use a `number` when creating your counter on a {@link Realm.Object}.\n   *\n   * ```typescript\n   * realm.write(() => {\n   *   realm.create(MyObject, { _id: \"123\", counter: 0 });\n   * });\n   * ```\n   *\n   * ### Updating the count\n   *\n   * Use the instance methods to update the underlying count.\n   *\n   * ### Nullability\n   *\n   * The above property schema can be extended to allow a nullable counter.\n   * A `Counter` never stores `null` values itself, but the counter property\n   * on the {@link Realm.Object} (e.g. `myRealmObject.myCounter`) can be `null`.\n   *\n   * To create a counter from a previously `null` value, or to reset a nullable\n   * counter to `null`, use {@link UpdateMode.Modified} or {@link UpdateMode.All}.\n   *\n   * ```typescript\n   * realm.write(() => {\n   *   realm.create(MyObject, { _id: \"123\", counter: 0 }, UpdateMode.Modified);\n   * });\n   * ```\n   */\n  var Counter = /*#__PURE__*/function () {\n    /** @internal */\n\n    /** @internal */\n\n    /** @internal */\n\n    /** @internal */\n    function Counter(realm, obj, columnKey) {\n      _classCallCheck(this, Counter);\n      if (!(obj instanceof _$$_REQUIRE(_dependencyMap[2], \"./binding\").binding.Obj)) {\n        throw new (_$$_REQUIRE(_dependencyMap[3], \"./errors\").IllegalConstructorError)(\"Counter\");\n      }\n      this[REALM] = realm;\n      this[OBJ] = obj;\n      this[COLUMN_KEY] = columnKey;\n    }\n    /**\n     * The current count.\n     */\n    return _createClass(Counter, [{\n      key: \"value\",\n      get: function get() {\n        try {\n          return Number(this[OBJ].getAny(this[COLUMN_KEY]));\n        } catch (err) {\n          // Throw a custom error message instead of Core's.\n          _$$_REQUIRE(_dependencyMap[4], \"./assert\").assert.isValid(this[OBJ]);\n          throw err;\n        }\n      }\n      /** @internal */,\n      set: function set(_) {\n        throw new Error(\"To update the value, use the methods on the Counter.\");\n      }\n      /**\n       * Increment the count.\n       * @param by The value to increment by. (Default: `1`)\n       */\n    }, {\n      key: \"increment\",\n      value: function increment() {\n        var by = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        _$$_REQUIRE(_dependencyMap[4], \"./assert\").assert.inTransaction(this[REALM]);\n        _$$_REQUIRE(_dependencyMap[4], \"./assert\").assert.integer(by, \"by\");\n        this[OBJ].addInt(this[COLUMN_KEY], _$$_REQUIRE(_dependencyMap[2], \"./binding\").binding.Int64.numToInt(by));\n      }\n      /**\n       * Decrement the count.\n       * @param by The value to decrement by. (Default: `1`)\n       */\n    }, {\n      key: \"decrement\",\n      value: function decrement() {\n        var by = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        _$$_REQUIRE(_dependencyMap[4], \"./assert\").assert.inTransaction(this[REALM]);\n        // Assert that it is a number here despite calling into `increment` in order to\n        // report the type provided by the user, rather than e.g. NaN or 0 due to negation.\n        _$$_REQUIRE(_dependencyMap[4], \"./assert\").assert.integer(by, \"by\");\n        this.increment(-by);\n      }\n      /**\n       * Reset the count.\n       * @param value The value to reset the count to.\n       * @warning\n       * Unlike {@link Counter.increment | increment} and {@link Counter.decrement | decrement},\n       * setting the count behaves like regular individual updates to the underlying value.\n       */\n    }, {\n      key: \"set\",\n      value: function set(value) {\n        _$$_REQUIRE(_dependencyMap[4], \"./assert\").assert.inTransaction(this[REALM]);\n        _$$_REQUIRE(_dependencyMap[4], \"./assert\").assert.integer(value, \"value\");\n        this[OBJ].setAny(this[COLUMN_KEY], _$$_REQUIRE(_dependencyMap[2], \"./binding\").binding.Int64.numToInt(value));\n      }\n    }]);\n  }();\n  exports.Counter = Counter;\n});","lineCount":160,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,2,3,0],[6,2,4,0],[7,2,5,0],[8,2,6,0],[9,2,7,0],[10,2,8,0],[11,2,9,0],[12,2,10,0],[13,2,11,0],[14,2,12,0],[15,2,13,0],[16,2,14,0],[17,2,15,0],[18,2,16,0],[19,2,17,0],[20,2,18,0],[21,2,18,0],[21,6,18,0,"_classCallCheck"],[21,21,18,0],[21,24,18,0,"_$$_REQUIRE"],[21,35,18,0],[21,36,18,0,"_dependencyMap"],[21,50,18,0],[22,2,18,0],[22,6,18,0,"_createClass"],[22,18,18,0],[22,21,18,0,"_$$_REQUIRE"],[22,32,18,0],[22,33,18,0,"_dependencyMap"],[22,47,18,0],[23,2,19,0,"Object"],[23,8,19,6],[23,9,19,7,"defineProperty"],[23,23,19,21],[23,24,19,22,"exports"],[23,31,19,29],[23,33,19,31],[23,45,19,43],[23,47,19,45],[24,4,19,47,"value"],[24,9,19,52],[24,11,19,54],[25,2,19,59],[25,3,19,60],[25,4,19,61],[26,2,20,0,"exports"],[26,9,20,7],[26,10,20,8,"Counter"],[26,17,20,15],[26,20,20,18],[26,25,20,23],[26,26,20,24],[27,2,24,0],[27,6,24,6,"REALM"],[27,11,24,11],[27,14,24,14,"Symbol"],[27,20,24,20],[27,21,24,21],[27,36,24,36],[27,37,24,37],[28,2,25,0],[28,6,25,6,"OBJ"],[28,9,25,9],[28,12,25,12,"Symbol"],[28,18,25,18],[28,19,25,19],[28,32,25,32],[28,33,25,33],[29,2,26,0],[29,6,26,6,"COLUMN_KEY"],[29,16,26,16],[29,19,26,19,"Symbol"],[29,25,26,25],[29,26,26,26],[29,45,26,45],[29,46,26,46],[30,2,27,0],[31,0,28,0],[32,0,29,0],[33,0,30,0],[34,0,31,0],[35,0,32,0],[36,0,33,0],[37,0,34,0],[38,0,35,0],[39,0,36,0],[40,0,37,0],[41,0,38,0],[42,0,39,0],[43,0,40,0],[44,0,41,0],[45,0,42,0],[46,0,43,0],[47,0,44,0],[48,0,45,0],[49,0,46,0],[50,0,47,0],[51,0,48,0],[52,0,49,0],[53,0,50,0],[54,0,51,0],[55,0,52,0],[56,0,53,0],[57,0,54,0],[58,0,55,0],[59,0,56,0],[60,0,57,0],[61,0,58,0],[62,0,59,0],[63,0,60,0],[64,0,61,0],[65,0,62,0],[66,0,63,0],[67,0,64,0],[68,0,65,0],[69,0,66,0],[70,0,67,0],[71,0,68,0],[72,0,69,0],[73,0,70,0],[74,0,71,0],[75,0,72,0],[76,0,73,0],[77,0,74,0],[78,0,75,0],[79,0,76,0],[80,0,77,0],[81,0,78,0],[82,2,27,0],[82,6,79,6,"Counter"],[82,13,79,13],[83,4,80,4],[85,4,82,4],[87,4,84,4],[89,4,86,4],[90,4,87,4],[90,13,87,4,"Counter"],[90,21,87,16,"realm"],[90,26,87,21],[90,28,87,23,"obj"],[90,31,87,26],[90,33,87,28,"columnKey"],[90,42,87,37],[90,44,87,39],[91,6,87,39,"_classCallCheck"],[91,21,87,39],[91,28,87,39,"Counter"],[91,35,87,39],[92,6,88,8],[92,10,88,12],[92,12,88,14,"obj"],[92,15,88,17],[92,27,88,29,"_$$_REQUIRE"],[92,38,88,29],[92,39,88,29,"_dependencyMap"],[92,53,88,29],[92,71,88,39,"binding"],[92,78,88,46],[92,79,88,47,"Obj"],[92,82,88,50],[92,83,88,51],[92,85,88,53],[93,8,89,12],[93,14,89,18],[93,19,89,22,"_$$_REQUIRE"],[93,30,89,22],[93,31,89,22,"_dependencyMap"],[93,45,89,22],[93,62,89,31,"IllegalConstructorError"],[93,85,89,54],[93,87,89,55],[93,96,89,64],[93,97,89,65],[94,6,90,8],[95,6,91,8],[95,10,91,12],[95,11,91,13,"REALM"],[95,16,91,18],[95,17,91,19],[95,20,91,22,"realm"],[95,25,91,27],[96,6,92,8],[96,10,92,12],[96,11,92,13,"OBJ"],[96,14,92,16],[96,15,92,17],[96,18,92,20,"obj"],[96,21,92,23],[97,6,93,8],[97,10,93,12],[97,11,93,13,"COLUMN_KEY"],[97,21,93,23],[97,22,93,24],[97,25,93,27,"columnKey"],[97,34,93,36],[98,4,94,4],[99,4,95,4],[100,0,96,0],[101,0,97,0],[102,4,95,4],[102,11,95,4,"_createClass"],[102,23,95,4],[102,24,95,4,"Counter"],[102,31,95,4],[103,6,95,4,"key"],[103,9,95,4],[104,6,95,4,"get"],[104,9,95,4],[104,11,98,4],[104,20,98,4,"get"],[104,24,98,4],[104,26,98,16],[105,8,99,8],[105,12,99,12],[106,10,100,12],[106,17,100,19,"Number"],[106,23,100,25],[106,24,100,26],[106,28,100,30],[106,29,100,31,"OBJ"],[106,32,100,34],[106,33,100,35],[106,34,100,36,"getAny"],[106,40,100,42],[106,41,100,43],[106,45,100,47],[106,46,100,48,"COLUMN_KEY"],[106,56,100,58],[106,57,100,59],[106,58,100,60],[106,59,100,61],[107,8,101,8],[107,9,101,9],[107,10,102,8],[107,17,102,15,"err"],[107,20,102,18],[107,22,102,20],[108,10,103,12],[109,10,104,12,"_$$_REQUIRE"],[109,21,104,12],[109,22,104,12,"_dependencyMap"],[109,36,104,12],[109,53,104,21,"assert"],[109,59,104,27],[109,60,104,28,"isValid"],[109,67,104,35],[109,68,104,36],[109,72,104,40],[109,73,104,41,"OBJ"],[109,76,104,44],[109,77,104,45],[109,78,104,46],[110,10,105,12],[110,16,105,18,"err"],[110,19,105,21],[111,8,106,8],[112,6,107,4],[113,6,108,4],[114,6,108,4,"set"],[114,9,108,4],[114,11,109,4],[114,20,109,4,"set"],[114,24,109,14,"_"],[114,25,109,15],[114,27,109,17],[115,8,110,8],[115,14,110,14],[115,18,110,18,"Error"],[115,23,110,23],[115,24,110,24],[115,78,110,78],[115,79,110,79],[116,6,111,4],[117,6,112,4],[118,0,113,0],[119,0,114,0],[120,0,115,0],[121,4,112,4],[122,6,112,4,"key"],[122,9,112,4],[123,6,112,4,"value"],[123,11,112,4],[123,13,116,4],[123,22,116,4,"increment"],[123,31,116,13,"increment"],[123,32,116,13],[123,34,116,22],[124,8,116,22],[124,12,116,14,"by"],[124,14,116,16],[124,17,116,16,"arguments"],[124,26,116,16],[124,27,116,16,"length"],[124,33,116,16],[124,41,116,16,"arguments"],[124,50,116,16],[124,58,116,16,"undefined"],[124,67,116,16],[124,70,116,16,"arguments"],[124,79,116,16],[124,85,116,19],[124,86,116,20],[125,8,117,8,"_$$_REQUIRE"],[125,19,117,8],[125,20,117,8,"_dependencyMap"],[125,34,117,8],[125,51,117,17,"assert"],[125,57,117,23],[125,58,117,24,"inTransaction"],[125,71,117,37],[125,72,117,38],[125,76,117,42],[125,77,117,43,"REALM"],[125,82,117,48],[125,83,117,49],[125,84,117,50],[126,8,118,8,"_$$_REQUIRE"],[126,19,118,8],[126,20,118,8,"_dependencyMap"],[126,34,118,8],[126,51,118,17,"assert"],[126,57,118,23],[126,58,118,24,"integer"],[126,65,118,31],[126,66,118,32,"by"],[126,68,118,34],[126,70,118,36],[126,74,118,40],[126,75,118,41],[127,8,119,8],[127,12,119,12],[127,13,119,13,"OBJ"],[127,16,119,16],[127,17,119,17],[127,18,119,18,"addInt"],[127,24,119,24],[127,25,119,25],[127,29,119,29],[127,30,119,30,"COLUMN_KEY"],[127,40,119,40],[127,41,119,41],[127,43,119,43,"_$$_REQUIRE"],[127,54,119,43],[127,55,119,43,"_dependencyMap"],[127,69,119,43],[127,87,119,53,"binding"],[127,94,119,60],[127,95,119,61,"Int64"],[127,100,119,66],[127,101,119,67,"numToInt"],[127,109,119,75],[127,110,119,76,"by"],[127,112,119,78],[127,113,119,79],[127,114,119,80],[128,6,120,4],[129,6,121,4],[130,0,122,0],[131,0,123,0],[132,0,124,0],[133,4,121,4],[134,6,121,4,"key"],[134,9,121,4],[135,6,121,4,"value"],[135,11,121,4],[135,13,125,4],[135,22,125,4,"decrement"],[135,31,125,13,"decrement"],[135,32,125,13],[135,34,125,22],[136,8,125,22],[136,12,125,14,"by"],[136,14,125,16],[136,17,125,16,"arguments"],[136,26,125,16],[136,27,125,16,"length"],[136,33,125,16],[136,41,125,16,"arguments"],[136,50,125,16],[136,58,125,16,"undefined"],[136,67,125,16],[136,70,125,16,"arguments"],[136,79,125,16],[136,85,125,19],[136,86,125,20],[137,8,126,8,"_$$_REQUIRE"],[137,19,126,8],[137,20,126,8,"_dependencyMap"],[137,34,126,8],[137,51,126,17,"assert"],[137,57,126,23],[137,58,126,24,"inTransaction"],[137,71,126,37],[137,72,126,38],[137,76,126,42],[137,77,126,43,"REALM"],[137,82,126,48],[137,83,126,49],[137,84,126,50],[138,8,127,8],[139,8,128,8],[140,8,129,8,"_$$_REQUIRE"],[140,19,129,8],[140,20,129,8,"_dependencyMap"],[140,34,129,8],[140,51,129,17,"assert"],[140,57,129,23],[140,58,129,24,"integer"],[140,65,129,31],[140,66,129,32,"by"],[140,68,129,34],[140,70,129,36],[140,74,129,40],[140,75,129,41],[141,8,130,8],[141,12,130,12],[141,13,130,13,"increment"],[141,22,130,22],[141,23,130,23],[141,24,130,24,"by"],[141,26,130,26],[141,27,130,27],[142,6,131,4],[143,6,132,4],[144,0,133,0],[145,0,134,0],[146,0,135,0],[147,0,136,0],[148,0,137,0],[149,0,138,0],[150,4,132,4],[151,6,132,4,"key"],[151,9,132,4],[152,6,132,4,"value"],[152,11,132,4],[152,13,139,4],[152,22,139,4,"set"],[152,25,139,7,"set"],[152,26,139,8,"value"],[152,31,139,13],[152,33,139,15],[153,8,140,8,"_$$_REQUIRE"],[153,19,140,8],[153,20,140,8,"_dependencyMap"],[153,34,140,8],[153,51,140,17,"assert"],[153,57,140,23],[153,58,140,24,"inTransaction"],[153,71,140,37],[153,72,140,38],[153,76,140,42],[153,77,140,43,"REALM"],[153,82,140,48],[153,83,140,49],[153,84,140,50],[154,8,141,8,"_$$_REQUIRE"],[154,19,141,8],[154,20,141,8,"_dependencyMap"],[154,34,141,8],[154,51,141,17,"assert"],[154,57,141,23],[154,58,141,24,"integer"],[154,65,141,31],[154,66,141,32,"value"],[154,71,141,37],[154,73,141,39],[154,80,141,46],[154,81,141,47],[155,8,142,8],[155,12,142,12],[155,13,142,13,"OBJ"],[155,16,142,16],[155,17,142,17],[155,18,142,18,"setAny"],[155,24,142,24],[155,25,142,25],[155,29,142,29],[155,30,142,30,"COLUMN_KEY"],[155,40,142,40],[155,41,142,41],[155,43,142,43,"_$$_REQUIRE"],[155,54,142,43],[155,55,142,43,"_dependencyMap"],[155,69,142,43],[155,87,142,53,"binding"],[155,94,142,60],[155,95,142,61,"Int64"],[155,100,142,66],[155,101,142,67,"numToInt"],[155,109,142,75],[155,110,142,76,"value"],[155,115,142,81],[155,116,142,82],[155,117,142,83],[156,6,143,4],[157,4,143,5],[158,2,143,5],[159,2,145,0,"exports"],[159,9,145,7],[159,10,145,8,"Counter"],[159,17,145,15],[159,20,145,18,"Counter"],[159,27,145,25],[160,0,145,26],[160,3]],"functionMap":{"names":["<global>","Counter","constructor","get__value","set__value","increment","decrement","set"],"mappings":"AAA;AC8E;ICQ;KDO;IEI;KFS;IGE;KHE;IIK;KJI;IKK;KLM;IMQ;KNI;CDC"}},"type":"js/module"}]}