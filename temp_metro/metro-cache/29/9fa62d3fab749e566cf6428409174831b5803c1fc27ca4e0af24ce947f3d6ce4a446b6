{"dependencies":[{"name":"../common/List","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":36,"index":36}}],"key":"O1BxckxP8xea+N4BLQHDv6IfpVU="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  function isValidNumber(value) {\n    // Number.isInteger(value) && value >= 0\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value && value >= 0;\n  }\n  function isValidLocation(loc) {\n    return Boolean(loc) && isValidNumber(loc.offset) && isValidNumber(loc.line) && isValidNumber(loc.column);\n  }\n  function createNodeStructureChecker(type, fields) {\n    return function checkNode(node, warn) {\n      if (!node || node.constructor !== Object) {\n        return warn(node, 'Type of node should be an Object');\n      }\n      for (var key in node) {\n        var valid = true;\n        if (hasOwnProperty.call(node, key) === false) {\n          continue;\n        }\n        if (key === 'type') {\n          if (node.type !== type) {\n            warn(node, 'Wrong node type `' + node.type + '`, expected `' + type + '`');\n          }\n        } else if (key === 'loc') {\n          if (node.loc === null) {\n            continue;\n          } else if (node.loc && node.loc.constructor === Object) {\n            if (typeof node.loc.source !== 'string') {\n              key += '.source';\n            } else if (!isValidLocation(node.loc.start)) {\n              key += '.start';\n            } else if (!isValidLocation(node.loc.end)) {\n              key += '.end';\n            } else {\n              continue;\n            }\n          }\n          valid = false;\n        } else if (fields.hasOwnProperty(key)) {\n          for (var i = 0, valid = false; !valid && i < fields[key].length; i++) {\n            var fieldType = fields[key][i];\n            switch (fieldType) {\n              case String:\n                valid = typeof node[key] === 'string';\n                break;\n              case Boolean:\n                valid = typeof node[key] === 'boolean';\n                break;\n              case null:\n                valid = node[key] === null;\n                break;\n              default:\n                if (typeof fieldType === 'string') {\n                  valid = node[key] && node[key].type === fieldType;\n                } else if (Array.isArray(fieldType)) {\n                  valid = node[key] instanceof _$$_REQUIRE(_dependencyMap[0], \"../common/List\");\n                }\n            }\n          }\n        } else {\n          warn(node, 'Unknown field `' + key + '` for ' + type + ' node type');\n        }\n        if (!valid) {\n          warn(node, 'Bad value for `' + type + '.' + key + '`');\n        }\n      }\n      for (var key in fields) {\n        if (hasOwnProperty.call(fields, key) && hasOwnProperty.call(node, key) === false) {\n          warn(node, 'Field `' + type + '.' + key + '` is missed');\n        }\n      }\n    };\n  }\n  function processStructure(name, nodeType) {\n    var structure = nodeType.structure;\n    var fields = {\n      type: String,\n      loc: true\n    };\n    var docs = {\n      type: '\"' + name + '\"'\n    };\n    for (var key in structure) {\n      if (hasOwnProperty.call(structure, key) === false) {\n        continue;\n      }\n      var docsTypes = [];\n      var fieldTypes = fields[key] = Array.isArray(structure[key]) ? structure[key].slice() : [structure[key]];\n      for (var i = 0; i < fieldTypes.length; i++) {\n        var fieldType = fieldTypes[i];\n        if (fieldType === String || fieldType === Boolean) {\n          docsTypes.push(fieldType.name);\n        } else if (fieldType === null) {\n          docsTypes.push('null');\n        } else if (typeof fieldType === 'string') {\n          docsTypes.push('<' + fieldType + '>');\n        } else if (Array.isArray(fieldType)) {\n          docsTypes.push('List'); // TODO: use type enum\n        } else {\n          throw new Error('Wrong value `' + fieldType + '` in `' + name + '.' + key + '` structure definition');\n        }\n      }\n      docs[key] = docsTypes.join(' | ');\n    }\n    return {\n      docs: docs,\n      check: createNodeStructureChecker(name, fields)\n    };\n  }\n  module.exports = {\n    getStructureFromConfig: function getStructureFromConfig(config) {\n      var structure = {};\n      if (config.node) {\n        for (var name in config.node) {\n          if (hasOwnProperty.call(config.node, name)) {\n            var nodeType = config.node[name];\n            if (nodeType.structure) {\n              structure[name] = processStructure(name, nodeType);\n            } else {\n              throw new Error('Missed `structure` field in `' + name + '` node type definition');\n            }\n          }\n        }\n      }\n      return structure;\n    }\n  };\n});","lineCount":128,"map":[[2,2,2,0],[2,6,2,4,"hasOwnProperty"],[2,20,2,18],[2,23,2,21,"Object"],[2,29,2,27],[2,30,2,28,"prototype"],[2,39,2,37],[2,40,2,38,"hasOwnProperty"],[2,54,2,52],[3,2,4,0],[3,11,4,9,"isValidNumber"],[3,24,4,22,"isValidNumber"],[3,25,4,23,"value"],[3,30,4,28],[3,32,4,30],[4,4,5,4],[5,4,6,4],[5,11,7,8],[5,18,7,15,"value"],[5,23,7,20],[5,28,7,25],[5,36,7,33],[5,40,8,8,"isFinite"],[5,48,8,16],[5,49,8,17,"value"],[5,54,8,22],[5,55,8,23],[5,59,9,8,"Math"],[5,63,9,12],[5,64,9,13,"floor"],[5,69,9,18],[5,70,9,19,"value"],[5,75,9,24],[5,76,9,25],[5,81,9,30,"value"],[5,86,9,35],[5,90,10,8,"value"],[5,95,10,13],[5,99,10,17],[5,100,10,18],[6,2,12,0],[7,2,14,0],[7,11,14,9,"isValidLocation"],[7,26,14,24,"isValidLocation"],[7,27,14,25,"loc"],[7,30,14,28],[7,32,14,30],[8,4,15,4],[8,11,16,8,"Boolean"],[8,18,16,15],[8,19,16,16,"loc"],[8,22,16,19],[8,23,16,20],[8,27,17,8,"isValidNumber"],[8,40,17,21],[8,41,17,22,"loc"],[8,44,17,25],[8,45,17,26,"offset"],[8,51,17,32],[8,52,17,33],[8,56,18,8,"isValidNumber"],[8,69,18,21],[8,70,18,22,"loc"],[8,73,18,25],[8,74,18,26,"line"],[8,78,18,30],[8,79,18,31],[8,83,19,8,"isValidNumber"],[8,96,19,21],[8,97,19,22,"loc"],[8,100,19,25],[8,101,19,26,"column"],[8,107,19,32],[8,108,19,33],[9,2,21,0],[10,2,23,0],[10,11,23,9,"createNodeStructureChecker"],[10,37,23,35,"createNodeStructureChecker"],[10,38,23,36,"type"],[10,42,23,40],[10,44,23,42,"fields"],[10,50,23,48],[10,52,23,50],[11,4,24,4],[11,11,24,11],[11,20,24,20,"checkNode"],[11,29,24,29,"checkNode"],[11,30,24,30,"node"],[11,34,24,34],[11,36,24,36,"warn"],[11,40,24,40],[11,42,24,42],[12,6,25,8],[12,10,25,12],[12,11,25,13,"node"],[12,15,25,17],[12,19,25,21,"node"],[12,23,25,25],[12,24,25,26,"constructor"],[12,35,25,37],[12,40,25,42,"Object"],[12,46,25,48],[12,48,25,50],[13,8,26,12],[13,15,26,19,"warn"],[13,19,26,23],[13,20,26,24,"node"],[13,24,26,28],[13,26,26,30],[13,60,26,64],[13,61,26,65],[14,6,27,8],[15,6,29,8],[15,11,29,13],[15,15,29,17,"key"],[15,18,29,20],[15,22,29,24,"node"],[15,26,29,28],[15,28,29,30],[16,8,30,12],[16,12,30,16,"valid"],[16,17,30,21],[16,20,30,24],[16,24,30,28],[17,8,32,12],[17,12,32,16,"hasOwnProperty"],[17,26,32,30],[17,27,32,31,"call"],[17,31,32,35],[17,32,32,36,"node"],[17,36,32,40],[17,38,32,42,"key"],[17,41,32,45],[17,42,32,46],[17,47,32,51],[17,52,32,56],[17,54,32,58],[18,10,33,16],[19,8,34,12],[20,8,36,12],[20,12,36,16,"key"],[20,15,36,19],[20,20,36,24],[20,26,36,30],[20,28,36,32],[21,10,37,16],[21,14,37,20,"node"],[21,18,37,24],[21,19,37,25,"type"],[21,23,37,29],[21,28,37,34,"type"],[21,32,37,38],[21,34,37,40],[22,12,38,20,"warn"],[22,16,38,24],[22,17,38,25,"node"],[22,21,38,29],[22,23,38,31],[22,42,38,50],[22,45,38,53,"node"],[22,49,38,57],[22,50,38,58,"type"],[22,54,38,62],[22,57,38,65],[22,72,38,80],[22,75,38,83,"type"],[22,79,38,87],[22,82,38,90],[22,85,38,93],[22,86,38,94],[23,10,39,16],[24,8,40,12],[24,9,40,13],[24,15,40,19],[24,19,40,23,"key"],[24,22,40,26],[24,27,40,31],[24,32,40,36],[24,34,40,38],[25,10,41,16],[25,14,41,20,"node"],[25,18,41,24],[25,19,41,25,"loc"],[25,22,41,28],[25,27,41,33],[25,31,41,37],[25,33,41,39],[26,12,42,20],[27,10,43,16],[27,11,43,17],[27,17,43,23],[27,21,43,27,"node"],[27,25,43,31],[27,26,43,32,"loc"],[27,29,43,35],[27,33,43,39,"node"],[27,37,43,43],[27,38,43,44,"loc"],[27,41,43,47],[27,42,43,48,"constructor"],[27,53,43,59],[27,58,43,64,"Object"],[27,64,43,70],[27,66,43,72],[28,12,44,20],[28,16,44,24],[28,23,44,31,"node"],[28,27,44,35],[28,28,44,36,"loc"],[28,31,44,39],[28,32,44,40,"source"],[28,38,44,46],[28,43,44,51],[28,51,44,59],[28,53,44,61],[29,14,45,24,"key"],[29,17,45,27],[29,21,45,31],[29,30,45,40],[30,12,46,20],[30,13,46,21],[30,19,46,27],[30,23,46,31],[30,24,46,32,"isValidLocation"],[30,39,46,47],[30,40,46,48,"node"],[30,44,46,52],[30,45,46,53,"loc"],[30,48,46,56],[30,49,46,57,"start"],[30,54,46,62],[30,55,46,63],[30,57,46,65],[31,14,47,24,"key"],[31,17,47,27],[31,21,47,31],[31,29,47,39],[32,12,48,20],[32,13,48,21],[32,19,48,27],[32,23,48,31],[32,24,48,32,"isValidLocation"],[32,39,48,47],[32,40,48,48,"node"],[32,44,48,52],[32,45,48,53,"loc"],[32,48,48,56],[32,49,48,57,"end"],[32,52,48,60],[32,53,48,61],[32,55,48,63],[33,14,49,24,"key"],[33,17,49,27],[33,21,49,31],[33,27,49,37],[34,12,50,20],[34,13,50,21],[34,19,50,27],[35,14,51,24],[36,12,52,20],[37,10,53,16],[38,10,55,16,"valid"],[38,15,55,21],[38,18,55,24],[38,23,55,29],[39,8,56,12],[39,9,56,13],[39,15,56,19],[39,19,56,23,"fields"],[39,25,56,29],[39,26,56,30,"hasOwnProperty"],[39,40,56,44],[39,41,56,45,"key"],[39,44,56,48],[39,45,56,49],[39,47,56,51],[40,10,57,16],[40,15,57,21],[40,19,57,25,"i"],[40,20,57,26],[40,23,57,29],[40,24,57,30],[40,26,57,32,"valid"],[40,31,57,37],[40,34,57,40],[40,39,57,45],[40,41,57,47],[40,42,57,48,"valid"],[40,47,57,53],[40,51,57,57,"i"],[40,52,57,58],[40,55,57,61,"fields"],[40,61,57,67],[40,62,57,68,"key"],[40,65,57,71],[40,66,57,72],[40,67,57,73,"length"],[40,73,57,79],[40,75,57,81,"i"],[40,76,57,82],[40,78,57,84],[40,80,57,86],[41,12,58,20],[41,16,58,24,"fieldType"],[41,25,58,33],[41,28,58,36,"fields"],[41,34,58,42],[41,35,58,43,"key"],[41,38,58,46],[41,39,58,47],[41,40,58,48,"i"],[41,41,58,49],[41,42,58,50],[42,12,60,20],[42,20,60,28,"fieldType"],[42,29,60,37],[43,14,61,24],[43,19,61,29,"String"],[43,25,61,35],[44,16,62,28,"valid"],[44,21,62,33],[44,24,62,36],[44,31,62,43,"node"],[44,35,62,47],[44,36,62,48,"key"],[44,39,62,51],[44,40,62,52],[44,45,62,57],[44,53,62,65],[45,16,63,28],[46,14,65,24],[46,19,65,29,"Boolean"],[46,26,65,36],[47,16,66,28,"valid"],[47,21,66,33],[47,24,66,36],[47,31,66,43,"node"],[47,35,66,47],[47,36,66,48,"key"],[47,39,66,51],[47,40,66,52],[47,45,66,57],[47,54,66,66],[48,16,67,28],[49,14,69,24],[49,19,69,29],[49,23,69,33],[50,16,70,28,"valid"],[50,21,70,33],[50,24,70,36,"node"],[50,28,70,40],[50,29,70,41,"key"],[50,32,70,44],[50,33,70,45],[50,38,70,50],[50,42,70,54],[51,16,71,28],[52,14,73,24],[53,16,74,28],[53,20,74,32],[53,27,74,39,"fieldType"],[53,36,74,48],[53,41,74,53],[53,49,74,61],[53,51,74,63],[54,18,75,32,"valid"],[54,23,75,37],[54,26,75,40,"node"],[54,30,75,44],[54,31,75,45,"key"],[54,34,75,48],[54,35,75,49],[54,39,75,53,"node"],[54,43,75,57],[54,44,75,58,"key"],[54,47,75,61],[54,48,75,62],[54,49,75,63,"type"],[54,53,75,67],[54,58,75,72,"fieldType"],[54,67,75,81],[55,16,76,28],[55,17,76,29],[55,23,76,35],[55,27,76,39,"Array"],[55,32,76,44],[55,33,76,45,"isArray"],[55,40,76,52],[55,41,76,53,"fieldType"],[55,50,76,62],[55,51,76,63],[55,53,76,65],[56,18,77,32,"valid"],[56,23,77,37],[56,26,77,40,"node"],[56,30,77,44],[56,31,77,45,"key"],[56,34,77,48],[56,35,77,49],[56,47,77,49,"_$$_REQUIRE"],[56,58,77,49],[56,59,77,49,"_dependencyMap"],[56,73,77,49],[56,95,77,65],[57,16,78,28],[58,12,79,20],[59,10,80,16],[60,8,81,12],[60,9,81,13],[60,15,81,19],[61,10,82,16,"warn"],[61,14,82,20],[61,15,82,21,"node"],[61,19,82,25],[61,21,82,27],[61,38,82,44],[61,41,82,47,"key"],[61,44,82,50],[61,47,82,53],[61,55,82,61],[61,58,82,64,"type"],[61,62,82,68],[61,65,82,71],[61,77,82,83],[61,78,82,84],[62,8,83,12],[63,8,85,12],[63,12,85,16],[63,13,85,17,"valid"],[63,18,85,22],[63,20,85,24],[64,10,86,16,"warn"],[64,14,86,20],[64,15,86,21,"node"],[64,19,86,25],[64,21,86,27],[64,38,86,44],[64,41,86,47,"type"],[64,45,86,51],[64,48,86,54],[64,51,86,57],[64,54,86,60,"key"],[64,57,86,63],[64,60,86,66],[64,63,86,69],[64,64,86,70],[65,8,87,12],[66,6,88,8],[67,6,90,8],[67,11,90,13],[67,15,90,17,"key"],[67,18,90,20],[67,22,90,24,"fields"],[67,28,90,30],[67,30,90,32],[68,8,91,12],[68,12,91,16,"hasOwnProperty"],[68,26,91,30],[68,27,91,31,"call"],[68,31,91,35],[68,32,91,36,"fields"],[68,38,91,42],[68,40,91,44,"key"],[68,43,91,47],[68,44,91,48],[68,48,92,16,"hasOwnProperty"],[68,62,92,30],[68,63,92,31,"call"],[68,67,92,35],[68,68,92,36,"node"],[68,72,92,40],[68,74,92,42,"key"],[68,77,92,45],[68,78,92,46],[68,83,92,51],[68,88,92,56],[68,90,92,58],[69,10,93,16,"warn"],[69,14,93,20],[69,15,93,21,"node"],[69,19,93,25],[69,21,93,27],[69,30,93,36],[69,33,93,39,"type"],[69,37,93,43],[69,40,93,46],[69,43,93,49],[69,46,93,52,"key"],[69,49,93,55],[69,52,93,58],[69,65,93,71],[69,66,93,72],[70,8,94,12],[71,6,95,8],[72,4,96,4],[72,5,96,5],[73,2,97,0],[74,2,99,0],[74,11,99,9,"processStructure"],[74,27,99,25,"processStructure"],[74,28,99,26,"name"],[74,32,99,30],[74,34,99,32,"nodeType"],[74,42,99,40],[74,44,99,42],[75,4,100,4],[75,8,100,8,"structure"],[75,17,100,17],[75,20,100,20,"nodeType"],[75,28,100,28],[75,29,100,29,"structure"],[75,38,100,38],[76,4,101,4],[76,8,101,8,"fields"],[76,14,101,14],[76,17,101,17],[77,6,102,8,"type"],[77,10,102,12],[77,12,102,14,"String"],[77,18,102,20],[78,6,103,8,"loc"],[78,9,103,11],[78,11,103,13],[79,4,104,4],[79,5,104,5],[80,4,105,4],[80,8,105,8,"docs"],[80,12,105,12],[80,15,105,15],[81,6,106,8,"type"],[81,10,106,12],[81,12,106,14],[81,15,106,17],[81,18,106,20,"name"],[81,22,106,24],[81,25,106,27],[82,4,107,4],[82,5,107,5],[83,4,109,4],[83,9,109,9],[83,13,109,13,"key"],[83,16,109,16],[83,20,109,20,"structure"],[83,29,109,29],[83,31,109,31],[84,6,110,8],[84,10,110,12,"hasOwnProperty"],[84,24,110,26],[84,25,110,27,"call"],[84,29,110,31],[84,30,110,32,"structure"],[84,39,110,41],[84,41,110,43,"key"],[84,44,110,46],[84,45,110,47],[84,50,110,52],[84,55,110,57],[84,57,110,59],[85,8,111,12],[86,6,112,8],[87,6,114,8],[87,10,114,12,"docsTypes"],[87,19,114,21],[87,22,114,24],[87,24,114,26],[88,6,115,8],[88,10,115,12,"fieldTypes"],[88,20,115,22],[88,23,115,25,"fields"],[88,29,115,31],[88,30,115,32,"key"],[88,33,115,35],[88,34,115,36],[88,37,115,39,"Array"],[88,42,115,44],[88,43,115,45,"isArray"],[88,50,115,52],[88,51,115,53,"structure"],[88,60,115,62],[88,61,115,63,"key"],[88,64,115,66],[88,65,115,67],[88,66,115,68],[88,69,116,14,"structure"],[88,78,116,23],[88,79,116,24,"key"],[88,82,116,27],[88,83,116,28],[88,84,116,29,"slice"],[88,89,116,34],[88,90,116,35],[88,91,116,36],[88,94,117,14],[88,95,117,15,"structure"],[88,104,117,24],[88,105,117,25,"key"],[88,108,117,28],[88,109,117,29],[88,110,117,30],[89,6,119,8],[89,11,119,13],[89,15,119,17,"i"],[89,16,119,18],[89,19,119,21],[89,20,119,22],[89,22,119,24,"i"],[89,23,119,25],[89,26,119,28,"fieldTypes"],[89,36,119,38],[89,37,119,39,"length"],[89,43,119,45],[89,45,119,47,"i"],[89,46,119,48],[89,48,119,50],[89,50,119,52],[90,8,120,12],[90,12,120,16,"fieldType"],[90,21,120,25],[90,24,120,28,"fieldTypes"],[90,34,120,38],[90,35,120,39,"i"],[90,36,120,40],[90,37,120,41],[91,8,121,12],[91,12,121,16,"fieldType"],[91,21,121,25],[91,26,121,30,"String"],[91,32,121,36],[91,36,121,40,"fieldType"],[91,45,121,49],[91,50,121,54,"Boolean"],[91,57,121,61],[91,59,121,63],[92,10,122,16,"docsTypes"],[92,19,122,25],[92,20,122,26,"push"],[92,24,122,30],[92,25,122,31,"fieldType"],[92,34,122,40],[92,35,122,41,"name"],[92,39,122,45],[92,40,122,46],[93,8,123,12],[93,9,123,13],[93,15,123,19],[93,19,123,23,"fieldType"],[93,28,123,32],[93,33,123,37],[93,37,123,41],[93,39,123,43],[94,10,124,16,"docsTypes"],[94,19,124,25],[94,20,124,26,"push"],[94,24,124,30],[94,25,124,31],[94,31,124,37],[94,32,124,38],[95,8,125,12],[95,9,125,13],[95,15,125,19],[95,19,125,23],[95,26,125,30,"fieldType"],[95,35,125,39],[95,40,125,44],[95,48,125,52],[95,50,125,54],[96,10,126,16,"docsTypes"],[96,19,126,25],[96,20,126,26,"push"],[96,24,126,30],[96,25,126,31],[96,28,126,34],[96,31,126,37,"fieldType"],[96,40,126,46],[96,43,126,49],[96,46,126,52],[96,47,126,53],[97,8,127,12],[97,9,127,13],[97,15,127,19],[97,19,127,23,"Array"],[97,24,127,28],[97,25,127,29,"isArray"],[97,32,127,36],[97,33,127,37,"fieldType"],[97,42,127,46],[97,43,127,47],[97,45,127,49],[98,10,128,16,"docsTypes"],[98,19,128,25],[98,20,128,26,"push"],[98,24,128,30],[98,25,128,31],[98,31,128,37],[98,32,128,38],[98,33,128,39],[98,34,128,40],[99,8,129,12],[99,9,129,13],[99,15,129,19],[100,10,130,16],[100,16,130,22],[100,20,130,26,"Error"],[100,25,130,31],[100,26,130,32],[100,41,130,47],[100,44,130,50,"fieldType"],[100,53,130,59],[100,56,130,62],[100,64,130,70],[100,67,130,73,"name"],[100,71,130,77],[100,74,130,80],[100,77,130,83],[100,80,130,86,"key"],[100,83,130,89],[100,86,130,92],[100,110,130,116],[100,111,130,117],[101,8,131,12],[102,6,132,8],[103,6,134,8,"docs"],[103,10,134,12],[103,11,134,13,"key"],[103,14,134,16],[103,15,134,17],[103,18,134,20,"docsTypes"],[103,27,134,29],[103,28,134,30,"join"],[103,32,134,34],[103,33,134,35],[103,38,134,40],[103,39,134,41],[104,4,135,4],[105,4,137,4],[105,11,137,11],[106,6,138,8,"docs"],[106,10,138,12],[106,12,138,14,"docs"],[106,16,138,18],[107,6,139,8,"check"],[107,11,139,13],[107,13,139,15,"createNodeStructureChecker"],[107,39,139,41],[107,40,139,42,"name"],[107,44,139,46],[107,46,139,48,"fields"],[107,52,139,54],[108,4,140,4],[108,5,140,5],[109,2,141,0],[110,2,143,0,"module"],[110,8,143,6],[110,9,143,7,"exports"],[110,16,143,14],[110,19,143,17],[111,4,144,4,"getStructureFromConfig"],[111,26,144,26],[111,28,144,28],[111,37,144,4,"getStructureFromConfig"],[111,59,144,26,"getStructureFromConfig"],[111,60,144,37,"config"],[111,66,144,43],[111,68,144,45],[112,6,145,8],[112,10,145,12,"structure"],[112,19,145,21],[112,22,145,24],[112,23,145,25],[112,24,145,26],[113,6,147,8],[113,10,147,12,"config"],[113,16,147,18],[113,17,147,19,"node"],[113,21,147,23],[113,23,147,25],[114,8,148,12],[114,13,148,17],[114,17,148,21,"name"],[114,21,148,25],[114,25,148,29,"config"],[114,31,148,35],[114,32,148,36,"node"],[114,36,148,40],[114,38,148,42],[115,10,149,16],[115,14,149,20,"hasOwnProperty"],[115,28,149,34],[115,29,149,35,"call"],[115,33,149,39],[115,34,149,40,"config"],[115,40,149,46],[115,41,149,47,"node"],[115,45,149,51],[115,47,149,53,"name"],[115,51,149,57],[115,52,149,58],[115,54,149,60],[116,12,150,20],[116,16,150,24,"nodeType"],[116,24,150,32],[116,27,150,35,"config"],[116,33,150,41],[116,34,150,42,"node"],[116,38,150,46],[116,39,150,47,"name"],[116,43,150,51],[116,44,150,52],[117,12,152,20],[117,16,152,24,"nodeType"],[117,24,152,32],[117,25,152,33,"structure"],[117,34,152,42],[117,36,152,44],[118,14,153,24,"structure"],[118,23,153,33],[118,24,153,34,"name"],[118,28,153,38],[118,29,153,39],[118,32,153,42,"processStructure"],[118,48,153,58],[118,49,153,59,"name"],[118,53,153,63],[118,55,153,65,"nodeType"],[118,63,153,73],[118,64,153,74],[119,12,154,20],[119,13,154,21],[119,19,154,27],[120,14,155,24],[120,20,155,30],[120,24,155,34,"Error"],[120,29,155,39],[120,30,155,40],[120,61,155,71],[120,64,155,74,"name"],[120,68,155,78],[120,71,155,81],[120,95,155,105],[120,96,155,106],[121,12,156,20],[122,10,157,16],[123,8,158,12],[124,6,159,8],[125,6,161,8],[125,13,161,15,"structure"],[125,22,161,24],[126,4,162,4],[127,2,163,0],[127,3,163,1],[128,0,163,2],[128,3]],"functionMap":{"names":["<global>","isValidNumber","isValidLocation","createNodeStructureChecker","checkNode","processStructure","module.exports.getStructureFromConfig"],"mappings":"AAA;ACG;CDQ;AEE;CFO;AGE;WCC;KDwE;CHC;AKE;CL0C;4BMG;KNkB"}},"type":"js/module"}]}