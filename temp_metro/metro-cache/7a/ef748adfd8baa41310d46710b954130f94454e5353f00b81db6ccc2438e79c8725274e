{"dependencies":[{"name":"call-bound","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":16,"index":165},"end":{"line":6,"column":37,"index":186}},{"start":{"line":6,"column":16,"index":165},"end":{"line":6,"column":37,"index":186}},{"start":{"line":6,"column":16,"index":165},"end":{"line":6,"column":37,"index":186}}],"key":"xVV7LLeUILRahu/c6/GJ3JZjpdc="}},{"name":"has-tostringtag/shams","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":21,"index":331},"end":{"line":11,"column":53,"index":363}}],"key":"izE/uq7FfNanWBh2hZSREj/S0H0="}},{"name":"available-typed-arrays","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":27,"index":77},"end":{"line":4,"column":60,"index":110}}],"key":"KnV6bGXyhGa+1GxH7FBG4Mhyka8="}},{"name":"gopd","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":11,"index":199},"end":{"line":7,"column":26,"index":214}},{"start":{"line":7,"column":11,"index":199},"end":{"line":7,"column":26,"index":214}},{"start":{"line":7,"column":11,"index":199},"end":{"line":7,"column":26,"index":214}},{"start":{"line":7,"column":11,"index":199},"end":{"line":7,"column":26,"index":214}}],"key":"3Ynmg9vud3kIHPLeXNonzO7sQpY="}},{"name":"get-proto","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":15,"index":231},"end":{"line":8,"column":35,"index":251}},{"start":{"line":8,"column":15,"index":231},"end":{"line":8,"column":35,"index":251}},{"start":{"line":8,"column":15,"index":231},"end":{"line":8,"column":35,"index":251}},{"start":{"line":8,"column":15,"index":231},"end":{"line":8,"column":35,"index":251}}],"key":"635U2dU6Zp8N1eVIEAjci+JPh2c="}},{"name":"for-each","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":14,"index":29},"end":{"line":3,"column":33,"index":48}},{"start":{"line":3,"column":14,"index":29},"end":{"line":3,"column":33,"index":48}},{"start":{"line":3,"column":14,"index":29},"end":{"line":3,"column":33,"index":48}},{"start":{"line":3,"column":14,"index":29},"end":{"line":3,"column":33,"index":48}}],"key":"ZDd0zDSMTg3nL+pZYtA/usvE1WI="}},{"name":"call-bind","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":15,"index":127},"end":{"line":5,"column":35,"index":147}},{"start":{"line":5,"column":15,"index":127},"end":{"line":5,"column":35,"index":147}}],"key":"YdMifwrESRR1WKKl1g9oyUrerS8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var $toString = _$$_REQUIRE(_dependencyMap[0], \"call-bound\")('Object.prototype.toString');\n  var hasToStringTag = _$$_REQUIRE(_dependencyMap[1], \"has-tostringtag/shams\")();\n  var g = typeof globalThis === 'undefined' ? global : globalThis;\n  var typedArrays = _$$_REQUIRE(_dependencyMap[2], \"available-typed-arrays\")();\n  var $slice = _$$_REQUIRE(_dependencyMap[0], \"call-bound\")('String.prototype.slice');\n\n  /** @type {<T = unknown>(array: readonly T[], value: unknown) => number} */\n  var $indexOf = _$$_REQUIRE(_dependencyMap[0], \"call-bound\")('Array.prototype.indexOf', true) || function indexOf(array, value) {\n    for (var i = 0; i < array.length; i += 1) {\n      if (array[i] === value) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  /** @typedef {import('./types').Getter} Getter */\n  /** @type {import('./types').Cache} */\n  var cache = {\n    __proto__: null\n  };\n  if (hasToStringTag && _$$_REQUIRE(_dependencyMap[3], \"gopd\") && _$$_REQUIRE(_dependencyMap[4], \"get-proto\")) {\n    _$$_REQUIRE(_dependencyMap[5], \"for-each\")(typedArrays, function (typedArray) {\n      var arr = new g[typedArray]();\n      if (Symbol.toStringTag in arr && _$$_REQUIRE(_dependencyMap[4], \"get-proto\")) {\n        var proto = _$$_REQUIRE(_dependencyMap[4], \"get-proto\")(arr);\n        // @ts-expect-error TS won't narrow inside a closure\n        var descriptor = _$$_REQUIRE(_dependencyMap[3], \"gopd\")(proto, Symbol.toStringTag);\n        if (!descriptor && proto) {\n          var superProto = _$$_REQUIRE(_dependencyMap[4], \"get-proto\")(proto);\n          // @ts-expect-error TS won't narrow inside a closure\n          descriptor = _$$_REQUIRE(_dependencyMap[3], \"gopd\")(superProto, Symbol.toStringTag);\n        }\n        // @ts-expect-error TODO: fix\n        cache['$' + typedArray] = _$$_REQUIRE(_dependencyMap[6], \"call-bind\")(descriptor.get);\n      }\n    });\n  } else {\n    _$$_REQUIRE(_dependencyMap[5], \"for-each\")(typedArrays, function (typedArray) {\n      var arr = new g[typedArray]();\n      var fn = arr.slice || arr.set;\n      if (fn) {\n        cache[(/** @type {`$${import('.').TypedArrayName}`} */'$' + typedArray)] = /** @type {import('./types').BoundSlice | import('./types').BoundSet} */\n        // @ts-expect-error TODO FIXME\n        _$$_REQUIRE(_dependencyMap[6], \"call-bind\")(fn);\n      }\n    });\n  }\n\n  /** @type {(value: object) => false | import('.').TypedArrayName} */\n  var tryTypedArrays = function tryAllTypedArrays(value) {\n    /** @type {ReturnType<typeof tryAllTypedArrays>} */var found = false;\n    _$$_REQUIRE(_dependencyMap[5], \"for-each\")(/** @type {Record<`\\$${import('.').TypedArrayName}`, Getter>} */cache, /** @type {(getter: Getter, name: `\\$${import('.').TypedArrayName}`) => void} */\n    function (getter, typedArray) {\n      if (!found) {\n        try {\n          // @ts-expect-error a throw is fine here\n          if ('$' + getter(value) === typedArray) {\n            found = /** @type {import('.').TypedArrayName} */$slice(typedArray, 1);\n          }\n        } catch (e) {/**/}\n      }\n    });\n    return found;\n  };\n\n  /** @type {(value: object) => false | import('.').TypedArrayName} */\n  var trySlices = function tryAllSlices(value) {\n    /** @type {ReturnType<typeof tryAllSlices>} */var found = false;\n    _$$_REQUIRE(_dependencyMap[5], \"for-each\")(/** @type {Record<`\\$${import('.').TypedArrayName}`, Getter>} */cache, /** @type {(getter: Getter, name: `\\$${import('.').TypedArrayName}`) => void} */function (getter, name) {\n      if (!found) {\n        try {\n          // @ts-expect-error a throw is fine here\n          getter(value);\n          found = /** @type {import('.').TypedArrayName} */$slice(name, 1);\n        } catch (e) {/**/}\n      }\n    });\n    return found;\n  };\n\n  /** @type {import('.')} */\n  module.exports = function whichTypedArray(value) {\n    if (!value || typeof value !== 'object') {\n      return false;\n    }\n    if (!hasToStringTag) {\n      /** @type {string} */\n      var tag = $slice($toString(value), 8, -1);\n      if ($indexOf(typedArrays, tag) > -1) {\n        return tag;\n      }\n      if (tag !== 'Object') {\n        return false;\n      }\n      // node < 0.6 hits here on real Typed Arrays\n      return trySlices(value);\n    }\n    if (!_$$_REQUIRE(_dependencyMap[3], \"gopd\")) {\n      return null;\n    } // unknown engine\n    return tryTypedArrays(value);\n  };\n});","lineCount":107,"map":[[2,2,1,0],[2,14,1,12],[4,2,10,0],[4,6,10,4,"$toString"],[4,15,10,13],[4,18,10,16,"_$$_REQUIRE"],[4,29,10,16],[4,30,10,16,"_dependencyMap"],[4,44,10,16],[4,63,10,26],[4,90,10,53],[4,91,10,54],[5,2,11,0],[5,6,11,4,"hasToStringTag"],[5,20,11,18],[5,23,11,21,"require"],[5,34,11,28],[5,35,11,28,"_dependencyMap"],[5,49,11,28],[5,77,11,52],[5,78,11,53],[5,79,11,54],[5,80,11,55],[6,2,13,0],[6,6,13,4,"g"],[6,7,13,5],[6,10,13,8],[6,17,13,15,"globalThis"],[6,27,13,25],[6,32,13,30],[6,43,13,41],[6,46,13,44,"global"],[6,52,13,50],[6,55,13,53,"globalThis"],[6,65,13,63],[7,2,14,0],[7,6,14,4,"typedArrays"],[7,17,14,15],[7,20,14,18,"_$$_REQUIRE"],[7,31,14,18],[7,32,14,18,"_dependencyMap"],[7,46,14,18],[7,77,14,39],[7,78,14,40],[8,2,16,0],[8,6,16,4,"$slice"],[8,12,16,10],[8,15,16,13,"_$$_REQUIRE"],[8,26,16,13],[8,27,16,13,"_dependencyMap"],[8,41,16,13],[8,60,16,23],[8,84,16,47],[8,85,16,48],[10,2,18,0],[11,2,19,0],[11,6,19,4,"$indexOf"],[11,14,19,12],[11,17,19,15,"_$$_REQUIRE"],[11,28,19,15],[11,29,19,15,"_dependencyMap"],[11,43,19,15],[11,62,19,25],[11,87,19,50],[11,89,19,52],[11,93,19,56],[11,94,19,57],[11,98,19,61],[11,107,19,70,"indexOf"],[11,114,19,77,"indexOf"],[11,115,19,78,"array"],[11,120,19,83],[11,122,19,85,"value"],[11,127,19,90],[11,129,19,92],[12,4,20,1],[12,9,20,6],[12,13,20,10,"i"],[12,14,20,11],[12,17,20,14],[12,18,20,15],[12,20,20,17,"i"],[12,21,20,18],[12,24,20,21,"array"],[12,29,20,26],[12,30,20,27,"length"],[12,36,20,33],[12,38,20,35,"i"],[12,39,20,36],[12,43,20,40],[12,44,20,41],[12,46,20,43],[13,6,21,2],[13,10,21,6,"array"],[13,15,21,11],[13,16,21,12,"i"],[13,17,21,13],[13,18,21,14],[13,23,21,19,"value"],[13,28,21,24],[13,30,21,26],[14,8,22,3],[14,15,22,10,"i"],[14,16,22,11],[15,6,23,2],[16,4,24,1],[17,4,25,1],[17,11,25,8],[17,12,25,9],[17,13,25,10],[18,2,26,0],[18,3,26,1],[20,2,28,0],[21,2,29,0],[22,2,30,0],[22,6,30,4,"cache"],[22,11,30,9],[22,14,30,12],[23,4,30,14,"__proto__"],[23,13,30,23],[23,15,30,25],[24,2,30,30],[24,3,30,31],[25,2,31,0],[25,6,31,4,"hasToStringTag"],[25,20,31,18],[25,24,31,18,"_$$_REQUIRE"],[25,35,31,18],[25,36,31,18,"_dependencyMap"],[25,50,31,18],[25,62,31,26],[25,66,31,26,"_$$_REQUIRE"],[25,77,31,26],[25,78,31,26,"_dependencyMap"],[25,92,31,26],[25,109,31,38],[25,111,31,40],[26,4,32,1,"_$$_REQUIRE"],[26,15,32,1],[26,16,32,1,"_dependencyMap"],[26,30,32,1],[26,47,32,9,"typedArrays"],[26,58,32,20],[26,60,32,22],[26,70,32,32,"typedArray"],[26,80,32,42],[26,82,32,44],[27,6,33,2],[27,10,33,6,"arr"],[27,13,33,9],[27,16,33,12],[27,20,33,16,"g"],[27,21,33,17],[27,22,33,18,"typedArray"],[27,32,33,28],[27,33,33,29],[27,34,33,30],[27,35,33,31],[28,6,34,2],[28,10,34,6,"Symbol"],[28,16,34,12],[28,17,34,13,"toStringTag"],[28,28,34,24],[28,32,34,28,"arr"],[28,35,34,31],[28,39,34,31,"_$$_REQUIRE"],[28,50,34,31],[28,51,34,31,"_dependencyMap"],[28,65,34,31],[28,82,34,43],[28,84,34,45],[29,8,35,3],[29,12,35,7,"proto"],[29,17,35,12],[29,20,35,15,"_$$_REQUIRE"],[29,31,35,15],[29,32,35,15,"_dependencyMap"],[29,46,35,15],[29,64,35,24,"arr"],[29,67,35,27],[29,68,35,28],[30,8,36,3],[31,8,37,3],[31,12,37,7,"descriptor"],[31,22,37,17],[31,25,37,20,"_$$_REQUIRE"],[31,36,37,20],[31,37,37,20,"_dependencyMap"],[31,51,37,20],[31,64,37,25,"proto"],[31,69,37,30],[31,71,37,32,"Symbol"],[31,77,37,38],[31,78,37,39,"toStringTag"],[31,89,37,50],[31,90,37,51],[32,8,38,3],[32,12,38,7],[32,13,38,8,"descriptor"],[32,23,38,18],[32,27,38,22,"proto"],[32,32,38,27],[32,34,38,29],[33,10,39,4],[33,14,39,8,"superProto"],[33,24,39,18],[33,27,39,21,"_$$_REQUIRE"],[33,38,39,21],[33,39,39,21,"_dependencyMap"],[33,53,39,21],[33,71,39,30,"proto"],[33,76,39,35],[33,77,39,36],[34,10,40,4],[35,10,41,4,"descriptor"],[35,20,41,14],[35,23,41,17,"_$$_REQUIRE"],[35,34,41,17],[35,35,41,17,"_dependencyMap"],[35,49,41,17],[35,62,41,22,"superProto"],[35,72,41,32],[35,74,41,34,"Symbol"],[35,80,41,40],[35,81,41,41,"toStringTag"],[35,92,41,52],[35,93,41,53],[36,8,42,3],[37,8,43,3],[38,8,44,3,"cache"],[38,13,44,8],[38,14,44,9],[38,17,44,12],[38,20,44,15,"typedArray"],[38,30,44,25],[38,31,44,26],[38,34,44,29,"_$$_REQUIRE"],[38,45,44,29],[38,46,44,29,"_dependencyMap"],[38,60,44,29],[38,78,44,38,"descriptor"],[38,88,44,48],[38,89,44,49,"get"],[38,92,44,52],[38,93,44,53],[39,6,45,2],[40,4,46,1],[40,5,46,2],[40,6,46,3],[41,2,47,0],[41,3,47,1],[41,9,47,7],[42,4,48,1,"_$$_REQUIRE"],[42,15,48,1],[42,16,48,1,"_dependencyMap"],[42,30,48,1],[42,47,48,9,"typedArrays"],[42,58,48,20],[42,60,48,22],[42,70,48,32,"typedArray"],[42,80,48,42],[42,82,48,44],[43,6,49,2],[43,10,49,6,"arr"],[43,13,49,9],[43,16,49,12],[43,20,49,16,"g"],[43,21,49,17],[43,22,49,18,"typedArray"],[43,32,49,28],[43,33,49,29],[43,34,49,30],[43,35,49,31],[44,6,50,2],[44,10,50,6,"fn"],[44,12,50,8],[44,15,50,11,"arr"],[44,18,50,14],[44,19,50,15,"slice"],[44,24,50,20],[44,28,50,24,"arr"],[44,31,50,27],[44,32,50,28,"set"],[44,35,50,31],[45,6,51,2],[45,10,51,6,"fn"],[45,12,51,8],[45,14,51,10],[46,8,52,3,"cache"],[46,13,52,8],[46,15,53,4],[46,62,53,53],[46,65,53,56],[46,68,53,59,"typedArray"],[46,78,53,69],[46,80,54,4],[46,83,54,7],[47,8,55,4],[48,8,56,4,"_$$_REQUIRE"],[48,19,56,4],[48,20,56,4,"_dependencyMap"],[48,34,56,4],[48,52,56,13,"fn"],[48,54,56,15],[48,55,57,4],[49,6,58,2],[50,4,59,1],[50,5,59,2],[50,6,59,3],[51,2,60,0],[53,2,62,0],[54,2,63,0],[54,6,63,4,"tryTypedArrays"],[54,20,63,18],[54,23,63,21],[54,32,63,30,"tryAllTypedArrays"],[54,49,63,47,"tryAllTypedArrays"],[54,50,63,48,"value"],[54,55,63,53],[54,57,63,55],[55,4,64,1],[55,55,64,53],[55,59,64,57,"found"],[55,64,64,62],[55,67,64,65],[55,72,64,70],[56,4,65,1,"_$$_REQUIRE"],[56,15,65,1],[56,16,65,1,"_dependencyMap"],[56,30,65,1],[56,47,66,2],[56,111,66,68,"cache"],[56,116,66,73],[56,118,67,2],[57,4,68,2],[57,14,68,12,"getter"],[57,20,68,18],[57,22,68,20,"typedArray"],[57,32,68,30],[57,34,68,32],[58,6,69,3],[58,10,69,7],[58,11,69,8,"found"],[58,16,69,13],[58,18,69,15],[59,8,70,4],[59,12,70,8],[60,10,71,5],[61,10,72,5],[61,14,72,9],[61,17,72,12],[61,20,72,15,"getter"],[61,26,72,21],[61,27,72,22,"value"],[61,32,72,27],[61,33,72,28],[61,38,72,33,"typedArray"],[61,48,72,43],[61,50,72,45],[62,12,73,6,"found"],[62,17,73,11],[62,20,73,14],[62,61,73,57,"$slice"],[62,67,73,63],[62,68,73,64,"typedArray"],[62,78,73,74],[62,80,73,76],[62,81,73,77],[62,82,73,79],[63,10,74,5],[64,8,75,4],[64,9,75,5],[64,10,75,6],[64,17,75,13,"e"],[64,18,75,14],[64,20,75,16],[64,21,75,18],[65,6,76,3],[66,4,77,2],[66,5,78,1],[66,6,78,2],[67,4,79,1],[67,11,79,8,"found"],[67,16,79,13],[68,2,80,0],[68,3,80,1],[70,2,82,0],[71,2,83,0],[71,6,83,4,"trySlices"],[71,15,83,13],[71,18,83,16],[71,27,83,25,"tryAllSlices"],[71,39,83,37,"tryAllSlices"],[71,40,83,38,"value"],[71,45,83,43],[71,47,83,45],[72,4,84,1],[72,50,84,48],[72,54,84,52,"found"],[72,59,84,57],[72,62,84,60],[72,67,84,65],[73,4,85,1,"_$$_REQUIRE"],[73,15,85,1],[73,16,85,1,"_dependencyMap"],[73,30,85,1],[73,47,86,2],[73,111,86,67,"cache"],[73,116,86,72],[73,118,87,2],[73,198,87,83],[73,208,87,93,"getter"],[73,214,87,99],[73,216,87,101,"name"],[73,220,87,105],[73,222,87,107],[74,6,88,3],[74,10,88,7],[74,11,88,8,"found"],[74,16,88,13],[74,18,88,15],[75,8,89,4],[75,12,89,8],[76,10,90,5],[77,10,91,5,"getter"],[77,16,91,11],[77,17,91,12,"value"],[77,22,91,17],[77,23,91,18],[78,10,92,5,"found"],[78,15,92,10],[78,18,92,13],[78,59,92,56,"$slice"],[78,65,92,62],[78,66,92,63,"name"],[78,70,92,67],[78,72,92,69],[78,73,92,70],[78,74,92,72],[79,8,93,4],[79,9,93,5],[79,10,93,6],[79,17,93,13,"e"],[79,18,93,14],[79,20,93,16],[79,21,93,18],[80,6,94,3],[81,4,95,2],[81,5,96,1],[81,6,96,2],[82,4,97,1],[82,11,97,8,"found"],[82,16,97,13],[83,2,98,0],[83,3,98,1],[85,2,100,0],[86,2,101,0,"module"],[86,8,101,6],[86,9,101,7,"exports"],[86,16,101,14],[86,19,101,17],[86,28,101,26,"whichTypedArray"],[86,43,101,41,"whichTypedArray"],[86,44,101,42,"value"],[86,49,101,47],[86,51,101,49],[87,4,102,1],[87,8,102,5],[87,9,102,6,"value"],[87,14,102,11],[87,18,102,15],[87,25,102,22,"value"],[87,30,102,27],[87,35,102,32],[87,43,102,40],[87,45,102,42],[88,6,102,44],[88,13,102,51],[88,18,102,56],[89,4,102,58],[90,4,103,1],[90,8,103,5],[90,9,103,6,"hasToStringTag"],[90,23,103,20],[90,25,103,22],[91,6,104,2],[92,6,105,2],[92,10,105,6,"tag"],[92,13,105,9],[92,16,105,12,"$slice"],[92,22,105,18],[92,23,105,19,"$toString"],[92,32,105,28],[92,33,105,29,"value"],[92,38,105,34],[92,39,105,35],[92,41,105,37],[92,42,105,38],[92,44,105,40],[92,45,105,41],[92,46,105,42],[92,47,105,43],[93,6,106,2],[93,10,106,6,"$indexOf"],[93,18,106,14],[93,19,106,15,"typedArrays"],[93,30,106,26],[93,32,106,28,"tag"],[93,35,106,31],[93,36,106,32],[93,39,106,35],[93,40,106,36],[93,41,106,37],[93,43,106,39],[94,8,107,3],[94,15,107,10,"tag"],[94,18,107,13],[95,6,108,2],[96,6,109,2],[96,10,109,6,"tag"],[96,13,109,9],[96,18,109,14],[96,26,109,22],[96,28,109,24],[97,8,110,3],[97,15,110,10],[97,20,110,15],[98,6,111,2],[99,6,112,2],[100,6,113,2],[100,13,113,9,"trySlices"],[100,22,113,18],[100,23,113,19,"value"],[100,28,113,24],[100,29,113,25],[101,4,114,1],[102,4,115,1],[102,8,115,5],[102,9,115,5,"_$$_REQUIRE"],[102,20,115,5],[102,21,115,5,"_dependencyMap"],[102,35,115,5],[102,47,115,10],[102,49,115,12],[103,6,115,14],[103,13,115,21],[103,17,115,25],[104,4,115,27],[104,5,115,28],[104,6,115,29],[105,4,116,1],[105,11,116,8,"tryTypedArrays"],[105,25,116,22],[105,26,116,23,"value"],[105,31,116,28],[105,32,116,29],[106,2,117,0],[106,3,117,1],[107,0,117,2],[107,3]],"functionMap":{"names":["<global>","indexOf","forEach$argument_1","tryAllTypedArrays","tryAllSlices","whichTypedArray"],"mappings":"AAA;6DCkB;CDO;sBEM;EFc;sBEE;EFW;qBGI;EDK;GCS;CHG;gBIG;mFFI;GEQ;CJG;iBKG;CLgB"}},"type":"js/module"}]}