{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  // Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.parse = void 0;\n  // Whitespace as per https://www.w3.org/TR/selectors-3/#lex is \" \\t\\r\\n\\f\"\n  var whitespace = new Set([9, 10, 12, 13, 32]);\n  var ZERO = \"0\".charCodeAt(0);\n  var NINE = \"9\".charCodeAt(0);\n  /**\n   * Parses an expression.\n   *\n   * @throws An `Error` if parsing fails.\n   * @returns An array containing the integer step size and the integer offset of the nth rule.\n   * @example nthCheck.parse(\"2n+3\"); // returns [2, 3]\n   */\n  function parse(formula) {\n    formula = formula.trim().toLowerCase();\n    if (formula === \"even\") {\n      return [2, 0];\n    } else if (formula === \"odd\") {\n      return [2, 1];\n    }\n    // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?\n    var idx = 0;\n    var a = 0;\n    var sign = readSign();\n    var number = readNumber();\n    if (idx < formula.length && formula.charAt(idx) === \"n\") {\n      idx++;\n      a = sign * (number !== null && number !== void 0 ? number : 1);\n      skipWhitespace();\n      if (idx < formula.length) {\n        sign = readSign();\n        skipWhitespace();\n        number = readNumber();\n      } else {\n        sign = number = 0;\n      }\n    }\n    // Throw if there is anything else\n    if (number === null || idx < formula.length) {\n      throw new Error(\"n-th rule couldn't be parsed ('\".concat(formula, \"')\"));\n    }\n    return [a, sign * number];\n    function readSign() {\n      if (formula.charAt(idx) === \"-\") {\n        idx++;\n        return -1;\n      }\n      if (formula.charAt(idx) === \"+\") {\n        idx++;\n      }\n      return 1;\n    }\n    function readNumber() {\n      var start = idx;\n      var value = 0;\n      while (idx < formula.length && formula.charCodeAt(idx) >= ZERO && formula.charCodeAt(idx) <= NINE) {\n        value = value * 10 + (formula.charCodeAt(idx) - ZERO);\n        idx++;\n      }\n      // Return `null` if we didn't read anything.\n      return idx === start ? null : value;\n    }\n    function skipWhitespace() {\n      while (idx < formula.length && whitespace.has(formula.charCodeAt(idx))) {\n        idx++;\n      }\n    }\n  }\n  exports.parse = parse;\n});","lineCount":76,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,2,3,0,"Object"],[5,8,3,6],[5,9,3,7,"defineProperty"],[5,23,3,21],[5,24,3,22,"exports"],[5,31,3,29],[5,33,3,31],[5,45,3,43],[5,47,3,45],[6,4,3,47,"value"],[6,9,3,52],[6,11,3,54],[7,2,3,59],[7,3,3,60],[7,4,3,61],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"parse"],[8,15,4,13],[8,18,4,16],[8,23,4,21],[8,24,4,22],[9,2,5,0],[10,2,6,0],[10,6,6,4,"whitespace"],[10,16,6,14],[10,19,6,17],[10,23,6,21,"Set"],[10,26,6,24],[10,27,6,25],[10,28,6,26],[10,29,6,27],[10,31,6,29],[10,33,6,31],[10,35,6,33],[10,37,6,35],[10,39,6,37],[10,41,6,39],[10,43,6,41],[10,45,6,43],[10,46,6,44],[10,47,6,45],[11,2,7,0],[11,6,7,4,"ZERO"],[11,10,7,8],[11,13,7,11],[11,16,7,14],[11,17,7,15,"charCodeAt"],[11,27,7,25],[11,28,7,26],[11,29,7,27],[11,30,7,28],[12,2,8,0],[12,6,8,4,"NINE"],[12,10,8,8],[12,13,8,11],[12,16,8,14],[12,17,8,15,"charCodeAt"],[12,27,8,25],[12,28,8,26],[12,29,8,27],[12,30,8,28],[13,2,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,2,16,0],[20,11,16,9,"parse"],[20,16,16,14,"parse"],[20,17,16,15,"formula"],[20,24,16,22],[20,26,16,24],[21,4,17,4,"formula"],[21,11,17,11],[21,14,17,14,"formula"],[21,21,17,21],[21,22,17,22,"trim"],[21,26,17,26],[21,27,17,27],[21,28,17,28],[21,29,17,29,"toLowerCase"],[21,40,17,40],[21,41,17,41],[21,42,17,42],[22,4,18,4],[22,8,18,8,"formula"],[22,15,18,15],[22,20,18,20],[22,26,18,26],[22,28,18,28],[23,6,19,8],[23,13,19,15],[23,14,19,16],[23,15,19,17],[23,17,19,19],[23,18,19,20],[23,19,19,21],[24,4,20,4],[24,5,20,5],[24,11,21,9],[24,15,21,13,"formula"],[24,22,21,20],[24,27,21,25],[24,32,21,30],[24,34,21,32],[25,6,22,8],[25,13,22,15],[25,14,22,16],[25,15,22,17],[25,17,22,19],[25,18,22,20],[25,19,22,21],[26,4,23,4],[27,4,24,4],[28,4,25,4],[28,8,25,8,"idx"],[28,11,25,11],[28,14,25,14],[28,15,25,15],[29,4,26,4],[29,8,26,8,"a"],[29,9,26,9],[29,12,26,12],[29,13,26,13],[30,4,27,4],[30,8,27,8,"sign"],[30,12,27,12],[30,15,27,15,"readSign"],[30,23,27,23],[30,24,27,24],[30,25,27,25],[31,4,28,4],[31,8,28,8,"number"],[31,14,28,14],[31,17,28,17,"readNumber"],[31,27,28,27],[31,28,28,28],[31,29,28,29],[32,4,29,4],[32,8,29,8,"idx"],[32,11,29,11],[32,14,29,14,"formula"],[32,21,29,21],[32,22,29,22,"length"],[32,28,29,28],[32,32,29,32,"formula"],[32,39,29,39],[32,40,29,40,"charAt"],[32,46,29,46],[32,47,29,47,"idx"],[32,50,29,50],[32,51,29,51],[32,56,29,56],[32,59,29,59],[32,61,29,61],[33,6,30,8,"idx"],[33,9,30,11],[33,11,30,13],[34,6,31,8,"a"],[34,7,31,9],[34,10,31,12,"sign"],[34,14,31,16],[34,18,31,20,"number"],[34,24,31,26],[34,29,31,31],[34,33,31,35],[34,37,31,39,"number"],[34,43,31,45],[34,48,31,50],[34,53,31,55],[34,54,31,56],[34,57,31,59,"number"],[34,63,31,65],[34,66,31,68],[34,67,31,69],[34,68,31,70],[35,6,32,8,"skipWhitespace"],[35,20,32,22],[35,21,32,23],[35,22,32,24],[36,6,33,8],[36,10,33,12,"idx"],[36,13,33,15],[36,16,33,18,"formula"],[36,23,33,25],[36,24,33,26,"length"],[36,30,33,32],[36,32,33,34],[37,8,34,12,"sign"],[37,12,34,16],[37,15,34,19,"readSign"],[37,23,34,27],[37,24,34,28],[37,25,34,29],[38,8,35,12,"skipWhitespace"],[38,22,35,26],[38,23,35,27],[38,24,35,28],[39,8,36,12,"number"],[39,14,36,18],[39,17,36,21,"readNumber"],[39,27,36,31],[39,28,36,32],[39,29,36,33],[40,6,37,8],[40,7,37,9],[40,13,38,13],[41,8,39,12,"sign"],[41,12,39,16],[41,15,39,19,"number"],[41,21,39,25],[41,24,39,28],[41,25,39,29],[42,6,40,8],[43,4,41,4],[44,4,42,4],[45,4,43,4],[45,8,43,8,"number"],[45,14,43,14],[45,19,43,19],[45,23,43,23],[45,27,43,27,"idx"],[45,30,43,30],[45,33,43,33,"formula"],[45,40,43,40],[45,41,43,41,"length"],[45,47,43,47],[45,49,43,49],[46,6,44,8],[46,12,44,14],[46,16,44,18,"Error"],[46,21,44,23],[46,22,44,24],[46,55,44,57],[46,56,44,58,"concat"],[46,62,44,64],[46,63,44,65,"formula"],[46,70,44,72],[46,72,44,74],[46,76,44,78],[46,77,44,79],[46,78,44,80],[47,4,45,4],[48,4,46,4],[48,11,46,11],[48,12,46,12,"a"],[48,13,46,13],[48,15,46,15,"sign"],[48,19,46,19],[48,22,46,22,"number"],[48,28,46,28],[48,29,46,29],[49,4,47,4],[49,13,47,13,"readSign"],[49,21,47,21,"readSign"],[49,22,47,21],[49,24,47,24],[50,6,48,8],[50,10,48,12,"formula"],[50,17,48,19],[50,18,48,20,"charAt"],[50,24,48,26],[50,25,48,27,"idx"],[50,28,48,30],[50,29,48,31],[50,34,48,36],[50,37,48,39],[50,39,48,41],[51,8,49,12,"idx"],[51,11,49,15],[51,13,49,17],[52,8,50,12],[52,15,50,19],[52,16,50,20],[52,17,50,21],[53,6,51,8],[54,6,52,8],[54,10,52,12,"formula"],[54,17,52,19],[54,18,52,20,"charAt"],[54,24,52,26],[54,25,52,27,"idx"],[54,28,52,30],[54,29,52,31],[54,34,52,36],[54,37,52,39],[54,39,52,41],[55,8,53,12,"idx"],[55,11,53,15],[55,13,53,17],[56,6,54,8],[57,6,55,8],[57,13,55,15],[57,14,55,16],[58,4,56,4],[59,4,57,4],[59,13,57,13,"readNumber"],[59,23,57,23,"readNumber"],[59,24,57,23],[59,26,57,26],[60,6,58,8],[60,10,58,12,"start"],[60,15,58,17],[60,18,58,20,"idx"],[60,21,58,23],[61,6,59,8],[61,10,59,12,"value"],[61,15,59,17],[61,18,59,20],[61,19,59,21],[62,6,60,8],[62,13,60,15,"idx"],[62,16,60,18],[62,19,60,21,"formula"],[62,26,60,28],[62,27,60,29,"length"],[62,33,60,35],[62,37,61,12,"formula"],[62,44,61,19],[62,45,61,20,"charCodeAt"],[62,55,61,30],[62,56,61,31,"idx"],[62,59,61,34],[62,60,61,35],[62,64,61,39,"ZERO"],[62,68,61,43],[62,72,62,12,"formula"],[62,79,62,19],[62,80,62,20,"charCodeAt"],[62,90,62,30],[62,91,62,31,"idx"],[62,94,62,34],[62,95,62,35],[62,99,62,39,"NINE"],[62,103,62,43],[62,105,62,45],[63,8,63,12,"value"],[63,13,63,17],[63,16,63,20,"value"],[63,21,63,25],[63,24,63,28],[63,26,63,30],[63,30,63,34,"formula"],[63,37,63,41],[63,38,63,42,"charCodeAt"],[63,48,63,52],[63,49,63,53,"idx"],[63,52,63,56],[63,53,63,57],[63,56,63,60,"ZERO"],[63,60,63,64],[63,61,63,65],[64,8,64,12,"idx"],[64,11,64,15],[64,13,64,17],[65,6,65,8],[66,6,66,8],[67,6,67,8],[67,13,67,15,"idx"],[67,16,67,18],[67,21,67,23,"start"],[67,26,67,28],[67,29,67,31],[67,33,67,35],[67,36,67,38,"value"],[67,41,67,43],[68,4,68,4],[69,4,69,4],[69,13,69,13,"skipWhitespace"],[69,27,69,27,"skipWhitespace"],[69,28,69,27],[69,30,69,30],[70,6,70,8],[70,13,70,15,"idx"],[70,16,70,18],[70,19,70,21,"formula"],[70,26,70,28],[70,27,70,29,"length"],[70,33,70,35],[70,37,71,12,"whitespace"],[70,47,71,22],[70,48,71,23,"has"],[70,51,71,26],[70,52,71,27,"formula"],[70,59,71,34],[70,60,71,35,"charCodeAt"],[70,70,71,45],[70,71,71,46,"idx"],[70,74,71,49],[70,75,71,50],[70,76,71,51],[70,78,71,53],[71,8,72,12,"idx"],[71,11,72,15],[71,13,72,17],[72,6,73,8],[73,4,74,4],[74,2,75,0],[75,2,76,0,"exports"],[75,9,76,7],[75,10,76,8,"parse"],[75,15,76,13],[75,18,76,16,"parse"],[75,23,76,21],[76,0,76,22],[76,3]],"functionMap":{"names":["<global>","parse","readSign","readNumber","skipWhitespace"],"mappings":"AAA;ACe;IC+B;KDS;IEC;KFW;IGC;KHK;CDC"}},"type":"js/module"}]}