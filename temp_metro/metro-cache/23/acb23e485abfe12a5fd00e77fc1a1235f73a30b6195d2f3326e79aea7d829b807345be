{"dependencies":[{"name":"domhandler","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":19,"index":262},"end":{"line":7,"column":40,"index":283}},{"start":{"line":7,"column":19,"index":262},"end":{"line":7,"column":40,"index":283}}],"key":"f5LnrKpjJRzkG16BHIFRqK+96ok="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DocumentPosition = void 0;\n  exports.removeSubsets = removeSubsets;\n  exports.compareDocumentPosition = compareDocumentPosition;\n  exports.uniqueSort = uniqueSort;\n  /**\n   * Given an array of nodes, remove any member that is contained by another\n   * member.\n   *\n   * @category Helpers\n   * @param nodes Nodes to filter.\n   * @returns Remaining nodes that aren't contained by other nodes.\n   */\n  function removeSubsets(nodes) {\n    var idx = nodes.length;\n    /*\n     * Check if each node (or one of its ancestors) is already contained in the\n     * array.\n     */\n    while (--idx >= 0) {\n      var node = nodes[idx];\n      /*\n       * Remove the node if it is not unique.\n       * We are going through the array from the end, so we only\n       * have to check nodes that preceed the node under consideration in the array.\n       */\n      if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {\n        nodes.splice(idx, 1);\n        continue;\n      }\n      for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {\n        if (nodes.includes(ancestor)) {\n          nodes.splice(idx, 1);\n          break;\n        }\n      }\n    }\n    return nodes;\n  }\n  /**\n   * @category Helpers\n   * @see {@link http://dom.spec.whatwg.org/#dom-node-comparedocumentposition}\n   */\n  var DocumentPosition;\n  (function (DocumentPosition) {\n    DocumentPosition[DocumentPosition[\"DISCONNECTED\"] = 1] = \"DISCONNECTED\";\n    DocumentPosition[DocumentPosition[\"PRECEDING\"] = 2] = \"PRECEDING\";\n    DocumentPosition[DocumentPosition[\"FOLLOWING\"] = 4] = \"FOLLOWING\";\n    DocumentPosition[DocumentPosition[\"CONTAINS\"] = 8] = \"CONTAINS\";\n    DocumentPosition[DocumentPosition[\"CONTAINED_BY\"] = 16] = \"CONTAINED_BY\";\n  })(DocumentPosition || (exports.DocumentPosition = DocumentPosition = {}));\n  /**\n   * Compare the position of one node against another node in any other document,\n   * returning a bitmask with the values from {@link DocumentPosition}.\n   *\n   * Document order:\n   * > There is an ordering, document order, defined on all the nodes in the\n   * > document corresponding to the order in which the first character of the\n   * > XML representation of each node occurs in the XML representation of the\n   * > document after expansion of general entities. Thus, the document element\n   * > node will be the first node. Element nodes occur before their children.\n   * > Thus, document order orders element nodes in order of the occurrence of\n   * > their start-tag in the XML (after expansion of entities). The attribute\n   * > nodes of an element occur after the element and before its children. The\n   * > relative order of attribute nodes is implementation-dependent.\n   *\n   * Source:\n   * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order\n   *\n   * @category Helpers\n   * @param nodeA The first node to use in the comparison\n   * @param nodeB The second node to use in the comparison\n   * @returns A bitmask describing the input nodes' relative position.\n   *\n   * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for\n   * a description of these values.\n   */\n  function compareDocumentPosition(nodeA, nodeB) {\n    var aParents = [];\n    var bParents = [];\n    if (nodeA === nodeB) {\n      return 0;\n    }\n    var current = (0, _$$_REQUIRE(_dependencyMap[0], \"domhandler\").hasChildren)(nodeA) ? nodeA : nodeA.parent;\n    while (current) {\n      aParents.unshift(current);\n      current = current.parent;\n    }\n    current = (0, _$$_REQUIRE(_dependencyMap[0], \"domhandler\").hasChildren)(nodeB) ? nodeB : nodeB.parent;\n    while (current) {\n      bParents.unshift(current);\n      current = current.parent;\n    }\n    var maxIdx = Math.min(aParents.length, bParents.length);\n    var idx = 0;\n    while (idx < maxIdx && aParents[idx] === bParents[idx]) {\n      idx++;\n    }\n    if (idx === 0) {\n      return DocumentPosition.DISCONNECTED;\n    }\n    var sharedParent = aParents[idx - 1];\n    var siblings = sharedParent.children;\n    var aSibling = aParents[idx];\n    var bSibling = bParents[idx];\n    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {\n      if (sharedParent === nodeB) {\n        return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;\n      }\n      return DocumentPosition.FOLLOWING;\n    }\n    if (sharedParent === nodeA) {\n      return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;\n    }\n    return DocumentPosition.PRECEDING;\n  }\n  /**\n   * Sort an array of nodes based on their relative position in the document,\n   * removing any duplicate nodes. If the array contains nodes that do not belong\n   * to the same document, sort order is unspecified.\n   *\n   * @category Helpers\n   * @param nodes Array of DOM nodes.\n   * @returns Collection of unique nodes, sorted in document order.\n   */\n  function uniqueSort(nodes) {\n    nodes = nodes.filter(function (node, i, arr) {\n      return !arr.includes(node, i + 1);\n    });\n    nodes.sort(function (a, b) {\n      var relative = compareDocumentPosition(a, b);\n      if (relative & DocumentPosition.PRECEDING) {\n        return -1;\n      } else if (relative & DocumentPosition.FOLLOWING) {\n        return 1;\n      }\n      return 0;\n    });\n    return nodes;\n  }\n});","lineCount":146,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"DocumentPosition"],[7,26,3,24],[7,29,3,27],[7,34,3,32],[7,35,3,33],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"removeSubsets"],[8,23,4,21],[8,26,4,24,"removeSubsets"],[8,39,4,37],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"compareDocumentPosition"],[9,33,5,31],[9,36,5,34,"compareDocumentPosition"],[9,59,5,57],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"uniqueSort"],[10,20,6,18],[10,23,6,21,"uniqueSort"],[10,33,6,31],[11,2,8,0],[12,0,9,0],[13,0,10,0],[14,0,11,0],[15,0,12,0],[16,0,13,0],[17,0,14,0],[18,0,15,0],[19,2,16,0],[19,11,16,9,"removeSubsets"],[19,24,16,22,"removeSubsets"],[19,25,16,23,"nodes"],[19,30,16,28],[19,32,16,30],[20,4,17,4],[20,8,17,8,"idx"],[20,11,17,11],[20,14,17,14,"nodes"],[20,19,17,19],[20,20,17,20,"length"],[20,26,17,26],[21,4,18,4],[22,0,19,0],[23,0,20,0],[24,0,21,0],[25,4,22,4],[25,11,22,11],[25,13,22,13,"idx"],[25,16,22,16],[25,20,22,20],[25,21,22,21],[25,23,22,23],[26,6,23,8],[26,10,23,12,"node"],[26,14,23,16],[26,17,23,19,"nodes"],[26,22,23,24],[26,23,23,25,"idx"],[26,26,23,28],[26,27,23,29],[27,6,24,8],[28,0,25,0],[29,0,26,0],[30,0,27,0],[31,0,28,0],[32,6,29,8],[32,10,29,12,"idx"],[32,13,29,15],[32,16,29,18],[32,17,29,19],[32,21,29,23,"nodes"],[32,26,29,28],[32,27,29,29,"lastIndexOf"],[32,38,29,40],[32,39,29,41,"node"],[32,43,29,45],[32,45,29,47,"idx"],[32,48,29,50],[32,51,29,53],[32,52,29,54],[32,53,29,55],[32,57,29,59],[32,58,29,60],[32,60,29,62],[33,8,30,12,"nodes"],[33,13,30,17],[33,14,30,18,"splice"],[33,20,30,24],[33,21,30,25,"idx"],[33,24,30,28],[33,26,30,30],[33,27,30,31],[33,28,30,32],[34,8,31,12],[35,6,32,8],[36,6,33,8],[36,11,33,13],[36,15,33,17,"ancestor"],[36,23,33,25],[36,26,33,28,"node"],[36,30,33,32],[36,31,33,33,"parent"],[36,37,33,39],[36,39,33,41,"ancestor"],[36,47,33,49],[36,49,33,51,"ancestor"],[36,57,33,59],[36,60,33,62,"ancestor"],[36,68,33,70],[36,69,33,71,"parent"],[36,75,33,77],[36,77,33,79],[37,8,34,12],[37,12,34,16,"nodes"],[37,17,34,21],[37,18,34,22,"includes"],[37,26,34,30],[37,27,34,31,"ancestor"],[37,35,34,39],[37,36,34,40],[37,38,34,42],[38,10,35,16,"nodes"],[38,15,35,21],[38,16,35,22,"splice"],[38,22,35,28],[38,23,35,29,"idx"],[38,26,35,32],[38,28,35,34],[38,29,35,35],[38,30,35,36],[39,10,36,16],[40,8,37,12],[41,6,38,8],[42,4,39,4],[43,4,40,4],[43,11,40,11,"nodes"],[43,16,40,16],[44,2,41,0],[45,2,42,0],[46,0,43,0],[47,0,44,0],[48,0,45,0],[49,2,46,0],[49,6,46,4,"DocumentPosition"],[49,22,46,20],[50,2,47,0],[50,3,47,1],[50,13,47,11,"DocumentPosition"],[50,29,47,27],[50,31,47,29],[51,4,48,4,"DocumentPosition"],[51,20,48,20],[51,21,48,21,"DocumentPosition"],[51,37,48,37],[51,38,48,38],[51,52,48,52],[51,53,48,53],[51,56,48,56],[51,57,48,57],[51,58,48,58],[51,61,48,61],[51,75,48,75],[52,4,49,4,"DocumentPosition"],[52,20,49,20],[52,21,49,21,"DocumentPosition"],[52,37,49,37],[52,38,49,38],[52,49,49,49],[52,50,49,50],[52,53,49,53],[52,54,49,54],[52,55,49,55],[52,58,49,58],[52,69,49,69],[53,4,50,4,"DocumentPosition"],[53,20,50,20],[53,21,50,21,"DocumentPosition"],[53,37,50,37],[53,38,50,38],[53,49,50,49],[53,50,50,50],[53,53,50,53],[53,54,50,54],[53,55,50,55],[53,58,50,58],[53,69,50,69],[54,4,51,4,"DocumentPosition"],[54,20,51,20],[54,21,51,21,"DocumentPosition"],[54,37,51,37],[54,38,51,38],[54,48,51,48],[54,49,51,49],[54,52,51,52],[54,53,51,53],[54,54,51,54],[54,57,51,57],[54,67,51,67],[55,4,52,4,"DocumentPosition"],[55,20,52,20],[55,21,52,21,"DocumentPosition"],[55,37,52,37],[55,38,52,38],[55,52,52,52],[55,53,52,53],[55,56,52,56],[55,58,52,58],[55,59,52,59],[55,62,52,62],[55,76,52,76],[56,2,53,0],[56,3,53,1],[56,5,53,3,"DocumentPosition"],[56,21,53,19],[56,26,53,24,"exports"],[56,33,53,31],[56,34,53,32,"DocumentPosition"],[56,50,53,48],[56,53,53,51,"DocumentPosition"],[56,69,53,67],[56,72,53,70],[56,73,53,71],[56,74,53,72],[56,75,53,73],[56,76,53,74],[57,2,54,0],[58,0,55,0],[59,0,56,0],[60,0,57,0],[61,0,58,0],[62,0,59,0],[63,0,60,0],[64,0,61,0],[65,0,62,0],[66,0,63,0],[67,0,64,0],[68,0,65,0],[69,0,66,0],[70,0,67,0],[71,0,68,0],[72,0,69,0],[73,0,70,0],[74,0,71,0],[75,0,72,0],[76,0,73,0],[77,0,74,0],[78,0,75,0],[79,0,76,0],[80,0,77,0],[81,0,78,0],[82,0,79,0],[83,2,80,0],[83,11,80,9,"compareDocumentPosition"],[83,34,80,32,"compareDocumentPosition"],[83,35,80,33,"nodeA"],[83,40,80,38],[83,42,80,40,"nodeB"],[83,47,80,45],[83,49,80,47],[84,4,81,4],[84,8,81,8,"aParents"],[84,16,81,16],[84,19,81,19],[84,21,81,21],[85,4,82,4],[85,8,82,8,"bParents"],[85,16,82,16],[85,19,82,19],[85,21,82,21],[86,4,83,4],[86,8,83,8,"nodeA"],[86,13,83,13],[86,18,83,18,"nodeB"],[86,23,83,23],[86,25,83,25],[87,6,84,8],[87,13,84,15],[87,14,84,16],[88,4,85,4],[89,4,86,4],[89,8,86,8,"current"],[89,15,86,15],[89,18,86,18],[89,19,86,19],[89,20,86,20],[89,22,86,22,"_$$_REQUIRE"],[89,33,86,22],[89,34,86,22,"_dependencyMap"],[89,48,86,22],[89,67,86,35,"hasChildren"],[89,78,86,46],[89,80,86,48,"nodeA"],[89,85,86,53],[89,86,86,54],[89,89,86,57,"nodeA"],[89,94,86,62],[89,97,86,65,"nodeA"],[89,102,86,70],[89,103,86,71,"parent"],[89,109,86,77],[90,4,87,4],[90,11,87,11,"current"],[90,18,87,18],[90,20,87,20],[91,6,88,8,"aParents"],[91,14,88,16],[91,15,88,17,"unshift"],[91,22,88,24],[91,23,88,25,"current"],[91,30,88,32],[91,31,88,33],[92,6,89,8,"current"],[92,13,89,15],[92,16,89,18,"current"],[92,23,89,25],[92,24,89,26,"parent"],[92,30,89,32],[93,4,90,4],[94,4,91,4,"current"],[94,11,91,11],[94,14,91,14],[94,15,91,15],[94,16,91,16],[94,18,91,18,"_$$_REQUIRE"],[94,29,91,18],[94,30,91,18,"_dependencyMap"],[94,44,91,18],[94,63,91,31,"hasChildren"],[94,74,91,42],[94,76,91,44,"nodeB"],[94,81,91,49],[94,82,91,50],[94,85,91,53,"nodeB"],[94,90,91,58],[94,93,91,61,"nodeB"],[94,98,91,66],[94,99,91,67,"parent"],[94,105,91,73],[95,4,92,4],[95,11,92,11,"current"],[95,18,92,18],[95,20,92,20],[96,6,93,8,"bParents"],[96,14,93,16],[96,15,93,17,"unshift"],[96,22,93,24],[96,23,93,25,"current"],[96,30,93,32],[96,31,93,33],[97,6,94,8,"current"],[97,13,94,15],[97,16,94,18,"current"],[97,23,94,25],[97,24,94,26,"parent"],[97,30,94,32],[98,4,95,4],[99,4,96,4],[99,8,96,8,"maxIdx"],[99,14,96,14],[99,17,96,17,"Math"],[99,21,96,21],[99,22,96,22,"min"],[99,25,96,25],[99,26,96,26,"aParents"],[99,34,96,34],[99,35,96,35,"length"],[99,41,96,41],[99,43,96,43,"bParents"],[99,51,96,51],[99,52,96,52,"length"],[99,58,96,58],[99,59,96,59],[100,4,97,4],[100,8,97,8,"idx"],[100,11,97,11],[100,14,97,14],[100,15,97,15],[101,4,98,4],[101,11,98,11,"idx"],[101,14,98,14],[101,17,98,17,"maxIdx"],[101,23,98,23],[101,27,98,27,"aParents"],[101,35,98,35],[101,36,98,36,"idx"],[101,39,98,39],[101,40,98,40],[101,45,98,45,"bParents"],[101,53,98,53],[101,54,98,54,"idx"],[101,57,98,57],[101,58,98,58],[101,60,98,60],[102,6,99,8,"idx"],[102,9,99,11],[102,11,99,13],[103,4,100,4],[104,4,101,4],[104,8,101,8,"idx"],[104,11,101,11],[104,16,101,16],[104,17,101,17],[104,19,101,19],[105,6,102,8],[105,13,102,15,"DocumentPosition"],[105,29,102,31],[105,30,102,32,"DISCONNECTED"],[105,42,102,44],[106,4,103,4],[107,4,104,4],[107,8,104,8,"sharedParent"],[107,20,104,20],[107,23,104,23,"aParents"],[107,31,104,31],[107,32,104,32,"idx"],[107,35,104,35],[107,38,104,38],[107,39,104,39],[107,40,104,40],[108,4,105,4],[108,8,105,8,"siblings"],[108,16,105,16],[108,19,105,19,"sharedParent"],[108,31,105,31],[108,32,105,32,"children"],[108,40,105,40],[109,4,106,4],[109,8,106,8,"aSibling"],[109,16,106,16],[109,19,106,19,"aParents"],[109,27,106,27],[109,28,106,28,"idx"],[109,31,106,31],[109,32,106,32],[110,4,107,4],[110,8,107,8,"bSibling"],[110,16,107,16],[110,19,107,19,"bParents"],[110,27,107,27],[110,28,107,28,"idx"],[110,31,107,31],[110,32,107,32],[111,4,108,4],[111,8,108,8,"siblings"],[111,16,108,16],[111,17,108,17,"indexOf"],[111,24,108,24],[111,25,108,25,"aSibling"],[111,33,108,33],[111,34,108,34],[111,37,108,37,"siblings"],[111,45,108,45],[111,46,108,46,"indexOf"],[111,53,108,53],[111,54,108,54,"bSibling"],[111,62,108,62],[111,63,108,63],[111,65,108,65],[112,6,109,8],[112,10,109,12,"sharedParent"],[112,22,109,24],[112,27,109,29,"nodeB"],[112,32,109,34],[112,34,109,36],[113,8,110,12],[113,15,110,19,"DocumentPosition"],[113,31,110,35],[113,32,110,36,"FOLLOWING"],[113,41,110,45],[113,44,110,48,"DocumentPosition"],[113,60,110,64],[113,61,110,65,"CONTAINED_BY"],[113,73,110,77],[114,6,111,8],[115,6,112,8],[115,13,112,15,"DocumentPosition"],[115,29,112,31],[115,30,112,32,"FOLLOWING"],[115,39,112,41],[116,4,113,4],[117,4,114,4],[117,8,114,8,"sharedParent"],[117,20,114,20],[117,25,114,25,"nodeA"],[117,30,114,30],[117,32,114,32],[118,6,115,8],[118,13,115,15,"DocumentPosition"],[118,29,115,31],[118,30,115,32,"PRECEDING"],[118,39,115,41],[118,42,115,44,"DocumentPosition"],[118,58,115,60],[118,59,115,61,"CONTAINS"],[118,67,115,69],[119,4,116,4],[120,4,117,4],[120,11,117,11,"DocumentPosition"],[120,27,117,27],[120,28,117,28,"PRECEDING"],[120,37,117,37],[121,2,118,0],[122,2,119,0],[123,0,120,0],[124,0,121,0],[125,0,122,0],[126,0,123,0],[127,0,124,0],[128,0,125,0],[129,0,126,0],[130,0,127,0],[131,2,128,0],[131,11,128,9,"uniqueSort"],[131,21,128,19,"uniqueSort"],[131,22,128,20,"nodes"],[131,27,128,25],[131,29,128,27],[132,4,129,4,"nodes"],[132,9,129,9],[132,12,129,12,"nodes"],[132,17,129,17],[132,18,129,18,"filter"],[132,24,129,24],[132,25,129,25],[132,35,129,35,"node"],[132,39,129,39],[132,41,129,41,"i"],[132,42,129,42],[132,44,129,44,"arr"],[132,47,129,47],[132,49,129,49],[133,6,129,51],[133,13,129,58],[133,14,129,59,"arr"],[133,17,129,62],[133,18,129,63,"includes"],[133,26,129,71],[133,27,129,72,"node"],[133,31,129,76],[133,33,129,78,"i"],[133,34,129,79],[133,37,129,82],[133,38,129,83],[133,39,129,84],[134,4,129,86],[134,5,129,87],[134,6,129,88],[135,4,130,4,"nodes"],[135,9,130,9],[135,10,130,10,"sort"],[135,14,130,14],[135,15,130,15],[135,25,130,25,"a"],[135,26,130,26],[135,28,130,28,"b"],[135,29,130,29],[135,31,130,31],[136,6,131,8],[136,10,131,12,"relative"],[136,18,131,20],[136,21,131,23,"compareDocumentPosition"],[136,44,131,46],[136,45,131,47,"a"],[136,46,131,48],[136,48,131,50,"b"],[136,49,131,51],[136,50,131,52],[137,6,132,8],[137,10,132,12,"relative"],[137,18,132,20],[137,21,132,23,"DocumentPosition"],[137,37,132,39],[137,38,132,40,"PRECEDING"],[137,47,132,49],[137,49,132,51],[138,8,133,12],[138,15,133,19],[138,16,133,20],[138,17,133,21],[139,6,134,8],[139,7,134,9],[139,13,135,13],[139,17,135,17,"relative"],[139,25,135,25],[139,28,135,28,"DocumentPosition"],[139,44,135,44],[139,45,135,45,"FOLLOWING"],[139,54,135,54],[139,56,135,56],[140,8,136,12],[140,15,136,19],[140,16,136,20],[141,6,137,8],[142,6,138,8],[142,13,138,15],[142,14,138,16],[143,4,139,4],[143,5,139,5],[143,6,139,6],[144,4,140,4],[144,11,140,11,"nodes"],[144,16,140,16],[145,2,141,0],[146,0,141,1],[146,3]],"functionMap":{"names":["<global>","removeSubsets","<anonymous>","compareDocumentPosition","uniqueSort","nodes.filter$argument_0","nodes.sort$argument_0"],"mappings":"AAA;ACe;CDyB;CEM;CFM;AG2B;CHsC;AIU;yBCC,8DD;eEC;KFS;CJE"}},"type":"js/module"}]}