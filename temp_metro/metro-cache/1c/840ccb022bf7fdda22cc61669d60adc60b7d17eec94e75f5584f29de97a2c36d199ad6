{"dependencies":[{"name":"../incr32","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":13,"index":88},"end":{"line":3,"column":33,"index":108}}],"key":"B8DQaqiyx6bM6Jooc7nBaW6t2jg="}},{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":13,"index":45},"end":{"line":2,"column":42,"index":74}},{"start":{"line":2,"column":13,"index":45},"end":{"line":2,"column":42,"index":74}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI="}},{"name":"buffer-xor","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":10,"index":10},"end":{"line":1,"column":31,"index":31}}],"key":"loeSrW6/3vzsFLRxgE5dDkO1O/w="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function getBlock(self) {\n    var out = self._cipher.encryptBlockRaw(self._prev);\n    _$$_REQUIRE(_dependencyMap[0], \"../incr32\")(self._prev);\n    return out;\n  }\n  var blockSize = 16;\n  exports.encrypt = function (self, chunk) {\n    var chunkNum = Math.ceil(chunk.length / blockSize);\n    var start = self._cache.length;\n    self._cache = _$$_REQUIRE(_dependencyMap[1], \"safe-buffer\").Buffer.concat([self._cache, _$$_REQUIRE(_dependencyMap[1], \"safe-buffer\").Buffer.allocUnsafe(chunkNum * blockSize)]);\n    for (var i = 0; i < chunkNum; i++) {\n      var out = getBlock(self);\n      var offset = start + i * blockSize;\n      self._cache.writeUInt32BE(out[0], offset + 0);\n      self._cache.writeUInt32BE(out[1], offset + 4);\n      self._cache.writeUInt32BE(out[2], offset + 8);\n      self._cache.writeUInt32BE(out[3], offset + 12);\n    }\n    var pad = self._cache.slice(0, chunk.length);\n    self._cache = self._cache.slice(chunk.length);\n    return _$$_REQUIRE(_dependencyMap[2], \"buffer-xor\")(chunk, pad);\n  };\n});","lineCount":24,"map":[[2,2,5,0],[2,11,5,9,"getBlock"],[2,19,5,17,"getBlock"],[2,20,5,19,"self"],[2,24,5,23],[2,26,5,25],[3,4,6,2],[3,8,6,6,"out"],[3,11,6,9],[3,14,6,12,"self"],[3,18,6,16],[3,19,6,17,"_cipher"],[3,26,6,24],[3,27,6,25,"encryptBlockRaw"],[3,42,6,40],[3,43,6,41,"self"],[3,47,6,45],[3,48,6,46,"_prev"],[3,53,6,51],[3,54,6,52],[4,4,7,2,"_$$_REQUIRE"],[4,15,7,2],[4,16,7,2,"_dependencyMap"],[4,30,7,2],[4,48,7,9,"self"],[4,52,7,13],[4,53,7,14,"_prev"],[4,58,7,19],[4,59,7,20],[5,4,8,2],[5,11,8,9,"out"],[5,14,8,12],[6,2,9,0],[7,2,11,0],[7,6,11,4,"blockSize"],[7,15,11,13],[7,18,11,16],[7,20,11,18],[8,2,12,0,"exports"],[8,9,12,7],[8,10,12,8,"encrypt"],[8,17,12,15],[8,20,12,18],[8,30,12,28,"self"],[8,34,12,32],[8,36,12,34,"chunk"],[8,41,12,39],[8,43,12,41],[9,4,13,2],[9,8,13,6,"chunkNum"],[9,16,13,14],[9,19,13,17,"Math"],[9,23,13,21],[9,24,13,22,"ceil"],[9,28,13,26],[9,29,13,27,"chunk"],[9,34,13,32],[9,35,13,33,"length"],[9,41,13,39],[9,44,13,42,"blockSize"],[9,53,13,51],[9,54,13,52],[10,4,14,2],[10,8,14,6,"start"],[10,13,14,11],[10,16,14,14,"self"],[10,20,14,18],[10,21,14,19,"_cache"],[10,27,14,25],[10,28,14,26,"length"],[10,34,14,32],[11,4,15,2,"self"],[11,8,15,6],[11,9,15,7,"_cache"],[11,15,15,13],[11,18,15,16,"_$$_REQUIRE"],[11,29,15,16],[11,30,15,16,"_dependencyMap"],[11,44,15,16],[11,64,15,16,"Buffer"],[11,70,15,16],[11,71,15,23,"concat"],[11,77,15,29],[11,78,15,30],[11,79,16,4,"self"],[11,83,16,8],[11,84,16,9,"_cache"],[11,90,16,15],[11,92,17,4,"_$$_REQUIRE"],[11,103,17,4],[11,104,17,4,"_dependencyMap"],[11,118,17,4],[11,138,17,4,"Buffer"],[11,144,17,4],[11,145,17,11,"allocUnsafe"],[11,156,17,22],[11,157,17,23,"chunkNum"],[11,165,17,31],[11,168,17,34,"blockSize"],[11,177,17,43],[11,178,17,44],[11,179,18,3],[11,180,18,4],[12,4,19,2],[12,9,19,7],[12,13,19,11,"i"],[12,14,19,12],[12,17,19,15],[12,18,19,16],[12,20,19,18,"i"],[12,21,19,19],[12,24,19,22,"chunkNum"],[12,32,19,30],[12,34,19,32,"i"],[12,35,19,33],[12,37,19,35],[12,39,19,37],[13,6,20,4],[13,10,20,8,"out"],[13,13,20,11],[13,16,20,14,"getBlock"],[13,24,20,22],[13,25,20,23,"self"],[13,29,20,27],[13,30,20,28],[14,6,21,4],[14,10,21,8,"offset"],[14,16,21,14],[14,19,21,17,"start"],[14,24,21,22],[14,27,21,25,"i"],[14,28,21,26],[14,31,21,29,"blockSize"],[14,40,21,38],[15,6,22,4,"self"],[15,10,22,8],[15,11,22,9,"_cache"],[15,17,22,15],[15,18,22,16,"writeUInt32BE"],[15,31,22,29],[15,32,22,30,"out"],[15,35,22,33],[15,36,22,34],[15,37,22,35],[15,38,22,36],[15,40,22,38,"offset"],[15,46,22,44],[15,49,22,47],[15,50,22,48],[15,51,22,49],[16,6,23,4,"self"],[16,10,23,8],[16,11,23,9,"_cache"],[16,17,23,15],[16,18,23,16,"writeUInt32BE"],[16,31,23,29],[16,32,23,30,"out"],[16,35,23,33],[16,36,23,34],[16,37,23,35],[16,38,23,36],[16,40,23,38,"offset"],[16,46,23,44],[16,49,23,47],[16,50,23,48],[16,51,23,49],[17,6,24,4,"self"],[17,10,24,8],[17,11,24,9,"_cache"],[17,17,24,15],[17,18,24,16,"writeUInt32BE"],[17,31,24,29],[17,32,24,30,"out"],[17,35,24,33],[17,36,24,34],[17,37,24,35],[17,38,24,36],[17,40,24,38,"offset"],[17,46,24,44],[17,49,24,47],[17,50,24,48],[17,51,24,49],[18,6,25,4,"self"],[18,10,25,8],[18,11,25,9,"_cache"],[18,17,25,15],[18,18,25,16,"writeUInt32BE"],[18,31,25,29],[18,32,25,30,"out"],[18,35,25,33],[18,36,25,34],[18,37,25,35],[18,38,25,36],[18,40,25,38,"offset"],[18,46,25,44],[18,49,25,47],[18,51,25,49],[18,52,25,50],[19,4,26,2],[20,4,27,2],[20,8,27,6,"pad"],[20,11,27,9],[20,14,27,12,"self"],[20,18,27,16],[20,19,27,17,"_cache"],[20,25,27,23],[20,26,27,24,"slice"],[20,31,27,29],[20,32,27,30],[20,33,27,31],[20,35,27,33,"chunk"],[20,40,27,38],[20,41,27,39,"length"],[20,47,27,45],[20,48,27,46],[21,4,28,2,"self"],[21,8,28,6],[21,9,28,7,"_cache"],[21,15,28,13],[21,18,28,16,"self"],[21,22,28,20],[21,23,28,21,"_cache"],[21,29,28,27],[21,30,28,28,"slice"],[21,35,28,33],[21,36,28,34,"chunk"],[21,41,28,39],[21,42,28,40,"length"],[21,48,28,46],[21,49,28,47],[22,4,29,2],[22,11,29,9,"_$$_REQUIRE"],[22,22,29,9],[22,23,29,9,"_dependencyMap"],[22,37,29,9],[22,56,29,13,"chunk"],[22,61,29,18],[22,63,29,20,"pad"],[22,66,29,23],[22,67,29,24],[23,2,30,0],[23,3,30,1],[24,0,30,1],[24,3]],"functionMap":{"names":["<global>","getBlock","exports.encrypt"],"mappings":"AAA;ACI;CDI;kBEG;CFkB"}},"type":"js/module"}]}