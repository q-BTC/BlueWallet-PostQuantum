{"dependencies":[{"name":"stream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":16,"index":75},"end":{"line":4,"column":43,"index":102}},{"start":{"line":4,"column":16,"index":75},"end":{"line":4,"column":43,"index":102}}],"key":"ywjhWBPQUrHXIfwGsbgNg7Szt/A="}},{"name":"inherits","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":15,"index":180},"end":{"line":6,"column":34,"index":199}}],"key":"UFs2L1Ma7NUz/WYD3lQMkA8Bn/s="}},{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":13,"index":28},"end":{"line":3,"column":42,"index":57}},{"start":{"line":3,"column":13,"index":28},"end":{"line":3,"column":42,"index":57}},{"start":{"line":3,"column":13,"index":28},"end":{"line":3,"column":42,"index":57}},{"start":{"line":3,"column":13,"index":28},"end":{"line":3,"column":42,"index":57}},{"start":{"line":3,"column":13,"index":28},"end":{"line":3,"column":42,"index":57}},{"start":{"line":3,"column":13,"index":28},"end":{"line":3,"column":42,"index":57}},{"start":{"line":3,"column":13,"index":28},"end":{"line":3,"column":42,"index":57}},{"start":{"line":3,"column":13,"index":28},"end":{"line":3,"column":42,"index":57}},{"start":{"line":3,"column":13,"index":28},"end":{"line":3,"column":42,"index":57}},{"start":{"line":3,"column":13,"index":28},"end":{"line":3,"column":42,"index":57}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI="}},{"name":"string_decoder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":20,"index":124},"end":{"line":5,"column":59,"index":163}}],"key":"Czn9Pd3w4g4vQh6KJoZw1JzHmic="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  function CipherBase(hashMode) {\n    _$$_REQUIRE(_dependencyMap[0], \"stream\").Transform.call(this);\n    this.hashMode = typeof hashMode === 'string';\n    if (this.hashMode) {\n      this[hashMode] = this._finalOrDigest;\n    } else {\n      this['final'] = this._finalOrDigest;\n    }\n    if (this._final) {\n      this.__final = this._final;\n      this._final = null;\n    }\n    this._decoder = null;\n    this._encoding = null;\n  }\n  _$$_REQUIRE(_dependencyMap[1], \"inherits\")(CipherBase, _$$_REQUIRE(_dependencyMap[0], \"stream\").Transform);\n  var useUint8Array = typeof Uint8Array !== 'undefined';\n  var useArrayBuffer = typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && ArrayBuffer.isView && (_$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.prototype instanceof Uint8Array || _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.TYPED_ARRAY_SUPPORT);\n  function toBuffer(data, encoding) {\n    /*\n     * No need to do anything for exact instance\n     * This is only valid when safe-buffer.Buffer === buffer.Buffer, i.e. when Buffer.from/Buffer.alloc existed\n     */\n    if (data instanceof _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer) {\n      return data;\n    }\n\n    // Convert strings to Buffer\n    if (typeof data === 'string') {\n      return _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.from(data, encoding);\n    }\n\n    /*\n     * Wrap any TypedArray instances and DataViews\n     * Makes sense only on engines with full TypedArray support -- let Buffer detect that\n     */\n    if (useArrayBuffer && ArrayBuffer.isView(data)) {\n      // Bug in Node.js <6.3.1, which treats this as out-of-bounds\n      if (data.byteLength === 0) {\n        return _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.alloc(0);\n      }\n      var res = _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n      /*\n       * Recheck result size, as offset/length doesn't work on Node.js <5.10\n       * We just go to Uint8Array case if this fails\n       */\n      if (res.byteLength === data.byteLength) {\n        return res;\n      }\n    }\n\n    /*\n     * Uint8Array in engines where Buffer.from might not work with ArrayBuffer, just copy over\n     * Doesn't make sense with other TypedArray instances\n     */\n    if (useUint8Array && data instanceof Uint8Array) {\n      return _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.from(data);\n    }\n\n    /*\n     * Old Buffer polyfill on an engine that doesn't have TypedArray support\n     * Also, this is from a different Buffer polyfill implementation then we have, as instanceof check failed\n     * Convert to our current Buffer implementation\n     */\n    if (_$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.isBuffer(data) && data.constructor && typeof data.constructor.isBuffer === 'function' && data.constructor.isBuffer(data)) {\n      return _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.from(data);\n    }\n    throw new TypeError('The \"data\" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');\n  }\n  CipherBase.prototype.update = function (data, inputEnc, outputEnc) {\n    var bufferData = toBuffer(data, inputEnc); // asserts correct input type\n    var outData = this._update(bufferData);\n    if (this.hashMode) {\n      return this;\n    }\n    if (outputEnc) {\n      outData = this._toString(outData, outputEnc);\n    }\n    return outData;\n  };\n  CipherBase.prototype.setAutoPadding = function () {};\n  CipherBase.prototype.getAuthTag = function () {\n    throw new Error('trying to get auth tag in unsupported state');\n  };\n  CipherBase.prototype.setAuthTag = function () {\n    throw new Error('trying to set auth tag in unsupported state');\n  };\n  CipherBase.prototype.setAAD = function () {\n    throw new Error('trying to set aad in unsupported state');\n  };\n  CipherBase.prototype._transform = function (data, _, next) {\n    var err;\n    try {\n      if (this.hashMode) {\n        this._update(data);\n      } else {\n        this.push(this._update(data));\n      }\n    } catch (e) {\n      err = e;\n    } finally {\n      next(err);\n    }\n  };\n  CipherBase.prototype._flush = function (done) {\n    var err;\n    try {\n      this.push(this.__final());\n    } catch (e) {\n      err = e;\n    }\n    done(err);\n  };\n  CipherBase.prototype._finalOrDigest = function (outputEnc) {\n    var outData = this.__final() || _$$_REQUIRE(_dependencyMap[2], \"safe-buffer\").Buffer.alloc(0);\n    if (outputEnc) {\n      outData = this._toString(outData, outputEnc, true);\n    }\n    return outData;\n  };\n  CipherBase.prototype._toString = function (value, enc, fin) {\n    if (!this._decoder) {\n      this._decoder = new (_$$_REQUIRE(_dependencyMap[3], \"string_decoder\").StringDecoder)(enc);\n      this._encoding = enc;\n    }\n    if (this._encoding !== enc) {\n      throw new Error('canâ€™t switch encodings');\n    }\n    var out = this._decoder.write(value);\n    if (fin) {\n      out += this._decoder.end();\n    }\n    return out;\n  };\n  module.exports = CipherBase;\n});","lineCount":139,"map":[[2,2,1,0],[2,14,1,12],[4,2,8,0],[4,11,8,9,"CipherBase"],[4,21,8,19,"CipherBase"],[4,22,8,20,"hashMode"],[4,30,8,28],[4,32,8,30],[5,4,9,1,"_$$_REQUIRE"],[5,15,9,1],[5,16,9,1,"_dependencyMap"],[5,30,9,1],[5,45,9,1,"Transform"],[5,54,9,1],[5,55,9,11,"call"],[5,59,9,15],[5,60,9,16],[5,64,9,20],[5,65,9,21],[6,4,10,1],[6,8,10,5],[6,9,10,6,"hashMode"],[6,17,10,14],[6,20,10,17],[6,27,10,24,"hashMode"],[6,35,10,32],[6,40,10,37],[6,48,10,45],[7,4,11,1],[7,8,11,5],[7,12,11,9],[7,13,11,10,"hashMode"],[7,21,11,18],[7,23,11,20],[8,6,12,2],[8,10,12,6],[8,11,12,7,"hashMode"],[8,19,12,15],[8,20,12,16],[8,23,12,19],[8,27,12,23],[8,28,12,24,"_finalOrDigest"],[8,42,12,38],[9,4,13,1],[9,5,13,2],[9,11,13,8],[10,6,14,2],[10,10,14,6],[10,11,14,7],[10,18,14,14],[10,19,14,15],[10,22,14,18],[10,26,14,22],[10,27,14,23,"_finalOrDigest"],[10,41,14,37],[11,4,15,1],[12,4,16,1],[12,8,16,5],[12,12,16,9],[12,13,16,10,"_final"],[12,19,16,16],[12,21,16,18],[13,6,17,2],[13,10,17,6],[13,11,17,7,"__final"],[13,18,17,14],[13,21,17,17],[13,25,17,21],[13,26,17,22,"_final"],[13,32,17,28],[14,6,18,2],[14,10,18,6],[14,11,18,7,"_final"],[14,17,18,13],[14,20,18,16],[14,24,18,20],[15,4,19,1],[16,4,20,1],[16,8,20,5],[16,9,20,6,"_decoder"],[16,17,20,14],[16,20,20,17],[16,24,20,21],[17,4,21,1],[17,8,21,5],[17,9,21,6,"_encoding"],[17,18,21,15],[17,21,21,18],[17,25,21,22],[18,2,22,0],[19,2,23,0,"_$$_REQUIRE"],[19,13,23,0],[19,14,23,0,"_dependencyMap"],[19,28,23,0],[19,45,23,9,"CipherBase"],[19,55,23,19],[19,57,23,19,"_$$_REQUIRE"],[19,68,23,19],[19,69,23,19,"_dependencyMap"],[19,83,23,19],[19,98,23,19,"Transform"],[19,107,23,30],[19,108,23,31],[20,2,25,0],[20,6,25,4,"useUint8Array"],[20,19,25,17],[20,22,25,20],[20,29,25,27,"Uint8Array"],[20,39,25,37],[20,44,25,42],[20,55,25,53],[21,2,26,0],[21,6,26,4,"useArrayBuffer"],[21,20,26,18],[21,23,26,21],[21,30,26,28,"ArrayBuffer"],[21,41,26,39],[21,46,26,44],[21,57,26,55],[21,61,27,4],[21,68,27,11,"Uint8Array"],[21,78,27,21],[21,83,27,26],[21,94,27,37],[21,98,28,4,"ArrayBuffer"],[21,109,28,15],[21,110,28,16,"isView"],[21,116,28,22],[21,121,29,5,"_$$_REQUIRE"],[21,132,29,5],[21,133,29,5,"_dependencyMap"],[21,147,29,5],[21,167,29,5,"Buffer"],[21,173,29,5],[21,174,29,12,"prototype"],[21,183,29,21],[21,195,29,33,"Uint8Array"],[21,205,29,43],[21,209,29,47,"_$$_REQUIRE"],[21,220,29,47],[21,221,29,47,"_dependencyMap"],[21,235,29,47],[21,255,29,47,"Buffer"],[21,261,29,47],[21,262,29,54,"TYPED_ARRAY_SUPPORT"],[21,281,29,73],[21,282,29,74],[22,2,31,0],[22,11,31,9,"toBuffer"],[22,19,31,17,"toBuffer"],[22,20,31,18,"data"],[22,24,31,22],[22,26,31,24,"encoding"],[22,34,31,32],[22,36,31,34],[23,4,32,1],[24,0,33,0],[25,0,34,0],[26,0,35,0],[27,4,36,1],[27,8,36,5,"data"],[27,12,36,9],[27,24,36,9,"_$$_REQUIRE"],[27,35,36,9],[27,36,36,9,"_dependencyMap"],[27,50,36,9],[27,70,36,9,"Buffer"],[27,76,36,27],[27,78,36,29],[28,6,37,2],[28,13,37,9,"data"],[28,17,37,13],[29,4,38,1],[31,4,40,1],[32,4,41,1],[32,8,41,5],[32,15,41,12,"data"],[32,19,41,16],[32,24,41,21],[32,32,41,29],[32,34,41,31],[33,6,42,2],[33,13,42,9,"_$$_REQUIRE"],[33,24,42,9],[33,25,42,9,"_dependencyMap"],[33,39,42,9],[33,59,42,9,"Buffer"],[33,65,42,9],[33,66,42,16,"from"],[33,70,42,20],[33,71,42,21,"data"],[33,75,42,25],[33,77,42,27,"encoding"],[33,85,42,35],[33,86,42,36],[34,4,43,1],[36,4,45,1],[37,0,46,0],[38,0,47,0],[39,0,48,0],[40,4,49,1],[40,8,49,5,"useArrayBuffer"],[40,22,49,19],[40,26,49,23,"ArrayBuffer"],[40,37,49,34],[40,38,49,35,"isView"],[40,44,49,41],[40,45,49,42,"data"],[40,49,49,46],[40,50,49,47],[40,52,49,49],[41,6,50,2],[42,6,51,2],[42,10,51,6,"data"],[42,14,51,10],[42,15,51,11,"byteLength"],[42,25,51,21],[42,30,51,26],[42,31,51,27],[42,33,51,29],[43,8,52,3],[43,15,52,10,"_$$_REQUIRE"],[43,26,52,10],[43,27,52,10,"_dependencyMap"],[43,41,52,10],[43,61,52,10,"Buffer"],[43,67,52,10],[43,68,52,17,"alloc"],[43,73,52,22],[43,74,52,23],[43,75,52,24],[43,76,52,25],[44,6,53,2],[45,6,55,2],[45,10,55,6,"res"],[45,13,55,9],[45,16,55,12,"_$$_REQUIRE"],[45,27,55,12],[45,28,55,12,"_dependencyMap"],[45,42,55,12],[45,62,55,12,"Buffer"],[45,68,55,12],[45,69,55,19,"from"],[45,73,55,23],[45,74,55,24,"data"],[45,78,55,28],[45,79,55,29,"buffer"],[45,85,55,35],[45,87,55,37,"data"],[45,91,55,41],[45,92,55,42,"byteOffset"],[45,102,55,52],[45,104,55,54,"data"],[45,108,55,58],[45,109,55,59,"byteLength"],[45,119,55,69],[45,120,55,70],[46,6,56,2],[47,0,57,0],[48,0,58,0],[49,0,59,0],[50,6,60,2],[50,10,60,6,"res"],[50,13,60,9],[50,14,60,10,"byteLength"],[50,24,60,20],[50,29,60,25,"data"],[50,33,60,29],[50,34,60,30,"byteLength"],[50,44,60,40],[50,46,60,42],[51,8,61,3],[51,15,61,10,"res"],[51,18,61,13],[52,6,62,2],[53,4,63,1],[55,4,65,1],[56,0,66,0],[57,0,67,0],[58,0,68,0],[59,4,69,1],[59,8,69,5,"useUint8Array"],[59,21,69,18],[59,25,69,22,"data"],[59,29,69,26],[59,41,69,38,"Uint8Array"],[59,51,69,48],[59,53,69,50],[60,6,70,2],[60,13,70,9,"_$$_REQUIRE"],[60,24,70,9],[60,25,70,9,"_dependencyMap"],[60,39,70,9],[60,59,70,9,"Buffer"],[60,65,70,9],[60,66,70,16,"from"],[60,70,70,20],[60,71,70,21,"data"],[60,75,70,25],[60,76,70,26],[61,4,71,1],[63,4,73,1],[64,0,74,0],[65,0,75,0],[66,0,76,0],[67,0,77,0],[68,4,78,1],[68,8,79,2,"_$$_REQUIRE"],[68,19,79,2],[68,20,79,2,"_dependencyMap"],[68,34,79,2],[68,54,79,2,"Buffer"],[68,60,79,2],[68,61,79,9,"isBuffer"],[68,69,79,17],[68,70,79,18,"data"],[68,74,79,22],[68,75,79,23],[68,79,80,6,"data"],[68,83,80,10],[68,84,80,11,"constructor"],[68,95,80,22],[68,99,81,6],[68,106,81,13,"data"],[68,110,81,17],[68,111,81,18,"constructor"],[68,122,81,29],[68,123,81,30,"isBuffer"],[68,131,81,38],[68,136,81,43],[68,146,81,53],[68,150,82,6,"data"],[68,154,82,10],[68,155,82,11,"constructor"],[68,166,82,22],[68,167,82,23,"isBuffer"],[68,175,82,31],[68,176,82,32,"data"],[68,180,82,36],[68,181,82,37],[68,183,83,3],[69,6,84,2],[69,13,84,9,"_$$_REQUIRE"],[69,24,84,9],[69,25,84,9,"_dependencyMap"],[69,39,84,9],[69,59,84,9,"Buffer"],[69,65,84,9],[69,66,84,16,"from"],[69,70,84,20],[69,71,84,21,"data"],[69,75,84,25],[69,76,84,26],[70,4,85,1],[71,4,87,1],[71,10,87,7],[71,14,87,11,"TypeError"],[71,23,87,20],[71,24,87,21],[71,119,87,116],[71,120,87,117],[72,2,88,0],[73,2,90,0,"CipherBase"],[73,12,90,10],[73,13,90,11,"prototype"],[73,22,90,20],[73,23,90,21,"update"],[73,29,90,27],[73,32,90,30],[73,42,90,40,"data"],[73,46,90,44],[73,48,90,46,"inputEnc"],[73,56,90,54],[73,58,90,56,"outputEnc"],[73,67,90,65],[73,69,90,67],[74,4,91,1],[74,8,91,5,"bufferData"],[74,18,91,15],[74,21,91,18,"toBuffer"],[74,29,91,26],[74,30,91,27,"data"],[74,34,91,31],[74,36,91,33,"inputEnc"],[74,44,91,41],[74,45,91,42],[74,46,91,43],[74,47,91,44],[75,4,92,1],[75,8,92,5,"outData"],[75,15,92,12],[75,18,92,15],[75,22,92,19],[75,23,92,20,"_update"],[75,30,92,27],[75,31,92,28,"bufferData"],[75,41,92,38],[75,42,92,39],[76,4,93,1],[76,8,93,5],[76,12,93,9],[76,13,93,10,"hashMode"],[76,21,93,18],[76,23,93,20],[77,6,94,2],[77,13,94,9],[77,17,94,13],[78,4,95,1],[79,4,97,1],[79,8,97,5,"outputEnc"],[79,17,97,14],[79,19,97,16],[80,6,98,2,"outData"],[80,13,98,9],[80,16,98,12],[80,20,98,16],[80,21,98,17,"_toString"],[80,30,98,26],[80,31,98,27,"outData"],[80,38,98,34],[80,40,98,36,"outputEnc"],[80,49,98,45],[80,50,98,46],[81,4,99,1],[82,4,101,1],[82,11,101,8,"outData"],[82,18,101,15],[83,2,102,0],[83,3,102,1],[84,2,104,0,"CipherBase"],[84,12,104,10],[84,13,104,11,"prototype"],[84,22,104,20],[84,23,104,21,"setAutoPadding"],[84,37,104,35],[84,40,104,38],[84,52,104,50],[84,53,104,51],[84,54,104,52],[85,2,105,0,"CipherBase"],[85,12,105,10],[85,13,105,11,"prototype"],[85,22,105,20],[85,23,105,21,"getAuthTag"],[85,33,105,31],[85,36,105,34],[85,48,105,46],[86,4,106,1],[86,10,106,7],[86,14,106,11,"Error"],[86,19,106,16],[86,20,106,17],[86,65,106,62],[86,66,106,63],[87,2,107,0],[87,3,107,1],[88,2,109,0,"CipherBase"],[88,12,109,10],[88,13,109,11,"prototype"],[88,22,109,20],[88,23,109,21,"setAuthTag"],[88,33,109,31],[88,36,109,34],[88,48,109,46],[89,4,110,1],[89,10,110,7],[89,14,110,11,"Error"],[89,19,110,16],[89,20,110,17],[89,65,110,62],[89,66,110,63],[90,2,111,0],[90,3,111,1],[91,2,113,0,"CipherBase"],[91,12,113,10],[91,13,113,11,"prototype"],[91,22,113,20],[91,23,113,21,"setAAD"],[91,29,113,27],[91,32,113,30],[91,44,113,42],[92,4,114,1],[92,10,114,7],[92,14,114,11,"Error"],[92,19,114,16],[92,20,114,17],[92,60,114,57],[92,61,114,58],[93,2,115,0],[93,3,115,1],[94,2,117,0,"CipherBase"],[94,12,117,10],[94,13,117,11,"prototype"],[94,22,117,20],[94,23,117,21,"_transform"],[94,33,117,31],[94,36,117,34],[94,46,117,44,"data"],[94,50,117,48],[94,52,117,50,"_"],[94,53,117,51],[94,55,117,53,"next"],[94,59,117,57],[94,61,117,59],[95,4,118,1],[95,8,118,5,"err"],[95,11,118,8],[96,4,119,1],[96,8,119,5],[97,6,120,2],[97,10,120,6],[97,14,120,10],[97,15,120,11,"hashMode"],[97,23,120,19],[97,25,120,21],[98,8,121,3],[98,12,121,7],[98,13,121,8,"_update"],[98,20,121,15],[98,21,121,16,"data"],[98,25,121,20],[98,26,121,21],[99,6,122,2],[99,7,122,3],[99,13,122,9],[100,8,123,3],[100,12,123,7],[100,13,123,8,"push"],[100,17,123,12],[100,18,123,13],[100,22,123,17],[100,23,123,18,"_update"],[100,30,123,25],[100,31,123,26,"data"],[100,35,123,30],[100,36,123,31],[100,37,123,32],[101,6,124,2],[102,4,125,1],[102,5,125,2],[102,6,125,3],[102,13,125,10,"e"],[102,14,125,11],[102,16,125,13],[103,6,126,2,"err"],[103,9,126,5],[103,12,126,8,"e"],[103,13,126,9],[104,4,127,1],[104,5,127,2],[104,14,127,11],[105,6,128,2,"next"],[105,10,128,6],[105,11,128,7,"err"],[105,14,128,10],[105,15,128,11],[106,4,129,1],[107,2,130,0],[107,3,130,1],[108,2,131,0,"CipherBase"],[108,12,131,10],[108,13,131,11,"prototype"],[108,22,131,20],[108,23,131,21,"_flush"],[108,29,131,27],[108,32,131,30],[108,42,131,40,"done"],[108,46,131,44],[108,48,131,46],[109,4,132,1],[109,8,132,5,"err"],[109,11,132,8],[110,4,133,1],[110,8,133,5],[111,6,134,2],[111,10,134,6],[111,11,134,7,"push"],[111,15,134,11],[111,16,134,12],[111,20,134,16],[111,21,134,17,"__final"],[111,28,134,24],[111,29,134,25],[111,30,134,26],[111,31,134,27],[112,4,135,1],[112,5,135,2],[112,6,135,3],[112,13,135,10,"e"],[112,14,135,11],[112,16,135,13],[113,6,136,2,"err"],[113,9,136,5],[113,12,136,8,"e"],[113,13,136,9],[114,4,137,1],[115,4,139,1,"done"],[115,8,139,5],[115,9,139,6,"err"],[115,12,139,9],[115,13,139,10],[116,2,140,0],[116,3,140,1],[117,2,141,0,"CipherBase"],[117,12,141,10],[117,13,141,11,"prototype"],[117,22,141,20],[117,23,141,21,"_finalOrDigest"],[117,37,141,35],[117,40,141,38],[117,50,141,48,"outputEnc"],[117,59,141,57],[117,61,141,59],[118,4,142,1],[118,8,142,5,"outData"],[118,15,142,12],[118,18,142,15],[118,22,142,19],[118,23,142,20,"__final"],[118,30,142,27],[118,31,142,28],[118,32,142,29],[118,36,142,33,"_$$_REQUIRE"],[118,47,142,33],[118,48,142,33,"_dependencyMap"],[118,62,142,33],[118,82,142,33,"Buffer"],[118,88,142,33],[118,89,142,40,"alloc"],[118,94,142,45],[118,95,142,46],[118,96,142,47],[118,97,142,48],[119,4,143,1],[119,8,143,5,"outputEnc"],[119,17,143,14],[119,19,143,16],[120,6,144,2,"outData"],[120,13,144,9],[120,16,144,12],[120,20,144,16],[120,21,144,17,"_toString"],[120,30,144,26],[120,31,144,27,"outData"],[120,38,144,34],[120,40,144,36,"outputEnc"],[120,49,144,45],[120,51,144,47],[120,55,144,51],[120,56,144,52],[121,4,145,1],[122,4,146,1],[122,11,146,8,"outData"],[122,18,146,15],[123,2,147,0],[123,3,147,1],[124,2,149,0,"CipherBase"],[124,12,149,10],[124,13,149,11,"prototype"],[124,22,149,20],[124,23,149,21,"_toString"],[124,32,149,30],[124,35,149,33],[124,45,149,43,"value"],[124,50,149,48],[124,52,149,50,"enc"],[124,55,149,53],[124,57,149,55,"fin"],[124,60,149,58],[124,62,149,60],[125,4,150,1],[125,8,150,5],[125,9,150,6],[125,13,150,10],[125,14,150,11,"_decoder"],[125,22,150,19],[125,24,150,21],[126,6,151,2],[126,10,151,6],[126,11,151,7,"_decoder"],[126,19,151,15],[126,22,151,18],[126,27,151,18,"_$$_REQUIRE"],[126,38,151,18],[126,39,151,18,"_dependencyMap"],[126,53,151,18],[126,76,151,18,"StringDecoder"],[126,89,151,18],[126,91,151,36,"enc"],[126,94,151,39],[126,95,151,40],[127,6,152,2],[127,10,152,6],[127,11,152,7,"_encoding"],[127,20,152,16],[127,23,152,19,"enc"],[127,26,152,22],[128,4,153,1],[129,4,155,1],[129,8,155,5],[129,12,155,9],[129,13,155,10,"_encoding"],[129,22,155,19],[129,27,155,24,"enc"],[129,30,155,27],[129,32,155,29],[130,6,156,2],[130,12,156,8],[130,16,156,12,"Error"],[130,21,156,17],[130,22,156,18],[130,46,156,42],[130,47,156,43],[131,4,157,1],[132,4,159,1],[132,8,159,5,"out"],[132,11,159,8],[132,14,159,11],[132,18,159,15],[132,19,159,16,"_decoder"],[132,27,159,24],[132,28,159,25,"write"],[132,33,159,30],[132,34,159,31,"value"],[132,39,159,36],[132,40,159,37],[133,4,160,1],[133,8,160,5,"fin"],[133,11,160,8],[133,13,160,10],[134,6,161,2,"out"],[134,9,161,5],[134,13,161,9],[134,17,161,13],[134,18,161,14,"_decoder"],[134,26,161,22],[134,27,161,23,"end"],[134,30,161,26],[134,31,161,27],[134,32,161,28],[135,4,162,1],[136,4,164,1],[136,11,164,8,"out"],[136,14,164,11],[137,2,165,0],[137,3,165,1],[138,2,167,0,"module"],[138,8,167,6],[138,9,167,7,"exports"],[138,16,167,14],[138,19,167,17,"CipherBase"],[138,29,167,27],[139,0,167,28],[139,3]],"functionMap":{"names":["<global>","CipherBase","toBuffer","CipherBase.prototype.update","CipherBase.prototype.setAutoPadding","CipherBase.prototype.getAuthTag","CipherBase.prototype.setAuthTag","CipherBase.prototype.setAAD","CipherBase.prototype._transform","CipherBase.prototype._flush","CipherBase.prototype._finalOrDigest","CipherBase.prototype._toString"],"mappings":"AAA;ACO;CDc;AES;CFyD;8BGE;CHY;sCIE,cJ;kCKC;CLE;kCME;CNE;8BOE;CPE;kCQE;CRa;8BSC;CTS;sCUC;CVM;iCWE;CXgB"}},"type":"js/module"}]}