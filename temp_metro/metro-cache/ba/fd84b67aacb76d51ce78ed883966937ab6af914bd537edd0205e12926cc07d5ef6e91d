{"dependencies":[{"name":"./errors","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":17,"index":862},"end":{"line":21,"column":36,"index":881}},{"start":{"line":21,"column":17,"index":862},"end":{"line":21,"column":36,"index":881}},{"start":{"line":21,"column":17,"index":862},"end":{"line":21,"column":36,"index":881}},{"start":{"line":21,"column":17,"index":862},"end":{"line":21,"column":36,"index":881}},{"start":{"line":21,"column":17,"index":862},"end":{"line":21,"column":36,"index":881}},{"start":{"line":21,"column":17,"index":862},"end":{"line":21,"column":36,"index":881}},{"start":{"line":21,"column":17,"index":862},"end":{"line":21,"column":36,"index":881}},{"start":{"line":21,"column":17,"index":862},"end":{"line":21,"column":36,"index":881}},{"start":{"line":21,"column":17,"index":862},"end":{"line":21,"column":36,"index":881}},{"start":{"line":21,"column":17,"index":862},"end":{"line":21,"column":36,"index":881}},{"start":{"line":21,"column":17,"index":862},"end":{"line":21,"column":36,"index":881}},{"start":{"line":21,"column":17,"index":862},"end":{"line":21,"column":36,"index":881}},{"start":{"line":21,"column":17,"index":862},"end":{"line":21,"column":36,"index":881}},{"start":{"line":21,"column":17,"index":862},"end":{"line":21,"column":36,"index":881}},{"start":{"line":21,"column":17,"index":862},"end":{"line":21,"column":36,"index":881}},{"start":{"line":21,"column":17,"index":862},"end":{"line":21,"column":36,"index":881}}],"key":"GlkDztMSsNRYmp31iO+V/Albin8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  ////////////////////////////////////////////////////////////////////////////\n  //\n  // Copyright 2022 Realm Inc.\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  // http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n  //\n  ////////////////////////////////////////////////////////////////////////////\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.assert = void 0;\n  /**\n   * Expects the condition to be truthy\n   * @throws an {@link Error} If the condition is not truthy. Throws either the {@link err} given as param if it's an {@link Error},\n   * an {@link AssertionError} wrapping {@link err} if it's a string or undefined, or uses the result of invoking {@link err} if it's a function.\n   * @param condition The condition that must be truthy to avoid throwing.\n   * @param err Optional message or error to throw.\n   * Or a function producing this, which is useful to avoid computing the error message in case it's not needed.\n   * @internal\n   */\n  function assert(condition, err) {\n    if (!condition) {\n      // Call any function to generate the error lazily\n      err = typeof err === \"function\" ? err() : err;\n      if (err instanceof Error) {\n        throw err;\n      } else if (typeof err === \"string\" || typeof err === \"undefined\") {\n        throw new (_$$_REQUIRE(_dependencyMap[0], \"./errors\").AssertionError)(err);\n      } else {\n        throw new Error(\"Expected err to be an Err, string, undefined or a function returning either.\");\n      }\n    }\n  }\n  exports.assert = assert;\n  /* eslint-disable-next-line @typescript-eslint/ban-types */\n  assert.instanceOf = function (value, constructor, target) {\n    assert(value instanceof constructor, function () {\n      return new (_$$_REQUIRE(_dependencyMap[0], \"./errors\").TypeAssertionError)(`an instance of ${constructor.name}`, value, target);\n    });\n  };\n  assert.string = function (value, target) {\n    assert(typeof value === \"string\", function () {\n      return new (_$$_REQUIRE(_dependencyMap[0], \"./errors\").TypeAssertionError)(\"a string\", value, target);\n    });\n  };\n  assert.number = function (value, target) {\n    assert(typeof value === \"number\", function () {\n      return new (_$$_REQUIRE(_dependencyMap[0], \"./errors\").TypeAssertionError)(\"a number\", value, target);\n    });\n  };\n  assert.integer = function (value, target) {\n    assert(Number.isInteger(value), function () {\n      return new (_$$_REQUIRE(_dependencyMap[0], \"./errors\").TypeAssertionError)(\"an integer\", value, target);\n    });\n  };\n  assert.numericString = function (value, target) {\n    assert.string(value);\n    assert(/^-?\\d+$/.test(value), function () {\n      return new (_$$_REQUIRE(_dependencyMap[0], \"./errors\").TypeAssertionError)(\"a numeric string\", value, target);\n    });\n  };\n  assert.boolean = function (value, target) {\n    assert(typeof value === \"boolean\", function () {\n      return new (_$$_REQUIRE(_dependencyMap[0], \"./errors\").TypeAssertionError)(\"a boolean\", value, target);\n    });\n  };\n  /* eslint-disable-next-line @typescript-eslint/ban-types */\n  assert.function = function (value, target) {\n    assert(typeof value === \"function\", function () {\n      return new (_$$_REQUIRE(_dependencyMap[0], \"./errors\").TypeAssertionError)(\"a function\", value, target);\n    });\n  };\n  assert.symbol = function (value, target) {\n    assert(typeof value === \"symbol\", function () {\n      return new (_$$_REQUIRE(_dependencyMap[0], \"./errors\").TypeAssertionError)(\"a symbol\", value, target);\n    });\n  };\n  assert.object = function (value, target) {\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        allowArrays: true\n      },\n      allowArrays = _ref.allowArrays;\n    assert(typeof value === \"object\" && value !== null && (allowArrays || !Array.isArray(value)), function () {\n      return new (_$$_REQUIRE(_dependencyMap[0], \"./errors\").TypeAssertionError)(\"an object\", value, target);\n    });\n  };\n  assert.undefined = function (value, target) {\n    assert(typeof value === \"undefined\", function () {\n      return new (_$$_REQUIRE(_dependencyMap[0], \"./errors\").TypeAssertionError)(\"undefined\", value, target);\n    });\n  };\n  assert.null = function (value, target) {\n    assert(value === null, function () {\n      return new (_$$_REQUIRE(_dependencyMap[0], \"./errors\").TypeAssertionError)(\"null\", value, target);\n    });\n  };\n  assert.array = function (value, target) {\n    assert(Array.isArray(value), function () {\n      return new (_$$_REQUIRE(_dependencyMap[0], \"./errors\").TypeAssertionError)(\"an array\", value, target);\n    });\n  };\n  /* eslint-disable-next-line @typescript-eslint/ban-types */\n  assert.extends = function (value, constructor, target) {\n    assert.function(value, target);\n    assert(value.prototype instanceof constructor, function () {\n      return new (_$$_REQUIRE(_dependencyMap[0], \"./errors\").TypeAssertionError)(`a class extending ${constructor.name}`, value, target);\n    });\n  };\n  assert.iterable = function (value, target) {\n    assert.object(value, target);\n    assert(Symbol.iterator in value, function () {\n      return new (_$$_REQUIRE(_dependencyMap[0], \"./errors\").TypeAssertionError)(\"iterable\", value, target);\n    });\n  };\n  // * Use arg type `value: never` rather than `value: unknown` to get a compile time\n  //   error when e.g. not including if-checks for all enum values.\n  // * Use return type `never` rather than `asserts value is never` to remove the\n  //   need for callers to explicitly throw (i.e. `throw assert.never()`) as a way\n  //   for TS to detect unreachable code.\n  assert.never = function (value, target) {\n    throw new (_$$_REQUIRE(_dependencyMap[0], \"./errors\").TypeAssertionError)(\"never\", value, target);\n  };\n  // SDK specific\n  assert.open = function (realm) {\n    assert(!realm.isClosed, \"Cannot access realm that has been closed.\");\n  };\n  assert.inTransaction = function (realm) {\n    var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Cannot modify managed objects outside of a write transaction.\";\n    assert.open(realm);\n    assert(realm.isInTransaction, message);\n  };\n  assert.outTransaction = function (realm) {\n    var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Expected realm to be outside of a write transaction\";\n    assert.open(realm);\n    assert(!realm.isInTransaction, message);\n  };\n  assert.isValid = function (obj) {\n    var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Accessing object which has been invalidated or deleted\";\n    assert(obj.isValid, message);\n  };\n  assert.isSameRealm = function (realm1, realm2) {\n    var message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"Expected the Realms to be the same\";\n    assert(realm1.$addr == realm2.$addr, message);\n  };\n});","lineCount":158,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,2,3,0],[6,2,4,0],[7,2,5,0],[8,2,6,0],[9,2,7,0],[10,2,8,0],[11,2,9,0],[12,2,10,0],[13,2,11,0],[14,2,12,0],[15,2,13,0],[16,2,14,0],[17,2,15,0],[18,2,16,0],[19,2,17,0],[20,2,18,0],[21,2,19,0,"Object"],[21,8,19,6],[21,9,19,7,"defineProperty"],[21,23,19,21],[21,24,19,22,"exports"],[21,31,19,29],[21,33,19,31],[21,45,19,43],[21,47,19,45],[22,4,19,47,"value"],[22,9,19,52],[22,11,19,54],[23,2,19,59],[23,3,19,60],[23,4,19,61],[24,2,20,0,"exports"],[24,9,20,7],[24,10,20,8,"assert"],[24,16,20,14],[24,19,20,17],[24,24,20,22],[24,25,20,23],[25,2,22,0],[26,0,23,0],[27,0,24,0],[28,0,25,0],[29,0,26,0],[30,0,27,0],[31,0,28,0],[32,0,29,0],[33,0,30,0],[34,2,31,0],[34,11,31,9,"assert"],[34,17,31,15,"assert"],[34,18,31,16,"condition"],[34,27,31,25],[34,29,31,27,"err"],[34,32,31,30],[34,34,31,32],[35,4,32,4],[35,8,32,8],[35,9,32,9,"condition"],[35,18,32,18],[35,20,32,20],[36,6,33,8],[37,6,34,8,"err"],[37,9,34,11],[37,12,34,14],[37,19,34,21,"err"],[37,22,34,24],[37,27,34,29],[37,37,34,39],[37,40,34,42,"err"],[37,43,34,45],[37,44,34,46],[37,45,34,47],[37,48,34,50,"err"],[37,51,34,53],[38,6,35,8],[38,10,35,12,"err"],[38,13,35,15],[38,25,35,27,"Error"],[38,30,35,32],[38,32,35,34],[39,8,36,12],[39,14,36,18,"err"],[39,17,36,21],[40,6,37,8],[40,7,37,9],[40,13,38,13],[40,17,38,17],[40,24,38,24,"err"],[40,27,38,27],[40,32,38,32],[40,40,38,40],[40,44,38,44],[40,51,38,51,"err"],[40,54,38,54],[40,59,38,59],[40,70,38,70],[40,72,38,72],[41,8,39,12],[41,14,39,18],[41,19,39,22,"_$$_REQUIRE"],[41,30,39,22],[41,31,39,22,"_dependencyMap"],[41,45,39,22],[41,62,39,31,"AssertionError"],[41,76,39,45],[41,78,39,46,"err"],[41,81,39,49],[41,82,39,50],[42,6,40,8],[42,7,40,9],[42,13,41,13],[43,8,42,12],[43,14,42,18],[43,18,42,22,"Error"],[43,23,42,27],[43,24,42,28],[43,102,42,106],[43,103,42,107],[44,6,43,8],[45,4,44,4],[46,2,45,0],[47,2,46,0,"exports"],[47,9,46,7],[47,10,46,8,"assert"],[47,16,46,14],[47,19,46,17,"assert"],[47,25,46,23],[48,2,47,0],[49,2,48,0,"assert"],[49,8,48,6],[49,9,48,7,"instanceOf"],[49,19,48,17],[49,22,48,20],[49,32,48,21,"value"],[49,37,48,26],[49,39,48,28,"constructor"],[49,50,48,39],[49,52,48,41,"target"],[49,58,48,47],[49,60,48,52],[50,4,49,4,"assert"],[50,10,49,10],[50,11,49,11,"value"],[50,16,49,16],[50,28,49,28,"constructor"],[50,39,49,39],[50,41,49,41],[51,6,49,41],[51,13,49,47],[51,18,49,51,"_$$_REQUIRE"],[51,29,49,51],[51,30,49,51,"_dependencyMap"],[51,44,49,51],[51,61,49,60,"TypeAssertionError"],[51,79,49,78],[51,81,49,79],[51,99,49,97,"constructor"],[51,110,49,108],[51,111,49,109,"name"],[51,115,49,113],[51,117,49,115],[51,119,49,117,"value"],[51,124,49,122],[51,126,49,124,"target"],[51,132,49,130],[51,133,49,131],[52,4,49,131],[52,6,49,132],[53,2,50,0],[53,3,50,1],[54,2,51,0,"assert"],[54,8,51,6],[54,9,51,7,"string"],[54,15,51,13],[54,18,51,16],[54,28,51,17,"value"],[54,33,51,22],[54,35,51,24,"target"],[54,41,51,30],[54,43,51,35],[55,4,52,4,"assert"],[55,10,52,10],[55,11,52,11],[55,18,52,18,"value"],[55,23,52,23],[55,28,52,28],[55,36,52,36],[55,38,52,38],[56,6,52,38],[56,13,52,44],[56,18,52,48,"_$$_REQUIRE"],[56,29,52,48],[56,30,52,48,"_dependencyMap"],[56,44,52,48],[56,61,52,57,"TypeAssertionError"],[56,79,52,75],[56,81,52,76],[56,91,52,86],[56,93,52,88,"value"],[56,98,52,93],[56,100,52,95,"target"],[56,106,52,101],[56,107,52,102],[57,4,52,102],[57,6,52,103],[58,2,53,0],[58,3,53,1],[59,2,54,0,"assert"],[59,8,54,6],[59,9,54,7,"number"],[59,15,54,13],[59,18,54,16],[59,28,54,17,"value"],[59,33,54,22],[59,35,54,24,"target"],[59,41,54,30],[59,43,54,35],[60,4,55,4,"assert"],[60,10,55,10],[60,11,55,11],[60,18,55,18,"value"],[60,23,55,23],[60,28,55,28],[60,36,55,36],[60,38,55,38],[61,6,55,38],[61,13,55,44],[61,18,55,48,"_$$_REQUIRE"],[61,29,55,48],[61,30,55,48,"_dependencyMap"],[61,44,55,48],[61,61,55,57,"TypeAssertionError"],[61,79,55,75],[61,81,55,76],[61,91,55,86],[61,93,55,88,"value"],[61,98,55,93],[61,100,55,95,"target"],[61,106,55,101],[61,107,55,102],[62,4,55,102],[62,6,55,103],[63,2,56,0],[63,3,56,1],[64,2,57,0,"assert"],[64,8,57,6],[64,9,57,7,"integer"],[64,16,57,14],[64,19,57,17],[64,29,57,18,"value"],[64,34,57,23],[64,36,57,25,"target"],[64,42,57,31],[64,44,57,36],[65,4,58,4,"assert"],[65,10,58,10],[65,11,58,11,"Number"],[65,17,58,17],[65,18,58,18,"isInteger"],[65,27,58,27],[65,28,58,28,"value"],[65,33,58,33],[65,34,58,34],[65,36,58,36],[66,6,58,36],[66,13,58,42],[66,18,58,46,"_$$_REQUIRE"],[66,29,58,46],[66,30,58,46,"_dependencyMap"],[66,44,58,46],[66,61,58,55,"TypeAssertionError"],[66,79,58,73],[66,81,58,74],[66,93,58,86],[66,95,58,88,"value"],[66,100,58,93],[66,102,58,95,"target"],[66,108,58,101],[66,109,58,102],[67,4,58,102],[67,6,58,103],[68,2,59,0],[68,3,59,1],[69,2,60,0,"assert"],[69,8,60,6],[69,9,60,7,"numericString"],[69,22,60,20],[69,25,60,23],[69,35,60,24,"value"],[69,40,60,29],[69,42,60,31,"target"],[69,48,60,37],[69,50,60,42],[70,4,61,4,"assert"],[70,10,61,10],[70,11,61,11,"string"],[70,17,61,17],[70,18,61,18,"value"],[70,23,61,23],[70,24,61,24],[71,4,62,4,"assert"],[71,10,62,10],[71,11,62,11],[71,20,62,20],[71,21,62,21,"test"],[71,25,62,25],[71,26,62,26,"value"],[71,31,62,31],[71,32,62,32],[71,34,62,34],[72,6,62,34],[72,13,62,40],[72,18,62,44,"_$$_REQUIRE"],[72,29,62,44],[72,30,62,44,"_dependencyMap"],[72,44,62,44],[72,61,62,53,"TypeAssertionError"],[72,79,62,71],[72,81,62,72],[72,99,62,90],[72,101,62,92,"value"],[72,106,62,97],[72,108,62,99,"target"],[72,114,62,105],[72,115,62,106],[73,4,62,106],[73,6,62,107],[74,2,63,0],[74,3,63,1],[75,2,64,0,"assert"],[75,8,64,6],[75,9,64,7,"boolean"],[75,16,64,14],[75,19,64,17],[75,29,64,18,"value"],[75,34,64,23],[75,36,64,25,"target"],[75,42,64,31],[75,44,64,36],[76,4,65,4,"assert"],[76,10,65,10],[76,11,65,11],[76,18,65,18,"value"],[76,23,65,23],[76,28,65,28],[76,37,65,37],[76,39,65,39],[77,6,65,39],[77,13,65,45],[77,18,65,49,"_$$_REQUIRE"],[77,29,65,49],[77,30,65,49,"_dependencyMap"],[77,44,65,49],[77,61,65,58,"TypeAssertionError"],[77,79,65,76],[77,81,65,77],[77,92,65,88],[77,94,65,90,"value"],[77,99,65,95],[77,101,65,97,"target"],[77,107,65,103],[77,108,65,104],[78,4,65,104],[78,6,65,105],[79,2,66,0],[79,3,66,1],[80,2,67,0],[81,2,68,0,"assert"],[81,8,68,6],[81,9,68,7,"function"],[81,17,68,15],[81,20,68,18],[81,30,68,19,"value"],[81,35,68,24],[81,37,68,26,"target"],[81,43,68,32],[81,45,68,37],[82,4,69,4,"assert"],[82,10,69,10],[82,11,69,11],[82,18,69,18,"value"],[82,23,69,23],[82,28,69,28],[82,38,69,38],[82,40,69,40],[83,6,69,40],[83,13,69,46],[83,18,69,50,"_$$_REQUIRE"],[83,29,69,50],[83,30,69,50,"_dependencyMap"],[83,44,69,50],[83,61,69,59,"TypeAssertionError"],[83,79,69,77],[83,81,69,78],[83,93,69,90],[83,95,69,92,"value"],[83,100,69,97],[83,102,69,99,"target"],[83,108,69,105],[83,109,69,106],[84,4,69,106],[84,6,69,107],[85,2,70,0],[85,3,70,1],[86,2,71,0,"assert"],[86,8,71,6],[86,9,71,7,"symbol"],[86,15,71,13],[86,18,71,16],[86,28,71,17,"value"],[86,33,71,22],[86,35,71,24,"target"],[86,41,71,30],[86,43,71,35],[87,4,72,4,"assert"],[87,10,72,10],[87,11,72,11],[87,18,72,18,"value"],[87,23,72,23],[87,28,72,28],[87,36,72,36],[87,38,72,38],[88,6,72,38],[88,13,72,44],[88,18,72,48,"_$$_REQUIRE"],[88,29,72,48],[88,30,72,48,"_dependencyMap"],[88,44,72,48],[88,61,72,57,"TypeAssertionError"],[88,79,72,75],[88,81,72,76],[88,91,72,86],[88,93,72,88,"value"],[88,98,72,93],[88,100,72,95,"target"],[88,106,72,101],[88,107,72,102],[89,4,72,102],[89,6,72,103],[90,2,73,0],[90,3,73,1],[91,2,74,0,"assert"],[91,8,74,6],[91,9,74,7,"object"],[91,15,74,13],[91,18,74,16],[91,28,74,17,"value"],[91,33,74,22],[91,35,74,24,"target"],[91,41,74,30],[91,43,74,76],[92,4,74,76],[92,8,74,76,"_ref"],[92,12,74,76],[92,15,74,76,"arguments"],[92,24,74,76],[92,25,74,76,"length"],[92,31,74,76],[92,39,74,76,"arguments"],[92,48,74,76],[92,56,74,76,"undefined"],[92,65,74,76],[92,68,74,76,"arguments"],[92,77,74,76],[92,83,74,50],[93,8,74,52,"allowArrays"],[93,19,74,63],[93,21,74,65],[94,6,74,70],[94,7,74,71],[95,6,74,34,"allowArrays"],[95,17,74,45],[95,20,74,45,"_ref"],[95,24,74,45],[95,25,74,34,"allowArrays"],[95,36,74,45],[96,4,75,4,"assert"],[96,10,75,10],[96,11,75,11],[96,18,75,18,"value"],[96,23,75,23],[96,28,75,28],[96,36,75,36],[96,40,75,40,"value"],[96,45,75,45],[96,50,75,50],[96,54,75,54],[96,59,75,59,"allowArrays"],[96,70,75,70],[96,74,75,74],[96,75,75,75,"Array"],[96,80,75,80],[96,81,75,81,"isArray"],[96,88,75,88],[96,89,75,89,"value"],[96,94,75,94],[96,95,75,95],[96,96,75,96],[96,98,75,98],[97,6,75,98],[97,13,75,104],[97,18,75,108,"_$$_REQUIRE"],[97,29,75,108],[97,30,75,108,"_dependencyMap"],[97,44,75,108],[97,61,75,117,"TypeAssertionError"],[97,79,75,135],[97,81,75,136],[97,92,75,147],[97,94,75,149,"value"],[97,99,75,154],[97,101,75,156,"target"],[97,107,75,162],[97,108,75,163],[98,4,75,163],[98,6,75,164],[99,2,76,0],[99,3,76,1],[100,2,77,0,"assert"],[100,8,77,6],[100,9,77,7,"undefined"],[100,18,77,16],[100,21,77,19],[100,31,77,20,"value"],[100,36,77,25],[100,38,77,27,"target"],[100,44,77,33],[100,46,77,38],[101,4,78,4,"assert"],[101,10,78,10],[101,11,78,11],[101,18,78,18,"value"],[101,23,78,23],[101,28,78,28],[101,39,78,39],[101,41,78,41],[102,6,78,41],[102,13,78,47],[102,18,78,51,"_$$_REQUIRE"],[102,29,78,51],[102,30,78,51,"_dependencyMap"],[102,44,78,51],[102,61,78,60,"TypeAssertionError"],[102,79,78,78],[102,81,78,79],[102,92,78,90],[102,94,78,92,"value"],[102,99,78,97],[102,101,78,99,"target"],[102,107,78,105],[102,108,78,106],[103,4,78,106],[103,6,78,107],[104,2,79,0],[104,3,79,1],[105,2,80,0,"assert"],[105,8,80,6],[105,9,80,7,"null"],[105,13,80,11],[105,16,80,14],[105,26,80,15,"value"],[105,31,80,20],[105,33,80,22,"target"],[105,39,80,28],[105,41,80,33],[106,4,81,4,"assert"],[106,10,81,10],[106,11,81,11,"value"],[106,16,81,16],[106,21,81,21],[106,25,81,25],[106,27,81,27],[107,6,81,27],[107,13,81,33],[107,18,81,37,"_$$_REQUIRE"],[107,29,81,37],[107,30,81,37,"_dependencyMap"],[107,44,81,37],[107,61,81,46,"TypeAssertionError"],[107,79,81,64],[107,81,81,65],[107,87,81,71],[107,89,81,73,"value"],[107,94,81,78],[107,96,81,80,"target"],[107,102,81,86],[107,103,81,87],[108,4,81,87],[108,6,81,88],[109,2,82,0],[109,3,82,1],[110,2,83,0,"assert"],[110,8,83,6],[110,9,83,7,"array"],[110,14,83,12],[110,17,83,15],[110,27,83,16,"value"],[110,32,83,21],[110,34,83,23,"target"],[110,40,83,29],[110,42,83,34],[111,4,84,4,"assert"],[111,10,84,10],[111,11,84,11,"Array"],[111,16,84,16],[111,17,84,17,"isArray"],[111,24,84,24],[111,25,84,25,"value"],[111,30,84,30],[111,31,84,31],[111,33,84,33],[112,6,84,33],[112,13,84,39],[112,18,84,43,"_$$_REQUIRE"],[112,29,84,43],[112,30,84,43,"_dependencyMap"],[112,44,84,43],[112,61,84,52,"TypeAssertionError"],[112,79,84,70],[112,81,84,71],[112,91,84,81],[112,93,84,83,"value"],[112,98,84,88],[112,100,84,90,"target"],[112,106,84,96],[112,107,84,97],[113,4,84,97],[113,6,84,98],[114,2,85,0],[114,3,85,1],[115,2,86,0],[116,2,87,0,"assert"],[116,8,87,6],[116,9,87,7,"extends"],[116,16,87,14],[116,19,87,17],[116,29,87,18,"value"],[116,34,87,23],[116,36,87,25,"constructor"],[116,47,87,36],[116,49,87,38,"target"],[116,55,87,44],[116,57,87,49],[117,4,88,4,"assert"],[117,10,88,10],[117,11,88,11,"function"],[117,19,88,19],[117,20,88,20,"value"],[117,25,88,25],[117,27,88,27,"target"],[117,33,88,33],[117,34,88,34],[118,4,89,4,"assert"],[118,10,89,10],[118,11,89,11,"value"],[118,16,89,16],[118,17,89,17,"prototype"],[118,26,89,26],[118,38,89,38,"constructor"],[118,49,89,49],[118,51,89,51],[119,6,89,51],[119,13,89,57],[119,18,89,61,"_$$_REQUIRE"],[119,29,89,61],[119,30,89,61,"_dependencyMap"],[119,44,89,61],[119,61,89,70,"TypeAssertionError"],[119,79,89,88],[119,81,89,89],[119,102,89,110,"constructor"],[119,113,89,121],[119,114,89,122,"name"],[119,118,89,126],[119,120,89,128],[119,122,89,130,"value"],[119,127,89,135],[119,129,89,137,"target"],[119,135,89,143],[119,136,89,144],[120,4,89,144],[120,6,89,145],[121,2,90,0],[121,3,90,1],[122,2,91,0,"assert"],[122,8,91,6],[122,9,91,7,"iterable"],[122,17,91,15],[122,20,91,18],[122,30,91,19,"value"],[122,35,91,24],[122,37,91,26,"target"],[122,43,91,32],[122,45,91,37],[123,4,92,4,"assert"],[123,10,92,10],[123,11,92,11,"object"],[123,17,92,17],[123,18,92,18,"value"],[123,23,92,23],[123,25,92,25,"target"],[123,31,92,31],[123,32,92,32],[124,4,93,4,"assert"],[124,10,93,10],[124,11,93,11,"Symbol"],[124,17,93,17],[124,18,93,18,"iterator"],[124,26,93,26],[124,30,93,30,"value"],[124,35,93,35],[124,37,93,37],[125,6,93,37],[125,13,93,43],[125,18,93,47,"_$$_REQUIRE"],[125,29,93,47],[125,30,93,47,"_dependencyMap"],[125,44,93,47],[125,61,93,56,"TypeAssertionError"],[125,79,93,74],[125,81,93,75],[125,91,93,85],[125,93,93,87,"value"],[125,98,93,92],[125,100,93,94,"target"],[125,106,93,100],[125,107,93,101],[126,4,93,101],[126,6,93,102],[127,2,94,0],[127,3,94,1],[128,2,95,0],[129,2,96,0],[130,2,97,0],[131,2,98,0],[132,2,99,0],[133,2,100,0,"assert"],[133,8,100,6],[133,9,100,7,"never"],[133,14,100,12],[133,17,100,15],[133,27,100,16,"value"],[133,32,100,21],[133,34,100,23,"target"],[133,40,100,29],[133,42,100,34],[134,4,101,4],[134,10,101,10],[134,15,101,14,"_$$_REQUIRE"],[134,26,101,14],[134,27,101,14,"_dependencyMap"],[134,41,101,14],[134,58,101,23,"TypeAssertionError"],[134,76,101,41],[134,78,101,42],[134,85,101,49],[134,87,101,51,"value"],[134,92,101,56],[134,94,101,58,"target"],[134,100,101,64],[134,101,101,65],[135,2,102,0],[135,3,102,1],[136,2,103,0],[137,2,104,0,"assert"],[137,8,104,6],[137,9,104,7,"open"],[137,13,104,11],[137,16,104,14],[137,26,104,15,"realm"],[137,31,104,20],[137,33,104,25],[138,4,105,4,"assert"],[138,10,105,10],[138,11,105,11],[138,12,105,12,"realm"],[138,17,105,17],[138,18,105,18,"isClosed"],[138,26,105,26],[138,28,105,28],[138,71,105,71],[138,72,105,72],[139,2,106,0],[139,3,106,1],[140,2,107,0,"assert"],[140,8,107,6],[140,9,107,7,"inTransaction"],[140,22,107,20],[140,25,107,23],[140,35,107,24,"realm"],[140,40,107,29],[140,42,107,109],[141,4,107,109],[141,8,107,31,"message"],[141,15,107,38],[141,18,107,38,"arguments"],[141,27,107,38],[141,28,107,38,"length"],[141,34,107,38],[141,42,107,38,"arguments"],[141,51,107,38],[141,59,107,38,"undefined"],[141,68,107,38],[141,71,107,38,"arguments"],[141,80,107,38],[141,86,107,41],[141,149,107,104],[142,4,108,4,"assert"],[142,10,108,10],[142,11,108,11,"open"],[142,15,108,15],[142,16,108,16,"realm"],[142,21,108,21],[142,22,108,22],[143,4,109,4,"assert"],[143,10,109,10],[143,11,109,11,"realm"],[143,16,109,16],[143,17,109,17,"isInTransaction"],[143,32,109,32],[143,34,109,34,"message"],[143,41,109,41],[143,42,109,42],[144,2,110,0],[144,3,110,1],[145,2,111,0,"assert"],[145,8,111,6],[145,9,111,7,"outTransaction"],[145,23,111,21],[145,26,111,24],[145,36,111,25,"realm"],[145,41,111,30],[145,43,111,100],[146,4,111,100],[146,8,111,32,"message"],[146,15,111,39],[146,18,111,39,"arguments"],[146,27,111,39],[146,28,111,39,"length"],[146,34,111,39],[146,42,111,39,"arguments"],[146,51,111,39],[146,59,111,39,"undefined"],[146,68,111,39],[146,71,111,39,"arguments"],[146,80,111,39],[146,86,111,42],[146,139,111,95],[147,4,112,4,"assert"],[147,10,112,10],[147,11,112,11,"open"],[147,15,112,15],[147,16,112,16,"realm"],[147,21,112,21],[147,22,112,22],[148,4,113,4,"assert"],[148,10,113,10],[148,11,113,11],[148,12,113,12,"realm"],[148,17,113,17],[148,18,113,18,"isInTransaction"],[148,33,113,33],[148,35,113,35,"message"],[148,42,113,42],[148,43,113,43],[149,2,114,0],[149,3,114,1],[150,2,115,0,"assert"],[150,8,115,6],[150,9,115,7,"isValid"],[150,16,115,14],[150,19,115,17],[150,29,115,18,"obj"],[150,32,115,21],[150,34,115,94],[151,4,115,94],[151,8,115,23,"message"],[151,15,115,30],[151,18,115,30,"arguments"],[151,27,115,30],[151,28,115,30,"length"],[151,34,115,30],[151,42,115,30,"arguments"],[151,51,115,30],[151,59,115,30,"undefined"],[151,68,115,30],[151,71,115,30,"arguments"],[151,80,115,30],[151,86,115,33],[151,142,115,89],[152,4,116,4,"assert"],[152,10,116,10],[152,11,116,11,"obj"],[152,14,116,14],[152,15,116,15,"isValid"],[152,22,116,22],[152,24,116,24,"message"],[152,31,116,31],[152,32,116,32],[153,2,117,0],[153,3,117,1],[154,2,118,0,"assert"],[154,8,118,6],[154,9,118,7,"isSameRealm"],[154,20,118,18],[154,23,118,21],[154,33,118,22,"realm1"],[154,39,118,28],[154,41,118,30,"realm2"],[154,47,118,36],[154,49,118,89],[155,4,118,89],[155,8,118,38,"message"],[155,15,118,45],[155,18,118,45,"arguments"],[155,27,118,45],[155,28,118,45,"length"],[155,34,118,45],[155,42,118,45,"arguments"],[155,51,118,45],[155,59,118,45,"undefined"],[155,68,118,45],[155,71,118,45,"arguments"],[155,80,118,45],[155,86,118,48],[155,122,118,84],[156,4,119,4,"assert"],[156,10,119,10],[156,11,119,11,"realm1"],[156,17,119,17],[156,18,119,18,"$addr"],[156,23,119,23],[156,27,119,27,"realm2"],[156,33,119,33],[156,34,119,34,"$addr"],[156,39,119,39],[156,41,119,41,"message"],[156,48,119,48],[156,49,119,49],[157,2,120,0],[157,3,120,1],[158,0,120,2],[158,3]],"functionMap":{"names":["<global>","assert","instanceOf","assert$argument_1","string","number","integer","numericString","boolean","_function","symbol","object","undefined","_null","array","_extends","iterable","never","open","inTransaction","outTransaction","isValid","isSameRealm"],"mappings":"AAA;AC8B;CDc;oBEG;yCCC,0FD;CFC;gBIC;sCDC,gEC;CJC;gBKC;sCFC,gEE;CLC;iBMC;oCHC,kEG;CNC;uBOC;kCJE,wEI;CPC;iBQC;uCLC,iEK;CRC;kBSE;wCNC,kEM;CTC;gBUC;sCPC,gEO;CVC;gBWC;kGRC,iEQ;CXC;mBYC;yCTC,iES;CZC;caC;2BVC,4DU;CbC;ecC;iCXC,gEW;CdC;iBeE;mDZE,6FY;CfC;kBgBC;qCbE,gEa;ChBC;eiBM;CjBE;ckBE;ClBE;uBmBC;CnBG;wBoBC;CpBG;iBqBC;CrBE;qBsBC;CtBE"}},"type":"js/module"}]}