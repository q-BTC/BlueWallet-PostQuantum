{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":209,"column":0,"index":5728}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":209,"column":0,"index":5728}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"events","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":21,"index":301},"end":{"line":12,"column":51,"index":331}}],"key":"JsYPPZbiyTKGtgYi4nFi37XasmQ="}},{"name":"./util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":13,"index":346},"end":{"line":13,"column":30,"index":363}},{"start":{"line":13,"column":13,"index":346},"end":{"line":13,"column":30,"index":363}},{"start":{"line":13,"column":13,"index":346},"end":{"line":13,"column":30,"index":363}},{"start":{"line":13,"column":13,"index":346},"end":{"line":13,"column":30,"index":363}},{"start":{"line":13,"column":13,"index":346},"end":{"line":13,"column":30,"index":363}},{"start":{"line":13,"column":13,"index":346},"end":{"line":13,"column":30,"index":363}}],"key":"hA8WsniBZrUJ/dmBZgrNdZcEmJ8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  /**\n   * NET & TLS dependencies should be injected via constructor\n   * for RN you can use react-native-tcp-socket\n   *\n   * for nodejs it should be regular node's net & tls:\n   *     const net = require('net');\n   *     const tls = require('tls');\n   * */\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var TIMEOUT = 5000;\n  var Client = /*#__PURE__*/function () {\n    function Client(net, tls, port, host, protocol, options) {\n      var _this = this;\n      _classCallCheck(this, Client);\n      this.net = net;\n      this.tls = tls;\n      this.id = 0;\n      this.port = port;\n      this.host = host;\n      this.callback_message_queue = {};\n      this.subscribe = new (_$$_REQUIRE(_dependencyMap[2], \"events\").EventEmitter)();\n      this.mp = new (_$$_REQUIRE(_dependencyMap[3], \"./util\").MessageParser)(function (body, n) {\n        _this.onMessage(body, n);\n      });\n      this._protocol = protocol; // saving defaults\n      this._options = options;\n      this.initSocket(protocol, options);\n    }\n    return _createClass(Client, [{\n      key: \"initSocket\",\n      value: function initSocket(protocol, options) {\n        var _this2 = this;\n        protocol = protocol || this._protocol;\n        options = options || this._options;\n        switch (protocol) {\n          case 'tcp':\n            this.conn = new this.net.Socket();\n            break;\n          case 'tls':\n          case 'ssl':\n            if (!this.tls) {\n              throw new Error('tls package could not be loaded');\n            }\n            this.connUnsecure = new this.net.Socket();\n            this.conn = new this.tls.TLSSocket(this.connUnsecure, {\n              rejectUnauthorized: false\n            });\n            break;\n          default:\n            throw new Error('unknown protocol');\n        }\n        this.conn.setTimeout(TIMEOUT);\n        this.conn.setEncoding('utf8');\n        this.conn.setKeepAlive(true, 0);\n        this.conn.setNoDelay(true);\n        this.conn.on('connect', function () {\n          _this2.conn.setTimeout(0);\n          _this2.onConnect();\n        });\n        this.conn.on('close', function (e) {\n          _this2.onClose(e);\n        });\n        this.conn.on('data', function (chunk) {\n          _this2.conn.setTimeout(0);\n          _this2.onRecv(chunk);\n        });\n        this.conn.on('error', function (e) {\n          _this2.onError(e);\n        });\n        this.status = 0;\n      }\n    }, {\n      key: \"connect\",\n      value: function connect() {\n        if (this.status === 1) {\n          return Promise.resolve();\n        }\n        this.status = 1;\n        return this.connectSocket(this.connUnsecure || this.conn, this.port, this.host);\n      }\n    }, {\n      key: \"connectSocket\",\n      value: function connectSocket(conn, port, host) {\n        port = +port;\n        return new Promise(function (resolve, reject) {\n          var errorHandler = function errorHandler(e) {\n            return reject(e);\n          };\n          conn.connect({\n            port: port,\n            host: host\n          }, function () {\n            conn.removeListener('error', errorHandler);\n            resolve();\n          });\n          conn.on('error', errorHandler);\n        });\n      }\n    }, {\n      key: \"close\",\n      value: function close() {\n        if (this.status === 0) {\n          return;\n        }\n        this.conn.end();\n        this.conn.destroy();\n        this.status = 0;\n      }\n    }, {\n      key: \"request\",\n      value: function request(method, params) {\n        var _this3 = this;\n        if (this.status === 0) {\n          return Promise.reject(new Error('Connection to server lost, please retry'));\n        }\n        return new Promise(function (resolve, reject) {\n          var id = ++_this3.id;\n          var content = _$$_REQUIRE(_dependencyMap[3], \"./util\").makeRequest(method, params, id);\n          _this3.callback_message_queue[id] = _$$_REQUIRE(_dependencyMap[3], \"./util\").createPromiseResult(resolve, reject);\n          _this3.conn.write(content + '\\n');\n        });\n      }\n    }, {\n      key: \"requestBatch\",\n      value: function requestBatch(method, params, secondParam) {\n        var _this4 = this;\n        if (this.status === 0) {\n          return Promise.reject(new Error('Connection to server lost, please retry'));\n        }\n        return new Promise(function (resolve, reject) {\n          var arguments_far_calls = {};\n          var contents = [];\n          for (var param of params) {\n            var id = ++_this4.id;\n            if (secondParam !== undefined) {\n              contents.push(_$$_REQUIRE(_dependencyMap[3], \"./util\").makeRequest(method, [param, secondParam], id));\n            } else {\n              contents.push(_$$_REQUIRE(_dependencyMap[3], \"./util\").makeRequest(method, [param], id));\n            }\n            arguments_far_calls[id] = param;\n          }\n          var content = '[' + contents.join(',') + ']';\n          _this4.callback_message_queue[_this4.id] = _$$_REQUIRE(_dependencyMap[3], \"./util\").createPromiseResultBatch(resolve, reject, arguments_far_calls);\n          // callback will exist only for max id\n          _this4.conn.write(content + '\\n');\n        });\n      }\n    }, {\n      key: \"response\",\n      value: function response(msg) {\n        var _this5 = this;\n        var callback;\n        if (!msg.id && msg[0] && msg[0].id) {\n          // this is a response from batch request\n          for (var m of msg) {\n            if (m.id && this.callback_message_queue[m.id]) {\n              callback = this.callback_message_queue[m.id];\n              delete this.callback_message_queue[m.id];\n            }\n          }\n        } else {\n          callback = this.callback_message_queue[msg.id];\n        }\n        if (callback) {\n          delete this.callback_message_queue[msg.id];\n          if (msg.error) {\n            callback(msg.error);\n          } else {\n            callback(null, msg.result || msg);\n          }\n        } else {\n          console.log(\"Electrum: can't get callback. Msg = \" + JSON.stringify(msg));\n          if (JSON.stringify(msg).includes(\"Batch limit exceeded\")) {\n            // since we dont know which batch failed (id is not provided), we cancel all requests.\n            // this is better than hanging indefinitely\n            Object.keys(this.callback_message_queue).forEach(function (key) {\n              _this5.callback_message_queue[key](new Error('Batch limit exceeded'));\n              delete _this5.callback_message_queue[key];\n            });\n          }\n        }\n      }\n    }, {\n      key: \"onMessage\",\n      value: function onMessage(body, n) {\n        try {\n          var msg = JSON.parse(body);\n          if (msg instanceof Array) {\n            this.response(msg);\n          } else {\n            if (msg.id !== void 0) {\n              this.response(msg);\n            } else {\n              this.subscribe.emit(msg.method, msg.params);\n            }\n          }\n        } catch (error) {\n          this.conn.end();\n          this.conn.destroy();\n          this.onClose(error);\n        }\n      }\n    }, {\n      key: \"onConnect\",\n      value: function onConnect() {}\n    }, {\n      key: \"onClose\",\n      value: function onClose(e) {\n        var _this6 = this;\n        this.status = 0;\n        Object.keys(this.callback_message_queue).forEach(function (key) {\n          _this6.callback_message_queue[key](new Error('close connect'));\n          delete _this6.callback_message_queue[key];\n        });\n      }\n    }, {\n      key: \"onRecv\",\n      value: function onRecv(chunk) {\n        this.mp.run(chunk);\n      }\n    }, {\n      key: \"onError\",\n      value: function onError(e) {\n        console.log('OnError:' + e);\n      }\n    }]);\n  }();\n  module.exports = Client;\n});","lineCount":233,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,0,5,0],[8,0,6,0],[9,0,7,0],[10,0,8,0],[11,0,9,0],[12,2,2,0],[12,6,2,0,"_classCallCheck"],[12,21,2,0],[12,24,2,0,"_$$_REQUIRE"],[12,35,2,0],[12,36,2,0,"_dependencyMap"],[12,50,2,0],[13,2,2,0],[13,6,2,0,"_createClass"],[13,18,2,0],[13,21,2,0,"_$$_REQUIRE"],[13,32,2,0],[13,33,2,0,"_dependencyMap"],[13,47,2,0],[14,2,10,0],[14,6,10,6,"TIMEOUT"],[14,13,10,13],[14,16,10,16],[14,20,10,20],[15,2,10,21],[15,6,15,6,"Client"],[15,12,15,12],[16,4,16,2],[16,13,16,2,"Client"],[16,20,16,14,"net"],[16,23,16,17],[16,25,16,19,"tls"],[16,28,16,22],[16,30,16,24,"port"],[16,34,16,28],[16,36,16,30,"host"],[16,40,16,34],[16,42,16,36,"protocol"],[16,50,16,44],[16,52,16,46,"options"],[16,59,16,53],[16,61,16,55],[17,6,16,55],[17,10,16,55,"_this"],[17,15,16,55],[18,6,16,55,"_classCallCheck"],[18,21,16,55],[18,28,16,55,"Client"],[18,34,16,55],[19,6,17,4],[19,10,17,8],[19,11,17,9,"net"],[19,14,17,12],[19,17,17,15,"net"],[19,20,17,18],[20,6,18,4],[20,10,18,8],[20,11,18,9,"tls"],[20,14,18,12],[20,17,18,15,"tls"],[20,20,18,18],[21,6,19,4],[21,10,19,8],[21,11,19,9,"id"],[21,13,19,11],[21,16,19,14],[21,17,19,15],[22,6,20,4],[22,10,20,8],[22,11,20,9,"port"],[22,15,20,13],[22,18,20,16,"port"],[22,22,20,20],[23,6,21,4],[23,10,21,8],[23,11,21,9,"host"],[23,15,21,13],[23,18,21,16,"host"],[23,22,21,20],[24,6,22,4],[24,10,22,8],[24,11,22,9,"callback_message_queue"],[24,33,22,31],[24,36,22,34],[24,37,22,35],[24,38,22,36],[25,6,23,4],[25,10,23,8],[25,11,23,9,"subscribe"],[25,20,23,18],[25,23,23,21],[25,28,23,21,"_$$_REQUIRE"],[25,39,23,21],[25,40,23,21,"_dependencyMap"],[25,54,23,21],[25,69,23,21,"EventEmitter"],[25,81,23,21],[25,83,23,38],[25,84,23,39],[26,6,24,4],[26,10,24,8],[26,11,24,9,"mp"],[26,13,24,11],[26,16,24,14],[26,21,24,18,"_$$_REQUIRE"],[26,32,24,18],[26,33,24,18,"_dependencyMap"],[26,47,24,18],[26,62,24,23,"MessageParser"],[26,75,24,36],[26,77,24,37],[26,87,24,38,"body"],[26,91,24,42],[26,93,24,44,"n"],[26,94,24,45],[26,96,24,50],[27,8,25,6,"_this"],[27,13,25,10],[27,14,25,11,"onMessage"],[27,23,25,20],[27,24,25,21,"body"],[27,28,25,25],[27,30,25,27,"n"],[27,31,25,28],[27,32,25,29],[28,6,26,4],[28,7,26,5],[28,8,26,6],[29,6,27,4],[29,10,27,8],[29,11,27,9,"_protocol"],[29,20,27,18],[29,23,27,21,"protocol"],[29,31,27,29],[29,32,27,30],[29,33,27,31],[30,6,28,4],[30,10,28,8],[30,11,28,9,"_options"],[30,19,28,17],[30,22,28,20,"options"],[30,29,28,27],[31,6,29,4],[31,10,29,8],[31,11,29,9,"initSocket"],[31,21,29,19],[31,22,29,20,"protocol"],[31,30,29,28],[31,32,29,30,"options"],[31,39,29,37],[31,40,29,38],[32,4,30,2],[33,4,30,3],[33,11,30,3,"_createClass"],[33,23,30,3],[33,24,30,3,"Client"],[33,30,30,3],[34,6,30,3,"key"],[34,9,30,3],[35,6,30,3,"value"],[35,11,30,3],[35,13,32,2],[35,22,32,2,"initSocket"],[35,32,32,12,"initSocket"],[35,33,32,13,"protocol"],[35,41,32,21],[35,43,32,23,"options"],[35,50,32,30],[35,52,32,32],[36,8,32,32],[36,12,32,32,"_this2"],[36,18,32,32],[37,8,33,4,"protocol"],[37,16,33,12],[37,19,33,15,"protocol"],[37,27,33,23],[37,31,33,27],[37,35,33,31],[37,36,33,32,"_protocol"],[37,45,33,41],[38,8,34,4,"options"],[38,15,34,11],[38,18,34,14,"options"],[38,25,34,21],[38,29,34,25],[38,33,34,29],[38,34,34,30,"_options"],[38,42,34,38],[39,8,35,4],[39,16,35,12,"protocol"],[39,24,35,20],[40,10,36,6],[40,15,36,11],[40,20,36,16],[41,12,37,8],[41,16,37,12],[41,17,37,13,"conn"],[41,21,37,17],[41,24,37,20],[41,28,37,24],[41,32,37,28],[41,33,37,29,"net"],[41,36,37,32],[41,37,37,33,"Socket"],[41,43,37,39],[41,44,37,40],[41,45,37,41],[42,12,38,8],[43,10,39,6],[43,15,39,11],[43,20,39,16],[44,10,40,6],[44,15,40,11],[44,20,40,16],[45,12,41,8],[45,16,41,12],[45,17,41,13],[45,21,41,17],[45,22,41,18,"tls"],[45,25,41,21],[45,27,41,23],[46,14,42,10],[46,20,42,16],[46,24,42,20,"Error"],[46,29,42,25],[46,30,42,26],[46,63,42,59],[46,64,42,60],[47,12,43,8],[48,12,44,8],[48,16,44,12],[48,17,44,13,"connUnsecure"],[48,29,44,25],[48,32,44,28],[48,36,44,32],[48,40,44,36],[48,41,44,37,"net"],[48,44,44,40],[48,45,44,41,"Socket"],[48,51,44,47],[48,52,44,48],[48,53,44,49],[49,12,45,8],[49,16,45,12],[49,17,45,13,"conn"],[49,21,45,17],[49,24,45,20],[49,28,45,24],[49,32,45,28],[49,33,45,29,"tls"],[49,36,45,32],[49,37,45,33,"TLSSocket"],[49,46,45,42],[49,47,45,43],[49,51,45,47],[49,52,45,48,"connUnsecure"],[49,64,45,60],[49,66,45,62],[50,14,45,64,"rejectUnauthorized"],[50,32,45,82],[50,34,45,84],[51,12,45,90],[51,13,45,91],[51,14,45,92],[52,12,46,8],[53,10,47,6],[54,12,48,8],[54,18,48,14],[54,22,48,18,"Error"],[54,27,48,23],[54,28,48,24],[54,46,48,42],[54,47,48,43],[55,8,49,4],[56,8,51,4],[56,12,51,8],[56,13,51,9,"conn"],[56,17,51,13],[56,18,51,14,"setTimeout"],[56,28,51,24],[56,29,51,25,"TIMEOUT"],[56,36,51,32],[56,37,51,33],[57,8,52,4],[57,12,52,8],[57,13,52,9,"conn"],[57,17,52,13],[57,18,52,14,"setEncoding"],[57,29,52,25],[57,30,52,26],[57,36,52,32],[57,37,52,33],[58,8,53,4],[58,12,53,8],[58,13,53,9,"conn"],[58,17,53,13],[58,18,53,14,"setKeepAlive"],[58,30,53,26],[58,31,53,27],[58,35,53,31],[58,37,53,33],[58,38,53,34],[58,39,53,35],[59,8,54,4],[59,12,54,8],[59,13,54,9,"conn"],[59,17,54,13],[59,18,54,14,"setNoDelay"],[59,28,54,24],[59,29,54,25],[59,33,54,29],[59,34,54,30],[60,8,55,4],[60,12,55,8],[60,13,55,9,"conn"],[60,17,55,13],[60,18,55,14,"on"],[60,20,55,16],[60,21,55,17],[60,30,55,26],[60,32,55,28],[60,44,55,34],[61,10,56,6,"_this2"],[61,16,56,10],[61,17,56,11,"conn"],[61,21,56,15],[61,22,56,16,"setTimeout"],[61,32,56,26],[61,33,56,27],[61,34,56,28],[61,35,56,29],[62,10,57,6,"_this2"],[62,16,57,10],[62,17,57,11,"onConnect"],[62,26,57,20],[62,27,57,21],[62,28,57,22],[63,8,58,4],[63,9,58,5],[63,10,58,6],[64,8,59,4],[64,12,59,8],[64,13,59,9,"conn"],[64,17,59,13],[64,18,59,14,"on"],[64,20,59,16],[64,21,59,17],[64,28,59,24],[64,30,59,26],[64,40,59,26,"e"],[64,41,59,27],[64,43,59,31],[65,10,60,6,"_this2"],[65,16,60,10],[65,17,60,11,"onClose"],[65,24,60,18],[65,25,60,19,"e"],[65,26,60,20],[65,27,60,21],[66,8,61,4],[66,9,61,5],[66,10,61,6],[67,8,62,4],[67,12,62,8],[67,13,62,9,"conn"],[67,17,62,13],[67,18,62,14,"on"],[67,20,62,16],[67,21,62,17],[67,27,62,23],[67,29,62,25],[67,39,62,25,"chunk"],[67,44,62,30],[67,46,62,34],[68,10,63,6,"_this2"],[68,16,63,10],[68,17,63,11,"conn"],[68,21,63,15],[68,22,63,16,"setTimeout"],[68,32,63,26],[68,33,63,27],[68,34,63,28],[68,35,63,29],[69,10,64,6,"_this2"],[69,16,64,10],[69,17,64,11,"onRecv"],[69,23,64,17],[69,24,64,18,"chunk"],[69,29,64,23],[69,30,64,24],[70,8,65,4],[70,9,65,5],[70,10,65,6],[71,8,66,4],[71,12,66,8],[71,13,66,9,"conn"],[71,17,66,13],[71,18,66,14,"on"],[71,20,66,16],[71,21,66,17],[71,28,66,24],[71,30,66,26],[71,40,66,26,"e"],[71,41,66,27],[71,43,66,31],[72,10,67,6,"_this2"],[72,16,67,10],[72,17,67,11,"onError"],[72,24,67,18],[72,25,67,19,"e"],[72,26,67,20],[72,27,67,21],[73,8,68,4],[73,9,68,5],[73,10,68,6],[74,8,69,4],[74,12,69,8],[74,13,69,9,"status"],[74,19,69,15],[74,22,69,18],[74,23,69,19],[75,6,70,2],[76,4,70,3],[77,6,70,3,"key"],[77,9,70,3],[78,6,70,3,"value"],[78,11,70,3],[78,13,72,2],[78,22,72,2,"connect"],[78,29,72,9,"connect"],[78,30,72,9],[78,32,72,12],[79,8,73,4],[79,12,73,8],[79,16,73,12],[79,17,73,13,"status"],[79,23,73,19],[79,28,73,24],[79,29,73,25],[79,31,73,27],[80,10,74,6],[80,17,74,13,"Promise"],[80,24,74,20],[80,25,74,21,"resolve"],[80,32,74,28],[80,33,74,29],[80,34,74,30],[81,8,75,4],[82,8,76,4],[82,12,76,8],[82,13,76,9,"status"],[82,19,76,15],[82,22,76,18],[82,23,76,19],[83,8,77,4],[83,15,77,11],[83,19,77,15],[83,20,77,16,"connectSocket"],[83,33,77,29],[83,34,77,30],[83,38,77,34],[83,39,77,35,"connUnsecure"],[83,51,77,47],[83,55,77,51],[83,59,77,55],[83,60,77,56,"conn"],[83,64,77,60],[83,66,77,62],[83,70,77,66],[83,71,77,67,"port"],[83,75,77,71],[83,77,77,73],[83,81,77,77],[83,82,77,78,"host"],[83,86,77,82],[83,87,77,83],[84,6,78,2],[85,4,78,3],[86,6,78,3,"key"],[86,9,78,3],[87,6,78,3,"value"],[87,11,78,3],[87,13,80,2],[87,22,80,2,"connectSocket"],[87,35,80,15,"connectSocket"],[87,36,80,16,"conn"],[87,40,80,20],[87,42,80,22,"port"],[87,46,80,26],[87,48,80,28,"host"],[87,52,80,32],[87,54,80,34],[88,8,81,4,"port"],[88,12,81,8],[88,15,81,11],[88,16,81,12,"port"],[88,20,81,16],[89,8,82,4],[89,15,82,11],[89,19,82,15,"Promise"],[89,26,82,22],[89,27,82,23],[89,37,82,24,"resolve"],[89,44,82,31],[89,46,82,33,"reject"],[89,52,82,39],[89,54,82,44],[90,10,83,6],[90,14,83,12,"errorHandler"],[90,26,83,24],[90,29,83,27],[90,38,83,12,"errorHandler"],[90,50,83,24,"errorHandler"],[90,51,83,27,"e"],[90,52,83,28],[91,12,83,28],[91,19,83,32,"reject"],[91,25,83,38],[91,26,83,39,"e"],[91,27,83,40],[91,28,83,41],[92,10,83,41],[93,10,84,6,"conn"],[93,14,84,10],[93,15,84,11,"connect"],[93,22,84,18],[93,23,84,19],[94,12,84,20,"port"],[94,16,84,24],[94,18,84,20,"port"],[94,22,84,24],[95,12,84,26,"host"],[95,16,84,30],[95,18,84,26,"host"],[96,10,84,30],[96,11,84,31],[96,13,84,33],[96,25,84,39],[97,12,85,8,"conn"],[97,16,85,12],[97,17,85,13,"removeListener"],[97,31,85,27],[97,32,85,28],[97,39,85,35],[97,41,85,37,"errorHandler"],[97,53,85,49],[97,54,85,50],[98,12,86,8,"resolve"],[98,19,86,15],[98,20,86,16],[98,21,86,17],[99,10,87,6],[99,11,87,7],[99,12,87,8],[100,10,88,6,"conn"],[100,14,88,10],[100,15,88,11,"on"],[100,17,88,13],[100,18,88,14],[100,25,88,21],[100,27,88,23,"errorHandler"],[100,39,88,35],[100,40,88,36],[101,8,89,4],[101,9,89,5],[101,10,89,6],[102,6,90,2],[103,4,90,3],[104,6,90,3,"key"],[104,9,90,3],[105,6,90,3,"value"],[105,11,90,3],[105,13,92,2],[105,22,92,2,"close"],[105,27,92,7,"close"],[105,28,92,7],[105,30,92,10],[106,8,93,4],[106,12,93,8],[106,16,93,12],[106,17,93,13,"status"],[106,23,93,19],[106,28,93,24],[106,29,93,25],[106,31,93,27],[107,10,94,6],[108,8,95,4],[109,8,96,4],[109,12,96,8],[109,13,96,9,"conn"],[109,17,96,13],[109,18,96,14,"end"],[109,21,96,17],[109,22,96,18],[109,23,96,19],[110,8,97,4],[110,12,97,8],[110,13,97,9,"conn"],[110,17,97,13],[110,18,97,14,"destroy"],[110,25,97,21],[110,26,97,22],[110,27,97,23],[111,8,98,4],[111,12,98,8],[111,13,98,9,"status"],[111,19,98,15],[111,22,98,18],[111,23,98,19],[112,6,99,2],[113,4,99,3],[114,6,99,3,"key"],[114,9,99,3],[115,6,99,3,"value"],[115,11,99,3],[115,13,101,2],[115,22,101,2,"request"],[115,29,101,9,"request"],[115,30,101,10,"method"],[115,36,101,16],[115,38,101,18,"params"],[115,44,101,24],[115,46,101,26],[116,8,101,26],[116,12,101,26,"_this3"],[116,18,101,26],[117,8,102,4],[117,12,102,8],[117,16,102,12],[117,17,102,13,"status"],[117,23,102,19],[117,28,102,24],[117,29,102,25],[117,31,102,27],[118,10,103,6],[118,17,103,13,"Promise"],[118,24,103,20],[118,25,103,21,"reject"],[118,31,103,27],[118,32,103,28],[118,36,103,32,"Error"],[118,41,103,37],[118,42,103,38],[118,83,103,79],[118,84,103,80],[118,85,103,81],[119,8,104,4],[120,8,105,4],[120,15,105,11],[120,19,105,15,"Promise"],[120,26,105,22],[120,27,105,23],[120,37,105,24,"resolve"],[120,44,105,31],[120,46,105,33,"reject"],[120,52,105,39],[120,54,105,44],[121,10,106,6],[121,14,106,12,"id"],[121,16,106,14],[121,19,106,17],[121,21,106,19,"_this3"],[121,27,106,23],[121,28,106,24,"id"],[121,30,106,26],[122,10,107,6],[122,14,107,12,"content"],[122,21,107,19],[122,24,107,22,"_$$_REQUIRE"],[122,35,107,22],[122,36,107,22,"_dependencyMap"],[122,50,107,22],[122,65,107,27,"makeRequest"],[122,76,107,38],[122,77,107,39,"method"],[122,83,107,45],[122,85,107,47,"params"],[122,91,107,53],[122,93,107,55,"id"],[122,95,107,57],[122,96,107,58],[123,10,108,6,"_this3"],[123,16,108,10],[123,17,108,11,"callback_message_queue"],[123,39,108,33],[123,40,108,34,"id"],[123,42,108,36],[123,43,108,37],[123,46,108,40,"_$$_REQUIRE"],[123,57,108,40],[123,58,108,40,"_dependencyMap"],[123,72,108,40],[123,87,108,45,"createPromiseResult"],[123,106,108,64],[123,107,108,65,"resolve"],[123,114,108,72],[123,116,108,74,"reject"],[123,122,108,80],[123,123,108,81],[124,10,109,6,"_this3"],[124,16,109,10],[124,17,109,11,"conn"],[124,21,109,15],[124,22,109,16,"write"],[124,27,109,21],[124,28,109,22,"content"],[124,35,109,29],[124,38,109,32],[124,42,109,36],[124,43,109,37],[125,8,110,4],[125,9,110,5],[125,10,110,6],[126,6,111,2],[127,4,111,3],[128,6,111,3,"key"],[128,9,111,3],[129,6,111,3,"value"],[129,11,111,3],[129,13,113,2],[129,22,113,2,"requestBatch"],[129,34,113,14,"requestBatch"],[129,35,113,15,"method"],[129,41,113,21],[129,43,113,23,"params"],[129,49,113,29],[129,51,113,31,"secondParam"],[129,62,113,42],[129,64,113,44],[130,8,113,44],[130,12,113,44,"_this4"],[130,18,113,44],[131,8,114,4],[131,12,114,8],[131,16,114,12],[131,17,114,13,"status"],[131,23,114,19],[131,28,114,24],[131,29,114,25],[131,31,114,27],[132,10,115,6],[132,17,115,13,"Promise"],[132,24,115,20],[132,25,115,21,"reject"],[132,31,115,27],[132,32,115,28],[132,36,115,32,"Error"],[132,41,115,37],[132,42,115,38],[132,83,115,79],[132,84,115,80],[132,85,115,81],[133,8,116,4],[134,8,117,4],[134,15,117,11],[134,19,117,15,"Promise"],[134,26,117,22],[134,27,117,23],[134,37,117,24,"resolve"],[134,44,117,31],[134,46,117,33,"reject"],[134,52,117,39],[134,54,117,44],[135,10,118,6],[135,14,118,10,"arguments_far_calls"],[135,33,118,29],[135,36,118,32],[135,37,118,33],[135,38,118,34],[136,10,119,6],[136,14,119,10,"contents"],[136,22,119,18],[136,25,119,21],[136,27,119,23],[137,10,120,6],[137,15,120,11],[137,19,120,15,"param"],[137,24,120,20],[137,28,120,24,"params"],[137,34,120,30],[137,36,120,32],[138,12,121,8],[138,16,121,14,"id"],[138,18,121,16],[138,21,121,19],[138,23,121,21,"_this4"],[138,29,121,25],[138,30,121,26,"id"],[138,32,121,28],[139,12,122,8],[139,16,122,12,"secondParam"],[139,27,122,23],[139,32,122,28,"undefined"],[139,41,122,37],[139,43,122,39],[140,14,123,10,"contents"],[140,22,123,18],[140,23,123,19,"push"],[140,27,123,23],[140,28,123,24,"_$$_REQUIRE"],[140,39,123,24],[140,40,123,24,"_dependencyMap"],[140,54,123,24],[140,69,123,29,"makeRequest"],[140,80,123,40],[140,81,123,41,"method"],[140,87,123,47],[140,89,123,49],[140,90,123,50,"param"],[140,95,123,55],[140,97,123,57,"secondParam"],[140,108,123,68],[140,109,123,69],[140,111,123,71,"id"],[140,113,123,73],[140,114,123,74],[140,115,123,75],[141,12,124,8],[141,13,124,9],[141,19,124,15],[142,14,125,10,"contents"],[142,22,125,18],[142,23,125,19,"push"],[142,27,125,23],[142,28,125,24,"_$$_REQUIRE"],[142,39,125,24],[142,40,125,24,"_dependencyMap"],[142,54,125,24],[142,69,125,29,"makeRequest"],[142,80,125,40],[142,81,125,41,"method"],[142,87,125,47],[142,89,125,49],[142,90,125,50,"param"],[142,95,125,55],[142,96,125,56],[142,98,125,58,"id"],[142,100,125,60],[142,101,125,61],[142,102,125,62],[143,12,126,8],[144,12,127,8,"arguments_far_calls"],[144,31,127,27],[144,32,127,28,"id"],[144,34,127,30],[144,35,127,31],[144,38,127,34,"param"],[144,43,127,39],[145,10,128,6],[146,10,129,6],[146,14,129,12,"content"],[146,21,129,19],[146,24,129,22],[146,27,129,25],[146,30,129,28,"contents"],[146,38,129,36],[146,39,129,37,"join"],[146,43,129,41],[146,44,129,42],[146,47,129,45],[146,48,129,46],[146,51,129,49],[146,54,129,52],[147,10,130,6,"_this4"],[147,16,130,10],[147,17,130,11,"callback_message_queue"],[147,39,130,33],[147,40,130,34,"_this4"],[147,46,130,38],[147,47,130,39,"id"],[147,49,130,41],[147,50,130,42],[147,53,130,45,"_$$_REQUIRE"],[147,64,130,45],[147,65,130,45,"_dependencyMap"],[147,79,130,45],[147,94,130,50,"createPromiseResultBatch"],[147,118,130,74],[147,119,130,75,"resolve"],[147,126,130,82],[147,128,130,84,"reject"],[147,134,130,90],[147,136,130,92,"arguments_far_calls"],[147,155,130,111],[147,156,130,112],[148,10,131,6],[149,10,132,6,"_this4"],[149,16,132,10],[149,17,132,11,"conn"],[149,21,132,15],[149,22,132,16,"write"],[149,27,132,21],[149,28,132,22,"content"],[149,35,132,29],[149,38,132,32],[149,42,132,36],[149,43,132,37],[150,8,133,4],[150,9,133,5],[150,10,133,6],[151,6,134,2],[152,4,134,3],[153,6,134,3,"key"],[153,9,134,3],[154,6,134,3,"value"],[154,11,134,3],[154,13,136,2],[154,22,136,2,"response"],[154,30,136,10,"response"],[154,31,136,11,"msg"],[154,34,136,14],[154,36,136,16],[155,8,136,16],[155,12,136,16,"_this5"],[155,18,136,16],[156,8,137,4],[156,12,137,8,"callback"],[156,20,137,16],[157,8,138,4],[157,12,138,8],[157,13,138,9,"msg"],[157,16,138,12],[157,17,138,13,"id"],[157,19,138,15],[157,23,138,19,"msg"],[157,26,138,22],[157,27,138,23],[157,28,138,24],[157,29,138,25],[157,33,138,29,"msg"],[157,36,138,32],[157,37,138,33],[157,38,138,34],[157,39,138,35],[157,40,138,36,"id"],[157,42,138,38],[157,44,138,40],[158,10,139,6],[159,10,140,6],[159,15,140,11],[159,19,140,15,"m"],[159,20,140,16],[159,24,140,20,"msg"],[159,27,140,23],[159,29,140,25],[160,12,141,8],[160,16,141,12,"m"],[160,17,141,13],[160,18,141,14,"id"],[160,20,141,16],[160,24,141,20],[160,28,141,24],[160,29,141,25,"callback_message_queue"],[160,51,141,47],[160,52,141,48,"m"],[160,53,141,49],[160,54,141,50,"id"],[160,56,141,52],[160,57,141,53],[160,59,141,55],[161,14,142,10,"callback"],[161,22,142,18],[161,25,142,21],[161,29,142,25],[161,30,142,26,"callback_message_queue"],[161,52,142,48],[161,53,142,49,"m"],[161,54,142,50],[161,55,142,51,"id"],[161,57,142,53],[161,58,142,54],[162,14,143,10],[162,21,143,17],[162,25,143,21],[162,26,143,22,"callback_message_queue"],[162,48,143,44],[162,49,143,45,"m"],[162,50,143,46],[162,51,143,47,"id"],[162,53,143,49],[162,54,143,50],[163,12,144,8],[164,10,145,6],[165,8,146,4],[165,9,146,5],[165,15,146,11],[166,10,147,6,"callback"],[166,18,147,14],[166,21,147,17],[166,25,147,21],[166,26,147,22,"callback_message_queue"],[166,48,147,44],[166,49,147,45,"msg"],[166,52,147,48],[166,53,147,49,"id"],[166,55,147,51],[166,56,147,52],[167,8,148,4],[168,8,150,4],[168,12,150,8,"callback"],[168,20,150,16],[168,22,150,18],[169,10,151,6],[169,17,151,13],[169,21,151,17],[169,22,151,18,"callback_message_queue"],[169,44,151,40],[169,45,151,41,"msg"],[169,48,151,44],[169,49,151,45,"id"],[169,51,151,47],[169,52,151,48],[170,10,152,6],[170,14,152,10,"msg"],[170,17,152,13],[170,18,152,14,"error"],[170,23,152,19],[170,25,152,21],[171,12,153,8,"callback"],[171,20,153,16],[171,21,153,17,"msg"],[171,24,153,20],[171,25,153,21,"error"],[171,30,153,26],[171,31,153,27],[172,10,154,6],[172,11,154,7],[172,17,154,13],[173,12,155,8,"callback"],[173,20,155,16],[173,21,155,17],[173,25,155,21],[173,27,155,23,"msg"],[173,30,155,26],[173,31,155,27,"result"],[173,37,155,33],[173,41,155,37,"msg"],[173,44,155,40],[173,45,155,41],[174,10,156,6],[175,8,157,4],[175,9,157,5],[175,15,157,11],[176,10,158,6,"console"],[176,17,158,13],[176,18,158,14,"log"],[176,21,158,17],[176,22,158,18],[176,60,158,56],[176,63,158,59,"JSON"],[176,67,158,63],[176,68,158,64,"stringify"],[176,77,158,73],[176,78,158,74,"msg"],[176,81,158,77],[176,82,158,78],[176,83,158,79],[177,10,159,6],[177,14,159,10,"JSON"],[177,18,159,14],[177,19,159,15,"stringify"],[177,28,159,24],[177,29,159,25,"msg"],[177,32,159,28],[177,33,159,29],[177,34,159,30,"includes"],[177,42,159,38],[177,43,159,39],[177,65,159,61],[177,66,159,62],[177,68,159,64],[178,12,160,8],[179,12,161,8],[180,12,162,8,"Object"],[180,18,162,14],[180,19,162,15,"keys"],[180,23,162,19],[180,24,162,20],[180,28,162,24],[180,29,162,25,"callback_message_queue"],[180,51,162,47],[180,52,162,48],[180,53,162,49,"forEach"],[180,60,162,56],[180,61,162,57],[180,71,162,57,"key"],[180,74,162,60],[180,76,162,64],[181,14,163,10,"_this5"],[181,20,163,14],[181,21,163,15,"callback_message_queue"],[181,43,163,37],[181,44,163,38,"key"],[181,47,163,41],[181,48,163,42],[181,49,163,43],[181,53,163,47,"Error"],[181,58,163,52],[181,59,163,53],[181,81,163,75],[181,82,163,76],[181,83,163,77],[182,14,164,10],[182,21,164,17,"_this5"],[182,27,164,21],[182,28,164,22,"callback_message_queue"],[182,50,164,44],[182,51,164,45,"key"],[182,54,164,48],[182,55,164,49],[183,12,165,8],[183,13,165,9],[183,14,165,10],[184,10,166,6],[185,8,167,4],[186,6,168,2],[187,4,168,3],[188,6,168,3,"key"],[188,9,168,3],[189,6,168,3,"value"],[189,11,168,3],[189,13,170,2],[189,22,170,2,"onMessage"],[189,31,170,11,"onMessage"],[189,32,170,12,"body"],[189,36,170,16],[189,38,170,18,"n"],[189,39,170,19],[189,41,170,21],[190,8,171,4],[190,12,171,8],[191,10,172,6],[191,14,172,12,"msg"],[191,17,172,15],[191,20,172,18,"JSON"],[191,24,172,22],[191,25,172,23,"parse"],[191,30,172,28],[191,31,172,29,"body"],[191,35,172,33],[191,36,172,34],[192,10,173,6],[192,14,173,10,"msg"],[192,17,173,13],[192,29,173,25,"Array"],[192,34,173,30],[192,36,173,32],[193,12,174,8],[193,16,174,12],[193,17,174,13,"response"],[193,25,174,21],[193,26,174,22,"msg"],[193,29,174,25],[193,30,174,26],[194,10,175,6],[194,11,175,7],[194,17,175,13],[195,12,176,8],[195,16,176,12,"msg"],[195,19,176,15],[195,20,176,16,"id"],[195,22,176,18],[195,27,176,23],[195,32,176,28],[195,33,176,29],[195,35,176,31],[196,14,177,10],[196,18,177,14],[196,19,177,15,"response"],[196,27,177,23],[196,28,177,24,"msg"],[196,31,177,27],[196,32,177,28],[197,12,178,8],[197,13,178,9],[197,19,178,15],[198,14,179,10],[198,18,179,14],[198,19,179,15,"subscribe"],[198,28,179,24],[198,29,179,25,"emit"],[198,33,179,29],[198,34,179,30,"msg"],[198,37,179,33],[198,38,179,34,"method"],[198,44,179,40],[198,46,179,42,"msg"],[198,49,179,45],[198,50,179,46,"params"],[198,56,179,52],[198,57,179,53],[199,12,180,8],[200,10,181,6],[201,8,182,4],[201,9,182,5],[201,10,182,6],[201,17,182,13,"error"],[201,22,182,18],[201,24,182,20],[202,10,183,6],[202,14,183,10],[202,15,183,11,"conn"],[202,19,183,15],[202,20,183,16,"end"],[202,23,183,19],[202,24,183,20],[202,25,183,21],[203,10,184,6],[203,14,184,10],[203,15,184,11,"conn"],[203,19,184,15],[203,20,184,16,"destroy"],[203,27,184,23],[203,28,184,24],[203,29,184,25],[204,10,185,6],[204,14,185,10],[204,15,185,11,"onClose"],[204,22,185,18],[204,23,185,19,"error"],[204,28,185,24],[204,29,185,25],[205,8,186,4],[206,6,187,2],[207,4,187,3],[208,6,187,3,"key"],[208,9,187,3],[209,6,187,3,"value"],[209,11,187,3],[209,13,189,2],[209,22,189,2,"onConnect"],[209,31,189,11,"onConnect"],[209,32,189,11],[209,34,189,14],[209,35,189,15],[210,4,189,16],[211,6,189,16,"key"],[211,9,189,16],[212,6,189,16,"value"],[212,11,189,16],[212,13,191,2],[212,22,191,2,"onClose"],[212,29,191,9,"onClose"],[212,30,191,10,"e"],[212,31,191,11],[212,33,191,13],[213,8,191,13],[213,12,191,13,"_this6"],[213,18,191,13],[214,8,192,4],[214,12,192,8],[214,13,192,9,"status"],[214,19,192,15],[214,22,192,18],[214,23,192,19],[215,8,193,4,"Object"],[215,14,193,10],[215,15,193,11,"keys"],[215,19,193,15],[215,20,193,16],[215,24,193,20],[215,25,193,21,"callback_message_queue"],[215,47,193,43],[215,48,193,44],[215,49,193,45,"forEach"],[215,56,193,52],[215,57,193,53],[215,67,193,53,"key"],[215,70,193,56],[215,72,193,60],[216,10,194,6,"_this6"],[216,16,194,10],[216,17,194,11,"callback_message_queue"],[216,39,194,33],[216,40,194,34,"key"],[216,43,194,37],[216,44,194,38],[216,45,194,39],[216,49,194,43,"Error"],[216,54,194,48],[216,55,194,49],[216,70,194,64],[216,71,194,65],[216,72,194,66],[217,10,195,6],[217,17,195,13,"_this6"],[217,23,195,17],[217,24,195,18,"callback_message_queue"],[217,46,195,40],[217,47,195,41,"key"],[217,50,195,44],[217,51,195,45],[218,8,196,4],[218,9,196,5],[218,10,196,6],[219,6,197,2],[220,4,197,3],[221,6,197,3,"key"],[221,9,197,3],[222,6,197,3,"value"],[222,11,197,3],[222,13,199,2],[222,22,199,2,"onRecv"],[222,28,199,8,"onRecv"],[222,29,199,9,"chunk"],[222,34,199,14],[222,36,199,16],[223,8,200,4],[223,12,200,8],[223,13,200,9,"mp"],[223,15,200,11],[223,16,200,12,"run"],[223,19,200,15],[223,20,200,16,"chunk"],[223,25,200,21],[223,26,200,22],[224,6,201,2],[225,4,201,3],[226,6,201,3,"key"],[226,9,201,3],[227,6,201,3,"value"],[227,11,201,3],[227,13,203,2],[227,22,203,2,"onError"],[227,29,203,9,"onError"],[227,30,203,10,"e"],[227,31,203,11],[227,33,203,13],[228,8,204,4,"console"],[228,15,204,11],[228,16,204,12,"log"],[228,19,204,15],[228,20,204,16],[228,30,204,26],[228,33,204,29,"e"],[228,34,204,30],[228,35,204,31],[229,6,205,2],[230,4,205,3],[231,2,205,3],[232,2,208,0,"module"],[232,8,208,6],[232,9,208,7,"exports"],[232,16,208,14],[232,19,208,17,"Client"],[232,25,208,23],[233,0,208,24],[233,3]],"functionMap":{"names":["<global>","Client","Client#constructor","util.MessageParser$argument_0","Client#initSocket","conn.on$argument_1","Client#connect","Client#connectSocket","Promise$argument_0","errorHandler","conn.connect$argument_1","Client#close","Client#request","Client#requestBatch","Client#response","Object.keys.forEach$argument_0","Client#onMessage","Client#onConnect","Client#onClose","Client#onRecv","Client#onError"],"mappings":"AAA;ACc;ECC;qCCQ;KDE;GDI;EGE;4BCuB;KDG;0BCC;KDE;yBCC;KDG;0BCC;KDE;GHE;EKE;GLM;EME;uBCE;2BCC,cD;iCEC;OFG;KDE;GNC;EUE;GVO;EWE;uBJI;KIK;GXC;EYE;uBLI;KKgB;GZC;EaE;yDC0B;SDG;GbG;EeE;GfiB;EgBE,chB;EiBE;qDHE;KGG;GjBC;EkBE;GlBE;EmBE;GnBE;CDC"}},"type":"js/module"}]}