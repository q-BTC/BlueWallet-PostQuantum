{"dependencies":[{"name":"./mode","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":30,"index":30}}],"key":"kP3UoMWYBHY2j1qDa+F4rCzyVl0="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Array of characters available in alphanumeric mode\n   *\n   * As per QR Code specification, to each character\n   * is assigned a value from 0 to 44 which in this case coincides\n   * with the array index\n   *\n   * @type {Array}\n   */\n  var ALPHA_NUM_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '$', '%', '*', '+', '-', '.', '/', ':'];\n  function AlphanumericData(data) {\n    this.mode = _$$_REQUIRE(_dependencyMap[0], \"./mode\").ALPHANUMERIC;\n    this.data = data;\n  }\n  AlphanumericData.getBitsLength = function getBitsLength(length) {\n    return 11 * Math.floor(length / 2) + 6 * (length % 2);\n  };\n  AlphanumericData.prototype.getLength = function getLength() {\n    return this.data.length;\n  };\n  AlphanumericData.prototype.getBitsLength = function getBitsLength() {\n    return AlphanumericData.getBitsLength(this.data.length);\n  };\n  AlphanumericData.prototype.write = function write(bitBuffer) {\n    var i;\n\n    // Input data characters are divided into groups of two characters\n    // and encoded as 11-bit binary codes.\n    for (i = 0; i + 2 <= this.data.length; i += 2) {\n      // The character value of the first character is multiplied by 45\n      var value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;\n\n      // The character value of the second digit is added to the product\n      value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);\n\n      // The sum is then stored as 11-bit binary number\n      bitBuffer.put(value, 11);\n    }\n\n    // If the number of input data characters is not a multiple of two,\n    // the character value of the final character is encoded as a 6-bit binary number.\n    if (this.data.length % 2) {\n      bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);\n    }\n  };\n  module.exports = AlphanumericData;\n});","lineCount":48,"map":[[2,2,3,0],[3,0,4,0],[4,0,5,0],[5,0,6,0],[6,0,7,0],[7,0,8,0],[8,0,9,0],[9,0,10,0],[10,0,11,0],[11,2,12,0],[11,6,12,6,"ALPHA_NUM_CHARS"],[11,21,12,21],[11,24,12,24],[11,25,13,2],[11,28,13,5],[11,30,13,7],[11,33,13,10],[11,35,13,12],[11,38,13,15],[11,40,13,17],[11,43,13,20],[11,45,13,22],[11,48,13,25],[11,50,13,27],[11,53,13,30],[11,55,13,32],[11,58,13,35],[11,60,13,37],[11,63,13,40],[11,65,13,42],[11,68,13,45],[11,70,13,47],[11,73,13,50],[11,75,14,2],[11,78,14,5],[11,80,14,7],[11,83,14,10],[11,85,14,12],[11,88,14,15],[11,90,14,17],[11,93,14,20],[11,95,14,22],[11,98,14,25],[11,100,14,27],[11,103,14,30],[11,105,14,32],[11,108,14,35],[11,110,14,37],[11,113,14,40],[11,115,14,42],[11,118,14,45],[11,120,14,47],[11,123,14,50],[11,125,14,52],[11,128,14,55],[11,130,14,57],[11,133,14,60],[11,135,14,62],[11,138,14,65],[11,140,15,2],[11,143,15,5],[11,145,15,7],[11,148,15,10],[11,150,15,12],[11,153,15,15],[11,155,15,17],[11,158,15,20],[11,160,15,22],[11,163,15,25],[11,165,15,27],[11,168,15,30],[11,170,15,32],[11,173,15,35],[11,175,15,37],[11,178,15,40],[11,180,15,42],[11,183,15,45],[11,185,15,47],[11,188,15,50],[11,190,15,52],[11,193,15,55],[11,195,15,57],[11,198,15,60],[11,200,15,62],[11,203,15,65],[11,205,16,2],[11,208,16,5],[11,210,16,7],[11,213,16,10],[11,215,16,12],[11,218,16,15],[11,220,16,17],[11,223,16,20],[11,225,16,22],[11,228,16,25],[11,230,16,27],[11,233,16,30],[11,235,16,32],[11,238,16,35],[11,240,16,37],[11,243,16,40],[11,245,16,42],[11,248,16,45],[11,249,17,1],[12,2,19,0],[12,11,19,9,"AlphanumericData"],[12,27,19,25,"AlphanumericData"],[12,28,19,27,"data"],[12,32,19,31],[12,34,19,33],[13,4,20,2],[13,8,20,6],[13,9,20,7,"mode"],[13,13,20,11],[13,16,20,14,"_$$_REQUIRE"],[13,27,20,14],[13,28,20,14,"_dependencyMap"],[13,42,20,14],[13,57,20,19,"ALPHANUMERIC"],[13,69,20,31],[14,4,21,2],[14,8,21,6],[14,9,21,7,"data"],[14,13,21,11],[14,16,21,14,"data"],[14,20,21,18],[15,2,22,0],[16,2,24,0,"AlphanumericData"],[16,18,24,16],[16,19,24,17,"getBitsLength"],[16,32,24,30],[16,35,24,33],[16,44,24,42,"getBitsLength"],[16,57,24,55,"getBitsLength"],[16,58,24,57,"length"],[16,64,24,63],[16,66,24,65],[17,4,25,2],[17,11,25,9],[17,13,25,11],[17,16,25,14,"Math"],[17,20,25,18],[17,21,25,19,"floor"],[17,26,25,24],[17,27,25,25,"length"],[17,33,25,31],[17,36,25,34],[17,37,25,35],[17,38,25,36],[17,41,25,39],[17,42,25,40],[17,46,25,44,"length"],[17,52,25,50],[17,55,25,53],[17,56,25,54],[17,57,25,55],[18,2,26,0],[18,3,26,1],[19,2,28,0,"AlphanumericData"],[19,18,28,16],[19,19,28,17,"prototype"],[19,28,28,26],[19,29,28,27,"getLength"],[19,38,28,36],[19,41,28,39],[19,50,28,48,"getLength"],[19,59,28,57,"getLength"],[19,60,28,57],[19,62,28,61],[20,4,29,2],[20,11,29,9],[20,15,29,13],[20,16,29,14,"data"],[20,20,29,18],[20,21,29,19,"length"],[20,27,29,25],[21,2,30,0],[21,3,30,1],[22,2,32,0,"AlphanumericData"],[22,18,32,16],[22,19,32,17,"prototype"],[22,28,32,26],[22,29,32,27,"getBitsLength"],[22,42,32,40],[22,45,32,43],[22,54,32,52,"getBitsLength"],[22,67,32,65,"getBitsLength"],[22,68,32,65],[22,70,32,69],[23,4,33,2],[23,11,33,9,"AlphanumericData"],[23,27,33,25],[23,28,33,26,"getBitsLength"],[23,41,33,39],[23,42,33,40],[23,46,33,44],[23,47,33,45,"data"],[23,51,33,49],[23,52,33,50,"length"],[23,58,33,56],[23,59,33,57],[24,2,34,0],[24,3,34,1],[25,2,36,0,"AlphanumericData"],[25,18,36,16],[25,19,36,17,"prototype"],[25,28,36,26],[25,29,36,27,"write"],[25,34,36,32],[25,37,36,35],[25,46,36,44,"write"],[25,51,36,49,"write"],[25,52,36,51,"bitBuffer"],[25,61,36,60],[25,63,36,62],[26,4,37,2],[26,8,37,6,"i"],[26,9,37,7],[28,4,39,2],[29,4,40,2],[30,4,41,2],[30,9,41,7,"i"],[30,10,41,8],[30,13,41,11],[30,14,41,12],[30,16,41,14,"i"],[30,17,41,15],[30,20,41,18],[30,21,41,19],[30,25,41,23],[30,29,41,27],[30,30,41,28,"data"],[30,34,41,32],[30,35,41,33,"length"],[30,41,41,39],[30,43,41,41,"i"],[30,44,41,42],[30,48,41,46],[30,49,41,47],[30,51,41,49],[31,6,42,4],[32,6,43,4],[32,10,43,8,"value"],[32,15,43,13],[32,18,43,16,"ALPHA_NUM_CHARS"],[32,33,43,31],[32,34,43,32,"indexOf"],[32,41,43,39],[32,42,43,40],[32,46,43,44],[32,47,43,45,"data"],[32,51,43,49],[32,52,43,50,"i"],[32,53,43,51],[32,54,43,52],[32,55,43,53],[32,58,43,56],[32,60,43,58],[34,6,45,4],[35,6,46,4,"value"],[35,11,46,9],[35,15,46,13,"ALPHA_NUM_CHARS"],[35,30,46,28],[35,31,46,29,"indexOf"],[35,38,46,36],[35,39,46,37],[35,43,46,41],[35,44,46,42,"data"],[35,48,46,46],[35,49,46,47,"i"],[35,50,46,48],[35,53,46,51],[35,54,46,52],[35,55,46,53],[35,56,46,54],[37,6,48,4],[38,6,49,4,"bitBuffer"],[38,15,49,13],[38,16,49,14,"put"],[38,19,49,17],[38,20,49,18,"value"],[38,25,49,23],[38,27,49,25],[38,29,49,27],[38,30,49,28],[39,4,50,2],[41,4,52,2],[42,4,53,2],[43,4,54,2],[43,8,54,6],[43,12,54,10],[43,13,54,11,"data"],[43,17,54,15],[43,18,54,16,"length"],[43,24,54,22],[43,27,54,25],[43,28,54,26],[43,30,54,28],[44,6,55,4,"bitBuffer"],[44,15,55,13],[44,16,55,14,"put"],[44,19,55,17],[44,20,55,18,"ALPHA_NUM_CHARS"],[44,35,55,33],[44,36,55,34,"indexOf"],[44,43,55,41],[44,44,55,42],[44,48,55,46],[44,49,55,47,"data"],[44,53,55,51],[44,54,55,52,"i"],[44,55,55,53],[44,56,55,54],[44,57,55,55],[44,59,55,57],[44,60,55,58],[44,61,55,59],[45,4,56,2],[46,2,57,0],[46,3,57,1],[47,2,59,0,"module"],[47,8,59,6],[47,9,59,7,"exports"],[47,16,59,14],[47,19,59,17,"AlphanumericData"],[47,35,59,33],[48,0,59,33],[48,3]],"functionMap":{"names":["<global>","AlphanumericData","getBitsLength","getLength","write"],"mappings":"AAA;ACkB;CDG;iCEE;CFE;uCGE;CHE;2CEE;CFE;mCIE;CJqB"}},"type":"js/module"}]}