{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":146,"column":0,"index":3941}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk="}},{"name":"./Server","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":30,"index":45}}],"key":"9sCYoHHemTc9PQk/ZqBB2lH9kmU="}},{"name":"./Socket","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":46},"end":{"line":4,"column":30,"index":76}}],"key":"cfgE9Yw/a8X/959IwBnhH3A68To="}},{"name":"./TLSServer","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":77},"end":{"line":5,"column":36,"index":113}}],"key":"xIiq0DMIa1OfK78hyBG88TvhjeY="}},{"name":"./TLSSocket","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":114},"end":{"line":6,"column":36,"index":150}}],"key":"j+SqCPeiy8nx9kYIyTVdQ4Gosfs="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _Server = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"./Server\"));\n  var _Socket = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"./Socket\"));\n  var _TLSServer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"./TLSServer\"));\n  var _TLSSocket = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"./TLSSocket\"));\n  /**\n   * @typedef {object} ServerOptions\n   * @property {boolean} [noDelay]\n   * @property {boolean} [keepAlive]\n   * @property {number} [keepAliveInitialDelay]\n   * @property {boolean} [allowHalfOpen]\n   * @property {boolean} [pauseOnConnect]\n   */\n\n  /**\n   * Creates a new TCP server.\n   *\n   * @param {ServerOptions | ((socket: Socket) => void)} [options] An options object or a connection listener\n   * @param {(socket: Socket) => void} [connectionListener] A listener for the 'connection' event\n   * @returns {Server}\n   */\n  function createServer(options, connectionListener) {\n    return new _Server.default(options, connectionListener);\n  }\n\n  /**\n   * @param {import('./TLSServer').TLSServerOptions} options\n   * @param {(socket: TLSSocket) => void} connectionListener\n   * @returns {TLSServer}\n   */\n  function createTLSServer(options, connectionListener) {\n    var server = new _TLSServer.default(connectionListener);\n    server.setSecureContext(options);\n    return server;\n  }\n\n  /**\n   * The `callback` function, if specified, will be added as a listener for the `'secureConnect'` event.\n   *\n   * @param {import('./TLSSocket').TLSSocketOptions & import('./Socket').ConnectionOptions} options\n   * @param {() => void} [callback]\n   * @returns {TLSSocket}\n   */\n  function connectTLS(options, callback) {\n    var socket = new _Socket.default();\n    var tlsSocket = new _TLSSocket.default(socket, options);\n    socket.once('connect', function () {\n      return tlsSocket.emit('secureConnect');\n    });\n    if (callback) tlsSocket.once('secureConnect', callback);\n    socket.connect(options);\n    return tlsSocket;\n  }\n\n  /**\n   * @param {import('./Socket').ConnectionOptions} options\n   * @param {() => void} callback\n   * @returns {Socket}\n   */\n  function createConnection(options, callback) {\n    var tcpSocket = new _Socket.default();\n    return tcpSocket.connect(options, callback);\n  }\n\n  // IPv4 Segment\n  var v4Seg = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n  var v4Str = `(${v4Seg}[.]){3}${v4Seg}`;\n  var IPv4Reg = new RegExp(`^${v4Str}$`);\n\n  // IPv6 Segment\n  var v6Seg = '(?:[0-9a-fA-F]{1,4})';\n  var IPv6Reg = new RegExp('^(' + `(?:${v6Seg}:){7}(?:${v6Seg}|:)|` + `(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|` + `(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1,2}|:)|` + `(?:${v6Seg}:){4}(?:(:${v6Seg}){0,1}:${v4Str}|(:${v6Seg}){1,3}|:)|` + `(?:${v6Seg}:){3}(?:(:${v6Seg}){0,2}:${v4Str}|(:${v6Seg}){1,4}|:)|` + `(?:${v6Seg}:){2}(?:(:${v6Seg}){0,3}:${v4Str}|(:${v6Seg}){1,5}|:)|` + `(?:${v6Seg}:){1}(?:(:${v6Seg}){0,4}:${v4Str}|(:${v6Seg}){1,6}|:)|` + `(?::((?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:))` + ')(%[0-9a-zA-Z-.:]{1,})?$');\n\n  /**\n   * Returns `true` if input is a version 4 IP address, otherwise returns `false`.\n   *\n   * @param {string} input\n   */\n  function isIPv4(input) {\n    return IPv4Reg.test(input);\n  }\n\n  /**\n   * Returns `true` if input is a version 6 IP address, otherwise returns `false`.\n   *\n   * @param {string} input\n   */\n  function isIPv6(input) {\n    return IPv6Reg.test(input);\n  }\n\n  /**\n   * Tests if input is an IP address. Returns `0` for invalid strings, returns `4` for IP version 4 addresses, and returns `6` for IP version 6 addresses.\n   *\n   * @param {string} input\n   */\n  function isIP(input) {\n    if (isIPv4(input)) return 4;else if (isIPv6(input)) return 6;\n    return 0;\n  }\n  var _default = exports.default = {\n    connect: createConnection,\n    createServer: createServer,\n    createConnection: createConnection,\n    createTLSServer: createTLSServer,\n    connectTLS: connectTLS,\n    isIP: isIP,\n    isIPv4: isIPv4,\n    isIPv6: isIPv6,\n    Server: _Server.default,\n    Socket: _Socket.default,\n    TLSServer: _TLSServer.default,\n    TLSSocket: _TLSSocket.default,\n    hasIdentity: _TLSSocket.default.hasIdentity\n  }; // @ts-ignore\n  module.exports = {\n    connect: createConnection,\n    createServer: createServer,\n    createConnection: createConnection,\n    createTLSServer: createTLSServer,\n    connectTLS: connectTLS,\n    isIP: isIP,\n    isIPv4: isIPv4,\n    isIPv6: isIPv6,\n    Server: _Server.default,\n    Socket: _Socket.default,\n    TLSServer: _TLSServer.default,\n    TLSSocket: _TLSSocket.default,\n    hasIdentity: _TLSSocket.default.hasIdentity\n  };\n});","lineCount":138,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"_$$_REQUIRE"],[4,42,1,13],[4,43,1,13,"_dependencyMap"],[4,57,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"default"],[8,17,1,13],[9,2,3,0],[9,6,3,0,"_Server"],[9,13,3,0],[9,16,3,0,"_interopRequireDefault"],[9,38,3,0],[9,39,3,0,"_$$_REQUIRE"],[9,50,3,0],[9,51,3,0,"_dependencyMap"],[9,65,3,0],[10,2,4,0],[10,6,4,0,"_Socket"],[10,13,4,0],[10,16,4,0,"_interopRequireDefault"],[10,38,4,0],[10,39,4,0,"_$$_REQUIRE"],[10,50,4,0],[10,51,4,0,"_dependencyMap"],[10,65,4,0],[11,2,5,0],[11,6,5,0,"_TLSServer"],[11,16,5,0],[11,19,5,0,"_interopRequireDefault"],[11,41,5,0],[11,42,5,0,"_$$_REQUIRE"],[11,53,5,0],[11,54,5,0,"_dependencyMap"],[11,68,5,0],[12,2,6,0],[12,6,6,0,"_TLSSocket"],[12,16,6,0],[12,19,6,0,"_interopRequireDefault"],[12,41,6,0],[12,42,6,0,"_$$_REQUIRE"],[12,53,6,0],[12,54,6,0,"_dependencyMap"],[12,68,6,0],[13,2,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[22,2,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,2,24,0],[29,11,24,9,"createServer"],[29,23,24,21,"createServer"],[29,24,24,22,"options"],[29,31,24,29],[29,33,24,31,"connectionListener"],[29,51,24,49],[29,53,24,51],[30,4,25,4],[30,11,25,11],[30,15,25,15,"Server"],[30,30,25,21],[30,31,25,22,"options"],[30,38,25,29],[30,40,25,31,"connectionListener"],[30,58,25,49],[30,59,25,50],[31,2,26,0],[33,2,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,2,33,0],[38,11,33,9,"createTLSServer"],[38,26,33,24,"createTLSServer"],[38,27,33,25,"options"],[38,34,33,32],[38,36,33,34,"connectionListener"],[38,54,33,52],[38,56,33,54],[39,4,34,4],[39,8,34,10,"server"],[39,14,34,16],[39,17,34,19],[39,21,34,23,"TLSServer"],[39,39,34,32],[39,40,34,33,"connectionListener"],[39,58,34,51],[39,59,34,52],[40,4,35,4,"server"],[40,10,35,10],[40,11,35,11,"setSecureContext"],[40,27,35,27],[40,28,35,28,"options"],[40,35,35,35],[40,36,35,36],[41,4,36,4],[41,11,36,11,"server"],[41,17,36,17],[42,2,37,0],[44,2,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,0,45,0],[51,2,46,0],[51,11,46,9,"connectTLS"],[51,21,46,19,"connectTLS"],[51,22,46,20,"options"],[51,29,46,27],[51,31,46,29,"callback"],[51,39,46,37],[51,41,46,39],[52,4,47,4],[52,8,47,10,"socket"],[52,14,47,16],[52,17,47,19],[52,21,47,23,"Socket"],[52,36,47,29],[52,37,47,30],[52,38,47,31],[53,4,48,4],[53,8,48,10,"tlsSocket"],[53,17,48,19],[53,20,48,22],[53,24,48,26,"TLSSocket"],[53,42,48,35],[53,43,48,36,"socket"],[53,49,48,42],[53,51,48,44,"options"],[53,58,48,51],[53,59,48,52],[54,4,49,4,"socket"],[54,10,49,10],[54,11,49,11,"once"],[54,15,49,15],[54,16,49,16],[54,25,49,25],[54,27,49,27],[55,6,49,27],[55,13,49,33,"tlsSocket"],[55,22,49,42],[55,23,49,43,"emit"],[55,27,49,47],[55,28,49,48],[55,43,49,63],[55,44,49,64],[56,4,49,64],[56,6,49,65],[57,4,50,4],[57,8,50,8,"callback"],[57,16,50,16],[57,18,50,18,"tlsSocket"],[57,27,50,27],[57,28,50,28,"once"],[57,32,50,32],[57,33,50,33],[57,48,50,48],[57,50,50,50,"callback"],[57,58,50,58],[57,59,50,59],[58,4,51,4,"socket"],[58,10,51,10],[58,11,51,11,"connect"],[58,18,51,18],[58,19,51,19,"options"],[58,26,51,26],[58,27,51,27],[59,4,52,4],[59,11,52,11,"tlsSocket"],[59,20,52,20],[60,2,53,0],[62,2,55,0],[63,0,56,0],[64,0,57,0],[65,0,58,0],[66,0,59,0],[67,2,60,0],[67,11,60,9,"createConnection"],[67,27,60,25,"createConnection"],[67,28,60,26,"options"],[67,35,60,33],[67,37,60,35,"callback"],[67,45,60,43],[67,47,60,45],[68,4,61,4],[68,8,61,10,"tcpSocket"],[68,17,61,19],[68,20,61,22],[68,24,61,26,"Socket"],[68,39,61,32],[68,40,61,33],[68,41,61,34],[69,4,62,4],[69,11,62,11,"tcpSocket"],[69,20,62,20],[69,21,62,21,"connect"],[69,28,62,28],[69,29,62,29,"options"],[69,36,62,36],[69,38,62,38,"callback"],[69,46,62,46],[69,47,62,47],[70,2,63,0],[72,2,65,0],[73,2,66,0],[73,6,66,6,"v4Seg"],[73,11,66,11],[73,14,66,14],[73,68,66,68],[74,2,67,0],[74,6,67,6,"v4Str"],[74,11,67,11],[74,14,67,14],[74,18,67,18,"v4Seg"],[74,23,67,23],[74,33,67,33,"v4Seg"],[74,38,67,38],[74,40,67,40],[75,2,68,0],[75,6,68,6,"IPv4Reg"],[75,13,68,13],[75,16,68,16],[75,20,68,20,"RegExp"],[75,26,68,26],[75,27,68,27],[75,31,68,31,"v4Str"],[75,36,68,36],[75,39,68,39],[75,40,68,40],[77,2,70,0],[78,2,71,0],[78,6,71,6,"v6Seg"],[78,11,71,11],[78,14,71,14],[78,36,71,36],[79,2,72,0],[79,6,72,6,"IPv6Reg"],[79,13,72,13],[79,16,72,16],[79,20,72,20,"RegExp"],[79,26,72,26],[79,27,73,4],[79,31,73,8],[79,34,74,8],[79,40,74,14,"v6Seg"],[79,45,74,19],[79,56,74,30,"v6Seg"],[79,61,74,35],[79,67,74,41],[79,70,75,8],[79,76,75,14,"v6Seg"],[79,81,75,19],[79,92,75,30,"v4Str"],[79,97,75,35],[79,102,75,40,"v6Seg"],[79,107,75,45],[79,113,75,51],[79,116,76,8],[79,122,76,14,"v6Seg"],[79,127,76,19],[79,139,76,31,"v4Str"],[79,144,76,36],[79,150,76,42,"v6Seg"],[79,155,76,47],[79,167,76,59],[79,170,77,8],[79,176,77,14,"v6Seg"],[79,181,77,19],[79,194,77,32,"v6Seg"],[79,199,77,37],[79,209,77,47,"v4Str"],[79,214,77,52],[79,220,77,58,"v6Seg"],[79,225,77,63],[79,237,77,75],[79,240,78,8],[79,246,78,14,"v6Seg"],[79,251,78,19],[79,264,78,32,"v6Seg"],[79,269,78,37],[79,279,78,47,"v4Str"],[79,284,78,52],[79,290,78,58,"v6Seg"],[79,295,78,63],[79,307,78,75],[79,310,79,8],[79,316,79,14,"v6Seg"],[79,321,79,19],[79,334,79,32,"v6Seg"],[79,339,79,37],[79,349,79,47,"v4Str"],[79,354,79,52],[79,360,79,58,"v6Seg"],[79,365,79,63],[79,377,79,75],[79,380,80,8],[79,386,80,14,"v6Seg"],[79,391,80,19],[79,404,80,32,"v6Seg"],[79,409,80,37],[79,419,80,47,"v4Str"],[79,424,80,52],[79,430,80,58,"v6Seg"],[79,435,80,63],[79,447,80,75],[79,450,81,8],[79,462,81,20,"v6Seg"],[79,467,81,25],[79,477,81,35,"v4Str"],[79,482,81,40],[79,490,81,48,"v6Seg"],[79,495,81,53],[79,507,81,65],[79,510,82,8],[79,536,83,0],[79,537,83,1],[81,2,85,0],[82,0,86,0],[83,0,87,0],[84,0,88,0],[85,0,89,0],[86,2,90,0],[86,11,90,9,"isIPv4"],[86,17,90,15,"isIPv4"],[86,18,90,16,"input"],[86,23,90,21],[86,25,90,23],[87,4,91,4],[87,11,91,11,"IPv4Reg"],[87,18,91,18],[87,19,91,19,"test"],[87,23,91,23],[87,24,91,24,"input"],[87,29,91,29],[87,30,91,30],[88,2,92,0],[90,2,94,0],[91,0,95,0],[92,0,96,0],[93,0,97,0],[94,0,98,0],[95,2,99,0],[95,11,99,9,"isIPv6"],[95,17,99,15,"isIPv6"],[95,18,99,16,"input"],[95,23,99,21],[95,25,99,23],[96,4,100,4],[96,11,100,11,"IPv6Reg"],[96,18,100,18],[96,19,100,19,"test"],[96,23,100,23],[96,24,100,24,"input"],[96,29,100,29],[96,30,100,30],[97,2,101,0],[99,2,103,0],[100,0,104,0],[101,0,105,0],[102,0,106,0],[103,0,107,0],[104,2,108,0],[104,11,108,9,"isIP"],[104,15,108,13,"isIP"],[104,16,108,14,"input"],[104,21,108,19],[104,23,108,21],[105,4,109,4],[105,8,109,8,"isIPv4"],[105,14,109,14],[105,15,109,15,"input"],[105,20,109,20],[105,21,109,21],[105,23,109,23],[105,30,109,30],[105,31,109,31],[105,32,109,32],[105,37,110,9],[105,41,110,13,"isIPv6"],[105,47,110,19],[105,48,110,20,"input"],[105,53,110,25],[105,54,110,26],[105,56,110,28],[105,63,110,35],[105,64,110,36],[106,4,111,4],[106,11,111,11],[106,12,111,12],[107,2,112,0],[108,2,112,1],[108,6,112,1,"_default"],[108,14,112,1],[108,17,112,1,"exports"],[108,24,112,1],[108,25,112,1,"default"],[108,32,112,1],[108,35,114,15],[109,4,115,4,"connect"],[109,11,115,11],[109,13,115,13,"createConnection"],[109,29,115,29],[110,4,116,4,"createServer"],[110,16,116,16],[110,18,116,4,"createServer"],[110,30,116,16],[111,4,117,4,"createConnection"],[111,20,117,20],[111,22,117,4,"createConnection"],[111,38,117,20],[112,4,118,4,"createTLSServer"],[112,19,118,19],[112,21,118,4,"createTLSServer"],[112,36,118,19],[113,4,119,4,"connectTLS"],[113,14,119,14],[113,16,119,4,"connectTLS"],[113,26,119,14],[114,4,120,4,"isIP"],[114,8,120,8],[114,10,120,4,"isIP"],[114,14,120,8],[115,4,121,4,"isIPv4"],[115,10,121,10],[115,12,121,4,"isIPv4"],[115,18,121,10],[116,4,122,4,"isIPv6"],[116,10,122,10],[116,12,122,4,"isIPv6"],[116,18,122,10],[117,4,123,4,"Server"],[117,10,123,10],[117,12,123,4,"Server"],[117,27,123,10],[118,4,124,4,"Socket"],[118,10,124,10],[118,12,124,4,"Socket"],[118,27,124,10],[119,4,125,4,"TLSServer"],[119,13,125,13],[119,15,125,4,"TLSServer"],[119,33,125,13],[120,4,126,4,"TLSSocket"],[120,13,126,13],[120,15,126,4,"TLSSocket"],[120,33,126,13],[121,4,127,4,"hasIdentity"],[121,15,127,15],[121,17,127,17,"TLSSocket"],[121,35,127,26],[121,36,127,27,"hasIdentity"],[122,2,128,0],[122,3,128,1],[122,5,130,0],[123,2,131,0,"module"],[123,8,131,6],[123,9,131,7,"exports"],[123,16,131,14],[123,19,131,17],[124,4,132,4,"connect"],[124,11,132,11],[124,13,132,13,"createConnection"],[124,29,132,29],[125,4,133,4,"createServer"],[125,16,133,16],[125,18,133,4,"createServer"],[125,30,133,16],[126,4,134,4,"createConnection"],[126,20,134,20],[126,22,134,4,"createConnection"],[126,38,134,20],[127,4,135,4,"createTLSServer"],[127,19,135,19],[127,21,135,4,"createTLSServer"],[127,36,135,19],[128,4,136,4,"connectTLS"],[128,14,136,14],[128,16,136,4,"connectTLS"],[128,26,136,14],[129,4,137,4,"isIP"],[129,8,137,8],[129,10,137,4,"isIP"],[129,14,137,8],[130,4,138,4,"isIPv4"],[130,10,138,10],[130,12,138,4,"isIPv4"],[130,18,138,10],[131,4,139,4,"isIPv6"],[131,10,139,10],[131,12,139,4,"isIPv6"],[131,18,139,10],[132,4,140,4,"Server"],[132,10,140,10],[132,12,140,4,"Server"],[132,27,140,10],[133,4,141,4,"Socket"],[133,10,141,10],[133,12,141,4,"Socket"],[133,27,141,10],[134,4,142,4,"TLSServer"],[134,13,142,13],[134,15,142,4,"TLSServer"],[134,33,142,13],[135,4,143,4,"TLSSocket"],[135,13,143,13],[135,15,143,4,"TLSSocket"],[135,33,143,13],[136,4,144,4,"hasIdentity"],[136,15,144,15],[136,17,144,17,"TLSSocket"],[136,35,144,26],[136,36,144,27,"hasIdentity"],[137,2,145,0],[137,3,145,1],[138,0,145,2],[138,3]],"functionMap":{"names":["<global>","createServer","createTLSServer","connectTLS","socket.once$argument_1","createConnection","isIPv4","isIPv6","isIP"],"mappings":"AAA;ACuB;CDE;AEO;CFI;AGS;2BCG,qCD;CHI;AKO;CLG;AM2B;CNE;AOO;CPE;AQO;CRI"}},"type":"js/module"}]}