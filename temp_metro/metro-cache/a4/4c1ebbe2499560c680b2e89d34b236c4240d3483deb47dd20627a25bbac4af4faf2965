{"dependencies":[{"name":"./utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":14,"index":14},"end":{"line":1,"column":32,"index":32}},{"start":{"line":1,"column":14,"index":14},"end":{"line":1,"column":32,"index":32}},{"start":{"line":1,"column":14,"index":14},"end":{"line":1,"column":32,"index":32}},{"start":{"line":1,"column":14,"index":14},"end":{"line":1,"column":32,"index":32}}],"key":"Arg6QRuIuy5D/jfcnxX1qJiHjX8="}},{"name":"./mode","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":13,"index":148},"end":{"line":4,"column":30,"index":165}},{"start":{"line":4,"column":13,"index":148},"end":{"line":4,"column":30,"index":165}},{"start":{"line":4,"column":13,"index":148},"end":{"line":4,"column":30,"index":165}},{"start":{"line":4,"column":13,"index":148},"end":{"line":4,"column":30,"index":165}},{"start":{"line":4,"column":13,"index":148},"end":{"line":4,"column":30,"index":165}},{"start":{"line":4,"column":13,"index":148},"end":{"line":4,"column":30,"index":165}},{"start":{"line":4,"column":13,"index":148},"end":{"line":4,"column":30,"index":165}},{"start":{"line":4,"column":13,"index":148},"end":{"line":4,"column":30,"index":165}}],"key":"kP3UoMWYBHY2j1qDa+F4rCzyVl0="}},{"name":"./version-check","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":21,"index":187},"end":{"line":5,"column":47,"index":213}},{"start":{"line":5,"column":21,"index":187},"end":{"line":5,"column":47,"index":213}},{"start":{"line":5,"column":21,"index":187},"end":{"line":5,"column":47,"index":213}}],"key":"KsD14V0r68dUrO4yG/0Qjl3HIGU="}},{"name":"./error-correction-code","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":15,"index":48},"end":{"line":2,"column":49,"index":82}}],"key":"3KPrHWT/Mg0Mk4hz3ogCQ0txM+E="}},{"name":"./error-correction-level","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":99},"end":{"line":3,"column":51,"index":134}},{"start":{"line":3,"column":16,"index":99},"end":{"line":3,"column":51,"index":134}}],"key":"AmKLBavoaXvmZUN9GkUo+rni3HQ="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // Generator polynomial used to encode version information\n  var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\n  var G18_BCH = _$$_REQUIRE(_dependencyMap[0], \"./utils\").getBCHDigit(G18);\n  function getBestVersionForDataLength(mode, length, errorCorrectionLevel) {\n    for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {\n      if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {\n        return currentVersion;\n      }\n    }\n    return undefined;\n  }\n  function getReservedBitsCount(mode, version) {\n    // Character count indicator + mode indicator bits\n    return _$$_REQUIRE(_dependencyMap[1], \"./mode\").getCharCountIndicator(mode, version) + 4;\n  }\n  function getTotalBitsFromDataArray(segments, version) {\n    var totalBits = 0;\n    segments.forEach(function (data) {\n      var reservedBits = getReservedBitsCount(data.mode, version);\n      totalBits += reservedBits + data.getBitsLength();\n    });\n    return totalBits;\n  }\n  function getBestVersionForMixedData(segments, errorCorrectionLevel) {\n    for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {\n      var length = getTotalBitsFromDataArray(segments, currentVersion);\n      if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, _$$_REQUIRE(_dependencyMap[1], \"./mode\").MIXED)) {\n        return currentVersion;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns version number from a value.\n   * If value is not a valid version, returns defaultValue\n   *\n   * @param  {Number|String} value        QR Code version\n   * @param  {Number}        defaultValue Fallback value\n   * @return {Number}                     QR Code version number\n   */\n  exports.from = function from(value, defaultValue) {\n    if (_$$_REQUIRE(_dependencyMap[2], \"./version-check\").isValid(value)) {\n      return parseInt(value, 10);\n    }\n    return defaultValue;\n  };\n\n  /**\n   * Returns how much data can be stored with the specified QR code version\n   * and error correction level\n   *\n   * @param  {Number} version              QR Code version (1-40)\n   * @param  {Number} errorCorrectionLevel Error correction level\n   * @param  {Mode}   mode                 Data mode\n   * @return {Number}                      Quantity of storable data\n   */\n  exports.getCapacity = function getCapacity(version, errorCorrectionLevel, mode) {\n    if (!_$$_REQUIRE(_dependencyMap[2], \"./version-check\").isValid(version)) {\n      throw new Error('Invalid QR Code version');\n    }\n\n    // Use Byte mode as default\n    if (typeof mode === 'undefined') mode = _$$_REQUIRE(_dependencyMap[1], \"./mode\").BYTE;\n\n    // Total codewords for this QR code version (Data + Error correction)\n    var totalCodewords = _$$_REQUIRE(_dependencyMap[0], \"./utils\").getSymbolTotalCodewords(version);\n\n    // Total number of error correction codewords\n    var ecTotalCodewords = _$$_REQUIRE(_dependencyMap[3], \"./error-correction-code\").getTotalCodewordsCount(version, errorCorrectionLevel);\n\n    // Total number of data codewords\n    var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;\n    if (mode === _$$_REQUIRE(_dependencyMap[1], \"./mode\").MIXED) return dataTotalCodewordsBits;\n    var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version);\n\n    // Return max number of storable codewords\n    switch (mode) {\n      case _$$_REQUIRE(_dependencyMap[1], \"./mode\").NUMERIC:\n        return Math.floor(usableBits / 10 * 3);\n      case _$$_REQUIRE(_dependencyMap[1], \"./mode\").ALPHANUMERIC:\n        return Math.floor(usableBits / 11 * 2);\n      case _$$_REQUIRE(_dependencyMap[1], \"./mode\").KANJI:\n        return Math.floor(usableBits / 13);\n      case _$$_REQUIRE(_dependencyMap[1], \"./mode\").BYTE:\n      default:\n        return Math.floor(usableBits / 8);\n    }\n  };\n\n  /**\n   * Returns the minimum version needed to contain the amount of data\n   *\n   * @param  {Segment} data                    Segment of data\n   * @param  {Number} [errorCorrectionLevel=H] Error correction level\n   * @param  {Mode} mode                       Data mode\n   * @return {Number}                          QR Code version\n   */\n  exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {\n    var seg;\n    var ecl = _$$_REQUIRE(_dependencyMap[4], \"./error-correction-level\").from(errorCorrectionLevel, _$$_REQUIRE(_dependencyMap[4], \"./error-correction-level\").M);\n    if (Array.isArray(data)) {\n      if (data.length > 1) {\n        return getBestVersionForMixedData(data, ecl);\n      }\n      if (data.length === 0) {\n        return 1;\n      }\n      seg = data[0];\n    } else {\n      seg = data;\n    }\n    return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);\n  };\n\n  /**\n   * Returns version information with relative error correction bits\n   *\n   * The version information is included in QR Code symbols of version 7 or larger.\n   * It consists of an 18-bit sequence containing 6 data bits,\n   * with 12 error correction bits calculated using the (18, 6) Golay code.\n   *\n   * @param  {Number} version QR Code version\n   * @return {Number}         Encoded version info bits\n   */\n  exports.getEncodedBits = function getEncodedBits(version) {\n    if (!_$$_REQUIRE(_dependencyMap[2], \"./version-check\").isValid(version) || version < 7) {\n      throw new Error('Invalid QR Code version');\n    }\n    var d = version << 12;\n    while (_$$_REQUIRE(_dependencyMap[0], \"./utils\").getBCHDigit(d) - G18_BCH >= 0) {\n      d ^= G18 << _$$_REQUIRE(_dependencyMap[0], \"./utils\").getBCHDigit(d) - G18_BCH;\n    }\n    return version << 12 | d;\n  };\n});","lineCount":137,"map":[[2,2,7,0],[3,2,8,0],[3,6,8,6,"G18"],[3,9,8,9],[3,12,8,13],[3,13,8,14],[3,17,8,18],[3,19,8,20],[3,22,8,25],[3,23,8,26],[3,27,8,30],[3,29,8,33],[3,32,8,37],[3,33,8,38],[3,37,8,42],[3,39,8,45],[3,42,8,49],[3,43,8,50],[3,47,8,54],[3,48,8,56],[3,51,8,60],[3,52,8,61],[3,56,8,65],[3,57,8,67],[3,60,8,71],[3,61,8,72],[3,65,8,76],[3,66,8,78],[3,69,8,82],[3,70,8,83],[3,74,8,87],[3,75,8,89],[3,78,8,93],[3,79,8,94],[3,83,8,98],[3,84,8,100],[4,2,9,0],[4,6,9,6,"G18_BCH"],[4,13,9,13],[4,16,9,16,"_$$_REQUIRE"],[4,27,9,16],[4,28,9,16,"_dependencyMap"],[4,42,9,16],[4,58,9,22,"getBCHDigit"],[4,69,9,33],[4,70,9,34,"G18"],[4,73,9,37],[4,74,9,38],[5,2,11,0],[5,11,11,9,"getBestVersionForDataLength"],[5,38,11,36,"getBestVersionForDataLength"],[5,39,11,38,"mode"],[5,43,11,42],[5,45,11,44,"length"],[5,51,11,50],[5,53,11,52,"errorCorrectionLevel"],[5,73,11,72],[5,75,11,74],[6,4,12,2],[6,9,12,7],[6,13,12,11,"currentVersion"],[6,27,12,25],[6,30,12,28],[6,31,12,29],[6,33,12,31,"currentVersion"],[6,47,12,45],[6,51,12,49],[6,53,12,51],[6,55,12,53,"currentVersion"],[6,69,12,67],[6,71,12,69],[6,73,12,71],[7,6,13,4],[7,10,13,8,"length"],[7,16,13,14],[7,20,13,18,"exports"],[7,27,13,25],[7,28,13,26,"getCapacity"],[7,39,13,37],[7,40,13,38,"currentVersion"],[7,54,13,52],[7,56,13,54,"errorCorrectionLevel"],[7,76,13,74],[7,78,13,76,"mode"],[7,82,13,80],[7,83,13,81],[7,85,13,83],[8,8,14,6],[8,15,14,13,"currentVersion"],[8,29,14,27],[9,6,15,4],[10,4,16,2],[11,4,18,2],[11,11,18,9,"undefined"],[11,20,18,18],[12,2,19,0],[13,2,21,0],[13,11,21,9,"getReservedBitsCount"],[13,31,21,29,"getReservedBitsCount"],[13,32,21,31,"mode"],[13,36,21,35],[13,38,21,37,"version"],[13,45,21,44],[13,47,21,46],[14,4,22,2],[15,4,23,2],[15,11,23,9,"_$$_REQUIRE"],[15,22,23,9],[15,23,23,9,"_dependencyMap"],[15,37,23,9],[15,52,23,14,"getCharCountIndicator"],[15,73,23,35],[15,74,23,36,"mode"],[15,78,23,40],[15,80,23,42,"version"],[15,87,23,49],[15,88,23,50],[15,91,23,53],[15,92,23,54],[16,2,24,0],[17,2,26,0],[17,11,26,9,"getTotalBitsFromDataArray"],[17,36,26,34,"getTotalBitsFromDataArray"],[17,37,26,36,"segments"],[17,45,26,44],[17,47,26,46,"version"],[17,54,26,53],[17,56,26,55],[18,4,27,2],[18,8,27,6,"totalBits"],[18,17,27,15],[18,20,27,18],[18,21,27,19],[19,4,29,2,"segments"],[19,12,29,10],[19,13,29,11,"forEach"],[19,20,29,18],[19,21,29,19],[19,31,29,29,"data"],[19,35,29,33],[19,37,29,35],[20,6,30,4],[20,10,30,10,"reservedBits"],[20,22,30,22],[20,25,30,25,"getReservedBitsCount"],[20,45,30,45],[20,46,30,46,"data"],[20,50,30,50],[20,51,30,51,"mode"],[20,55,30,55],[20,57,30,57,"version"],[20,64,30,64],[20,65,30,65],[21,6,31,4,"totalBits"],[21,15,31,13],[21,19,31,17,"reservedBits"],[21,31,31,29],[21,34,31,32,"data"],[21,38,31,36],[21,39,31,37,"getBitsLength"],[21,52,31,50],[21,53,31,51],[21,54,31,52],[22,4,32,2],[22,5,32,3],[22,6,32,4],[23,4,34,2],[23,11,34,9,"totalBits"],[23,20,34,18],[24,2,35,0],[25,2,37,0],[25,11,37,9,"getBestVersionForMixedData"],[25,37,37,35,"getBestVersionForMixedData"],[25,38,37,37,"segments"],[25,46,37,45],[25,48,37,47,"errorCorrectionLevel"],[25,68,37,67],[25,70,37,69],[26,4,38,2],[26,9,38,7],[26,13,38,11,"currentVersion"],[26,27,38,25],[26,30,38,28],[26,31,38,29],[26,33,38,31,"currentVersion"],[26,47,38,45],[26,51,38,49],[26,53,38,51],[26,55,38,53,"currentVersion"],[26,69,38,67],[26,71,38,69],[26,73,38,71],[27,6,39,4],[27,10,39,10,"length"],[27,16,39,16],[27,19,39,19,"getTotalBitsFromDataArray"],[27,44,39,44],[27,45,39,45,"segments"],[27,53,39,53],[27,55,39,55,"currentVersion"],[27,69,39,69],[27,70,39,70],[28,6,40,4],[28,10,40,8,"length"],[28,16,40,14],[28,20,40,18,"exports"],[28,27,40,25],[28,28,40,26,"getCapacity"],[28,39,40,37],[28,40,40,38,"currentVersion"],[28,54,40,52],[28,56,40,54,"errorCorrectionLevel"],[28,76,40,74],[28,78,40,76,"_$$_REQUIRE"],[28,89,40,76],[28,90,40,76,"_dependencyMap"],[28,104,40,76],[28,119,40,81,"MIXED"],[28,124,40,86],[28,125,40,87],[28,127,40,89],[29,8,41,6],[29,15,41,13,"currentVersion"],[29,29,41,27],[30,6,42,4],[31,4,43,2],[32,4,45,2],[32,11,45,9,"undefined"],[32,20,45,18],[33,2,46,0],[35,2,48,0],[36,0,49,0],[37,0,50,0],[38,0,51,0],[39,0,52,0],[40,0,53,0],[41,0,54,0],[42,0,55,0],[43,2,56,0,"exports"],[43,9,56,7],[43,10,56,8,"from"],[43,14,56,12],[43,17,56,15],[43,26,56,24,"from"],[43,30,56,28,"from"],[43,31,56,30,"value"],[43,36,56,35],[43,38,56,37,"defaultValue"],[43,50,56,49],[43,52,56,51],[44,4,57,2],[44,8,57,6,"_$$_REQUIRE"],[44,19,57,6],[44,20,57,6,"_dependencyMap"],[44,34,57,6],[44,58,57,19,"isValid"],[44,65,57,26],[44,66,57,27,"value"],[44,71,57,32],[44,72,57,33],[44,74,57,35],[45,6,58,4],[45,13,58,11,"parseInt"],[45,21,58,19],[45,22,58,20,"value"],[45,27,58,25],[45,29,58,27],[45,31,58,29],[45,32,58,30],[46,4,59,2],[47,4,61,2],[47,11,61,9,"defaultValue"],[47,23,61,21],[48,2,62,0],[48,3,62,1],[50,2,64,0],[51,0,65,0],[52,0,66,0],[53,0,67,0],[54,0,68,0],[55,0,69,0],[56,0,70,0],[57,0,71,0],[58,0,72,0],[59,2,73,0,"exports"],[59,9,73,7],[59,10,73,8,"getCapacity"],[59,21,73,19],[59,24,73,22],[59,33,73,31,"getCapacity"],[59,44,73,42,"getCapacity"],[59,45,73,44,"version"],[59,52,73,51],[59,54,73,53,"errorCorrectionLevel"],[59,74,73,73],[59,76,73,75,"mode"],[59,80,73,79],[59,82,73,81],[60,4,74,2],[60,8,74,6],[60,9,74,7,"_$$_REQUIRE"],[60,20,74,7],[60,21,74,7,"_dependencyMap"],[60,35,74,7],[60,59,74,20,"isValid"],[60,66,74,27],[60,67,74,28,"version"],[60,74,74,35],[60,75,74,36],[60,77,74,38],[61,6,75,4],[61,12,75,10],[61,16,75,14,"Error"],[61,21,75,19],[61,22,75,20],[61,47,75,45],[61,48,75,46],[62,4,76,2],[64,4,78,2],[65,4,79,2],[65,8,79,6],[65,15,79,13,"mode"],[65,19,79,17],[65,24,79,22],[65,35,79,33],[65,37,79,35,"mode"],[65,41,79,39],[65,44,79,42,"_$$_REQUIRE"],[65,55,79,42],[65,56,79,42,"_dependencyMap"],[65,70,79,42],[65,85,79,47,"BYTE"],[65,89,79,51],[67,4,81,2],[68,4,82,2],[68,8,82,8,"totalCodewords"],[68,22,82,22],[68,25,82,25,"_$$_REQUIRE"],[68,36,82,25],[68,37,82,25,"_dependencyMap"],[68,51,82,25],[68,67,82,31,"getSymbolTotalCodewords"],[68,90,82,54],[68,91,82,55,"version"],[68,98,82,62],[68,99,82,63],[70,4,84,2],[71,4,85,2],[71,8,85,8,"ecTotalCodewords"],[71,24,85,24],[71,27,85,27,"_$$_REQUIRE"],[71,38,85,27],[71,39,85,27,"_dependencyMap"],[71,53,85,27],[71,85,85,34,"getTotalCodewordsCount"],[71,107,85,56],[71,108,85,57,"version"],[71,115,85,64],[71,117,85,66,"errorCorrectionLevel"],[71,137,85,86],[71,138,85,87],[73,4,87,2],[74,4,88,2],[74,8,88,8,"dataTotalCodewordsBits"],[74,30,88,30],[74,33,88,33],[74,34,88,34,"totalCodewords"],[74,48,88,48],[74,51,88,51,"ecTotalCodewords"],[74,67,88,67],[74,71,88,71],[74,72,88,72],[75,4,90,2],[75,8,90,6,"mode"],[75,12,90,10],[75,17,90,15,"_$$_REQUIRE"],[75,28,90,15],[75,29,90,15,"_dependencyMap"],[75,43,90,15],[75,58,90,20,"MIXED"],[75,63,90,25],[75,65,90,27],[75,72,90,34,"dataTotalCodewordsBits"],[75,94,90,56],[76,4,92,2],[76,8,92,8,"usableBits"],[76,18,92,18],[76,21,92,21,"dataTotalCodewordsBits"],[76,43,92,43],[76,46,92,46,"getReservedBitsCount"],[76,66,92,66],[76,67,92,67,"mode"],[76,71,92,71],[76,73,92,73,"version"],[76,80,92,80],[76,81,92,81],[78,4,94,2],[79,4,95,2],[79,12,95,10,"mode"],[79,16,95,14],[80,6,96,4],[80,11,96,9,"_$$_REQUIRE"],[80,22,96,9],[80,23,96,9,"_dependencyMap"],[80,37,96,9],[80,52,96,14,"NUMERIC"],[80,59,96,21],[81,8,97,6],[81,15,97,13,"Math"],[81,19,97,17],[81,20,97,18,"floor"],[81,25,97,23],[81,26,97,25,"usableBits"],[81,36,97,35],[81,39,97,38],[81,41,97,40],[81,44,97,44],[81,45,97,45],[81,46,97,46],[82,6,99,4],[82,11,99,9,"_$$_REQUIRE"],[82,22,99,9],[82,23,99,9,"_dependencyMap"],[82,37,99,9],[82,52,99,14,"ALPHANUMERIC"],[82,64,99,26],[83,8,100,6],[83,15,100,13,"Math"],[83,19,100,17],[83,20,100,18,"floor"],[83,25,100,23],[83,26,100,25,"usableBits"],[83,36,100,35],[83,39,100,38],[83,41,100,40],[83,44,100,44],[83,45,100,45],[83,46,100,46],[84,6,102,4],[84,11,102,9,"_$$_REQUIRE"],[84,22,102,9],[84,23,102,9,"_dependencyMap"],[84,37,102,9],[84,52,102,14,"KANJI"],[84,57,102,19],[85,8,103,6],[85,15,103,13,"Math"],[85,19,103,17],[85,20,103,18,"floor"],[85,25,103,23],[85,26,103,24,"usableBits"],[85,36,103,34],[85,39,103,37],[85,41,103,39],[85,42,103,40],[86,6,105,4],[86,11,105,9,"_$$_REQUIRE"],[86,22,105,9],[86,23,105,9,"_dependencyMap"],[86,37,105,9],[86,52,105,14,"BYTE"],[86,56,105,18],[87,6,106,4],[88,8,107,6],[88,15,107,13,"Math"],[88,19,107,17],[88,20,107,18,"floor"],[88,25,107,23],[88,26,107,24,"usableBits"],[88,36,107,34],[88,39,107,37],[88,40,107,38],[88,41,107,39],[89,4,108,2],[90,2,109,0],[90,3,109,1],[92,2,111,0],[93,0,112,0],[94,0,113,0],[95,0,114,0],[96,0,115,0],[97,0,116,0],[98,0,117,0],[99,0,118,0],[100,2,119,0,"exports"],[100,9,119,7],[100,10,119,8,"getBestVersionForData"],[100,31,119,29],[100,34,119,32],[100,43,119,41,"getBestVersionForData"],[100,64,119,62,"getBestVersionForData"],[100,65,119,64,"data"],[100,69,119,68],[100,71,119,70,"errorCorrectionLevel"],[100,91,119,90],[100,93,119,92],[101,4,120,2],[101,8,120,6,"seg"],[101,11,120,9],[102,4,122,2],[102,8,122,8,"ecl"],[102,11,122,11],[102,14,122,14,"_$$_REQUIRE"],[102,25,122,14],[102,26,122,14,"_dependencyMap"],[102,40,122,14],[102,73,122,22,"from"],[102,77,122,26],[102,78,122,27,"errorCorrectionLevel"],[102,98,122,47],[102,100,122,49,"_$$_REQUIRE"],[102,111,122,49],[102,112,122,49,"_dependencyMap"],[102,126,122,49],[102,159,122,57,"M"],[102,160,122,58],[102,161,122,59],[103,4,124,2],[103,8,124,6,"Array"],[103,13,124,11],[103,14,124,12,"isArray"],[103,21,124,19],[103,22,124,20,"data"],[103,26,124,24],[103,27,124,25],[103,29,124,27],[104,6,125,4],[104,10,125,8,"data"],[104,14,125,12],[104,15,125,13,"length"],[104,21,125,19],[104,24,125,22],[104,25,125,23],[104,27,125,25],[105,8,126,6],[105,15,126,13,"getBestVersionForMixedData"],[105,41,126,39],[105,42,126,40,"data"],[105,46,126,44],[105,48,126,46,"ecl"],[105,51,126,49],[105,52,126,50],[106,6,127,4],[107,6,129,4],[107,10,129,8,"data"],[107,14,129,12],[107,15,129,13,"length"],[107,21,129,19],[107,26,129,24],[107,27,129,25],[107,29,129,27],[108,8,130,6],[108,15,130,13],[108,16,130,14],[109,6,131,4],[110,6,133,4,"seg"],[110,9,133,7],[110,12,133,10,"data"],[110,16,133,14],[110,17,133,15],[110,18,133,16],[110,19,133,17],[111,4,134,2],[111,5,134,3],[111,11,134,9],[112,6,135,4,"seg"],[112,9,135,7],[112,12,135,10,"data"],[112,16,135,14],[113,4,136,2],[114,4,138,2],[114,11,138,9,"getBestVersionForDataLength"],[114,38,138,36],[114,39,138,37,"seg"],[114,42,138,40],[114,43,138,41,"mode"],[114,47,138,45],[114,49,138,47,"seg"],[114,52,138,50],[114,53,138,51,"getLength"],[114,62,138,60],[114,63,138,61],[114,64,138,62],[114,66,138,64,"ecl"],[114,69,138,67],[114,70,138,68],[115,2,139,0],[115,3,139,1],[117,2,141,0],[118,0,142,0],[119,0,143,0],[120,0,144,0],[121,0,145,0],[122,0,146,0],[123,0,147,0],[124,0,148,0],[125,0,149,0],[126,0,150,0],[127,2,151,0,"exports"],[127,9,151,7],[127,10,151,8,"getEncodedBits"],[127,24,151,22],[127,27,151,25],[127,36,151,34,"getEncodedBits"],[127,50,151,48,"getEncodedBits"],[127,51,151,50,"version"],[127,58,151,57],[127,60,151,59],[128,4,152,2],[128,8,152,6],[128,9,152,7,"_$$_REQUIRE"],[128,20,152,7],[128,21,152,7,"_dependencyMap"],[128,35,152,7],[128,59,152,20,"isValid"],[128,66,152,27],[128,67,152,28,"version"],[128,74,152,35],[128,75,152,36],[128,79,152,40,"version"],[128,86,152,47],[128,89,152,50],[128,90,152,51],[128,92,152,53],[129,6,153,4],[129,12,153,10],[129,16,153,14,"Error"],[129,21,153,19],[129,22,153,20],[129,47,153,45],[129,48,153,46],[130,4,154,2],[131,4,156,2],[131,8,156,6,"d"],[131,9,156,7],[131,12,156,10,"version"],[131,19,156,17],[131,23,156,21],[131,25,156,23],[132,4,158,2],[132,11,158,9,"_$$_REQUIRE"],[132,22,158,9],[132,23,158,9,"_dependencyMap"],[132,37,158,9],[132,53,158,15,"getBCHDigit"],[132,64,158,26],[132,65,158,27,"d"],[132,66,158,28],[132,67,158,29],[132,70,158,32,"G18_BCH"],[132,77,158,39],[132,81,158,43],[132,82,158,44],[132,84,158,46],[133,6,159,4,"d"],[133,7,159,5],[133,11,159,10,"G18"],[133,14,159,13],[133,18,159,18,"_$$_REQUIRE"],[133,29,159,18],[133,30,159,18,"_dependencyMap"],[133,44,159,18],[133,60,159,24,"getBCHDigit"],[133,71,159,35],[133,72,159,36,"d"],[133,73,159,37],[133,74,159,38],[133,77,159,41,"G18_BCH"],[133,84,159,50],[134,4,160,2],[135,4,162,2],[135,11,162,10,"version"],[135,18,162,17],[135,22,162,21],[135,24,162,23],[135,27,162,27,"d"],[135,28,162,28],[136,2,163,0],[136,3,163,1],[137,0,163,1],[137,3]],"functionMap":{"names":["<global>","getBestVersionForDataLength","getReservedBitsCount","getTotalBitsFromDataArray","segments.forEach$argument_0","getBestVersionForMixedData","from","getCapacity","getBestVersionForData","getEncodedBits"],"mappings":"AAA;ACU;CDQ;AEE;CFG;AGE;mBCG;GDG;CHG;AKE;CLS;eMU;CNM;sBOW;CPoC;gCQU;CRoB;yBSY;CTY"}},"type":"js/module"}]}