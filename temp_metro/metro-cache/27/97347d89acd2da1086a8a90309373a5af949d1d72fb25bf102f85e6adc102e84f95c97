{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":528,"column":34,"index":22856}}],"key":"5y7e5+zC7teYEEC6niD9f5zII1M="}},{"name":"./_crystals.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":15,"column":23,"index":686},"end":{"line":15,"column":48,"index":711}},{"start":{"line":15,"column":23,"index":686},"end":{"line":15,"column":48,"index":711}},{"start":{"line":15,"column":23,"index":686},"end":{"line":15,"column":48,"index":711}},{"start":{"line":15,"column":23,"index":686},"end":{"line":15,"column":48,"index":711}},{"start":{"line":15,"column":23,"index":686},"end":{"line":15,"column":48,"index":711}},{"start":{"line":15,"column":23,"index":686},"end":{"line":15,"column":48,"index":711}},{"start":{"line":15,"column":23,"index":686},"end":{"line":15,"column":48,"index":711}}],"key":"otLFtUbaOI/Ub6kXRxu4pXXrOrQ="}},{"name":"./utils.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}},{"start":{"line":16,"column":19,"index":732},"end":{"line":16,"column":40,"index":753}}],"key":"v6h+l9IeOWbEcXdtKQqd2f4now4="}},{"name":"@noble/hashes/sha3","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":14,"column":15,"index":632},"end":{"line":14,"column":44,"index":661}},{"start":{"line":14,"column":15,"index":632},"end":{"line":14,"column":44,"index":661}},{"start":{"line":14,"column":15,"index":632},"end":{"line":14,"column":44,"index":661}},{"start":{"line":14,"column":15,"index":632},"end":{"line":14,"column":44,"index":661}},{"start":{"line":14,"column":15,"index":632},"end":{"line":14,"column":44,"index":661}},{"start":{"line":14,"column":15,"index":632},"end":{"line":14,"column":44,"index":661}},{"start":{"line":14,"column":15,"index":632},"end":{"line":14,"column":44,"index":661}},{"start":{"line":14,"column":15,"index":632},"end":{"line":14,"column":44,"index":661}},{"start":{"line":14,"column":15,"index":632},"end":{"line":14,"column":44,"index":661}},{"start":{"line":14,"column":15,"index":632},"end":{"line":14,"column":44,"index":661}},{"start":{"line":14,"column":15,"index":632},"end":{"line":14,"column":44,"index":661}}],"key":"+237C0LNKygmKqhAo3hP36n/EnY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.ml_dsa87 = exports.ml_dsa65 = exports.ml_dsa44 = exports.PARAMS = void 0;\n  /**\n   * ML-DSA: Module Lattice-based Digital Signature Algorithm from\n   * [FIPS-204](https://csrc.nist.gov/pubs/fips/204/ipd). A.k.a. CRYSTALS-Dilithium.\n   *\n   * Has similar internals to ML-KEM, but their keys and params are different.\n   * Check out [official site](https://www.pq-crystals.org/dilithium/index.shtml),\n   * [repo](https://github.com/pq-crystals/dilithium).\n   * @module\n   */\n  /*! noble-post-quantum - MIT License (c) 2024 Paul Miller (paulmillr.com) */\n\n  // Constants\n  var N = 256;\n  // 2**23 − 2**13 + 1, 23 bits: multiply will be 46. We have enough precision in JS to avoid bigints\n  var Q = 8380417;\n  var ROOT_OF_UNITY = 1753;\n  // f = 256**−1 mod q, pow(256, -1, q) = 8347681 (python3)\n  var F = 8347681;\n  var D = 13;\n  // Dilithium is kinda parametrized over GAMMA2, but everything will break with any other value.\n  var GAMMA2_1 = Math.floor((Q - 1) / 88) | 0;\n  var GAMMA2_2 = Math.floor((Q - 1) / 32) | 0;\n  /** Internal params for different versions of ML-DSA  */\n  // prettier-ignore\n  exports.PARAMS = {\n    2: {\n      K: 4,\n      L: 4,\n      D: D,\n      GAMMA1: 2 ** 17,\n      GAMMA2: GAMMA2_1,\n      TAU: 39,\n      ETA: 2,\n      OMEGA: 80\n    },\n    3: {\n      K: 6,\n      L: 5,\n      D: D,\n      GAMMA1: 2 ** 19,\n      GAMMA2: GAMMA2_2,\n      TAU: 49,\n      ETA: 4,\n      OMEGA: 55\n    },\n    5: {\n      K: 8,\n      L: 7,\n      D: D,\n      GAMMA1: 2 ** 19,\n      GAMMA2: GAMMA2_2,\n      TAU: 60,\n      ETA: 2,\n      OMEGA: 75\n    }\n  };\n  var newPoly = function newPoly(n) {\n    return new Int32Array(n);\n  };\n  var _ref = (0, _$$_REQUIRE(_dependencyMap[1], \"./_crystals.js\").genCrystals)({\n      N: N,\n      Q: Q,\n      F: F,\n      ROOT_OF_UNITY: ROOT_OF_UNITY,\n      newPoly: newPoly,\n      isKyber: false,\n      brvBits: 8\n    }),\n    mod = _ref.mod,\n    smod = _ref.smod,\n    NTT = _ref.NTT,\n    bitsCoder = _ref.bitsCoder;\n  var id = function id(n) {\n    return n;\n  };\n  var polyCoder = function polyCoder(d) {\n    var compress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : id;\n    var verify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : id;\n    return bitsCoder(d, {\n      encode: function encode(i) {\n        return compress(verify(i));\n      },\n      decode: function decode(i) {\n        return verify(compress(i));\n      }\n    });\n  };\n  var polyAdd = function polyAdd(a, b) {\n    for (var i = 0; i < a.length; i++) a[i] = mod(a[i] + b[i]);\n    return a;\n  };\n  var polySub = function polySub(a, b) {\n    for (var i = 0; i < a.length; i++) a[i] = mod(a[i] - b[i]);\n    return a;\n  };\n  var polyShiftl = function polyShiftl(p) {\n    for (var i = 0; i < N; i++) p[i] <<= D;\n    return p;\n  };\n  var polyChknorm = function polyChknorm(p, B) {\n    // Not very sure about this, but FIPS204 doesn't provide any function for that :(\n    for (var i = 0; i < N; i++) if (Math.abs(smod(p[i])) >= B) return true;\n    return false;\n  };\n  var MultiplyNTTs = function MultiplyNTTs(a, b) {\n    // NOTE: we don't use montgomery reduction in code, since it requires 64 bit ints,\n    // which is not available in JS. mod(a[i] * b[i]) is ok, since Q is 23 bit,\n    // which means a[i] * b[i] is 46 bit, which is safe to use in JS. (number is 53 bits).\n    // Barrett reduction is slower than mod :(\n    var c = newPoly(N);\n    for (var i = 0; i < a.length; i++) c[i] = mod(a[i] * b[i]);\n    return c;\n  };\n  // Return poly in NTT representation\n  function RejNTTPoly(xof) {\n    // Samples a polynomial ∈ Tq.\n    var r = newPoly(N);\n    // NOTE: we can represent 3xu24 as 4xu32, but it doesn't improve perf :(\n    for (var j = 0; j < N;) {\n      var b = xof();\n      if (b.length % 3) throw new Error('RejNTTPoly: unaligned block');\n      for (var i = 0; j < N && i <= b.length - 3; i += 3) {\n        var t = (b[i + 0] | b[i + 1] << 8 | b[i + 2] << 16) & 0x7fffff; // 3 bytes\n        if (t < Q) r[j++] = t;\n      }\n    }\n    return r;\n  }\n  function getDilithium(opts) {\n    var K = opts.K,\n      L = opts.L,\n      GAMMA1 = opts.GAMMA1,\n      GAMMA2 = opts.GAMMA2,\n      TAU = opts.TAU,\n      ETA = opts.ETA,\n      OMEGA = opts.OMEGA;\n    var CRH_BYTES = opts.CRH_BYTES,\n      TR_BYTES = opts.TR_BYTES,\n      C_TILDE_BYTES = opts.C_TILDE_BYTES,\n      XOF128 = opts.XOF128,\n      XOF256 = opts.XOF256;\n    if (![2, 4].includes(ETA)) throw new Error('Wrong ETA');\n    if (![1 << 17, 1 << 19].includes(GAMMA1)) throw new Error('Wrong GAMMA1');\n    if (![GAMMA2_1, GAMMA2_2].includes(GAMMA2)) throw new Error('Wrong GAMMA2');\n    var BETA = TAU * ETA;\n    var decompose = function decompose(r) {\n      // Decomposes r into (r1, r0) such that r ≡ r1(2γ2) + r0 mod q.\n      var rPlus = mod(r);\n      var r0 = smod(rPlus, 2 * GAMMA2) | 0;\n      if (rPlus - r0 === Q - 1) return {\n        r1: 0 | 0,\n        r0: r0 - 1 | 0\n      };\n      var r1 = Math.floor((rPlus - r0) / (2 * GAMMA2)) | 0;\n      return {\n        r1: r1,\n        r0: r0\n      }; // r1 = HighBits, r0 = LowBits\n    };\n    var HighBits = function HighBits(r) {\n      return decompose(r).r1;\n    };\n    var LowBits = function LowBits(r) {\n      return decompose(r).r0;\n    };\n    var MakeHint = function MakeHint(z, r) {\n      // Compute hint bit indicating whether adding z to r alters the high bits of r.\n      // From dilithium code\n      var res0 = z <= GAMMA2 || z > Q - GAMMA2 || z === Q - GAMMA2 && r === 0 ? 0 : 1;\n      // from FIPS204:\n      // // const r1 = HighBits(r);\n      // // const v1 = HighBits(r + z);\n      // // const res1 = +(r1 !== v1);\n      // But they return different results! However, decompose is same.\n      // So, either there is a bug in Dilithium ref implementation or in FIPS204.\n      // For now, lets use dilithium one, so test vectors can be passed.\n      // See\n      // https://github.com/GiacomoPope/dilithium-py?tab=readme-ov-file#optimising-decomposition-and-making-hints\n      return res0;\n    };\n    var UseHint = function UseHint(h, r) {\n      // Returns the high bits of r adjusted according to hint h\n      var m = Math.floor((Q - 1) / (2 * GAMMA2));\n      var _decompose = decompose(r),\n        r1 = _decompose.r1,\n        r0 = _decompose.r0;\n      // 3: if h = 1 and r0 > 0 return (r1 + 1) mod m\n      // 4: if h = 1 and r0 ≤ 0 return (r1 − 1) mod m\n      if (h === 1) return r0 > 0 ? mod(r1 + 1, m) | 0 : mod(r1 - 1, m) | 0;\n      return r1 | 0;\n    };\n    var Power2Round = function Power2Round(r) {\n      // Decomposes r into (r1, r0) such that r ≡ r1*(2**d) + r0 mod q.\n      var rPlus = mod(r);\n      var r0 = smod(rPlus, 2 ** D) | 0;\n      return {\n        r1: Math.floor((rPlus - r0) / 2 ** D) | 0,\n        r0: r0\n      };\n    };\n    var hintCoder = {\n      bytesLen: OMEGA + K,\n      encode: function encode(h) {\n        if (h === false) throw new Error('hint.encode: hint is false'); // should never happen\n        var res = new Uint8Array(OMEGA + K);\n        for (var i = 0, k = 0; i < K; i++) {\n          for (var j = 0; j < N; j++) if (h[i][j] !== 0) res[k++] = j;\n          res[OMEGA + i] = k;\n        }\n        return res;\n      },\n      decode: function decode(buf) {\n        var h = [];\n        var k = 0;\n        for (var i = 0; i < K; i++) {\n          var hi = newPoly(N);\n          if (buf[OMEGA + i] < k || buf[OMEGA + i] > OMEGA) return false;\n          for (var j = k; j < buf[OMEGA + i]; j++) {\n            if (j > k && buf[j] <= buf[j - 1]) return false;\n            hi[buf[j]] = 1;\n          }\n          k = buf[OMEGA + i];\n          h.push(hi);\n        }\n        for (var _j = k; _j < OMEGA; _j++) if (buf[_j] !== 0) return false;\n        return h;\n      }\n    };\n    var ETACoder = polyCoder(ETA === 2 ? 3 : 4, function (i) {\n      return ETA - i;\n    }, function (i) {\n      if (!(-ETA <= i && i <= ETA)) throw new Error(`malformed key s1/s3 ${i} outside of ETA range [${-ETA}, ${ETA}]`);\n      return i;\n    });\n    var T0Coder = polyCoder(13, function (i) {\n      return (1 << D - 1) - i;\n    });\n    var T1Coder = polyCoder(10);\n    // Requires smod. Need to fix!\n    var ZCoder = polyCoder(GAMMA1 === 1 << 17 ? 18 : 20, function (i) {\n      return smod(GAMMA1 - i);\n    });\n    var W1Coder = polyCoder(GAMMA2 === GAMMA2_1 ? 6 : 4);\n    var W1Vec = (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").vecCoder)(W1Coder, K);\n    // Main structures\n    var publicCoder = (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").splitCoder)(32, (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").vecCoder)(T1Coder, K));\n    var secretCoder = (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").splitCoder)(32, 32, TR_BYTES, (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").vecCoder)(ETACoder, L), (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").vecCoder)(ETACoder, K), (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").vecCoder)(T0Coder, K));\n    var sigCoder = (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").splitCoder)(C_TILDE_BYTES, (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").vecCoder)(ZCoder, L), hintCoder);\n    var CoefFromHalfByte = ETA === 2 ? function (n) {\n      return n < 15 ? 2 - n % 5 : false;\n    } : function (n) {\n      return n < 9 ? 4 - n : false;\n    };\n    // Return poly in NTT representation\n    function RejBoundedPoly(xof) {\n      // Samples an element a ∈ Rq with coeffcients in [−η, η] computed via rejection sampling from ρ.\n      var r = newPoly(N);\n      for (var j = 0; j < N;) {\n        var b = xof();\n        for (var i = 0; j < N && i < b.length; i += 1) {\n          // half byte. Should be superfast with vector instructions. But very slow with js :(\n          var d1 = CoefFromHalfByte(b[i] & 0x0f);\n          var d2 = CoefFromHalfByte(b[i] >> 4 & 0x0f);\n          if (d1 !== false) r[j++] = d1;\n          if (j < N && d2 !== false) r[j++] = d2;\n        }\n      }\n      return r;\n    }\n    var SampleInBall = function SampleInBall(seed) {\n      // Samples a polynomial c ∈ Rq with coeffcients from {−1, 0, 1} and Hamming weight τ\n      var pre = newPoly(N);\n      var s = _$$_REQUIRE(_dependencyMap[3], \"@noble/hashes/sha3\").shake256.create({}).update(seed);\n      var buf = new Uint8Array(_$$_REQUIRE(_dependencyMap[3], \"@noble/hashes/sha3\").shake256.blockLen);\n      s.xofInto(buf);\n      var masks = buf.slice(0, 8);\n      for (var i = N - TAU, pos = 8, maskPos = 0, maskBit = 0; i < N; i++) {\n        var b = i + 1;\n        for (; b > i;) {\n          b = buf[pos++];\n          if (pos < _$$_REQUIRE(_dependencyMap[3], \"@noble/hashes/sha3\").shake256.blockLen) continue;\n          s.xofInto(buf);\n          pos = 0;\n        }\n        pre[i] = pre[b];\n        pre[b] = 1 - ((masks[maskPos] >> maskBit++ & 1) << 1);\n        if (maskBit >= 8) {\n          maskPos++;\n          maskBit = 0;\n        }\n      }\n      return pre;\n    };\n    var polyPowerRound = function polyPowerRound(p) {\n      var res0 = newPoly(N);\n      var res1 = newPoly(N);\n      for (var i = 0; i < p.length; i++) {\n        var _Power2Round = Power2Round(p[i]),\n          r0 = _Power2Round.r0,\n          r1 = _Power2Round.r1;\n        res0[i] = r0;\n        res1[i] = r1;\n      }\n      return {\n        r0: res0,\n        r1: res1\n      };\n    };\n    var polyUseHint = function polyUseHint(u, h) {\n      for (var i = 0; i < N; i++) u[i] = UseHint(h[i], u[i]);\n      return u;\n    };\n    var polyMakeHint = function polyMakeHint(a, b) {\n      var v = newPoly(N);\n      var cnt = 0;\n      for (var i = 0; i < N; i++) {\n        var h = MakeHint(a[i], b[i]);\n        v[i] = h;\n        cnt += h;\n      }\n      return {\n        v: v,\n        cnt: cnt\n      };\n    };\n    var signRandBytes = 32;\n    var seedCoder = (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").splitCoder)(32, 64, 32);\n    // API & argument positions are exactly as in FIPS204.\n    var internal = {\n      signRandBytes: signRandBytes,\n      keygen: function keygen(seed) {\n        // H(𝜉||IntegerToBytes(𝑘, 1)||IntegerToBytes(ℓ, 1), 128) 2: ▷ expand seed\n        var seedDst = new Uint8Array(32 + 2);\n        var randSeed = seed === undefined;\n        if (randSeed) seed = (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").randomBytes)(32);\n        (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").ensureBytes)(seed, 32);\n        seedDst.set(seed);\n        if (randSeed) seed.fill(0);\n        seedDst[32] = K;\n        seedDst[33] = L;\n        var _seedCoder$decode = seedCoder.decode((0, _$$_REQUIRE(_dependencyMap[3], \"@noble/hashes/sha3\").shake256)(seedDst, {\n            dkLen: seedCoder.bytesLen\n          })),\n          _seedCoder$decode2 = _slicedToArray(_seedCoder$decode, 3),\n          rho = _seedCoder$decode2[0],\n          rhoPrime = _seedCoder$decode2[1],\n          K_ = _seedCoder$decode2[2];\n        var xofPrime = XOF256(rhoPrime);\n        var s1 = [];\n        for (var i = 0; i < L; i++) s1.push(RejBoundedPoly(xofPrime.get(i & 0xff, i >> 8 & 0xff)));\n        var s2 = [];\n        for (var _i = L; _i < L + K; _i++) s2.push(RejBoundedPoly(xofPrime.get(_i & 0xff, _i >> 8 & 0xff)));\n        var s1Hat = s1.map(function (i) {\n          return NTT.encode(i.slice());\n        });\n        var t0 = [];\n        var t1 = [];\n        var xof = XOF128(rho);\n        var t = newPoly(N);\n        for (var _i2 = 0; _i2 < K; _i2++) {\n          // t ← NTT−1(A*NTT(s1)) + s2\n          t.fill(0); // don't-reallocate\n          for (var j = 0; j < L; j++) {\n            var aij = RejNTTPoly(xof.get(j, _i2)); // super slow!\n            polyAdd(t, MultiplyNTTs(aij, s1Hat[j]));\n          }\n          NTT.decode(t);\n          var _polyPowerRound = polyPowerRound(polyAdd(t, s2[_i2])),\n            r0 = _polyPowerRound.r0,\n            r1 = _polyPowerRound.r1; // (t1, t0) ← Power2Round(t, d)\n          t0.push(r0);\n          t1.push(r1);\n        }\n        var publicKey = publicCoder.encode([rho, t1]); // pk ← pkEncode(ρ, t1)\n        var tr = (0, _$$_REQUIRE(_dependencyMap[3], \"@noble/hashes/sha3\").shake256)(publicKey, {\n          dkLen: TR_BYTES\n        }); // tr ← H(BytesToBits(pk), 512)\n        var secretKey = secretCoder.encode([rho, K_, tr, s1, s2, t0]); // sk ← skEncode(ρ, K,tr, s1, s2, t0)\n        xof.clean();\n        xofPrime.clean();\n        // STATS\n        // Kyber512:  { calls: 4, xofs: 12 }, Kyber768: { calls: 9, xofs: 27 }, Kyber1024: { calls: 16, xofs: 48 }\n        // DSA44:    { calls: 24, xofs: 24 }, DSA65:    { calls: 41, xofs: 41 }, DSA87:    { calls: 71, xofs: 71 }\n        (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").cleanBytes)(rho, rhoPrime, K_, s1, s2, s1Hat, t, t0, t1, tr, seedDst);\n        return {\n          publicKey: publicKey,\n          secretKey: secretKey\n        };\n      },\n      // NOTE: random is optional.\n      sign: function sign(secretKey, msg, random) {\n        var externalMu = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        // This part can be pre-cached per secretKey, but there is only minor performance improvement,\n        // since we re-use a lot of variables to computation.\n        var _secretCoder$decode = secretCoder.decode(secretKey),\n          _secretCoder$decode2 = _slicedToArray(_secretCoder$decode, 6),\n          rho = _secretCoder$decode2[0],\n          _K = _secretCoder$decode2[1],\n          tr = _secretCoder$decode2[2],\n          s1 = _secretCoder$decode2[3],\n          s2 = _secretCoder$decode2[4],\n          t0 = _secretCoder$decode2[5]; // (ρ, K,tr, s1, s2, t0) ← skDecode(sk)\n        // Cache matrix to avoid re-compute later\n        var A = []; // A ← ExpandA(ρ)\n        var xof = XOF128(rho);\n        for (var i = 0; i < K; i++) {\n          var pv = [];\n          for (var j = 0; j < L; j++) pv.push(RejNTTPoly(xof.get(j, i)));\n          A.push(pv);\n        }\n        xof.clean();\n        for (var _i3 = 0; _i3 < L; _i3++) NTT.encode(s1[_i3]); // sˆ1 ← NTT(s1)\n        for (var _i4 = 0; _i4 < K; _i4++) {\n          NTT.encode(s2[_i4]); // sˆ2 ← NTT(s2)\n          NTT.encode(t0[_i4]); // tˆ0 ← NTT(t0)\n        }\n        // This part is per msg\n        var mu = externalMu ? msg : _$$_REQUIRE(_dependencyMap[3], \"@noble/hashes/sha3\").shake256.create({\n          dkLen: CRH_BYTES\n        }).update(tr).update(msg).digest(); // 6: µ ← H(tr||M, 512) ▷ Compute message representative µ\n        // Compute private random seed\n        var rnd = random ? random : new Uint8Array(32);\n        (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").ensureBytes)(rnd);\n        var rhoprime = _$$_REQUIRE(_dependencyMap[3], \"@noble/hashes/sha3\").shake256.create({\n          dkLen: CRH_BYTES\n        }).update(_K).update(rnd).update(mu).digest(); // ρ′← H(K||rnd||µ, 512)\n        (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").ensureBytes)(rhoprime, CRH_BYTES);\n        var x256 = XOF256(rhoprime, ZCoder.bytesLen);\n        //  Rejection sampling loop\n        var _loop = function _loop(_kappa) {\n            var y = [];\n            // y ← ExpandMask(ρ , κ)\n            for (var _i5 = 0; _i5 < L; _i5++, _kappa++) y.push(ZCoder.decode(x256.get(_kappa & 0xff, _kappa >> 8)()));\n            var z = y.map(function (i) {\n              return NTT.encode(i.slice());\n            });\n            var w = [];\n            for (var _i6 = 0; _i6 < K; _i6++) {\n              // w ← NTT−1(A ◦ NTT(y))\n              var wi = newPoly(N);\n              for (var _j2 = 0; _j2 < L; _j2++) polyAdd(wi, MultiplyNTTs(A[_i6][_j2], z[_j2]));\n              NTT.decode(wi);\n              w.push(wi);\n            }\n            var w1 = w.map(function (j) {\n              return j.map(HighBits);\n            }); // w1 ← HighBits(w)\n            // Commitment hash: c˜ ∈{0, 1 2λ } ← H(µ||w1Encode(w1), 2λ)\n            var cTilde = _$$_REQUIRE(_dependencyMap[3], \"@noble/hashes/sha3\").shake256.create({\n              dkLen: C_TILDE_BYTES\n            }).update(mu).update(W1Vec.encode(w1)).digest();\n            // Verifer’s challenge\n            var cHat = NTT.encode(SampleInBall(cTilde)); // c ← SampleInBall(c˜1); cˆ ← NTT(c)\n            // ⟨⟨cs1⟩⟩ ← NTT−1(cˆ◦ sˆ1)\n            var cs1 = s1.map(function (i) {\n              return MultiplyNTTs(i, cHat);\n            });\n            for (var _i7 = 0; _i7 < L; _i7++) {\n              polyAdd(NTT.decode(cs1[_i7]), y[_i7]); // z ← y + ⟨⟨cs1⟩⟩\n              if (polyChknorm(cs1[_i7], GAMMA1 - BETA)) {\n                kappa = _kappa;\n                return 0;\n              } // continue main_loop\n              // ||z||∞ ≥ γ1 − β\n            }\n            // cs1 is now z (▷ Signer’s response)\n            var cnt = 0;\n            var h = [];\n            for (var _i8 = 0; _i8 < K; _i8++) {\n              var cs2 = NTT.decode(MultiplyNTTs(s2[_i8], cHat)); // ⟨⟨cs2⟩⟩ ← NTT−1(cˆ◦ sˆ2)\n              var r0 = polySub(w[_i8], cs2).map(LowBits); // r0 ← LowBits(w − ⟨⟨cs2⟩⟩)\n              if (polyChknorm(r0, GAMMA2 - BETA)) {\n                kappa = _kappa;\n                return 0;\n              } // continue main_loop\n              // ||r0||∞ ≥ γ2 − β\n              var ct0 = NTT.decode(MultiplyNTTs(t0[_i8], cHat)); // ⟨⟨ct0⟩⟩ ← NTT−1(cˆ◦ tˆ0)\n              if (polyChknorm(ct0, GAMMA2)) {\n                kappa = _kappa;\n                return 0;\n              } // continue main_loop\n              polyAdd(r0, ct0);\n              // ▷ Signer’s hint\n              var hint = polyMakeHint(r0, w1[_i8]); // h ← MakeHint(−⟨⟨ct0⟩⟩, w− ⟨⟨cs2⟩⟩ + ⟨⟨ct0⟩⟩)\n              h.push(hint.v);\n              cnt += hint.cnt;\n            }\n            if (cnt > OMEGA) {\n              kappa = _kappa;\n              return 1;\n            } // continue\n            // the number of 1’s in h is greater than ω\n            x256.clean();\n            var res = sigCoder.encode([cTilde, cs1, h]); // σ ← sigEncode(c˜, z mod±q, h)\n            // rho, _K, tr is subarray of secretKey, cannot clean.\n            (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").cleanBytes).apply(void 0, [cTilde, cs1, h, cHat, w1, w, z, y, rhoprime, mu, s1, s2, t0].concat(A));\n            return {\n              v: res\n            };\n            kappa = _kappa;\n          },\n          _ret;\n        main_loop: for (var kappa = 0;;) {\n          _ret = _loop(kappa);\n          if (_ret === 0) continue main_loop;\n          if (_ret === 1) continue;\n          if (_ret) return _ret.v;\n        }\n        // @ts-ignore\n        throw new Error('Unreachable code path reached, report this error');\n      },\n      verify: function verify(publicKey, msg, sig) {\n        var externalMu = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        // ML-DSA.Verify(pk, M, σ): Verifes a signature σ for a message M.\n        var _publicCoder$decode = publicCoder.decode(publicKey),\n          _publicCoder$decode2 = _slicedToArray(_publicCoder$decode, 2),\n          rho = _publicCoder$decode2[0],\n          t1 = _publicCoder$decode2[1]; // (ρ, t1) ← pkDecode(pk)\n        var tr = (0, _$$_REQUIRE(_dependencyMap[3], \"@noble/hashes/sha3\").shake256)(publicKey, {\n          dkLen: TR_BYTES\n        }); // 6: tr ← H(BytesToBits(pk), 512)\n        if (sig.length !== sigCoder.bytesLen) return false; // return false instead of exception\n        var _sigCoder$decode = sigCoder.decode(sig),\n          _sigCoder$decode2 = _slicedToArray(_sigCoder$decode, 3),\n          cTilde = _sigCoder$decode2[0],\n          z = _sigCoder$decode2[1],\n          h = _sigCoder$decode2[2]; // (c˜, z, h) ← sigDecode(σ), ▷ Signer’s commitment hash c ˜, response z and hint\n        if (h === false) return false; // if h = ⊥ then return false\n        for (var i = 0; i < L; i++) if (polyChknorm(z[i], GAMMA1 - BETA)) return false;\n        var mu = externalMu ? msg : _$$_REQUIRE(_dependencyMap[3], \"@noble/hashes/sha3\").shake256.create({\n          dkLen: CRH_BYTES\n        }).update(tr).update(msg).digest(); // 7: µ ← H(tr||M, 512)\n        // Compute verifer’s challenge from c˜\n        var c = NTT.encode(SampleInBall(cTilde)); // c ← SampleInBall(c˜1)\n        var zNtt = z.map(function (i) {\n          return i.slice();\n        }); // zNtt = NTT(z)\n        for (var _i9 = 0; _i9 < L; _i9++) NTT.encode(zNtt[_i9]);\n        var wTick1 = [];\n        var xof = XOF128(rho);\n        for (var _i0 = 0; _i0 < K; _i0++) {\n          var ct12d = MultiplyNTTs(NTT.encode(polyShiftl(t1[_i0])), c); //c * t1 * (2**d)\n          var Az = newPoly(N); // // A * z\n          for (var j = 0; j < L; j++) {\n            var aij = RejNTTPoly(xof.get(j, _i0)); // A[i][j] inplace\n            polyAdd(Az, MultiplyNTTs(aij, zNtt[j]));\n          }\n          // wApprox = A*z - c*t1 * (2**d)\n          var wApprox = NTT.decode(polySub(Az, ct12d));\n          // Reconstruction of signer’s commitment\n          wTick1.push(polyUseHint(wApprox, h[_i0])); // w ′ ← UseHint(h, w'approx )\n        }\n        xof.clean();\n        // c˜′← H (µ||w1Encode(w′1), 2λ),  Hash it; this should match c˜\n        var c2 = _$$_REQUIRE(_dependencyMap[3], \"@noble/hashes/sha3\").shake256.create({\n          dkLen: C_TILDE_BYTES\n        }).update(mu).update(W1Vec.encode(wTick1)).digest();\n        // Additional checks in FIPS-204:\n        // [[ ||z||∞ < γ1 − β ]] and [[c ˜ = c˜′]] and [[number of 1’s in h is ≤ ω]]\n        for (var t of h) {\n          var sum = t.reduce(function (acc, i) {\n            return acc + i;\n          }, 0);\n          if (!(sum <= OMEGA)) return false;\n        }\n        for (var _t of z) if (polyChknorm(_t, GAMMA1 - BETA)) return false;\n        return (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").equalBytes)(cTilde, c2);\n      }\n    };\n    return {\n      internal: internal,\n      keygen: internal.keygen,\n      signRandBytes: internal.signRandBytes,\n      sign: function sign(secretKey, msg) {\n        var ctx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").EMPTY;\n        var random = arguments.length > 3 ? arguments[3] : undefined;\n        var M = (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").getMessage)(msg, ctx);\n        var res = internal.sign(secretKey, M, random);\n        M.fill(0);\n        return res;\n      },\n      verify: function verify(publicKey, msg, sig) {\n        var ctx = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").EMPTY;\n        return internal.verify(publicKey, (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").getMessage)(msg, ctx), sig);\n      },\n      prehash: function prehash(hashName) {\n        return {\n          sign: function sign(secretKey, msg) {\n            var ctx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").EMPTY;\n            var random = arguments.length > 3 ? arguments[3] : undefined;\n            var M = (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").getMessagePrehash)(hashName, msg, ctx);\n            var res = internal.sign(secretKey, M, random);\n            M.fill(0);\n            return res;\n          },\n          verify: function verify(publicKey, msg, sig) {\n            var ctx = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").EMPTY;\n            return internal.verify(publicKey, (0, _$$_REQUIRE(_dependencyMap[2], \"./utils.js\").getMessagePrehash)(hashName, msg, ctx), sig);\n          }\n        };\n      }\n    };\n  }\n  /** ML-DSA-44 for 128-bit security level. Not recommended after 2030, as per ASD. */\n  exports.ml_dsa44 = getDilithium(Object.assign({}, exports.PARAMS[2], {\n    CRH_BYTES: 64,\n    TR_BYTES: 64,\n    C_TILDE_BYTES: 32,\n    XOF128: _$$_REQUIRE(_dependencyMap[1], \"./_crystals.js\").XOF128,\n    XOF256: _$$_REQUIRE(_dependencyMap[1], \"./_crystals.js\").XOF256\n  }));\n  /** ML-DSA-65 for 192-bit security level. Not recommended after 2030, as per ASD. */\n  exports.ml_dsa65 = getDilithium(Object.assign({}, exports.PARAMS[3], {\n    CRH_BYTES: 64,\n    TR_BYTES: 64,\n    C_TILDE_BYTES: 48,\n    XOF128: _$$_REQUIRE(_dependencyMap[1], \"./_crystals.js\").XOF128,\n    XOF256: _$$_REQUIRE(_dependencyMap[1], \"./_crystals.js\").XOF256\n  }));\n  /** ML-DSA-87 for 256-bit security level. OK after 2030, as per ASD. */\n  exports.ml_dsa87 = getDilithium(Object.assign({}, exports.PARAMS[5], {\n    CRH_BYTES: 64,\n    TR_BYTES: 64,\n    C_TILDE_BYTES: 64,\n    XOF128: _$$_REQUIRE(_dependencyMap[1], \"./_crystals.js\").XOF128,\n    XOF256: _$$_REQUIRE(_dependencyMap[1], \"./_crystals.js\").XOF256\n  }));\n});","lineCount":636,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"_$$_REQUIRE"],[4,34,1,13],[4,35,1,13,"_dependencyMap"],[4,49,1,13],[5,2,2,0,"Object"],[5,8,2,6],[5,9,2,7,"defineProperty"],[5,23,2,21],[5,24,2,22,"exports"],[5,31,2,29],[5,33,2,31],[5,45,2,43],[5,47,2,45],[6,4,2,47,"value"],[6,9,2,52],[6,11,2,54],[7,2,2,59],[7,3,2,60],[7,4,2,61],[8,2,3,0,"exports"],[8,9,3,7],[8,10,3,8,"ml_dsa87"],[8,18,3,16],[8,21,3,19,"exports"],[8,28,3,26],[8,29,3,27,"ml_dsa65"],[8,37,3,35],[8,40,3,38,"exports"],[8,47,3,45],[8,48,3,46,"ml_dsa44"],[8,56,3,54],[8,59,3,57,"exports"],[8,66,3,64],[8,67,3,65,"PARAMS"],[8,73,3,71],[8,76,3,74],[8,81,3,79],[8,82,3,80],[9,2,4,0],[10,0,5,0],[11,0,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,2,13,0],[20,2,17,0],[21,2,18,0],[21,6,18,6,"N"],[21,7,18,7],[21,10,18,10],[21,13,18,13],[22,2,19,0],[23,2,20,0],[23,6,20,6,"Q"],[23,7,20,7],[23,10,20,10],[23,17,20,17],[24,2,21,0],[24,6,21,6,"ROOT_OF_UNITY"],[24,19,21,19],[24,22,21,22],[24,26,21,26],[25,2,22,0],[26,2,23,0],[26,6,23,6,"F"],[26,7,23,7],[26,10,23,10],[26,17,23,17],[27,2,24,0],[27,6,24,6,"D"],[27,7,24,7],[27,10,24,10],[27,12,24,12],[28,2,25,0],[29,2,26,0],[29,6,26,6,"GAMMA2_1"],[29,14,26,14],[29,17,26,17,"Math"],[29,21,26,21],[29,22,26,22,"floor"],[29,27,26,27],[29,28,26,28],[29,29,26,29,"Q"],[29,30,26,30],[29,33,26,33],[29,34,26,34],[29,38,26,38],[29,40,26,40],[29,41,26,41],[29,44,26,44],[29,45,26,45],[30,2,27,0],[30,6,27,6,"GAMMA2_2"],[30,14,27,14],[30,17,27,17,"Math"],[30,21,27,21],[30,22,27,22,"floor"],[30,27,27,27],[30,28,27,28],[30,29,27,29,"Q"],[30,30,27,30],[30,33,27,33],[30,34,27,34],[30,38,27,38],[30,40,27,40],[30,41,27,41],[30,44,27,44],[30,45,27,45],[31,2,28,0],[32,2,29,0],[33,2,30,0,"exports"],[33,9,30,7],[33,10,30,8,"PARAMS"],[33,16,30,14],[33,19,30,17],[34,4,31,4],[34,5,31,5],[34,7,31,7],[35,6,31,9,"K"],[35,7,31,10],[35,9,31,12],[35,10,31,13],[36,6,31,15,"L"],[36,7,31,16],[36,9,31,18],[36,10,31,19],[37,6,31,21,"D"],[37,7,31,22],[37,9,31,21,"D"],[37,10,31,22],[38,6,31,24,"GAMMA1"],[38,12,31,30],[38,14,31,32],[38,15,31,33],[38,19,31,37],[38,21,31,39],[39,6,31,41,"GAMMA2"],[39,12,31,47],[39,14,31,49,"GAMMA2_1"],[39,22,31,57],[40,6,31,59,"TAU"],[40,9,31,62],[40,11,31,64],[40,13,31,66],[41,6,31,68,"ETA"],[41,9,31,71],[41,11,31,73],[41,12,31,74],[42,6,31,76,"OMEGA"],[42,11,31,81],[42,13,31,83],[43,4,31,86],[43,5,31,87],[44,4,32,4],[44,5,32,5],[44,7,32,7],[45,6,32,9,"K"],[45,7,32,10],[45,9,32,12],[45,10,32,13],[46,6,32,15,"L"],[46,7,32,16],[46,9,32,18],[46,10,32,19],[47,6,32,21,"D"],[47,7,32,22],[47,9,32,21,"D"],[47,10,32,22],[48,6,32,24,"GAMMA1"],[48,12,32,30],[48,14,32,32],[48,15,32,33],[48,19,32,37],[48,21,32,39],[49,6,32,41,"GAMMA2"],[49,12,32,47],[49,14,32,49,"GAMMA2_2"],[49,22,32,57],[50,6,32,59,"TAU"],[50,9,32,62],[50,11,32,64],[50,13,32,66],[51,6,32,68,"ETA"],[51,9,32,71],[51,11,32,73],[51,12,32,74],[52,6,32,76,"OMEGA"],[52,11,32,81],[52,13,32,83],[53,4,32,86],[53,5,32,87],[54,4,33,4],[54,5,33,5],[54,7,33,7],[55,6,33,9,"K"],[55,7,33,10],[55,9,33,12],[55,10,33,13],[56,6,33,15,"L"],[56,7,33,16],[56,9,33,18],[56,10,33,19],[57,6,33,21,"D"],[57,7,33,22],[57,9,33,21,"D"],[57,10,33,22],[58,6,33,24,"GAMMA1"],[58,12,33,30],[58,14,33,32],[58,15,33,33],[58,19,33,37],[58,21,33,39],[59,6,33,41,"GAMMA2"],[59,12,33,47],[59,14,33,49,"GAMMA2_2"],[59,22,33,57],[60,6,33,59,"TAU"],[60,9,33,62],[60,11,33,64],[60,13,33,66],[61,6,33,68,"ETA"],[61,9,33,71],[61,11,33,73],[61,12,33,74],[62,6,33,76,"OMEGA"],[62,11,33,81],[62,13,33,83],[63,4,33,86],[64,2,34,0],[64,3,34,1],[65,2,35,0],[65,6,35,6,"newPoly"],[65,13,35,13],[65,16,35,16],[65,25,35,6,"newPoly"],[65,32,35,13,"newPoly"],[65,33,35,17,"n"],[65,34,35,18],[66,4,35,18],[66,11,35,23],[66,15,35,27,"Int32Array"],[66,25,35,37],[66,26,35,38,"n"],[66,27,35,39],[66,28,35,40],[67,2,35,40],[68,2,36,0],[68,6,36,0,"_ref"],[68,10,36,0],[68,13,36,38],[68,14,36,39],[68,15,36,40],[68,17,36,42,"_$$_REQUIRE"],[68,28,36,42],[68,29,36,42,"_dependencyMap"],[68,43,36,42],[68,66,36,57,"genCrystals"],[68,77,36,68],[68,79,36,70],[69,6,37,4,"N"],[69,7,37,5],[69,9,37,4,"N"],[69,10,37,5],[70,6,38,4,"Q"],[70,7,38,5],[70,9,38,4,"Q"],[70,10,38,5],[71,6,39,4,"F"],[71,7,39,5],[71,9,39,4,"F"],[71,10,39,5],[72,6,40,4,"ROOT_OF_UNITY"],[72,19,40,17],[72,21,40,4,"ROOT_OF_UNITY"],[72,34,40,17],[73,6,41,4,"newPoly"],[73,13,41,11],[73,15,41,4,"newPoly"],[73,22,41,11],[74,6,42,4,"isKyber"],[74,13,42,11],[74,15,42,13],[74,20,42,18],[75,6,43,4,"brvBits"],[75,13,43,11],[75,15,43,13],[76,4,44,0],[76,5,44,1],[76,6,44,2],[77,4,36,8,"mod"],[77,7,36,11],[77,10,36,11,"_ref"],[77,14,36,11],[77,15,36,8,"mod"],[77,18,36,11],[78,4,36,13,"smod"],[78,8,36,17],[78,11,36,17,"_ref"],[78,15,36,17],[78,16,36,13,"smod"],[78,20,36,17],[79,4,36,19,"NTT"],[79,7,36,22],[79,10,36,22,"_ref"],[79,14,36,22],[79,15,36,19,"NTT"],[79,18,36,22],[80,4,36,24,"bitsCoder"],[80,13,36,33],[80,16,36,33,"_ref"],[80,20,36,33],[80,21,36,24,"bitsCoder"],[80,30,36,33],[81,2,45,0],[81,6,45,6,"id"],[81,8,45,8],[81,11,45,11],[81,20,45,6,"id"],[81,22,45,8,"id"],[81,23,45,12,"n"],[81,24,45,13],[82,4,45,13],[82,11,45,18,"n"],[82,12,45,19],[83,2,45,19],[84,2,46,0],[84,6,46,6,"polyCoder"],[84,15,46,15],[84,18,46,18],[84,27,46,6,"polyCoder"],[84,36,46,15,"polyCoder"],[84,37,46,19,"d"],[84,38,46,20],[85,4,46,20],[85,8,46,22,"compress"],[85,16,46,30],[85,19,46,30,"arguments"],[85,28,46,30],[85,29,46,30,"length"],[85,35,46,30],[85,43,46,30,"arguments"],[85,52,46,30],[85,60,46,30,"undefined"],[85,69,46,30],[85,72,46,30,"arguments"],[85,81,46,30],[85,87,46,33,"id"],[85,89,46,35],[86,4,46,35],[86,8,46,37,"verify"],[86,14,46,43],[86,17,46,43,"arguments"],[86,26,46,43],[86,27,46,43,"length"],[86,33,46,43],[86,41,46,43,"arguments"],[86,50,46,43],[86,58,46,43,"undefined"],[86,67,46,43],[86,70,46,43,"arguments"],[86,79,46,43],[86,85,46,46,"id"],[86,87,46,48],[87,4,46,48],[87,11,46,53,"bitsCoder"],[87,20,46,62],[87,21,46,63,"d"],[87,22,46,64],[87,24,46,66],[88,6,47,4,"encode"],[88,12,47,10],[88,14,47,12],[88,23,47,4,"encode"],[88,29,47,10,"encode"],[88,30,47,13,"i"],[88,31,47,14],[89,8,47,14],[89,15,47,19,"compress"],[89,23,47,27],[89,24,47,28,"verify"],[89,30,47,34],[89,31,47,35,"i"],[89,32,47,36],[89,33,47,37],[89,34,47,38],[90,6,47,38],[91,6,48,4,"decode"],[91,12,48,10],[91,14,48,12],[91,23,48,4,"decode"],[91,29,48,10,"decode"],[91,30,48,13,"i"],[91,31,48,14],[92,8,48,14],[92,15,48,19,"verify"],[92,21,48,25],[92,22,48,26,"compress"],[92,30,48,34],[92,31,48,35,"i"],[92,32,48,36],[92,33,48,37],[92,34,48,38],[93,6,48,38],[94,4,49,0],[94,5,49,1],[94,6,49,2],[95,2,49,2],[96,2,50,0],[96,6,50,6,"polyAdd"],[96,13,50,13],[96,16,50,16],[96,25,50,6,"polyAdd"],[96,32,50,13,"polyAdd"],[96,33,50,17,"a"],[96,34,50,18],[96,36,50,20,"b"],[96,37,50,21],[96,39,50,26],[97,4,51,4],[97,9,51,9],[97,13,51,13,"i"],[97,14,51,14],[97,17,51,17],[97,18,51,18],[97,20,51,20,"i"],[97,21,51,21],[97,24,51,24,"a"],[97,25,51,25],[97,26,51,26,"length"],[97,32,51,32],[97,34,51,34,"i"],[97,35,51,35],[97,37,51,37],[97,39,52,8,"a"],[97,40,52,9],[97,41,52,10,"i"],[97,42,52,11],[97,43,52,12],[97,46,52,15,"mod"],[97,49,52,18],[97,50,52,19,"a"],[97,51,52,20],[97,52,52,21,"i"],[97,53,52,22],[97,54,52,23],[97,57,52,26,"b"],[97,58,52,27],[97,59,52,28,"i"],[97,60,52,29],[97,61,52,30],[97,62,52,31],[98,4,53,4],[98,11,53,11,"a"],[98,12,53,12],[99,2,54,0],[99,3,54,1],[100,2,55,0],[100,6,55,6,"polySub"],[100,13,55,13],[100,16,55,16],[100,25,55,6,"polySub"],[100,32,55,13,"polySub"],[100,33,55,17,"a"],[100,34,55,18],[100,36,55,20,"b"],[100,37,55,21],[100,39,55,26],[101,4,56,4],[101,9,56,9],[101,13,56,13,"i"],[101,14,56,14],[101,17,56,17],[101,18,56,18],[101,20,56,20,"i"],[101,21,56,21],[101,24,56,24,"a"],[101,25,56,25],[101,26,56,26,"length"],[101,32,56,32],[101,34,56,34,"i"],[101,35,56,35],[101,37,56,37],[101,39,57,8,"a"],[101,40,57,9],[101,41,57,10,"i"],[101,42,57,11],[101,43,57,12],[101,46,57,15,"mod"],[101,49,57,18],[101,50,57,19,"a"],[101,51,57,20],[101,52,57,21,"i"],[101,53,57,22],[101,54,57,23],[101,57,57,26,"b"],[101,58,57,27],[101,59,57,28,"i"],[101,60,57,29],[101,61,57,30],[101,62,57,31],[102,4,58,4],[102,11,58,11,"a"],[102,12,58,12],[103,2,59,0],[103,3,59,1],[104,2,60,0],[104,6,60,6,"polyShiftl"],[104,16,60,16],[104,19,60,19],[104,28,60,6,"polyShiftl"],[104,38,60,16,"polyShiftl"],[104,39,60,20,"p"],[104,40,60,21],[104,42,60,26],[105,4,61,4],[105,9,61,9],[105,13,61,13,"i"],[105,14,61,14],[105,17,61,17],[105,18,61,18],[105,20,61,20,"i"],[105,21,61,21],[105,24,61,24,"N"],[105,25,61,25],[105,27,61,27,"i"],[105,28,61,28],[105,30,61,30],[105,32,62,8,"p"],[105,33,62,9],[105,34,62,10,"i"],[105,35,62,11],[105,36,62,12],[105,41,62,17,"D"],[105,42,62,18],[106,4,63,4],[106,11,63,11,"p"],[106,12,63,12],[107,2,64,0],[107,3,64,1],[108,2,65,0],[108,6,65,6,"polyChknorm"],[108,17,65,17],[108,20,65,20],[108,29,65,6,"polyChknorm"],[108,40,65,17,"polyChknorm"],[108,41,65,21,"p"],[108,42,65,22],[108,44,65,24,"B"],[108,45,65,25],[108,47,65,30],[109,4,66,4],[110,4,67,4],[110,9,67,9],[110,13,67,13,"i"],[110,14,67,14],[110,17,67,17],[110,18,67,18],[110,20,67,20,"i"],[110,21,67,21],[110,24,67,24,"N"],[110,25,67,25],[110,27,67,27,"i"],[110,28,67,28],[110,30,67,30],[110,32,68,8],[110,36,68,12,"Math"],[110,40,68,16],[110,41,68,17,"abs"],[110,44,68,20],[110,45,68,21,"smod"],[110,49,68,25],[110,50,68,26,"p"],[110,51,68,27],[110,52,68,28,"i"],[110,53,68,29],[110,54,68,30],[110,55,68,31],[110,56,68,32],[110,60,68,36,"B"],[110,61,68,37],[110,63,69,12],[110,70,69,19],[110,74,69,23],[111,4,70,4],[111,11,70,11],[111,16,70,16],[112,2,71,0],[112,3,71,1],[113,2,72,0],[113,6,72,6,"MultiplyNTTs"],[113,18,72,18],[113,21,72,21],[113,30,72,6,"MultiplyNTTs"],[113,42,72,18,"MultiplyNTTs"],[113,43,72,22,"a"],[113,44,72,23],[113,46,72,25,"b"],[113,47,72,26],[113,49,72,31],[114,4,73,4],[115,4,74,4],[116,4,75,4],[117,4,76,4],[118,4,77,4],[118,8,77,10,"c"],[118,9,77,11],[118,12,77,14,"newPoly"],[118,19,77,21],[118,20,77,22,"N"],[118,21,77,23],[118,22,77,24],[119,4,78,4],[119,9,78,9],[119,13,78,13,"i"],[119,14,78,14],[119,17,78,17],[119,18,78,18],[119,20,78,20,"i"],[119,21,78,21],[119,24,78,24,"a"],[119,25,78,25],[119,26,78,26,"length"],[119,32,78,32],[119,34,78,34,"i"],[119,35,78,35],[119,37,78,37],[119,39,79,8,"c"],[119,40,79,9],[119,41,79,10,"i"],[119,42,79,11],[119,43,79,12],[119,46,79,15,"mod"],[119,49,79,18],[119,50,79,19,"a"],[119,51,79,20],[119,52,79,21,"i"],[119,53,79,22],[119,54,79,23],[119,57,79,26,"b"],[119,58,79,27],[119,59,79,28,"i"],[119,60,79,29],[119,61,79,30],[119,62,79,31],[120,4,80,4],[120,11,80,11,"c"],[120,12,80,12],[121,2,81,0],[121,3,81,1],[122,2,82,0],[123,2,83,0],[123,11,83,9,"RejNTTPoly"],[123,21,83,19,"RejNTTPoly"],[123,22,83,20,"xof"],[123,25,83,23],[123,27,83,25],[124,4,84,4],[125,4,85,4],[125,8,85,10,"r"],[125,9,85,11],[125,12,85,14,"newPoly"],[125,19,85,21],[125,20,85,22,"N"],[125,21,85,23],[125,22,85,24],[126,4,86,4],[127,4,87,4],[127,9,87,9],[127,13,87,13,"j"],[127,14,87,14],[127,17,87,17],[127,18,87,18],[127,20,87,20,"j"],[127,21,87,21],[127,24,87,24,"N"],[127,25,87,25],[127,28,87,28],[128,6,88,8],[128,10,88,14,"b"],[128,11,88,15],[128,14,88,18,"xof"],[128,17,88,21],[128,18,88,22],[128,19,88,23],[129,6,89,8],[129,10,89,12,"b"],[129,11,89,13],[129,12,89,14,"length"],[129,18,89,20],[129,21,89,23],[129,22,89,24],[129,24,90,12],[129,30,90,18],[129,34,90,22,"Error"],[129,39,90,27],[129,40,90,28],[129,69,90,57],[129,70,90,58],[130,6,91,8],[130,11,91,13],[130,15,91,17,"i"],[130,16,91,18],[130,19,91,21],[130,20,91,22],[130,22,91,24,"j"],[130,23,91,25],[130,26,91,28,"N"],[130,27,91,29],[130,31,91,33,"i"],[130,32,91,34],[130,36,91,38,"b"],[130,37,91,39],[130,38,91,40,"length"],[130,44,91,46],[130,47,91,49],[130,48,91,50],[130,50,91,52,"i"],[130,51,91,53],[130,55,91,57],[130,56,91,58],[130,58,91,60],[131,8,92,12],[131,12,92,18,"t"],[131,13,92,19],[131,16,92,22],[131,17,92,23,"b"],[131,18,92,24],[131,19,92,25,"i"],[131,20,92,26],[131,23,92,29],[131,24,92,30],[131,25,92,31],[131,28,92,35,"b"],[131,29,92,36],[131,30,92,37,"i"],[131,31,92,38],[131,34,92,41],[131,35,92,42],[131,36,92,43],[131,40,92,47],[131,41,92,49],[131,44,92,53,"b"],[131,45,92,54],[131,46,92,55,"i"],[131,47,92,56],[131,50,92,59],[131,51,92,60],[131,52,92,61],[131,56,92,65],[131,58,92,68],[131,62,92,72],[131,70,92,80],[131,71,92,81],[131,72,92,82],[132,8,93,12],[132,12,93,16,"t"],[132,13,93,17],[132,16,93,20,"Q"],[132,17,93,21],[132,19,94,16,"r"],[132,20,94,17],[132,21,94,18,"j"],[132,22,94,19],[132,24,94,21],[132,25,94,22],[132,28,94,25,"t"],[132,29,94,26],[133,6,95,8],[134,4,96,4],[135,4,97,4],[135,11,97,11,"r"],[135,12,97,12],[136,2,98,0],[137,2,99,0],[137,11,99,9,"getDilithium"],[137,23,99,21,"getDilithium"],[137,24,99,22,"opts"],[137,28,99,26],[137,30,99,28],[138,4,100,4],[138,8,100,12,"K"],[138,9,100,13],[138,12,100,54,"opts"],[138,16,100,58],[138,17,100,12,"K"],[138,18,100,13],[139,6,100,15,"L"],[139,7,100,16],[139,10,100,54,"opts"],[139,14,100,58],[139,15,100,15,"L"],[139,16,100,16],[140,6,100,18,"GAMMA1"],[140,12,100,24],[140,15,100,54,"opts"],[140,19,100,58],[140,20,100,18,"GAMMA1"],[140,26,100,24],[141,6,100,26,"GAMMA2"],[141,12,100,32],[141,15,100,54,"opts"],[141,19,100,58],[141,20,100,26,"GAMMA2"],[141,26,100,32],[142,6,100,34,"TAU"],[142,9,100,37],[142,12,100,54,"opts"],[142,16,100,58],[142,17,100,34,"TAU"],[142,20,100,37],[143,6,100,39,"ETA"],[143,9,100,42],[143,12,100,54,"opts"],[143,16,100,58],[143,17,100,39,"ETA"],[143,20,100,42],[144,6,100,44,"OMEGA"],[144,11,100,49],[144,14,100,54,"opts"],[144,18,100,58],[144,19,100,44,"OMEGA"],[144,24,100,49],[145,4,101,4],[145,8,101,12,"CRH_BYTES"],[145,17,101,21],[145,20,101,67,"opts"],[145,24,101,71],[145,25,101,12,"CRH_BYTES"],[145,34,101,21],[146,6,101,23,"TR_BYTES"],[146,14,101,31],[146,17,101,67,"opts"],[146,21,101,71],[146,22,101,23,"TR_BYTES"],[146,30,101,31],[147,6,101,33,"C_TILDE_BYTES"],[147,19,101,46],[147,22,101,67,"opts"],[147,26,101,71],[147,27,101,33,"C_TILDE_BYTES"],[147,40,101,46],[148,6,101,48,"XOF128"],[148,12,101,54],[148,15,101,67,"opts"],[148,19,101,71],[148,20,101,48,"XOF128"],[148,26,101,54],[149,6,101,56,"XOF256"],[149,12,101,62],[149,15,101,67,"opts"],[149,19,101,71],[149,20,101,56,"XOF256"],[149,26,101,62],[150,4,102,4],[150,8,102,8],[150,9,102,9],[150,10,102,10],[150,11,102,11],[150,13,102,13],[150,14,102,14],[150,15,102,15],[150,16,102,16,"includes"],[150,24,102,24],[150,25,102,25,"ETA"],[150,28,102,28],[150,29,102,29],[150,31,103,8],[150,37,103,14],[150,41,103,18,"Error"],[150,46,103,23],[150,47,103,24],[150,58,103,35],[150,59,103,36],[151,4,104,4],[151,8,104,8],[151,9,104,9],[151,10,104,10],[151,11,104,11],[151,15,104,15],[151,17,104,17],[151,19,104,19],[151,20,104,20],[151,24,104,24],[151,26,104,26],[151,27,104,27],[151,28,104,28,"includes"],[151,36,104,36],[151,37,104,37,"GAMMA1"],[151,43,104,43],[151,44,104,44],[151,46,105,8],[151,52,105,14],[151,56,105,18,"Error"],[151,61,105,23],[151,62,105,24],[151,76,105,38],[151,77,105,39],[152,4,106,4],[152,8,106,8],[152,9,106,9],[152,10,106,10,"GAMMA2_1"],[152,18,106,18],[152,20,106,20,"GAMMA2_2"],[152,28,106,28],[152,29,106,29],[152,30,106,30,"includes"],[152,38,106,38],[152,39,106,39,"GAMMA2"],[152,45,106,45],[152,46,106,46],[152,48,107,8],[152,54,107,14],[152,58,107,18,"Error"],[152,63,107,23],[152,64,107,24],[152,78,107,38],[152,79,107,39],[153,4,108,4],[153,8,108,10,"BETA"],[153,12,108,14],[153,15,108,17,"TAU"],[153,18,108,20],[153,21,108,23,"ETA"],[153,24,108,26],[154,4,109,4],[154,8,109,10,"decompose"],[154,17,109,19],[154,20,109,22],[154,29,109,10,"decompose"],[154,38,109,19,"decompose"],[154,39,109,23,"r"],[154,40,109,24],[154,42,109,29],[155,6,110,8],[156,6,111,8],[156,10,111,14,"rPlus"],[156,15,111,19],[156,18,111,22,"mod"],[156,21,111,25],[156,22,111,26,"r"],[156,23,111,27],[156,24,111,28],[157,6,112,8],[157,10,112,14,"r0"],[157,12,112,16],[157,15,112,19,"smod"],[157,19,112,23],[157,20,112,24,"rPlus"],[157,25,112,29],[157,27,112,31],[157,28,112,32],[157,31,112,35,"GAMMA2"],[157,37,112,41],[157,38,112,42],[157,41,112,45],[157,42,112,46],[158,6,113,8],[158,10,113,12,"rPlus"],[158,15,113,17],[158,18,113,20,"r0"],[158,20,113,22],[158,25,113,27,"Q"],[158,26,113,28],[158,29,113,31],[158,30,113,32],[158,32,114,12],[158,39,114,19],[159,8,114,21,"r1"],[159,10,114,23],[159,12,114,25],[159,13,114,26],[159,16,114,29],[159,17,114,30],[160,8,114,32,"r0"],[160,10,114,34],[160,12,114,37,"r0"],[160,14,114,39],[160,17,114,42],[160,18,114,43],[160,21,114,47],[161,6,114,49],[161,7,114,50],[162,6,115,8],[162,10,115,14,"r1"],[162,12,115,16],[162,15,115,19,"Math"],[162,19,115,23],[162,20,115,24,"floor"],[162,25,115,29],[162,26,115,30],[162,27,115,31,"rPlus"],[162,32,115,36],[162,35,115,39,"r0"],[162,37,115,41],[162,42,115,46],[162,43,115,47],[162,46,115,50,"GAMMA2"],[162,52,115,56],[162,53,115,57],[162,54,115,58],[162,57,115,61],[162,58,115,62],[163,6,116,8],[163,13,116,15],[164,8,116,17,"r1"],[164,10,116,19],[164,12,116,17,"r1"],[164,14,116,19],[165,8,116,21,"r0"],[165,10,116,23],[165,12,116,21,"r0"],[166,6,116,24],[166,7,116,25],[166,8,116,26],[166,9,116,27],[167,4,117,4],[167,5,117,5],[168,4,118,4],[168,8,118,10,"HighBits"],[168,16,118,18],[168,19,118,21],[168,28,118,10,"HighBits"],[168,36,118,18,"HighBits"],[168,37,118,22,"r"],[168,38,118,23],[169,6,118,23],[169,13,118,28,"decompose"],[169,22,118,37],[169,23,118,38,"r"],[169,24,118,39],[169,25,118,40],[169,26,118,41,"r1"],[169,28,118,43],[170,4,118,43],[171,4,119,4],[171,8,119,10,"LowBits"],[171,15,119,17],[171,18,119,20],[171,27,119,10,"LowBits"],[171,34,119,17,"LowBits"],[171,35,119,21,"r"],[171,36,119,22],[172,6,119,22],[172,13,119,27,"decompose"],[172,22,119,36],[172,23,119,37,"r"],[172,24,119,38],[172,25,119,39],[172,26,119,40,"r0"],[172,28,119,42],[173,4,119,42],[174,4,120,4],[174,8,120,10,"MakeHint"],[174,16,120,18],[174,19,120,21],[174,28,120,10,"MakeHint"],[174,36,120,18,"MakeHint"],[174,37,120,22,"z"],[174,38,120,23],[174,40,120,25,"r"],[174,41,120,26],[174,43,120,31],[175,6,121,8],[176,6,122,8],[177,6,123,8],[177,10,123,14,"res0"],[177,14,123,18],[177,17,123,21,"z"],[177,18,123,22],[177,22,123,26,"GAMMA2"],[177,28,123,32],[177,32,123,36,"z"],[177,33,123,37],[177,36,123,40,"Q"],[177,37,123,41],[177,40,123,44,"GAMMA2"],[177,46,123,50],[177,50,123,55,"z"],[177,51,123,56],[177,56,123,61,"Q"],[177,57,123,62],[177,60,123,65,"GAMMA2"],[177,66,123,71],[177,70,123,75,"r"],[177,71,123,76],[177,76,123,81],[177,77,123,83],[177,80,123,86],[177,81,123,87],[177,84,123,90],[177,85,123,91],[178,6,124,8],[179,6,125,8],[180,6,126,8],[181,6,127,8],[182,6,128,8],[183,6,129,8],[184,6,130,8],[185,6,131,8],[186,6,132,8],[187,6,133,8],[187,13,133,15,"res0"],[187,17,133,19],[188,4,134,4],[188,5,134,5],[189,4,135,4],[189,8,135,10,"UseHint"],[189,15,135,17],[189,18,135,20],[189,27,135,10,"UseHint"],[189,34,135,17,"UseHint"],[189,35,135,21,"h"],[189,36,135,22],[189,38,135,24,"r"],[189,39,135,25],[189,41,135,30],[190,6,136,8],[191,6,137,8],[191,10,137,14,"m"],[191,11,137,15],[191,14,137,18,"Math"],[191,18,137,22],[191,19,137,23,"floor"],[191,24,137,28],[191,25,137,29],[191,26,137,30,"Q"],[191,27,137,31],[191,30,137,34],[191,31,137,35],[191,36,137,40],[191,37,137,41],[191,40,137,44,"GAMMA2"],[191,46,137,50],[191,47,137,51],[191,48,137,52],[192,6,138,8],[192,10,138,8,"_decompose"],[192,20,138,8],[192,23,138,27,"decompose"],[192,32,138,36],[192,33,138,37,"r"],[192,34,138,38],[192,35,138,39],[193,8,138,16,"r1"],[193,10,138,18],[193,13,138,18,"_decompose"],[193,23,138,18],[193,24,138,16,"r1"],[193,26,138,18],[194,8,138,20,"r0"],[194,10,138,22],[194,13,138,22,"_decompose"],[194,23,138,22],[194,24,138,20,"r0"],[194,26,138,22],[195,6,139,8],[196,6,140,8],[197,6,141,8],[197,10,141,12,"h"],[197,11,141,13],[197,16,141,18],[197,17,141,19],[197,19,142,12],[197,26,142,19,"r0"],[197,28,142,21],[197,31,142,24],[197,32,142,25],[197,35,142,28,"mod"],[197,38,142,31],[197,39,142,32,"r1"],[197,41,142,34],[197,44,142,37],[197,45,142,38],[197,47,142,40,"m"],[197,48,142,41],[197,49,142,42],[197,52,142,45],[197,53,142,46],[197,56,142,49,"mod"],[197,59,142,52],[197,60,142,53,"r1"],[197,62,142,55],[197,65,142,58],[197,66,142,59],[197,68,142,61,"m"],[197,69,142,62],[197,70,142,63],[197,73,142,66],[197,74,142,67],[198,6,143,8],[198,13,143,15,"r1"],[198,15,143,17],[198,18,143,20],[198,19,143,21],[199,4,144,4],[199,5,144,5],[200,4,145,4],[200,8,145,10,"Power2Round"],[200,19,145,21],[200,22,145,24],[200,31,145,10,"Power2Round"],[200,42,145,21,"Power2Round"],[200,43,145,25,"r"],[200,44,145,26],[200,46,145,31],[201,6,146,8],[202,6,147,8],[202,10,147,14,"rPlus"],[202,15,147,19],[202,18,147,22,"mod"],[202,21,147,25],[202,22,147,26,"r"],[202,23,147,27],[202,24,147,28],[203,6,148,8],[203,10,148,14,"r0"],[203,12,148,16],[203,15,148,19,"smod"],[203,19,148,23],[203,20,148,24,"rPlus"],[203,25,148,29],[203,27,148,31],[203,28,148,32],[203,32,148,36,"D"],[203,33,148,37],[203,34,148,38],[203,37,148,41],[203,38,148,42],[204,6,149,8],[204,13,149,15],[205,8,149,17,"r1"],[205,10,149,19],[205,12,149,21,"Math"],[205,16,149,25],[205,17,149,26,"floor"],[205,22,149,31],[205,23,149,32],[205,24,149,33,"rPlus"],[205,29,149,38],[205,32,149,41,"r0"],[205,34,149,43],[205,38,149,47],[205,39,149,48],[205,43,149,52,"D"],[205,44,149,53],[205,45,149,54],[205,48,149,57],[205,49,149,58],[206,8,149,60,"r0"],[206,10,149,62],[206,12,149,60,"r0"],[207,6,149,63],[207,7,149,64],[208,4,150,4],[208,5,150,5],[209,4,151,4],[209,8,151,10,"hintCoder"],[209,17,151,19],[209,20,151,22],[210,6,152,8,"bytesLen"],[210,14,152,16],[210,16,152,18,"OMEGA"],[210,21,152,23],[210,24,152,26,"K"],[210,25,152,27],[211,6,153,8,"encode"],[211,12,153,14],[211,14,153,16],[211,23,153,8,"encode"],[211,29,153,14,"encode"],[211,30,153,17,"h"],[211,31,153,18],[211,33,153,23],[212,8,154,12],[212,12,154,16,"h"],[212,13,154,17],[212,18,154,22],[212,23,154,27],[212,25,155,16],[212,31,155,22],[212,35,155,26,"Error"],[212,40,155,31],[212,41,155,32],[212,69,155,60],[212,70,155,61],[212,71,155,62],[212,72,155,63],[213,8,156,12],[213,12,156,18,"res"],[213,15,156,21],[213,18,156,24],[213,22,156,28,"Uint8Array"],[213,32,156,38],[213,33,156,39,"OMEGA"],[213,38,156,44],[213,41,156,47,"K"],[213,42,156,48],[213,43,156,49],[214,8,157,12],[214,13,157,17],[214,17,157,21,"i"],[214,18,157,22],[214,21,157,25],[214,22,157,26],[214,24,157,28,"k"],[214,25,157,29],[214,28,157,32],[214,29,157,33],[214,31,157,35,"i"],[214,32,157,36],[214,35,157,39,"K"],[214,36,157,40],[214,38,157,42,"i"],[214,39,157,43],[214,41,157,45],[214,43,157,47],[215,10,158,16],[215,15,158,21],[215,19,158,25,"j"],[215,20,158,26],[215,23,158,29],[215,24,158,30],[215,26,158,32,"j"],[215,27,158,33],[215,30,158,36,"N"],[215,31,158,37],[215,33,158,39,"j"],[215,34,158,40],[215,36,158,42],[215,38,159,20],[215,42,159,24,"h"],[215,43,159,25],[215,44,159,26,"i"],[215,45,159,27],[215,46,159,28],[215,47,159,29,"j"],[215,48,159,30],[215,49,159,31],[215,54,159,36],[215,55,159,37],[215,57,160,24,"res"],[215,60,160,27],[215,61,160,28,"k"],[215,62,160,29],[215,64,160,31],[215,65,160,32],[215,68,160,35,"j"],[215,69,160,36],[216,10,161,16,"res"],[216,13,161,19],[216,14,161,20,"OMEGA"],[216,19,161,25],[216,22,161,28,"i"],[216,23,161,29],[216,24,161,30],[216,27,161,33,"k"],[216,28,161,34],[217,8,162,12],[218,8,163,12],[218,15,163,19,"res"],[218,18,163,22],[219,6,164,8],[219,7,164,9],[220,6,165,8,"decode"],[220,12,165,14],[220,14,165,16],[220,23,165,8,"decode"],[220,29,165,14,"decode"],[220,30,165,17,"buf"],[220,33,165,20],[220,35,165,25],[221,8,166,12],[221,12,166,18,"h"],[221,13,166,19],[221,16,166,22],[221,18,166,24],[222,8,167,12],[222,12,167,16,"k"],[222,13,167,17],[222,16,167,20],[222,17,167,21],[223,8,168,12],[223,13,168,17],[223,17,168,21,"i"],[223,18,168,22],[223,21,168,25],[223,22,168,26],[223,24,168,28,"i"],[223,25,168,29],[223,28,168,32,"K"],[223,29,168,33],[223,31,168,35,"i"],[223,32,168,36],[223,34,168,38],[223,36,168,40],[224,10,169,16],[224,14,169,22,"hi"],[224,16,169,24],[224,19,169,27,"newPoly"],[224,26,169,34],[224,27,169,35,"N"],[224,28,169,36],[224,29,169,37],[225,10,170,16],[225,14,170,20,"buf"],[225,17,170,23],[225,18,170,24,"OMEGA"],[225,23,170,29],[225,26,170,32,"i"],[225,27,170,33],[225,28,170,34],[225,31,170,37,"k"],[225,32,170,38],[225,36,170,42,"buf"],[225,39,170,45],[225,40,170,46,"OMEGA"],[225,45,170,51],[225,48,170,54,"i"],[225,49,170,55],[225,50,170,56],[225,53,170,59,"OMEGA"],[225,58,170,64],[225,60,171,20],[225,67,171,27],[225,72,171,32],[226,10,172,16],[226,15,172,21],[226,19,172,25,"j"],[226,20,172,26],[226,23,172,29,"k"],[226,24,172,30],[226,26,172,32,"j"],[226,27,172,33],[226,30,172,36,"buf"],[226,33,172,39],[226,34,172,40,"OMEGA"],[226,39,172,45],[226,42,172,48,"i"],[226,43,172,49],[226,44,172,50],[226,46,172,52,"j"],[226,47,172,53],[226,49,172,55],[226,51,172,57],[227,12,173,20],[227,16,173,24,"j"],[227,17,173,25],[227,20,173,28,"k"],[227,21,173,29],[227,25,173,33,"buf"],[227,28,173,36],[227,29,173,37,"j"],[227,30,173,38],[227,31,173,39],[227,35,173,43,"buf"],[227,38,173,46],[227,39,173,47,"j"],[227,40,173,48],[227,43,173,51],[227,44,173,52],[227,45,173,53],[227,47,174,24],[227,54,174,31],[227,59,174,36],[228,12,175,20,"hi"],[228,14,175,22],[228,15,175,23,"buf"],[228,18,175,26],[228,19,175,27,"j"],[228,20,175,28],[228,21,175,29],[228,22,175,30],[228,25,175,33],[228,26,175,34],[229,10,176,16],[230,10,177,16,"k"],[230,11,177,17],[230,14,177,20,"buf"],[230,17,177,23],[230,18,177,24,"OMEGA"],[230,23,177,29],[230,26,177,32,"i"],[230,27,177,33],[230,28,177,34],[231,10,178,16,"h"],[231,11,178,17],[231,12,178,18,"push"],[231,16,178,22],[231,17,178,23,"hi"],[231,19,178,25],[231,20,178,26],[232,8,179,12],[233,8,180,12],[233,13,180,17],[233,17,180,21,"j"],[233,19,180,22],[233,22,180,25,"k"],[233,23,180,26],[233,25,180,28,"j"],[233,27,180,29],[233,30,180,32,"OMEGA"],[233,35,180,37],[233,37,180,39,"j"],[233,39,180,40],[233,41,180,42],[233,43,181,16],[233,47,181,20,"buf"],[233,50,181,23],[233,51,181,24,"j"],[233,53,181,25],[233,54,181,26],[233,59,181,31],[233,60,181,32],[233,62,182,20],[233,69,182,27],[233,74,182,32],[234,8,183,12],[234,15,183,19,"h"],[234,16,183,20],[235,6,184,8],[236,4,185,4],[236,5,185,5],[237,4,186,4],[237,8,186,10,"ETACoder"],[237,16,186,18],[237,19,186,21,"polyCoder"],[237,28,186,30],[237,29,186,31,"ETA"],[237,32,186,34],[237,37,186,39],[237,38,186,40],[237,41,186,43],[237,42,186,44],[237,45,186,47],[237,46,186,48],[237,48,186,50],[237,58,186,51,"i"],[237,59,186,52],[238,6,186,52],[238,13,186,57,"ETA"],[238,16,186,60],[238,19,186,63,"i"],[238,20,186,64],[239,4,186,64],[239,7,186,66],[239,17,186,67,"i"],[239,18,186,68],[239,20,186,73],[240,6,187,8],[240,10,187,12],[240,12,187,14],[240,13,187,15,"ETA"],[240,16,187,18],[240,20,187,22,"i"],[240,21,187,23],[240,25,187,27,"i"],[240,26,187,28],[240,30,187,32,"ETA"],[240,33,187,35],[240,34,187,36],[240,36,188,12],[240,42,188,18],[240,46,188,22,"Error"],[240,51,188,27],[240,52,188,28],[240,75,188,51,"i"],[240,76,188,52],[240,102,188,78],[240,103,188,79,"ETA"],[240,106,188,82],[240,111,188,87,"ETA"],[240,114,188,90],[240,117,188,93],[240,118,188,94],[241,6,189,8],[241,13,189,15,"i"],[241,14,189,16],[242,4,190,4],[242,5,190,5],[242,6,190,6],[243,4,191,4],[243,8,191,10,"T0Coder"],[243,15,191,17],[243,18,191,20,"polyCoder"],[243,27,191,29],[243,28,191,30],[243,30,191,32],[243,32,191,34],[243,42,191,35,"i"],[243,43,191,36],[244,6,191,36],[244,13,191,41],[244,14,191,42],[244,15,191,43],[244,19,191,48,"D"],[244,20,191,49],[244,23,191,52],[244,24,191,54],[244,28,191,58,"i"],[244,29,191,59],[245,4,191,59],[245,6,191,60],[246,4,192,4],[246,8,192,10,"T1Coder"],[246,15,192,17],[246,18,192,20,"polyCoder"],[246,27,192,29],[246,28,192,30],[246,30,192,32],[246,31,192,33],[247,4,193,4],[248,4,194,4],[248,8,194,10,"ZCoder"],[248,14,194,16],[248,17,194,19,"polyCoder"],[248,26,194,28],[248,27,194,29,"GAMMA1"],[248,33,194,35],[248,38,194,40],[248,39,194,41],[248,43,194,45],[248,45,194,47],[248,48,194,50],[248,50,194,52],[248,53,194,55],[248,55,194,57],[248,57,194,59],[248,67,194,60,"i"],[248,68,194,61],[249,6,194,61],[249,13,194,66,"smod"],[249,17,194,70],[249,18,194,71,"GAMMA1"],[249,24,194,77],[249,27,194,80,"i"],[249,28,194,81],[249,29,194,82],[250,4,194,82],[250,6,194,83],[251,4,195,4],[251,8,195,10,"W1Coder"],[251,15,195,17],[251,18,195,20,"polyCoder"],[251,27,195,29],[251,28,195,30,"GAMMA2"],[251,34,195,36],[251,39,195,41,"GAMMA2_1"],[251,47,195,49],[251,50,195,52],[251,51,195,53],[251,54,195,56],[251,55,195,57],[251,56,195,58],[252,4,196,4],[252,8,196,10,"W1Vec"],[252,13,196,15],[252,16,196,18],[252,17,196,19],[252,18,196,20],[252,20,196,22,"_$$_REQUIRE"],[252,31,196,22],[252,32,196,22,"_dependencyMap"],[252,46,196,22],[252,65,196,33,"vecCoder"],[252,73,196,41],[252,75,196,43,"W1Coder"],[252,82,196,50],[252,84,196,52,"K"],[252,85,196,53],[252,86,196,54],[253,4,197,4],[254,4,198,4],[254,8,198,10,"publicCoder"],[254,19,198,21],[254,22,198,24],[254,23,198,25],[254,24,198,26],[254,26,198,28,"_$$_REQUIRE"],[254,37,198,28],[254,38,198,28,"_dependencyMap"],[254,52,198,28],[254,71,198,39,"splitCoder"],[254,81,198,49],[254,83,198,51],[254,85,198,53],[254,87,198,55],[254,88,198,56],[254,89,198,57],[254,91,198,59,"_$$_REQUIRE"],[254,102,198,59],[254,103,198,59,"_dependencyMap"],[254,117,198,59],[254,136,198,70,"vecCoder"],[254,144,198,78],[254,146,198,80,"T1Coder"],[254,153,198,87],[254,155,198,89,"K"],[254,156,198,90],[254,157,198,91],[254,158,198,92],[255,4,199,4],[255,8,199,10,"secretCoder"],[255,19,199,21],[255,22,199,24],[255,23,199,25],[255,24,199,26],[255,26,199,28,"_$$_REQUIRE"],[255,37,199,28],[255,38,199,28,"_dependencyMap"],[255,52,199,28],[255,71,199,39,"splitCoder"],[255,81,199,49],[255,83,199,51],[255,85,199,53],[255,87,199,55],[255,89,199,57],[255,91,199,59,"TR_BYTES"],[255,99,199,67],[255,101,199,69],[255,102,199,70],[255,103,199,71],[255,105,199,73,"_$$_REQUIRE"],[255,116,199,73],[255,117,199,73,"_dependencyMap"],[255,131,199,73],[255,150,199,84,"vecCoder"],[255,158,199,92],[255,160,199,94,"ETACoder"],[255,168,199,102],[255,170,199,104,"L"],[255,171,199,105],[255,172,199,106],[255,174,199,108],[255,175,199,109],[255,176,199,110],[255,178,199,112,"_$$_REQUIRE"],[255,189,199,112],[255,190,199,112,"_dependencyMap"],[255,204,199,112],[255,223,199,123,"vecCoder"],[255,231,199,131],[255,233,199,133,"ETACoder"],[255,241,199,141],[255,243,199,143,"K"],[255,244,199,144],[255,245,199,145],[255,247,199,147],[255,248,199,148],[255,249,199,149],[255,251,199,151,"_$$_REQUIRE"],[255,262,199,151],[255,263,199,151,"_dependencyMap"],[255,277,199,151],[255,296,199,162,"vecCoder"],[255,304,199,170],[255,306,199,172,"T0Coder"],[255,313,199,179],[255,315,199,181,"K"],[255,316,199,182],[255,317,199,183],[255,318,199,184],[256,4,200,4],[256,8,200,10,"sigCoder"],[256,16,200,18],[256,19,200,21],[256,20,200,22],[256,21,200,23],[256,23,200,25,"_$$_REQUIRE"],[256,34,200,25],[256,35,200,25,"_dependencyMap"],[256,49,200,25],[256,68,200,36,"splitCoder"],[256,78,200,46],[256,80,200,48,"C_TILDE_BYTES"],[256,93,200,61],[256,95,200,63],[256,96,200,64],[256,97,200,65],[256,99,200,67,"_$$_REQUIRE"],[256,110,200,67],[256,111,200,67,"_dependencyMap"],[256,125,200,67],[256,144,200,78,"vecCoder"],[256,152,200,86],[256,154,200,88,"ZCoder"],[256,160,200,94],[256,162,200,96,"L"],[256,163,200,97],[256,164,200,98],[256,166,200,100,"hintCoder"],[256,175,200,109],[256,176,200,110],[257,4,201,4],[257,8,201,10,"CoefFromHalfByte"],[257,24,201,26],[257,27,201,29,"ETA"],[257,30,201,32],[257,35,201,37],[257,36,201,38],[257,39,202,10],[257,49,202,11,"n"],[257,50,202,12],[258,6,202,12],[258,13,202,18,"n"],[258,14,202,19],[258,17,202,22],[258,19,202,24],[258,22,202,27],[258,23,202,28],[258,26,202,32,"n"],[258,27,202,33],[258,30,202,36],[258,31,202,38],[258,34,202,41],[258,39,202,46],[259,4,202,46],[259,5,202,47],[259,8,203,10],[259,18,203,11,"n"],[259,19,203,12],[260,6,203,12],[260,13,203,18,"n"],[260,14,203,19],[260,17,203,22],[260,18,203,23],[260,21,203,26],[260,22,203,27],[260,25,203,30,"n"],[260,26,203,31],[260,29,203,34],[260,34,203,39],[261,4,203,39],[261,5,203,40],[262,4,204,4],[263,4,205,4],[263,13,205,13,"RejBoundedPoly"],[263,27,205,27,"RejBoundedPoly"],[263,28,205,28,"xof"],[263,31,205,31],[263,33,205,33],[264,6,206,8],[265,6,207,8],[265,10,207,14,"r"],[265,11,207,15],[265,14,207,18,"newPoly"],[265,21,207,25],[265,22,207,26,"N"],[265,23,207,27],[265,24,207,28],[266,6,208,8],[266,11,208,13],[266,15,208,17,"j"],[266,16,208,18],[266,19,208,21],[266,20,208,22],[266,22,208,24,"j"],[266,23,208,25],[266,26,208,28,"N"],[266,27,208,29],[266,30,208,32],[267,8,209,12],[267,12,209,18,"b"],[267,13,209,19],[267,16,209,22,"xof"],[267,19,209,25],[267,20,209,26],[267,21,209,27],[268,8,210,12],[268,13,210,17],[268,17,210,21,"i"],[268,18,210,22],[268,21,210,25],[268,22,210,26],[268,24,210,28,"j"],[268,25,210,29],[268,28,210,32,"N"],[268,29,210,33],[268,33,210,37,"i"],[268,34,210,38],[268,37,210,41,"b"],[268,38,210,42],[268,39,210,43,"length"],[268,45,210,49],[268,47,210,51,"i"],[268,48,210,52],[268,52,210,56],[268,53,210,57],[268,55,210,59],[269,10,211,16],[270,10,212,16],[270,14,212,22,"d1"],[270,16,212,24],[270,19,212,27,"CoefFromHalfByte"],[270,35,212,43],[270,36,212,44,"b"],[270,37,212,45],[270,38,212,46,"i"],[270,39,212,47],[270,40,212,48],[270,43,212,51],[270,47,212,55],[270,48,212,56],[271,10,213,16],[271,14,213,22,"d2"],[271,16,213,24],[271,19,213,27,"CoefFromHalfByte"],[271,35,213,43],[271,36,213,45,"b"],[271,37,213,46],[271,38,213,47,"i"],[271,39,213,48],[271,40,213,49],[271,44,213,53],[271,45,213,54],[271,48,213,58],[271,52,213,62],[271,53,213,63],[272,10,214,16],[272,14,214,20,"d1"],[272,16,214,22],[272,21,214,27],[272,26,214,32],[272,28,215,20,"r"],[272,29,215,21],[272,30,215,22,"j"],[272,31,215,23],[272,33,215,25],[272,34,215,26],[272,37,215,29,"d1"],[272,39,215,31],[273,10,216,16],[273,14,216,20,"j"],[273,15,216,21],[273,18,216,24,"N"],[273,19,216,25],[273,23,216,29,"d2"],[273,25,216,31],[273,30,216,36],[273,35,216,41],[273,37,217,20,"r"],[273,38,217,21],[273,39,217,22,"j"],[273,40,217,23],[273,42,217,25],[273,43,217,26],[273,46,217,29,"d2"],[273,48,217,31],[274,8,218,12],[275,6,219,8],[276,6,220,8],[276,13,220,15,"r"],[276,14,220,16],[277,4,221,4],[278,4,222,4],[278,8,222,10,"SampleInBall"],[278,20,222,22],[278,23,222,25],[278,32,222,10,"SampleInBall"],[278,44,222,22,"SampleInBall"],[278,45,222,26,"seed"],[278,49,222,30],[278,51,222,35],[279,6,223,8],[280,6,224,8],[280,10,224,14,"pre"],[280,13,224,17],[280,16,224,20,"newPoly"],[280,23,224,27],[280,24,224,28,"N"],[280,25,224,29],[280,26,224,30],[281,6,225,8],[281,10,225,14,"s"],[281,11,225,15],[281,14,225,18,"_$$_REQUIRE"],[281,25,225,18],[281,26,225,18,"_dependencyMap"],[281,40,225,18],[281,67,225,25,"shake256"],[281,75,225,33],[281,76,225,34,"create"],[281,82,225,40],[281,83,225,41],[281,84,225,42],[281,85,225,43],[281,86,225,44],[281,87,225,45,"update"],[281,93,225,51],[281,94,225,52,"seed"],[281,98,225,56],[281,99,225,57],[282,6,226,8],[282,10,226,14,"buf"],[282,13,226,17],[282,16,226,20],[282,20,226,24,"Uint8Array"],[282,30,226,34],[282,31,226,35,"_$$_REQUIRE"],[282,42,226,35],[282,43,226,35,"_dependencyMap"],[282,57,226,35],[282,84,226,42,"shake256"],[282,92,226,50],[282,93,226,51,"blockLen"],[282,101,226,59],[282,102,226,60],[283,6,227,8,"s"],[283,7,227,9],[283,8,227,10,"xofInto"],[283,15,227,17],[283,16,227,18,"buf"],[283,19,227,21],[283,20,227,22],[284,6,228,8],[284,10,228,14,"masks"],[284,15,228,19],[284,18,228,22,"buf"],[284,21,228,25],[284,22,228,26,"slice"],[284,27,228,31],[284,28,228,32],[284,29,228,33],[284,31,228,35],[284,32,228,36],[284,33,228,37],[285,6,229,8],[285,11,229,13],[285,15,229,17,"i"],[285,16,229,18],[285,19,229,21,"N"],[285,20,229,22],[285,23,229,25,"TAU"],[285,26,229,28],[285,28,229,30,"pos"],[285,31,229,33],[285,34,229,36],[285,35,229,37],[285,37,229,39,"maskPos"],[285,44,229,46],[285,47,229,49],[285,48,229,50],[285,50,229,52,"maskBit"],[285,57,229,59],[285,60,229,62],[285,61,229,63],[285,63,229,65,"i"],[285,64,229,66],[285,67,229,69,"N"],[285,68,229,70],[285,70,229,72,"i"],[285,71,229,73],[285,73,229,75],[285,75,229,77],[286,8,230,12],[286,12,230,16,"b"],[286,13,230,17],[286,16,230,20,"i"],[286,17,230,21],[286,20,230,24],[286,21,230,25],[287,8,231,12],[287,15,231,19,"b"],[287,16,231,20],[287,19,231,23,"i"],[287,20,231,24],[287,23,231,27],[288,10,232,16,"b"],[288,11,232,17],[288,14,232,20,"buf"],[288,17,232,23],[288,18,232,24,"pos"],[288,21,232,27],[288,23,232,29],[288,24,232,30],[289,10,233,16],[289,14,233,20,"pos"],[289,17,233,23],[289,20,233,26,"_$$_REQUIRE"],[289,31,233,26],[289,32,233,26,"_dependencyMap"],[289,46,233,26],[289,73,233,33,"shake256"],[289,81,233,41],[289,82,233,42,"blockLen"],[289,90,233,50],[289,92,234,20],[290,10,235,16,"s"],[290,11,235,17],[290,12,235,18,"xofInto"],[290,19,235,25],[290,20,235,26,"buf"],[290,23,235,29],[290,24,235,30],[291,10,236,16,"pos"],[291,13,236,19],[291,16,236,22],[291,17,236,23],[292,8,237,12],[293,8,238,12,"pre"],[293,11,238,15],[293,12,238,16,"i"],[293,13,238,17],[293,14,238,18],[293,17,238,21,"pre"],[293,20,238,24],[293,21,238,25,"b"],[293,22,238,26],[293,23,238,27],[294,8,239,12,"pre"],[294,11,239,15],[294,12,239,16,"b"],[294,13,239,17],[294,14,239,18],[294,17,239,21],[294,18,239,22],[294,22,239,26],[294,23,239,28,"masks"],[294,28,239,33],[294,29,239,34,"maskPos"],[294,36,239,41],[294,37,239,42],[294,41,239,46,"maskBit"],[294,48,239,53],[294,50,239,55],[294,53,239,59],[294,54,239,60],[294,59,239,65],[294,60,239,66],[294,61,239,67],[295,8,240,12],[295,12,240,16,"maskBit"],[295,19,240,23],[295,23,240,27],[295,24,240,28],[295,26,240,30],[296,10,241,16,"maskPos"],[296,17,241,23],[296,19,241,25],[297,10,242,16,"maskBit"],[297,17,242,23],[297,20,242,26],[297,21,242,27],[298,8,243,12],[299,6,244,8],[300,6,245,8],[300,13,245,15,"pre"],[300,16,245,18],[301,4,246,4],[301,5,246,5],[302,4,247,4],[302,8,247,10,"polyPowerRound"],[302,22,247,24],[302,25,247,27],[302,34,247,10,"polyPowerRound"],[302,48,247,24,"polyPowerRound"],[302,49,247,28,"p"],[302,50,247,29],[302,52,247,34],[303,6,248,8],[303,10,248,14,"res0"],[303,14,248,18],[303,17,248,21,"newPoly"],[303,24,248,28],[303,25,248,29,"N"],[303,26,248,30],[303,27,248,31],[304,6,249,8],[304,10,249,14,"res1"],[304,14,249,18],[304,17,249,21,"newPoly"],[304,24,249,28],[304,25,249,29,"N"],[304,26,249,30],[304,27,249,31],[305,6,250,8],[305,11,250,13],[305,15,250,17,"i"],[305,16,250,18],[305,19,250,21],[305,20,250,22],[305,22,250,24,"i"],[305,23,250,25],[305,26,250,28,"p"],[305,27,250,29],[305,28,250,30,"length"],[305,34,250,36],[305,36,250,38,"i"],[305,37,250,39],[305,39,250,41],[305,41,250,43],[306,8,251,12],[306,12,251,12,"_Power2Round"],[306,24,251,12],[306,27,251,31,"Power2Round"],[306,38,251,42],[306,39,251,43,"p"],[306,40,251,44],[306,41,251,45,"i"],[306,42,251,46],[306,43,251,47],[306,44,251,48],[307,10,251,20,"r0"],[307,12,251,22],[307,15,251,22,"_Power2Round"],[307,27,251,22],[307,28,251,20,"r0"],[307,30,251,22],[308,10,251,24,"r1"],[308,12,251,26],[308,15,251,26,"_Power2Round"],[308,27,251,26],[308,28,251,24,"r1"],[308,30,251,26],[309,8,252,12,"res0"],[309,12,252,16],[309,13,252,17,"i"],[309,14,252,18],[309,15,252,19],[309,18,252,22,"r0"],[309,20,252,24],[310,8,253,12,"res1"],[310,12,253,16],[310,13,253,17,"i"],[310,14,253,18],[310,15,253,19],[310,18,253,22,"r1"],[310,20,253,24],[311,6,254,8],[312,6,255,8],[312,13,255,15],[313,8,255,17,"r0"],[313,10,255,19],[313,12,255,21,"res0"],[313,16,255,25],[314,8,255,27,"r1"],[314,10,255,29],[314,12,255,31,"res1"],[315,6,255,36],[315,7,255,37],[316,4,256,4],[316,5,256,5],[317,4,257,4],[317,8,257,10,"polyUseHint"],[317,19,257,21],[317,22,257,24],[317,31,257,10,"polyUseHint"],[317,42,257,21,"polyUseHint"],[317,43,257,25,"u"],[317,44,257,26],[317,46,257,28,"h"],[317,47,257,29],[317,49,257,34],[318,6,258,8],[318,11,258,13],[318,15,258,17,"i"],[318,16,258,18],[318,19,258,21],[318,20,258,22],[318,22,258,24,"i"],[318,23,258,25],[318,26,258,28,"N"],[318,27,258,29],[318,29,258,31,"i"],[318,30,258,32],[318,32,258,34],[318,34,259,12,"u"],[318,35,259,13],[318,36,259,14,"i"],[318,37,259,15],[318,38,259,16],[318,41,259,19,"UseHint"],[318,48,259,26],[318,49,259,27,"h"],[318,50,259,28],[318,51,259,29,"i"],[318,52,259,30],[318,53,259,31],[318,55,259,33,"u"],[318,56,259,34],[318,57,259,35,"i"],[318,58,259,36],[318,59,259,37],[318,60,259,38],[319,6,260,8],[319,13,260,15,"u"],[319,14,260,16],[320,4,261,4],[320,5,261,5],[321,4,262,4],[321,8,262,10,"polyMakeHint"],[321,20,262,22],[321,23,262,25],[321,32,262,10,"polyMakeHint"],[321,44,262,22,"polyMakeHint"],[321,45,262,26,"a"],[321,46,262,27],[321,48,262,29,"b"],[321,49,262,30],[321,51,262,35],[322,6,263,8],[322,10,263,14,"v"],[322,11,263,15],[322,14,263,18,"newPoly"],[322,21,263,25],[322,22,263,26,"N"],[322,23,263,27],[322,24,263,28],[323,6,264,8],[323,10,264,12,"cnt"],[323,13,264,15],[323,16,264,18],[323,17,264,19],[324,6,265,8],[324,11,265,13],[324,15,265,17,"i"],[324,16,265,18],[324,19,265,21],[324,20,265,22],[324,22,265,24,"i"],[324,23,265,25],[324,26,265,28,"N"],[324,27,265,29],[324,29,265,31,"i"],[324,30,265,32],[324,32,265,34],[324,34,265,36],[325,8,266,12],[325,12,266,18,"h"],[325,13,266,19],[325,16,266,22,"MakeHint"],[325,24,266,30],[325,25,266,31,"a"],[325,26,266,32],[325,27,266,33,"i"],[325,28,266,34],[325,29,266,35],[325,31,266,37,"b"],[325,32,266,38],[325,33,266,39,"i"],[325,34,266,40],[325,35,266,41],[325,36,266,42],[326,8,267,12,"v"],[326,9,267,13],[326,10,267,14,"i"],[326,11,267,15],[326,12,267,16],[326,15,267,19,"h"],[326,16,267,20],[327,8,268,12,"cnt"],[327,11,268,15],[327,15,268,19,"h"],[327,16,268,20],[328,6,269,8],[329,6,270,8],[329,13,270,15],[330,8,270,17,"v"],[330,9,270,18],[330,11,270,17,"v"],[330,12,270,18],[331,8,270,20,"cnt"],[331,11,270,23],[331,13,270,20,"cnt"],[332,6,270,24],[332,7,270,25],[333,4,271,4],[333,5,271,5],[334,4,272,4],[334,8,272,10,"signRandBytes"],[334,21,272,23],[334,24,272,26],[334,26,272,28],[335,4,273,4],[335,8,273,10,"seedCoder"],[335,17,273,19],[335,20,273,22],[335,21,273,23],[335,22,273,24],[335,24,273,26,"_$$_REQUIRE"],[335,35,273,26],[335,36,273,26,"_dependencyMap"],[335,50,273,26],[335,69,273,37,"splitCoder"],[335,79,273,47],[335,81,273,49],[335,83,273,51],[335,85,273,53],[335,87,273,55],[335,89,273,57],[335,91,273,59],[335,92,273,60],[336,4,274,4],[337,4,275,4],[337,8,275,10,"internal"],[337,16,275,18],[337,19,275,21],[338,6,276,8,"signRandBytes"],[338,19,276,21],[338,21,276,8,"signRandBytes"],[338,34,276,21],[339,6,277,8,"keygen"],[339,12,277,14],[339,14,277,16],[339,23,277,8,"keygen"],[339,29,277,14,"keygen"],[339,30,277,17,"seed"],[339,34,277,21],[339,36,277,26],[340,8,278,12],[341,8,279,12],[341,12,279,18,"seedDst"],[341,19,279,25],[341,22,279,28],[341,26,279,32,"Uint8Array"],[341,36,279,42],[341,37,279,43],[341,39,279,45],[341,42,279,48],[341,43,279,49],[341,44,279,50],[342,8,280,12],[342,12,280,18,"randSeed"],[342,20,280,26],[342,23,280,29,"seed"],[342,27,280,33],[342,32,280,38,"undefined"],[342,41,280,47],[343,8,281,12],[343,12,281,16,"randSeed"],[343,20,281,24],[343,22,282,16,"seed"],[343,26,282,20],[343,29,282,23],[343,30,282,24],[343,31,282,25],[343,33,282,27,"_$$_REQUIRE"],[343,44,282,27],[343,45,282,27,"_dependencyMap"],[343,59,282,27],[343,78,282,38,"randomBytes"],[343,89,282,49],[343,91,282,51],[343,93,282,53],[343,94,282,54],[344,8,283,12],[344,9,283,13],[344,10,283,14],[344,12,283,16,"_$$_REQUIRE"],[344,23,283,16],[344,24,283,16,"_dependencyMap"],[344,38,283,16],[344,57,283,27,"ensureBytes"],[344,68,283,38],[344,70,283,40,"seed"],[344,74,283,44],[344,76,283,46],[344,78,283,48],[344,79,283,49],[345,8,284,12,"seedDst"],[345,15,284,19],[345,16,284,20,"set"],[345,19,284,23],[345,20,284,24,"seed"],[345,24,284,28],[345,25,284,29],[346,8,285,12],[346,12,285,16,"randSeed"],[346,20,285,24],[346,22,286,16,"seed"],[346,26,286,20],[346,27,286,21,"fill"],[346,31,286,25],[346,32,286,26],[346,33,286,27],[346,34,286,28],[347,8,287,12,"seedDst"],[347,15,287,19],[347,16,287,20],[347,18,287,22],[347,19,287,23],[347,22,287,26,"K"],[347,23,287,27],[348,8,288,12,"seedDst"],[348,15,288,19],[348,16,288,20],[348,18,288,22],[348,19,288,23],[348,22,288,26,"L"],[348,23,288,27],[349,8,289,12],[349,12,289,12,"_seedCoder$decode"],[349,29,289,12],[349,32,289,40,"seedCoder"],[349,41,289,49],[349,42,289,50,"decode"],[349,48,289,56],[349,49,289,57],[349,50,289,58],[349,51,289,59],[349,53,289,61,"_$$_REQUIRE"],[349,64,289,61],[349,65,289,61,"_dependencyMap"],[349,79,289,61],[349,106,289,68,"shake256"],[349,114,289,76],[349,116,289,78,"seedDst"],[349,123,289,85],[349,125,289,87],[350,12,289,89,"dkLen"],[350,17,289,94],[350,19,289,96,"seedCoder"],[350,28,289,105],[350,29,289,106,"bytesLen"],[351,10,289,115],[351,11,289,116],[351,12,289,117],[351,13,289,118],[352,10,289,118,"_seedCoder$decode2"],[352,28,289,118],[352,31,289,118,"_slicedToArray"],[352,45,289,118],[352,46,289,118,"_seedCoder$decode"],[352,63,289,118],[353,10,289,19,"rho"],[353,13,289,22],[353,16,289,22,"_seedCoder$decode2"],[353,34,289,22],[354,10,289,24,"rhoPrime"],[354,18,289,32],[354,21,289,32,"_seedCoder$decode2"],[354,39,289,32],[355,10,289,34,"K_"],[355,12,289,36],[355,15,289,36,"_seedCoder$decode2"],[355,33,289,36],[356,8,290,12],[356,12,290,18,"xofPrime"],[356,20,290,26],[356,23,290,29,"XOF256"],[356,29,290,35],[356,30,290,36,"rhoPrime"],[356,38,290,44],[356,39,290,45],[357,8,291,12],[357,12,291,18,"s1"],[357,14,291,20],[357,17,291,23],[357,19,291,25],[358,8,292,12],[358,13,292,17],[358,17,292,21,"i"],[358,18,292,22],[358,21,292,25],[358,22,292,26],[358,24,292,28,"i"],[358,25,292,29],[358,28,292,32,"L"],[358,29,292,33],[358,31,292,35,"i"],[358,32,292,36],[358,34,292,38],[358,36,293,16,"s1"],[358,38,293,18],[358,39,293,19,"push"],[358,43,293,23],[358,44,293,24,"RejBoundedPoly"],[358,58,293,38],[358,59,293,39,"xofPrime"],[358,67,293,47],[358,68,293,48,"get"],[358,71,293,51],[358,72,293,52,"i"],[358,73,293,53],[358,76,293,56],[358,80,293,60],[358,82,293,63,"i"],[358,83,293,64],[358,87,293,68],[358,88,293,69],[358,91,293,73],[358,95,293,77],[358,96,293,78],[358,97,293,79],[358,98,293,80],[359,8,294,12],[359,12,294,18,"s2"],[359,14,294,20],[359,17,294,23],[359,19,294,25],[360,8,295,12],[360,13,295,17],[360,17,295,21,"i"],[360,19,295,22],[360,22,295,25,"L"],[360,23,295,26],[360,25,295,28,"i"],[360,27,295,29],[360,30,295,32,"L"],[360,31,295,33],[360,34,295,36,"K"],[360,35,295,37],[360,37,295,39,"i"],[360,39,295,40],[360,41,295,42],[360,43,296,16,"s2"],[360,45,296,18],[360,46,296,19,"push"],[360,50,296,23],[360,51,296,24,"RejBoundedPoly"],[360,65,296,38],[360,66,296,39,"xofPrime"],[360,74,296,47],[360,75,296,48,"get"],[360,78,296,51],[360,79,296,52,"i"],[360,81,296,53],[360,84,296,56],[360,88,296,60],[360,90,296,63,"i"],[360,92,296,64],[360,96,296,68],[360,97,296,69],[360,100,296,73],[360,104,296,77],[360,105,296,78],[360,106,296,79],[360,107,296,80],[361,8,297,12],[361,12,297,18,"s1Hat"],[361,17,297,23],[361,20,297,26,"s1"],[361,22,297,28],[361,23,297,29,"map"],[361,26,297,32],[361,27,297,33],[361,37,297,34,"i"],[361,38,297,35],[362,10,297,35],[362,17,297,40,"NTT"],[362,20,297,43],[362,21,297,44,"encode"],[362,27,297,50],[362,28,297,51,"i"],[362,29,297,52],[362,30,297,53,"slice"],[362,35,297,58],[362,36,297,59],[362,37,297,60],[362,38,297,61],[363,8,297,61],[363,10,297,62],[364,8,298,12],[364,12,298,18,"t0"],[364,14,298,20],[364,17,298,23],[364,19,298,25],[365,8,299,12],[365,12,299,18,"t1"],[365,14,299,20],[365,17,299,23],[365,19,299,25],[366,8,300,12],[366,12,300,18,"xof"],[366,15,300,21],[366,18,300,24,"XOF128"],[366,24,300,30],[366,25,300,31,"rho"],[366,28,300,34],[366,29,300,35],[367,8,301,12],[367,12,301,18,"t"],[367,13,301,19],[367,16,301,22,"newPoly"],[367,23,301,29],[367,24,301,30,"N"],[367,25,301,31],[367,26,301,32],[368,8,302,12],[368,13,302,17],[368,17,302,21,"i"],[368,20,302,22],[368,23,302,25],[368,24,302,26],[368,26,302,28,"i"],[368,29,302,29],[368,32,302,32,"K"],[368,33,302,33],[368,35,302,35,"i"],[368,38,302,36],[368,40,302,38],[368,42,302,40],[369,10,303,16],[370,10,304,16,"t"],[370,11,304,17],[370,12,304,18,"fill"],[370,16,304,22],[370,17,304,23],[370,18,304,24],[370,19,304,25],[370,20,304,26],[370,21,304,27],[371,10,305,16],[371,15,305,21],[371,19,305,25,"j"],[371,20,305,26],[371,23,305,29],[371,24,305,30],[371,26,305,32,"j"],[371,27,305,33],[371,30,305,36,"L"],[371,31,305,37],[371,33,305,39,"j"],[371,34,305,40],[371,36,305,42],[371,38,305,44],[372,12,306,20],[372,16,306,26,"aij"],[372,19,306,29],[372,22,306,32,"RejNTTPoly"],[372,32,306,42],[372,33,306,43,"xof"],[372,36,306,46],[372,37,306,47,"get"],[372,40,306,50],[372,41,306,51,"j"],[372,42,306,52],[372,44,306,54,"i"],[372,47,306,55],[372,48,306,56],[372,49,306,57],[372,50,306,58],[372,51,306,59],[373,12,307,20,"polyAdd"],[373,19,307,27],[373,20,307,28,"t"],[373,21,307,29],[373,23,307,31,"MultiplyNTTs"],[373,35,307,43],[373,36,307,44,"aij"],[373,39,307,47],[373,41,307,49,"s1Hat"],[373,46,307,54],[373,47,307,55,"j"],[373,48,307,56],[373,49,307,57],[373,50,307,58],[373,51,307,59],[374,10,308,16],[375,10,309,16,"NTT"],[375,13,309,19],[375,14,309,20,"decode"],[375,20,309,26],[375,21,309,27,"t"],[375,22,309,28],[375,23,309,29],[376,10,310,16],[376,14,310,16,"_polyPowerRound"],[376,29,310,16],[376,32,310,35,"polyPowerRound"],[376,46,310,49],[376,47,310,50,"polyAdd"],[376,54,310,57],[376,55,310,58,"t"],[376,56,310,59],[376,58,310,61,"s2"],[376,60,310,63],[376,61,310,64,"i"],[376,64,310,65],[376,65,310,66],[376,66,310,67],[376,67,310,68],[377,12,310,24,"r0"],[377,14,310,26],[377,17,310,26,"_polyPowerRound"],[377,32,310,26],[377,33,310,24,"r0"],[377,35,310,26],[378,12,310,28,"r1"],[378,14,310,30],[378,17,310,30,"_polyPowerRound"],[378,32,310,30],[378,33,310,28,"r1"],[378,35,310,30],[378,36,310,69],[378,37,310,70],[379,10,311,16,"t0"],[379,12,311,18],[379,13,311,19,"push"],[379,17,311,23],[379,18,311,24,"r0"],[379,20,311,26],[379,21,311,27],[380,10,312,16,"t1"],[380,12,312,18],[380,13,312,19,"push"],[380,17,312,23],[380,18,312,24,"r1"],[380,20,312,26],[380,21,312,27],[381,8,313,12],[382,8,314,12],[382,12,314,18,"publicKey"],[382,21,314,27],[382,24,314,30,"publicCoder"],[382,35,314,41],[382,36,314,42,"encode"],[382,42,314,48],[382,43,314,49],[382,44,314,50,"rho"],[382,47,314,53],[382,49,314,55,"t1"],[382,51,314,57],[382,52,314,58],[382,53,314,59],[382,54,314,60],[382,55,314,61],[383,8,315,12],[383,12,315,18,"tr"],[383,14,315,20],[383,17,315,23],[383,18,315,24],[383,19,315,25],[383,21,315,27,"_$$_REQUIRE"],[383,32,315,27],[383,33,315,27,"_dependencyMap"],[383,47,315,27],[383,74,315,34,"shake256"],[383,82,315,42],[383,84,315,44,"publicKey"],[383,93,315,53],[383,95,315,55],[384,10,315,57,"dkLen"],[384,15,315,62],[384,17,315,64,"TR_BYTES"],[385,8,315,73],[385,9,315,74],[385,10,315,75],[385,11,315,76],[385,12,315,77],[386,8,316,12],[386,12,316,18,"secretKey"],[386,21,316,27],[386,24,316,30,"secretCoder"],[386,35,316,41],[386,36,316,42,"encode"],[386,42,316,48],[386,43,316,49],[386,44,316,50,"rho"],[386,47,316,53],[386,49,316,55,"K_"],[386,51,316,57],[386,53,316,59,"tr"],[386,55,316,61],[386,57,316,63,"s1"],[386,59,316,65],[386,61,316,67,"s2"],[386,63,316,69],[386,65,316,71,"t0"],[386,67,316,73],[386,68,316,74],[386,69,316,75],[386,70,316,76],[386,71,316,77],[387,8,317,12,"xof"],[387,11,317,15],[387,12,317,16,"clean"],[387,17,317,21],[387,18,317,22],[387,19,317,23],[388,8,318,12,"xofPrime"],[388,16,318,20],[388,17,318,21,"clean"],[388,22,318,26],[388,23,318,27],[388,24,318,28],[389,8,319,12],[390,8,320,12],[391,8,321,12],[392,8,322,12],[392,9,322,13],[392,10,322,14],[392,12,322,16,"_$$_REQUIRE"],[392,23,322,16],[392,24,322,16,"_dependencyMap"],[392,38,322,16],[392,57,322,27,"cleanBytes"],[392,67,322,37],[392,69,322,39,"rho"],[392,72,322,42],[392,74,322,44,"rhoPrime"],[392,82,322,52],[392,84,322,54,"K_"],[392,86,322,56],[392,88,322,58,"s1"],[392,90,322,60],[392,92,322,62,"s2"],[392,94,322,64],[392,96,322,66,"s1Hat"],[392,101,322,71],[392,103,322,73,"t"],[392,104,322,74],[392,106,322,76,"t0"],[392,108,322,78],[392,110,322,80,"t1"],[392,112,322,82],[392,114,322,84,"tr"],[392,116,322,86],[392,118,322,88,"seedDst"],[392,125,322,95],[392,126,322,96],[393,8,323,12],[393,15,323,19],[394,10,323,21,"publicKey"],[394,19,323,30],[394,21,323,21,"publicKey"],[394,30,323,30],[395,10,323,32,"secretKey"],[395,19,323,41],[395,21,323,32,"secretKey"],[396,8,323,42],[396,9,323,43],[397,6,324,8],[397,7,324,9],[398,6,325,8],[399,6,326,8,"sign"],[399,10,326,12],[399,12,326,14],[399,21,326,8,"sign"],[399,25,326,12,"sign"],[399,26,326,15,"secretKey"],[399,35,326,24],[399,37,326,26,"msg"],[399,40,326,29],[399,42,326,31,"random"],[399,48,326,37],[399,50,326,62],[400,8,326,62],[400,12,326,39,"externalMu"],[400,22,326,49],[400,25,326,49,"arguments"],[400,34,326,49],[400,35,326,49,"length"],[400,41,326,49],[400,49,326,49,"arguments"],[400,58,326,49],[400,66,326,49,"undefined"],[400,75,326,49],[400,78,326,49,"arguments"],[400,87,326,49],[400,93,326,52],[400,98,326,57],[401,8,327,12],[402,8,328,12],[403,8,329,12],[403,12,329,12,"_secretCoder$decode"],[403,31,329,12],[403,34,329,46,"secretCoder"],[403,45,329,57],[403,46,329,58,"decode"],[403,52,329,64],[403,53,329,65,"secretKey"],[403,62,329,74],[403,63,329,75],[404,10,329,75,"_secretCoder$decode2"],[404,30,329,75],[404,33,329,75,"_slicedToArray"],[404,47,329,75],[404,48,329,75,"_secretCoder$decode"],[404,67,329,75],[405,10,329,19,"rho"],[405,13,329,22],[405,16,329,22,"_secretCoder$decode2"],[405,36,329,22],[406,10,329,24,"_K"],[406,12,329,26],[406,15,329,26,"_secretCoder$decode2"],[406,35,329,26],[407,10,329,28,"tr"],[407,12,329,30],[407,15,329,30,"_secretCoder$decode2"],[407,35,329,30],[408,10,329,32,"s1"],[408,12,329,34],[408,15,329,34,"_secretCoder$decode2"],[408,35,329,34],[409,10,329,36,"s2"],[409,12,329,38],[409,15,329,38,"_secretCoder$decode2"],[409,35,329,38],[410,10,329,40,"t0"],[410,12,329,42],[410,15,329,42,"_secretCoder$decode2"],[410,35,329,42],[410,39,329,76],[410,40,329,77],[411,8,330,12],[412,8,331,12],[412,12,331,18,"A"],[412,13,331,19],[412,16,331,22],[412,18,331,24],[412,19,331,25],[412,20,331,26],[413,8,332,12],[413,12,332,18,"xof"],[413,15,332,21],[413,18,332,24,"XOF128"],[413,24,332,30],[413,25,332,31,"rho"],[413,28,332,34],[413,29,332,35],[414,8,333,12],[414,13,333,17],[414,17,333,21,"i"],[414,18,333,22],[414,21,333,25],[414,22,333,26],[414,24,333,28,"i"],[414,25,333,29],[414,28,333,32,"K"],[414,29,333,33],[414,31,333,35,"i"],[414,32,333,36],[414,34,333,38],[414,36,333,40],[415,10,334,16],[415,14,334,22,"pv"],[415,16,334,24],[415,19,334,27],[415,21,334,29],[416,10,335,16],[416,15,335,21],[416,19,335,25,"j"],[416,20,335,26],[416,23,335,29],[416,24,335,30],[416,26,335,32,"j"],[416,27,335,33],[416,30,335,36,"L"],[416,31,335,37],[416,33,335,39,"j"],[416,34,335,40],[416,36,335,42],[416,38,336,20,"pv"],[416,40,336,22],[416,41,336,23,"push"],[416,45,336,27],[416,46,336,28,"RejNTTPoly"],[416,56,336,38],[416,57,336,39,"xof"],[416,60,336,42],[416,61,336,43,"get"],[416,64,336,46],[416,65,336,47,"j"],[416,66,336,48],[416,68,336,50,"i"],[416,69,336,51],[416,70,336,52],[416,71,336,53],[416,72,336,54],[417,10,337,16,"A"],[417,11,337,17],[417,12,337,18,"push"],[417,16,337,22],[417,17,337,23,"pv"],[417,19,337,25],[417,20,337,26],[418,8,338,12],[419,8,339,12,"xof"],[419,11,339,15],[419,12,339,16,"clean"],[419,17,339,21],[419,18,339,22],[419,19,339,23],[420,8,340,12],[420,13,340,17],[420,17,340,21,"i"],[420,20,340,22],[420,23,340,25],[420,24,340,26],[420,26,340,28,"i"],[420,29,340,29],[420,32,340,32,"L"],[420,33,340,33],[420,35,340,35,"i"],[420,38,340,36],[420,40,340,38],[420,42,341,16,"NTT"],[420,45,341,19],[420,46,341,20,"encode"],[420,52,341,26],[420,53,341,27,"s1"],[420,55,341,29],[420,56,341,30,"i"],[420,59,341,31],[420,60,341,32],[420,61,341,33],[420,62,341,34],[420,63,341,35],[421,8,342,12],[421,13,342,17],[421,17,342,21,"i"],[421,20,342,22],[421,23,342,25],[421,24,342,26],[421,26,342,28,"i"],[421,29,342,29],[421,32,342,32,"K"],[421,33,342,33],[421,35,342,35,"i"],[421,38,342,36],[421,40,342,38],[421,42,342,40],[422,10,343,16,"NTT"],[422,13,343,19],[422,14,343,20,"encode"],[422,20,343,26],[422,21,343,27,"s2"],[422,23,343,29],[422,24,343,30,"i"],[422,27,343,31],[422,28,343,32],[422,29,343,33],[422,30,343,34],[422,31,343,35],[423,10,344,16,"NTT"],[423,13,344,19],[423,14,344,20,"encode"],[423,20,344,26],[423,21,344,27,"t0"],[423,23,344,29],[423,24,344,30,"i"],[423,27,344,31],[423,28,344,32],[423,29,344,33],[423,30,344,34],[423,31,344,35],[424,8,345,12],[425,8,346,12],[426,8,347,12],[426,12,347,18,"mu"],[426,14,347,20],[426,17,347,23,"externalMu"],[426,27,347,33],[426,30,348,18,"msg"],[426,33,348,21],[426,36,349,18,"_$$_REQUIRE"],[426,47,349,18],[426,48,349,18,"_dependencyMap"],[426,62,349,18],[426,89,349,25,"shake256"],[426,97,349,33],[426,98,349,34,"create"],[426,104,349,40],[426,105,349,41],[427,10,349,43,"dkLen"],[427,15,349,48],[427,17,349,50,"CRH_BYTES"],[428,8,349,60],[428,9,349,61],[428,10,349,62],[428,11,349,63,"update"],[428,17,349,69],[428,18,349,70,"tr"],[428,20,349,72],[428,21,349,73],[428,22,349,74,"update"],[428,28,349,80],[428,29,349,81,"msg"],[428,32,349,84],[428,33,349,85],[428,34,349,86,"digest"],[428,40,349,92],[428,41,349,93],[428,42,349,94],[428,43,349,95],[428,44,349,96],[429,8,350,12],[430,8,351,12],[430,12,351,18,"rnd"],[430,15,351,21],[430,18,351,24,"random"],[430,24,351,30],[430,27,351,33,"random"],[430,33,351,39],[430,36,351,42],[430,40,351,46,"Uint8Array"],[430,50,351,56],[430,51,351,57],[430,53,351,59],[430,54,351,60],[431,8,352,12],[431,9,352,13],[431,10,352,14],[431,12,352,16,"_$$_REQUIRE"],[431,23,352,16],[431,24,352,16,"_dependencyMap"],[431,38,352,16],[431,57,352,27,"ensureBytes"],[431,68,352,38],[431,70,352,40,"rnd"],[431,73,352,43],[431,74,352,44],[432,8,353,12],[432,12,353,18,"rhoprime"],[432,20,353,26],[432,23,353,29,"_$$_REQUIRE"],[432,34,353,29],[432,35,353,29,"_dependencyMap"],[432,49,353,29],[432,76,353,36,"shake256"],[432,84,353,44],[432,85,354,17,"create"],[432,91,354,23],[432,92,354,24],[433,10,354,26,"dkLen"],[433,15,354,31],[433,17,354,33,"CRH_BYTES"],[434,8,354,43],[434,9,354,44],[434,10,354,45],[434,11,355,17,"update"],[434,17,355,23],[434,18,355,24,"_K"],[434,20,355,26],[434,21,355,27],[434,22,356,17,"update"],[434,28,356,23],[434,29,356,24,"rnd"],[434,32,356,27],[434,33,356,28],[434,34,357,17,"update"],[434,40,357,23],[434,41,357,24,"mu"],[434,43,357,26],[434,44,357,27],[434,45,358,17,"digest"],[434,51,358,23],[434,52,358,24],[434,53,358,25],[434,54,358,26],[434,55,358,27],[435,8,359,12],[435,9,359,13],[435,10,359,14],[435,12,359,16,"_$$_REQUIRE"],[435,23,359,16],[435,24,359,16,"_dependencyMap"],[435,38,359,16],[435,57,359,27,"ensureBytes"],[435,68,359,38],[435,70,359,40,"rhoprime"],[435,78,359,48],[435,80,359,50,"CRH_BYTES"],[435,89,359,59],[435,90,359,60],[436,8,360,12],[436,12,360,18,"x256"],[436,16,360,22],[436,19,360,25,"XOF256"],[436,25,360,31],[436,26,360,32,"rhoprime"],[436,34,360,40],[436,36,360,42,"ZCoder"],[436,42,360,48],[436,43,360,49,"bytesLen"],[436,51,360,57],[436,52,360,58],[437,8,361,12],[438,8,361,12],[438,12,361,12,"_loop"],[438,17,361,12],[438,29,361,12,"_loop"],[438,35,361,12,"_kappa"],[438,41,361,12],[438,43,362,45],[439,12,363,16],[439,16,363,22,"y"],[439,17,363,23],[439,20,363,26],[439,22,363,28],[440,12,364,16],[441,12,365,16],[441,17,365,21],[441,21,365,25,"i"],[441,24,365,26],[441,27,365,29],[441,28,365,30],[441,30,365,32,"i"],[441,33,365,33],[441,36,365,36,"L"],[441,37,365,37],[441,39,365,39,"i"],[441,42,365,40],[441,44,365,42],[441,46,365,44,"_kappa"],[441,52,365,44],[441,54,365,51],[441,56,366,20,"y"],[441,57,366,21],[441,58,366,22,"push"],[441,62,366,26],[441,63,366,27,"ZCoder"],[441,69,366,33],[441,70,366,34,"decode"],[441,76,366,40],[441,77,366,41,"x256"],[441,81,366,45],[441,82,366,46,"get"],[441,85,366,49],[441,86,366,50,"_kappa"],[441,92,366,50],[441,95,366,58],[441,99,366,62],[441,101,366,64,"_kappa"],[441,107,366,64],[441,111,366,73],[441,112,366,74],[441,113,366,75],[441,114,366,76],[441,115,366,77],[441,116,366,78],[441,117,366,79],[442,12,367,16],[442,16,367,22,"z"],[442,17,367,23],[442,20,367,26,"y"],[442,21,367,27],[442,22,367,28,"map"],[442,25,367,31],[442,26,367,32],[442,36,367,33,"i"],[442,37,367,34],[443,14,367,34],[443,21,367,39,"NTT"],[443,24,367,42],[443,25,367,43,"encode"],[443,31,367,49],[443,32,367,50,"i"],[443,33,367,51],[443,34,367,52,"slice"],[443,39,367,57],[443,40,367,58],[443,41,367,59],[443,42,367,60],[444,12,367,60],[444,14,367,61],[445,12,368,16],[445,16,368,22,"w"],[445,17,368,23],[445,20,368,26],[445,22,368,28],[446,12,369,16],[446,17,369,21],[446,21,369,25,"i"],[446,24,369,26],[446,27,369,29],[446,28,369,30],[446,30,369,32,"i"],[446,33,369,33],[446,36,369,36,"K"],[446,37,369,37],[446,39,369,39,"i"],[446,42,369,40],[446,44,369,42],[446,46,369,44],[447,14,370,20],[448,14,371,20],[448,18,371,26,"wi"],[448,20,371,28],[448,23,371,31,"newPoly"],[448,30,371,38],[448,31,371,39,"N"],[448,32,371,40],[448,33,371,41],[449,14,372,20],[449,19,372,25],[449,23,372,29,"j"],[449,26,372,30],[449,29,372,33],[449,30,372,34],[449,32,372,36,"j"],[449,35,372,37],[449,38,372,40,"L"],[449,39,372,41],[449,41,372,43,"j"],[449,44,372,44],[449,46,372,46],[449,48,373,24,"polyAdd"],[449,55,373,31],[449,56,373,32,"wi"],[449,58,373,34],[449,60,373,36,"MultiplyNTTs"],[449,72,373,48],[449,73,373,49,"A"],[449,74,373,50],[449,75,373,51,"i"],[449,78,373,52],[449,79,373,53],[449,80,373,54,"j"],[449,83,373,55],[449,84,373,56],[449,86,373,58,"z"],[449,87,373,59],[449,88,373,60,"j"],[449,91,373,61],[449,92,373,62],[449,93,373,63],[449,94,373,64],[450,14,374,20,"NTT"],[450,17,374,23],[450,18,374,24,"decode"],[450,24,374,30],[450,25,374,31,"wi"],[450,27,374,33],[450,28,374,34],[451,14,375,20,"w"],[451,15,375,21],[451,16,375,22,"push"],[451,20,375,26],[451,21,375,27,"wi"],[451,23,375,29],[451,24,375,30],[452,12,376,16],[453,12,377,16],[453,16,377,22,"w1"],[453,18,377,24],[453,21,377,27,"w"],[453,22,377,28],[453,23,377,29,"map"],[453,26,377,32],[453,27,377,33],[453,37,377,34,"j"],[453,38,377,35],[454,14,377,35],[454,21,377,40,"j"],[454,22,377,41],[454,23,377,42,"map"],[454,26,377,45],[454,27,377,46,"HighBits"],[454,35,377,54],[454,36,377,55],[455,12,377,55],[455,14,377,56],[455,15,377,57],[455,16,377,58],[456,12,378,16],[457,12,379,16],[457,16,379,22,"cTilde"],[457,22,379,28],[457,25,379,31,"_$$_REQUIRE"],[457,36,379,31],[457,37,379,31,"_dependencyMap"],[457,51,379,31],[457,78,379,38,"shake256"],[457,86,379,46],[457,87,380,21,"create"],[457,93,380,27],[457,94,380,28],[458,14,380,30,"dkLen"],[458,19,380,35],[458,21,380,37,"C_TILDE_BYTES"],[459,12,380,51],[459,13,380,52],[459,14,380,53],[459,15,381,21,"update"],[459,21,381,27],[459,22,381,28,"mu"],[459,24,381,30],[459,25,381,31],[459,26,382,21,"update"],[459,32,382,27],[459,33,382,28,"W1Vec"],[459,38,382,33],[459,39,382,34,"encode"],[459,45,382,40],[459,46,382,41,"w1"],[459,48,382,43],[459,49,382,44],[459,50,382,45],[459,51,383,21,"digest"],[459,57,383,27],[459,58,383,28],[459,59,383,29],[460,12,384,16],[461,12,385,16],[461,16,385,22,"cHat"],[461,20,385,26],[461,23,385,29,"NTT"],[461,26,385,32],[461,27,385,33,"encode"],[461,33,385,39],[461,34,385,40,"SampleInBall"],[461,46,385,52],[461,47,385,53,"cTilde"],[461,53,385,59],[461,54,385,60],[461,55,385,61],[461,56,385,62],[461,57,385,63],[462,12,386,16],[463,12,387,16],[463,16,387,22,"cs1"],[463,19,387,25],[463,22,387,28,"s1"],[463,24,387,30],[463,25,387,31,"map"],[463,28,387,34],[463,29,387,35],[463,39,387,36,"i"],[463,40,387,37],[464,14,387,37],[464,21,387,42,"MultiplyNTTs"],[464,33,387,54],[464,34,387,55,"i"],[464,35,387,56],[464,37,387,58,"cHat"],[464,41,387,62],[464,42,387,63],[465,12,387,63],[465,14,387,64],[466,12,388,16],[466,17,388,21],[466,21,388,25,"i"],[466,24,388,26],[466,27,388,29],[466,28,388,30],[466,30,388,32,"i"],[466,33,388,33],[466,36,388,36,"L"],[466,37,388,37],[466,39,388,39,"i"],[466,42,388,40],[466,44,388,42],[466,46,388,44],[467,14,389,20,"polyAdd"],[467,21,389,27],[467,22,389,28,"NTT"],[467,25,389,31],[467,26,389,32,"decode"],[467,32,389,38],[467,33,389,39,"cs1"],[467,36,389,42],[467,37,389,43,"i"],[467,40,389,44],[467,41,389,45],[467,42,389,46],[467,44,389,48,"y"],[467,45,389,49],[467,46,389,50,"i"],[467,49,389,51],[467,50,389,52],[467,51,389,53],[467,52,389,54],[467,53,389,55],[468,14,390,20],[468,18,390,24,"polyChknorm"],[468,29,390,35],[468,30,390,36,"cs1"],[468,33,390,39],[468,34,390,40,"i"],[468,37,390,41],[468,38,390,42],[468,40,390,44,"GAMMA1"],[468,46,390,50],[468,49,390,53,"BETA"],[468,53,390,57],[468,54,390,58],[469,16,390,58,"kappa"],[469,21,390,58],[469,24,390,58,"_kappa"],[469,30,390,58],[470,16,390,58],[471,14,390,58],[472,14,391,44],[473,12,392,16],[474,12,393,16],[475,12,394,16],[475,16,394,20,"cnt"],[475,19,394,23],[475,22,394,26],[475,23,394,27],[476,12,395,16],[476,16,395,22,"h"],[476,17,395,23],[476,20,395,26],[476,22,395,28],[477,12,396,16],[477,17,396,21],[477,21,396,25,"i"],[477,24,396,26],[477,27,396,29],[477,28,396,30],[477,30,396,32,"i"],[477,33,396,33],[477,36,396,36,"K"],[477,37,396,37],[477,39,396,39,"i"],[477,42,396,40],[477,44,396,42],[477,46,396,44],[478,14,397,20],[478,18,397,26,"cs2"],[478,21,397,29],[478,24,397,32,"NTT"],[478,27,397,35],[478,28,397,36,"decode"],[478,34,397,42],[478,35,397,43,"MultiplyNTTs"],[478,47,397,55],[478,48,397,56,"s2"],[478,50,397,58],[478,51,397,59,"i"],[478,54,397,60],[478,55,397,61],[478,57,397,63,"cHat"],[478,61,397,67],[478,62,397,68],[478,63,397,69],[478,64,397,70],[478,65,397,71],[479,14,398,20],[479,18,398,26,"r0"],[479,20,398,28],[479,23,398,31,"polySub"],[479,30,398,38],[479,31,398,39,"w"],[479,32,398,40],[479,33,398,41,"i"],[479,36,398,42],[479,37,398,43],[479,39,398,45,"cs2"],[479,42,398,48],[479,43,398,49],[479,44,398,50,"map"],[479,47,398,53],[479,48,398,54,"LowBits"],[479,55,398,61],[479,56,398,62],[479,57,398,63],[479,58,398,64],[480,14,399,20],[480,18,399,24,"polyChknorm"],[480,29,399,35],[480,30,399,36,"r0"],[480,32,399,38],[480,34,399,40,"GAMMA2"],[480,40,399,46],[480,43,399,49,"BETA"],[480,47,399,53],[480,48,399,54],[481,16,399,54,"kappa"],[481,21,399,54],[481,24,399,54,"_kappa"],[481,30,399,54],[482,16,399,54],[483,14,399,54],[484,14,400,44],[485,14,401,20],[485,18,401,26,"ct0"],[485,21,401,29],[485,24,401,32,"NTT"],[485,27,401,35],[485,28,401,36,"decode"],[485,34,401,42],[485,35,401,43,"MultiplyNTTs"],[485,47,401,55],[485,48,401,56,"t0"],[485,50,401,58],[485,51,401,59,"i"],[485,54,401,60],[485,55,401,61],[485,57,401,63,"cHat"],[485,61,401,67],[485,62,401,68],[485,63,401,69],[485,64,401,70],[485,65,401,71],[486,14,402,20],[486,18,402,24,"polyChknorm"],[486,29,402,35],[486,30,402,36,"ct0"],[486,33,402,39],[486,35,402,41,"GAMMA2"],[486,41,402,47],[486,42,402,48],[487,16,402,48,"kappa"],[487,21,402,48],[487,24,402,48,"_kappa"],[487,30,402,48],[488,16,402,48],[489,14,402,48],[490,14,404,20,"polyAdd"],[490,21,404,27],[490,22,404,28,"r0"],[490,24,404,30],[490,26,404,32,"ct0"],[490,29,404,35],[490,30,404,36],[491,14,405,20],[492,14,406,20],[492,18,406,26,"hint"],[492,22,406,30],[492,25,406,33,"polyMakeHint"],[492,37,406,45],[492,38,406,46,"r0"],[492,40,406,48],[492,42,406,50,"w1"],[492,44,406,52],[492,45,406,53,"i"],[492,48,406,54],[492,49,406,55],[492,50,406,56],[492,51,406,57],[492,52,406,58],[493,14,407,20,"h"],[493,15,407,21],[493,16,407,22,"push"],[493,20,407,26],[493,21,407,27,"hint"],[493,25,407,31],[493,26,407,32,"v"],[493,27,407,33],[493,28,407,34],[494,14,408,20,"cnt"],[494,17,408,23],[494,21,408,27,"hint"],[494,25,408,31],[494,26,408,32,"cnt"],[494,29,408,35],[495,12,409,16],[496,12,410,16],[496,16,410,20,"cnt"],[496,19,410,23],[496,22,410,26,"OMEGA"],[496,27,410,31],[497,14,410,31,"kappa"],[497,19,410,31],[497,22,410,31,"_kappa"],[497,28,410,31],[498,14,410,31],[499,12,410,31],[500,12,411,30],[501,12,412,16,"x256"],[501,16,412,20],[501,17,412,21,"clean"],[501,22,412,26],[501,23,412,27],[501,24,412,28],[502,12,413,16],[502,16,413,22,"res"],[502,19,413,25],[502,22,413,28,"sigCoder"],[502,30,413,36],[502,31,413,37,"encode"],[502,37,413,43],[502,38,413,44],[502,39,413,45,"cTilde"],[502,45,413,51],[502,47,413,53,"cs1"],[502,50,413,56],[502,52,413,58,"h"],[502,53,413,59],[502,54,413,60],[502,55,413,61],[502,56,413,62],[502,57,413,63],[503,12,414,16],[504,12,415,16],[504,13,415,17],[504,14,415,18],[504,16,415,20,"_$$_REQUIRE"],[504,27,415,20],[504,28,415,20,"_dependencyMap"],[504,42,415,20],[504,61,415,31,"cleanBytes"],[504,71,415,41],[504,73,415,41,"apply"],[504,78,415,41],[504,88,415,43,"cTilde"],[504,94,415,49],[504,96,415,51,"cs1"],[504,99,415,54],[504,101,415,56,"h"],[504,102,415,57],[504,104,415,59,"cHat"],[504,108,415,63],[504,110,415,65,"w1"],[504,112,415,67],[504,114,415,69,"w"],[504,115,415,70],[504,117,415,72,"z"],[504,118,415,73],[504,120,415,75,"y"],[504,121,415,76],[504,123,415,78,"rhoprime"],[504,131,415,86],[504,133,415,88,"mu"],[504,135,415,90],[504,137,415,92,"s1"],[504,139,415,94],[504,141,415,96,"s2"],[504,143,415,98],[504,145,415,100,"t0"],[504,147,415,102],[504,149,415,102,"concat"],[504,155,415,102],[504,156,415,107,"A"],[504,157,415,108],[504,159,415,109],[505,12,415,110],[506,14,415,110,"v"],[506,15,415,110],[506,17,416,23,"res"],[507,12,416,26],[508,12,416,26,"kappa"],[508,17,416,26],[508,20,416,26,"_kappa"],[508,26,416,26],[509,10,417,12],[509,11,417,13],[510,10,417,13,"_ret"],[510,14,417,13],[511,8,362,12,"main_loop"],[511,17,362,21],[511,19,362,23],[511,24,362,28],[511,28,362,32,"kappa"],[511,33,362,37],[511,36,362,40],[511,37,362,41],[512,10,362,41,"_ret"],[512,14,362,41],[512,17,362,41,"_loop"],[512,22,362,41],[512,23,362,41,"kappa"],[512,28,362,41],[513,10,362,41],[513,14,362,41,"_ret"],[513,18,362,41],[513,26,391,24],[513,35,391,33,"main_loop"],[513,44,391,42],[514,10,391,43],[514,14,391,43,"_ret"],[514,18,391,43],[514,26,411,20],[515,10,411,29],[515,14,411,29,"_ret"],[515,18,411,29],[515,27,411,29,"_ret"],[515,31,411,29],[515,32,411,29,"v"],[515,33,411,29],[516,8,411,29],[517,8,418,12],[518,8,419,12],[518,14,419,18],[518,18,419,22,"Error"],[518,23,419,27],[518,24,419,28],[518,74,419,78],[518,75,419,79],[519,6,420,8],[519,7,420,9],[520,6,421,8,"verify"],[520,12,421,14],[520,14,421,16],[520,23,421,8,"verify"],[520,29,421,14,"verify"],[520,30,421,17,"publicKey"],[520,39,421,26],[520,41,421,28,"msg"],[520,44,421,31],[520,46,421,33,"sig"],[520,49,421,36],[520,51,421,61],[521,8,421,61],[521,12,421,38,"externalMu"],[521,22,421,48],[521,25,421,48,"arguments"],[521,34,421,48],[521,35,421,48,"length"],[521,41,421,48],[521,49,421,48,"arguments"],[521,58,421,48],[521,66,421,48,"undefined"],[521,75,421,48],[521,78,421,48,"arguments"],[521,87,421,48],[521,93,421,51],[521,98,421,56],[522,8,422,12],[523,8,423,12],[523,12,423,12,"_publicCoder$decode"],[523,31,423,12],[523,34,423,30,"publicCoder"],[523,45,423,41],[523,46,423,42,"decode"],[523,52,423,48],[523,53,423,49,"publicKey"],[523,62,423,58],[523,63,423,59],[524,10,423,59,"_publicCoder$decode2"],[524,30,423,59],[524,33,423,59,"_slicedToArray"],[524,47,423,59],[524,48,423,59,"_publicCoder$decode"],[524,67,423,59],[525,10,423,19,"rho"],[525,13,423,22],[525,16,423,22,"_publicCoder$decode2"],[525,36,423,22],[526,10,423,24,"t1"],[526,12,423,26],[526,15,423,26,"_publicCoder$decode2"],[526,35,423,26],[526,39,423,60],[526,40,423,61],[527,8,424,12],[527,12,424,18,"tr"],[527,14,424,20],[527,17,424,23],[527,18,424,24],[527,19,424,25],[527,21,424,27,"_$$_REQUIRE"],[527,32,424,27],[527,33,424,27,"_dependencyMap"],[527,47,424,27],[527,74,424,34,"shake256"],[527,82,424,42],[527,84,424,44,"publicKey"],[527,93,424,53],[527,95,424,55],[528,10,424,57,"dkLen"],[528,15,424,62],[528,17,424,64,"TR_BYTES"],[529,8,424,73],[529,9,424,74],[529,10,424,75],[529,11,424,76],[529,12,424,77],[530,8,425,12],[530,12,425,16,"sig"],[530,15,425,19],[530,16,425,20,"length"],[530,22,425,26],[530,27,425,31,"sigCoder"],[530,35,425,39],[530,36,425,40,"bytesLen"],[530,44,425,48],[530,46,426,16],[530,53,426,23],[530,58,426,28],[530,59,426,29],[530,60,426,30],[531,8,427,12],[531,12,427,12,"_sigCoder$decode"],[531,28,427,12],[531,31,427,35,"sigCoder"],[531,39,427,43],[531,40,427,44,"decode"],[531,46,427,50],[531,47,427,51,"sig"],[531,50,427,54],[531,51,427,55],[532,10,427,55,"_sigCoder$decode2"],[532,27,427,55],[532,30,427,55,"_slicedToArray"],[532,44,427,55],[532,45,427,55,"_sigCoder$decode"],[532,61,427,55],[533,10,427,19,"cTilde"],[533,16,427,25],[533,19,427,25,"_sigCoder$decode2"],[533,36,427,25],[534,10,427,27,"z"],[534,11,427,28],[534,14,427,28,"_sigCoder$decode2"],[534,31,427,28],[535,10,427,30,"h"],[535,11,427,31],[535,14,427,31,"_sigCoder$decode2"],[535,31,427,31],[535,35,427,56],[535,36,427,57],[536,8,428,12],[536,12,428,16,"h"],[536,13,428,17],[536,18,428,22],[536,23,428,27],[536,25,429,16],[536,32,429,23],[536,37,429,28],[536,38,429,29],[536,39,429,30],[537,8,430,12],[537,13,430,17],[537,17,430,21,"i"],[537,18,430,22],[537,21,430,25],[537,22,430,26],[537,24,430,28,"i"],[537,25,430,29],[537,28,430,32,"L"],[537,29,430,33],[537,31,430,35,"i"],[537,32,430,36],[537,34,430,38],[537,36,431,16],[537,40,431,20,"polyChknorm"],[537,51,431,31],[537,52,431,32,"z"],[537,53,431,33],[537,54,431,34,"i"],[537,55,431,35],[537,56,431,36],[537,58,431,38,"GAMMA1"],[537,64,431,44],[537,67,431,47,"BETA"],[537,71,431,51],[537,72,431,52],[537,74,432,20],[537,81,432,27],[537,86,432,32],[538,8,433,12],[538,12,433,18,"mu"],[538,14,433,20],[538,17,433,23,"externalMu"],[538,27,433,33],[538,30,434,18,"msg"],[538,33,434,21],[538,36,435,18,"_$$_REQUIRE"],[538,47,435,18],[538,48,435,18,"_dependencyMap"],[538,62,435,18],[538,89,435,25,"shake256"],[538,97,435,33],[538,98,435,34,"create"],[538,104,435,40],[538,105,435,41],[539,10,435,43,"dkLen"],[539,15,435,48],[539,17,435,50,"CRH_BYTES"],[540,8,435,60],[540,9,435,61],[540,10,435,62],[540,11,435,63,"update"],[540,17,435,69],[540,18,435,70,"tr"],[540,20,435,72],[540,21,435,73],[540,22,435,74,"update"],[540,28,435,80],[540,29,435,81,"msg"],[540,32,435,84],[540,33,435,85],[540,34,435,86,"digest"],[540,40,435,92],[540,41,435,93],[540,42,435,94],[540,43,435,95],[540,44,435,96],[541,8,436,12],[542,8,437,12],[542,12,437,18,"c"],[542,13,437,19],[542,16,437,22,"NTT"],[542,19,437,25],[542,20,437,26,"encode"],[542,26,437,32],[542,27,437,33,"SampleInBall"],[542,39,437,45],[542,40,437,46,"cTilde"],[542,46,437,52],[542,47,437,53],[542,48,437,54],[542,49,437,55],[542,50,437,56],[543,8,438,12],[543,12,438,18,"zNtt"],[543,16,438,22],[543,19,438,25,"z"],[543,20,438,26],[543,21,438,27,"map"],[543,24,438,30],[543,25,438,31],[543,35,438,32,"i"],[543,36,438,33],[544,10,438,33],[544,17,438,38,"i"],[544,18,438,39],[544,19,438,40,"slice"],[544,24,438,45],[544,25,438,46],[544,26,438,47],[545,8,438,47],[545,10,438,48],[545,11,438,49],[545,12,438,50],[546,8,439,12],[546,13,439,17],[546,17,439,21,"i"],[546,20,439,22],[546,23,439,25],[546,24,439,26],[546,26,439,28,"i"],[546,29,439,29],[546,32,439,32,"L"],[546,33,439,33],[546,35,439,35,"i"],[546,38,439,36],[546,40,439,38],[546,42,440,16,"NTT"],[546,45,440,19],[546,46,440,20,"encode"],[546,52,440,26],[546,53,440,27,"zNtt"],[546,57,440,31],[546,58,440,32,"i"],[546,61,440,33],[546,62,440,34],[546,63,440,35],[547,8,441,12],[547,12,441,18,"wTick1"],[547,18,441,24],[547,21,441,27],[547,23,441,29],[548,8,442,12],[548,12,442,18,"xof"],[548,15,442,21],[548,18,442,24,"XOF128"],[548,24,442,30],[548,25,442,31,"rho"],[548,28,442,34],[548,29,442,35],[549,8,443,12],[549,13,443,17],[549,17,443,21,"i"],[549,20,443,22],[549,23,443,25],[549,24,443,26],[549,26,443,28,"i"],[549,29,443,29],[549,32,443,32,"K"],[549,33,443,33],[549,35,443,35,"i"],[549,38,443,36],[549,40,443,38],[549,42,443,40],[550,10,444,16],[550,14,444,22,"ct12d"],[550,19,444,27],[550,22,444,30,"MultiplyNTTs"],[550,34,444,42],[550,35,444,43,"NTT"],[550,38,444,46],[550,39,444,47,"encode"],[550,45,444,53],[550,46,444,54,"polyShiftl"],[550,56,444,64],[550,57,444,65,"t1"],[550,59,444,67],[550,60,444,68,"i"],[550,63,444,69],[550,64,444,70],[550,65,444,71],[550,66,444,72],[550,68,444,74,"c"],[550,69,444,75],[550,70,444,76],[550,71,444,77],[550,72,444,78],[551,10,445,16],[551,14,445,22,"Az"],[551,16,445,24],[551,19,445,27,"newPoly"],[551,26,445,34],[551,27,445,35,"N"],[551,28,445,36],[551,29,445,37],[551,30,445,38],[551,31,445,39],[552,10,446,16],[552,15,446,21],[552,19,446,25,"j"],[552,20,446,26],[552,23,446,29],[552,24,446,30],[552,26,446,32,"j"],[552,27,446,33],[552,30,446,36,"L"],[552,31,446,37],[552,33,446,39,"j"],[552,34,446,40],[552,36,446,42],[552,38,446,44],[553,12,447,20],[553,16,447,26,"aij"],[553,19,447,29],[553,22,447,32,"RejNTTPoly"],[553,32,447,42],[553,33,447,43,"xof"],[553,36,447,46],[553,37,447,47,"get"],[553,40,447,50],[553,41,447,51,"j"],[553,42,447,52],[553,44,447,54,"i"],[553,47,447,55],[553,48,447,56],[553,49,447,57],[553,50,447,58],[553,51,447,59],[554,12,448,20,"polyAdd"],[554,19,448,27],[554,20,448,28,"Az"],[554,22,448,30],[554,24,448,32,"MultiplyNTTs"],[554,36,448,44],[554,37,448,45,"aij"],[554,40,448,48],[554,42,448,50,"zNtt"],[554,46,448,54],[554,47,448,55,"j"],[554,48,448,56],[554,49,448,57],[554,50,448,58],[554,51,448,59],[555,10,449,16],[556,10,450,16],[557,10,451,16],[557,14,451,22,"wApprox"],[557,21,451,29],[557,24,451,32,"NTT"],[557,27,451,35],[557,28,451,36,"decode"],[557,34,451,42],[557,35,451,43,"polySub"],[557,42,451,50],[557,43,451,51,"Az"],[557,45,451,53],[557,47,451,55,"ct12d"],[557,52,451,60],[557,53,451,61],[557,54,451,62],[558,10,452,16],[559,10,453,16,"wTick1"],[559,16,453,22],[559,17,453,23,"push"],[559,21,453,27],[559,22,453,28,"polyUseHint"],[559,33,453,39],[559,34,453,40,"wApprox"],[559,41,453,47],[559,43,453,49,"h"],[559,44,453,50],[559,45,453,51,"i"],[559,48,453,52],[559,49,453,53],[559,50,453,54],[559,51,453,55],[559,52,453,56],[559,53,453,57],[560,8,454,12],[561,8,455,12,"xof"],[561,11,455,15],[561,12,455,16,"clean"],[561,17,455,21],[561,18,455,22],[561,19,455,23],[562,8,456,12],[563,8,457,12],[563,12,457,18,"c2"],[563,14,457,20],[563,17,457,23,"_$$_REQUIRE"],[563,28,457,23],[563,29,457,23,"_dependencyMap"],[563,43,457,23],[563,70,457,30,"shake256"],[563,78,457,38],[563,79,458,17,"create"],[563,85,458,23],[563,86,458,24],[564,10,458,26,"dkLen"],[564,15,458,31],[564,17,458,33,"C_TILDE_BYTES"],[565,8,458,47],[565,9,458,48],[565,10,458,49],[565,11,459,17,"update"],[565,17,459,23],[565,18,459,24,"mu"],[565,20,459,26],[565,21,459,27],[565,22,460,17,"update"],[565,28,460,23],[565,29,460,24,"W1Vec"],[565,34,460,29],[565,35,460,30,"encode"],[565,41,460,36],[565,42,460,37,"wTick1"],[565,48,460,43],[565,49,460,44],[565,50,460,45],[565,51,461,17,"digest"],[565,57,461,23],[565,58,461,24],[565,59,461,25],[566,8,462,12],[567,8,463,12],[568,8,464,12],[568,13,464,17],[568,17,464,23,"t"],[568,18,464,24],[568,22,464,28,"h"],[568,23,464,29],[568,25,464,31],[569,10,465,16],[569,14,465,22,"sum"],[569,17,465,25],[569,20,465,28,"t"],[569,21,465,29],[569,22,465,30,"reduce"],[569,28,465,36],[569,29,465,37],[569,39,465,38,"acc"],[569,42,465,41],[569,44,465,43,"i"],[569,45,465,44],[570,12,465,44],[570,19,465,49,"acc"],[570,22,465,52],[570,25,465,55,"i"],[570,26,465,56],[571,10,465,56],[571,13,465,58],[571,14,465,59],[571,15,465,60],[572,10,466,16],[572,14,466,20],[572,16,466,22,"sum"],[572,19,466,25],[572,23,466,29,"OMEGA"],[572,28,466,34],[572,29,466,35],[572,31,467,20],[572,38,467,27],[572,43,467,32],[573,8,468,12],[574,8,469,12],[574,13,469,17],[574,17,469,23,"t"],[574,19,469,24],[574,23,469,28,"z"],[574,24,469,29],[574,26,470,16],[574,30,470,20,"polyChknorm"],[574,41,470,31],[574,42,470,32,"t"],[574,44,470,33],[574,46,470,35,"GAMMA1"],[574,52,470,41],[574,55,470,44,"BETA"],[574,59,470,48],[574,60,470,49],[574,62,471,20],[574,69,471,27],[574,74,471,32],[575,8,472,12],[575,15,472,19],[575,16,472,20],[575,17,472,21],[575,19,472,23,"_$$_REQUIRE"],[575,30,472,23],[575,31,472,23,"_dependencyMap"],[575,45,472,23],[575,64,472,34,"equalBytes"],[575,74,472,44],[575,76,472,46,"cTilde"],[575,82,472,52],[575,84,472,54,"c2"],[575,86,472,56],[575,87,472,57],[576,6,473,8],[577,4,474,4],[577,5,474,5],[578,4,475,4],[578,11,475,11],[579,6,476,8,"internal"],[579,14,476,16],[579,16,476,8,"internal"],[579,24,476,16],[580,6,477,8,"keygen"],[580,12,477,14],[580,14,477,16,"internal"],[580,22,477,24],[580,23,477,25,"keygen"],[580,29,477,31],[581,6,478,8,"signRandBytes"],[581,19,478,21],[581,21,478,23,"internal"],[581,29,478,31],[581,30,478,32,"signRandBytes"],[581,43,478,45],[582,6,479,8,"sign"],[582,10,479,12],[582,12,479,14],[582,21,479,8,"sign"],[582,25,479,12,"sign"],[582,26,479,15,"secretKey"],[582,35,479,24],[582,37,479,26,"msg"],[582,40,479,29],[582,42,479,66],[583,8,479,66],[583,12,479,31,"ctx"],[583,15,479,34],[583,18,479,34,"arguments"],[583,27,479,34],[583,28,479,34,"length"],[583,34,479,34],[583,42,479,34,"arguments"],[583,51,479,34],[583,59,479,34,"undefined"],[583,68,479,34],[583,71,479,34,"arguments"],[583,80,479,34],[583,86,479,37,"_$$_REQUIRE"],[583,97,479,37],[583,98,479,37,"_dependencyMap"],[583,112,479,37],[583,131,479,48,"EMPTY"],[583,136,479,53],[584,8,479,53],[584,12,479,55,"random"],[584,18,479,61],[584,21,479,61,"arguments"],[584,30,479,61],[584,31,479,61,"length"],[584,37,479,61],[584,44,479,61,"arguments"],[584,53,479,61],[584,59,479,61,"undefined"],[584,68,479,61],[585,8,480,12],[585,12,480,18,"M"],[585,13,480,19],[585,16,480,22],[585,17,480,23],[585,18,480,24],[585,20,480,26,"_$$_REQUIRE"],[585,31,480,26],[585,32,480,26,"_dependencyMap"],[585,46,480,26],[585,65,480,37,"getMessage"],[585,75,480,47],[585,77,480,49,"msg"],[585,80,480,52],[585,82,480,54,"ctx"],[585,85,480,57],[585,86,480,58],[586,8,481,12],[586,12,481,18,"res"],[586,15,481,21],[586,18,481,24,"internal"],[586,26,481,32],[586,27,481,33,"sign"],[586,31,481,37],[586,32,481,38,"secretKey"],[586,41,481,47],[586,43,481,49,"M"],[586,44,481,50],[586,46,481,52,"random"],[586,52,481,58],[586,53,481,59],[587,8,482,12,"M"],[587,9,482,13],[587,10,482,14,"fill"],[587,14,482,18],[587,15,482,19],[587,16,482,20],[587,17,482,21],[588,8,483,12],[588,15,483,19,"res"],[588,18,483,22],[589,6,484,8],[589,7,484,9],[590,6,485,8,"verify"],[590,12,485,14],[590,14,485,16],[590,23,485,8,"verify"],[590,29,485,14,"verify"],[590,30,485,17,"publicKey"],[590,39,485,26],[590,41,485,28,"msg"],[590,44,485,31],[590,46,485,33,"sig"],[590,49,485,36],[590,51,485,65],[591,8,485,65],[591,12,485,38,"ctx"],[591,15,485,41],[591,18,485,41,"arguments"],[591,27,485,41],[591,28,485,41,"length"],[591,34,485,41],[591,42,485,41,"arguments"],[591,51,485,41],[591,59,485,41,"undefined"],[591,68,485,41],[591,71,485,41,"arguments"],[591,80,485,41],[591,86,485,44,"_$$_REQUIRE"],[591,97,485,44],[591,98,485,44,"_dependencyMap"],[591,112,485,44],[591,131,485,55,"EMPTY"],[591,136,485,60],[592,8,486,12],[592,15,486,19,"internal"],[592,23,486,27],[592,24,486,28,"verify"],[592,30,486,34],[592,31,486,35,"publicKey"],[592,40,486,44],[592,42,486,46],[592,43,486,47],[592,44,486,48],[592,46,486,50,"_$$_REQUIRE"],[592,57,486,50],[592,58,486,50,"_dependencyMap"],[592,72,486,50],[592,91,486,61,"getMessage"],[592,101,486,71],[592,103,486,73,"msg"],[592,106,486,76],[592,108,486,78,"ctx"],[592,111,486,81],[592,112,486,82],[592,114,486,84,"sig"],[592,117,486,87],[592,118,486,88],[593,6,487,8],[593,7,487,9],[594,6,488,8,"prehash"],[594,13,488,15],[594,15,488,17],[594,24,488,8,"prehash"],[594,31,488,15,"prehash"],[594,32,488,18,"hashName"],[594,40,488,26],[595,8,488,26],[595,15,488,32],[596,10,489,12,"sign"],[596,14,489,16],[596,16,489,18],[596,25,489,12,"sign"],[596,29,489,16,"sign"],[596,30,489,19,"secretKey"],[596,39,489,28],[596,41,489,30,"msg"],[596,44,489,33],[596,46,489,70],[597,12,489,70],[597,16,489,35,"ctx"],[597,19,489,38],[597,22,489,38,"arguments"],[597,31,489,38],[597,32,489,38,"length"],[597,38,489,38],[597,46,489,38,"arguments"],[597,55,489,38],[597,63,489,38,"undefined"],[597,72,489,38],[597,75,489,38,"arguments"],[597,84,489,38],[597,90,489,41,"_$$_REQUIRE"],[597,101,489,41],[597,102,489,41,"_dependencyMap"],[597,116,489,41],[597,135,489,52,"EMPTY"],[597,140,489,57],[598,12,489,57],[598,16,489,59,"random"],[598,22,489,65],[598,25,489,65,"arguments"],[598,34,489,65],[598,35,489,65,"length"],[598,41,489,65],[598,48,489,65,"arguments"],[598,57,489,65],[598,63,489,65,"undefined"],[598,72,489,65],[599,12,490,16],[599,16,490,22,"M"],[599,17,490,23],[599,20,490,26],[599,21,490,27],[599,22,490,28],[599,24,490,30,"_$$_REQUIRE"],[599,35,490,30],[599,36,490,30,"_dependencyMap"],[599,50,490,30],[599,69,490,41,"getMessagePrehash"],[599,86,490,58],[599,88,490,60,"hashName"],[599,96,490,68],[599,98,490,70,"msg"],[599,101,490,73],[599,103,490,75,"ctx"],[599,106,490,78],[599,107,490,79],[600,12,491,16],[600,16,491,22,"res"],[600,19,491,25],[600,22,491,28,"internal"],[600,30,491,36],[600,31,491,37,"sign"],[600,35,491,41],[600,36,491,42,"secretKey"],[600,45,491,51],[600,47,491,53,"M"],[600,48,491,54],[600,50,491,56,"random"],[600,56,491,62],[600,57,491,63],[601,12,492,16,"M"],[601,13,492,17],[601,14,492,18,"fill"],[601,18,492,22],[601,19,492,23],[601,20,492,24],[601,21,492,25],[602,12,493,16],[602,19,493,23,"res"],[602,22,493,26],[603,10,494,12],[603,11,494,13],[604,10,495,12,"verify"],[604,16,495,18],[604,18,495,20],[604,27,495,12,"verify"],[604,33,495,18,"verify"],[604,34,495,21,"publicKey"],[604,43,495,30],[604,45,495,32,"msg"],[604,48,495,35],[604,50,495,37,"sig"],[604,53,495,40],[604,55,495,69],[605,12,495,69],[605,16,495,42,"ctx"],[605,19,495,45],[605,22,495,45,"arguments"],[605,31,495,45],[605,32,495,45,"length"],[605,38,495,45],[605,46,495,45,"arguments"],[605,55,495,45],[605,63,495,45,"undefined"],[605,72,495,45],[605,75,495,45,"arguments"],[605,84,495,45],[605,90,495,48,"_$$_REQUIRE"],[605,101,495,48],[605,102,495,48,"_dependencyMap"],[605,116,495,48],[605,135,495,59,"EMPTY"],[605,140,495,64],[606,12,496,16],[606,19,496,23,"internal"],[606,27,496,31],[606,28,496,32,"verify"],[606,34,496,38],[606,35,496,39,"publicKey"],[606,44,496,48],[606,46,496,50],[606,47,496,51],[606,48,496,52],[606,50,496,54,"_$$_REQUIRE"],[606,61,496,54],[606,62,496,54,"_dependencyMap"],[606,76,496,54],[606,95,496,65,"getMessagePrehash"],[606,112,496,82],[606,114,496,84,"hashName"],[606,122,496,92],[606,124,496,94,"msg"],[606,127,496,97],[606,129,496,99,"ctx"],[606,132,496,102],[606,133,496,103],[606,135,496,105,"sig"],[606,138,496,108],[606,139,496,109],[607,10,497,12],[608,8,498,8],[608,9,498,9],[609,6,498,9],[610,4,499,4],[610,5,499,5],[611,2,500,0],[612,2,501,0],[613,2,502,0,"exports"],[613,9,502,7],[613,10,502,8,"ml_dsa44"],[613,18,502,16],[613,21,502,19,"getDilithium"],[613,33,502,31],[613,34,502,31,"Object"],[613,40,502,31],[613,41,502,31,"assign"],[613,47,502,31],[613,52,503,7,"exports"],[613,59,503,14],[613,60,503,15,"PARAMS"],[613,66,503,21],[613,67,503,22],[613,68,503,23],[613,69,503,24],[614,4,504,4,"CRH_BYTES"],[614,13,504,13],[614,15,504,15],[614,17,504,17],[615,4,505,4,"TR_BYTES"],[615,12,505,12],[615,14,505,14],[615,16,505,16],[616,4,506,4,"C_TILDE_BYTES"],[616,17,506,17],[616,19,506,19],[616,21,506,21],[617,4,507,4,"XOF128"],[617,10,507,10],[617,12,507,12,"_$$_REQUIRE"],[617,23,507,12],[617,24,507,12,"_dependencyMap"],[617,38,507,12],[617,61,507,27,"XOF128"],[617,67,507,33],[618,4,508,4,"XOF256"],[618,10,508,10],[618,12,508,12,"_$$_REQUIRE"],[618,23,508,12],[618,24,508,12,"_dependencyMap"],[618,38,508,12],[618,61,508,27,"XOF256"],[619,2,508,33],[619,4,509,1],[619,5,509,2],[620,2,510,0],[621,2,511,0,"exports"],[621,9,511,7],[621,10,511,8,"ml_dsa65"],[621,18,511,16],[621,21,511,19,"getDilithium"],[621,33,511,31],[621,34,511,31,"Object"],[621,40,511,31],[621,41,511,31,"assign"],[621,47,511,31],[621,52,512,7,"exports"],[621,59,512,14],[621,60,512,15,"PARAMS"],[621,66,512,21],[621,67,512,22],[621,68,512,23],[621,69,512,24],[622,4,513,4,"CRH_BYTES"],[622,13,513,13],[622,15,513,15],[622,17,513,17],[623,4,514,4,"TR_BYTES"],[623,12,514,12],[623,14,514,14],[623,16,514,16],[624,4,515,4,"C_TILDE_BYTES"],[624,17,515,17],[624,19,515,19],[624,21,515,21],[625,4,516,4,"XOF128"],[625,10,516,10],[625,12,516,12,"_$$_REQUIRE"],[625,23,516,12],[625,24,516,12,"_dependencyMap"],[625,38,516,12],[625,61,516,27,"XOF128"],[625,67,516,33],[626,4,517,4,"XOF256"],[626,10,517,10],[626,12,517,12,"_$$_REQUIRE"],[626,23,517,12],[626,24,517,12,"_dependencyMap"],[626,38,517,12],[626,61,517,27,"XOF256"],[627,2,517,33],[627,4,518,1],[627,5,518,2],[628,2,519,0],[629,2,520,0,"exports"],[629,9,520,7],[629,10,520,8,"ml_dsa87"],[629,18,520,16],[629,21,520,19,"getDilithium"],[629,33,520,31],[629,34,520,31,"Object"],[629,40,520,31],[629,41,520,31,"assign"],[629,47,520,31],[629,52,521,7,"exports"],[629,59,521,14],[629,60,521,15,"PARAMS"],[629,66,521,21],[629,67,521,22],[629,68,521,23],[629,69,521,24],[630,4,522,4,"CRH_BYTES"],[630,13,522,13],[630,15,522,15],[630,17,522,17],[631,4,523,4,"TR_BYTES"],[631,12,523,12],[631,14,523,14],[631,16,523,16],[632,4,524,4,"C_TILDE_BYTES"],[632,17,524,17],[632,19,524,19],[632,21,524,21],[633,4,525,4,"XOF128"],[633,10,525,10],[633,12,525,12,"_$$_REQUIRE"],[633,23,525,12],[633,24,525,12,"_dependencyMap"],[633,38,525,12],[633,61,525,27,"XOF128"],[633,67,525,33],[634,4,526,4,"XOF256"],[634,10,526,10],[634,12,526,12,"_$$_REQUIRE"],[634,23,526,12],[634,24,526,12,"_dependencyMap"],[634,38,526,12],[634,61,526,27,"XOF256"],[635,2,526,33],[635,4,527,1],[635,5,527,2],[636,0,527,3],[636,3]],"functionMap":{"names":["<global>","newPoly","id","polyCoder","bitsCoder$argument_1.encode","bitsCoder$argument_1.decode","polyAdd","polySub","polyShiftl","polyChknorm","MultiplyNTTs","RejNTTPoly","getDilithium","decompose","HighBits","LowBits","MakeHint","UseHint","Power2Round","hintCoder.encode","hintCoder.decode","polyCoder$argument_1","polyCoder$argument_2","<anonymous>","RejBoundedPoly","SampleInBall","polyPowerRound","polyUseHint","polyMakeHint","internal.keygen","s1.map$argument_0","internal.sign","y.map$argument_0","w.map$argument_0","internal.verify","z.map$argument_0","t.reduce$argument_0","sign","verify","prehash"],"mappings":"AAA;gBCkC,wBD;WEU,QF;kBGC;YCC,0BD;YEC,0BF;EHC;gBMC;CNI;gBOC;CPI;mBQC;CRI;oBSC;CTM;qBUC;CVS;AWE;CXe;AYC;sBCU;KDQ;qBEC,sBF;oBGC,sBH;qBIC;KJc;oBKC;KLS;wBMC;KNK;gBOG;SPW;gBQC;SRmB;kDSE,cT,EU;KVI;kCSC,yBT;2DSG,uBT;UWQ,qCX;UWC,8BX;IYE;KZgB;yBaC;KbwB;2BcC;KdS;wBeC;KfI;yBgBC;KhBS;gBiBM;iCCoB,4BD;SjB2B;cmBE;gCCyC,4BD;iCEU,sBF;mCDU,4BC;SnBiC;gBsBC;+BCiB,gBD;qCE2B,mBF;StBQ;cyBM;SzBK;gB0BC;S1BE;iB2BC;kBFC;aEK;oBDC;aCE;U3BC;CZE"}},"type":"js/module"}]}