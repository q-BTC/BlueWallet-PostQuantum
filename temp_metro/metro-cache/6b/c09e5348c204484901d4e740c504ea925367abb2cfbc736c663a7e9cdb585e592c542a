{"dependencies":[{"name":"get-intrinsic","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":19,"index":34},"end":{"line":3,"column":43,"index":58}}],"key":"PCk3bGTvvpvYi3h63QPfifPWrLg="}},{"name":"call-bound","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":16,"index":76},"end":{"line":4,"column":37,"index":97}},{"start":{"line":4,"column":16,"index":76},"end":{"line":4,"column":37,"index":97}},{"start":{"line":4,"column":16,"index":76},"end":{"line":4,"column":37,"index":97}},{"start":{"line":4,"column":16,"index":76},"end":{"line":4,"column":37,"index":97}},{"start":{"line":4,"column":16,"index":76},"end":{"line":4,"column":37,"index":97}}],"key":"xVV7LLeUILRahu/c6/GJ3JZjpdc="}},{"name":"es-errors/type","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":17,"index":158},"end":{"line":7,"column":42,"index":183}}],"key":"JK6ql1q9XC7Vc2zUHS8FnD1mVEg="}},{"name":"object-inspect","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":14,"index":113},"end":{"line":5,"column":39,"index":138}}],"key":"aJimx9YkW5uUGBRRft350T29Ty8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var $Map = _$$_REQUIRE(_dependencyMap[0], \"get-intrinsic\")('%Map%', true);\n\n  /** @type {<K, V>(thisArg: Map<K, V>, key: K) => V} */\n  var $mapGet = _$$_REQUIRE(_dependencyMap[1], \"call-bound\")('Map.prototype.get', true);\n  /** @type {<K, V>(thisArg: Map<K, V>, key: K, value: V) => void} */\n  var $mapSet = _$$_REQUIRE(_dependencyMap[1], \"call-bound\")('Map.prototype.set', true);\n  /** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */\n  var $mapHas = _$$_REQUIRE(_dependencyMap[1], \"call-bound\")('Map.prototype.has', true);\n  /** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */\n  var $mapDelete = _$$_REQUIRE(_dependencyMap[1], \"call-bound\")('Map.prototype.delete', true);\n  /** @type {<K, V>(thisArg: Map<K, V>) => number} */\n  var $mapSize = _$$_REQUIRE(_dependencyMap[1], \"call-bound\")('Map.prototype.size', true);\n\n  /** @type {import('.')} */\n  module.exports = !!$Map && /** @type {Exclude<import('.'), false>} */function getSideChannelMap() {\n    /** @typedef {ReturnType<typeof getSideChannelMap>} Channel */\n    /** @typedef {Parameters<Channel['get']>[0]} K */\n    /** @typedef {Parameters<Channel['set']>[1]} V */\n\n    /** @type {Map<K, V> | undefined} */var $m;\n\n    /** @type {Channel} */\n    var channel = {\n      assert: function assert(key) {\n        if (!channel.has(key)) {\n          throw new (_$$_REQUIRE(_dependencyMap[2], \"es-errors/type\"))('Side channel does not contain ' + _$$_REQUIRE(_dependencyMap[3], \"object-inspect\")(key));\n        }\n      },\n      'delete': function _delete(key) {\n        if ($m) {\n          var result = $mapDelete($m, key);\n          if ($mapSize($m) === 0) {\n            $m = void undefined;\n          }\n          return result;\n        }\n        return false;\n      },\n      get: function get(key) {\n        // eslint-disable-line consistent-return\n        if ($m) {\n          return $mapGet($m, key);\n        }\n      },\n      has: function has(key) {\n        if ($m) {\n          return $mapHas($m, key);\n        }\n        return false;\n      },\n      set: function set(key, value) {\n        if (!$m) {\n          // @ts-expect-error TS can't handle narrowing a variable inside a closure\n          $m = new $Map();\n        }\n        $mapSet($m, key, value);\n      }\n    };\n\n    // @ts-expect-error TODO: figure out why TS is erroring here\n    return channel;\n  };\n});","lineCount":66,"map":[[2,2,1,0],[2,14,1,12],[4,2,8,0],[4,6,8,4,"$Map"],[4,10,8,8],[4,13,8,11,"_$$_REQUIRE"],[4,24,8,11],[4,25,8,11,"_dependencyMap"],[4,39,8,11],[4,61,8,24],[4,68,8,31],[4,70,8,33],[4,74,8,37],[4,75,8,38],[6,2,10,0],[7,2,11,0],[7,6,11,4,"$mapGet"],[7,13,11,11],[7,16,11,14,"_$$_REQUIRE"],[7,27,11,14],[7,28,11,14,"_dependencyMap"],[7,42,11,14],[7,61,11,24],[7,80,11,43],[7,82,11,45],[7,86,11,49],[7,87,11,50],[8,2,12,0],[9,2,13,0],[9,6,13,4,"$mapSet"],[9,13,13,11],[9,16,13,14,"_$$_REQUIRE"],[9,27,13,14],[9,28,13,14,"_dependencyMap"],[9,42,13,14],[9,61,13,24],[9,80,13,43],[9,82,13,45],[9,86,13,49],[9,87,13,50],[10,2,14,0],[11,2,15,0],[11,6,15,4,"$mapHas"],[11,13,15,11],[11,16,15,14,"_$$_REQUIRE"],[11,27,15,14],[11,28,15,14,"_dependencyMap"],[11,42,15,14],[11,61,15,24],[11,80,15,43],[11,82,15,45],[11,86,15,49],[11,87,15,50],[12,2,16,0],[13,2,17,0],[13,6,17,4,"$mapDelete"],[13,16,17,14],[13,19,17,17,"_$$_REQUIRE"],[13,30,17,17],[13,31,17,17,"_dependencyMap"],[13,45,17,17],[13,64,17,27],[13,86,17,49],[13,88,17,51],[13,92,17,55],[13,93,17,56],[14,2,18,0],[15,2,19,0],[15,6,19,4,"$mapSize"],[15,14,19,12],[15,17,19,15,"_$$_REQUIRE"],[15,28,19,15],[15,29,19,15,"_dependencyMap"],[15,43,19,15],[15,62,19,25],[15,82,19,45],[15,84,19,47],[15,88,19,51],[15,89,19,52],[17,2,21,0],[18,2,22,0,"module"],[18,8,22,6],[18,9,22,7,"exports"],[18,16,22,14],[18,19,22,17],[18,20,22,18],[18,21,22,19,"$Map"],[18,25,22,23],[18,29,22,27],[18,71,22,70],[18,80,22,79,"getSideChannelMap"],[18,97,22,96,"getSideChannelMap"],[18,98,22,96],[18,100,22,99],[19,4,23,1],[20,4,24,1],[21,4,25,1],[23,4,27,1],[23,40,27,38],[23,44,27,42,"$m"],[23,46,27,44],[25,4,29,1],[26,4,30,1],[26,8,30,5,"channel"],[26,15,30,12],[26,18,30,15],[27,6,31,2,"assert"],[27,12,31,8],[27,14,31,10],[27,23,31,2,"assert"],[27,29,31,8,"assert"],[27,30,31,20,"key"],[27,33,31,23],[27,35,31,25],[28,8,32,3],[28,12,32,7],[28,13,32,8,"channel"],[28,20,32,15],[28,21,32,16,"has"],[28,24,32,19],[28,25,32,20,"key"],[28,28,32,23],[28,29,32,24],[28,31,32,26],[29,10,33,4],[29,16,33,10],[29,21,33,10,"_$$_REQUIRE"],[29,32,33,10],[29,33,33,10,"_dependencyMap"],[29,47,33,10],[29,71,33,25],[29,103,33,57],[29,106,33,60,"_$$_REQUIRE"],[29,117,33,60],[29,118,33,60,"_dependencyMap"],[29,132,33,60],[29,155,33,68,"key"],[29,158,33,71],[29,159,33,72],[29,160,33,73],[30,8,34,3],[31,6,35,2],[31,7,35,3],[32,6,36,2],[32,14,36,10],[32,16,36,12],[32,25,36,2,"_delete"],[32,32,36,10,"_delete"],[32,33,36,22,"key"],[32,36,36,25],[32,38,36,27],[33,8,37,3],[33,12,37,7,"$m"],[33,14,37,9],[33,16,37,11],[34,10,38,4],[34,14,38,8,"result"],[34,20,38,14],[34,23,38,17,"$mapDelete"],[34,33,38,27],[34,34,38,28,"$m"],[34,36,38,30],[34,38,38,32,"key"],[34,41,38,35],[34,42,38,36],[35,10,39,4],[35,14,39,8,"$mapSize"],[35,22,39,16],[35,23,39,17,"$m"],[35,25,39,19],[35,26,39,20],[35,31,39,25],[35,32,39,26],[35,34,39,28],[36,12,40,5,"$m"],[36,14,40,7],[36,17,40,10],[36,22,40,15,"undefined"],[36,31,40,24],[37,10,41,4],[38,10,42,4],[38,17,42,11,"result"],[38,23,42,17],[39,8,43,3],[40,8,44,3],[40,15,44,10],[40,20,44,15],[41,6,45,2],[41,7,45,3],[42,6,46,2,"get"],[42,9,46,5],[42,11,46,7],[42,20,46,2,"get"],[42,23,46,5,"get"],[42,24,46,17,"key"],[42,27,46,20],[42,29,46,22],[43,8,46,24],[44,8,47,3],[44,12,47,7,"$m"],[44,14,47,9],[44,16,47,11],[45,10,48,4],[45,17,48,11,"$mapGet"],[45,24,48,18],[45,25,48,19,"$m"],[45,27,48,21],[45,29,48,23,"key"],[45,32,48,26],[45,33,48,27],[46,8,49,3],[47,6,50,2],[47,7,50,3],[48,6,51,2,"has"],[48,9,51,5],[48,11,51,7],[48,20,51,2,"has"],[48,23,51,5,"has"],[48,24,51,17,"key"],[48,27,51,20],[48,29,51,22],[49,8,52,3],[49,12,52,7,"$m"],[49,14,52,9],[49,16,52,11],[50,10,53,4],[50,17,53,11,"$mapHas"],[50,24,53,18],[50,25,53,19,"$m"],[50,27,53,21],[50,29,53,23,"key"],[50,32,53,26],[50,33,53,27],[51,8,54,3],[52,8,55,3],[52,15,55,10],[52,20,55,15],[53,6,56,2],[53,7,56,3],[54,6,57,2,"set"],[54,9,57,5],[54,11,57,7],[54,20,57,2,"set"],[54,23,57,5,"set"],[54,24,57,17,"key"],[54,27,57,20],[54,29,57,22,"value"],[54,34,57,27],[54,36,57,29],[55,8,58,3],[55,12,58,7],[55,13,58,8,"$m"],[55,15,58,10],[55,17,58,12],[56,10,59,4],[57,10,60,4,"$m"],[57,12,60,6],[57,15,60,9],[57,19,60,13,"$Map"],[57,23,60,17],[57,24,60,18],[57,25,60,19],[58,8,61,3],[59,8,62,3,"$mapSet"],[59,15,62,10],[59,16,62,11,"$m"],[59,18,62,13],[59,20,62,15,"key"],[59,23,62,18],[59,25,62,20,"value"],[59,30,62,25],[59,31,62,26],[60,6,63,2],[61,4,64,1],[61,5,64,2],[63,4,66,1],[64,4,67,1],[64,11,67,8,"channel"],[64,18,67,15],[65,2,68,0],[65,3,68,1],[66,0,68,2],[66,3]],"functionMap":{"names":["<global>","getSideChannelMap","channel.assert","channel._delete","channel.get","channel.has","channel.set"],"mappings":"AAA;sECqB;UCS;GDI;YEC;GFS;OGC;GHI;OIC;GJK;OKC;GLM;CDK"}},"type":"js/module"}]}