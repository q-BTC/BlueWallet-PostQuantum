{"dependencies":[{"name":"./util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":11,"index":219},"end":{"line":8,"column":28,"index":236}},{"start":{"line":8,"column":11,"index":219},"end":{"line":8,"column":28,"index":236}},{"start":{"line":8,"column":11,"index":219},"end":{"line":8,"column":28,"index":236}}],"key":"hA8WsniBZrUJ/dmBZgrNdZcEmJ8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /* -*- Mode: js; js-indent-level: 2; -*- */\n  /*\n   * Copyright 2011 Mozilla Foundation and contributors\n   * Licensed under the New BSD license. See LICENSE or:\n   * http://opensource.org/licenses/BSD-3-Clause\n   */\n\n  var has = Object.prototype.hasOwnProperty;\n  var hasNativeMap = typeof Map !== \"undefined\";\n\n  /**\n   * A data structure which is a combination of an array and a set. Adding a new\n   * member is O(1), testing for membership is O(1), and finding the index of an\n   * element is O(1). Removing elements from the set is not supported. Only\n   * strings are supported for membership.\n   */\n  function ArraySet() {\n    this._array = [];\n    this._set = hasNativeMap ? new Map() : Object.create(null);\n  }\n\n  /**\n   * Static method for creating ArraySet instances from an existing array.\n   */\n  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n    var set = new ArraySet();\n    for (var i = 0, len = aArray.length; i < len; i++) {\n      set.add(aArray[i], aAllowDuplicates);\n    }\n    return set;\n  };\n\n  /**\n   * Return how many unique items are in this ArraySet. If duplicates have been\n   * added, than those do not count towards the size.\n   *\n   * @returns Number\n   */\n  ArraySet.prototype.size = function ArraySet_size() {\n    return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n  };\n\n  /**\n   * Add the given string to this set.\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n    var sStr = hasNativeMap ? aStr : _$$_REQUIRE(_dependencyMap[0], \"./util\").toSetString(aStr);\n    var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n    var idx = this._array.length;\n    if (!isDuplicate || aAllowDuplicates) {\n      this._array.push(aStr);\n    }\n    if (!isDuplicate) {\n      if (hasNativeMap) {\n        this._set.set(aStr, idx);\n      } else {\n        this._set[sStr] = idx;\n      }\n    }\n  };\n\n  /**\n   * Is the given string a member of this set?\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.has = function ArraySet_has(aStr) {\n    if (hasNativeMap) {\n      return this._set.has(aStr);\n    } else {\n      var sStr = _$$_REQUIRE(_dependencyMap[0], \"./util\").toSetString(aStr);\n      return has.call(this._set, sStr);\n    }\n  };\n\n  /**\n   * What is the index of the given string in the array?\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n    if (hasNativeMap) {\n      var idx = this._set.get(aStr);\n      if (idx >= 0) {\n        return idx;\n      }\n    } else {\n      var sStr = _$$_REQUIRE(_dependencyMap[0], \"./util\").toSetString(aStr);\n      if (has.call(this._set, sStr)) {\n        return this._set[sStr];\n      }\n    }\n    throw new Error('\"' + aStr + '\" is not in the set.');\n  };\n\n  /**\n   * What is the element at the given index?\n   *\n   * @param Number aIdx\n   */\n  ArraySet.prototype.at = function ArraySet_at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n      return this._array[aIdx];\n    }\n    throw new Error('No element indexed by ' + aIdx);\n  };\n\n  /**\n   * Returns the array representation of this set (which has the proper indices\n   * indicated by indexOf). Note that this is a copy of the internal array used\n   * for storing the members so that no one can mess with internal state.\n   */\n  ArraySet.prototype.toArray = function ArraySet_toArray() {\n    return this._array.slice();\n  };\n  exports.ArraySet = ArraySet;\n});","lineCount":120,"map":[[2,2,1,0],[3,2,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[9,2,9,0],[9,6,9,4,"has"],[9,9,9,7],[9,12,9,10,"Object"],[9,18,9,16],[9,19,9,17,"prototype"],[9,28,9,26],[9,29,9,27,"hasOwnProperty"],[9,43,9,41],[10,2,10,0],[10,6,10,4,"hasNativeMap"],[10,18,10,16],[10,21,10,19],[10,28,10,26,"Map"],[10,31,10,29],[10,36,10,34],[10,47,10,45],[12,2,12,0],[13,0,13,0],[14,0,14,0],[15,0,15,0],[16,0,16,0],[17,0,17,0],[18,2,18,0],[18,11,18,9,"ArraySet"],[18,19,18,17,"ArraySet"],[18,20,18,17],[18,22,18,20],[19,4,19,2],[19,8,19,6],[19,9,19,7,"_array"],[19,15,19,13],[19,18,19,16],[19,20,19,18],[20,4,20,2],[20,8,20,6],[20,9,20,7,"_set"],[20,13,20,11],[20,16,20,14,"hasNativeMap"],[20,28,20,26],[20,31,20,29],[20,35,20,33,"Map"],[20,38,20,36],[20,39,20,37],[20,40,20,38],[20,43,20,41,"Object"],[20,49,20,47],[20,50,20,48,"create"],[20,56,20,54],[20,57,20,55],[20,61,20,59],[20,62,20,60],[21,2,21,0],[23,2,23,0],[24,0,24,0],[25,0,25,0],[26,2,26,0,"ArraySet"],[26,10,26,8],[26,11,26,9,"fromArray"],[26,20,26,18],[26,23,26,21],[26,32,26,30,"ArraySet_fromArray"],[26,50,26,48,"ArraySet_fromArray"],[26,51,26,49,"aArray"],[26,57,26,55],[26,59,26,57,"aAllowDuplicates"],[26,75,26,73],[26,77,26,75],[27,4,27,2],[27,8,27,6,"set"],[27,11,27,9],[27,14,27,12],[27,18,27,16,"ArraySet"],[27,26,27,24],[27,27,27,25],[27,28,27,26],[28,4,28,2],[28,9,28,7],[28,13,28,11,"i"],[28,14,28,12],[28,17,28,15],[28,18,28,16],[28,20,28,18,"len"],[28,23,28,21],[28,26,28,24,"aArray"],[28,32,28,30],[28,33,28,31,"length"],[28,39,28,37],[28,41,28,39,"i"],[28,42,28,40],[28,45,28,43,"len"],[28,48,28,46],[28,50,28,48,"i"],[28,51,28,49],[28,53,28,51],[28,55,28,53],[29,6,29,4,"set"],[29,9,29,7],[29,10,29,8,"add"],[29,13,29,11],[29,14,29,12,"aArray"],[29,20,29,18],[29,21,29,19,"i"],[29,22,29,20],[29,23,29,21],[29,25,29,23,"aAllowDuplicates"],[29,41,29,39],[29,42,29,40],[30,4,30,2],[31,4,31,2],[31,11,31,9,"set"],[31,14,31,12],[32,2,32,0],[32,3,32,1],[34,2,34,0],[35,0,35,0],[36,0,36,0],[37,0,37,0],[38,0,38,0],[39,0,39,0],[40,2,40,0,"ArraySet"],[40,10,40,8],[40,11,40,9,"prototype"],[40,20,40,18],[40,21,40,19,"size"],[40,25,40,23],[40,28,40,26],[40,37,40,35,"ArraySet_size"],[40,50,40,48,"ArraySet_size"],[40,51,40,48],[40,53,40,51],[41,4,41,2],[41,11,41,9,"hasNativeMap"],[41,23,41,21],[41,26,41,24],[41,30,41,28],[41,31,41,29,"_set"],[41,35,41,33],[41,36,41,34,"size"],[41,40,41,38],[41,43,41,41,"Object"],[41,49,41,47],[41,50,41,48,"getOwnPropertyNames"],[41,69,41,67],[41,70,41,68],[41,74,41,72],[41,75,41,73,"_set"],[41,79,41,77],[41,80,41,78],[41,81,41,79,"length"],[41,87,41,85],[42,2,42,0],[42,3,42,1],[44,2,44,0],[45,0,45,0],[46,0,46,0],[47,0,47,0],[48,0,48,0],[49,2,49,0,"ArraySet"],[49,10,49,8],[49,11,49,9,"prototype"],[49,20,49,18],[49,21,49,19,"add"],[49,24,49,22],[49,27,49,25],[49,36,49,34,"ArraySet_add"],[49,48,49,46,"ArraySet_add"],[49,49,49,47,"aStr"],[49,53,49,51],[49,55,49,53,"aAllowDuplicates"],[49,71,49,69],[49,73,49,71],[50,4,50,2],[50,8,50,6,"sStr"],[50,12,50,10],[50,15,50,13,"hasNativeMap"],[50,27,50,25],[50,30,50,28,"aStr"],[50,34,50,32],[50,37,50,35,"_$$_REQUIRE"],[50,48,50,35],[50,49,50,35,"_dependencyMap"],[50,63,50,35],[50,78,50,40,"toSetString"],[50,89,50,51],[50,90,50,52,"aStr"],[50,94,50,56],[50,95,50,57],[51,4,51,2],[51,8,51,6,"isDuplicate"],[51,19,51,17],[51,22,51,20,"hasNativeMap"],[51,34,51,32],[51,37,51,35],[51,41,51,39],[51,42,51,40,"has"],[51,45,51,43],[51,46,51,44,"aStr"],[51,50,51,48],[51,51,51,49],[51,54,51,52,"has"],[51,57,51,55],[51,58,51,56,"call"],[51,62,51,60],[51,63,51,61],[51,67,51,65],[51,68,51,66,"_set"],[51,72,51,70],[51,74,51,72,"sStr"],[51,78,51,76],[51,79,51,77],[52,4,52,2],[52,8,52,6,"idx"],[52,11,52,9],[52,14,52,12],[52,18,52,16],[52,19,52,17,"_array"],[52,25,52,23],[52,26,52,24,"length"],[52,32,52,30],[53,4,53,2],[53,8,53,6],[53,9,53,7,"isDuplicate"],[53,20,53,18],[53,24,53,22,"aAllowDuplicates"],[53,40,53,38],[53,42,53,40],[54,6,54,4],[54,10,54,8],[54,11,54,9,"_array"],[54,17,54,15],[54,18,54,16,"push"],[54,22,54,20],[54,23,54,21,"aStr"],[54,27,54,25],[54,28,54,26],[55,4,55,2],[56,4,56,2],[56,8,56,6],[56,9,56,7,"isDuplicate"],[56,20,56,18],[56,22,56,20],[57,6,57,4],[57,10,57,8,"hasNativeMap"],[57,22,57,20],[57,24,57,22],[58,8,58,6],[58,12,58,10],[58,13,58,11,"_set"],[58,17,58,15],[58,18,58,16,"set"],[58,21,58,19],[58,22,58,20,"aStr"],[58,26,58,24],[58,28,58,26,"idx"],[58,31,58,29],[58,32,58,30],[59,6,59,4],[59,7,59,5],[59,13,59,11],[60,8,60,6],[60,12,60,10],[60,13,60,11,"_set"],[60,17,60,15],[60,18,60,16,"sStr"],[60,22,60,20],[60,23,60,21],[60,26,60,24,"idx"],[60,29,60,27],[61,6,61,4],[62,4,62,2],[63,2,63,0],[63,3,63,1],[65,2,65,0],[66,0,66,0],[67,0,67,0],[68,0,68,0],[69,0,69,0],[70,2,70,0,"ArraySet"],[70,10,70,8],[70,11,70,9,"prototype"],[70,20,70,18],[70,21,70,19,"has"],[70,24,70,22],[70,27,70,25],[70,36,70,34,"ArraySet_has"],[70,48,70,46,"ArraySet_has"],[70,49,70,47,"aStr"],[70,53,70,51],[70,55,70,53],[71,4,71,2],[71,8,71,6,"hasNativeMap"],[71,20,71,18],[71,22,71,20],[72,6,72,4],[72,13,72,11],[72,17,72,15],[72,18,72,16,"_set"],[72,22,72,20],[72,23,72,21,"has"],[72,26,72,24],[72,27,72,25,"aStr"],[72,31,72,29],[72,32,72,30],[73,4,73,2],[73,5,73,3],[73,11,73,9],[74,6,74,4],[74,10,74,8,"sStr"],[74,14,74,12],[74,17,74,15,"_$$_REQUIRE"],[74,28,74,15],[74,29,74,15,"_dependencyMap"],[74,43,74,15],[74,58,74,20,"toSetString"],[74,69,74,31],[74,70,74,32,"aStr"],[74,74,74,36],[74,75,74,37],[75,6,75,4],[75,13,75,11,"has"],[75,16,75,14],[75,17,75,15,"call"],[75,21,75,19],[75,22,75,20],[75,26,75,24],[75,27,75,25,"_set"],[75,31,75,29],[75,33,75,31,"sStr"],[75,37,75,35],[75,38,75,36],[76,4,76,2],[77,2,77,0],[77,3,77,1],[79,2,79,0],[80,0,80,0],[81,0,81,0],[82,0,82,0],[83,0,83,0],[84,2,84,0,"ArraySet"],[84,10,84,8],[84,11,84,9,"prototype"],[84,20,84,18],[84,21,84,19,"indexOf"],[84,28,84,26],[84,31,84,29],[84,40,84,38,"ArraySet_indexOf"],[84,56,84,54,"ArraySet_indexOf"],[84,57,84,55,"aStr"],[84,61,84,59],[84,63,84,61],[85,4,85,2],[85,8,85,6,"hasNativeMap"],[85,20,85,18],[85,22,85,20],[86,6,86,4],[86,10,86,8,"idx"],[86,13,86,11],[86,16,86,14],[86,20,86,18],[86,21,86,19,"_set"],[86,25,86,23],[86,26,86,24,"get"],[86,29,86,27],[86,30,86,28,"aStr"],[86,34,86,32],[86,35,86,33],[87,6,87,4],[87,10,87,8,"idx"],[87,13,87,11],[87,17,87,15],[87,18,87,16],[87,20,87,18],[88,8,88,8],[88,15,88,15,"idx"],[88,18,88,18],[89,6,89,4],[90,4,90,2],[90,5,90,3],[90,11,90,9],[91,6,91,4],[91,10,91,8,"sStr"],[91,14,91,12],[91,17,91,15,"_$$_REQUIRE"],[91,28,91,15],[91,29,91,15,"_dependencyMap"],[91,43,91,15],[91,58,91,20,"toSetString"],[91,69,91,31],[91,70,91,32,"aStr"],[91,74,91,36],[91,75,91,37],[92,6,92,4],[92,10,92,8,"has"],[92,13,92,11],[92,14,92,12,"call"],[92,18,92,16],[92,19,92,17],[92,23,92,21],[92,24,92,22,"_set"],[92,28,92,26],[92,30,92,28,"sStr"],[92,34,92,32],[92,35,92,33],[92,37,92,35],[93,8,93,6],[93,15,93,13],[93,19,93,17],[93,20,93,18,"_set"],[93,24,93,22],[93,25,93,23,"sStr"],[93,29,93,27],[93,30,93,28],[94,6,94,4],[95,4,95,2],[96,4,97,2],[96,10,97,8],[96,14,97,12,"Error"],[96,19,97,17],[96,20,97,18],[96,23,97,21],[96,26,97,24,"aStr"],[96,30,97,28],[96,33,97,31],[96,55,97,53],[96,56,97,54],[97,2,98,0],[97,3,98,1],[99,2,100,0],[100,0,101,0],[101,0,102,0],[102,0,103,0],[103,0,104,0],[104,2,105,0,"ArraySet"],[104,10,105,8],[104,11,105,9,"prototype"],[104,20,105,18],[104,21,105,19,"at"],[104,23,105,21],[104,26,105,24],[104,35,105,33,"ArraySet_at"],[104,46,105,44,"ArraySet_at"],[104,47,105,45,"aIdx"],[104,51,105,49],[104,53,105,51],[105,4,106,2],[105,8,106,6,"aIdx"],[105,12,106,10],[105,16,106,14],[105,17,106,15],[105,21,106,19,"aIdx"],[105,25,106,23],[105,28,106,26],[105,32,106,30],[105,33,106,31,"_array"],[105,39,106,37],[105,40,106,38,"length"],[105,46,106,44],[105,48,106,46],[106,6,107,4],[106,13,107,11],[106,17,107,15],[106,18,107,16,"_array"],[106,24,107,22],[106,25,107,23,"aIdx"],[106,29,107,27],[106,30,107,28],[107,4,108,2],[108,4,109,2],[108,10,109,8],[108,14,109,12,"Error"],[108,19,109,17],[108,20,109,18],[108,44,109,42],[108,47,109,45,"aIdx"],[108,51,109,49],[108,52,109,50],[109,2,110,0],[109,3,110,1],[111,2,112,0],[112,0,113,0],[113,0,114,0],[114,0,115,0],[115,0,116,0],[116,2,117,0,"ArraySet"],[116,10,117,8],[116,11,117,9,"prototype"],[116,20,117,18],[116,21,117,19,"toArray"],[116,28,117,26],[116,31,117,29],[116,40,117,38,"ArraySet_toArray"],[116,56,117,54,"ArraySet_toArray"],[116,57,117,54],[116,59,117,57],[117,4,118,2],[117,11,118,9],[117,15,118,13],[117,16,118,14,"_array"],[117,22,118,20],[117,23,118,21,"slice"],[117,28,118,26],[117,29,118,27],[117,30,118,28],[118,2,119,0],[118,3,119,1],[119,2,121,0,"exports"],[119,9,121,7],[119,10,121,8,"ArraySet"],[119,18,121,16],[119,21,121,19,"ArraySet"],[119,29,121,27],[120,0,121,28],[120,3]],"functionMap":{"names":["<global>","ArraySet","ArraySet_fromArray","ArraySet_size","ArraySet_add","ArraySet_has","ArraySet_indexOf","ArraySet_at","ArraySet_toArray"],"mappings":"AAA;ACiB;CDG;qBEK;CFM;0BGQ;CHE;yBIO;CJc;yBKO;CLO;6BMO;CNc;wBOO;CPK;6BQO;CRE"}},"type":"js/module"}]}