{"dependencies":[{"name":"es-errors/type","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":17,"index":74},"end":{"line":5,"column":42,"index":99}}],"key":"JK6ql1q9XC7Vc2zUHS8FnD1mVEg="}},{"name":"object-inspect","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":14,"index":29},"end":{"line":3,"column":39,"index":54}}],"key":"aJimx9YkW5uUGBRRft350T29Ty8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  /*\n  * This function traverses the list returning the node corresponding to the given key.\n  *\n  * That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list.\n  * By doing so, all the recently used nodes can be accessed relatively quickly.\n  */\n  /** @type {import('./list.d.ts').listGetNode} */\n  // eslint-disable-next-line consistent-return\n  var listGetNode = function listGetNode(list, key, isDelete) {\n    /** @type {typeof list | NonNullable<(typeof list)['next']>} */\n    var prev = list;\n    /** @type {(typeof list)['next']} */\n    var curr;\n    // eslint-disable-next-line eqeqeq\n    for (; (curr = prev.next) != null; prev = curr) {\n      if (curr.key === key) {\n        prev.next = curr.next;\n        if (!isDelete) {\n          // eslint-disable-next-line no-extra-parens\n          curr.next = /** @type {NonNullable<typeof list.next>} */list.next;\n          list.next = curr; // eslint-disable-line no-param-reassign\n        }\n        return curr;\n      }\n    }\n  };\n\n  /** @type {import('./list.d.ts').listGet} */\n  var listGet = function listGet(objects, key) {\n    if (!objects) {\n      return void undefined;\n    }\n    var node = listGetNode(objects, key);\n    return node && node.value;\n  };\n  /** @type {import('./list.d.ts').listSet} */\n  var listSet = function listSet(objects, key, value) {\n    var node = listGetNode(objects, key);\n    if (node) {\n      node.value = value;\n    } else {\n      // Prepend the new node to the beginning of the list\n      objects.next = /** @type {import('./list.d.ts').ListNode<typeof value, typeof key>} */{\n        // eslint-disable-line no-param-reassign, no-extra-parens\n        key: key,\n        next: objects.next,\n        value: value\n      };\n    }\n  };\n  /** @type {import('./list.d.ts').listHas} */\n  var listHas = function listHas(objects, key) {\n    if (!objects) {\n      return false;\n    }\n    return !!listGetNode(objects, key);\n  };\n  /** @type {import('./list.d.ts').listDelete} */\n  // eslint-disable-next-line consistent-return\n  var listDelete = function listDelete(objects, key) {\n    if (objects) {\n      return listGetNode(objects, key, true);\n    }\n  };\n\n  /** @type {import('.')} */\n  module.exports = function getSideChannelList() {\n    /** @typedef {ReturnType<typeof getSideChannelList>} Channel */\n    /** @typedef {Parameters<Channel['get']>[0]} K */\n    /** @typedef {Parameters<Channel['set']>[1]} V */\n\n    /** @type {import('./list.d.ts').RootNode<V, K> | undefined} */var $o;\n\n    /** @type {Channel} */\n    var channel = {\n      assert: function assert(key) {\n        if (!channel.has(key)) {\n          throw new (_$$_REQUIRE(_dependencyMap[0], \"es-errors/type\"))('Side channel does not contain ' + _$$_REQUIRE(_dependencyMap[1], \"object-inspect\")(key));\n        }\n      },\n      'delete': function _delete(key) {\n        var root = $o && $o.next;\n        var deletedNode = listDelete($o, key);\n        if (deletedNode && root && root === deletedNode) {\n          $o = void undefined;\n        }\n        return !!deletedNode;\n      },\n      get: function get(key) {\n        return listGet($o, key);\n      },\n      has: function has(key) {\n        return listHas($o, key);\n      },\n      set: function set(key, value) {\n        if (!$o) {\n          // Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head\n          $o = {\n            next: void undefined\n          };\n        }\n        // eslint-disable-next-line no-extra-parens\n        listSet(/** @type {NonNullable<typeof $o>} */$o, key, value);\n      }\n    };\n    // @ts-expect-error TODO: figure out why this is erroring\n    return channel;\n  };\n});","lineCount":112,"map":[[2,2,1,0],[2,14,1,12],[4,2,7,0],[5,0,8,0],[6,0,9,0],[7,0,10,0],[8,0,11,0],[9,0,12,0],[10,2,13,0],[11,2,14,0],[12,2,15,0],[12,6,15,4,"listGetNode"],[12,17,15,15],[12,20,15,18],[12,29,15,4,"listGetNode"],[12,40,15,15,"listGetNode"],[12,41,15,28,"list"],[12,45,15,32],[12,47,15,34,"key"],[12,50,15,37],[12,52,15,39,"isDelete"],[12,60,15,47],[12,62,15,49],[13,4,16,1],[14,4,17,1],[14,8,17,5,"prev"],[14,12,17,9],[14,15,17,12,"list"],[14,19,17,16],[15,4,18,1],[16,4,19,1],[16,8,19,5,"curr"],[16,12,19,9],[17,4,20,1],[18,4,21,1],[18,11,21,8],[18,12,21,9,"curr"],[18,16,21,13],[18,19,21,16,"prev"],[18,23,21,20],[18,24,21,21,"next"],[18,28,21,25],[18,33,21,30],[18,37,21,34],[18,39,21,36,"prev"],[18,43,21,40],[18,46,21,43,"curr"],[18,50,21,47],[18,52,21,49],[19,6,22,2],[19,10,22,6,"curr"],[19,14,22,10],[19,15,22,11,"key"],[19,18,22,14],[19,23,22,19,"key"],[19,26,22,22],[19,28,22,24],[20,8,23,3,"prev"],[20,12,23,7],[20,13,23,8,"next"],[20,17,23,12],[20,20,23,15,"curr"],[20,24,23,19],[20,25,23,20,"next"],[20,29,23,24],[21,8,24,3],[21,12,24,7],[21,13,24,8,"isDelete"],[21,21,24,16],[21,23,24,18],[22,10,25,4],[23,10,26,4,"curr"],[23,14,26,8],[23,15,26,9,"next"],[23,19,26,13],[23,22,26,16],[23,66,26,62,"list"],[23,70,26,66],[23,71,26,67,"next"],[23,75,26,72],[24,10,27,4,"list"],[24,14,27,8],[24,15,27,9,"next"],[24,19,27,13],[24,22,27,16,"curr"],[24,26,27,20],[24,27,27,21],[24,28,27,22],[25,8,28,3],[26,8,29,3],[26,15,29,10,"curr"],[26,19,29,14],[27,6,30,2],[28,4,31,1],[29,2,32,0],[29,3,32,1],[31,2,34,0],[32,2,35,0],[32,6,35,4,"listGet"],[32,13,35,11],[32,16,35,14],[32,25,35,4,"listGet"],[32,32,35,11,"listGet"],[32,33,35,24,"objects"],[32,40,35,31],[32,42,35,33,"key"],[32,45,35,36],[32,47,35,38],[33,4,36,1],[33,8,36,5],[33,9,36,6,"objects"],[33,16,36,13],[33,18,36,15],[34,6,37,2],[34,13,37,9],[34,18,37,14,"undefined"],[34,27,37,23],[35,4,38,1],[36,4,39,1],[36,8,39,5,"node"],[36,12,39,9],[36,15,39,12,"listGetNode"],[36,26,39,23],[36,27,39,24,"objects"],[36,34,39,31],[36,36,39,33,"key"],[36,39,39,36],[36,40,39,37],[37,4,40,1],[37,11,40,8,"node"],[37,15,40,12],[37,19,40,16,"node"],[37,23,40,20],[37,24,40,21,"value"],[37,29,40,26],[38,2,41,0],[38,3,41,1],[39,2,42,0],[40,2,43,0],[40,6,43,4,"listSet"],[40,13,43,11],[40,16,43,14],[40,25,43,4,"listSet"],[40,32,43,11,"listSet"],[40,33,43,24,"objects"],[40,40,43,31],[40,42,43,33,"key"],[40,45,43,36],[40,47,43,38,"value"],[40,52,43,43],[40,54,43,45],[41,4,44,1],[41,8,44,5,"node"],[41,12,44,9],[41,15,44,12,"listGetNode"],[41,26,44,23],[41,27,44,24,"objects"],[41,34,44,31],[41,36,44,33,"key"],[41,39,44,36],[41,40,44,37],[42,4,45,1],[42,8,45,5,"node"],[42,12,45,9],[42,14,45,11],[43,6,46,2,"node"],[43,10,46,6],[43,11,46,7,"value"],[43,16,46,12],[43,19,46,15,"value"],[43,24,46,20],[44,4,47,1],[44,5,47,2],[44,11,47,8],[45,6,48,2],[46,6,49,2,"objects"],[46,13,49,9],[46,14,49,10,"next"],[46,18,49,14],[46,21,49,17],[46,92,49,90],[47,8,49,92],[48,8,50,3,"key"],[48,11,50,6],[48,13,50,8,"key"],[48,16,50,11],[49,8,51,3,"next"],[49,12,51,7],[49,14,51,9,"objects"],[49,21,51,16],[49,22,51,17,"next"],[49,26,51,21],[50,8,52,3,"value"],[50,13,52,8],[50,15,52,10,"value"],[51,6,53,2],[51,7,53,4],[52,4,54,1],[53,2,55,0],[53,3,55,1],[54,2,56,0],[55,2,57,0],[55,6,57,4,"listHas"],[55,13,57,11],[55,16,57,14],[55,25,57,4,"listHas"],[55,32,57,11,"listHas"],[55,33,57,24,"objects"],[55,40,57,31],[55,42,57,33,"key"],[55,45,57,36],[55,47,57,38],[56,4,58,1],[56,8,58,5],[56,9,58,6,"objects"],[56,16,58,13],[56,18,58,15],[57,6,59,2],[57,13,59,9],[57,18,59,14],[58,4,60,1],[59,4,61,1],[59,11,61,8],[59,12,61,9],[59,13,61,10,"listGetNode"],[59,24,61,21],[59,25,61,22,"objects"],[59,32,61,29],[59,34,61,31,"key"],[59,37,61,34],[59,38,61,35],[60,2,62,0],[60,3,62,1],[61,2,63,0],[62,2,64,0],[63,2,65,0],[63,6,65,4,"listDelete"],[63,16,65,14],[63,19,65,17],[63,28,65,4,"listDelete"],[63,38,65,14,"listDelete"],[63,39,65,27,"objects"],[63,46,65,34],[63,48,65,36,"key"],[63,51,65,39],[63,53,65,41],[64,4,66,1],[64,8,66,5,"objects"],[64,15,66,12],[64,17,66,14],[65,6,67,2],[65,13,67,9,"listGetNode"],[65,24,67,20],[65,25,67,21,"objects"],[65,32,67,28],[65,34,67,30,"key"],[65,37,67,33],[65,39,67,35],[65,43,67,39],[65,44,67,40],[66,4,68,1],[67,2,69,0],[67,3,69,1],[69,2,71,0],[70,2,72,0,"module"],[70,8,72,6],[70,9,72,7,"exports"],[70,16,72,14],[70,19,72,17],[70,28,72,26,"getSideChannelList"],[70,46,72,44,"getSideChannelList"],[70,47,72,44],[70,49,72,47],[71,4,73,1],[72,4,74,1],[73,4,75,1],[75,4,77,1],[75,67,77,65],[75,71,77,69,"$o"],[75,73,77,71],[77,4,79,1],[78,4,80,1],[78,8,80,5,"channel"],[78,15,80,12],[78,18,80,15],[79,6,81,2,"assert"],[79,12,81,8],[79,14,81,10],[79,23,81,2,"assert"],[79,29,81,8,"assert"],[79,30,81,20,"key"],[79,33,81,23],[79,35,81,25],[80,8,82,3],[80,12,82,7],[80,13,82,8,"channel"],[80,20,82,15],[80,21,82,16,"has"],[80,24,82,19],[80,25,82,20,"key"],[80,28,82,23],[80,29,82,24],[80,31,82,26],[81,10,83,4],[81,16,83,10],[81,21,83,10,"_$$_REQUIRE"],[81,32,83,10],[81,33,83,10,"_dependencyMap"],[81,47,83,10],[81,71,83,25],[81,103,83,57],[81,106,83,60,"_$$_REQUIRE"],[81,117,83,60],[81,118,83,60,"_dependencyMap"],[81,132,83,60],[81,155,83,68,"key"],[81,158,83,71],[81,159,83,72],[81,160,83,73],[82,8,84,3],[83,6,85,2],[83,7,85,3],[84,6,86,2],[84,14,86,10],[84,16,86,12],[84,25,86,2,"_delete"],[84,32,86,10,"_delete"],[84,33,86,22,"key"],[84,36,86,25],[84,38,86,27],[85,8,87,3],[85,12,87,7,"root"],[85,16,87,11],[85,19,87,14,"$o"],[85,21,87,16],[85,25,87,20,"$o"],[85,27,87,22],[85,28,87,23,"next"],[85,32,87,27],[86,8,88,3],[86,12,88,7,"deletedNode"],[86,23,88,18],[86,26,88,21,"listDelete"],[86,36,88,31],[86,37,88,32,"$o"],[86,39,88,34],[86,41,88,36,"key"],[86,44,88,39],[86,45,88,40],[87,8,89,3],[87,12,89,7,"deletedNode"],[87,23,89,18],[87,27,89,22,"root"],[87,31,89,26],[87,35,89,30,"root"],[87,39,89,34],[87,44,89,39,"deletedNode"],[87,55,89,50],[87,57,89,52],[88,10,90,4,"$o"],[88,12,90,6],[88,15,90,9],[88,20,90,14,"undefined"],[88,29,90,23],[89,8,91,3],[90,8,92,3],[90,15,92,10],[90,16,92,11],[90,17,92,12,"deletedNode"],[90,28,92,23],[91,6,93,2],[91,7,93,3],[92,6,94,2,"get"],[92,9,94,5],[92,11,94,7],[92,20,94,2,"get"],[92,23,94,5,"get"],[92,24,94,17,"key"],[92,27,94,20],[92,29,94,22],[93,8,95,3],[93,15,95,10,"listGet"],[93,22,95,17],[93,23,95,18,"$o"],[93,25,95,20],[93,27,95,22,"key"],[93,30,95,25],[93,31,95,26],[94,6,96,2],[94,7,96,3],[95,6,97,2,"has"],[95,9,97,5],[95,11,97,7],[95,20,97,2,"has"],[95,23,97,5,"has"],[95,24,97,17,"key"],[95,27,97,20],[95,29,97,22],[96,8,98,3],[96,15,98,10,"listHas"],[96,22,98,17],[96,23,98,18,"$o"],[96,25,98,20],[96,27,98,22,"key"],[96,30,98,25],[96,31,98,26],[97,6,99,2],[97,7,99,3],[98,6,100,2,"set"],[98,9,100,5],[98,11,100,7],[98,20,100,2,"set"],[98,23,100,5,"set"],[98,24,100,17,"key"],[98,27,100,20],[98,29,100,22,"value"],[98,34,100,27],[98,36,100,29],[99,8,101,3],[99,12,101,7],[99,13,101,8,"$o"],[99,15,101,10],[99,17,101,12],[100,10,102,4],[101,10,103,4,"$o"],[101,12,103,6],[101,15,103,9],[102,12,104,5,"next"],[102,16,104,9],[102,18,104,11],[102,23,104,16,"undefined"],[103,10,105,4],[103,11,105,5],[104,8,106,3],[105,8,107,3],[106,8,108,3,"listSet"],[106,15,108,10],[106,16,108,11],[106,53,108,50,"$o"],[106,55,108,52],[106,57,108,55,"key"],[106,60,108,58],[106,62,108,60,"value"],[106,67,108,65],[106,68,108,66],[107,6,109,2],[108,4,110,1],[108,5,110,2],[109,4,111,1],[110,4,112,1],[110,11,112,8,"channel"],[110,18,112,15],[111,2,113,0],[111,3,113,1],[112,0,113,2],[112,3]],"functionMap":{"names":["<global>","listGetNode","listGet","listSet","listHas","listDelete","getSideChannelList","channel.assert","channel._delete","channel.get","channel.has","channel.set"],"mappings":"AAA;kBCc;CDiB;cEG;CFM;cGE;CHY;cIE;CJK;iBKG;CLI;iBMG;UCS;GDI;YEC;GFO;OGC;GHE;OIC;GJE;OKC;GLS;CNI"}},"type":"js/module"}]}