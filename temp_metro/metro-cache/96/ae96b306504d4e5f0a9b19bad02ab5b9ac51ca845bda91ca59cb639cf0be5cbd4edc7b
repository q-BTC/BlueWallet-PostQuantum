{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function getTrace(node) {\n    function shouldPutToTrace(syntax) {\n      if (syntax === null) {\n        return false;\n      }\n      return syntax.type === 'Type' || syntax.type === 'Property' || syntax.type === 'Keyword';\n    }\n    function hasMatch(matchNode) {\n      if (Array.isArray(matchNode.match)) {\n        // use for-loop for better perfomance\n        for (var i = 0; i < matchNode.match.length; i++) {\n          if (hasMatch(matchNode.match[i])) {\n            if (shouldPutToTrace(matchNode.syntax)) {\n              result.unshift(matchNode.syntax);\n            }\n            return true;\n          }\n        }\n      } else if (matchNode.node === node) {\n        result = shouldPutToTrace(matchNode.syntax) ? [matchNode.syntax] : [];\n        return true;\n      }\n      return false;\n    }\n    var result = null;\n    if (this.matched !== null) {\n      hasMatch(this.matched);\n    }\n    return result;\n  }\n  function testNode(match, node, fn) {\n    var trace = getTrace.call(match, node);\n    if (trace === null) {\n      return false;\n    }\n    return trace.some(fn);\n  }\n  function isType(node, type) {\n    return testNode(this, node, function (matchNode) {\n      return matchNode.type === 'Type' && matchNode.name === type;\n    });\n  }\n  function isProperty(node, property) {\n    return testNode(this, node, function (matchNode) {\n      return matchNode.type === 'Property' && matchNode.name === property;\n    });\n  }\n  function isKeyword(node) {\n    return testNode(this, node, function (matchNode) {\n      return matchNode.type === 'Keyword';\n    });\n  }\n  module.exports = {\n    getTrace: getTrace,\n    isType: isType,\n    isProperty: isProperty,\n    isKeyword: isKeyword\n  };\n});","lineCount":60,"map":[[2,2,1,0],[2,11,1,9,"getTrace"],[2,19,1,17,"getTrace"],[2,20,1,18,"node"],[2,24,1,22],[2,26,1,24],[3,4,2,4],[3,13,2,13,"shouldPutToTrace"],[3,29,2,29,"shouldPutToTrace"],[3,30,2,30,"syntax"],[3,36,2,36],[3,38,2,38],[4,6,3,8],[4,10,3,12,"syntax"],[4,16,3,18],[4,21,3,23],[4,25,3,27],[4,27,3,29],[5,8,4,12],[5,15,4,19],[5,20,4,24],[6,6,5,8],[7,6,7,8],[7,13,8,12,"syntax"],[7,19,8,18],[7,20,8,19,"type"],[7,24,8,23],[7,29,8,28],[7,35,8,34],[7,39,9,12,"syntax"],[7,45,9,18],[7,46,9,19,"type"],[7,50,9,23],[7,55,9,28],[7,65,9,38],[7,69,10,12,"syntax"],[7,75,10,18],[7,76,10,19,"type"],[7,80,10,23],[7,85,10,28],[7,94,10,37],[8,4,12,4],[9,4,14,4],[9,13,14,13,"hasMatch"],[9,21,14,21,"hasMatch"],[9,22,14,22,"matchNode"],[9,31,14,31],[9,33,14,33],[10,6,15,8],[10,10,15,12,"Array"],[10,15,15,17],[10,16,15,18,"isArray"],[10,23,15,25],[10,24,15,26,"matchNode"],[10,33,15,35],[10,34,15,36,"match"],[10,39,15,41],[10,40,15,42],[10,42,15,44],[11,8,16,12],[12,8,17,12],[12,13,17,17],[12,17,17,21,"i"],[12,18,17,22],[12,21,17,25],[12,22,17,26],[12,24,17,28,"i"],[12,25,17,29],[12,28,17,32,"matchNode"],[12,37,17,41],[12,38,17,42,"match"],[12,43,17,47],[12,44,17,48,"length"],[12,50,17,54],[12,52,17,56,"i"],[12,53,17,57],[12,55,17,59],[12,57,17,61],[13,10,18,16],[13,14,18,20,"hasMatch"],[13,22,18,28],[13,23,18,29,"matchNode"],[13,32,18,38],[13,33,18,39,"match"],[13,38,18,44],[13,39,18,45,"i"],[13,40,18,46],[13,41,18,47],[13,42,18,48],[13,44,18,50],[14,12,19,20],[14,16,19,24,"shouldPutToTrace"],[14,32,19,40],[14,33,19,41,"matchNode"],[14,42,19,50],[14,43,19,51,"syntax"],[14,49,19,57],[14,50,19,58],[14,52,19,60],[15,14,20,24,"result"],[15,20,20,30],[15,21,20,31,"unshift"],[15,28,20,38],[15,29,20,39,"matchNode"],[15,38,20,48],[15,39,20,49,"syntax"],[15,45,20,55],[15,46,20,56],[16,12,21,20],[17,12,23,20],[17,19,23,27],[17,23,23,31],[18,10,24,16],[19,8,25,12],[20,6,26,8],[20,7,26,9],[20,13,26,15],[20,17,26,19,"matchNode"],[20,26,26,28],[20,27,26,29,"node"],[20,31,26,33],[20,36,26,38,"node"],[20,40,26,42],[20,42,26,44],[21,8,27,12,"result"],[21,14,27,18],[21,17,27,21,"shouldPutToTrace"],[21,33,27,37],[21,34,27,38,"matchNode"],[21,43,27,47],[21,44,27,48,"syntax"],[21,50,27,54],[21,51,27,55],[21,54,28,18],[21,55,28,19,"matchNode"],[21,64,28,28],[21,65,28,29,"syntax"],[21,71,28,35],[21,72,28,36],[21,75,29,18],[21,77,29,20],[22,8,31,12],[22,15,31,19],[22,19,31,23],[23,6,32,8],[24,6,34,8],[24,13,34,15],[24,18,34,20],[25,4,35,4],[26,4,37,4],[26,8,37,8,"result"],[26,14,37,14],[26,17,37,17],[26,21,37,21],[27,4,39,4],[27,8,39,8],[27,12,39,12],[27,13,39,13,"matched"],[27,20,39,20],[27,25,39,25],[27,29,39,29],[27,31,39,31],[28,6,40,8,"hasMatch"],[28,14,40,16],[28,15,40,17],[28,19,40,21],[28,20,40,22,"matched"],[28,27,40,29],[28,28,40,30],[29,4,41,4],[30,4,43,4],[30,11,43,11,"result"],[30,17,43,17],[31,2,44,0],[32,2,46,0],[32,11,46,9,"testNode"],[32,19,46,17,"testNode"],[32,20,46,18,"match"],[32,25,46,23],[32,27,46,25,"node"],[32,31,46,29],[32,33,46,31,"fn"],[32,35,46,33],[32,37,46,35],[33,4,47,4],[33,8,47,8,"trace"],[33,13,47,13],[33,16,47,16,"getTrace"],[33,24,47,24],[33,25,47,25,"call"],[33,29,47,29],[33,30,47,30,"match"],[33,35,47,35],[33,37,47,37,"node"],[33,41,47,41],[33,42,47,42],[34,4,49,4],[34,8,49,8,"trace"],[34,13,49,13],[34,18,49,18],[34,22,49,22],[34,24,49,24],[35,6,50,8],[35,13,50,15],[35,18,50,20],[36,4,51,4],[37,4,53,4],[37,11,53,11,"trace"],[37,16,53,16],[37,17,53,17,"some"],[37,21,53,21],[37,22,53,22,"fn"],[37,24,53,24],[37,25,53,25],[38,2,54,0],[39,2,56,0],[39,11,56,9,"isType"],[39,17,56,15,"isType"],[39,18,56,16,"node"],[39,22,56,20],[39,24,56,22,"type"],[39,28,56,26],[39,30,56,28],[40,4,57,4],[40,11,57,11,"testNode"],[40,19,57,19],[40,20,57,20],[40,24,57,24],[40,26,57,26,"node"],[40,30,57,30],[40,32,57,32],[40,42,57,41,"matchNode"],[40,51,57,50],[40,53,57,52],[41,6,58,8],[41,13,58,15,"matchNode"],[41,22,58,24],[41,23,58,25,"type"],[41,27,58,29],[41,32,58,34],[41,38,58,40],[41,42,58,44,"matchNode"],[41,51,58,53],[41,52,58,54,"name"],[41,56,58,58],[41,61,58,63,"type"],[41,65,58,67],[42,4,59,4],[42,5,59,5],[42,6,59,6],[43,2,60,0],[44,2,62,0],[44,11,62,9,"isProperty"],[44,21,62,19,"isProperty"],[44,22,62,20,"node"],[44,26,62,24],[44,28,62,26,"property"],[44,36,62,34],[44,38,62,36],[45,4,63,4],[45,11,63,11,"testNode"],[45,19,63,19],[45,20,63,20],[45,24,63,24],[45,26,63,26,"node"],[45,30,63,30],[45,32,63,32],[45,42,63,41,"matchNode"],[45,51,63,50],[45,53,63,52],[46,6,64,8],[46,13,64,15,"matchNode"],[46,22,64,24],[46,23,64,25,"type"],[46,27,64,29],[46,32,64,34],[46,42,64,44],[46,46,64,48,"matchNode"],[46,55,64,57],[46,56,64,58,"name"],[46,60,64,62],[46,65,64,67,"property"],[46,73,64,75],[47,4,65,4],[47,5,65,5],[47,6,65,6],[48,2,66,0],[49,2,68,0],[49,11,68,9,"isKeyword"],[49,20,68,18,"isKeyword"],[49,21,68,19,"node"],[49,25,68,23],[49,27,68,25],[50,4,69,4],[50,11,69,11,"testNode"],[50,19,69,19],[50,20,69,20],[50,24,69,24],[50,26,69,26,"node"],[50,30,69,30],[50,32,69,32],[50,42,69,41,"matchNode"],[50,51,69,50],[50,53,69,52],[51,6,70,8],[51,13,70,15,"matchNode"],[51,22,70,24],[51,23,70,25,"type"],[51,27,70,29],[51,32,70,34],[51,41,70,43],[52,4,71,4],[52,5,71,5],[52,6,71,6],[53,2,72,0],[54,2,74,0,"module"],[54,8,74,6],[54,9,74,7,"exports"],[54,16,74,14],[54,19,74,17],[55,4,75,4,"getTrace"],[55,12,75,12],[55,14,75,14,"getTrace"],[55,22,75,22],[56,4,76,4,"isType"],[56,10,76,10],[56,12,76,12,"isType"],[56,18,76,18],[57,4,77,4,"isProperty"],[57,14,77,14],[57,16,77,16,"isProperty"],[57,26,77,26],[58,4,78,4,"isKeyword"],[58,13,78,13],[58,15,78,15,"isKeyword"],[59,2,79,0],[59,3,79,1],[60,0,79,2],[60,3]],"functionMap":{"names":["getTrace","shouldPutToTrace","hasMatch","<global>","testNode","isType","testNode$argument_2","isProperty","isKeyword"],"mappings":"AAA;ICC;KDU;IEE;KFqB;CGS;ACE;CDQ;AEE;gCCC;KDE;CFC;AIE;gCDC;KCE;CJC;AKE;gCFC;KEE;CLC"}},"type":"js/module"}]}