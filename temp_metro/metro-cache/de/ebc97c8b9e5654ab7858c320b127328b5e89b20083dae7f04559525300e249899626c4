{"dependencies":[{"name":"./version-check","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":21,"index":21},"end":{"line":1,"column":47,"index":47}}],"key":"KsD14V0r68dUrO4yG/0Qjl3HIGU="}},{"name":"./regex","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":14,"index":62},"end":{"line":2,"column":32,"index":80}},{"start":{"line":2,"column":14,"index":62},"end":{"line":2,"column":32,"index":80}},{"start":{"line":2,"column":14,"index":62},"end":{"line":2,"column":32,"index":80}}],"key":"XzRBw0s1ks2ZpbqcA5eFQQ2z9QU="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Numeric mode encodes data from the decimal digit set (0 - 9)\n   * (byte values 30HEX to 39HEX).\n   * Normally, 3 data characters are represented by 10 bits.\n   *\n   * @type {Object}\n   */\n  exports.NUMERIC = {\n    id: 'Numeric',\n    bit: 1 << 0,\n    ccBits: [10, 12, 14]\n  };\n\n  /**\n   * Alphanumeric mode encodes data from a set of 45 characters,\n   * i.e. 10 numeric digits (0 - 9),\n   *      26 alphabetic characters (A - Z),\n   *   and 9 symbols (SP, $, %, *, +, -, ., /, :).\n   * Normally, two input characters are represented by 11 bits.\n   *\n   * @type {Object}\n   */\n  exports.ALPHANUMERIC = {\n    id: 'Alphanumeric',\n    bit: 1 << 1,\n    ccBits: [9, 11, 13]\n  };\n\n  /**\n   * In byte mode, data is encoded at 8 bits per character.\n   *\n   * @type {Object}\n   */\n  exports.BYTE = {\n    id: 'Byte',\n    bit: 1 << 2,\n    ccBits: [8, 16, 16]\n  };\n\n  /**\n   * The Kanji mode efficiently encodes Kanji characters in accordance with\n   * the Shift JIS system based on JIS X 0208.\n   * The Shift JIS values are shifted from the JIS X 0208 values.\n   * JIS X 0208 gives details of the shift coded representation.\n   * Each two-byte character value is compacted to a 13-bit binary codeword.\n   *\n   * @type {Object}\n   */\n  exports.KANJI = {\n    id: 'Kanji',\n    bit: 1 << 3,\n    ccBits: [8, 10, 12]\n  };\n\n  /**\n   * Mixed mode will contain a sequences of data in a combination of any of\n   * the modes described above\n   *\n   * @type {Object}\n   */\n  exports.MIXED = {\n    bit: -1\n  };\n\n  /**\n   * Returns the number of bits needed to store the data length\n   * according to QR Code specifications.\n   *\n   * @param  {Mode}   mode    Data mode\n   * @param  {Number} version QR Code version\n   * @return {Number}         Number of bits\n   */\n  exports.getCharCountIndicator = function getCharCountIndicator(mode, version) {\n    if (!mode.ccBits) throw new Error('Invalid mode: ' + mode);\n    if (!_$$_REQUIRE(_dependencyMap[0], \"./version-check\").isValid(version)) {\n      throw new Error('Invalid version: ' + version);\n    }\n    if (version >= 1 && version < 10) return mode.ccBits[0];else if (version < 27) return mode.ccBits[1];\n    return mode.ccBits[2];\n  };\n\n  /**\n   * Returns the most efficient mode to store the specified data\n   *\n   * @param  {String} dataStr Input data string\n   * @return {Mode}           Best mode\n   */\n  exports.getBestModeForData = function getBestModeForData(dataStr) {\n    if (_$$_REQUIRE(_dependencyMap[1], \"./regex\").testNumeric(dataStr)) return exports.NUMERIC;else if (_$$_REQUIRE(_dependencyMap[1], \"./regex\").testAlphanumeric(dataStr)) return exports.ALPHANUMERIC;else if (_$$_REQUIRE(_dependencyMap[1], \"./regex\").testKanji(dataStr)) return exports.KANJI;else return exports.BYTE;\n  };\n\n  /**\n   * Return mode name as string\n   *\n   * @param {Mode} mode Mode object\n   * @returns {String}  Mode name\n   */\n  exports.toString = function toString(mode) {\n    if (mode && mode.id) return mode.id;\n    throw new Error('Invalid mode');\n  };\n\n  /**\n   * Check if input param is a valid mode object\n   *\n   * @param   {Mode}    mode Mode object\n   * @returns {Boolean} True if valid mode, false otherwise\n   */\n  exports.isValid = function isValid(mode) {\n    return mode && mode.bit && mode.ccBits;\n  };\n\n  /**\n   * Get mode object from its name\n   *\n   * @param   {String} string Mode name\n   * @returns {Mode}          Mode object\n   */\n  function fromString(string) {\n    if (typeof string !== 'string') {\n      throw new Error('Param is not a string');\n    }\n    var lcStr = string.toLowerCase();\n    switch (lcStr) {\n      case 'numeric':\n        return exports.NUMERIC;\n      case 'alphanumeric':\n        return exports.ALPHANUMERIC;\n      case 'kanji':\n        return exports.KANJI;\n      case 'byte':\n        return exports.BYTE;\n      default:\n        throw new Error('Unknown mode: ' + string);\n    }\n  }\n\n  /**\n   * Returns mode from a value.\n   * If value is not a valid mode, returns defaultValue\n   *\n   * @param  {Mode|String} value        Encoding mode\n   * @param  {Mode}        defaultValue Fallback value\n   * @return {Mode}                     Encoding mode\n   */\n  exports.from = function from(value, defaultValue) {\n    if (exports.isValid(value)) {\n      return value;\n    }\n    try {\n      return fromString(value);\n    } catch (e) {\n      return defaultValue;\n    }\n  };\n});","lineCount":157,"map":[[2,2,4,0],[3,0,5,0],[4,0,6,0],[5,0,7,0],[6,0,8,0],[7,0,9,0],[8,0,10,0],[9,2,11,0,"exports"],[9,9,11,7],[9,10,11,8,"NUMERIC"],[9,17,11,15],[9,20,11,18],[10,4,12,2,"id"],[10,6,12,4],[10,8,12,6],[10,17,12,15],[11,4,13,2,"bit"],[11,7,13,5],[11,9,13,7],[11,10,13,8],[11,14,13,12],[11,15,13,13],[12,4,14,2,"ccBits"],[12,10,14,8],[12,12,14,10],[12,13,14,11],[12,15,14,13],[12,17,14,15],[12,19,14,17],[12,21,14,19],[12,23,14,21],[13,2,15,0],[13,3,15,1],[15,2,17,0],[16,0,18,0],[17,0,19,0],[18,0,20,0],[19,0,21,0],[20,0,22,0],[21,0,23,0],[22,0,24,0],[23,0,25,0],[24,2,26,0,"exports"],[24,9,26,7],[24,10,26,8,"ALPHANUMERIC"],[24,22,26,20],[24,25,26,23],[25,4,27,2,"id"],[25,6,27,4],[25,8,27,6],[25,22,27,20],[26,4,28,2,"bit"],[26,7,28,5],[26,9,28,7],[26,10,28,8],[26,14,28,12],[26,15,28,13],[27,4,29,2,"ccBits"],[27,10,29,8],[27,12,29,10],[27,13,29,11],[27,14,29,12],[27,16,29,14],[27,18,29,16],[27,20,29,18],[27,22,29,20],[28,2,30,0],[28,3,30,1],[30,2,32,0],[31,0,33,0],[32,0,34,0],[33,0,35,0],[34,0,36,0],[35,2,37,0,"exports"],[35,9,37,7],[35,10,37,8,"BYTE"],[35,14,37,12],[35,17,37,15],[36,4,38,2,"id"],[36,6,38,4],[36,8,38,6],[36,14,38,12],[37,4,39,2,"bit"],[37,7,39,5],[37,9,39,7],[37,10,39,8],[37,14,39,12],[37,15,39,13],[38,4,40,2,"ccBits"],[38,10,40,8],[38,12,40,10],[38,13,40,11],[38,14,40,12],[38,16,40,14],[38,18,40,16],[38,20,40,18],[38,22,40,20],[39,2,41,0],[39,3,41,1],[41,2,43,0],[42,0,44,0],[43,0,45,0],[44,0,46,0],[45,0,47,0],[46,0,48,0],[47,0,49,0],[48,0,50,0],[49,0,51,0],[50,2,52,0,"exports"],[50,9,52,7],[50,10,52,8,"KANJI"],[50,15,52,13],[50,18,52,16],[51,4,53,2,"id"],[51,6,53,4],[51,8,53,6],[51,15,53,13],[52,4,54,2,"bit"],[52,7,54,5],[52,9,54,7],[52,10,54,8],[52,14,54,12],[52,15,54,13],[53,4,55,2,"ccBits"],[53,10,55,8],[53,12,55,10],[53,13,55,11],[53,14,55,12],[53,16,55,14],[53,18,55,16],[53,20,55,18],[53,22,55,20],[54,2,56,0],[54,3,56,1],[56,2,58,0],[57,0,59,0],[58,0,60,0],[59,0,61,0],[60,0,62,0],[61,0,63,0],[62,2,64,0,"exports"],[62,9,64,7],[62,10,64,8,"MIXED"],[62,15,64,13],[62,18,64,16],[63,4,65,2,"bit"],[63,7,65,5],[63,9,65,7],[63,10,65,8],[64,2,66,0],[64,3,66,1],[66,2,68,0],[67,0,69,0],[68,0,70,0],[69,0,71,0],[70,0,72,0],[71,0,73,0],[72,0,74,0],[73,0,75,0],[74,2,76,0,"exports"],[74,9,76,7],[74,10,76,8,"getCharCountIndicator"],[74,31,76,29],[74,34,76,32],[74,43,76,41,"getCharCountIndicator"],[74,64,76,62,"getCharCountIndicator"],[74,65,76,64,"mode"],[74,69,76,68],[74,71,76,70,"version"],[74,78,76,77],[74,80,76,79],[75,4,77,2],[75,8,77,6],[75,9,77,7,"mode"],[75,13,77,11],[75,14,77,12,"ccBits"],[75,20,77,18],[75,22,77,20],[75,28,77,26],[75,32,77,30,"Error"],[75,37,77,35],[75,38,77,36],[75,54,77,52],[75,57,77,55,"mode"],[75,61,77,59],[75,62,77,60],[76,4,79,2],[76,8,79,6],[76,9,79,7,"_$$_REQUIRE"],[76,20,79,7],[76,21,79,7,"_dependencyMap"],[76,35,79,7],[76,59,79,20,"isValid"],[76,66,79,27],[76,67,79,28,"version"],[76,74,79,35],[76,75,79,36],[76,77,79,38],[77,6,80,4],[77,12,80,10],[77,16,80,14,"Error"],[77,21,80,19],[77,22,80,20],[77,41,80,39],[77,44,80,42,"version"],[77,51,80,49],[77,52,80,50],[78,4,81,2],[79,4,83,2],[79,8,83,6,"version"],[79,15,83,13],[79,19,83,17],[79,20,83,18],[79,24,83,22,"version"],[79,31,83,29],[79,34,83,32],[79,36,83,34],[79,38,83,36],[79,45,83,43,"mode"],[79,49,83,47],[79,50,83,48,"ccBits"],[79,56,83,54],[79,57,83,55],[79,58,83,56],[79,59,83,57],[79,65,84,7],[79,69,84,11,"version"],[79,76,84,18],[79,79,84,21],[79,81,84,23],[79,83,84,25],[79,90,84,32,"mode"],[79,94,84,36],[79,95,84,37,"ccBits"],[79,101,84,43],[79,102,84,44],[79,103,84,45],[79,104,84,46],[80,4,85,2],[80,11,85,9,"mode"],[80,15,85,13],[80,16,85,14,"ccBits"],[80,22,85,20],[80,23,85,21],[80,24,85,22],[80,25,85,23],[81,2,86,0],[81,3,86,1],[83,2,88,0],[84,0,89,0],[85,0,90,0],[86,0,91,0],[87,0,92,0],[88,0,93,0],[89,2,94,0,"exports"],[89,9,94,7],[89,10,94,8,"getBestModeForData"],[89,28,94,26],[89,31,94,29],[89,40,94,38,"getBestModeForData"],[89,58,94,56,"getBestModeForData"],[89,59,94,58,"dataStr"],[89,66,94,65],[89,68,94,67],[90,4,95,2],[90,8,95,6,"_$$_REQUIRE"],[90,19,95,6],[90,20,95,6,"_dependencyMap"],[90,34,95,6],[90,50,95,12,"testNumeric"],[90,61,95,23],[90,62,95,24,"dataStr"],[90,69,95,31],[90,70,95,32],[90,72,95,34],[90,79,95,41,"exports"],[90,86,95,48],[90,87,95,49,"NUMERIC"],[90,94,95,56],[90,100,96,7],[90,104,96,11,"_$$_REQUIRE"],[90,115,96,11],[90,116,96,11,"_dependencyMap"],[90,130,96,11],[90,146,96,17,"testAlphanumeric"],[90,162,96,33],[90,163,96,34,"dataStr"],[90,170,96,41],[90,171,96,42],[90,173,96,44],[90,180,96,51,"exports"],[90,187,96,58],[90,188,96,59,"ALPHANUMERIC"],[90,200,96,71],[90,206,97,7],[90,210,97,11,"_$$_REQUIRE"],[90,221,97,11],[90,222,97,11,"_dependencyMap"],[90,236,97,11],[90,252,97,17,"testKanji"],[90,261,97,26],[90,262,97,27,"dataStr"],[90,269,97,34],[90,270,97,35],[90,272,97,37],[90,279,97,44,"exports"],[90,286,97,51],[90,287,97,52,"KANJI"],[90,292,97,57],[90,298,98,7],[90,305,98,14,"exports"],[90,312,98,21],[90,313,98,22,"BYTE"],[90,317,98,26],[91,2,99,0],[91,3,99,1],[93,2,101,0],[94,0,102,0],[95,0,103,0],[96,0,104,0],[97,0,105,0],[98,0,106,0],[99,2,107,0,"exports"],[99,9,107,7],[99,10,107,8,"toString"],[99,18,107,16],[99,21,107,19],[99,30,107,28,"toString"],[99,38,107,36,"toString"],[99,39,107,38,"mode"],[99,43,107,42],[99,45,107,44],[100,4,108,2],[100,8,108,6,"mode"],[100,12,108,10],[100,16,108,14,"mode"],[100,20,108,18],[100,21,108,19,"id"],[100,23,108,21],[100,25,108,23],[100,32,108,30,"mode"],[100,36,108,34],[100,37,108,35,"id"],[100,39,108,37],[101,4,109,2],[101,10,109,8],[101,14,109,12,"Error"],[101,19,109,17],[101,20,109,18],[101,34,109,32],[101,35,109,33],[102,2,110,0],[102,3,110,1],[104,2,112,0],[105,0,113,0],[106,0,114,0],[107,0,115,0],[108,0,116,0],[109,0,117,0],[110,2,118,0,"exports"],[110,9,118,7],[110,10,118,8,"isValid"],[110,17,118,15],[110,20,118,18],[110,29,118,27,"isValid"],[110,36,118,34,"isValid"],[110,37,118,36,"mode"],[110,41,118,40],[110,43,118,42],[111,4,119,2],[111,11,119,9,"mode"],[111,15,119,13],[111,19,119,17,"mode"],[111,23,119,21],[111,24,119,22,"bit"],[111,27,119,25],[111,31,119,29,"mode"],[111,35,119,33],[111,36,119,34,"ccBits"],[111,42,119,40],[112,2,120,0],[112,3,120,1],[114,2,122,0],[115,0,123,0],[116,0,124,0],[117,0,125,0],[118,0,126,0],[119,0,127,0],[120,2,128,0],[120,11,128,9,"fromString"],[120,21,128,19,"fromString"],[120,22,128,21,"string"],[120,28,128,27],[120,30,128,29],[121,4,129,2],[121,8,129,6],[121,15,129,13,"string"],[121,21,129,19],[121,26,129,24],[121,34,129,32],[121,36,129,34],[122,6,130,4],[122,12,130,10],[122,16,130,14,"Error"],[122,21,130,19],[122,22,130,20],[122,45,130,43],[122,46,130,44],[123,4,131,2],[124,4,133,2],[124,8,133,8,"lcStr"],[124,13,133,13],[124,16,133,16,"string"],[124,22,133,22],[124,23,133,23,"toLowerCase"],[124,34,133,34],[124,35,133,35],[124,36,133,36],[125,4,135,2],[125,12,135,10,"lcStr"],[125,17,135,15],[126,6,136,4],[126,11,136,9],[126,20,136,18],[127,8,137,6],[127,15,137,13,"exports"],[127,22,137,20],[127,23,137,21,"NUMERIC"],[127,30,137,28],[128,6,138,4],[128,11,138,9],[128,25,138,23],[129,8,139,6],[129,15,139,13,"exports"],[129,22,139,20],[129,23,139,21,"ALPHANUMERIC"],[129,35,139,33],[130,6,140,4],[130,11,140,9],[130,18,140,16],[131,8,141,6],[131,15,141,13,"exports"],[131,22,141,20],[131,23,141,21,"KANJI"],[131,28,141,26],[132,6,142,4],[132,11,142,9],[132,17,142,15],[133,8,143,6],[133,15,143,13,"exports"],[133,22,143,20],[133,23,143,21,"BYTE"],[133,27,143,25],[134,6,144,4],[135,8,145,6],[135,14,145,12],[135,18,145,16,"Error"],[135,23,145,21],[135,24,145,22],[135,40,145,38],[135,43,145,41,"string"],[135,49,145,47],[135,50,145,48],[136,4,146,2],[137,2,147,0],[139,2,149,0],[140,0,150,0],[141,0,151,0],[142,0,152,0],[143,0,153,0],[144,0,154,0],[145,0,155,0],[146,0,156,0],[147,2,157,0,"exports"],[147,9,157,7],[147,10,157,8,"from"],[147,14,157,12],[147,17,157,15],[147,26,157,24,"from"],[147,30,157,28,"from"],[147,31,157,30,"value"],[147,36,157,35],[147,38,157,37,"defaultValue"],[147,50,157,49],[147,52,157,51],[148,4,158,2],[148,8,158,6,"exports"],[148,15,158,13],[148,16,158,14,"isValid"],[148,23,158,21],[148,24,158,22,"value"],[148,29,158,27],[148,30,158,28],[148,32,158,30],[149,6,159,4],[149,13,159,11,"value"],[149,18,159,16],[150,4,160,2],[151,4,162,2],[151,8,162,6],[152,6,163,4],[152,13,163,11,"fromString"],[152,23,163,21],[152,24,163,22,"value"],[152,29,163,27],[152,30,163,28],[153,4,164,2],[153,5,164,3],[153,6,164,4],[153,13,164,11,"e"],[153,14,164,12],[153,16,164,14],[154,6,165,4],[154,13,165,11,"defaultValue"],[154,25,165,23],[155,4,166,2],[156,2,167,0],[156,3,167,1],[157,0,167,1],[157,3]],"functionMap":{"names":["<global>","getCharCountIndicator","getBestModeForData","toString","isValid","fromString","from"],"mappings":"AAA;gCC2E;CDU;6BEQ;CFK;mBGQ;CHG;kBIQ;CJE;AKQ;CLmB;eMU;CNU"}},"type":"js/module"}]}