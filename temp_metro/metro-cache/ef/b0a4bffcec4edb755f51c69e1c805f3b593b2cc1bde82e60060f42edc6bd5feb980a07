{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":49,"column":44,"index":1821}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":49,"column":44,"index":1821}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"../assert","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":22,"column":17,"index":904},"end":{"line":22,"column":37,"index":924}},{"start":{"line":22,"column":17,"index":904},"end":{"line":22,"column":37,"index":924}},{"start":{"line":22,"column":17,"index":904},"end":{"line":22,"column":37,"index":924}},{"start":{"line":22,"column":17,"index":904},"end":{"line":22,"column":37,"index":924}},{"start":{"line":22,"column":17,"index":904},"end":{"line":22,"column":37,"index":924}}],"key":"EqNBW+769mc/j/kMnDe9BBrECKc="}},{"name":"bson","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":15,"index":870},"end":{"line":21,"column":30,"index":885}},{"start":{"line":21,"column":15,"index":870},"end":{"line":21,"column":30,"index":885}},{"start":{"line":21,"column":15,"index":870},"end":{"line":21,"column":30,"index":885}},{"start":{"line":21,"column":15,"index":870},"end":{"line":21,"column":30,"index":885}},{"start":{"line":21,"column":15,"index":870},"end":{"line":21,"column":30,"index":885}},{"start":{"line":21,"column":15,"index":870},"end":{"line":21,"column":30,"index":885}},{"start":{"line":21,"column":15,"index":870},"end":{"line":21,"column":30,"index":885}},{"start":{"line":21,"column":15,"index":870},"end":{"line":21,"column":30,"index":885}}],"key":"yFOrCNDX9F45Jfx9Py7R+zvox10="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  ////////////////////////////////////////////////////////////////////////////\n  //\n  // Copyright 2024 Realm Inc.\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  // http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n  //\n  ////////////////////////////////////////////////////////////////////////////\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.PolyfilledBigInt = void 0;\n  var PolyfilledBigInt = /*#__PURE__*/function () {\n    function PolyfilledBigInt() {\n      _classCallCheck(this, PolyfilledBigInt);\n    }\n    return _createClass(PolyfilledBigInt, null, [{\n      key: \"add\",\n      value: function add(a, b) {\n        _$$_REQUIRE(_dependencyMap[2], \"../assert\").assert.instanceOf(a, _$$_REQUIRE(_dependencyMap[3], \"bson\").Long);\n        _$$_REQUIRE(_dependencyMap[2], \"../assert\").assert.instanceOf(b, _$$_REQUIRE(_dependencyMap[3], \"bson\").Long);\n        return a.add(b);\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(a, b) {\n        _$$_REQUIRE(_dependencyMap[2], \"../assert\").assert.instanceOf(a, _$$_REQUIRE(_dependencyMap[3], \"bson\").Long);\n        (0, _$$_REQUIRE(_dependencyMap[2], \"../assert\").assert)(typeof b === \"number\" || typeof b === \"string\" || typeof b === \"object\" && b instanceof _$$_REQUIRE(_dependencyMap[3], \"bson\").Long, \"Expected a 'BSON.Long', or number, or string.\");\n        return a.equals(b);\n      }\n    }, {\n      key: \"isInt\",\n      value: function isInt(a) {\n        return a instanceof _$$_REQUIRE(_dependencyMap[3], \"bson\").Long;\n      }\n    }, {\n      key: \"numToInt\",\n      value: function numToInt(a) {\n        return _$$_REQUIRE(_dependencyMap[3], \"bson\").Long.fromNumber(a);\n      }\n    }, {\n      key: \"strToInt\",\n      value: function strToInt(a) {\n        return _$$_REQUIRE(_dependencyMap[3], \"bson\").Long.fromString(a);\n      }\n    }, {\n      key: \"intToNum\",\n      value: function intToNum(a) {\n        _$$_REQUIRE(_dependencyMap[2], \"../assert\").assert.instanceOf(a, _$$_REQUIRE(_dependencyMap[3], \"bson\").Long);\n        return a.toNumber();\n      }\n    }]);\n  }();\n  exports.PolyfilledBigInt = PolyfilledBigInt;\n});","lineCount":69,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,2,3,0],[6,2,4,0],[7,2,5,0],[8,2,6,0],[9,2,7,0],[10,2,8,0],[11,2,9,0],[12,2,10,0],[13,2,11,0],[14,2,12,0],[15,2,13,0],[16,2,14,0],[17,2,15,0],[18,2,16,0],[19,2,17,0],[20,2,18,0],[21,2,18,0],[21,6,18,0,"_classCallCheck"],[21,21,18,0],[21,24,18,0,"_$$_REQUIRE"],[21,35,18,0],[21,36,18,0,"_dependencyMap"],[21,50,18,0],[22,2,18,0],[22,6,18,0,"_createClass"],[22,18,18,0],[22,21,18,0,"_$$_REQUIRE"],[22,32,18,0],[22,33,18,0,"_dependencyMap"],[22,47,18,0],[23,2,19,0,"Object"],[23,8,19,6],[23,9,19,7,"defineProperty"],[23,23,19,21],[23,24,19,22,"exports"],[23,31,19,29],[23,33,19,31],[23,45,19,43],[23,47,19,45],[24,4,19,47,"value"],[24,9,19,52],[24,11,19,54],[25,2,19,59],[25,3,19,60],[25,4,19,61],[26,2,20,0,"exports"],[26,9,20,7],[26,10,20,8,"PolyfilledBigInt"],[26,26,20,24],[26,29,20,27],[26,34,20,32],[26,35,20,33],[27,2,20,34],[27,6,23,6,"PolyfilledBigInt"],[27,22,23,22],[28,4,23,22],[28,13,23,22,"PolyfilledBigInt"],[28,30,23,22],[29,6,23,22,"_classCallCheck"],[29,21,23,22],[29,28,23,22,"PolyfilledBigInt"],[29,44,23,22],[30,4,23,22],[31,4,23,22],[31,11,23,22,"_createClass"],[31,23,23,22],[31,24,23,22,"PolyfilledBigInt"],[31,40,23,22],[32,6,23,22,"key"],[32,9,23,22],[33,6,23,22,"value"],[33,11,23,22],[33,13,24,4],[33,22,24,11,"add"],[33,25,24,14,"add"],[33,26,24,15,"a"],[33,27,24,16],[33,29,24,18,"b"],[33,30,24,19],[33,32,24,21],[34,8,25,8,"_$$_REQUIRE"],[34,19,25,8],[34,20,25,8,"_dependencyMap"],[34,34,25,8],[34,52,25,17,"assert"],[34,58,25,23],[34,59,25,24,"instanceOf"],[34,69,25,34],[34,70,25,35,"a"],[34,71,25,36],[34,73,25,38,"_$$_REQUIRE"],[34,84,25,38],[34,85,25,38,"_dependencyMap"],[34,99,25,38],[34,112,25,45,"Long"],[34,116,25,49],[34,117,25,50],[35,8,26,8,"_$$_REQUIRE"],[35,19,26,8],[35,20,26,8,"_dependencyMap"],[35,34,26,8],[35,52,26,17,"assert"],[35,58,26,23],[35,59,26,24,"instanceOf"],[35,69,26,34],[35,70,26,35,"b"],[35,71,26,36],[35,73,26,38,"_$$_REQUIRE"],[35,84,26,38],[35,85,26,38,"_dependencyMap"],[35,99,26,38],[35,112,26,45,"Long"],[35,116,26,49],[35,117,26,50],[36,8,27,8],[36,15,27,15,"a"],[36,16,27,16],[36,17,27,17,"add"],[36,20,27,20],[36,21,27,21,"b"],[36,22,27,22],[36,23,27,23],[37,6,28,4],[38,4,28,5],[39,6,28,5,"key"],[39,9,28,5],[40,6,28,5,"value"],[40,11,28,5],[40,13,29,4],[40,22,29,11,"equals"],[40,28,29,17,"equals"],[40,29,29,18,"a"],[40,30,29,19],[40,32,29,21,"b"],[40,33,29,22],[40,35,29,24],[41,8,30,8,"_$$_REQUIRE"],[41,19,30,8],[41,20,30,8,"_dependencyMap"],[41,34,30,8],[41,52,30,17,"assert"],[41,58,30,23],[41,59,30,24,"instanceOf"],[41,69,30,34],[41,70,30,35,"a"],[41,71,30,36],[41,73,30,38,"_$$_REQUIRE"],[41,84,30,38],[41,85,30,38,"_dependencyMap"],[41,99,30,38],[41,112,30,45,"Long"],[41,116,30,49],[41,117,30,50],[42,8,31,8],[42,9,31,9],[42,10,31,10],[42,12,31,12,"_$$_REQUIRE"],[42,23,31,12],[42,24,31,12,"_dependencyMap"],[42,38,31,12],[42,56,31,21,"assert"],[42,62,31,27],[42,64,31,29],[42,71,31,36,"b"],[42,72,31,37],[42,77,31,42],[42,85,31,50],[42,89,31,54],[42,96,31,61,"b"],[42,97,31,62],[42,102,31,67],[42,110,31,75],[42,114,31,80],[42,121,31,87,"b"],[42,122,31,88],[42,127,31,93],[42,135,31,101],[42,139,31,105,"b"],[42,140,31,106],[42,152,31,118,"_$$_REQUIRE"],[42,163,31,118],[42,164,31,118,"_dependencyMap"],[42,178,31,118],[42,191,31,125,"Long"],[42,195,31,130],[42,197,31,132],[42,244,31,179],[42,245,31,180],[43,8,32,8],[43,15,32,15,"a"],[43,16,32,16],[43,17,32,17,"equals"],[43,23,32,23],[43,24,32,24,"b"],[43,25,32,25],[43,26,32,26],[44,6,33,4],[45,4,33,5],[46,6,33,5,"key"],[46,9,33,5],[47,6,33,5,"value"],[47,11,33,5],[47,13,34,4],[47,22,34,11,"isInt"],[47,27,34,16,"isInt"],[47,28,34,17,"a"],[47,29,34,18],[47,31,34,20],[48,8,35,8],[48,15,35,15,"a"],[48,16,35,16],[48,28,35,28,"_$$_REQUIRE"],[48,39,35,28],[48,40,35,28,"_dependencyMap"],[48,54,35,28],[48,67,35,35,"Long"],[48,71,35,39],[49,6,36,4],[50,4,36,5],[51,6,36,5,"key"],[51,9,36,5],[52,6,36,5,"value"],[52,11,36,5],[52,13,37,4],[52,22,37,11,"numToInt"],[52,30,37,19,"numToInt"],[52,31,37,20,"a"],[52,32,37,21],[52,34,37,23],[53,8,38,8],[53,15,38,15,"_$$_REQUIRE"],[53,26,38,15],[53,27,38,15,"_dependencyMap"],[53,41,38,15],[53,54,38,22,"Long"],[53,58,38,26],[53,59,38,27,"fromNumber"],[53,69,38,37],[53,70,38,38,"a"],[53,71,38,39],[53,72,38,40],[54,6,39,4],[55,4,39,5],[56,6,39,5,"key"],[56,9,39,5],[57,6,39,5,"value"],[57,11,39,5],[57,13,40,4],[57,22,40,11,"strToInt"],[57,30,40,19,"strToInt"],[57,31,40,20,"a"],[57,32,40,21],[57,34,40,23],[58,8,41,8],[58,15,41,15,"_$$_REQUIRE"],[58,26,41,15],[58,27,41,15,"_dependencyMap"],[58,41,41,15],[58,54,41,22,"Long"],[58,58,41,26],[58,59,41,27,"fromString"],[58,69,41,37],[58,70,41,38,"a"],[58,71,41,39],[58,72,41,40],[59,6,42,4],[60,4,42,5],[61,6,42,5,"key"],[61,9,42,5],[62,6,42,5,"value"],[62,11,42,5],[62,13,43,4],[62,22,43,11,"intToNum"],[62,30,43,19,"intToNum"],[62,31,43,20,"a"],[62,32,43,21],[62,34,43,23],[63,8,44,8,"_$$_REQUIRE"],[63,19,44,8],[63,20,44,8,"_dependencyMap"],[63,34,44,8],[63,52,44,17,"assert"],[63,58,44,23],[63,59,44,24,"instanceOf"],[63,69,44,34],[63,70,44,35,"a"],[63,71,44,36],[63,73,44,38,"_$$_REQUIRE"],[63,84,44,38],[63,85,44,38,"_dependencyMap"],[63,99,44,38],[63,112,44,45,"Long"],[63,116,44,49],[63,117,44,50],[64,8,45,8],[64,15,45,15,"a"],[64,16,45,16],[64,17,45,17,"toNumber"],[64,25,45,25],[64,26,45,26],[64,27,45,27],[65,6,46,4],[66,4,46,5],[67,2,46,5],[68,2,48,0,"exports"],[68,9,48,7],[68,10,48,8,"PolyfilledBigInt"],[68,26,48,24],[68,29,48,27,"PolyfilledBigInt"],[68,45,48,43],[69,0,48,44],[69,3]],"functionMap":{"names":["<global>","PolyfilledBigInt","add","equals","isInt","numToInt","strToInt","intToNum"],"mappings":"AAA;ACsB;ICC;KDI;IEC;KFI;IGC;KHE;IIC;KJE;IKC;KLE;IMC;KNG;CDC"}},"type":"js/module"}]}