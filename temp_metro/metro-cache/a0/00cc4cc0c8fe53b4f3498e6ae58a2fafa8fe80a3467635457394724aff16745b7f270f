{"dependencies":[{"name":"bs58check","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":16,"index":16},"end":{"line":1,"column":36,"index":36}},{"start":{"line":1,"column":16,"index":16},"end":{"line":1,"column":36,"index":36}},{"start":{"line":1,"column":16,"index":16},"end":{"line":1,"column":36,"index":36}}],"key":"4OUKwPALIMTasKbVl6WljOsf4WA="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function decodeRaw(buffer, version) {\n    // check version only if defined\n    if (version !== undefined && buffer[0] !== version) throw new Error('Invalid network version');\n\n    // uncompressed\n    if (buffer.length === 33) {\n      return {\n        version: buffer[0],\n        privateKey: buffer.slice(1, 33),\n        compressed: false\n      };\n    }\n\n    // invalid length\n    if (buffer.length !== 34) throw new Error('Invalid WIF length');\n\n    // invalid compression flag\n    if (buffer[33] !== 0x01) throw new Error('Invalid compression flag');\n    return {\n      version: buffer[0],\n      privateKey: buffer.slice(1, 33),\n      compressed: true\n    };\n  }\n  function encodeRaw(version, privateKey, compressed) {\n    var result = new Buffer(compressed ? 34 : 33);\n    result.writeUInt8(version, 0);\n    privateKey.copy(result, 1);\n    if (compressed) {\n      result[33] = 0x01;\n    }\n    return result;\n  }\n  function decode(string, version) {\n    return decodeRaw(_$$_REQUIRE(_dependencyMap[0], \"bs58check\").decode(string), version);\n  }\n  function encode(version, privateKey, compressed) {\n    if (typeof version === 'number') return _$$_REQUIRE(_dependencyMap[0], \"bs58check\").encode(encodeRaw(version, privateKey, compressed));\n    return _$$_REQUIRE(_dependencyMap[0], \"bs58check\").encode(encodeRaw(version.version, version.privateKey, version.compressed));\n  }\n  module.exports = {\n    decode: decode,\n    decodeRaw: decodeRaw,\n    encode: encode,\n    encodeRaw: encodeRaw\n  };\n});","lineCount":48,"map":[[2,2,3,0],[2,11,3,9,"decodeRaw"],[2,20,3,18,"decodeRaw"],[2,21,3,20,"buffer"],[2,27,3,26],[2,29,3,28,"version"],[2,36,3,35],[2,38,3,37],[3,4,4,2],[4,4,5,2],[4,8,5,6,"version"],[4,15,5,13],[4,20,5,18,"undefined"],[4,29,5,27],[4,33,5,31,"buffer"],[4,39,5,37],[4,40,5,38],[4,41,5,39],[4,42,5,40],[4,47,5,45,"version"],[4,54,5,52],[4,56,5,54],[4,62,5,60],[4,66,5,64,"Error"],[4,71,5,69],[4,72,5,70],[4,97,5,95],[4,98,5,96],[6,4,7,2],[7,4,8,2],[7,8,8,6,"buffer"],[7,14,8,12],[7,15,8,13,"length"],[7,21,8,19],[7,26,8,24],[7,28,8,26],[7,30,8,28],[8,6,9,4],[8,13,9,11],[9,8,10,6,"version"],[9,15,10,13],[9,17,10,15,"buffer"],[9,23,10,21],[9,24,10,22],[9,25,10,23],[9,26,10,24],[10,8,11,6,"privateKey"],[10,18,11,16],[10,20,11,18,"buffer"],[10,26,11,24],[10,27,11,25,"slice"],[10,32,11,30],[10,33,11,31],[10,34,11,32],[10,36,11,34],[10,38,11,36],[10,39,11,37],[11,8,12,6,"compressed"],[11,18,12,16],[11,20,12,18],[12,6,13,4],[12,7,13,5],[13,4,14,2],[15,4,16,2],[16,4,17,2],[16,8,17,6,"buffer"],[16,14,17,12],[16,15,17,13,"length"],[16,21,17,19],[16,26,17,24],[16,28,17,26],[16,30,17,28],[16,36,17,34],[16,40,17,38,"Error"],[16,45,17,43],[16,46,17,44],[16,66,17,64],[16,67,17,65],[18,4,19,2],[19,4,20,2],[19,8,20,6,"buffer"],[19,14,20,12],[19,15,20,13],[19,17,20,15],[19,18,20,16],[19,23,20,21],[19,27,20,25],[19,29,20,27],[19,35,20,33],[19,39,20,37,"Error"],[19,44,20,42],[19,45,20,43],[19,71,20,69],[19,72,20,70],[20,4,22,2],[20,11,22,9],[21,6,23,4,"version"],[21,13,23,11],[21,15,23,13,"buffer"],[21,21,23,19],[21,22,23,20],[21,23,23,21],[21,24,23,22],[22,6,24,4,"privateKey"],[22,16,24,14],[22,18,24,16,"buffer"],[22,24,24,22],[22,25,24,23,"slice"],[22,30,24,28],[22,31,24,29],[22,32,24,30],[22,34,24,32],[22,36,24,34],[22,37,24,35],[23,6,25,4,"compressed"],[23,16,25,14],[23,18,25,16],[24,4,26,2],[24,5,26,3],[25,2,27,0],[26,2,29,0],[26,11,29,9,"encodeRaw"],[26,20,29,18,"encodeRaw"],[26,21,29,20,"version"],[26,28,29,27],[26,30,29,29,"privateKey"],[26,40,29,39],[26,42,29,41,"compressed"],[26,52,29,51],[26,54,29,53],[27,4,30,2],[27,8,30,6,"result"],[27,14,30,12],[27,17,30,15],[27,21,30,19,"Buffer"],[27,27,30,25],[27,28,30,26,"compressed"],[27,38,30,36],[27,41,30,39],[27,43,30,41],[27,46,30,44],[27,48,30,46],[27,49,30,47],[28,4,32,2,"result"],[28,10,32,8],[28,11,32,9,"writeUInt8"],[28,21,32,19],[28,22,32,20,"version"],[28,29,32,27],[28,31,32,29],[28,32,32,30],[28,33,32,31],[29,4,33,2,"privateKey"],[29,14,33,12],[29,15,33,13,"copy"],[29,19,33,17],[29,20,33,18,"result"],[29,26,33,24],[29,28,33,26],[29,29,33,27],[29,30,33,28],[30,4,35,2],[30,8,35,6,"compressed"],[30,18,35,16],[30,20,35,18],[31,6,36,4,"result"],[31,12,36,10],[31,13,36,11],[31,15,36,13],[31,16,36,14],[31,19,36,17],[31,23,36,21],[32,4,37,2],[33,4,39,2],[33,11,39,9,"result"],[33,17,39,15],[34,2,40,0],[35,2,42,0],[35,11,42,9,"decode"],[35,17,42,15,"decode"],[35,18,42,17,"string"],[35,24,42,23],[35,26,42,25,"version"],[35,33,42,32],[35,35,42,34],[36,4,43,2],[36,11,43,9,"decodeRaw"],[36,20,43,18],[36,21,43,19,"_$$_REQUIRE"],[36,32,43,19],[36,33,43,19,"_dependencyMap"],[36,47,43,19],[36,65,43,29,"decode"],[36,71,43,35],[36,72,43,36,"string"],[36,78,43,42],[36,79,43,43],[36,81,43,45,"version"],[36,88,43,52],[36,89,43,53],[37,2,44,0],[38,2,46,0],[38,11,46,9,"encode"],[38,17,46,15,"encode"],[38,18,46,17,"version"],[38,25,46,24],[38,27,46,26,"privateKey"],[38,37,46,36],[38,39,46,38,"compressed"],[38,49,46,48],[38,51,46,50],[39,4,47,2],[39,8,47,6],[39,15,47,13,"version"],[39,22,47,20],[39,27,47,25],[39,35,47,33],[39,37,47,35],[39,44,47,42,"_$$_REQUIRE"],[39,55,47,42],[39,56,47,42,"_dependencyMap"],[39,70,47,42],[39,88,47,52,"encode"],[39,94,47,58],[39,95,47,59,"encodeRaw"],[39,104,47,68],[39,105,47,69,"version"],[39,112,47,76],[39,114,47,78,"privateKey"],[39,124,47,88],[39,126,47,90,"compressed"],[39,136,47,100],[39,137,47,101],[39,138,47,102],[40,4,49,2],[40,11,49,9,"_$$_REQUIRE"],[40,22,49,9],[40,23,49,9,"_dependencyMap"],[40,37,49,9],[40,55,49,19,"encode"],[40,61,49,25],[40,62,50,4,"encodeRaw"],[40,71,50,13],[40,72,51,6,"version"],[40,79,51,13],[40,80,51,14,"version"],[40,87,51,21],[40,89,52,6,"version"],[40,96,52,13],[40,97,52,14,"privateKey"],[40,107,52,24],[40,109,53,6,"version"],[40,116,53,13],[40,117,53,14,"compressed"],[40,127,54,4],[40,128,55,2],[40,129,55,3],[41,2,56,0],[42,2,58,0,"module"],[42,8,58,6],[42,9,58,7,"exports"],[42,16,58,14],[42,19,58,17],[43,4,59,2,"decode"],[43,10,59,8],[43,12,59,10,"decode"],[43,18,59,16],[44,4,60,2,"decodeRaw"],[44,13,60,11],[44,15,60,13,"decodeRaw"],[44,24,60,22],[45,4,61,2,"encode"],[45,10,61,8],[45,12,61,10,"encode"],[45,18,61,16],[46,4,62,2,"encodeRaw"],[46,13,62,11],[46,15,62,13,"encodeRaw"],[47,2,63,0],[47,3,63,1],[48,0,63,1],[48,3]],"functionMap":{"names":["<global>","decodeRaw","encodeRaw","decode","encode"],"mappings":"AAA;ACE;CDwB;AEE;CFW;AGE;CHE;AIE;CJU"}},"type":"js/module"}]}