{"dependencies":[{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":23,"index":304},"end":{"line":9,"column":44,"index":325}},{"start":{"line":9,"column":23,"index":304},"end":{"line":9,"column":44,"index":325}},{"start":{"line":8,"column":13,"index":263},"end":{"line":8,"column":30,"index":280}},{"start":{"line":8,"column":13,"index":263},"end":{"line":8,"column":30,"index":280}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI="}},{"name":"randombytes","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":18,"index":227},"end":{"line":7,"column":40,"index":249}},{"start":{"line":7,"column":18,"index":227},"end":{"line":7,"column":40,"index":249}}],"key":"HRppB8l92kfLq10/yqHPiqGAuBY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  function oldBrowser() {\n    throw new Error('secure random number generation not supported by this browser\\nuse chrome, FireFox or Internet Explorer 11');\n  }\n  var crypto = global.crypto || global.msCrypto;\n  var kMaxUint32 = Math.pow(2, 32) - 1;\n  function assertOffset(offset, length) {\n    if (typeof offset !== 'number' || offset !== offset) {\n      // eslint-disable-line no-self-compare\n      throw new TypeError('offset must be a number');\n    }\n    if (offset > kMaxUint32 || offset < 0) {\n      throw new TypeError('offset must be a uint32');\n    }\n    if (offset > _$$_REQUIRE(_dependencyMap[0], \"safe-buffer\").kMaxLength || offset > length) {\n      throw new RangeError('offset out of range');\n    }\n  }\n  function assertSize(size, offset, length) {\n    if (typeof size !== 'number' || size !== size) {\n      // eslint-disable-line no-self-compare\n      throw new TypeError('size must be a number');\n    }\n    if (size > kMaxUint32 || size < 0) {\n      throw new TypeError('size must be a uint32');\n    }\n    if (size + offset > length || size > _$$_REQUIRE(_dependencyMap[0], \"safe-buffer\").kMaxLength) {\n      throw new RangeError('buffer too small');\n    }\n  }\n  if (crypto && crypto.getRandomValues || !process.browser) {\n    exports.randomFill = randomFill;\n    exports.randomFillSync = randomFillSync;\n  } else {\n    exports.randomFill = oldBrowser;\n    exports.randomFillSync = oldBrowser;\n  }\n  function randomFill(buf, offset, size, cb) {\n    if (!_$$_REQUIRE(_dependencyMap[0], \"safe-buffer\").Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n      throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array');\n    }\n    if (typeof offset === 'function') {\n      cb = offset;\n      offset = 0;\n      size = buf.length;\n    } else if (typeof size === 'function') {\n      cb = size;\n      size = buf.length - offset;\n    } else if (typeof cb !== 'function') {\n      throw new TypeError('\"cb\" argument must be a function');\n    }\n    assertOffset(offset, buf.length);\n    assertSize(size, offset, buf.length);\n    return actualFill(buf, offset, size, cb);\n  }\n  function actualFill(buf, offset, size, cb) {\n    if (process.browser) {\n      var ourBuf = buf.buffer;\n      var uint = new Uint8Array(ourBuf, offset, size);\n      crypto.getRandomValues(uint);\n      if (cb) {\n        process.nextTick(function () {\n          cb(null, buf);\n        });\n        return;\n      }\n      return buf;\n    }\n    if (cb) {\n      _$$_REQUIRE(_dependencyMap[1], \"randombytes\")(size, function (err, bytes) {\n        if (err) {\n          return cb(err);\n        }\n        bytes.copy(buf, offset);\n        cb(null, buf);\n      });\n      return;\n    }\n    var bytes = _$$_REQUIRE(_dependencyMap[1], \"randombytes\")(size);\n    bytes.copy(buf, offset);\n    return buf;\n  }\n  function randomFillSync(buf, offset, size) {\n    if (typeof offset === 'undefined') {\n      offset = 0;\n    }\n    if (!_$$_REQUIRE(_dependencyMap[0], \"safe-buffer\").Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n      throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array');\n    }\n    assertOffset(offset, buf.length);\n    if (size === undefined) size = buf.length - offset;\n    assertSize(size, offset, buf.length);\n    return actualFill(buf, offset, size);\n  }\n});","lineCount":97,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,11,3,9,"oldBrowser"],[4,21,3,19,"oldBrowser"],[4,22,3,19],[4,24,3,23],[5,4,4,2],[5,10,4,8],[5,14,4,12,"Error"],[5,19,4,17],[5,20,4,18],[5,128,4,126],[5,129,4,127],[6,2,5,0],[7,2,10,0],[7,6,10,4,"crypto"],[7,12,10,10],[7,15,10,13,"global"],[7,21,10,19],[7,22,10,20,"crypto"],[7,28,10,26],[7,32,10,30,"global"],[7,38,10,36],[7,39,10,37,"msCrypto"],[7,47,10,45],[8,2,11,0],[8,6,11,4,"kMaxUint32"],[8,16,11,14],[8,19,11,17,"Math"],[8,23,11,21],[8,24,11,22,"pow"],[8,27,11,25],[8,28,11,26],[8,29,11,27],[8,31,11,29],[8,33,11,31],[8,34,11,32],[8,37,11,35],[8,38,11,36],[9,2,12,0],[9,11,12,9,"assertOffset"],[9,23,12,21,"assertOffset"],[9,24,12,23,"offset"],[9,30,12,29],[9,32,12,31,"length"],[9,38,12,37],[9,40,12,39],[10,4,13,2],[10,8,13,6],[10,15,13,13,"offset"],[10,21,13,19],[10,26,13,24],[10,34,13,32],[10,38,13,36,"offset"],[10,44,13,42],[10,49,13,47,"offset"],[10,55,13,53],[10,57,13,55],[11,6,13,57],[12,6,14,4],[12,12,14,10],[12,16,14,14,"TypeError"],[12,25,14,23],[12,26,14,24],[12,51,14,49],[12,52,14,50],[13,4,15,2],[14,4,17,2],[14,8,17,6,"offset"],[14,14,17,12],[14,17,17,15,"kMaxUint32"],[14,27,17,25],[14,31,17,29,"offset"],[14,37,17,35],[14,40,17,38],[14,41,17,39],[14,43,17,41],[15,6,18,4],[15,12,18,10],[15,16,18,14,"TypeError"],[15,25,18,23],[15,26,18,24],[15,51,18,49],[15,52,18,50],[16,4,19,2],[17,4,21,2],[17,8,21,6,"offset"],[17,14,21,12],[17,17,21,12,"_$$_REQUIRE"],[17,28,21,12],[17,29,21,12,"_dependencyMap"],[17,43,21,12],[17,63,21,12,"kMaxLength"],[17,73,21,31],[17,77,21,35,"offset"],[17,83,21,41],[17,86,21,44,"length"],[17,92,21,50],[17,94,21,52],[18,6,22,4],[18,12,22,10],[18,16,22,14,"RangeError"],[18,26,22,24],[18,27,22,25],[18,48,22,46],[18,49,22,47],[19,4,23,2],[20,2,24,0],[21,2,26,0],[21,11,26,9,"assertSize"],[21,21,26,19,"assertSize"],[21,22,26,21,"size"],[21,26,26,25],[21,28,26,27,"offset"],[21,34,26,33],[21,36,26,35,"length"],[21,42,26,41],[21,44,26,43],[22,4,27,2],[22,8,27,6],[22,15,27,13,"size"],[22,19,27,17],[22,24,27,22],[22,32,27,30],[22,36,27,34,"size"],[22,40,27,38],[22,45,27,43,"size"],[22,49,27,47],[22,51,27,49],[23,6,27,51],[24,6,28,4],[24,12,28,10],[24,16,28,14,"TypeError"],[24,25,28,23],[24,26,28,24],[24,49,28,47],[24,50,28,48],[25,4,29,2],[26,4,31,2],[26,8,31,6,"size"],[26,12,31,10],[26,15,31,13,"kMaxUint32"],[26,25,31,23],[26,29,31,27,"size"],[26,33,31,31],[26,36,31,34],[26,37,31,35],[26,39,31,37],[27,6,32,4],[27,12,32,10],[27,16,32,14,"TypeError"],[27,25,32,23],[27,26,32,24],[27,49,32,47],[27,50,32,48],[28,4,33,2],[29,4,35,2],[29,8,35,6,"size"],[29,12,35,10],[29,15,35,13,"offset"],[29,21,35,19],[29,24,35,22,"length"],[29,30,35,28],[29,34,35,32,"size"],[29,38,35,36],[29,41,35,36,"_$$_REQUIRE"],[29,52,35,36],[29,53,35,36,"_dependencyMap"],[29,67,35,36],[29,87,35,36,"kMaxLength"],[29,97,35,55],[29,99,35,57],[30,6,36,4],[30,12,36,10],[30,16,36,14,"RangeError"],[30,26,36,24],[30,27,36,25],[30,45,36,43],[30,46,36,44],[31,4,37,2],[32,2,38,0],[33,2,39,0],[33,6,39,5,"crypto"],[33,12,39,11],[33,16,39,15,"crypto"],[33,22,39,21],[33,23,39,22,"getRandomValues"],[33,38,39,37],[33,42,39,42],[33,43,39,43,"process"],[33,50,39,50],[33,51,39,51,"browser"],[33,58,39,58],[33,60,39,60],[34,4,40,2,"exports"],[34,11,40,9],[34,12,40,10,"randomFill"],[34,22,40,20],[34,25,40,23,"randomFill"],[34,35,40,33],[35,4,41,2,"exports"],[35,11,41,9],[35,12,41,10,"randomFillSync"],[35,26,41,24],[35,29,41,27,"randomFillSync"],[35,43,41,41],[36,2,42,0],[36,3,42,1],[36,9,42,7],[37,4,43,2,"exports"],[37,11,43,9],[37,12,43,10,"randomFill"],[37,22,43,20],[37,25,43,23,"oldBrowser"],[37,35,43,33],[38,4,44,2,"exports"],[38,11,44,9],[38,12,44,10,"randomFillSync"],[38,26,44,24],[38,29,44,27,"oldBrowser"],[38,39,44,37],[39,2,45,0],[40,2,46,0],[40,11,46,9,"randomFill"],[40,21,46,19,"randomFill"],[40,22,46,21,"buf"],[40,25,46,24],[40,27,46,26,"offset"],[40,33,46,32],[40,35,46,34,"size"],[40,39,46,38],[40,41,46,40,"cb"],[40,43,46,42],[40,45,46,44],[41,4,47,2],[41,8,47,6],[41,9,47,7,"_$$_REQUIRE"],[41,20,47,7],[41,21,47,7,"_dependencyMap"],[41,35,47,7],[41,55,47,7,"Buffer"],[41,61,47,7],[41,62,47,14,"isBuffer"],[41,70,47,22],[41,71,47,23,"buf"],[41,74,47,26],[41,75,47,27],[41,79,47,31],[41,81,47,33,"buf"],[41,84,47,36],[41,96,47,48,"global"],[41,102,47,54],[41,103,47,55,"Uint8Array"],[41,113,47,65],[41,114,47,66],[41,116,47,68],[42,6,48,4],[42,12,48,10],[42,16,48,14,"TypeError"],[42,25,48,23],[42,26,48,24],[42,73,48,71],[42,74,48,72],[43,4,49,2],[44,4,51,2],[44,8,51,6],[44,15,51,13,"offset"],[44,21,51,19],[44,26,51,24],[44,36,51,34],[44,38,51,36],[45,6,52,4,"cb"],[45,8,52,6],[45,11,52,9,"offset"],[45,17,52,15],[46,6,53,4,"offset"],[46,12,53,10],[46,15,53,13],[46,16,53,14],[47,6,54,4,"size"],[47,10,54,8],[47,13,54,11,"buf"],[47,16,54,14],[47,17,54,15,"length"],[47,23,54,21],[48,4,55,2],[48,5,55,3],[48,11,55,9],[48,15,55,13],[48,22,55,20,"size"],[48,26,55,24],[48,31,55,29],[48,41,55,39],[48,43,55,41],[49,6,56,4,"cb"],[49,8,56,6],[49,11,56,9,"size"],[49,15,56,13],[50,6,57,4,"size"],[50,10,57,8],[50,13,57,11,"buf"],[50,16,57,14],[50,17,57,15,"length"],[50,23,57,21],[50,26,57,24,"offset"],[50,32,57,30],[51,4,58,2],[51,5,58,3],[51,11,58,9],[51,15,58,13],[51,22,58,20,"cb"],[51,24,58,22],[51,29,58,27],[51,39,58,37],[51,41,58,39],[52,6,59,4],[52,12,59,10],[52,16,59,14,"TypeError"],[52,25,59,23],[52,26,59,24],[52,60,59,58],[52,61,59,59],[53,4,60,2],[54,4,61,2,"assertOffset"],[54,16,61,14],[54,17,61,15,"offset"],[54,23,61,21],[54,25,61,23,"buf"],[54,28,61,26],[54,29,61,27,"length"],[54,35,61,33],[54,36,61,34],[55,4,62,2,"assertSize"],[55,14,62,12],[55,15,62,13,"size"],[55,19,62,17],[55,21,62,19,"offset"],[55,27,62,25],[55,29,62,27,"buf"],[55,32,62,30],[55,33,62,31,"length"],[55,39,62,37],[55,40,62,38],[56,4,63,2],[56,11,63,9,"actualFill"],[56,21,63,19],[56,22,63,20,"buf"],[56,25,63,23],[56,27,63,25,"offset"],[56,33,63,31],[56,35,63,33,"size"],[56,39,63,37],[56,41,63,39,"cb"],[56,43,63,41],[56,44,63,42],[57,2,64,0],[58,2,66,0],[58,11,66,9,"actualFill"],[58,21,66,19,"actualFill"],[58,22,66,21,"buf"],[58,25,66,24],[58,27,66,26,"offset"],[58,33,66,32],[58,35,66,34,"size"],[58,39,66,38],[58,41,66,40,"cb"],[58,43,66,42],[58,45,66,44],[59,4,67,2],[59,8,67,6,"process"],[59,15,67,13],[59,16,67,14,"browser"],[59,23,67,21],[59,25,67,23],[60,6,68,4],[60,10,68,8,"ourBuf"],[60,16,68,14],[60,19,68,17,"buf"],[60,22,68,20],[60,23,68,21,"buffer"],[60,29,68,27],[61,6,69,4],[61,10,69,8,"uint"],[61,14,69,12],[61,17,69,15],[61,21,69,19,"Uint8Array"],[61,31,69,29],[61,32,69,30,"ourBuf"],[61,38,69,36],[61,40,69,38,"offset"],[61,46,69,44],[61,48,69,46,"size"],[61,52,69,50],[61,53,69,51],[62,6,70,4,"crypto"],[62,12,70,10],[62,13,70,11,"getRandomValues"],[62,28,70,26],[62,29,70,27,"uint"],[62,33,70,31],[62,34,70,32],[63,6,71,4],[63,10,71,8,"cb"],[63,12,71,10],[63,14,71,12],[64,8,72,6,"process"],[64,15,72,13],[64,16,72,14,"nextTick"],[64,24,72,22],[64,25,72,23],[64,37,72,35],[65,10,73,8,"cb"],[65,12,73,10],[65,13,73,11],[65,17,73,15],[65,19,73,17,"buf"],[65,22,73,20],[65,23,73,21],[66,8,74,6],[66,9,74,7],[66,10,74,8],[67,8,75,6],[68,6,76,4],[69,6,77,4],[69,13,77,11,"buf"],[69,16,77,14],[70,4,78,2],[71,4,79,2],[71,8,79,6,"cb"],[71,10,79,8],[71,12,79,10],[72,6,80,4,"_$$_REQUIRE"],[72,17,80,4],[72,18,80,4,"_dependencyMap"],[72,32,80,4],[72,52,80,16,"size"],[72,56,80,20],[72,58,80,22],[72,68,80,32,"err"],[72,71,80,35],[72,73,80,37,"bytes"],[72,78,80,42],[72,80,80,44],[73,8,81,6],[73,12,81,10,"err"],[73,15,81,13],[73,17,81,15],[74,10,82,8],[74,17,82,15,"cb"],[74,19,82,17],[74,20,82,18,"err"],[74,23,82,21],[74,24,82,22],[75,8,83,6],[76,8,84,6,"bytes"],[76,13,84,11],[76,14,84,12,"copy"],[76,18,84,16],[76,19,84,17,"buf"],[76,22,84,20],[76,24,84,22,"offset"],[76,30,84,28],[76,31,84,29],[77,8,85,6,"cb"],[77,10,85,8],[77,11,85,9],[77,15,85,13],[77,17,85,15,"buf"],[77,20,85,18],[77,21,85,19],[78,6,86,4],[78,7,86,5],[78,8,86,6],[79,6,87,4],[80,4,88,2],[81,4,89,2],[81,8,89,6,"bytes"],[81,13,89,11],[81,16,89,14,"_$$_REQUIRE"],[81,27,89,14],[81,28,89,14,"_dependencyMap"],[81,42,89,14],[81,62,89,26,"size"],[81,66,89,30],[81,67,89,31],[82,4,90,2,"bytes"],[82,9,90,7],[82,10,90,8,"copy"],[82,14,90,12],[82,15,90,13,"buf"],[82,18,90,16],[82,20,90,18,"offset"],[82,26,90,24],[82,27,90,25],[83,4,91,2],[83,11,91,9,"buf"],[83,14,91,12],[84,2,92,0],[85,2,93,0],[85,11,93,9,"randomFillSync"],[85,25,93,23,"randomFillSync"],[85,26,93,25,"buf"],[85,29,93,28],[85,31,93,30,"offset"],[85,37,93,36],[85,39,93,38,"size"],[85,43,93,42],[85,45,93,44],[86,4,94,2],[86,8,94,6],[86,15,94,13,"offset"],[86,21,94,19],[86,26,94,24],[86,37,94,35],[86,39,94,37],[87,6,95,4,"offset"],[87,12,95,10],[87,15,95,13],[87,16,95,14],[88,4,96,2],[89,4,97,2],[89,8,97,6],[89,9,97,7,"_$$_REQUIRE"],[89,20,97,7],[89,21,97,7,"_dependencyMap"],[89,35,97,7],[89,55,97,7,"Buffer"],[89,61,97,7],[89,62,97,14,"isBuffer"],[89,70,97,22],[89,71,97,23,"buf"],[89,74,97,26],[89,75,97,27],[89,79,97,31],[89,81,97,33,"buf"],[89,84,97,36],[89,96,97,48,"global"],[89,102,97,54],[89,103,97,55,"Uint8Array"],[89,113,97,65],[89,114,97,66],[89,116,97,68],[90,6,98,4],[90,12,98,10],[90,16,98,14,"TypeError"],[90,25,98,23],[90,26,98,24],[90,73,98,71],[90,74,98,72],[91,4,99,2],[92,4,101,2,"assertOffset"],[92,16,101,14],[92,17,101,15,"offset"],[92,23,101,21],[92,25,101,23,"buf"],[92,28,101,26],[92,29,101,27,"length"],[92,35,101,33],[92,36,101,34],[93,4,103,2],[93,8,103,6,"size"],[93,12,103,10],[93,17,103,15,"undefined"],[93,26,103,24],[93,28,103,26,"size"],[93,32,103,30],[93,35,103,33,"buf"],[93,38,103,36],[93,39,103,37,"length"],[93,45,103,43],[93,48,103,46,"offset"],[93,54,103,52],[94,4,105,2,"assertSize"],[94,14,105,12],[94,15,105,13,"size"],[94,19,105,17],[94,21,105,19,"offset"],[94,27,105,25],[94,29,105,27,"buf"],[94,32,105,30],[94,33,105,31,"length"],[94,39,105,37],[94,40,105,38],[95,4,107,2],[95,11,107,9,"actualFill"],[95,21,107,19],[95,22,107,20,"buf"],[95,25,107,23],[95,27,107,25,"offset"],[95,33,107,31],[95,35,107,33,"size"],[95,39,107,37],[95,40,107,38],[96,2,108,0],[97,0,108,1],[97,3]],"functionMap":{"names":["<global>","oldBrowser","assertOffset","assertSize","randomFill","actualFill","process.nextTick$argument_0","randombytes$argument_1","randomFillSync"],"mappings":"AAA;ACE;CDE;AEO;CFY;AGE;CHY;AIQ;CJkB;AKE;uBCM;ODE;sBEM;KFM;CLM;AQC;CRe"}},"type":"js/module"}]}