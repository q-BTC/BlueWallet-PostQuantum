{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.escapeText = exports.escapeAttribute = exports.escapeUTF8 = exports.escape = exports.encodeXML = exports.getCodePoint = exports.xmlReplacer = void 0;\n  exports.xmlReplacer = /[\"&'<>$\\x80-\\uFFFF]/g;\n  var xmlCodeMap = new Map([[34, \"&quot;\"], [38, \"&amp;\"], [39, \"&apos;\"], [60, \"&lt;\"], [62, \"&gt;\"]]);\n  // For compatibility with node < 4, we wrap `codePointAt`\n  exports.getCodePoint =\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  String.prototype.codePointAt != null ? function (str, index) {\n    return str.codePointAt(index);\n  } :\n  // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n  function (c, index) {\n    return (c.charCodeAt(index) & 0xfc00) === 0xd800 ? (c.charCodeAt(index) - 0xd800) * 0x400 + c.charCodeAt(index + 1) - 0xdc00 + 0x10000 : c.charCodeAt(index);\n  };\n  /**\n   * Encodes all non-ASCII characters, as well as characters not valid in XML\n   * documents using XML entities.\n   *\n   * If a character has no equivalent entity, a\n   * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n   */\n  function encodeXML(str) {\n    var ret = \"\";\n    var lastIdx = 0;\n    var match;\n    while ((match = exports.xmlReplacer.exec(str)) !== null) {\n      var i = match.index;\n      var char = str.charCodeAt(i);\n      var next = xmlCodeMap.get(char);\n      if (next !== undefined) {\n        ret += str.substring(lastIdx, i) + next;\n        lastIdx = i + 1;\n      } else {\n        ret += \"\".concat(str.substring(lastIdx, i), \"&#x\").concat((0, exports.getCodePoint)(str, i).toString(16), \";\");\n        // Increase by 1 if we have a surrogate pair\n        lastIdx = exports.xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);\n      }\n    }\n    return ret + str.substr(lastIdx);\n  }\n  exports.encodeXML = encodeXML;\n  /**\n   * Encodes all non-ASCII characters, as well as characters not valid in XML\n   * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n   *\n   * Have a look at `escapeUTF8` if you want a more concise output at the expense\n   * of reduced transportability.\n   *\n   * @param data String to escape.\n   */\n  exports.escape = encodeXML;\n  /**\n   * Creates a function that escapes all characters matched by the given regular\n   * expression using the given map of characters to escape to their entities.\n   *\n   * @param regex Regular expression to match characters to escape.\n   * @param map Map of characters to escape to their entities.\n   *\n   * @returns Function that escapes all characters matched by the given regular\n   * expression using the given map of characters to escape to their entities.\n   */\n  function getEscaper(regex, map) {\n    return function escape(data) {\n      var match;\n      var lastIdx = 0;\n      var result = \"\";\n      while (match = regex.exec(data)) {\n        if (lastIdx !== match.index) {\n          result += data.substring(lastIdx, match.index);\n        }\n        // We know that this character will be in the map.\n        result += map.get(match[0].charCodeAt(0));\n        // Every match will be of length 1\n        lastIdx = match.index + 1;\n      }\n      return result + data.substring(lastIdx);\n    };\n  }\n  /**\n   * Encodes all characters not valid in XML documents using XML entities.\n   *\n   * Note that the output will be character-set dependent.\n   *\n   * @param data String to escape.\n   */\n  exports.escapeUTF8 = getEscaper(/[&<>'\"]/g, xmlCodeMap);\n  /**\n   * Encodes all characters that have to be escaped in HTML attributes,\n   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n   *\n   * @param data String to escape.\n   */\n  exports.escapeAttribute = getEscaper(/[\"&\\u00A0]/g, new Map([[34, \"&quot;\"], [38, \"&amp;\"], [160, \"&nbsp;\"]]));\n  /**\n   * Encodes all characters that have to be escaped in HTML text,\n   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n   *\n   * @param data String to escape.\n   */\n  exports.escapeText = getEscaper(/[&<>\\u00A0]/g, new Map([[38, \"&amp;\"], [60, \"&lt;\"], [62, \"&gt;\"], [160, \"&nbsp;\"]]));\n});","lineCount":106,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"escapeText"],[7,20,3,18],[7,23,3,21,"exports"],[7,30,3,28],[7,31,3,29,"escapeAttribute"],[7,46,3,44],[7,49,3,47,"exports"],[7,56,3,54],[7,57,3,55,"escapeUTF8"],[7,67,3,65],[7,70,3,68,"exports"],[7,77,3,75],[7,78,3,76,"escape"],[7,84,3,82],[7,87,3,85,"exports"],[7,94,3,92],[7,95,3,93,"encodeXML"],[7,104,3,102],[7,107,3,105,"exports"],[7,114,3,112],[7,115,3,113,"getCodePoint"],[7,127,3,125],[7,130,3,128,"exports"],[7,137,3,135],[7,138,3,136,"xmlReplacer"],[7,149,3,147],[7,152,3,150],[7,157,3,155],[7,158,3,156],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"xmlReplacer"],[8,21,4,19],[8,24,4,22],[8,46,4,44],[9,2,5,0],[9,6,5,4,"xmlCodeMap"],[9,16,5,14],[9,19,5,17],[9,23,5,21,"Map"],[9,26,5,24],[9,27,5,25],[9,28,6,4],[9,29,6,5],[9,31,6,7],[9,33,6,9],[9,41,6,17],[9,42,6,18],[9,44,7,4],[9,45,7,5],[9,47,7,7],[9,49,7,9],[9,56,7,16],[9,57,7,17],[9,59,8,4],[9,60,8,5],[9,62,8,7],[9,64,8,9],[9,72,8,17],[9,73,8,18],[9,75,9,4],[9,76,9,5],[9,78,9,7],[9,80,9,9],[9,86,9,15],[9,87,9,16],[9,89,10,4],[9,90,10,5],[9,92,10,7],[9,94,10,9],[9,100,10,15],[9,101,10,16],[9,102,11,1],[9,103,11,2],[10,2,12,0],[11,2,13,0,"exports"],[11,9,13,7],[11,10,13,8,"getCodePoint"],[11,22,13,20],[12,2,14,0],[13,2,15,0,"String"],[13,8,15,6],[13,9,15,7,"prototype"],[13,18,15,16],[13,19,15,17,"codePointAt"],[13,30,15,28],[13,34,15,32],[13,38,15,36],[13,41,16,6],[13,51,16,16,"str"],[13,54,16,19],[13,56,16,21,"index"],[13,61,16,26],[13,63,16,28],[14,4,16,30],[14,11,16,37,"str"],[14,14,16,40],[14,15,16,41,"codePointAt"],[14,26,16,52],[14,27,16,53,"index"],[14,32,16,58],[14,33,16,59],[15,2,16,61],[15,3,16,62],[16,2,17,6],[17,2,18,8],[17,12,18,18,"c"],[17,13,18,19],[17,15,18,21,"index"],[17,20,18,26],[17,22,18,28],[18,4,19,12],[18,11,19,19],[18,12,19,20,"c"],[18,13,19,21],[18,14,19,22,"charCodeAt"],[18,24,19,32],[18,25,19,33,"index"],[18,30,19,38],[18,31,19,39],[18,34,19,42],[18,40,19,48],[18,46,19,54],[18,52,19,60],[18,55,20,18],[18,56,20,19,"c"],[18,57,20,20],[18,58,20,21,"charCodeAt"],[18,68,20,31],[18,69,20,32,"index"],[18,74,20,37],[18,75,20,38],[18,78,20,41],[18,84,20,47],[18,88,20,51],[18,93,20,56],[18,96,21,20,"c"],[18,97,21,21],[18,98,21,22,"charCodeAt"],[18,108,21,32],[18,109,21,33,"index"],[18,114,21,38],[18,117,21,41],[18,118,21,42],[18,119,21,43],[18,122,22,20],[18,128,22,26],[18,131,23,20],[18,138,23,27],[18,141,24,18,"c"],[18,142,24,19],[18,143,24,20,"charCodeAt"],[18,153,24,30],[18,154,24,31,"index"],[18,159,24,36],[18,160,24,37],[19,2,25,8],[19,3,25,9],[20,2,26,0],[21,0,27,0],[22,0,28,0],[23,0,29,0],[24,0,30,0],[25,0,31,0],[26,0,32,0],[27,2,33,0],[27,11,33,9,"encodeXML"],[27,20,33,18,"encodeXML"],[27,21,33,19,"str"],[27,24,33,22],[27,26,33,24],[28,4,34,4],[28,8,34,8,"ret"],[28,11,34,11],[28,14,34,14],[28,16,34,16],[29,4,35,4],[29,8,35,8,"lastIdx"],[29,15,35,15],[29,18,35,18],[29,19,35,19],[30,4,36,4],[30,8,36,8,"match"],[30,13,36,13],[31,4,37,4],[31,11,37,11],[31,12,37,12,"match"],[31,17,37,17],[31,20,37,20,"exports"],[31,27,37,27],[31,28,37,28,"xmlReplacer"],[31,39,37,39],[31,40,37,40,"exec"],[31,44,37,44],[31,45,37,45,"str"],[31,48,37,48],[31,49,37,49],[31,55,37,55],[31,59,37,59],[31,61,37,61],[32,6,38,8],[32,10,38,12,"i"],[32,11,38,13],[32,14,38,16,"match"],[32,19,38,21],[32,20,38,22,"index"],[32,25,38,27],[33,6,39,8],[33,10,39,12,"char"],[33,14,39,16],[33,17,39,19,"str"],[33,20,39,22],[33,21,39,23,"charCodeAt"],[33,31,39,33],[33,32,39,34,"i"],[33,33,39,35],[33,34,39,36],[34,6,40,8],[34,10,40,12,"next"],[34,14,40,16],[34,17,40,19,"xmlCodeMap"],[34,27,40,29],[34,28,40,30,"get"],[34,31,40,33],[34,32,40,34,"char"],[34,36,40,38],[34,37,40,39],[35,6,41,8],[35,10,41,12,"next"],[35,14,41,16],[35,19,41,21,"undefined"],[35,28,41,30],[35,30,41,32],[36,8,42,12,"ret"],[36,11,42,15],[36,15,42,19,"str"],[36,18,42,22],[36,19,42,23,"substring"],[36,28,42,32],[36,29,42,33,"lastIdx"],[36,36,42,40],[36,38,42,42,"i"],[36,39,42,43],[36,40,42,44],[36,43,42,47,"next"],[36,47,42,51],[37,8,43,12,"lastIdx"],[37,15,43,19],[37,18,43,22,"i"],[37,19,43,23],[37,22,43,26],[37,23,43,27],[38,6,44,8],[38,7,44,9],[38,13,45,13],[39,8,46,12,"ret"],[39,11,46,15],[39,15,46,19],[39,17,46,21],[39,18,46,22,"concat"],[39,24,46,28],[39,25,46,29,"str"],[39,28,46,32],[39,29,46,33,"substring"],[39,38,46,42],[39,39,46,43,"lastIdx"],[39,46,46,50],[39,48,46,52,"i"],[39,49,46,53],[39,50,46,54],[39,52,46,56],[39,57,46,61],[39,58,46,62],[39,59,46,63,"concat"],[39,65,46,69],[39,66,46,70],[39,67,46,71],[39,68,46,72],[39,70,46,74,"exports"],[39,77,46,81],[39,78,46,82,"getCodePoint"],[39,90,46,94],[39,92,46,96,"str"],[39,95,46,99],[39,97,46,101,"i"],[39,98,46,102],[39,99,46,103],[39,100,46,104,"toString"],[39,108,46,112],[39,109,46,113],[39,111,46,115],[39,112,46,116],[39,114,46,118],[39,117,46,121],[39,118,46,122],[40,8,47,12],[41,8,48,12,"lastIdx"],[41,15,48,19],[41,18,48,22,"exports"],[41,25,48,29],[41,26,48,30,"xmlReplacer"],[41,37,48,41],[41,38,48,42,"lastIndex"],[41,47,48,51],[41,51,48,55,"Number"],[41,57,48,61],[41,58,48,62],[41,59,48,63,"char"],[41,63,48,67],[41,66,48,70],[41,72,48,76],[41,78,48,82],[41,84,48,88],[41,85,48,89],[42,6,49,8],[43,4,50,4],[44,4,51,4],[44,11,51,11,"ret"],[44,14,51,14],[44,17,51,17,"str"],[44,20,51,20],[44,21,51,21,"substr"],[44,27,51,27],[44,28,51,28,"lastIdx"],[44,35,51,35],[44,36,51,36],[45,2,52,0],[46,2,53,0,"exports"],[46,9,53,7],[46,10,53,8,"encodeXML"],[46,19,53,17],[46,22,53,20,"encodeXML"],[46,31,53,29],[47,2,54,0],[48,0,55,0],[49,0,56,0],[50,0,57,0],[51,0,58,0],[52,0,59,0],[53,0,60,0],[54,0,61,0],[55,0,62,0],[56,2,63,0,"exports"],[56,9,63,7],[56,10,63,8,"escape"],[56,16,63,14],[56,19,63,17,"encodeXML"],[56,28,63,26],[57,2,64,0],[58,0,65,0],[59,0,66,0],[60,0,67,0],[61,0,68,0],[62,0,69,0],[63,0,70,0],[64,0,71,0],[65,0,72,0],[66,0,73,0],[67,2,74,0],[67,11,74,9,"getEscaper"],[67,21,74,19,"getEscaper"],[67,22,74,20,"regex"],[67,27,74,25],[67,29,74,27,"map"],[67,32,74,30],[67,34,74,32],[68,4,75,4],[68,11,75,11],[68,20,75,20,"escape"],[68,26,75,26,"escape"],[68,27,75,27,"data"],[68,31,75,31],[68,33,75,33],[69,6,76,8],[69,10,76,12,"match"],[69,15,76,17],[70,6,77,8],[70,10,77,12,"lastIdx"],[70,17,77,19],[70,20,77,22],[70,21,77,23],[71,6,78,8],[71,10,78,12,"result"],[71,16,78,18],[71,19,78,21],[71,21,78,23],[72,6,79,8],[72,13,79,16,"match"],[72,18,79,21],[72,21,79,24,"regex"],[72,26,79,29],[72,27,79,30,"exec"],[72,31,79,34],[72,32,79,35,"data"],[72,36,79,39],[72,37,79,40],[72,39,79,43],[73,8,80,12],[73,12,80,16,"lastIdx"],[73,19,80,23],[73,24,80,28,"match"],[73,29,80,33],[73,30,80,34,"index"],[73,35,80,39],[73,37,80,41],[74,10,81,16,"result"],[74,16,81,22],[74,20,81,26,"data"],[74,24,81,30],[74,25,81,31,"substring"],[74,34,81,40],[74,35,81,41,"lastIdx"],[74,42,81,48],[74,44,81,50,"match"],[74,49,81,55],[74,50,81,56,"index"],[74,55,81,61],[74,56,81,62],[75,8,82,12],[76,8,83,12],[77,8,84,12,"result"],[77,14,84,18],[77,18,84,22,"map"],[77,21,84,25],[77,22,84,26,"get"],[77,25,84,29],[77,26,84,30,"match"],[77,31,84,35],[77,32,84,36],[77,33,84,37],[77,34,84,38],[77,35,84,39,"charCodeAt"],[77,45,84,49],[77,46,84,50],[77,47,84,51],[77,48,84,52],[77,49,84,53],[78,8,85,12],[79,8,86,12,"lastIdx"],[79,15,86,19],[79,18,86,22,"match"],[79,23,86,27],[79,24,86,28,"index"],[79,29,86,33],[79,32,86,36],[79,33,86,37],[80,6,87,8],[81,6,88,8],[81,13,88,15,"result"],[81,19,88,21],[81,22,88,24,"data"],[81,26,88,28],[81,27,88,29,"substring"],[81,36,88,38],[81,37,88,39,"lastIdx"],[81,44,88,46],[81,45,88,47],[82,4,89,4],[82,5,89,5],[83,2,90,0],[84,2,91,0],[85,0,92,0],[86,0,93,0],[87,0,94,0],[88,0,95,0],[89,0,96,0],[90,0,97,0],[91,2,98,0,"exports"],[91,9,98,7],[91,10,98,8,"escapeUTF8"],[91,20,98,18],[91,23,98,21,"getEscaper"],[91,33,98,31],[91,34,98,32],[91,44,98,42],[91,46,98,44,"xmlCodeMap"],[91,56,98,54],[91,57,98,55],[92,2,99,0],[93,0,100,0],[94,0,101,0],[95,0,102,0],[96,0,103,0],[97,0,104,0],[98,2,105,0,"exports"],[98,9,105,7],[98,10,105,8,"escapeAttribute"],[98,25,105,23],[98,28,105,26,"getEscaper"],[98,38,105,36],[98,39,105,37],[98,52,105,50],[98,54,105,52],[98,58,105,56,"Map"],[98,61,105,59],[98,62,105,60],[98,63,106,4],[98,64,106,5],[98,66,106,7],[98,68,106,9],[98,76,106,17],[98,77,106,18],[98,79,107,4],[98,80,107,5],[98,82,107,7],[98,84,107,9],[98,91,107,16],[98,92,107,17],[98,94,108,4],[98,95,108,5],[98,98,108,8],[98,100,108,10],[98,108,108,18],[98,109,108,19],[98,110,109,1],[98,111,109,2],[98,112,109,3],[99,2,110,0],[100,0,111,0],[101,0,112,0],[102,0,113,0],[103,0,114,0],[104,0,115,0],[105,2,116,0,"exports"],[105,9,116,7],[105,10,116,8,"escapeText"],[105,20,116,18],[105,23,116,21,"getEscaper"],[105,33,116,31],[105,34,116,32],[105,48,116,46],[105,50,116,48],[105,54,116,52,"Map"],[105,57,116,55],[105,58,116,56],[105,59,117,4],[105,60,117,5],[105,62,117,7],[105,64,117,9],[105,71,117,16],[105,72,117,17],[105,74,118,4],[105,75,118,5],[105,77,118,7],[105,79,118,9],[105,85,118,15],[105,86,118,16],[105,88,119,4],[105,89,119,5],[105,91,119,7],[105,93,119,9],[105,99,119,15],[105,100,119,16],[105,102,120,4],[105,103,120,5],[105,106,120,8],[105,108,120,10],[105,116,120,18],[105,117,120,19],[105,118,121,1],[105,119,121,2],[105,120,121,3],[106,0,121,4],[106,3]],"functionMap":{"names":["<global>","<anonymous>","encodeXML","getEscaper","escape"],"mappings":"AAA;MCe,wDD;QCE;SDO;AEQ;CFmB;AGsB;WCC;KDc;CHC"}},"type":"js/module"}]}