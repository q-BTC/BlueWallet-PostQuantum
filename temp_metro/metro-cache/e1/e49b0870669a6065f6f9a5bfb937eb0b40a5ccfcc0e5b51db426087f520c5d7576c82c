{"dependencies":[{"name":"./char-code-definitions","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":24,"index":154},"end":{"line":4,"column":53,"index":183}},{"start":{"line":4,"column":24,"index":154},"end":{"line":4,"column":53,"index":183}},{"start":{"line":6,"column":19,"index":237},"end":{"line":6,"column":43,"index":261}},{"start":{"line":6,"column":19,"index":237},"end":{"line":6,"column":43,"index":261}},{"start":{"line":2,"column":14,"index":68},"end":{"line":2,"column":33,"index":87}},{"start":{"line":3,"column":17,"index":106},"end":{"line":3,"column":39,"index":128}},{"start":{"line":3,"column":17,"index":106},"end":{"line":3,"column":39,"index":128}},{"start":{"line":6,"column":19,"index":237},"end":{"line":6,"column":43,"index":261}},{"start":{"line":5,"column":13,"index":198},"end":{"line":5,"column":31,"index":216}},{"start":{"line":7,"column":20,"index":283},"end":{"line":7,"column":45,"index":308}},{"start":{"line":2,"column":14,"index":68},"end":{"line":2,"column":33,"index":87}},{"start":{"line":2,"column":14,"index":68},"end":{"line":2,"column":33,"index":87}},{"start":{"line":2,"column":14,"index":68},"end":{"line":2,"column":33,"index":87}},{"start":{"line":7,"column":20,"index":283},"end":{"line":7,"column":45,"index":308}}],"key":"x4MUsEEQZGnEfli5zpshTBk5nHM="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function getCharCode(source, offset) {\n    return offset < source.length ? source.charCodeAt(offset) : 0;\n  }\n  function getNewlineLength(source, offset, code) {\n    if (code === 13 /* \\r */ && getCharCode(source, offset + 1) === 10 /* \\n */) {\n      return 2;\n    }\n    return 1;\n  }\n  function cmpChar(testStr, offset, referenceCode) {\n    var code = testStr.charCodeAt(offset);\n\n    // code.toLowerCase() for A..Z\n    if (_$$_REQUIRE(_dependencyMap[0], \"./char-code-definitions\").isUppercaseLetter(code)) {\n      code = code | 32;\n    }\n    return code === referenceCode;\n  }\n  function cmpStr(testStr, start, end, referenceStr) {\n    if (end - start !== referenceStr.length) {\n      return false;\n    }\n    if (start < 0 || end > testStr.length) {\n      return false;\n    }\n    for (var i = start; i < end; i++) {\n      var testCode = testStr.charCodeAt(i);\n      var referenceCode = referenceStr.charCodeAt(i - start);\n\n      // testCode.toLowerCase() for A..Z\n      if (_$$_REQUIRE(_dependencyMap[0], \"./char-code-definitions\").isUppercaseLetter(testCode)) {\n        testCode = testCode | 32;\n      }\n      if (testCode !== referenceCode) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function findWhiteSpaceStart(source, offset) {\n    for (; offset >= 0; offset--) {\n      if (!_$$_REQUIRE(_dependencyMap[0], \"./char-code-definitions\").isWhiteSpace(source.charCodeAt(offset))) {\n        break;\n      }\n    }\n    return offset + 1;\n  }\n  function findWhiteSpaceEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n      if (!_$$_REQUIRE(_dependencyMap[0], \"./char-code-definitions\").isWhiteSpace(source.charCodeAt(offset))) {\n        break;\n      }\n    }\n    return offset;\n  }\n  function findDecimalNumberEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n      if (!_$$_REQUIRE(_dependencyMap[0], \"./char-code-definitions\").isDigit(source.charCodeAt(offset))) {\n        break;\n      }\n    }\n    return offset;\n  }\n\n  // ยง 4.3.7. Consume an escaped code point\n  function consumeEscaped(source, offset) {\n    // It assumes that the U+005C REVERSE SOLIDUS (\\) has already been consumed and\n    // that the next input code point has already been verified to be part of a valid escape.\n    offset += 2;\n\n    // hex digit\n    if (_$$_REQUIRE(_dependencyMap[0], \"./char-code-definitions\").isHexDigit(getCharCode(source, offset - 1))) {\n      // Consume as many hex digits as possible, but no more than 5.\n      // Note that this means 1-6 hex digits have been consumed in total.\n      for (var maxOffset = Math.min(source.length, offset + 5); offset < maxOffset; offset++) {\n        if (!_$$_REQUIRE(_dependencyMap[0], \"./char-code-definitions\").isHexDigit(getCharCode(source, offset))) {\n          break;\n        }\n      }\n\n      // If the next input code point is whitespace, consume it as well.\n      var code = getCharCode(source, offset);\n      if (_$$_REQUIRE(_dependencyMap[0], \"./char-code-definitions\").isWhiteSpace(code)) {\n        offset += getNewlineLength(source, offset, code);\n      }\n    }\n    return offset;\n  }\n\n  // ยง4.3.11. Consume a name\n  // Note: This algorithm does not do the verification of the first few code points that are necessary\n  // to ensure the returned code points would constitute an <ident-token>. If that is the intended use,\n  // ensure that the stream starts with an identifier before calling this algorithm.\n  function consumeName(source, offset) {\n    // Let result initially be an empty string.\n    // Repeatedly consume the next input code point from the stream:\n    for (; offset < source.length; offset++) {\n      var code = source.charCodeAt(offset);\n\n      // name code point\n      if (_$$_REQUIRE(_dependencyMap[0], \"./char-code-definitions\").isName(code)) {\n        // Append the code point to result.\n        continue;\n      }\n\n      // the stream starts with a valid escape\n      if (_$$_REQUIRE(_dependencyMap[0], \"./char-code-definitions\").isValidEscape(code, getCharCode(source, offset + 1))) {\n        // Consume an escaped code point. Append the returned code point to result.\n        offset = consumeEscaped(source, offset) - 1;\n        continue;\n      }\n\n      // anything else\n      // Reconsume the current input code point. Return result.\n      break;\n    }\n    return offset;\n  }\n\n  // ยง4.3.12. Consume a number\n  function consumeNumber(source, offset) {\n    var code = source.charCodeAt(offset);\n\n    // 2. If the next input code point is U+002B PLUS SIGN (+) or U+002D HYPHEN-MINUS (-),\n    // consume it and append it to repr.\n    if (code === 0x002B || code === 0x002D) {\n      code = source.charCodeAt(offset += 1);\n    }\n\n    // 3. While the next input code point is a digit, consume it and append it to repr.\n    if (_$$_REQUIRE(_dependencyMap[0], \"./char-code-definitions\").isDigit(code)) {\n      offset = findDecimalNumberEnd(source, offset + 1);\n      code = source.charCodeAt(offset);\n    }\n\n    // 4. If the next 2 input code points are U+002E FULL STOP (.) followed by a digit, then:\n    if (code === 0x002E && _$$_REQUIRE(_dependencyMap[0], \"./char-code-definitions\").isDigit(source.charCodeAt(offset + 1))) {\n      // 4.1 Consume them.\n      // 4.2 Append them to repr.\n      code = source.charCodeAt(offset += 2);\n\n      // 4.3 Set type to \"number\".\n      // TODO\n\n      // 4.4 While the next input code point is a digit, consume it and append it to repr.\n\n      offset = findDecimalNumberEnd(source, offset);\n    }\n\n    // 5. If the next 2 or 3 input code points are U+0045 LATIN CAPITAL LETTER E (E)\n    // or U+0065 LATIN SMALL LETTER E (e), ... , followed by a digit, then:\n    if (cmpChar(source, offset, 101 /* e */)) {\n      var sign = 0;\n      code = source.charCodeAt(offset + 1);\n\n      // ... optionally followed by U+002D HYPHEN-MINUS (-) or U+002B PLUS SIGN (+) ...\n      if (code === 0x002D || code === 0x002B) {\n        sign = 1;\n        code = source.charCodeAt(offset + 2);\n      }\n\n      // ... followed by a digit\n      if (_$$_REQUIRE(_dependencyMap[0], \"./char-code-definitions\").isDigit(code)) {\n        // 5.1 Consume them.\n        // 5.2 Append them to repr.\n\n        // 5.3 Set type to \"number\".\n        // TODO\n\n        // 5.4 While the next input code point is a digit, consume it and append it to repr.\n        offset = findDecimalNumberEnd(source, offset + 1 + sign + 1);\n      }\n    }\n    return offset;\n  }\n\n  // ยง 4.3.14. Consume the remnants of a bad url\n  // ... its sole use is to consume enough of the input stream to reach a recovery point\n  // where normal tokenizing can resume.\n  function consumeBadUrlRemnants(source, offset) {\n    // Repeatedly consume the next input code point from the stream:\n    for (; offset < source.length; offset++) {\n      var code = source.charCodeAt(offset);\n\n      // U+0029 RIGHT PARENTHESIS ())\n      // EOF\n      if (code === 0x0029) {\n        // Return.\n        offset++;\n        break;\n      }\n      if (_$$_REQUIRE(_dependencyMap[0], \"./char-code-definitions\").isValidEscape(code, getCharCode(source, offset + 1))) {\n        // Consume an escaped code point.\n        // Note: This allows an escaped right parenthesis (\"\\)\") to be encountered\n        // without ending the <bad-url-token>. This is otherwise identical to\n        // the \"anything else\" clause.\n        offset = consumeEscaped(source, offset);\n      }\n    }\n    return offset;\n  }\n  module.exports = {\n    consumeEscaped: consumeEscaped,\n    consumeName: consumeName,\n    consumeNumber: consumeNumber,\n    consumeBadUrlRemnants: consumeBadUrlRemnants,\n    cmpChar: cmpChar,\n    cmpStr: cmpStr,\n    getNewlineLength: getNewlineLength,\n    findWhiteSpaceStart: findWhiteSpaceStart,\n    findWhiteSpaceEnd: findWhiteSpaceEnd\n  };\n});","lineCount":214,"map":[[2,2,9,0],[2,11,9,9,"getCharCode"],[2,22,9,20,"getCharCode"],[2,23,9,21,"source"],[2,29,9,27],[2,31,9,29,"offset"],[2,37,9,35],[2,39,9,37],[3,4,10,4],[3,11,10,11,"offset"],[3,17,10,17],[3,20,10,20,"source"],[3,26,10,26],[3,27,10,27,"length"],[3,33,10,33],[3,36,10,36,"source"],[3,42,10,42],[3,43,10,43,"charCodeAt"],[3,53,10,53],[3,54,10,54,"offset"],[3,60,10,60],[3,61,10,61],[3,64,10,64],[3,65,10,65],[4,2,11,0],[5,2,13,0],[5,11,13,9,"getNewlineLength"],[5,27,13,25,"getNewlineLength"],[5,28,13,26,"source"],[5,34,13,32],[5,36,13,34,"offset"],[5,42,13,40],[5,44,13,42,"code"],[5,48,13,46],[5,50,13,48],[6,4,14,4],[6,8,14,8,"code"],[6,12,14,12],[6,17,14,17],[6,19,14,19],[6,20,14,20],[6,32,14,32,"getCharCode"],[6,43,14,43],[6,44,14,44,"source"],[6,50,14,50],[6,52,14,52,"offset"],[6,58,14,58],[6,61,14,61],[6,62,14,62],[6,63,14,63],[6,68,14,68],[6,70,14,70],[6,71,14,71],[6,81,14,81],[7,6,15,8],[7,13,15,15],[7,14,15,16],[8,4,16,4],[9,4,18,4],[9,11,18,11],[9,12,18,12],[10,2,19,0],[11,2,21,0],[11,11,21,9,"cmpChar"],[11,18,21,16,"cmpChar"],[11,19,21,17,"testStr"],[11,26,21,24],[11,28,21,26,"offset"],[11,34,21,32],[11,36,21,34,"referenceCode"],[11,49,21,47],[11,51,21,49],[12,4,22,4],[12,8,22,8,"code"],[12,12,22,12],[12,15,22,15,"testStr"],[12,22,22,22],[12,23,22,23,"charCodeAt"],[12,33,22,33],[12,34,22,34,"offset"],[12,40,22,40],[12,41,22,41],[14,4,24,4],[15,4,25,4],[15,8,25,8,"_$$_REQUIRE"],[15,19,25,8],[15,20,25,8,"_dependencyMap"],[15,34,25,8],[15,66,25,8,"isUppercaseLetter"],[15,83,25,8],[15,84,25,26,"code"],[15,88,25,30],[15,89,25,31],[15,91,25,33],[16,6,26,8,"code"],[16,10,26,12],[16,13,26,15,"code"],[16,17,26,19],[16,20,26,22],[16,22,26,24],[17,4,27,4],[18,4,29,4],[18,11,29,11,"code"],[18,15,29,15],[18,20,29,20,"referenceCode"],[18,33,29,33],[19,2,30,0],[20,2,32,0],[20,11,32,9,"cmpStr"],[20,17,32,15,"cmpStr"],[20,18,32,16,"testStr"],[20,25,32,23],[20,27,32,25,"start"],[20,32,32,30],[20,34,32,32,"end"],[20,37,32,35],[20,39,32,37,"referenceStr"],[20,51,32,49],[20,53,32,51],[21,4,33,4],[21,8,33,8,"end"],[21,11,33,11],[21,14,33,14,"start"],[21,19,33,19],[21,24,33,24,"referenceStr"],[21,36,33,36],[21,37,33,37,"length"],[21,43,33,43],[21,45,33,45],[22,6,34,8],[22,13,34,15],[22,18,34,20],[23,4,35,4],[24,4,37,4],[24,8,37,8,"start"],[24,13,37,13],[24,16,37,16],[24,17,37,17],[24,21,37,21,"end"],[24,24,37,24],[24,27,37,27,"testStr"],[24,34,37,34],[24,35,37,35,"length"],[24,41,37,41],[24,43,37,43],[25,6,38,8],[25,13,38,15],[25,18,38,20],[26,4,39,4],[27,4,41,4],[27,9,41,9],[27,13,41,13,"i"],[27,14,41,14],[27,17,41,17,"start"],[27,22,41,22],[27,24,41,24,"i"],[27,25,41,25],[27,28,41,28,"end"],[27,31,41,31],[27,33,41,33,"i"],[27,34,41,34],[27,36,41,36],[27,38,41,38],[28,6,42,8],[28,10,42,12,"testCode"],[28,18,42,20],[28,21,42,23,"testStr"],[28,28,42,30],[28,29,42,31,"charCodeAt"],[28,39,42,41],[28,40,42,42,"i"],[28,41,42,43],[28,42,42,44],[29,6,43,8],[29,10,43,12,"referenceCode"],[29,23,43,25],[29,26,43,28,"referenceStr"],[29,38,43,40],[29,39,43,41,"charCodeAt"],[29,49,43,51],[29,50,43,52,"i"],[29,51,43,53],[29,54,43,56,"start"],[29,59,43,61],[29,60,43,62],[31,6,45,8],[32,6,46,8],[32,10,46,12,"_$$_REQUIRE"],[32,21,46,12],[32,22,46,12,"_dependencyMap"],[32,36,46,12],[32,68,46,12,"isUppercaseLetter"],[32,85,46,12],[32,86,46,30,"testCode"],[32,94,46,38],[32,95,46,39],[32,97,46,41],[33,8,47,12,"testCode"],[33,16,47,20],[33,19,47,23,"testCode"],[33,27,47,31],[33,30,47,34],[33,32,47,36],[34,6,48,8],[35,6,50,8],[35,10,50,12,"testCode"],[35,18,50,20],[35,23,50,25,"referenceCode"],[35,36,50,38],[35,38,50,40],[36,8,51,12],[36,15,51,19],[36,20,51,24],[37,6,52,8],[38,4,53,4],[39,4,55,4],[39,11,55,11],[39,15,55,15],[40,2,56,0],[41,2,58,0],[41,11,58,9,"findWhiteSpaceStart"],[41,30,58,28,"findWhiteSpaceStart"],[41,31,58,29,"source"],[41,37,58,35],[41,39,58,37,"offset"],[41,45,58,43],[41,47,58,45],[42,4,59,4],[42,11,59,11,"offset"],[42,17,59,17],[42,21,59,21],[42,22,59,22],[42,24,59,24,"offset"],[42,30,59,30],[42,32,59,32],[42,34,59,34],[43,6,60,8],[43,10,60,12],[43,11,60,13,"_$$_REQUIRE"],[43,22,60,13],[43,23,60,13,"_dependencyMap"],[43,37,60,13],[43,69,60,13,"isWhiteSpace"],[43,81,60,13],[43,82,60,26,"source"],[43,88,60,32],[43,89,60,33,"charCodeAt"],[43,99,60,43],[43,100,60,44,"offset"],[43,106,60,50],[43,107,60,51],[43,108,60,52],[43,110,60,54],[44,8,61,12],[45,6,62,8],[46,4,63,4],[47,4,65,4],[47,11,65,11,"offset"],[47,17,65,17],[47,20,65,20],[47,21,65,21],[48,2,66,0],[49,2,68,0],[49,11,68,9,"findWhiteSpaceEnd"],[49,28,68,26,"findWhiteSpaceEnd"],[49,29,68,27,"source"],[49,35,68,33],[49,37,68,35,"offset"],[49,43,68,41],[49,45,68,43],[50,4,69,4],[50,11,69,11,"offset"],[50,17,69,17],[50,20,69,20,"source"],[50,26,69,26],[50,27,69,27,"length"],[50,33,69,33],[50,35,69,35,"offset"],[50,41,69,41],[50,43,69,43],[50,45,69,45],[51,6,70,8],[51,10,70,12],[51,11,70,13,"_$$_REQUIRE"],[51,22,70,13],[51,23,70,13,"_dependencyMap"],[51,37,70,13],[51,69,70,13,"isWhiteSpace"],[51,81,70,13],[51,82,70,26,"source"],[51,88,70,32],[51,89,70,33,"charCodeAt"],[51,99,70,43],[51,100,70,44,"offset"],[51,106,70,50],[51,107,70,51],[51,108,70,52],[51,110,70,54],[52,8,71,12],[53,6,72,8],[54,4,73,4],[55,4,75,4],[55,11,75,11,"offset"],[55,17,75,17],[56,2,76,0],[57,2,78,0],[57,11,78,9,"findDecimalNumberEnd"],[57,31,78,29,"findDecimalNumberEnd"],[57,32,78,30,"source"],[57,38,78,36],[57,40,78,38,"offset"],[57,46,78,44],[57,48,78,46],[58,4,79,4],[58,11,79,11,"offset"],[58,17,79,17],[58,20,79,20,"source"],[58,26,79,26],[58,27,79,27,"length"],[58,33,79,33],[58,35,79,35,"offset"],[58,41,79,41],[58,43,79,43],[58,45,79,45],[59,6,80,8],[59,10,80,12],[59,11,80,13,"_$$_REQUIRE"],[59,22,80,13],[59,23,80,13,"_dependencyMap"],[59,37,80,13],[59,69,80,13,"isDigit"],[59,76,80,13],[59,77,80,21,"source"],[59,83,80,27],[59,84,80,28,"charCodeAt"],[59,94,80,38],[59,95,80,39,"offset"],[59,101,80,45],[59,102,80,46],[59,103,80,47],[59,105,80,49],[60,8,81,12],[61,6,82,8],[62,4,83,4],[63,4,85,4],[63,11,85,11,"offset"],[63,17,85,17],[64,2,86,0],[66,2,88,0],[67,2,89,0],[67,11,89,9,"consumeEscaped"],[67,25,89,23,"consumeEscaped"],[67,26,89,24,"source"],[67,32,89,30],[67,34,89,32,"offset"],[67,40,89,38],[67,42,89,40],[68,4,90,4],[69,4,91,4],[70,4,92,4,"offset"],[70,10,92,10],[70,14,92,14],[70,15,92,15],[72,4,94,4],[73,4,95,4],[73,8,95,8,"_$$_REQUIRE"],[73,19,95,8],[73,20,95,8,"_dependencyMap"],[73,34,95,8],[73,66,95,8,"isHexDigit"],[73,76,95,8],[73,77,95,19,"getCharCode"],[73,88,95,30],[73,89,95,31,"source"],[73,95,95,37],[73,97,95,39,"offset"],[73,103,95,45],[73,106,95,48],[73,107,95,49],[73,108,95,50],[73,109,95,51],[73,111,95,53],[74,6,96,8],[75,6,97,8],[76,6,98,8],[76,11,98,13],[76,15,98,17,"maxOffset"],[76,24,98,26],[76,27,98,29,"Math"],[76,31,98,33],[76,32,98,34,"min"],[76,35,98,37],[76,36,98,38,"source"],[76,42,98,44],[76,43,98,45,"length"],[76,49,98,51],[76,51,98,53,"offset"],[76,57,98,59],[76,60,98,62],[76,61,98,63],[76,62,98,64],[76,64,98,66,"offset"],[76,70,98,72],[76,73,98,75,"maxOffset"],[76,82,98,84],[76,84,98,86,"offset"],[76,90,98,92],[76,92,98,94],[76,94,98,96],[77,8,99,12],[77,12,99,16],[77,13,99,17,"_$$_REQUIRE"],[77,24,99,17],[77,25,99,17,"_dependencyMap"],[77,39,99,17],[77,71,99,17,"isHexDigit"],[77,81,99,17],[77,82,99,28,"getCharCode"],[77,93,99,39],[77,94,99,40,"source"],[77,100,99,46],[77,102,99,48,"offset"],[77,108,99,54],[77,109,99,55],[77,110,99,56],[77,112,99,58],[78,10,100,16],[79,8,101,12],[80,6,102,8],[82,6,104,8],[83,6,105,8],[83,10,105,12,"code"],[83,14,105,16],[83,17,105,19,"getCharCode"],[83,28,105,30],[83,29,105,31,"source"],[83,35,105,37],[83,37,105,39,"offset"],[83,43,105,45],[83,44,105,46],[84,6,106,8],[84,10,106,12,"_$$_REQUIRE"],[84,21,106,12],[84,22,106,12,"_dependencyMap"],[84,36,106,12],[84,68,106,12,"isWhiteSpace"],[84,80,106,12],[84,81,106,25,"code"],[84,85,106,29],[84,86,106,30],[84,88,106,32],[85,8,107,12,"offset"],[85,14,107,18],[85,18,107,22,"getNewlineLength"],[85,34,107,38],[85,35,107,39,"source"],[85,41,107,45],[85,43,107,47,"offset"],[85,49,107,53],[85,51,107,55,"code"],[85,55,107,59],[85,56,107,60],[86,6,108,8],[87,4,109,4],[88,4,111,4],[88,11,111,11,"offset"],[88,17,111,17],[89,2,112,0],[91,2,114,0],[92,2,115,0],[93,2,116,0],[94,2,117,0],[95,2,118,0],[95,11,118,9,"consumeName"],[95,22,118,20,"consumeName"],[95,23,118,21,"source"],[95,29,118,27],[95,31,118,29,"offset"],[95,37,118,35],[95,39,118,37],[96,4,119,4],[97,4,120,4],[98,4,121,4],[98,11,121,11,"offset"],[98,17,121,17],[98,20,121,20,"source"],[98,26,121,26],[98,27,121,27,"length"],[98,33,121,33],[98,35,121,35,"offset"],[98,41,121,41],[98,43,121,43],[98,45,121,45],[99,6,122,8],[99,10,122,12,"code"],[99,14,122,16],[99,17,122,19,"source"],[99,23,122,25],[99,24,122,26,"charCodeAt"],[99,34,122,36],[99,35,122,37,"offset"],[99,41,122,43],[99,42,122,44],[101,6,124,8],[102,6,125,8],[102,10,125,12,"_$$_REQUIRE"],[102,21,125,12],[102,22,125,12,"_dependencyMap"],[102,36,125,12],[102,68,125,12,"isName"],[102,74,125,12],[102,75,125,19,"code"],[102,79,125,23],[102,80,125,24],[102,82,125,26],[103,8,126,12],[104,8,127,12],[105,6,128,8],[107,6,130,8],[108,6,131,8],[108,10,131,12,"_$$_REQUIRE"],[108,21,131,12],[108,22,131,12,"_dependencyMap"],[108,36,131,12],[108,68,131,12,"isValidEscape"],[108,81,131,12],[108,82,131,26,"code"],[108,86,131,30],[108,88,131,32,"getCharCode"],[108,99,131,43],[108,100,131,44,"source"],[108,106,131,50],[108,108,131,52,"offset"],[108,114,131,58],[108,117,131,61],[108,118,131,62],[108,119,131,63],[108,120,131,64],[108,122,131,66],[109,8,132,12],[110,8,133,12,"offset"],[110,14,133,18],[110,17,133,21,"consumeEscaped"],[110,31,133,35],[110,32,133,36,"source"],[110,38,133,42],[110,40,133,44,"offset"],[110,46,133,50],[110,47,133,51],[110,50,133,54],[110,51,133,55],[111,8,134,12],[112,6,135,8],[114,6,137,8],[115,6,138,8],[116,6,139,8],[117,4,140,4],[118,4,142,4],[118,11,142,11,"offset"],[118,17,142,17],[119,2,143,0],[121,2,145,0],[122,2,146,0],[122,11,146,9,"consumeNumber"],[122,24,146,22,"consumeNumber"],[122,25,146,23,"source"],[122,31,146,29],[122,33,146,31,"offset"],[122,39,146,37],[122,41,146,39],[123,4,147,4],[123,8,147,8,"code"],[123,12,147,12],[123,15,147,15,"source"],[123,21,147,21],[123,22,147,22,"charCodeAt"],[123,32,147,32],[123,33,147,33,"offset"],[123,39,147,39],[123,40,147,40],[125,4,149,4],[126,4,150,4],[127,4,151,4],[127,8,151,8,"code"],[127,12,151,12],[127,17,151,17],[127,23,151,23],[127,27,151,27,"code"],[127,31,151,31],[127,36,151,36],[127,42,151,42],[127,44,151,44],[128,6,152,8,"code"],[128,10,152,12],[128,13,152,15,"source"],[128,19,152,21],[128,20,152,22,"charCodeAt"],[128,30,152,32],[128,31,152,33,"offset"],[128,37,152,39],[128,41,152,43],[128,42,152,44],[128,43,152,45],[129,4,153,4],[131,4,155,4],[132,4,156,4],[132,8,156,8,"_$$_REQUIRE"],[132,19,156,8],[132,20,156,8,"_dependencyMap"],[132,34,156,8],[132,66,156,8,"isDigit"],[132,73,156,8],[132,74,156,16,"code"],[132,78,156,20],[132,79,156,21],[132,81,156,23],[133,6,157,8,"offset"],[133,12,157,14],[133,15,157,17,"findDecimalNumberEnd"],[133,35,157,37],[133,36,157,38,"source"],[133,42,157,44],[133,44,157,46,"offset"],[133,50,157,52],[133,53,157,55],[133,54,157,56],[133,55,157,57],[134,6,158,8,"code"],[134,10,158,12],[134,13,158,15,"source"],[134,19,158,21],[134,20,158,22,"charCodeAt"],[134,30,158,32],[134,31,158,33,"offset"],[134,37,158,39],[134,38,158,40],[135,4,159,4],[137,4,161,4],[138,4,162,4],[138,8,162,8,"code"],[138,12,162,12],[138,17,162,17],[138,23,162,23],[138,27,162,27,"_$$_REQUIRE"],[138,38,162,27],[138,39,162,27,"_dependencyMap"],[138,53,162,27],[138,85,162,27,"isDigit"],[138,92,162,27],[138,93,162,35,"source"],[138,99,162,41],[138,100,162,42,"charCodeAt"],[138,110,162,52],[138,111,162,53,"offset"],[138,117,162,59],[138,120,162,62],[138,121,162,63],[138,122,162,64],[138,123,162,65],[138,125,162,67],[139,6,163,8],[140,6,164,8],[141,6,165,8,"code"],[141,10,165,12],[141,13,165,15,"source"],[141,19,165,21],[141,20,165,22,"charCodeAt"],[141,30,165,32],[141,31,165,33,"offset"],[141,37,165,39],[141,41,165,43],[141,42,165,44],[141,43,165,45],[143,6,167,8],[144,6,168,8],[146,6,170,8],[148,6,172,8,"offset"],[148,12,172,14],[148,15,172,17,"findDecimalNumberEnd"],[148,35,172,37],[148,36,172,38,"source"],[148,42,172,44],[148,44,172,46,"offset"],[148,50,172,52],[148,51,172,53],[149,4,173,4],[151,4,175,4],[152,4,176,4],[153,4,177,4],[153,8,177,8,"cmpChar"],[153,15,177,15],[153,16,177,16,"source"],[153,22,177,22],[153,24,177,24,"offset"],[153,30,177,30],[153,32,177,32],[153,35,177,35],[153,36,177,36],[153,43,177,43],[153,44,177,44],[153,46,177,46],[154,6,178,8],[154,10,178,12,"sign"],[154,14,178,16],[154,17,178,19],[154,18,178,20],[155,6,179,8,"code"],[155,10,179,12],[155,13,179,15,"source"],[155,19,179,21],[155,20,179,22,"charCodeAt"],[155,30,179,32],[155,31,179,33,"offset"],[155,37,179,39],[155,40,179,42],[155,41,179,43],[155,42,179,44],[157,6,181,8],[158,6,182,8],[158,10,182,12,"code"],[158,14,182,16],[158,19,182,21],[158,25,182,27],[158,29,182,31,"code"],[158,33,182,35],[158,38,182,40],[158,44,182,46],[158,46,182,48],[159,8,183,12,"sign"],[159,12,183,16],[159,15,183,19],[159,16,183,20],[160,8,184,12,"code"],[160,12,184,16],[160,15,184,19,"source"],[160,21,184,25],[160,22,184,26,"charCodeAt"],[160,32,184,36],[160,33,184,37,"offset"],[160,39,184,43],[160,42,184,46],[160,43,184,47],[160,44,184,48],[161,6,185,8],[163,6,187,8],[164,6,188,8],[164,10,188,12,"_$$_REQUIRE"],[164,21,188,12],[164,22,188,12,"_dependencyMap"],[164,36,188,12],[164,68,188,12,"isDigit"],[164,75,188,12],[164,76,188,20,"code"],[164,80,188,24],[164,81,188,25],[164,83,188,27],[165,8,189,12],[166,8,190,12],[168,8,192,12],[169,8,193,12],[171,8,195,12],[172,8,196,12,"offset"],[172,14,196,18],[172,17,196,21,"findDecimalNumberEnd"],[172,37,196,41],[172,38,196,42,"source"],[172,44,196,48],[172,46,196,50,"offset"],[172,52,196,56],[172,55,196,59],[172,56,196,60],[172,59,196,63,"sign"],[172,63,196,67],[172,66,196,70],[172,67,196,71],[172,68,196,72],[173,6,197,8],[174,4,198,4],[175,4,200,4],[175,11,200,11,"offset"],[175,17,200,17],[176,2,201,0],[178,2,203,0],[179,2,204,0],[180,2,205,0],[181,2,206,0],[181,11,206,9,"consumeBadUrlRemnants"],[181,32,206,30,"consumeBadUrlRemnants"],[181,33,206,31,"source"],[181,39,206,37],[181,41,206,39,"offset"],[181,47,206,45],[181,49,206,47],[182,4,207,4],[183,4,208,4],[183,11,208,11,"offset"],[183,17,208,17],[183,20,208,20,"source"],[183,26,208,26],[183,27,208,27,"length"],[183,33,208,33],[183,35,208,35,"offset"],[183,41,208,41],[183,43,208,43],[183,45,208,45],[184,6,209,8],[184,10,209,12,"code"],[184,14,209,16],[184,17,209,19,"source"],[184,23,209,25],[184,24,209,26,"charCodeAt"],[184,34,209,36],[184,35,209,37,"offset"],[184,41,209,43],[184,42,209,44],[186,6,211,8],[187,6,212,8],[188,6,213,8],[188,10,213,12,"code"],[188,14,213,16],[188,19,213,21],[188,25,213,27],[188,27,213,29],[189,8,214,12],[190,8,215,12,"offset"],[190,14,215,18],[190,16,215,20],[191,8,216,12],[192,6,217,8],[193,6,219,8],[193,10,219,12,"_$$_REQUIRE"],[193,21,219,12],[193,22,219,12,"_dependencyMap"],[193,36,219,12],[193,68,219,12,"isValidEscape"],[193,81,219,12],[193,82,219,26,"code"],[193,86,219,30],[193,88,219,32,"getCharCode"],[193,99,219,43],[193,100,219,44,"source"],[193,106,219,50],[193,108,219,52,"offset"],[193,114,219,58],[193,117,219,61],[193,118,219,62],[193,119,219,63],[193,120,219,64],[193,122,219,66],[194,8,220,12],[195,8,221,12],[196,8,222,12],[197,8,223,12],[198,8,224,12,"offset"],[198,14,224,18],[198,17,224,21,"consumeEscaped"],[198,31,224,35],[198,32,224,36,"source"],[198,38,224,42],[198,40,224,44,"offset"],[198,46,224,50],[198,47,224,51],[199,6,225,8],[200,4,226,4],[201,4,228,4],[201,11,228,11,"offset"],[201,17,228,17],[202,2,229,0],[203,2,231,0,"module"],[203,8,231,6],[203,9,231,7,"exports"],[203,16,231,14],[203,19,231,17],[204,4,232,4,"consumeEscaped"],[204,18,232,18],[204,20,232,20,"consumeEscaped"],[204,34,232,34],[205,4,233,4,"consumeName"],[205,15,233,15],[205,17,233,17,"consumeName"],[205,28,233,28],[206,4,234,4,"consumeNumber"],[206,17,234,17],[206,19,234,19,"consumeNumber"],[206,32,234,32],[207,4,235,4,"consumeBadUrlRemnants"],[207,25,235,25],[207,27,235,27,"consumeBadUrlRemnants"],[207,48,235,48],[208,4,237,4,"cmpChar"],[208,11,237,11],[208,13,237,13,"cmpChar"],[208,20,237,20],[209,4,238,4,"cmpStr"],[209,10,238,10],[209,12,238,12,"cmpStr"],[209,18,238,18],[210,4,240,4,"getNewlineLength"],[210,20,240,20],[210,22,240,22,"getNewlineLength"],[210,38,240,38],[211,4,241,4,"findWhiteSpaceStart"],[211,23,241,23],[211,25,241,25,"findWhiteSpaceStart"],[211,44,241,44],[212,4,242,4,"findWhiteSpaceEnd"],[212,21,242,21],[212,23,242,23,"findWhiteSpaceEnd"],[213,2,243,0],[213,3,243,1],[214,0,243,2],[214,3]],"functionMap":{"names":["<global>","getCharCode","getNewlineLength","cmpChar","cmpStr","findWhiteSpaceStart","findWhiteSpaceEnd","findDecimalNumberEnd","consumeEscaped","consumeName","consumeNumber","consumeBadUrlRemnants"],"mappings":"AAA;ACQ;CDE;AEE;CFM;AGE;CHS;AIE;CJwB;AKE;CLQ;AME;CNQ;AOE;CPQ;AQG;CRuB;ASM;CTyB;AUG;CVuD;AWK;CXuB"}},"type":"js/module"}]}