{"dependencies":[{"name":"./assert","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":22,"column":17,"index":915},"end":{"line":22,"column":36,"index":934}},{"start":{"line":22,"column":17,"index":915},"end":{"line":22,"column":36,"index":934}},{"start":{"line":22,"column":17,"index":915},"end":{"line":22,"column":36,"index":934}},{"start":{"line":22,"column":17,"index":915},"end":{"line":22,"column":36,"index":934}},{"start":{"line":22,"column":17,"index":915},"end":{"line":22,"column":36,"index":934}},{"start":{"line":22,"column":17,"index":915},"end":{"line":22,"column":36,"index":934}},{"start":{"line":22,"column":17,"index":915},"end":{"line":22,"column":36,"index":934}},{"start":{"line":22,"column":17,"index":915},"end":{"line":22,"column":36,"index":934}},{"start":{"line":22,"column":17,"index":915},"end":{"line":22,"column":36,"index":934}},{"start":{"line":22,"column":17,"index":915},"end":{"line":22,"column":36,"index":934}},{"start":{"line":22,"column":17,"index":915},"end":{"line":22,"column":36,"index":934}},{"start":{"line":22,"column":17,"index":915},"end":{"line":22,"column":36,"index":934}},{"start":{"line":22,"column":17,"index":915},"end":{"line":22,"column":36,"index":934}},{"start":{"line":22,"column":17,"index":915},"end":{"line":22,"column":36,"index":934}},{"start":{"line":22,"column":17,"index":915},"end":{"line":22,"column":36,"index":934}},{"start":{"line":22,"column":17,"index":915},"end":{"line":22,"column":36,"index":934}},{"start":{"line":22,"column":17,"index":915},"end":{"line":22,"column":36,"index":934}}],"key":"PRSWv9Op+8jXiipitv94+qE/Tqo="}},{"name":"./schema","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":23,"column":17,"index":953},"end":{"line":23,"column":36,"index":972}}],"key":"W26pFxeC1eoZg5NMFFVJmgEOTqQ="}},{"name":"./errors","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":17,"index":877},"end":{"line":21,"column":36,"index":896}}],"key":"GlkDztMSsNRYmp31iO+V/Albin8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  ////////////////////////////////////////////////////////////////////////////\n  //\n  // Copyright 2022 Realm Inc.\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  // http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n  //\n  ////////////////////////////////////////////////////////////////////////////\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.validateConfiguration = void 0;\n  /**\n   * Validate the fields of a user-provided Realm configuration.\n   * @internal\n   */\n  function validateConfiguration(config) {\n    _$$_REQUIRE(_dependencyMap[0], \"./assert\").assert.object(config, \"realm configuration\", {\n      allowArrays: false\n    });\n    var path = config.path,\n      schema = config.schema,\n      schemaVersion = config.schemaVersion,\n      inMemory = config.inMemory,\n      readOnly = config.readOnly,\n      fifoFilesFallbackPath = config.fifoFilesFallbackPath,\n      sync = config.sync,\n      openSyncedRealmLocally = config.openSyncedRealmLocally,\n      shouldCompact = config.shouldCompact,\n      deleteRealmIfMigrationNeeded = config.deleteRealmIfMigrationNeeded,\n      disableFormatUpgrade = config.disableFormatUpgrade,\n      encryptionKey = config.encryptionKey,\n      onMigration = config.onMigration,\n      migrationOptions = config.migrationOptions;\n    _$$_REQUIRE(_dependencyMap[0], \"./assert\").assert.undefined(sync, \"sync\");\n    if (path !== undefined) {\n      _$$_REQUIRE(_dependencyMap[0], \"./assert\").assert.string(path, \"'path' on realm configuration\");\n      (0, _$$_REQUIRE(_dependencyMap[0], \"./assert\").assert)(path.length > 0, \"The path cannot be empty. Provide a path or remove the field.\");\n    }\n    if (schema !== undefined) {\n      (0, _$$_REQUIRE(_dependencyMap[1], \"./schema\").validateRealmSchema)(schema);\n    }\n    if (schemaVersion !== undefined) {\n      _$$_REQUIRE(_dependencyMap[0], \"./assert\").assert.number(schemaVersion, \"'schemaVersion' on realm configuration\");\n      (0, _$$_REQUIRE(_dependencyMap[0], \"./assert\").assert)(schemaVersion >= 0 && Number.isInteger(schemaVersion), \"'schemaVersion' on realm configuration must be 0 or a positive integer.\");\n    }\n    if (inMemory !== undefined) {\n      _$$_REQUIRE(_dependencyMap[0], \"./assert\").assert.boolean(inMemory, \"'inMemory' on realm configuration\");\n    }\n    if (readOnly !== undefined) {\n      _$$_REQUIRE(_dependencyMap[0], \"./assert\").assert.boolean(readOnly, \"'readOnly' on realm configuration\");\n    }\n    if (fifoFilesFallbackPath !== undefined) {\n      _$$_REQUIRE(_dependencyMap[0], \"./assert\").assert.string(fifoFilesFallbackPath, \"'fifoFilesFallbackPath' on realm configuration\");\n    }\n    if (onMigration !== undefined) {\n      _$$_REQUIRE(_dependencyMap[0], \"./assert\").assert.function(onMigration, \"'onMigration' on realm configuration\");\n    }\n    if (openSyncedRealmLocally !== undefined) {\n      // Internal use\n      (0, _$$_REQUIRE(_dependencyMap[0], \"./assert\").assert)(openSyncedRealmLocally === true, \"'openSyncedRealmLocally' on realm configuration is only used internally and must be true if defined.\");\n    }\n    if (shouldCompact !== undefined) {\n      _$$_REQUIRE(_dependencyMap[0], \"./assert\").assert.function(shouldCompact, \"'shouldCompact' on realm configuration\");\n    }\n    if (deleteRealmIfMigrationNeeded !== undefined) {\n      _$$_REQUIRE(_dependencyMap[0], \"./assert\").assert.boolean(deleteRealmIfMigrationNeeded, \"'deleteRealmIfMigrationNeeded' on realm configuration\");\n    }\n    if (disableFormatUpgrade !== undefined) {\n      _$$_REQUIRE(_dependencyMap[0], \"./assert\").assert.boolean(disableFormatUpgrade, \"'disableFormatUpgrade' on realm configuration\");\n    }\n    if (encryptionKey !== undefined) {\n      (0, _$$_REQUIRE(_dependencyMap[0], \"./assert\").assert)(encryptionKey instanceof ArrayBuffer || ArrayBuffer.isView(encryptionKey) || encryptionKey instanceof Int8Array, `Expected 'encryptionKey' on realm configuration to be an ArrayBuffer, ArrayBufferView (Uint8Array), or Int8Array, got ${_$$_REQUIRE(_dependencyMap[2], \"./errors\").TypeAssertionError.deriveType(encryptionKey)}.`);\n    }\n    if (migrationOptions) {\n      validateMigrationOptions(migrationOptions);\n    }\n  }\n  exports.validateConfiguration = validateConfiguration;\n  function validateMigrationOptions(options) {\n    _$$_REQUIRE(_dependencyMap[0], \"./assert\").assert.object(options, \"'migrationOptions'\", {\n      allowArrays: false\n    });\n    var resolveEmbeddedConstraints = options.resolveEmbeddedConstraints;\n    if (resolveEmbeddedConstraints !== undefined) {\n      _$$_REQUIRE(_dependencyMap[0], \"./assert\").assert.boolean(resolveEmbeddedConstraints, \"'resolveEmbeddedConstraints' on 'migrationOptions'\");\n    }\n  }\n});","lineCount":101,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,2,3,0],[6,2,4,0],[7,2,5,0],[8,2,6,0],[9,2,7,0],[10,2,8,0],[11,2,9,0],[12,2,10,0],[13,2,11,0],[14,2,12,0],[15,2,13,0],[16,2,14,0],[17,2,15,0],[18,2,16,0],[19,2,17,0],[20,2,18,0],[21,2,19,0,"Object"],[21,8,19,6],[21,9,19,7,"defineProperty"],[21,23,19,21],[21,24,19,22,"exports"],[21,31,19,29],[21,33,19,31],[21,45,19,43],[21,47,19,45],[22,4,19,47,"value"],[22,9,19,52],[22,11,19,54],[23,2,19,59],[23,3,19,60],[23,4,19,61],[24,2,20,0,"exports"],[24,9,20,7],[24,10,20,8,"validateConfiguration"],[24,31,20,29],[24,34,20,32],[24,39,20,37],[24,40,20,38],[25,2,24,0],[26,0,25,0],[27,0,26,0],[28,0,27,0],[29,2,28,0],[29,11,28,9,"validateConfiguration"],[29,32,28,30,"validateConfiguration"],[29,33,28,31,"config"],[29,39,28,37],[29,41,28,39],[30,4,29,4,"_$$_REQUIRE"],[30,15,29,4],[30,16,29,4,"_dependencyMap"],[30,30,29,4],[30,47,29,13,"assert"],[30,53,29,19],[30,54,29,20,"object"],[30,60,29,26],[30,61,29,27,"config"],[30,67,29,33],[30,69,29,35],[30,90,29,56],[30,92,29,58],[31,6,29,60,"allowArrays"],[31,17,29,71],[31,19,29,73],[32,4,29,79],[32,5,29,80],[32,6,29,81],[33,4,30,4],[33,8,30,12,"path"],[33,12,30,16],[33,15,30,231,"config"],[33,21,30,237],[33,22,30,12,"path"],[33,26,30,16],[34,6,30,18,"schema"],[34,12,30,24],[34,15,30,231,"config"],[34,21,30,237],[34,22,30,18,"schema"],[34,28,30,24],[35,6,30,26,"schemaVersion"],[35,19,30,39],[35,22,30,231,"config"],[35,28,30,237],[35,29,30,26,"schemaVersion"],[35,42,30,39],[36,6,30,41,"inMemory"],[36,14,30,49],[36,17,30,231,"config"],[36,23,30,237],[36,24,30,41,"inMemory"],[36,32,30,49],[37,6,30,51,"readOnly"],[37,14,30,59],[37,17,30,231,"config"],[37,23,30,237],[37,24,30,51,"readOnly"],[37,32,30,59],[38,6,30,61,"fifoFilesFallbackPath"],[38,27,30,82],[38,30,30,231,"config"],[38,36,30,237],[38,37,30,61,"fifoFilesFallbackPath"],[38,58,30,82],[39,6,30,84,"sync"],[39,10,30,88],[39,13,30,231,"config"],[39,19,30,237],[39,20,30,84,"sync"],[39,24,30,88],[40,6,30,90,"openSyncedRealmLocally"],[40,28,30,112],[40,31,30,231,"config"],[40,37,30,237],[40,38,30,90,"openSyncedRealmLocally"],[40,60,30,112],[41,6,30,114,"shouldCompact"],[41,19,30,127],[41,22,30,231,"config"],[41,28,30,237],[41,29,30,114,"shouldCompact"],[41,42,30,127],[42,6,30,129,"deleteRealmIfMigrationNeeded"],[42,34,30,157],[42,37,30,231,"config"],[42,43,30,237],[42,44,30,129,"deleteRealmIfMigrationNeeded"],[42,72,30,157],[43,6,30,159,"disableFormatUpgrade"],[43,26,30,179],[43,29,30,231,"config"],[43,35,30,237],[43,36,30,159,"disableFormatUpgrade"],[43,56,30,179],[44,6,30,181,"encryptionKey"],[44,19,30,194],[44,22,30,231,"config"],[44,28,30,237],[44,29,30,181,"encryptionKey"],[44,42,30,194],[45,6,30,196,"onMigration"],[45,17,30,207],[45,20,30,231,"config"],[45,26,30,237],[45,27,30,196,"onMigration"],[45,38,30,207],[46,6,30,209,"migrationOptions"],[46,22,30,225],[46,25,30,231,"config"],[46,31,30,237],[46,32,30,209,"migrationOptions"],[46,48,30,225],[47,4,31,4,"_$$_REQUIRE"],[47,15,31,4],[47,16,31,4,"_dependencyMap"],[47,30,31,4],[47,47,31,13,"assert"],[47,53,31,19],[47,54,31,20,"undefined"],[47,63,31,29],[47,64,31,30,"sync"],[47,68,31,34],[47,70,31,36],[47,76,31,42],[47,77,31,43],[48,4,32,4],[48,8,32,8,"path"],[48,12,32,12],[48,17,32,17,"undefined"],[48,26,32,26],[48,28,32,28],[49,6,33,8,"_$$_REQUIRE"],[49,17,33,8],[49,18,33,8,"_dependencyMap"],[49,32,33,8],[49,49,33,17,"assert"],[49,55,33,23],[49,56,33,24,"string"],[49,62,33,30],[49,63,33,31,"path"],[49,67,33,35],[49,69,33,37],[49,100,33,68],[49,101,33,69],[50,6,34,8],[50,7,34,9],[50,8,34,10],[50,10,34,12,"_$$_REQUIRE"],[50,21,34,12],[50,22,34,12,"_dependencyMap"],[50,36,34,12],[50,53,34,21,"assert"],[50,59,34,27],[50,61,34,29,"path"],[50,65,34,33],[50,66,34,34,"length"],[50,72,34,40],[50,75,34,43],[50,76,34,44],[50,78,34,46],[50,141,34,109],[50,142,34,110],[51,4,35,4],[52,4,36,4],[52,8,36,8,"schema"],[52,14,36,14],[52,19,36,19,"undefined"],[52,28,36,28],[52,30,36,30],[53,6,37,8],[53,7,37,9],[53,8,37,10],[53,10,37,12,"_$$_REQUIRE"],[53,21,37,12],[53,22,37,12,"_dependencyMap"],[53,36,37,12],[53,53,37,21,"validateRealmSchema"],[53,72,37,40],[53,74,37,42,"schema"],[53,80,37,48],[53,81,37,49],[54,4,38,4],[55,4,39,4],[55,8,39,8,"schemaVersion"],[55,21,39,21],[55,26,39,26,"undefined"],[55,35,39,35],[55,37,39,37],[56,6,40,8,"_$$_REQUIRE"],[56,17,40,8],[56,18,40,8,"_dependencyMap"],[56,32,40,8],[56,49,40,17,"assert"],[56,55,40,23],[56,56,40,24,"number"],[56,62,40,30],[56,63,40,31,"schemaVersion"],[56,76,40,44],[56,78,40,46],[56,118,40,86],[56,119,40,87],[57,6,41,8],[57,7,41,9],[57,8,41,10],[57,10,41,12,"_$$_REQUIRE"],[57,21,41,12],[57,22,41,12,"_dependencyMap"],[57,36,41,12],[57,53,41,21,"assert"],[57,59,41,27],[57,61,41,29,"schemaVersion"],[57,74,41,42],[57,78,41,46],[57,79,41,47],[57,83,41,51,"Number"],[57,89,41,57],[57,90,41,58,"isInteger"],[57,99,41,67],[57,100,41,68,"schemaVersion"],[57,113,41,81],[57,114,41,82],[57,116,41,84],[57,189,41,157],[57,190,41,158],[58,4,42,4],[59,4,43,4],[59,8,43,8,"inMemory"],[59,16,43,16],[59,21,43,21,"undefined"],[59,30,43,30],[59,32,43,32],[60,6,44,8,"_$$_REQUIRE"],[60,17,44,8],[60,18,44,8,"_dependencyMap"],[60,32,44,8],[60,49,44,17,"assert"],[60,55,44,23],[60,56,44,24,"boolean"],[60,63,44,31],[60,64,44,32,"inMemory"],[60,72,44,40],[60,74,44,42],[60,109,44,77],[60,110,44,78],[61,4,45,4],[62,4,46,4],[62,8,46,8,"readOnly"],[62,16,46,16],[62,21,46,21,"undefined"],[62,30,46,30],[62,32,46,32],[63,6,47,8,"_$$_REQUIRE"],[63,17,47,8],[63,18,47,8,"_dependencyMap"],[63,32,47,8],[63,49,47,17,"assert"],[63,55,47,23],[63,56,47,24,"boolean"],[63,63,47,31],[63,64,47,32,"readOnly"],[63,72,47,40],[63,74,47,42],[63,109,47,77],[63,110,47,78],[64,4,48,4],[65,4,49,4],[65,8,49,8,"fifoFilesFallbackPath"],[65,29,49,29],[65,34,49,34,"undefined"],[65,43,49,43],[65,45,49,45],[66,6,50,8,"_$$_REQUIRE"],[66,17,50,8],[66,18,50,8,"_dependencyMap"],[66,32,50,8],[66,49,50,17,"assert"],[66,55,50,23],[66,56,50,24,"string"],[66,62,50,30],[66,63,50,31,"fifoFilesFallbackPath"],[66,84,50,52],[66,86,50,54],[66,134,50,102],[66,135,50,103],[67,4,51,4],[68,4,52,4],[68,8,52,8,"onMigration"],[68,19,52,19],[68,24,52,24,"undefined"],[68,33,52,33],[68,35,52,35],[69,6,53,8,"_$$_REQUIRE"],[69,17,53,8],[69,18,53,8,"_dependencyMap"],[69,32,53,8],[69,49,53,17,"assert"],[69,55,53,23],[69,56,53,24,"function"],[69,64,53,32],[69,65,53,33,"onMigration"],[69,76,53,44],[69,78,53,46],[69,116,53,84],[69,117,53,85],[70,4,54,4],[71,4,55,4],[71,8,55,8,"openSyncedRealmLocally"],[71,30,55,30],[71,35,55,35,"undefined"],[71,44,55,44],[71,46,55,46],[72,6,56,8],[73,6,57,8],[73,7,57,9],[73,8,57,10],[73,10,57,12,"_$$_REQUIRE"],[73,21,57,12],[73,22,57,12,"_dependencyMap"],[73,36,57,12],[73,53,57,21,"assert"],[73,59,57,27],[73,61,57,29,"openSyncedRealmLocally"],[73,83,57,51],[73,88,57,56],[73,92,57,60],[73,94,57,62],[73,196,57,164],[73,197,57,165],[74,4,58,4],[75,4,59,4],[75,8,59,8,"shouldCompact"],[75,21,59,21],[75,26,59,26,"undefined"],[75,35,59,35],[75,37,59,37],[76,6,60,8,"_$$_REQUIRE"],[76,17,60,8],[76,18,60,8,"_dependencyMap"],[76,32,60,8],[76,49,60,17,"assert"],[76,55,60,23],[76,56,60,24,"function"],[76,64,60,32],[76,65,60,33,"shouldCompact"],[76,78,60,46],[76,80,60,48],[76,120,60,88],[76,121,60,89],[77,4,61,4],[78,4,62,4],[78,8,62,8,"deleteRealmIfMigrationNeeded"],[78,36,62,36],[78,41,62,41,"undefined"],[78,50,62,50],[78,52,62,52],[79,6,63,8,"_$$_REQUIRE"],[79,17,63,8],[79,18,63,8,"_dependencyMap"],[79,32,63,8],[79,49,63,17,"assert"],[79,55,63,23],[79,56,63,24,"boolean"],[79,63,63,31],[79,64,63,32,"deleteRealmIfMigrationNeeded"],[79,92,63,60],[79,94,63,62],[79,149,63,117],[79,150,63,118],[80,4,64,4],[81,4,65,4],[81,8,65,8,"disableFormatUpgrade"],[81,28,65,28],[81,33,65,33,"undefined"],[81,42,65,42],[81,44,65,44],[82,6,66,8,"_$$_REQUIRE"],[82,17,66,8],[82,18,66,8,"_dependencyMap"],[82,32,66,8],[82,49,66,17,"assert"],[82,55,66,23],[82,56,66,24,"boolean"],[82,63,66,31],[82,64,66,32,"disableFormatUpgrade"],[82,84,66,52],[82,86,66,54],[82,133,66,101],[82,134,66,102],[83,4,67,4],[84,4,68,4],[84,8,68,8,"encryptionKey"],[84,21,68,21],[84,26,68,26,"undefined"],[84,35,68,35],[84,37,68,37],[85,6,69,8],[85,7,69,9],[85,8,69,10],[85,10,69,12,"_$$_REQUIRE"],[85,21,69,12],[85,22,69,12,"_dependencyMap"],[85,36,69,12],[85,53,69,21,"assert"],[85,59,69,27],[85,61,69,29,"encryptionKey"],[85,74,69,42],[85,86,69,54,"ArrayBuffer"],[85,97,69,65],[85,101,69,69,"ArrayBuffer"],[85,112,69,80],[85,113,69,81,"isView"],[85,119,69,87],[85,120,69,88,"encryptionKey"],[85,133,69,101],[85,134,69,102],[85,138,69,106,"encryptionKey"],[85,151,69,119],[85,163,69,131,"Int8Array"],[85,172,69,140],[85,174,69,142],[85,295,69,263,"_$$_REQUIRE"],[85,306,69,263],[85,307,69,263,"_dependencyMap"],[85,321,69,263],[85,338,69,272,"TypeAssertionError"],[85,356,69,290],[85,357,69,291,"deriveType"],[85,367,69,301],[85,368,69,302,"encryptionKey"],[85,381,69,315],[85,382,69,316],[85,385,69,319],[85,386,69,320],[86,4,70,4],[87,4,71,4],[87,8,71,8,"migrationOptions"],[87,24,71,24],[87,26,71,26],[88,6,72,8,"validateMigrationOptions"],[88,30,72,32],[88,31,72,33,"migrationOptions"],[88,47,72,49],[88,48,72,50],[89,4,73,4],[90,2,74,0],[91,2,75,0,"exports"],[91,9,75,7],[91,10,75,8,"validateConfiguration"],[91,31,75,29],[91,34,75,32,"validateConfiguration"],[91,55,75,53],[92,2,76,0],[92,11,76,9,"validateMigrationOptions"],[92,35,76,33,"validateMigrationOptions"],[92,36,76,34,"options"],[92,43,76,41],[92,45,76,43],[93,4,77,4,"_$$_REQUIRE"],[93,15,77,4],[93,16,77,4,"_dependencyMap"],[93,30,77,4],[93,47,77,13,"assert"],[93,53,77,19],[93,54,77,20,"object"],[93,60,77,26],[93,61,77,27,"options"],[93,68,77,34],[93,70,77,36],[93,90,77,56],[93,92,77,58],[94,6,77,60,"allowArrays"],[94,17,77,71],[94,19,77,73],[95,4,77,79],[95,5,77,80],[95,6,77,81],[96,4,78,4],[96,8,78,12,"resolveEmbeddedConstraints"],[96,34,78,38],[96,37,78,43,"options"],[96,44,78,50],[96,45,78,12,"resolveEmbeddedConstraints"],[96,71,78,38],[97,4,79,4],[97,8,79,8,"resolveEmbeddedConstraints"],[97,34,79,34],[97,39,79,39,"undefined"],[97,48,79,48],[97,50,79,50],[98,6,80,8,"_$$_REQUIRE"],[98,17,80,8],[98,18,80,8,"_dependencyMap"],[98,32,80,8],[98,49,80,17,"assert"],[98,55,80,23],[98,56,80,24,"boolean"],[98,63,80,31],[98,64,80,32,"resolveEmbeddedConstraints"],[98,90,80,58],[98,92,80,60],[98,144,80,112],[98,145,80,113],[99,4,81,4],[100,2,82,0],[101,0,82,1],[101,3]],"functionMap":{"names":["<global>","validateConfiguration","validateMigrationOptions"],"mappings":"AAA;AC2B;CD8C;AEE;CFM"}},"type":"js/module"}]}