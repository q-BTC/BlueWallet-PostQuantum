{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function noop(value) {\n    return value;\n  }\n  function generateMultiplier(multiplier) {\n    if (multiplier.min === 0 && multiplier.max === 0) {\n      return '*';\n    }\n    if (multiplier.min === 0 && multiplier.max === 1) {\n      return '?';\n    }\n    if (multiplier.min === 1 && multiplier.max === 0) {\n      return multiplier.comma ? '#' : '+';\n    }\n    if (multiplier.min === 1 && multiplier.max === 1) {\n      return '';\n    }\n    return (multiplier.comma ? '#' : '') + (multiplier.min === multiplier.max ? '{' + multiplier.min + '}' : '{' + multiplier.min + ',' + (multiplier.max !== 0 ? multiplier.max : '') + '}');\n  }\n  function generateTypeOpts(node) {\n    switch (node.type) {\n      case 'Range':\n        return ' [' + (node.min === null ? '-∞' : node.min) + ',' + (node.max === null ? '∞' : node.max) + ']';\n      default:\n        throw new Error('Unknown node type `' + node.type + '`');\n    }\n  }\n  function generateSequence(node, decorate, forceBraces, compact) {\n    var combinator = node.combinator === ' ' || compact ? node.combinator : ' ' + node.combinator + ' ';\n    var result = node.terms.map(function (term) {\n      return generate(term, decorate, forceBraces, compact);\n    }).join(combinator);\n    if (node.explicit || forceBraces) {\n      result = (compact || result[0] === ',' ? '[' : '[ ') + result + (compact ? ']' : ' ]');\n    }\n    return result;\n  }\n  function generate(node, decorate, forceBraces, compact) {\n    var result;\n    switch (node.type) {\n      case 'Group':\n        result = generateSequence(node, decorate, forceBraces, compact) + (node.disallowEmpty ? '!' : '');\n        break;\n      case 'Multiplier':\n        // return since node is a composition\n        return generate(node.term, decorate, forceBraces, compact) + decorate(generateMultiplier(node), node);\n      case 'Type':\n        result = '<' + node.name + (node.opts ? decorate(generateTypeOpts(node.opts), node.opts) : '') + '>';\n        break;\n      case 'Property':\n        result = '<\\'' + node.name + '\\'>';\n        break;\n      case 'Keyword':\n        result = node.name;\n        break;\n      case 'AtKeyword':\n        result = '@' + node.name;\n        break;\n      case 'Function':\n        result = node.name + '(';\n        break;\n      case 'String':\n      case 'Token':\n        result = node.value;\n        break;\n      case 'Comma':\n        result = ',';\n        break;\n      default:\n        throw new Error('Unknown node type `' + node.type + '`');\n    }\n    return decorate(result, node);\n  }\n  module.exports = function (node, options) {\n    var decorate = noop;\n    var forceBraces = false;\n    var compact = false;\n    if (typeof options === 'function') {\n      decorate = options;\n    } else if (options) {\n      forceBraces = Boolean(options.forceBraces);\n      compact = Boolean(options.compact);\n      if (typeof options.decorate === 'function') {\n        decorate = options.decorate;\n      }\n    }\n    return generate(node, decorate, forceBraces, compact);\n  };\n});","lineCount":89,"map":[[2,2,1,0],[2,11,1,9,"noop"],[2,15,1,13,"noop"],[2,16,1,14,"value"],[2,21,1,19],[2,23,1,21],[3,4,2,4],[3,11,2,11,"value"],[3,16,2,16],[4,2,3,0],[5,2,5,0],[5,11,5,9,"generateMultiplier"],[5,29,5,27,"generateMultiplier"],[5,30,5,28,"multiplier"],[5,40,5,38],[5,42,5,40],[6,4,6,4],[6,8,6,8,"multiplier"],[6,18,6,18],[6,19,6,19,"min"],[6,22,6,22],[6,27,6,27],[6,28,6,28],[6,32,6,32,"multiplier"],[6,42,6,42],[6,43,6,43,"max"],[6,46,6,46],[6,51,6,51],[6,52,6,52],[6,54,6,54],[7,6,7,8],[7,13,7,15],[7,16,7,18],[8,4,8,4],[9,4,10,4],[9,8,10,8,"multiplier"],[9,18,10,18],[9,19,10,19,"min"],[9,22,10,22],[9,27,10,27],[9,28,10,28],[9,32,10,32,"multiplier"],[9,42,10,42],[9,43,10,43,"max"],[9,46,10,46],[9,51,10,51],[9,52,10,52],[9,54,10,54],[10,6,11,8],[10,13,11,15],[10,16,11,18],[11,4,12,4],[12,4,14,4],[12,8,14,8,"multiplier"],[12,18,14,18],[12,19,14,19,"min"],[12,22,14,22],[12,27,14,27],[12,28,14,28],[12,32,14,32,"multiplier"],[12,42,14,42],[12,43,14,43,"max"],[12,46,14,46],[12,51,14,51],[12,52,14,52],[12,54,14,54],[13,6,15,8],[13,13,15,15,"multiplier"],[13,23,15,25],[13,24,15,26,"comma"],[13,29,15,31],[13,32,15,34],[13,35,15,37],[13,38,15,40],[13,41,15,43],[14,4,16,4],[15,4,18,4],[15,8,18,8,"multiplier"],[15,18,18,18],[15,19,18,19,"min"],[15,22,18,22],[15,27,18,27],[15,28,18,28],[15,32,18,32,"multiplier"],[15,42,18,42],[15,43,18,43,"max"],[15,46,18,46],[15,51,18,51],[15,52,18,52],[15,54,18,54],[16,6,19,8],[16,13,19,15],[16,15,19,17],[17,4,20,4],[18,4,22,4],[18,11,23,8],[18,12,23,9,"multiplier"],[18,22,23,19],[18,23,23,20,"comma"],[18,28,23,25],[18,31,23,28],[18,34,23,31],[18,37,23,34],[18,39,23,36],[18,44,24,9,"multiplier"],[18,54,24,19],[18,55,24,20,"min"],[18,58,24,23],[18,63,24,28,"multiplier"],[18,73,24,38],[18,74,24,39,"max"],[18,77,24,42],[18,80,25,14],[18,83,25,17],[18,86,25,20,"multiplier"],[18,96,25,30],[18,97,25,31,"min"],[18,100,25,34],[18,103,25,37],[18,106,25,40],[18,109,26,14],[18,112,26,17],[18,115,26,20,"multiplier"],[18,125,26,30],[18,126,26,31,"min"],[18,129,26,34],[18,132,26,37],[18,135,26,40],[18,139,26,44,"multiplier"],[18,149,26,54],[18,150,26,55,"max"],[18,153,26,58],[18,158,26,63],[18,159,26,64],[18,162,26,67,"multiplier"],[18,172,26,77],[18,173,26,78,"max"],[18,176,26,81],[18,179,26,84],[18,181,26,86],[18,182,26,87],[18,185,26,90],[18,188,26,93],[18,189,27,9],[19,2,29,0],[20,2,31,0],[20,11,31,9,"generateTypeOpts"],[20,27,31,25,"generateTypeOpts"],[20,28,31,26,"node"],[20,32,31,30],[20,34,31,32],[21,4,32,4],[21,12,32,12,"node"],[21,16,32,16],[21,17,32,17,"type"],[21,21,32,21],[22,6,33,8],[22,11,33,13],[22,18,33,20],[23,8,34,12],[23,15,35,16],[23,19,35,20],[23,23,36,17,"node"],[23,27,36,21],[23,28,36,22,"min"],[23,31,36,25],[23,36,36,30],[23,40,36,34],[23,43,36,37],[23,47,36,41],[23,50,36,44,"node"],[23,54,36,48],[23,55,36,49,"min"],[23,58,36,52],[23,59,36,53],[23,62,37,16],[23,65,37,19],[23,69,38,17,"node"],[23,73,38,21],[23,74,38,22,"max"],[23,77,38,25],[23,82,38,30],[23,86,38,34],[23,89,38,37],[23,92,38,40],[23,95,38,43,"node"],[23,99,38,47],[23,100,38,48,"max"],[23,103,38,51],[23,104,38,52],[23,107,39,16],[23,110,39,19],[24,6,42,8],[25,8,43,12],[25,14,43,18],[25,18,43,22,"Error"],[25,23,43,27],[25,24,43,28],[25,45,43,49],[25,48,43,52,"node"],[25,52,43,56],[25,53,43,57,"type"],[25,57,43,61],[25,60,43,64],[25,63,43,67],[25,64,43,68],[26,4,44,4],[27,2,45,0],[28,2,47,0],[28,11,47,9,"generateSequence"],[28,27,47,25,"generateSequence"],[28,28,47,26,"node"],[28,32,47,30],[28,34,47,32,"decorate"],[28,42,47,40],[28,44,47,42,"forceBraces"],[28,55,47,53],[28,57,47,55,"compact"],[28,64,47,62],[28,66,47,64],[29,4,48,4],[29,8,48,8,"combinator"],[29,18,48,18],[29,21,48,21,"node"],[29,25,48,25],[29,26,48,26,"combinator"],[29,36,48,36],[29,41,48,41],[29,44,48,44],[29,48,48,48,"compact"],[29,55,48,55],[29,58,48,58,"node"],[29,62,48,62],[29,63,48,63,"combinator"],[29,73,48,73],[29,76,48,76],[29,79,48,79],[29,82,48,82,"node"],[29,86,48,86],[29,87,48,87,"combinator"],[29,97,48,97],[29,100,48,100],[29,103,48,103],[30,4,49,4],[30,8,49,8,"result"],[30,14,49,14],[30,17,49,17,"node"],[30,21,49,21],[30,22,49,22,"terms"],[30,27,49,27],[30,28,49,28,"map"],[30,31,49,31],[30,32,49,32],[30,42,49,41,"term"],[30,46,49,45],[30,48,49,47],[31,6,50,8],[31,13,50,15,"generate"],[31,21,50,23],[31,22,50,24,"term"],[31,26,50,28],[31,28,50,30,"decorate"],[31,36,50,38],[31,38,50,40,"forceBraces"],[31,49,50,51],[31,51,50,53,"compact"],[31,58,50,60],[31,59,50,61],[32,4,51,4],[32,5,51,5],[32,6,51,6],[32,7,51,7,"join"],[32,11,51,11],[32,12,51,12,"combinator"],[32,22,51,22],[32,23,51,23],[33,4,53,4],[33,8,53,8,"node"],[33,12,53,12],[33,13,53,13,"explicit"],[33,21,53,21],[33,25,53,25,"forceBraces"],[33,36,53,36],[33,38,53,38],[34,6,54,8,"result"],[34,12,54,14],[34,15,54,17],[34,16,54,18,"compact"],[34,23,54,25],[34,27,54,29,"result"],[34,33,54,35],[34,34,54,36],[34,35,54,37],[34,36,54,38],[34,41,54,43],[34,44,54,46],[34,47,54,49],[34,50,54,52],[34,53,54,55],[34,57,54,59],[34,61,54,63,"result"],[34,67,54,69],[34,71,54,73,"compact"],[34,78,54,80],[34,81,54,83],[34,84,54,86],[34,87,54,89],[34,91,54,93],[34,92,54,94],[35,4,55,4],[36,4,57,4],[36,11,57,11,"result"],[36,17,57,17],[37,2,58,0],[38,2,60,0],[38,11,60,9,"generate"],[38,19,60,17,"generate"],[38,20,60,18,"node"],[38,24,60,22],[38,26,60,24,"decorate"],[38,34,60,32],[38,36,60,34,"forceBraces"],[38,47,60,45],[38,49,60,47,"compact"],[38,56,60,54],[38,58,60,56],[39,4,61,4],[39,8,61,8,"result"],[39,14,61,14],[40,4,63,4],[40,12,63,12,"node"],[40,16,63,16],[40,17,63,17,"type"],[40,21,63,21],[41,6,64,8],[41,11,64,13],[41,18,64,20],[42,8,65,12,"result"],[42,14,65,18],[42,17,66,16,"generateSequence"],[42,33,66,32],[42,34,66,33,"node"],[42,38,66,37],[42,40,66,39,"decorate"],[42,48,66,47],[42,50,66,49,"forceBraces"],[42,61,66,60],[42,63,66,62,"compact"],[42,70,66,69],[42,71,66,70],[42,75,67,17,"node"],[42,79,67,21],[42,80,67,22,"disallowEmpty"],[42,93,67,35],[42,96,67,38],[42,99,67,41],[42,102,67,44],[42,104,67,46],[42,105,67,47],[43,8,68,12],[44,6,70,8],[44,11,70,13],[44,23,70,25],[45,8,71,12],[46,8,72,12],[46,15,73,16,"generate"],[46,23,73,24],[46,24,73,25,"node"],[46,28,73,29],[46,29,73,30,"term"],[46,33,73,34],[46,35,73,36,"decorate"],[46,43,73,44],[46,45,73,46,"forceBraces"],[46,56,73,57],[46,58,73,59,"compact"],[46,65,73,66],[46,66,73,67],[46,69,74,16,"decorate"],[46,77,74,24],[46,78,74,25,"generateMultiplier"],[46,96,74,43],[46,97,74,44,"node"],[46,101,74,48],[46,102,74,49],[46,104,74,51,"node"],[46,108,74,55],[46,109,74,56],[47,6,77,8],[47,11,77,13],[47,17,77,19],[48,8,78,12,"result"],[48,14,78,18],[48,17,78,21],[48,20,78,24],[48,23,78,27,"node"],[48,27,78,31],[48,28,78,32,"name"],[48,32,78,36],[48,36,78,40,"node"],[48,40,78,44],[48,41,78,45,"opts"],[48,45,78,49],[48,48,78,52,"decorate"],[48,56,78,60],[48,57,78,61,"generateTypeOpts"],[48,73,78,77],[48,74,78,78,"node"],[48,78,78,82],[48,79,78,83,"opts"],[48,83,78,87],[48,84,78,88],[48,86,78,90,"node"],[48,90,78,94],[48,91,78,95,"opts"],[48,95,78,99],[48,96,78,100],[48,99,78,103],[48,101,78,105],[48,102,78,106],[48,105,78,109],[48,108,78,112],[49,8,79,12],[50,6,81,8],[50,11,81,13],[50,21,81,23],[51,8,82,12,"result"],[51,14,82,18],[51,17,82,21],[51,22,82,26],[51,25,82,29,"node"],[51,29,82,33],[51,30,82,34,"name"],[51,34,82,38],[51,37,82,41],[51,42,82,46],[52,8,83,12],[53,6,85,8],[53,11,85,13],[53,20,85,22],[54,8,86,12,"result"],[54,14,86,18],[54,17,86,21,"node"],[54,21,86,25],[54,22,86,26,"name"],[54,26,86,30],[55,8,87,12],[56,6,89,8],[56,11,89,13],[56,22,89,24],[57,8,90,12,"result"],[57,14,90,18],[57,17,90,21],[57,20,90,24],[57,23,90,27,"node"],[57,27,90,31],[57,28,90,32,"name"],[57,32,90,36],[58,8,91,12],[59,6,93,8],[59,11,93,13],[59,21,93,23],[60,8,94,12,"result"],[60,14,94,18],[60,17,94,21,"node"],[60,21,94,25],[60,22,94,26,"name"],[60,26,94,30],[60,29,94,33],[60,32,94,36],[61,8,95,12],[62,6,97,8],[62,11,97,13],[62,19,97,21],[63,6,98,8],[63,11,98,13],[63,18,98,20],[64,8,99,12,"result"],[64,14,99,18],[64,17,99,21,"node"],[64,21,99,25],[64,22,99,26,"value"],[64,27,99,31],[65,8,100,12],[66,6,102,8],[66,11,102,13],[66,18,102,20],[67,8,103,12,"result"],[67,14,103,18],[67,17,103,21],[67,20,103,24],[68,8,104,12],[69,6,106,8],[70,8,107,12],[70,14,107,18],[70,18,107,22,"Error"],[70,23,107,27],[70,24,107,28],[70,45,107,49],[70,48,107,52,"node"],[70,52,107,56],[70,53,107,57,"type"],[70,57,107,61],[70,60,107,64],[70,63,107,67],[70,64,107,68],[71,4,108,4],[72,4,110,4],[72,11,110,11,"decorate"],[72,19,110,19],[72,20,110,20,"result"],[72,26,110,26],[72,28,110,28,"node"],[72,32,110,32],[72,33,110,33],[73,2,111,0],[74,2,113,0,"module"],[74,8,113,6],[74,9,113,7,"exports"],[74,16,113,14],[74,19,113,17],[74,29,113,26,"node"],[74,33,113,30],[74,35,113,32,"options"],[74,42,113,39],[74,44,113,41],[75,4,114,4],[75,8,114,8,"decorate"],[75,16,114,16],[75,19,114,19,"noop"],[75,23,114,23],[76,4,115,4],[76,8,115,8,"forceBraces"],[76,19,115,19],[76,22,115,22],[76,27,115,27],[77,4,116,4],[77,8,116,8,"compact"],[77,15,116,15],[77,18,116,18],[77,23,116,23],[78,4,118,4],[78,8,118,8],[78,15,118,15,"options"],[78,22,118,22],[78,27,118,27],[78,37,118,37],[78,39,118,39],[79,6,119,8,"decorate"],[79,14,119,16],[79,17,119,19,"options"],[79,24,119,26],[80,4,120,4],[80,5,120,5],[80,11,120,11],[80,15,120,15,"options"],[80,22,120,22],[80,24,120,24],[81,6,121,8,"forceBraces"],[81,17,121,19],[81,20,121,22,"Boolean"],[81,27,121,29],[81,28,121,30,"options"],[81,35,121,37],[81,36,121,38,"forceBraces"],[81,47,121,49],[81,48,121,50],[82,6,122,8,"compact"],[82,13,122,15],[82,16,122,18,"Boolean"],[82,23,122,25],[82,24,122,26,"options"],[82,31,122,33],[82,32,122,34,"compact"],[82,39,122,41],[82,40,122,42],[83,6,123,8],[83,10,123,12],[83,17,123,19,"options"],[83,24,123,26],[83,25,123,27,"decorate"],[83,33,123,35],[83,38,123,40],[83,48,123,50],[83,50,123,52],[84,8,124,12,"decorate"],[84,16,124,20],[84,19,124,23,"options"],[84,26,124,30],[84,27,124,31,"decorate"],[84,35,124,39],[85,6,125,8],[86,4,126,4],[87,4,128,4],[87,11,128,11,"generate"],[87,19,128,19],[87,20,128,20,"node"],[87,24,128,24],[87,26,128,26,"decorate"],[87,34,128,34],[87,36,128,36,"forceBraces"],[87,47,128,47],[87,49,128,49,"compact"],[87,56,128,56],[87,57,128,57],[88,2,129,0],[88,3,129,1],[89,0,129,2],[89,3]],"functionMap":{"names":["noop","<global>","generateMultiplier","generateTypeOpts","generateSequence","node.terms.map$argument_0","generate","module.exports"],"mappings":"AAA;CCE;ACE;CDwB;AEE;CFc;AGE;gCCE;KDE;CHO;AKE;CLmD;iBME;CNgB"}},"type":"js/module"}]}