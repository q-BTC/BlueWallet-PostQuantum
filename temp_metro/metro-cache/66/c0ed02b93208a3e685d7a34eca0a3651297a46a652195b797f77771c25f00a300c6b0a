{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":298,"column":0,"index":11125}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":298,"column":0,"index":11125}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"typeforce","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":18,"index":210},"end":{"line":6,"column":38,"index":230}},{"start":{"line":6,"column":18,"index":210},"end":{"line":6,"column":38,"index":230}},{"start":{"line":6,"column":18,"index":210},"end":{"line":6,"column":38,"index":230}},{"start":{"line":6,"column":18,"index":210},"end":{"line":6,"column":38,"index":230}},{"start":{"line":6,"column":18,"index":210},"end":{"line":6,"column":38,"index":230}},{"start":{"line":6,"column":18,"index":210},"end":{"line":6,"column":38,"index":230}},{"start":{"line":6,"column":18,"index":210},"end":{"line":6,"column":38,"index":230}},{"start":{"line":6,"column":18,"index":210},"end":{"line":6,"column":38,"index":230}},{"start":{"line":6,"column":18,"index":210},"end":{"line":6,"column":38,"index":230}},{"start":{"line":6,"column":18,"index":210},"end":{"line":6,"column":38,"index":230}},{"start":{"line":6,"column":18,"index":210},"end":{"line":6,"column":38,"index":230}},{"start":{"line":6,"column":18,"index":210},"end":{"line":6,"column":38,"index":230}},{"start":{"line":6,"column":18,"index":210},"end":{"line":6,"column":38,"index":230}},{"start":{"line":6,"column":18,"index":210},"end":{"line":6,"column":38,"index":230}},{"start":{"line":6,"column":18,"index":210},"end":{"line":6,"column":38,"index":230}},{"start":{"line":6,"column":18,"index":210},"end":{"line":6,"column":38,"index":230}},{"start":{"line":6,"column":18,"index":210},"end":{"line":6,"column":38,"index":230}}],"key":"oCEA5RW0Ha+xwR9ueiGUwAxq7Z8="}},{"name":"tiny-secp256k1","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":12,"index":165},"end":{"line":5,"column":37,"index":190}},{"start":{"line":5,"column":12,"index":165},"end":{"line":5,"column":37,"index":190}},{"start":{"line":5,"column":12,"index":165},"end":{"line":5,"column":37,"index":190}},{"start":{"line":5,"column":12,"index":165},"end":{"line":5,"column":37,"index":190}},{"start":{"line":5,"column":12,"index":165},"end":{"line":5,"column":37,"index":190}},{"start":{"line":5,"column":12,"index":165},"end":{"line":5,"column":37,"index":190}},{"start":{"line":5,"column":12,"index":165},"end":{"line":5,"column":37,"index":190}},{"start":{"line":5,"column":12,"index":165},"end":{"line":5,"column":37,"index":190}},{"start":{"line":5,"column":12,"index":165},"end":{"line":5,"column":37,"index":190}},{"start":{"line":5,"column":12,"index":165},"end":{"line":5,"column":37,"index":190}}],"key":"Whff8FUlwSwW4lSXzbcdkAvwS34="}},{"name":"./crypto","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":15,"index":92},"end":{"line":3,"column":34,"index":111}},{"start":{"line":3,"column":15,"index":92},"end":{"line":3,"column":34,"index":111}},{"start":{"line":3,"column":15,"index":92},"end":{"line":3,"column":34,"index":111}}],"key":"UlGPg8imq53Of+pf4vVtgObCfOQ="}},{"name":"bs58check","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":18,"index":131},"end":{"line":4,"column":38,"index":151}},{"start":{"line":4,"column":18,"index":131},"end":{"line":4,"column":38,"index":151}}],"key":"4OUKwPALIMTasKbVl6WljOsf4WA="}},{"name":"wif","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":12,"index":244},"end":{"line":7,"column":26,"index":258}}],"key":"hbkfH+nYuAPDRbyK09Y/qV9whEg="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var UINT256_TYPE = _$$_REQUIRE(_dependencyMap[2], \"typeforce\").BufferN(32);\n  var NETWORK_TYPE = _$$_REQUIRE(_dependencyMap[2], \"typeforce\").compile({\n    wif: _$$_REQUIRE(_dependencyMap[2], \"typeforce\").UInt8,\n    bip32: {\n      public: _$$_REQUIRE(_dependencyMap[2], \"typeforce\").UInt32,\n      private: _$$_REQUIRE(_dependencyMap[2], \"typeforce\").UInt32\n    }\n  });\n  var BITCOIN = {\n    messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n    bech32: 'bc',\n    bip32: {\n      public: 0x0488b21e,\n      private: 0x0488ade4\n    },\n    pubKeyHash: 0x00,\n    scriptHash: 0x05,\n    wif: 0x80\n  };\n  var HIGHEST_BIT = 0x80000000;\n  var UINT31_MAX = Math.pow(2, 31) - 1;\n  function BIP32Path(value) {\n    return _$$_REQUIRE(_dependencyMap[2], \"typeforce\").String(value) && value.match(/^(m\\/)?(\\d+'?\\/)*\\d+'?$/) !== null;\n  }\n  function UInt31(value) {\n    return _$$_REQUIRE(_dependencyMap[2], \"typeforce\").UInt32(value) && value <= UINT31_MAX;\n  }\n  var BIP32 = /*#__PURE__*/function () {\n    function BIP32(__D, __Q, chainCode, network) {\n      var __DEPTH = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var __INDEX = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var __PARENT_FINGERPRINT = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0x00000000;\n      _classCallCheck(this, BIP32);\n      this.__D = __D;\n      this.__Q = __Q;\n      this.chainCode = chainCode;\n      this.network = network;\n      this.__DEPTH = __DEPTH;\n      this.__INDEX = __INDEX;\n      this.__PARENT_FINGERPRINT = __PARENT_FINGERPRINT;\n      _$$_REQUIRE(_dependencyMap[2], \"typeforce\")(NETWORK_TYPE, network);\n      this.lowR = false;\n    }\n    return _createClass(BIP32, [{\n      key: \"depth\",\n      get: function get() {\n        return this.__DEPTH;\n      }\n    }, {\n      key: \"index\",\n      get: function get() {\n        return this.__INDEX;\n      }\n    }, {\n      key: \"parentFingerprint\",\n      get: function get() {\n        return this.__PARENT_FINGERPRINT;\n      }\n    }, {\n      key: \"publicKey\",\n      get: function get() {\n        if (this.__Q === undefined) this.__Q = _$$_REQUIRE(_dependencyMap[3], \"tiny-secp256k1\").pointFromScalar(this.__D, true);\n        return this.__Q;\n      }\n    }, {\n      key: \"privateKey\",\n      get: function get() {\n        return this.__D;\n      }\n    }, {\n      key: \"identifier\",\n      get: function get() {\n        return _$$_REQUIRE(_dependencyMap[4], \"./crypto\").hash160(this.publicKey);\n      }\n    }, {\n      key: \"fingerprint\",\n      get: function get() {\n        return this.identifier.slice(0, 4);\n      }\n    }, {\n      key: \"compressed\",\n      get: function get() {\n        return true;\n      }\n      // Private === not neutered\n      // Public === neutered\n    }, {\n      key: \"isNeutered\",\n      value: function isNeutered() {\n        return this.__D === undefined;\n      }\n    }, {\n      key: \"neutered\",\n      value: function neutered() {\n        return fromPublicKeyLocal(this.publicKey, this.chainCode, this.network, this.depth, this.index, this.parentFingerprint);\n      }\n    }, {\n      key: \"toBase58\",\n      value: function toBase58() {\n        var network = this.network;\n        var version = !this.isNeutered() ? network.bip32.private : network.bip32.public;\n        var buffer = Buffer.allocUnsafe(78);\n        // 4 bytes: version bytes\n        buffer.writeUInt32BE(version, 0);\n        // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ....\n        buffer.writeUInt8(this.depth, 4);\n        // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)\n        buffer.writeUInt32BE(this.parentFingerprint, 5);\n        // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.\n        // This is encoded in big endian. (0x00000000 if master key)\n        buffer.writeUInt32BE(this.index, 9);\n        // 32 bytes: the chain code\n        this.chainCode.copy(buffer, 13);\n        // 33 bytes: the public key or private key data\n        if (!this.isNeutered()) {\n          // 0x00 + k for private keys\n          buffer.writeUInt8(0, 45);\n          this.privateKey.copy(buffer, 46);\n          // 33 bytes: the public key\n        } else {\n          // X9.62 encoding for public keys\n          this.publicKey.copy(buffer, 45);\n        }\n        return _$$_REQUIRE(_dependencyMap[5], \"bs58check\").encode(buffer);\n      }\n    }, {\n      key: \"toWIF\",\n      value: function toWIF() {\n        if (!this.privateKey) throw new TypeError('Missing private key');\n        return _$$_REQUIRE(_dependencyMap[6], \"wif\").encode(this.network.wif, this.privateKey, true);\n      }\n      // https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#child-key-derivation-ckd-functions\n    }, {\n      key: \"derive\",\n      value: function derive(index) {\n        _$$_REQUIRE(_dependencyMap[2], \"typeforce\")(_$$_REQUIRE(_dependencyMap[2], \"typeforce\").UInt32, index);\n        var isHardened = index >= HIGHEST_BIT;\n        var data = Buffer.allocUnsafe(37);\n        // Hardened child\n        if (isHardened) {\n          if (this.isNeutered()) throw new TypeError('Missing private key for hardened child key');\n          // data = 0x00 || ser256(kpar) || ser32(index)\n          data[0] = 0x00;\n          this.privateKey.copy(data, 1);\n          data.writeUInt32BE(index, 33);\n          // Normal child\n        } else {\n          // data = serP(point(kpar)) || ser32(index)\n          //      = serP(Kpar) || ser32(index)\n          this.publicKey.copy(data, 0);\n          data.writeUInt32BE(index, 33);\n        }\n        var I = _$$_REQUIRE(_dependencyMap[4], \"./crypto\").hmacSHA512(this.chainCode, data);\n        var IL = I.slice(0, 32);\n        var IR = I.slice(32);\n        // if parse256(IL) >= n, proceed with the next value for i\n        if (!_$$_REQUIRE(_dependencyMap[3], \"tiny-secp256k1\").isPrivate(IL)) return this.derive(index + 1);\n        // Private parent key -> private child key\n        var hd;\n        if (!this.isNeutered()) {\n          // ki = parse256(IL) + kpar (mod n)\n          var ki = _$$_REQUIRE(_dependencyMap[3], \"tiny-secp256k1\").privateAdd(this.privateKey, IL);\n          // In case ki == 0, proceed with the next value for i\n          if (ki == null) return this.derive(index + 1);\n          hd = fromPrivateKeyLocal(ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));\n          // Public parent key -> public child key\n        } else {\n          // Ki = point(parse256(IL)) + Kpar\n          //    = G*IL + Kpar\n          var Ki = _$$_REQUIRE(_dependencyMap[3], \"tiny-secp256k1\").pointAddScalar(this.publicKey, IL, true);\n          // In case Ki is the point at infinity, proceed with the next value for i\n          if (Ki === null) return this.derive(index + 1);\n          hd = fromPublicKeyLocal(Ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));\n        }\n        return hd;\n      }\n    }, {\n      key: \"deriveHardened\",\n      value: function deriveHardened(index) {\n        _$$_REQUIRE(_dependencyMap[2], \"typeforce\")(UInt31, index);\n        // Only derives hardened private keys by default\n        return this.derive(index + HIGHEST_BIT);\n      }\n    }, {\n      key: \"derivePath\",\n      value: function derivePath(path) {\n        _$$_REQUIRE(_dependencyMap[2], \"typeforce\")(BIP32Path, path);\n        var splitPath = path.split('/');\n        if (splitPath[0] === 'm') {\n          if (this.parentFingerprint) throw new TypeError('Expected master, got child');\n          splitPath = splitPath.slice(1);\n        }\n        return splitPath.reduce(function (prevHd, indexStr) {\n          var index;\n          if (indexStr.slice(-1) === `'`) {\n            index = parseInt(indexStr.slice(0, -1), 10);\n            return prevHd.deriveHardened(index);\n          } else {\n            index = parseInt(indexStr, 10);\n            return prevHd.derive(index);\n          }\n        }, this);\n      }\n    }, {\n      key: \"sign\",\n      value: function sign(hash, lowR) {\n        if (!this.privateKey) throw new Error('Missing private key');\n        if (lowR === undefined) lowR = this.lowR;\n        if (lowR === false) {\n          return _$$_REQUIRE(_dependencyMap[3], \"tiny-secp256k1\").sign(hash, this.privateKey);\n        } else {\n          var sig = _$$_REQUIRE(_dependencyMap[3], \"tiny-secp256k1\").sign(hash, this.privateKey);\n          var extraData = Buffer.alloc(32, 0);\n          var counter = 0;\n          // if first try is lowR, skip the loop\n          // for second try and on, add extra entropy counting up\n          while (sig[0] > 0x7f) {\n            counter++;\n            extraData.writeUIntLE(counter, 0, 6);\n            sig = _$$_REQUIRE(_dependencyMap[3], \"tiny-secp256k1\").signWithEntropy(hash, this.privateKey, extraData);\n          }\n          return sig;\n        }\n      }\n    }, {\n      key: \"verify\",\n      value: function verify(hash, signature) {\n        return _$$_REQUIRE(_dependencyMap[3], \"tiny-secp256k1\").verify(hash, this.publicKey, signature);\n      }\n    }]);\n  }();\n  function fromBase58(inString, network) {\n    var buffer = _$$_REQUIRE(_dependencyMap[5], \"bs58check\").decode(inString);\n    if (buffer.length !== 78) throw new TypeError('Invalid buffer length');\n    network = network || BITCOIN;\n    // 4 bytes: version bytes\n    var version = buffer.readUInt32BE(0);\n    if (version !== network.bip32.private && version !== network.bip32.public) throw new TypeError('Invalid network version');\n    // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ...\n    var depth = buffer[4];\n    // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)\n    var parentFingerprint = buffer.readUInt32BE(5);\n    if (depth === 0) {\n      if (parentFingerprint !== 0x00000000) throw new TypeError('Invalid parent fingerprint');\n    }\n    // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.\n    // This is encoded in MSB order. (0x00000000 if master key)\n    var index = buffer.readUInt32BE(9);\n    if (depth === 0 && index !== 0) throw new TypeError('Invalid index');\n    // 32 bytes: the chain code\n    var chainCode = buffer.slice(13, 45);\n    var hd;\n    // 33 bytes: private key data (0x00 + k)\n    if (version === network.bip32.private) {\n      if (buffer.readUInt8(45) !== 0x00) throw new TypeError('Invalid private key');\n      var k = buffer.slice(46, 78);\n      hd = fromPrivateKeyLocal(k, chainCode, network, depth, index, parentFingerprint);\n      // 33 bytes: public key data (0x02 + X or 0x03 + X)\n    } else {\n      var X = buffer.slice(45, 78);\n      hd = fromPublicKeyLocal(X, chainCode, network, depth, index, parentFingerprint);\n    }\n    return hd;\n  }\n  exports.fromBase58 = fromBase58;\n  function fromPrivateKey(privateKey, chainCode, network) {\n    return fromPrivateKeyLocal(privateKey, chainCode, network);\n  }\n  exports.fromPrivateKey = fromPrivateKey;\n  function fromPrivateKeyLocal(privateKey, chainCode, network, depth, index, parentFingerprint) {\n    _$$_REQUIRE(_dependencyMap[2], \"typeforce\")({\n      privateKey: UINT256_TYPE,\n      chainCode: UINT256_TYPE\n    }, {\n      privateKey: privateKey,\n      chainCode: chainCode\n    });\n    network = network || BITCOIN;\n    if (!_$$_REQUIRE(_dependencyMap[3], \"tiny-secp256k1\").isPrivate(privateKey)) throw new TypeError('Private key not in range [1, n)');\n    return new BIP32(privateKey, undefined, chainCode, network, depth, index, parentFingerprint);\n  }\n  function fromPublicKey(publicKey, chainCode, network) {\n    return fromPublicKeyLocal(publicKey, chainCode, network);\n  }\n  exports.fromPublicKey = fromPublicKey;\n  function fromPublicKeyLocal(publicKey, chainCode, network, depth, index, parentFingerprint) {\n    _$$_REQUIRE(_dependencyMap[2], \"typeforce\")({\n      publicKey: _$$_REQUIRE(_dependencyMap[2], \"typeforce\").BufferN(33),\n      chainCode: UINT256_TYPE\n    }, {\n      publicKey: publicKey,\n      chainCode: chainCode\n    });\n    network = network || BITCOIN;\n    // verify the X coordinate is a point on the curve\n    if (!_$$_REQUIRE(_dependencyMap[3], \"tiny-secp256k1\").isPoint(publicKey)) throw new TypeError('Point is not on the curve');\n    return new BIP32(undefined, publicKey, chainCode, network, depth, index, parentFingerprint);\n  }\n  function fromSeed(seed, network) {\n    _$$_REQUIRE(_dependencyMap[2], \"typeforce\")(_$$_REQUIRE(_dependencyMap[2], \"typeforce\").Buffer, seed);\n    if (seed.length < 16) throw new TypeError('Seed should be at least 128 bits');\n    if (seed.length > 64) throw new TypeError('Seed should be at most 512 bits');\n    network = network || BITCOIN;\n    var I = _$$_REQUIRE(_dependencyMap[4], \"./crypto\").hmacSHA512(Buffer.from('Bitcoin seed', 'utf8'), seed);\n    var IL = I.slice(0, 32);\n    var IR = I.slice(32);\n    return fromPrivateKey(IL, IR, network);\n  }\n  exports.fromSeed = fromSeed;\n});","lineCount":318,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"_$$_REQUIRE"],[4,35,1,13],[4,36,1,13,"_dependencyMap"],[4,50,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"_$$_REQUIRE"],[5,32,1,13],[5,33,1,13,"_dependencyMap"],[5,47,1,13],[6,2,2,0,"Object"],[6,8,2,6],[6,9,2,7,"defineProperty"],[6,23,2,21],[6,24,2,22,"exports"],[6,31,2,29],[6,33,2,31],[6,45,2,43],[6,47,2,45],[7,4,2,47,"value"],[7,9,2,52],[7,11,2,54],[8,2,2,59],[8,3,2,60],[8,4,2,61],[9,2,8,0],[9,6,8,6,"UINT256_TYPE"],[9,18,8,18],[9,21,8,21,"_$$_REQUIRE"],[9,32,8,21],[9,33,8,21,"_dependencyMap"],[9,47,8,21],[9,65,8,31,"BufferN"],[9,72,8,38],[9,73,8,39],[9,75,8,41],[9,76,8,42],[10,2,9,0],[10,6,9,6,"NETWORK_TYPE"],[10,18,9,18],[10,21,9,21,"_$$_REQUIRE"],[10,32,9,21],[10,33,9,21,"_dependencyMap"],[10,47,9,21],[10,65,9,31,"compile"],[10,72,9,38],[10,73,9,39],[11,4,10,4,"wif"],[11,7,10,7],[11,9,10,9,"_$$_REQUIRE"],[11,20,10,9],[11,21,10,9,"_dependencyMap"],[11,35,10,9],[11,53,10,19,"UInt8"],[11,58,10,24],[12,4,11,4,"bip32"],[12,9,11,9],[12,11,11,11],[13,6,12,8,"public"],[13,12,12,14],[13,14,12,16,"_$$_REQUIRE"],[13,25,12,16],[13,26,12,16,"_dependencyMap"],[13,40,12,16],[13,58,12,26,"UInt32"],[13,64,12,32],[14,6,13,8,"private"],[14,13,13,15],[14,15,13,17,"_$$_REQUIRE"],[14,26,13,17],[14,27,13,17,"_dependencyMap"],[14,41,13,17],[14,59,13,27,"UInt32"],[15,4,14,4],[16,2,15,0],[16,3,15,1],[16,4,15,2],[17,2,16,0],[17,6,16,6,"BITCOIN"],[17,13,16,13],[17,16,16,16],[18,4,17,4,"messagePrefix"],[18,17,17,17],[18,19,17,19],[18,50,17,50],[19,4,18,4,"bech32"],[19,10,18,10],[19,12,18,12],[19,16,18,16],[20,4,19,4,"bip32"],[20,9,19,9],[20,11,19,11],[21,6,20,8,"public"],[21,12,20,14],[21,14,20,16],[21,24,20,26],[22,6,21,8,"private"],[22,13,21,15],[22,15,21,17],[23,4,22,4],[23,5,22,5],[24,4,23,4,"pubKeyHash"],[24,14,23,14],[24,16,23,16],[24,20,23,20],[25,4,24,4,"scriptHash"],[25,14,24,14],[25,16,24,16],[25,20,24,20],[26,4,25,4,"wif"],[26,7,25,7],[26,9,25,9],[27,2,26,0],[27,3,26,1],[28,2,27,0],[28,6,27,6,"HIGHEST_BIT"],[28,17,27,17],[28,20,27,20],[28,30,27,30],[29,2,28,0],[29,6,28,6,"UINT31_MAX"],[29,16,28,16],[29,19,28,19,"Math"],[29,23,28,23],[29,24,28,24,"pow"],[29,27,28,27],[29,28,28,28],[29,29,28,29],[29,31,28,31],[29,33,28,33],[29,34,28,34],[29,37,28,37],[29,38,28,38],[30,2,29,0],[30,11,29,9,"BIP32Path"],[30,20,29,18,"BIP32Path"],[30,21,29,19,"value"],[30,26,29,24],[30,28,29,26],[31,4,30,4],[31,11,30,12,"_$$_REQUIRE"],[31,22,30,12],[31,23,30,12,"_dependencyMap"],[31,37,30,12],[31,55,30,22,"String"],[31,61,30,28],[31,62,30,29,"value"],[31,67,30,34],[31,68,30,35],[31,72,30,39,"value"],[31,77,30,44],[31,78,30,45,"match"],[31,83,30,50],[31,84,30,51],[31,109,30,76],[31,110,30,77],[31,115,30,82],[31,119,30,86],[32,2,31,0],[33,2,32,0],[33,11,32,9,"UInt31"],[33,17,32,15,"UInt31"],[33,18,32,16,"value"],[33,23,32,21],[33,25,32,23],[34,4,33,4],[34,11,33,11,"_$$_REQUIRE"],[34,22,33,11],[34,23,33,11,"_dependencyMap"],[34,37,33,11],[34,55,33,21,"UInt32"],[34,61,33,27],[34,62,33,28,"value"],[34,67,33,33],[34,68,33,34],[34,72,33,38,"value"],[34,77,33,43],[34,81,33,47,"UINT31_MAX"],[34,91,33,57],[35,2,34,0],[36,2,34,1],[36,6,35,6,"BIP32"],[36,11,35,11],[37,4,36,4],[37,13,36,4,"BIP32"],[37,19,36,16,"__D"],[37,22,36,19],[37,24,36,21,"__Q"],[37,27,36,24],[37,29,36,26,"chainCode"],[37,38,36,35],[37,40,36,37,"network"],[37,47,36,44],[37,49,36,107],[38,6,36,107],[38,10,36,46,"__DEPTH"],[38,17,36,53],[38,20,36,53,"arguments"],[38,29,36,53],[38,30,36,53,"length"],[38,36,36,53],[38,44,36,53,"arguments"],[38,53,36,53],[38,61,36,53,"undefined"],[38,70,36,53],[38,73,36,53,"arguments"],[38,82,36,53],[38,88,36,56],[38,89,36,57],[39,6,36,57],[39,10,36,59,"__INDEX"],[39,17,36,66],[39,20,36,66,"arguments"],[39,29,36,66],[39,30,36,66,"length"],[39,36,36,66],[39,44,36,66,"arguments"],[39,53,36,66],[39,61,36,66,"undefined"],[39,70,36,66],[39,73,36,66,"arguments"],[39,82,36,66],[39,88,36,69],[39,89,36,70],[40,6,36,70],[40,10,36,72,"__PARENT_FINGERPRINT"],[40,30,36,92],[40,33,36,92,"arguments"],[40,42,36,92],[40,43,36,92,"length"],[40,49,36,92],[40,57,36,92,"arguments"],[40,66,36,92],[40,74,36,92,"undefined"],[40,83,36,92],[40,86,36,92,"arguments"],[40,95,36,92],[40,101,36,95],[40,111,36,105],[41,6,36,105,"_classCallCheck"],[41,21,36,105],[41,28,36,105,"BIP32"],[41,33,36,105],[42,6,37,8],[42,10,37,12],[42,11,37,13,"__D"],[42,14,37,16],[42,17,37,19,"__D"],[42,20,37,22],[43,6,38,8],[43,10,38,12],[43,11,38,13,"__Q"],[43,14,38,16],[43,17,38,19,"__Q"],[43,20,38,22],[44,6,39,8],[44,10,39,12],[44,11,39,13,"chainCode"],[44,20,39,22],[44,23,39,25,"chainCode"],[44,32,39,34],[45,6,40,8],[45,10,40,12],[45,11,40,13,"network"],[45,18,40,20],[45,21,40,23,"network"],[45,28,40,30],[46,6,41,8],[46,10,41,12],[46,11,41,13,"__DEPTH"],[46,18,41,20],[46,21,41,23,"__DEPTH"],[46,28,41,30],[47,6,42,8],[47,10,42,12],[47,11,42,13,"__INDEX"],[47,18,42,20],[47,21,42,23,"__INDEX"],[47,28,42,30],[48,6,43,8],[48,10,43,12],[48,11,43,13,"__PARENT_FINGERPRINT"],[48,31,43,33],[48,34,43,36,"__PARENT_FINGERPRINT"],[48,54,43,56],[49,6,44,8,"_$$_REQUIRE"],[49,17,44,8],[49,18,44,8,"_dependencyMap"],[49,32,44,8],[49,50,44,18,"NETWORK_TYPE"],[49,62,44,30],[49,64,44,32,"network"],[49,71,44,39],[49,72,44,40],[50,6,45,8],[50,10,45,12],[50,11,45,13,"lowR"],[50,15,45,17],[50,18,45,20],[50,23,45,25],[51,4,46,4],[52,4,46,5],[52,11,46,5,"_createClass"],[52,23,46,5],[52,24,46,5,"BIP32"],[52,29,46,5],[53,6,46,5,"key"],[53,9,46,5],[54,6,46,5,"get"],[54,9,46,5],[54,11,47,4],[54,20,47,4,"get"],[54,24,47,4],[54,26,47,16],[55,8,48,8],[55,15,48,15],[55,19,48,19],[55,20,48,20,"__DEPTH"],[55,27,48,27],[56,6,49,4],[57,4,49,5],[58,6,49,5,"key"],[58,9,49,5],[59,6,49,5,"get"],[59,9,49,5],[59,11,50,4],[59,20,50,4,"get"],[59,24,50,4],[59,26,50,16],[60,8,51,8],[60,15,51,15],[60,19,51,19],[60,20,51,20,"__INDEX"],[60,27,51,27],[61,6,52,4],[62,4,52,5],[63,6,52,5,"key"],[63,9,52,5],[64,6,52,5,"get"],[64,9,52,5],[64,11,53,4],[64,20,53,4,"get"],[64,24,53,4],[64,26,53,28],[65,8,54,8],[65,15,54,15],[65,19,54,19],[65,20,54,20,"__PARENT_FINGERPRINT"],[65,40,54,40],[66,6,55,4],[67,4,55,5],[68,6,55,5,"key"],[68,9,55,5],[69,6,55,5,"get"],[69,9,55,5],[69,11,56,4],[69,20,56,4,"get"],[69,24,56,4],[69,26,56,20],[70,8,57,8],[70,12,57,12],[70,16,57,16],[70,17,57,17,"__Q"],[70,20,57,20],[70,25,57,25,"undefined"],[70,34,57,34],[70,36,58,12],[70,40,58,16],[70,41,58,17,"__Q"],[70,44,58,20],[70,47,58,23,"_$$_REQUIRE"],[70,58,58,23],[70,59,58,23,"_dependencyMap"],[70,73,58,23],[70,96,58,27,"pointFromScalar"],[70,111,58,42],[70,112,58,43],[70,116,58,47],[70,117,58,48,"__D"],[70,120,58,51],[70,122,58,53],[70,126,58,57],[70,127,58,58],[71,8,59,8],[71,15,59,15],[71,19,59,19],[71,20,59,20,"__Q"],[71,23,59,23],[72,6,60,4],[73,4,60,5],[74,6,60,5,"key"],[74,9,60,5],[75,6,60,5,"get"],[75,9,60,5],[75,11,61,4],[75,20,61,4,"get"],[75,24,61,4],[75,26,61,21],[76,8,62,8],[76,15,62,15],[76,19,62,19],[76,20,62,20,"__D"],[76,23,62,23],[77,6,63,4],[78,4,63,5],[79,6,63,5,"key"],[79,9,63,5],[80,6,63,5,"get"],[80,9,63,5],[80,11,64,4],[80,20,64,4,"get"],[80,24,64,4],[80,26,64,21],[81,8,65,8],[81,15,65,15,"_$$_REQUIRE"],[81,26,65,15],[81,27,65,15,"_dependencyMap"],[81,41,65,15],[81,58,65,22,"hash160"],[81,65,65,29],[81,66,65,30],[81,70,65,34],[81,71,65,35,"publicKey"],[81,80,65,44],[81,81,65,45],[82,6,66,4],[83,4,66,5],[84,6,66,5,"key"],[84,9,66,5],[85,6,66,5,"get"],[85,9,66,5],[85,11,67,4],[85,20,67,4,"get"],[85,24,67,4],[85,26,67,22],[86,8,68,8],[86,15,68,15],[86,19,68,19],[86,20,68,20,"identifier"],[86,30,68,30],[86,31,68,31,"slice"],[86,36,68,36],[86,37,68,37],[86,38,68,38],[86,40,68,40],[86,41,68,41],[86,42,68,42],[87,6,69,4],[88,4,69,5],[89,6,69,5,"key"],[89,9,69,5],[90,6,69,5,"get"],[90,9,69,5],[90,11,70,4],[90,20,70,4,"get"],[90,24,70,4],[90,26,70,21],[91,8,71,8],[91,15,71,15],[91,19,71,19],[92,6,72,4],[93,6,73,4],[94,6,74,4],[95,4,74,4],[96,6,74,4,"key"],[96,9,74,4],[97,6,74,4,"value"],[97,11,74,4],[97,13,75,4],[97,22,75,4,"isNeutered"],[97,32,75,14,"isNeutered"],[97,33,75,14],[97,35,75,17],[98,8,76,8],[98,15,76,15],[98,19,76,19],[98,20,76,20,"__D"],[98,23,76,23],[98,28,76,28,"undefined"],[98,37,76,37],[99,6,77,4],[100,4,77,5],[101,6,77,5,"key"],[101,9,77,5],[102,6,77,5,"value"],[102,11,77,5],[102,13,78,4],[102,22,78,4,"neutered"],[102,30,78,12,"neutered"],[102,31,78,12],[102,33,78,15],[103,8,79,8],[103,15,79,15,"fromPublicKeyLocal"],[103,33,79,33],[103,34,79,34],[103,38,79,38],[103,39,79,39,"publicKey"],[103,48,79,48],[103,50,79,50],[103,54,79,54],[103,55,79,55,"chainCode"],[103,64,79,64],[103,66,79,66],[103,70,79,70],[103,71,79,71,"network"],[103,78,79,78],[103,80,79,80],[103,84,79,84],[103,85,79,85,"depth"],[103,90,79,90],[103,92,79,92],[103,96,79,96],[103,97,79,97,"index"],[103,102,79,102],[103,104,79,104],[103,108,79,108],[103,109,79,109,"parentFingerprint"],[103,126,79,126],[103,127,79,127],[104,6,80,4],[105,4,80,5],[106,6,80,5,"key"],[106,9,80,5],[107,6,80,5,"value"],[107,11,80,5],[107,13,81,4],[107,22,81,4,"toBase58"],[107,30,81,12,"toBase58"],[107,31,81,12],[107,33,81,15],[108,8,82,8],[108,12,82,14,"network"],[108,19,82,21],[108,22,82,24],[108,26,82,28],[108,27,82,29,"network"],[108,34,82,36],[109,8,83,8],[109,12,83,14,"version"],[109,19,83,21],[109,22,83,24],[109,23,83,25],[109,27,83,29],[109,28,83,30,"isNeutered"],[109,38,83,40],[109,39,83,41],[109,40,83,42],[109,43,84,14,"network"],[109,50,84,21],[109,51,84,22,"bip32"],[109,56,84,27],[109,57,84,28,"private"],[109,64,84,35],[109,67,85,14,"network"],[109,74,85,21],[109,75,85,22,"bip32"],[109,80,85,27],[109,81,85,28,"public"],[109,87,85,34],[110,8,86,8],[110,12,86,14,"buffer"],[110,18,86,20],[110,21,86,23,"Buffer"],[110,27,86,29],[110,28,86,30,"allocUnsafe"],[110,39,86,41],[110,40,86,42],[110,42,86,44],[110,43,86,45],[111,8,87,8],[112,8,88,8,"buffer"],[112,14,88,14],[112,15,88,15,"writeUInt32BE"],[112,28,88,28],[112,29,88,29,"version"],[112,36,88,36],[112,38,88,38],[112,39,88,39],[112,40,88,40],[113,8,89,8],[114,8,90,8,"buffer"],[114,14,90,14],[114,15,90,15,"writeUInt8"],[114,25,90,25],[114,26,90,26],[114,30,90,30],[114,31,90,31,"depth"],[114,36,90,36],[114,38,90,38],[114,39,90,39],[114,40,90,40],[115,8,91,8],[116,8,92,8,"buffer"],[116,14,92,14],[116,15,92,15,"writeUInt32BE"],[116,28,92,28],[116,29,92,29],[116,33,92,33],[116,34,92,34,"parentFingerprint"],[116,51,92,51],[116,53,92,53],[116,54,92,54],[116,55,92,55],[117,8,93,8],[118,8,94,8],[119,8,95,8,"buffer"],[119,14,95,14],[119,15,95,15,"writeUInt32BE"],[119,28,95,28],[119,29,95,29],[119,33,95,33],[119,34,95,34,"index"],[119,39,95,39],[119,41,95,41],[119,42,95,42],[119,43,95,43],[120,8,96,8],[121,8,97,8],[121,12,97,12],[121,13,97,13,"chainCode"],[121,22,97,22],[121,23,97,23,"copy"],[121,27,97,27],[121,28,97,28,"buffer"],[121,34,97,34],[121,36,97,36],[121,38,97,38],[121,39,97,39],[122,8,98,8],[123,8,99,8],[123,12,99,12],[123,13,99,13],[123,17,99,17],[123,18,99,18,"isNeutered"],[123,28,99,28],[123,29,99,29],[123,30,99,30],[123,32,99,32],[124,10,100,12],[125,10,101,12,"buffer"],[125,16,101,18],[125,17,101,19,"writeUInt8"],[125,27,101,29],[125,28,101,30],[125,29,101,31],[125,31,101,33],[125,33,101,35],[125,34,101,36],[126,10,102,12],[126,14,102,16],[126,15,102,17,"privateKey"],[126,25,102,27],[126,26,102,28,"copy"],[126,30,102,32],[126,31,102,33,"buffer"],[126,37,102,39],[126,39,102,41],[126,41,102,43],[126,42,102,44],[127,10,103,12],[128,8,104,8],[128,9,104,9],[128,15,105,13],[129,10,106,12],[130,10,107,12],[130,14,107,16],[130,15,107,17,"publicKey"],[130,24,107,26],[130,25,107,27,"copy"],[130,29,107,31],[130,30,107,32,"buffer"],[130,36,107,38],[130,38,107,40],[130,40,107,42],[130,41,107,43],[131,8,108,8],[132,8,109,8],[132,15,109,15,"_$$_REQUIRE"],[132,26,109,15],[132,27,109,15,"_dependencyMap"],[132,41,109,15],[132,59,109,25,"encode"],[132,65,109,31],[132,66,109,32,"buffer"],[132,72,109,38],[132,73,109,39],[133,6,110,4],[134,4,110,5],[135,6,110,5,"key"],[135,9,110,5],[136,6,110,5,"value"],[136,11,110,5],[136,13,111,4],[136,22,111,4,"toWIF"],[136,27,111,9,"toWIF"],[136,28,111,9],[136,30,111,12],[137,8,112,8],[137,12,112,12],[137,13,112,13],[137,17,112,17],[137,18,112,18,"privateKey"],[137,28,112,28],[137,30,113,12],[137,36,113,18],[137,40,113,22,"TypeError"],[137,49,113,31],[137,50,113,32],[137,71,113,53],[137,72,113,54],[138,8,114,8],[138,15,114,15,"_$$_REQUIRE"],[138,26,114,15],[138,27,114,15,"_dependencyMap"],[138,41,114,15],[138,53,114,19,"encode"],[138,59,114,25],[138,60,114,26],[138,64,114,30],[138,65,114,31,"network"],[138,72,114,38],[138,73,114,39,"wif"],[138,76,114,42],[138,78,114,44],[138,82,114,48],[138,83,114,49,"privateKey"],[138,93,114,59],[138,95,114,61],[138,99,114,65],[138,100,114,66],[139,6,115,4],[140,6,116,4],[141,4,116,4],[142,6,116,4,"key"],[142,9,116,4],[143,6,116,4,"value"],[143,11,116,4],[143,13,117,4],[143,22,117,4,"derive"],[143,28,117,10,"derive"],[143,29,117,11,"index"],[143,34,117,16],[143,36,117,18],[144,8,118,8,"_$$_REQUIRE"],[144,19,118,8],[144,20,118,8,"_dependencyMap"],[144,34,118,8],[144,52,118,18,"_$$_REQUIRE"],[144,63,118,18],[144,64,118,18,"_dependencyMap"],[144,78,118,18],[144,96,118,28,"UInt32"],[144,102,118,34],[144,104,118,36,"index"],[144,109,118,41],[144,110,118,42],[145,8,119,8],[145,12,119,14,"isHardened"],[145,22,119,24],[145,25,119,27,"index"],[145,30,119,32],[145,34,119,36,"HIGHEST_BIT"],[145,45,119,47],[146,8,120,8],[146,12,120,14,"data"],[146,16,120,18],[146,19,120,21,"Buffer"],[146,25,120,27],[146,26,120,28,"allocUnsafe"],[146,37,120,39],[146,38,120,40],[146,40,120,42],[146,41,120,43],[147,8,121,8],[148,8,122,8],[148,12,122,12,"isHardened"],[148,22,122,22],[148,24,122,24],[149,10,123,12],[149,14,123,16],[149,18,123,20],[149,19,123,21,"isNeutered"],[149,29,123,31],[149,30,123,32],[149,31,123,33],[149,33,124,16],[149,39,124,22],[149,43,124,26,"TypeError"],[149,52,124,35],[149,53,124,36],[149,97,124,80],[149,98,124,81],[150,10,125,12],[151,10,126,12,"data"],[151,14,126,16],[151,15,126,17],[151,16,126,18],[151,17,126,19],[151,20,126,22],[151,24,126,26],[152,10,127,12],[152,14,127,16],[152,15,127,17,"privateKey"],[152,25,127,27],[152,26,127,28,"copy"],[152,30,127,32],[152,31,127,33,"data"],[152,35,127,37],[152,37,127,39],[152,38,127,40],[152,39,127,41],[153,10,128,12,"data"],[153,14,128,16],[153,15,128,17,"writeUInt32BE"],[153,28,128,30],[153,29,128,31,"index"],[153,34,128,36],[153,36,128,38],[153,38,128,40],[153,39,128,41],[154,10,129,12],[155,8,130,8],[155,9,130,9],[155,15,131,13],[156,10,132,12],[157,10,133,12],[158,10,134,12],[158,14,134,16],[158,15,134,17,"publicKey"],[158,24,134,26],[158,25,134,27,"copy"],[158,29,134,31],[158,30,134,32,"data"],[158,34,134,36],[158,36,134,38],[158,37,134,39],[158,38,134,40],[159,10,135,12,"data"],[159,14,135,16],[159,15,135,17,"writeUInt32BE"],[159,28,135,30],[159,29,135,31,"index"],[159,34,135,36],[159,36,135,38],[159,38,135,40],[159,39,135,41],[160,8,136,8],[161,8,137,8],[161,12,137,14,"I"],[161,13,137,15],[161,16,137,18,"_$$_REQUIRE"],[161,27,137,18],[161,28,137,18,"_dependencyMap"],[161,42,137,18],[161,59,137,25,"hmacSHA512"],[161,69,137,35],[161,70,137,36],[161,74,137,40],[161,75,137,41,"chainCode"],[161,84,137,50],[161,86,137,52,"data"],[161,90,137,56],[161,91,137,57],[162,8,138,8],[162,12,138,14,"IL"],[162,14,138,16],[162,17,138,19,"I"],[162,18,138,20],[162,19,138,21,"slice"],[162,24,138,26],[162,25,138,27],[162,26,138,28],[162,28,138,30],[162,30,138,32],[162,31,138,33],[163,8,139,8],[163,12,139,14,"IR"],[163,14,139,16],[163,17,139,19,"I"],[163,18,139,20],[163,19,139,21,"slice"],[163,24,139,26],[163,25,139,27],[163,27,139,29],[163,28,139,30],[164,8,140,8],[165,8,141,8],[165,12,141,12],[165,13,141,13,"_$$_REQUIRE"],[165,24,141,13],[165,25,141,13,"_dependencyMap"],[165,39,141,13],[165,62,141,17,"isPrivate"],[165,71,141,26],[165,72,141,27,"IL"],[165,74,141,29],[165,75,141,30],[165,77,142,12],[165,84,142,19],[165,88,142,23],[165,89,142,24,"derive"],[165,95,142,30],[165,96,142,31,"index"],[165,101,142,36],[165,104,142,39],[165,105,142,40],[165,106,142,41],[166,8,143,8],[167,8,144,8],[167,12,144,12,"hd"],[167,14,144,14],[168,8,145,8],[168,12,145,12],[168,13,145,13],[168,17,145,17],[168,18,145,18,"isNeutered"],[168,28,145,28],[168,29,145,29],[168,30,145,30],[168,32,145,32],[169,10,146,12],[170,10,147,12],[170,14,147,18,"ki"],[170,16,147,20],[170,19,147,23,"_$$_REQUIRE"],[170,30,147,23],[170,31,147,23,"_dependencyMap"],[170,45,147,23],[170,68,147,27,"privateAdd"],[170,78,147,37],[170,79,147,38],[170,83,147,42],[170,84,147,43,"privateKey"],[170,94,147,53],[170,96,147,55,"IL"],[170,98,147,57],[170,99,147,58],[171,10,148,12],[172,10,149,12],[172,14,149,16,"ki"],[172,16,149,18],[172,20,149,22],[172,24,149,26],[172,26,150,16],[172,33,150,23],[172,37,150,27],[172,38,150,28,"derive"],[172,44,150,34],[172,45,150,35,"index"],[172,50,150,40],[172,53,150,43],[172,54,150,44],[172,55,150,45],[173,10,151,12,"hd"],[173,12,151,14],[173,15,151,17,"fromPrivateKeyLocal"],[173,34,151,36],[173,35,151,37,"ki"],[173,37,151,39],[173,39,151,41,"IR"],[173,41,151,43],[173,43,151,45],[173,47,151,49],[173,48,151,50,"network"],[173,55,151,57],[173,57,151,59],[173,61,151,63],[173,62,151,64,"depth"],[173,67,151,69],[173,70,151,72],[173,71,151,73],[173,73,151,75,"index"],[173,78,151,80],[173,80,151,82],[173,84,151,86],[173,85,151,87,"fingerprint"],[173,96,151,98],[173,97,151,99,"readUInt32BE"],[173,109,151,111],[173,110,151,112],[173,111,151,113],[173,112,151,114],[173,113,151,115],[174,10,152,12],[175,8,153,8],[175,9,153,9],[175,15,154,13],[176,10,155,12],[177,10,156,12],[178,10,157,12],[178,14,157,18,"Ki"],[178,16,157,20],[178,19,157,23,"_$$_REQUIRE"],[178,30,157,23],[178,31,157,23,"_dependencyMap"],[178,45,157,23],[178,68,157,27,"pointAddScalar"],[178,82,157,41],[178,83,157,42],[178,87,157,46],[178,88,157,47,"publicKey"],[178,97,157,56],[178,99,157,58,"IL"],[178,101,157,60],[178,103,157,62],[178,107,157,66],[178,108,157,67],[179,10,158,12],[180,10,159,12],[180,14,159,16,"Ki"],[180,16,159,18],[180,21,159,23],[180,25,159,27],[180,27,160,16],[180,34,160,23],[180,38,160,27],[180,39,160,28,"derive"],[180,45,160,34],[180,46,160,35,"index"],[180,51,160,40],[180,54,160,43],[180,55,160,44],[180,56,160,45],[181,10,161,12,"hd"],[181,12,161,14],[181,15,161,17,"fromPublicKeyLocal"],[181,33,161,35],[181,34,161,36,"Ki"],[181,36,161,38],[181,38,161,40,"IR"],[181,40,161,42],[181,42,161,44],[181,46,161,48],[181,47,161,49,"network"],[181,54,161,56],[181,56,161,58],[181,60,161,62],[181,61,161,63,"depth"],[181,66,161,68],[181,69,161,71],[181,70,161,72],[181,72,161,74,"index"],[181,77,161,79],[181,79,161,81],[181,83,161,85],[181,84,161,86,"fingerprint"],[181,95,161,97],[181,96,161,98,"readUInt32BE"],[181,108,161,110],[181,109,161,111],[181,110,161,112],[181,111,161,113],[181,112,161,114],[182,8,162,8],[183,8,163,8],[183,15,163,15,"hd"],[183,17,163,17],[184,6,164,4],[185,4,164,5],[186,6,164,5,"key"],[186,9,164,5],[187,6,164,5,"value"],[187,11,164,5],[187,13,165,4],[187,22,165,4,"deriveHardened"],[187,36,165,18,"deriveHardened"],[187,37,165,19,"index"],[187,42,165,24],[187,44,165,26],[188,8,166,8,"_$$_REQUIRE"],[188,19,166,8],[188,20,166,8,"_dependencyMap"],[188,34,166,8],[188,52,166,18,"UInt31"],[188,58,166,24],[188,60,166,26,"index"],[188,65,166,31],[188,66,166,32],[189,8,167,8],[190,8,168,8],[190,15,168,15],[190,19,168,19],[190,20,168,20,"derive"],[190,26,168,26],[190,27,168,27,"index"],[190,32,168,32],[190,35,168,35,"HIGHEST_BIT"],[190,46,168,46],[190,47,168,47],[191,6,169,4],[192,4,169,5],[193,6,169,5,"key"],[193,9,169,5],[194,6,169,5,"value"],[194,11,169,5],[194,13,170,4],[194,22,170,4,"derivePath"],[194,32,170,14,"derivePath"],[194,33,170,15,"path"],[194,37,170,19],[194,39,170,21],[195,8,171,8,"_$$_REQUIRE"],[195,19,171,8],[195,20,171,8,"_dependencyMap"],[195,34,171,8],[195,52,171,18,"BIP32Path"],[195,61,171,27],[195,63,171,29,"path"],[195,67,171,33],[195,68,171,34],[196,8,172,8],[196,12,172,12,"splitPath"],[196,21,172,21],[196,24,172,24,"path"],[196,28,172,28],[196,29,172,29,"split"],[196,34,172,34],[196,35,172,35],[196,38,172,38],[196,39,172,39],[197,8,173,8],[197,12,173,12,"splitPath"],[197,21,173,21],[197,22,173,22],[197,23,173,23],[197,24,173,24],[197,29,173,29],[197,32,173,32],[197,34,173,34],[198,10,174,12],[198,14,174,16],[198,18,174,20],[198,19,174,21,"parentFingerprint"],[198,36,174,38],[198,38,175,16],[198,44,175,22],[198,48,175,26,"TypeError"],[198,57,175,35],[198,58,175,36],[198,86,175,64],[198,87,175,65],[199,10,176,12,"splitPath"],[199,19,176,21],[199,22,176,24,"splitPath"],[199,31,176,33],[199,32,176,34,"slice"],[199,37,176,39],[199,38,176,40],[199,39,176,41],[199,40,176,42],[200,8,177,8],[201,8,178,8],[201,15,178,15,"splitPath"],[201,24,178,24],[201,25,178,25,"reduce"],[201,31,178,31],[201,32,178,32],[201,42,178,33,"prevHd"],[201,48,178,39],[201,50,178,41,"indexStr"],[201,58,178,49],[201,60,178,54],[202,10,179,12],[202,14,179,16,"index"],[202,19,179,21],[203,10,180,12],[203,14,180,16,"indexStr"],[203,22,180,24],[203,23,180,25,"slice"],[203,28,180,30],[203,29,180,31],[203,30,180,32],[203,31,180,33],[203,32,180,34],[203,37,180,39],[203,40,180,42],[203,42,180,44],[204,12,181,16,"index"],[204,17,181,21],[204,20,181,24,"parseInt"],[204,28,181,32],[204,29,181,33,"indexStr"],[204,37,181,41],[204,38,181,42,"slice"],[204,43,181,47],[204,44,181,48],[204,45,181,49],[204,47,181,51],[204,48,181,52],[204,49,181,53],[204,50,181,54],[204,52,181,56],[204,54,181,58],[204,55,181,59],[205,12,182,16],[205,19,182,23,"prevHd"],[205,25,182,29],[205,26,182,30,"deriveHardened"],[205,40,182,44],[205,41,182,45,"index"],[205,46,182,50],[205,47,182,51],[206,10,183,12],[206,11,183,13],[206,17,184,17],[207,12,185,16,"index"],[207,17,185,21],[207,20,185,24,"parseInt"],[207,28,185,32],[207,29,185,33,"indexStr"],[207,37,185,41],[207,39,185,43],[207,41,185,45],[207,42,185,46],[208,12,186,16],[208,19,186,23,"prevHd"],[208,25,186,29],[208,26,186,30,"derive"],[208,32,186,36],[208,33,186,37,"index"],[208,38,186,42],[208,39,186,43],[209,10,187,12],[210,8,188,8],[210,9,188,9],[210,11,188,11],[210,15,188,15],[210,16,188,16],[211,6,189,4],[212,4,189,5],[213,6,189,5,"key"],[213,9,189,5],[214,6,189,5,"value"],[214,11,189,5],[214,13,190,4],[214,22,190,4,"sign"],[214,26,190,8,"sign"],[214,27,190,9,"hash"],[214,31,190,13],[214,33,190,15,"lowR"],[214,37,190,19],[214,39,190,21],[215,8,191,8],[215,12,191,12],[215,13,191,13],[215,17,191,17],[215,18,191,18,"privateKey"],[215,28,191,28],[215,30,192,12],[215,36,192,18],[215,40,192,22,"Error"],[215,45,192,27],[215,46,192,28],[215,67,192,49],[215,68,192,50],[216,8,193,8],[216,12,193,12,"lowR"],[216,16,193,16],[216,21,193,21,"undefined"],[216,30,193,30],[216,32,194,12,"lowR"],[216,36,194,16],[216,39,194,19],[216,43,194,23],[216,44,194,24,"lowR"],[216,48,194,28],[217,8,195,8],[217,12,195,12,"lowR"],[217,16,195,16],[217,21,195,21],[217,26,195,26],[217,28,195,28],[218,10,196,12],[218,17,196,19,"_$$_REQUIRE"],[218,28,196,19],[218,29,196,19,"_dependencyMap"],[218,43,196,19],[218,66,196,23,"sign"],[218,70,196,27],[218,71,196,28,"hash"],[218,75,196,32],[218,77,196,34],[218,81,196,38],[218,82,196,39,"privateKey"],[218,92,196,49],[218,93,196,50],[219,8,197,8],[219,9,197,9],[219,15,198,13],[220,10,199,12],[220,14,199,16,"sig"],[220,17,199,19],[220,20,199,22,"_$$_REQUIRE"],[220,31,199,22],[220,32,199,22,"_dependencyMap"],[220,46,199,22],[220,69,199,26,"sign"],[220,73,199,30],[220,74,199,31,"hash"],[220,78,199,35],[220,80,199,37],[220,84,199,41],[220,85,199,42,"privateKey"],[220,95,199,52],[220,96,199,53],[221,10,200,12],[221,14,200,18,"extraData"],[221,23,200,27],[221,26,200,30,"Buffer"],[221,32,200,36],[221,33,200,37,"alloc"],[221,38,200,42],[221,39,200,43],[221,41,200,45],[221,43,200,47],[221,44,200,48],[221,45,200,49],[222,10,201,12],[222,14,201,16,"counter"],[222,21,201,23],[222,24,201,26],[222,25,201,27],[223,10,202,12],[224,10,203,12],[225,10,204,12],[225,17,204,19,"sig"],[225,20,204,22],[225,21,204,23],[225,22,204,24],[225,23,204,25],[225,26,204,28],[225,30,204,32],[225,32,204,34],[226,12,205,16,"counter"],[226,19,205,23],[226,21,205,25],[227,12,206,16,"extraData"],[227,21,206,25],[227,22,206,26,"writeUIntLE"],[227,33,206,37],[227,34,206,38,"counter"],[227,41,206,45],[227,43,206,47],[227,44,206,48],[227,46,206,50],[227,47,206,51],[227,48,206,52],[228,12,207,16,"sig"],[228,15,207,19],[228,18,207,22,"_$$_REQUIRE"],[228,29,207,22],[228,30,207,22,"_dependencyMap"],[228,44,207,22],[228,67,207,26,"signWithEntropy"],[228,82,207,41],[228,83,207,42,"hash"],[228,87,207,46],[228,89,207,48],[228,93,207,52],[228,94,207,53,"privateKey"],[228,104,207,63],[228,106,207,65,"extraData"],[228,115,207,74],[228,116,207,75],[229,10,208,12],[230,10,209,12],[230,17,209,19,"sig"],[230,20,209,22],[231,8,210,8],[232,6,211,4],[233,4,211,5],[234,6,211,5,"key"],[234,9,211,5],[235,6,211,5,"value"],[235,11,211,5],[235,13,212,4],[235,22,212,4,"verify"],[235,28,212,10,"verify"],[235,29,212,11,"hash"],[235,33,212,15],[235,35,212,17,"signature"],[235,44,212,26],[235,46,212,28],[236,8,213,8],[236,15,213,15,"_$$_REQUIRE"],[236,26,213,15],[236,27,213,15,"_dependencyMap"],[236,41,213,15],[236,64,213,19,"verify"],[236,70,213,25],[236,71,213,26,"hash"],[236,75,213,30],[236,77,213,32],[236,81,213,36],[236,82,213,37,"publicKey"],[236,91,213,46],[236,93,213,48,"signature"],[236,102,213,57],[236,103,213,58],[237,6,214,4],[238,4,214,5],[239,2,214,5],[240,2,216,0],[240,11,216,9,"fromBase58"],[240,21,216,19,"fromBase58"],[240,22,216,20,"inString"],[240,30,216,28],[240,32,216,30,"network"],[240,39,216,37],[240,41,216,39],[241,4,217,4],[241,8,217,10,"buffer"],[241,14,217,16],[241,17,217,19,"_$$_REQUIRE"],[241,28,217,19],[241,29,217,19,"_dependencyMap"],[241,43,217,19],[241,61,217,29,"decode"],[241,67,217,35],[241,68,217,36,"inString"],[241,76,217,44],[241,77,217,45],[242,4,218,4],[242,8,218,8,"buffer"],[242,14,218,14],[242,15,218,15,"length"],[242,21,218,21],[242,26,218,26],[242,28,218,28],[242,30,219,8],[242,36,219,14],[242,40,219,18,"TypeError"],[242,49,219,27],[242,50,219,28],[242,73,219,51],[242,74,219,52],[243,4,220,4,"network"],[243,11,220,11],[243,14,220,14,"network"],[243,21,220,21],[243,25,220,25,"BITCOIN"],[243,32,220,32],[244,4,221,4],[245,4,222,4],[245,8,222,10,"version"],[245,15,222,17],[245,18,222,20,"buffer"],[245,24,222,26],[245,25,222,27,"readUInt32BE"],[245,37,222,39],[245,38,222,40],[245,39,222,41],[245,40,222,42],[246,4,223,4],[246,8,223,8,"version"],[246,15,223,15],[246,20,223,20,"network"],[246,27,223,27],[246,28,223,28,"bip32"],[246,33,223,33],[246,34,223,34,"private"],[246,41,223,41],[246,45,223,45,"version"],[246,52,223,52],[246,57,223,57,"network"],[246,64,223,64],[246,65,223,65,"bip32"],[246,70,223,70],[246,71,223,71,"public"],[246,77,223,77],[246,79,224,8],[246,85,224,14],[246,89,224,18,"TypeError"],[246,98,224,27],[246,99,224,28],[246,124,224,53],[246,125,224,54],[247,4,225,4],[248,4,226,4],[248,8,226,10,"depth"],[248,13,226,15],[248,16,226,18,"buffer"],[248,22,226,24],[248,23,226,25],[248,24,226,26],[248,25,226,27],[249,4,227,4],[250,4,228,4],[250,8,228,10,"parentFingerprint"],[250,25,228,27],[250,28,228,30,"buffer"],[250,34,228,36],[250,35,228,37,"readUInt32BE"],[250,47,228,49],[250,48,228,50],[250,49,228,51],[250,50,228,52],[251,4,229,4],[251,8,229,8,"depth"],[251,13,229,13],[251,18,229,18],[251,19,229,19],[251,21,229,21],[252,6,230,8],[252,10,230,12,"parentFingerprint"],[252,27,230,29],[252,32,230,34],[252,42,230,44],[252,44,231,12],[252,50,231,18],[252,54,231,22,"TypeError"],[252,63,231,31],[252,64,231,32],[252,92,231,60],[252,93,231,61],[253,4,232,4],[254,4,233,4],[255,4,234,4],[256,4,235,4],[256,8,235,10,"index"],[256,13,235,15],[256,16,235,18,"buffer"],[256,22,235,24],[256,23,235,25,"readUInt32BE"],[256,35,235,37],[256,36,235,38],[256,37,235,39],[256,38,235,40],[257,4,236,4],[257,8,236,8,"depth"],[257,13,236,13],[257,18,236,18],[257,19,236,19],[257,23,236,23,"index"],[257,28,236,28],[257,33,236,33],[257,34,236,34],[257,36,237,8],[257,42,237,14],[257,46,237,18,"TypeError"],[257,55,237,27],[257,56,237,28],[257,71,237,43],[257,72,237,44],[258,4,238,4],[259,4,239,4],[259,8,239,10,"chainCode"],[259,17,239,19],[259,20,239,22,"buffer"],[259,26,239,28],[259,27,239,29,"slice"],[259,32,239,34],[259,33,239,35],[259,35,239,37],[259,37,239,39],[259,39,239,41],[259,40,239,42],[260,4,240,4],[260,8,240,8,"hd"],[260,10,240,10],[261,4,241,4],[262,4,242,4],[262,8,242,8,"version"],[262,15,242,15],[262,20,242,20,"network"],[262,27,242,27],[262,28,242,28,"bip32"],[262,33,242,33],[262,34,242,34,"private"],[262,41,242,41],[262,43,242,43],[263,6,243,8],[263,10,243,12,"buffer"],[263,16,243,18],[263,17,243,19,"readUInt8"],[263,26,243,28],[263,27,243,29],[263,29,243,31],[263,30,243,32],[263,35,243,37],[263,39,243,41],[263,41,244,12],[263,47,244,18],[263,51,244,22,"TypeError"],[263,60,244,31],[263,61,244,32],[263,82,244,53],[263,83,244,54],[264,6,245,8],[264,10,245,14,"k"],[264,11,245,15],[264,14,245,18,"buffer"],[264,20,245,24],[264,21,245,25,"slice"],[264,26,245,30],[264,27,245,31],[264,29,245,33],[264,31,245,35],[264,33,245,37],[264,34,245,38],[265,6,246,8,"hd"],[265,8,246,10],[265,11,246,13,"fromPrivateKeyLocal"],[265,30,246,32],[265,31,246,33,"k"],[265,32,246,34],[265,34,246,36,"chainCode"],[265,43,246,45],[265,45,246,47,"network"],[265,52,246,54],[265,54,246,56,"depth"],[265,59,246,61],[265,61,246,63,"index"],[265,66,246,68],[265,68,246,70,"parentFingerprint"],[265,85,246,87],[265,86,246,88],[266,6,247,8],[267,4,248,4],[267,5,248,5],[267,11,249,9],[268,6,250,8],[268,10,250,14,"X"],[268,11,250,15],[268,14,250,18,"buffer"],[268,20,250,24],[268,21,250,25,"slice"],[268,26,250,30],[268,27,250,31],[268,29,250,33],[268,31,250,35],[268,33,250,37],[268,34,250,38],[269,6,251,8,"hd"],[269,8,251,10],[269,11,251,13,"fromPublicKeyLocal"],[269,29,251,31],[269,30,251,32,"X"],[269,31,251,33],[269,33,251,35,"chainCode"],[269,42,251,44],[269,44,251,46,"network"],[269,51,251,53],[269,53,251,55,"depth"],[269,58,251,60],[269,60,251,62,"index"],[269,65,251,67],[269,67,251,69,"parentFingerprint"],[269,84,251,86],[269,85,251,87],[270,4,252,4],[271,4,253,4],[271,11,253,11,"hd"],[271,13,253,13],[272,2,254,0],[273,2,255,0,"exports"],[273,9,255,7],[273,10,255,8,"fromBase58"],[273,20,255,18],[273,23,255,21,"fromBase58"],[273,33,255,31],[274,2,256,0],[274,11,256,9,"fromPrivateKey"],[274,25,256,23,"fromPrivateKey"],[274,26,256,24,"privateKey"],[274,36,256,34],[274,38,256,36,"chainCode"],[274,47,256,45],[274,49,256,47,"network"],[274,56,256,54],[274,58,256,56],[275,4,257,4],[275,11,257,11,"fromPrivateKeyLocal"],[275,30,257,30],[275,31,257,31,"privateKey"],[275,41,257,41],[275,43,257,43,"chainCode"],[275,52,257,52],[275,54,257,54,"network"],[275,61,257,61],[275,62,257,62],[276,2,258,0],[277,2,259,0,"exports"],[277,9,259,7],[277,10,259,8,"fromPrivateKey"],[277,24,259,22],[277,27,259,25,"fromPrivateKey"],[277,41,259,39],[278,2,260,0],[278,11,260,9,"fromPrivateKeyLocal"],[278,30,260,28,"fromPrivateKeyLocal"],[278,31,260,29,"privateKey"],[278,41,260,39],[278,43,260,41,"chainCode"],[278,52,260,50],[278,54,260,52,"network"],[278,61,260,59],[278,63,260,61,"depth"],[278,68,260,66],[278,70,260,68,"index"],[278,75,260,73],[278,77,260,75,"parentFingerprint"],[278,94,260,92],[278,96,260,94],[279,4,261,4,"_$$_REQUIRE"],[279,15,261,4],[279,16,261,4,"_dependencyMap"],[279,30,261,4],[279,48,261,14],[280,6,262,8,"privateKey"],[280,16,262,18],[280,18,262,20,"UINT256_TYPE"],[280,30,262,32],[281,6,263,8,"chainCode"],[281,15,263,17],[281,17,263,19,"UINT256_TYPE"],[282,4,264,4],[282,5,264,5],[282,7,264,7],[283,6,264,9,"privateKey"],[283,16,264,19],[283,18,264,9,"privateKey"],[283,28,264,19],[284,6,264,21,"chainCode"],[284,15,264,30],[284,17,264,21,"chainCode"],[285,4,264,31],[285,5,264,32],[285,6,264,33],[286,4,265,4,"network"],[286,11,265,11],[286,14,265,14,"network"],[286,21,265,21],[286,25,265,25,"BITCOIN"],[286,32,265,32],[287,4,266,4],[287,8,266,8],[287,9,266,9,"_$$_REQUIRE"],[287,20,266,9],[287,21,266,9,"_dependencyMap"],[287,35,266,9],[287,58,266,13,"isPrivate"],[287,67,266,22],[287,68,266,23,"privateKey"],[287,78,266,33],[287,79,266,34],[287,81,267,8],[287,87,267,14],[287,91,267,18,"TypeError"],[287,100,267,27],[287,101,267,28],[287,134,267,61],[287,135,267,62],[288,4,268,4],[288,11,268,11],[288,15,268,15,"BIP32"],[288,20,268,20],[288,21,268,21,"privateKey"],[288,31,268,31],[288,33,268,33,"undefined"],[288,42,268,42],[288,44,268,44,"chainCode"],[288,53,268,53],[288,55,268,55,"network"],[288,62,268,62],[288,64,268,64,"depth"],[288,69,268,69],[288,71,268,71,"index"],[288,76,268,76],[288,78,268,78,"parentFingerprint"],[288,95,268,95],[288,96,268,96],[289,2,269,0],[290,2,270,0],[290,11,270,9,"fromPublicKey"],[290,24,270,22,"fromPublicKey"],[290,25,270,23,"publicKey"],[290,34,270,32],[290,36,270,34,"chainCode"],[290,45,270,43],[290,47,270,45,"network"],[290,54,270,52],[290,56,270,54],[291,4,271,4],[291,11,271,11,"fromPublicKeyLocal"],[291,29,271,29],[291,30,271,30,"publicKey"],[291,39,271,39],[291,41,271,41,"chainCode"],[291,50,271,50],[291,52,271,52,"network"],[291,59,271,59],[291,60,271,60],[292,2,272,0],[293,2,273,0,"exports"],[293,9,273,7],[293,10,273,8,"fromPublicKey"],[293,23,273,21],[293,26,273,24,"fromPublicKey"],[293,39,273,37],[294,2,274,0],[294,11,274,9,"fromPublicKeyLocal"],[294,29,274,27,"fromPublicKeyLocal"],[294,30,274,28,"publicKey"],[294,39,274,37],[294,41,274,39,"chainCode"],[294,50,274,48],[294,52,274,50,"network"],[294,59,274,57],[294,61,274,59,"depth"],[294,66,274,64],[294,68,274,66,"index"],[294,73,274,71],[294,75,274,73,"parentFingerprint"],[294,92,274,90],[294,94,274,92],[295,4,275,4,"_$$_REQUIRE"],[295,15,275,4],[295,16,275,4,"_dependencyMap"],[295,30,275,4],[295,48,275,14],[296,6,276,8,"publicKey"],[296,15,276,17],[296,17,276,19,"_$$_REQUIRE"],[296,28,276,19],[296,29,276,19,"_dependencyMap"],[296,43,276,19],[296,61,276,29,"BufferN"],[296,68,276,36],[296,69,276,37],[296,71,276,39],[296,72,276,40],[297,6,277,8,"chainCode"],[297,15,277,17],[297,17,277,19,"UINT256_TYPE"],[298,4,278,4],[298,5,278,5],[298,7,278,7],[299,6,278,9,"publicKey"],[299,15,278,18],[299,17,278,9,"publicKey"],[299,26,278,18],[300,6,278,20,"chainCode"],[300,15,278,29],[300,17,278,20,"chainCode"],[301,4,278,30],[301,5,278,31],[301,6,278,32],[302,4,279,4,"network"],[302,11,279,11],[302,14,279,14,"network"],[302,21,279,21],[302,25,279,25,"BITCOIN"],[302,32,279,32],[303,4,280,4],[304,4,281,4],[304,8,281,8],[304,9,281,9,"_$$_REQUIRE"],[304,20,281,9],[304,21,281,9,"_dependencyMap"],[304,35,281,9],[304,58,281,13,"isPoint"],[304,65,281,20],[304,66,281,21,"publicKey"],[304,75,281,30],[304,76,281,31],[304,78,282,8],[304,84,282,14],[304,88,282,18,"TypeError"],[304,97,282,27],[304,98,282,28],[304,125,282,55],[304,126,282,56],[305,4,283,4],[305,11,283,11],[305,15,283,15,"BIP32"],[305,20,283,20],[305,21,283,21,"undefined"],[305,30,283,30],[305,32,283,32,"publicKey"],[305,41,283,41],[305,43,283,43,"chainCode"],[305,52,283,52],[305,54,283,54,"network"],[305,61,283,61],[305,63,283,63,"depth"],[305,68,283,68],[305,70,283,70,"index"],[305,75,283,75],[305,77,283,77,"parentFingerprint"],[305,94,283,94],[305,95,283,95],[306,2,284,0],[307,2,285,0],[307,11,285,9,"fromSeed"],[307,19,285,17,"fromSeed"],[307,20,285,18,"seed"],[307,24,285,22],[307,26,285,24,"network"],[307,33,285,31],[307,35,285,33],[308,4,286,4,"_$$_REQUIRE"],[308,15,286,4],[308,16,286,4,"_dependencyMap"],[308,30,286,4],[308,48,286,14,"_$$_REQUIRE"],[308,59,286,14],[308,60,286,14,"_dependencyMap"],[308,74,286,14],[308,92,286,24,"Buffer"],[308,98,286,30],[308,100,286,32,"seed"],[308,104,286,36],[308,105,286,37],[309,4,287,4],[309,8,287,8,"seed"],[309,12,287,12],[309,13,287,13,"length"],[309,19,287,19],[309,22,287,22],[309,24,287,24],[309,26,288,8],[309,32,288,14],[309,36,288,18,"TypeError"],[309,45,288,27],[309,46,288,28],[309,80,288,62],[309,81,288,63],[310,4,289,4],[310,8,289,8,"seed"],[310,12,289,12],[310,13,289,13,"length"],[310,19,289,19],[310,22,289,22],[310,24,289,24],[310,26,290,8],[310,32,290,14],[310,36,290,18,"TypeError"],[310,45,290,27],[310,46,290,28],[310,79,290,61],[310,80,290,62],[311,4,291,4,"network"],[311,11,291,11],[311,14,291,14,"network"],[311,21,291,21],[311,25,291,25,"BITCOIN"],[311,32,291,32],[312,4,292,4],[312,8,292,10,"I"],[312,9,292,11],[312,12,292,14,"_$$_REQUIRE"],[312,23,292,14],[312,24,292,14,"_dependencyMap"],[312,38,292,14],[312,55,292,21,"hmacSHA512"],[312,65,292,31],[312,66,292,32,"Buffer"],[312,72,292,38],[312,73,292,39,"from"],[312,77,292,43],[312,78,292,44],[312,92,292,58],[312,94,292,60],[312,100,292,66],[312,101,292,67],[312,103,292,69,"seed"],[312,107,292,73],[312,108,292,74],[313,4,293,4],[313,8,293,10,"IL"],[313,10,293,12],[313,13,293,15,"I"],[313,14,293,16],[313,15,293,17,"slice"],[313,20,293,22],[313,21,293,23],[313,22,293,24],[313,24,293,26],[313,26,293,28],[313,27,293,29],[314,4,294,4],[314,8,294,10,"IR"],[314,10,294,12],[314,13,294,15,"I"],[314,14,294,16],[314,15,294,17,"slice"],[314,20,294,22],[314,21,294,23],[314,23,294,25],[314,24,294,26],[315,4,295,4],[315,11,295,11,"fromPrivateKey"],[315,25,295,25],[315,26,295,26,"IL"],[315,28,295,28],[315,30,295,30,"IR"],[315,32,295,32],[315,34,295,34,"network"],[315,41,295,41],[315,42,295,42],[316,2,296,0],[317,2,297,0,"exports"],[317,9,297,7],[317,10,297,8,"fromSeed"],[317,18,297,16],[317,21,297,19,"fromSeed"],[317,29,297,27],[318,0,297,28],[318,3]],"functionMap":{"names":["<global>","BIP32Path","UInt31","BIP32","BIP32#constructor","BIP32#get__depth","BIP32#get__index","BIP32#get__parentFingerprint","BIP32#get__publicKey","BIP32#get__privateKey","BIP32#get__identifier","BIP32#get__fingerprint","BIP32#get__compressed","BIP32#isNeutered","BIP32#neutered","BIP32#toBase58","BIP32#toWIF","BIP32#derive","BIP32#deriveHardened","BIP32#derivePath","splitPath.reduce$argument_0","BIP32#sign","BIP32#verify","fromBase58","fromPrivateKey","fromPrivateKeyLocal","fromPublicKey","fromPublicKeyLocal","fromSeed"],"mappings":"AAA;AC4B;CDE;AEC;CFE;AGC;ICC;KDU;IEC;KFE;IGC;KHE;IIC;KJE;IKC;KLI;IMC;KNE;IOC;KPE;IQC;KRE;ISC;KTE;IUG;KVE;IWC;KXE;IYC;KZ6B;IaC;KbI;IcE;Kd+C;IeC;KfI;IgBC;gCCQ;SDU;KhBC;IkBC;KlBqB;ImBC;KnBE;CHC;AuBC;CvBsC;AwBE;CxBE;AyBE;CzBS;A0BC;C1BE;A2BE;C3BU;A4BC;C5BW"}},"type":"js/module"}]}