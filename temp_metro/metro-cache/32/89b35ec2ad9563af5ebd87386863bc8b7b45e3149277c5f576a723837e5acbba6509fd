{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  var noop = function noop() {};\n  function ensureFunction(value) {\n    return typeof value === 'function' ? value : noop;\n  }\n  function invokeForType(fn, type) {\n    return function (node, item, list) {\n      if (node.type === type) {\n        fn.call(this, node, item, list);\n      }\n    };\n  }\n  function getWalkersFromStructure(name, nodeType) {\n    var structure = nodeType.structure;\n    var walkers = [];\n    for (var key in structure) {\n      if (hasOwnProperty.call(structure, key) === false) {\n        continue;\n      }\n      var fieldTypes = structure[key];\n      var walker = {\n        name: key,\n        type: false,\n        nullable: false\n      };\n      if (!Array.isArray(structure[key])) {\n        fieldTypes = [structure[key]];\n      }\n      for (var i = 0; i < fieldTypes.length; i++) {\n        var fieldType = fieldTypes[i];\n        if (fieldType === null) {\n          walker.nullable = true;\n        } else if (typeof fieldType === 'string') {\n          walker.type = 'node';\n        } else if (Array.isArray(fieldType)) {\n          walker.type = 'list';\n        }\n      }\n      if (walker.type) {\n        walkers.push(walker);\n      }\n    }\n    if (walkers.length) {\n      return {\n        context: nodeType.walkContext,\n        fields: walkers\n      };\n    }\n    return null;\n  }\n  function getTypesFromConfig(config) {\n    var types = {};\n    for (var name in config.node) {\n      if (hasOwnProperty.call(config.node, name)) {\n        var nodeType = config.node[name];\n        if (!nodeType.structure) {\n          throw new Error('Missed `structure` field in `' + name + '` node type definition');\n        }\n        types[name] = getWalkersFromStructure(name, nodeType);\n      }\n    }\n    return types;\n  }\n  function createTypeIterator(config, reverse) {\n    var fields = config.fields.slice();\n    var contextName = config.context;\n    var useContext = typeof contextName === 'string';\n    if (reverse) {\n      fields.reverse();\n    }\n    return function (node, context, walk, walkReducer) {\n      var prevContextValue;\n      if (useContext) {\n        prevContextValue = context[contextName];\n        context[contextName] = node;\n      }\n      for (var i = 0; i < fields.length; i++) {\n        var field = fields[i];\n        var ref = node[field.name];\n        if (!field.nullable || ref) {\n          if (field.type === 'list') {\n            var breakWalk = reverse ? ref.reduceRight(walkReducer, false) : ref.reduce(walkReducer, false);\n            if (breakWalk) {\n              return true;\n            }\n          } else if (walk(ref)) {\n            return true;\n          }\n        }\n      }\n      if (useContext) {\n        context[contextName] = prevContextValue;\n      }\n    };\n  }\n  function createFastTraveralMap(iterators) {\n    return {\n      Atrule: {\n        StyleSheet: iterators.StyleSheet,\n        Atrule: iterators.Atrule,\n        Rule: iterators.Rule,\n        Block: iterators.Block\n      },\n      Rule: {\n        StyleSheet: iterators.StyleSheet,\n        Atrule: iterators.Atrule,\n        Rule: iterators.Rule,\n        Block: iterators.Block\n      },\n      Declaration: {\n        StyleSheet: iterators.StyleSheet,\n        Atrule: iterators.Atrule,\n        Rule: iterators.Rule,\n        Block: iterators.Block,\n        DeclarationList: iterators.DeclarationList\n      }\n    };\n  }\n  module.exports = function createWalker(config) {\n    var types = getTypesFromConfig(config);\n    var iteratorsNatural = {};\n    var iteratorsReverse = {};\n    var breakWalk = Symbol('break-walk');\n    var skipNode = Symbol('skip-node');\n    for (var name in types) {\n      if (hasOwnProperty.call(types, name) && types[name] !== null) {\n        iteratorsNatural[name] = createTypeIterator(types[name], false);\n        iteratorsReverse[name] = createTypeIterator(types[name], true);\n      }\n    }\n    var fastTraversalIteratorsNatural = createFastTraveralMap(iteratorsNatural);\n    var fastTraversalIteratorsReverse = createFastTraveralMap(iteratorsReverse);\n    var walk = function walk(root, options) {\n      function walkNode(node, item, list) {\n        var enterRet = enter.call(context, node, item, list);\n        if (enterRet === breakWalk) {\n          debugger;\n          return true;\n        }\n        if (enterRet === skipNode) {\n          return false;\n        }\n        if (iterators.hasOwnProperty(node.type)) {\n          if (iterators[node.type](node, context, walkNode, walkReducer)) {\n            return true;\n          }\n        }\n        if (leave.call(context, node, item, list) === breakWalk) {\n          return true;\n        }\n        return false;\n      }\n      var walkReducer = function walkReducer(ret, data, item, list) {\n        return ret || walkNode(data, item, list);\n      };\n      var enter = noop;\n      var leave = noop;\n      var iterators = iteratorsNatural;\n      var context = {\n        break: breakWalk,\n        skip: skipNode,\n        root: root,\n        stylesheet: null,\n        atrule: null,\n        atrulePrelude: null,\n        rule: null,\n        selector: null,\n        block: null,\n        declaration: null,\n        function: null\n      };\n      if (typeof options === 'function') {\n        enter = options;\n      } else if (options) {\n        enter = ensureFunction(options.enter);\n        leave = ensureFunction(options.leave);\n        if (options.reverse) {\n          iterators = iteratorsReverse;\n        }\n        if (options.visit) {\n          if (fastTraversalIteratorsNatural.hasOwnProperty(options.visit)) {\n            iterators = options.reverse ? fastTraversalIteratorsReverse[options.visit] : fastTraversalIteratorsNatural[options.visit];\n          } else if (!types.hasOwnProperty(options.visit)) {\n            throw new Error('Bad value `' + options.visit + '` for `visit` option (should be: ' + Object.keys(types).join(', ') + ')');\n          }\n          enter = invokeForType(enter, options.visit);\n          leave = invokeForType(leave, options.visit);\n        }\n      }\n      if (enter === noop && leave === noop) {\n        throw new Error('Neither `enter` nor `leave` walker handler is set or both aren\\'t a function');\n      }\n      walkNode(root);\n    };\n    walk.break = breakWalk;\n    walk.skip = skipNode;\n    walk.find = function (ast, fn) {\n      var found = null;\n      walk(ast, function (node, item, list) {\n        if (fn.call(this, node, item, list)) {\n          found = node;\n          return breakWalk;\n        }\n      });\n      return found;\n    };\n    walk.findLast = function (ast, fn) {\n      var found = null;\n      walk(ast, {\n        reverse: true,\n        enter: function enter(node, item, list) {\n          if (fn.call(this, node, item, list)) {\n            found = node;\n            return breakWalk;\n          }\n        }\n      });\n      return found;\n    };\n    walk.findAll = function (ast, fn) {\n      var found = [];\n      walk(ast, function (node, item, list) {\n        if (fn.call(this, node, item, list)) {\n          found.push(node);\n        }\n      });\n      return found;\n    };\n    return walk;\n  };\n});","lineCount":232,"map":[[2,2,1,0],[2,6,1,4,"hasOwnProperty"],[2,20,1,18],[2,23,1,21,"Object"],[2,29,1,27],[2,30,1,28,"prototype"],[2,39,1,37],[2,40,1,38,"hasOwnProperty"],[2,54,1,52],[3,2,2,0],[3,6,2,4,"noop"],[3,10,2,8],[3,13,2,11],[3,22,2,4,"noop"],[3,26,2,8,"noop"],[3,27,2,8],[3,29,2,22],[3,30,2,23],[3,31,2,24],[4,2,4,0],[4,11,4,9,"ensureFunction"],[4,25,4,23,"ensureFunction"],[4,26,4,24,"value"],[4,31,4,29],[4,33,4,31],[5,4,5,4],[5,11,5,11],[5,18,5,18,"value"],[5,23,5,23],[5,28,5,28],[5,38,5,38],[5,41,5,41,"value"],[5,46,5,46],[5,49,5,49,"noop"],[5,53,5,53],[6,2,6,0],[7,2,8,0],[7,11,8,9,"invokeForType"],[7,24,8,22,"invokeForType"],[7,25,8,23,"fn"],[7,27,8,25],[7,29,8,27,"type"],[7,33,8,31],[7,35,8,33],[8,4,9,4],[8,11,9,11],[8,21,9,20,"node"],[8,25,9,24],[8,27,9,26,"item"],[8,31,9,30],[8,33,9,32,"list"],[8,37,9,36],[8,39,9,38],[9,6,10,8],[9,10,10,12,"node"],[9,14,10,16],[9,15,10,17,"type"],[9,19,10,21],[9,24,10,26,"type"],[9,28,10,30],[9,30,10,32],[10,8,11,12,"fn"],[10,10,11,14],[10,11,11,15,"call"],[10,15,11,19],[10,16,11,20],[10,20,11,24],[10,22,11,26,"node"],[10,26,11,30],[10,28,11,32,"item"],[10,32,11,36],[10,34,11,38,"list"],[10,38,11,42],[10,39,11,43],[11,6,12,8],[12,4,13,4],[12,5,13,5],[13,2,14,0],[14,2,16,0],[14,11,16,9,"getWalkersFromStructure"],[14,34,16,32,"getWalkersFromStructure"],[14,35,16,33,"name"],[14,39,16,37],[14,41,16,39,"nodeType"],[14,49,16,47],[14,51,16,49],[15,4,17,4],[15,8,17,8,"structure"],[15,17,17,17],[15,20,17,20,"nodeType"],[15,28,17,28],[15,29,17,29,"structure"],[15,38,17,38],[16,4,18,4],[16,8,18,8,"walkers"],[16,15,18,15],[16,18,18,18],[16,20,18,20],[17,4,20,4],[17,9,20,9],[17,13,20,13,"key"],[17,16,20,16],[17,20,20,20,"structure"],[17,29,20,29],[17,31,20,31],[18,6,21,8],[18,10,21,12,"hasOwnProperty"],[18,24,21,26],[18,25,21,27,"call"],[18,29,21,31],[18,30,21,32,"structure"],[18,39,21,41],[18,41,21,43,"key"],[18,44,21,46],[18,45,21,47],[18,50,21,52],[18,55,21,57],[18,57,21,59],[19,8,22,12],[20,6,23,8],[21,6,25,8],[21,10,25,12,"fieldTypes"],[21,20,25,22],[21,23,25,25,"structure"],[21,32,25,34],[21,33,25,35,"key"],[21,36,25,38],[21,37,25,39],[22,6,26,8],[22,10,26,12,"walker"],[22,16,26,18],[22,19,26,21],[23,8,27,12,"name"],[23,12,27,16],[23,14,27,18,"key"],[23,17,27,21],[24,8,28,12,"type"],[24,12,28,16],[24,14,28,18],[24,19,28,23],[25,8,29,12,"nullable"],[25,16,29,20],[25,18,29,22],[26,6,30,8],[26,7,30,9],[27,6,32,8],[27,10,32,12],[27,11,32,13,"Array"],[27,16,32,18],[27,17,32,19,"isArray"],[27,24,32,26],[27,25,32,27,"structure"],[27,34,32,36],[27,35,32,37,"key"],[27,38,32,40],[27,39,32,41],[27,40,32,42],[27,42,32,44],[28,8,33,12,"fieldTypes"],[28,18,33,22],[28,21,33,25],[28,22,33,26,"structure"],[28,31,33,35],[28,32,33,36,"key"],[28,35,33,39],[28,36,33,40],[28,37,33,41],[29,6,34,8],[30,6,36,8],[30,11,36,13],[30,15,36,17,"i"],[30,16,36,18],[30,19,36,21],[30,20,36,22],[30,22,36,24,"i"],[30,23,36,25],[30,26,36,28,"fieldTypes"],[30,36,36,38],[30,37,36,39,"length"],[30,43,36,45],[30,45,36,47,"i"],[30,46,36,48],[30,48,36,50],[30,50,36,52],[31,8,37,12],[31,12,37,16,"fieldType"],[31,21,37,25],[31,24,37,28,"fieldTypes"],[31,34,37,38],[31,35,37,39,"i"],[31,36,37,40],[31,37,37,41],[32,8,38,12],[32,12,38,16,"fieldType"],[32,21,38,25],[32,26,38,30],[32,30,38,34],[32,32,38,36],[33,10,39,16,"walker"],[33,16,39,22],[33,17,39,23,"nullable"],[33,25,39,31],[33,28,39,34],[33,32,39,38],[34,8,40,12],[34,9,40,13],[34,15,40,19],[34,19,40,23],[34,26,40,30,"fieldType"],[34,35,40,39],[34,40,40,44],[34,48,40,52],[34,50,40,54],[35,10,41,16,"walker"],[35,16,41,22],[35,17,41,23,"type"],[35,21,41,27],[35,24,41,30],[35,30,41,36],[36,8,42,12],[36,9,42,13],[36,15,42,19],[36,19,42,23,"Array"],[36,24,42,28],[36,25,42,29,"isArray"],[36,32,42,36],[36,33,42,37,"fieldType"],[36,42,42,46],[36,43,42,47],[36,45,42,49],[37,10,43,16,"walker"],[37,16,43,22],[37,17,43,23,"type"],[37,21,43,27],[37,24,43,30],[37,30,43,36],[38,8,44,12],[39,6,45,8],[40,6,47,8],[40,10,47,12,"walker"],[40,16,47,18],[40,17,47,19,"type"],[40,21,47,23],[40,23,47,25],[41,8,48,12,"walkers"],[41,15,48,19],[41,16,48,20,"push"],[41,20,48,24],[41,21,48,25,"walker"],[41,27,48,31],[41,28,48,32],[42,6,49,8],[43,4,50,4],[44,4,52,4],[44,8,52,8,"walkers"],[44,15,52,15],[44,16,52,16,"length"],[44,22,52,22],[44,24,52,24],[45,6,53,8],[45,13,53,15],[46,8,54,12,"context"],[46,15,54,19],[46,17,54,21,"nodeType"],[46,25,54,29],[46,26,54,30,"walkContext"],[46,37,54,41],[47,8,55,12,"fields"],[47,14,55,18],[47,16,55,20,"walkers"],[48,6,56,8],[48,7,56,9],[49,4,57,4],[50,4,59,4],[50,11,59,11],[50,15,59,15],[51,2,60,0],[52,2,62,0],[52,11,62,9,"getTypesFromConfig"],[52,29,62,27,"getTypesFromConfig"],[52,30,62,28,"config"],[52,36,62,34],[52,38,62,36],[53,4,63,4],[53,8,63,8,"types"],[53,13,63,13],[53,16,63,16],[53,17,63,17],[53,18,63,18],[54,4,65,4],[54,9,65,9],[54,13,65,13,"name"],[54,17,65,17],[54,21,65,21,"config"],[54,27,65,27],[54,28,65,28,"node"],[54,32,65,32],[54,34,65,34],[55,6,66,8],[55,10,66,12,"hasOwnProperty"],[55,24,66,26],[55,25,66,27,"call"],[55,29,66,31],[55,30,66,32,"config"],[55,36,66,38],[55,37,66,39,"node"],[55,41,66,43],[55,43,66,45,"name"],[55,47,66,49],[55,48,66,50],[55,50,66,52],[56,8,67,12],[56,12,67,16,"nodeType"],[56,20,67,24],[56,23,67,27,"config"],[56,29,67,33],[56,30,67,34,"node"],[56,34,67,38],[56,35,67,39,"name"],[56,39,67,43],[56,40,67,44],[57,8,69,12],[57,12,69,16],[57,13,69,17,"nodeType"],[57,21,69,25],[57,22,69,26,"structure"],[57,31,69,35],[57,33,69,37],[58,10,70,16],[58,16,70,22],[58,20,70,26,"Error"],[58,25,70,31],[58,26,70,32],[58,57,70,63],[58,60,70,66,"name"],[58,64,70,70],[58,67,70,73],[58,91,70,97],[58,92,70,98],[59,8,71,12],[60,8,73,12,"types"],[60,13,73,17],[60,14,73,18,"name"],[60,18,73,22],[60,19,73,23],[60,22,73,26,"getWalkersFromStructure"],[60,45,73,49],[60,46,73,50,"name"],[60,50,73,54],[60,52,73,56,"nodeType"],[60,60,73,64],[60,61,73,65],[61,6,74,8],[62,4,75,4],[63,4,77,4],[63,11,77,11,"types"],[63,16,77,16],[64,2,78,0],[65,2,80,0],[65,11,80,9,"createTypeIterator"],[65,29,80,27,"createTypeIterator"],[65,30,80,28,"config"],[65,36,80,34],[65,38,80,36,"reverse"],[65,45,80,43],[65,47,80,45],[66,4,81,4],[66,8,81,8,"fields"],[66,14,81,14],[66,17,81,17,"config"],[66,23,81,23],[66,24,81,24,"fields"],[66,30,81,30],[66,31,81,31,"slice"],[66,36,81,36],[66,37,81,37],[66,38,81,38],[67,4,82,4],[67,8,82,8,"contextName"],[67,19,82,19],[67,22,82,22,"config"],[67,28,82,28],[67,29,82,29,"context"],[67,36,82,36],[68,4,83,4],[68,8,83,8,"useContext"],[68,18,83,18],[68,21,83,21],[68,28,83,28,"contextName"],[68,39,83,39],[68,44,83,44],[68,52,83,52],[69,4,85,4],[69,8,85,8,"reverse"],[69,15,85,15],[69,17,85,17],[70,6,86,8,"fields"],[70,12,86,14],[70,13,86,15,"reverse"],[70,20,86,22],[70,21,86,23],[70,22,86,24],[71,4,87,4],[72,4,89,4],[72,11,89,11],[72,21,89,20,"node"],[72,25,89,24],[72,27,89,26,"context"],[72,34,89,33],[72,36,89,35,"walk"],[72,40,89,39],[72,42,89,41,"walkReducer"],[72,53,89,52],[72,55,89,54],[73,6,90,8],[73,10,90,12,"prevContextValue"],[73,26,90,28],[74,6,92,8],[74,10,92,12,"useContext"],[74,20,92,22],[74,22,92,24],[75,8,93,12,"prevContextValue"],[75,24,93,28],[75,27,93,31,"context"],[75,34,93,38],[75,35,93,39,"contextName"],[75,46,93,50],[75,47,93,51],[76,8,94,12,"context"],[76,15,94,19],[76,16,94,20,"contextName"],[76,27,94,31],[76,28,94,32],[76,31,94,35,"node"],[76,35,94,39],[77,6,95,8],[78,6,97,8],[78,11,97,13],[78,15,97,17,"i"],[78,16,97,18],[78,19,97,21],[78,20,97,22],[78,22,97,24,"i"],[78,23,97,25],[78,26,97,28,"fields"],[78,32,97,34],[78,33,97,35,"length"],[78,39,97,41],[78,41,97,43,"i"],[78,42,97,44],[78,44,97,46],[78,46,97,48],[79,8,98,12],[79,12,98,16,"field"],[79,17,98,21],[79,20,98,24,"fields"],[79,26,98,30],[79,27,98,31,"i"],[79,28,98,32],[79,29,98,33],[80,8,99,12],[80,12,99,16,"ref"],[80,15,99,19],[80,18,99,22,"node"],[80,22,99,26],[80,23,99,27,"field"],[80,28,99,32],[80,29,99,33,"name"],[80,33,99,37],[80,34,99,38],[81,8,101,12],[81,12,101,16],[81,13,101,17,"field"],[81,18,101,22],[81,19,101,23,"nullable"],[81,27,101,31],[81,31,101,35,"ref"],[81,34,101,38],[81,36,101,40],[82,10,102,16],[82,14,102,20,"field"],[82,19,102,25],[82,20,102,26,"type"],[82,24,102,30],[82,29,102,35],[82,35,102,41],[82,37,102,43],[83,12,103,20],[83,16,103,24,"breakWalk"],[83,25,103,33],[83,28,103,36,"reverse"],[83,35,103,43],[83,38,104,26,"ref"],[83,41,104,29],[83,42,104,30,"reduceRight"],[83,53,104,41],[83,54,104,42,"walkReducer"],[83,65,104,53],[83,67,104,55],[83,72,104,60],[83,73,104,61],[83,76,105,26,"ref"],[83,79,105,29],[83,80,105,30,"reduce"],[83,86,105,36],[83,87,105,37,"walkReducer"],[83,98,105,48],[83,100,105,50],[83,105,105,55],[83,106,105,56],[84,12,107,20],[84,16,107,24,"breakWalk"],[84,25,107,33],[84,27,107,35],[85,14,108,24],[85,21,108,31],[85,25,108,35],[86,12,109,20],[87,10,110,16],[87,11,110,17],[87,17,110,23],[87,21,110,27,"walk"],[87,25,110,31],[87,26,110,32,"ref"],[87,29,110,35],[87,30,110,36],[87,32,110,38],[88,12,111,20],[88,19,111,27],[88,23,111,31],[89,10,112,16],[90,8,113,12],[91,6,114,8],[92,6,116,8],[92,10,116,12,"useContext"],[92,20,116,22],[92,22,116,24],[93,8,117,12,"context"],[93,15,117,19],[93,16,117,20,"contextName"],[93,27,117,31],[93,28,117,32],[93,31,117,35,"prevContextValue"],[93,47,117,51],[94,6,118,8],[95,4,119,4],[95,5,119,5],[96,2,120,0],[97,2,122,0],[97,11,122,9,"createFastTraveralMap"],[97,32,122,30,"createFastTraveralMap"],[97,33,122,31,"iterators"],[97,42,122,40],[97,44,122,42],[98,4,123,4],[98,11,123,11],[99,6,124,8,"Atrule"],[99,12,124,14],[99,14,124,16],[100,8,125,12,"StyleSheet"],[100,18,125,22],[100,20,125,24,"iterators"],[100,29,125,33],[100,30,125,34,"StyleSheet"],[100,40,125,44],[101,8,126,12,"Atrule"],[101,14,126,18],[101,16,126,20,"iterators"],[101,25,126,29],[101,26,126,30,"Atrule"],[101,32,126,36],[102,8,127,12,"Rule"],[102,12,127,16],[102,14,127,18,"iterators"],[102,23,127,27],[102,24,127,28,"Rule"],[102,28,127,32],[103,8,128,12,"Block"],[103,13,128,17],[103,15,128,19,"iterators"],[103,24,128,28],[103,25,128,29,"Block"],[104,6,129,8],[104,7,129,9],[105,6,130,8,"Rule"],[105,10,130,12],[105,12,130,14],[106,8,131,12,"StyleSheet"],[106,18,131,22],[106,20,131,24,"iterators"],[106,29,131,33],[106,30,131,34,"StyleSheet"],[106,40,131,44],[107,8,132,12,"Atrule"],[107,14,132,18],[107,16,132,20,"iterators"],[107,25,132,29],[107,26,132,30,"Atrule"],[107,32,132,36],[108,8,133,12,"Rule"],[108,12,133,16],[108,14,133,18,"iterators"],[108,23,133,27],[108,24,133,28,"Rule"],[108,28,133,32],[109,8,134,12,"Block"],[109,13,134,17],[109,15,134,19,"iterators"],[109,24,134,28],[109,25,134,29,"Block"],[110,6,135,8],[110,7,135,9],[111,6,136,8,"Declaration"],[111,17,136,19],[111,19,136,21],[112,8,137,12,"StyleSheet"],[112,18,137,22],[112,20,137,24,"iterators"],[112,29,137,33],[112,30,137,34,"StyleSheet"],[112,40,137,44],[113,8,138,12,"Atrule"],[113,14,138,18],[113,16,138,20,"iterators"],[113,25,138,29],[113,26,138,30,"Atrule"],[113,32,138,36],[114,8,139,12,"Rule"],[114,12,139,16],[114,14,139,18,"iterators"],[114,23,139,27],[114,24,139,28,"Rule"],[114,28,139,32],[115,8,140,12,"Block"],[115,13,140,17],[115,15,140,19,"iterators"],[115,24,140,28],[115,25,140,29,"Block"],[115,30,140,34],[116,8,141,12,"DeclarationList"],[116,23,141,27],[116,25,141,29,"iterators"],[116,34,141,38],[116,35,141,39,"DeclarationList"],[117,6,142,8],[118,4,143,4],[118,5,143,5],[119,2,144,0],[120,2,146,0,"module"],[120,8,146,6],[120,9,146,7,"exports"],[120,16,146,14],[120,19,146,17],[120,28,146,26,"createWalker"],[120,40,146,38,"createWalker"],[120,41,146,39,"config"],[120,47,146,45],[120,49,146,47],[121,4,147,4],[121,8,147,8,"types"],[121,13,147,13],[121,16,147,16,"getTypesFromConfig"],[121,34,147,34],[121,35,147,35,"config"],[121,41,147,41],[121,42,147,42],[122,4,148,4],[122,8,148,8,"iteratorsNatural"],[122,24,148,24],[122,27,148,27],[122,28,148,28],[122,29,148,29],[123,4,149,4],[123,8,149,8,"iteratorsReverse"],[123,24,149,24],[123,27,149,27],[123,28,149,28],[123,29,149,29],[124,4,150,4],[124,8,150,8,"breakWalk"],[124,17,150,17],[124,20,150,20,"Symbol"],[124,26,150,26],[124,27,150,27],[124,39,150,39],[124,40,150,40],[125,4,151,4],[125,8,151,8,"skipNode"],[125,16,151,16],[125,19,151,19,"Symbol"],[125,25,151,25],[125,26,151,26],[125,37,151,37],[125,38,151,38],[126,4,153,4],[126,9,153,9],[126,13,153,13,"name"],[126,17,153,17],[126,21,153,21,"types"],[126,26,153,26],[126,28,153,28],[127,6,154,8],[127,10,154,12,"hasOwnProperty"],[127,24,154,26],[127,25,154,27,"call"],[127,29,154,31],[127,30,154,32,"types"],[127,35,154,37],[127,37,154,39,"name"],[127,41,154,43],[127,42,154,44],[127,46,154,48,"types"],[127,51,154,53],[127,52,154,54,"name"],[127,56,154,58],[127,57,154,59],[127,62,154,64],[127,66,154,68],[127,68,154,70],[128,8,155,12,"iteratorsNatural"],[128,24,155,28],[128,25,155,29,"name"],[128,29,155,33],[128,30,155,34],[128,33,155,37,"createTypeIterator"],[128,51,155,55],[128,52,155,56,"types"],[128,57,155,61],[128,58,155,62,"name"],[128,62,155,66],[128,63,155,67],[128,65,155,69],[128,70,155,74],[128,71,155,75],[129,8,156,12,"iteratorsReverse"],[129,24,156,28],[129,25,156,29,"name"],[129,29,156,33],[129,30,156,34],[129,33,156,37,"createTypeIterator"],[129,51,156,55],[129,52,156,56,"types"],[129,57,156,61],[129,58,156,62,"name"],[129,62,156,66],[129,63,156,67],[129,65,156,69],[129,69,156,73],[129,70,156,74],[130,6,157,8],[131,4,158,4],[132,4,160,4],[132,8,160,8,"fastTraversalIteratorsNatural"],[132,37,160,37],[132,40,160,40,"createFastTraveralMap"],[132,61,160,61],[132,62,160,62,"iteratorsNatural"],[132,78,160,78],[132,79,160,79],[133,4,161,4],[133,8,161,8,"fastTraversalIteratorsReverse"],[133,37,161,37],[133,40,161,40,"createFastTraveralMap"],[133,61,161,61],[133,62,161,62,"iteratorsReverse"],[133,78,161,78],[133,79,161,79],[134,4,163,4],[134,8,163,8,"walk"],[134,12,163,12],[134,15,163,15],[134,24,163,8,"walk"],[134,28,163,12,"walk"],[134,29,163,24,"root"],[134,33,163,28],[134,35,163,30,"options"],[134,42,163,37],[134,44,163,39],[135,6,164,8],[135,15,164,17,"walkNode"],[135,23,164,25,"walkNode"],[135,24,164,26,"node"],[135,28,164,30],[135,30,164,32,"item"],[135,34,164,36],[135,36,164,38,"list"],[135,40,164,42],[135,42,164,44],[136,8,165,12],[136,12,165,16,"enterRet"],[136,20,165,24],[136,23,165,27,"enter"],[136,28,165,32],[136,29,165,33,"call"],[136,33,165,37],[136,34,165,38,"context"],[136,41,165,45],[136,43,165,47,"node"],[136,47,165,51],[136,49,165,53,"item"],[136,53,165,57],[136,55,165,59,"list"],[136,59,165,63],[136,60,165,64],[137,8,167,12],[137,12,167,16,"enterRet"],[137,20,167,24],[137,25,167,29,"breakWalk"],[137,34,167,38],[137,36,167,40],[138,10,168,16],[139,10,169,16],[139,17,169,23],[139,21,169,27],[140,8,170,12],[141,8,172,12],[141,12,172,16,"enterRet"],[141,20,172,24],[141,25,172,29,"skipNode"],[141,33,172,37],[141,35,172,39],[142,10,173,16],[142,17,173,23],[142,22,173,28],[143,8,174,12],[144,8,176,12],[144,12,176,16,"iterators"],[144,21,176,25],[144,22,176,26,"hasOwnProperty"],[144,36,176,40],[144,37,176,41,"node"],[144,41,176,45],[144,42,176,46,"type"],[144,46,176,50],[144,47,176,51],[144,49,176,53],[145,10,177,16],[145,14,177,20,"iterators"],[145,23,177,29],[145,24,177,30,"node"],[145,28,177,34],[145,29,177,35,"type"],[145,33,177,39],[145,34,177,40],[145,35,177,41,"node"],[145,39,177,45],[145,41,177,47,"context"],[145,48,177,54],[145,50,177,56,"walkNode"],[145,58,177,64],[145,60,177,66,"walkReducer"],[145,71,177,77],[145,72,177,78],[145,74,177,80],[146,12,178,20],[146,19,178,27],[146,23,178,31],[147,10,179,16],[148,8,180,12],[149,8,182,12],[149,12,182,16,"leave"],[149,17,182,21],[149,18,182,22,"call"],[149,22,182,26],[149,23,182,27,"context"],[149,30,182,34],[149,32,182,36,"node"],[149,36,182,40],[149,38,182,42,"item"],[149,42,182,46],[149,44,182,48,"list"],[149,48,182,52],[149,49,182,53],[149,54,182,58,"breakWalk"],[149,63,182,67],[149,65,182,69],[150,10,183,16],[150,17,183,23],[150,21,183,27],[151,8,184,12],[152,8,186,12],[152,15,186,19],[152,20,186,24],[153,6,187,8],[154,6,189,8],[154,10,189,12,"walkReducer"],[154,21,189,23],[154,24,189,26],[154,33,189,12,"walkReducer"],[154,44,189,23,"walkReducer"],[154,45,189,27,"ret"],[154,48,189,30],[154,50,189,32,"data"],[154,54,189,36],[154,56,189,38,"item"],[154,60,189,42],[154,62,189,44,"list"],[154,66,189,48],[155,8,189,48],[155,15,189,53,"ret"],[155,18,189,56],[155,22,189,60,"walkNode"],[155,30,189,68],[155,31,189,69,"data"],[155,35,189,73],[155,37,189,75,"item"],[155,41,189,79],[155,43,189,81,"list"],[155,47,189,85],[155,48,189,86],[156,6,189,86],[157,6,190,8],[157,10,190,12,"enter"],[157,15,190,17],[157,18,190,20,"noop"],[157,22,190,24],[158,6,191,8],[158,10,191,12,"leave"],[158,15,191,17],[158,18,191,20,"noop"],[158,22,191,24],[159,6,192,8],[159,10,192,12,"iterators"],[159,19,192,21],[159,22,192,24,"iteratorsNatural"],[159,38,192,40],[160,6,193,8],[160,10,193,12,"context"],[160,17,193,19],[160,20,193,22],[161,8,194,12,"break"],[161,13,194,17],[161,15,194,19,"breakWalk"],[161,24,194,28],[162,8,195,12,"skip"],[162,12,195,16],[162,14,195,18,"skipNode"],[162,22,195,26],[163,8,197,12,"root"],[163,12,197,16],[163,14,197,18,"root"],[163,18,197,22],[164,8,198,12,"stylesheet"],[164,18,198,22],[164,20,198,24],[164,24,198,28],[165,8,199,12,"atrule"],[165,14,199,18],[165,16,199,20],[165,20,199,24],[166,8,200,12,"atrulePrelude"],[166,21,200,25],[166,23,200,27],[166,27,200,31],[167,8,201,12,"rule"],[167,12,201,16],[167,14,201,18],[167,18,201,22],[168,8,202,12,"selector"],[168,16,202,20],[168,18,202,22],[168,22,202,26],[169,8,203,12,"block"],[169,13,203,17],[169,15,203,19],[169,19,203,23],[170,8,204,12,"declaration"],[170,19,204,23],[170,21,204,25],[170,25,204,29],[171,8,205,12,"function"],[171,16,205,20],[171,18,205,22],[172,6,206,8],[172,7,206,9],[173,6,208,8],[173,10,208,12],[173,17,208,19,"options"],[173,24,208,26],[173,29,208,31],[173,39,208,41],[173,41,208,43],[174,8,209,12,"enter"],[174,13,209,17],[174,16,209,20,"options"],[174,23,209,27],[175,6,210,8],[175,7,210,9],[175,13,210,15],[175,17,210,19,"options"],[175,24,210,26],[175,26,210,28],[176,8,211,12,"enter"],[176,13,211,17],[176,16,211,20,"ensureFunction"],[176,30,211,34],[176,31,211,35,"options"],[176,38,211,42],[176,39,211,43,"enter"],[176,44,211,48],[176,45,211,49],[177,8,212,12,"leave"],[177,13,212,17],[177,16,212,20,"ensureFunction"],[177,30,212,34],[177,31,212,35,"options"],[177,38,212,42],[177,39,212,43,"leave"],[177,44,212,48],[177,45,212,49],[178,8,214,12],[178,12,214,16,"options"],[178,19,214,23],[178,20,214,24,"reverse"],[178,27,214,31],[178,29,214,33],[179,10,215,16,"iterators"],[179,19,215,25],[179,22,215,28,"iteratorsReverse"],[179,38,215,44],[180,8,216,12],[181,8,218,12],[181,12,218,16,"options"],[181,19,218,23],[181,20,218,24,"visit"],[181,25,218,29],[181,27,218,31],[182,10,219,16],[182,14,219,20,"fastTraversalIteratorsNatural"],[182,43,219,49],[182,44,219,50,"hasOwnProperty"],[182,58,219,64],[182,59,219,65,"options"],[182,66,219,72],[182,67,219,73,"visit"],[182,72,219,78],[182,73,219,79],[182,75,219,81],[183,12,220,20,"iterators"],[183,21,220,29],[183,24,220,32,"options"],[183,31,220,39],[183,32,220,40,"reverse"],[183,39,220,47],[183,42,221,26,"fastTraversalIteratorsReverse"],[183,71,221,55],[183,72,221,56,"options"],[183,79,221,63],[183,80,221,64,"visit"],[183,85,221,69],[183,86,221,70],[183,89,222,26,"fastTraversalIteratorsNatural"],[183,118,222,55],[183,119,222,56,"options"],[183,126,222,63],[183,127,222,64,"visit"],[183,132,222,69],[183,133,222,70],[184,10,223,16],[184,11,223,17],[184,17,223,23],[184,21,223,27],[184,22,223,28,"types"],[184,27,223,33],[184,28,223,34,"hasOwnProperty"],[184,42,223,48],[184,43,223,49,"options"],[184,50,223,56],[184,51,223,57,"visit"],[184,56,223,62],[184,57,223,63],[184,59,223,65],[185,12,224,20],[185,18,224,26],[185,22,224,30,"Error"],[185,27,224,35],[185,28,224,36],[185,41,224,49],[185,44,224,52,"options"],[185,51,224,59],[185,52,224,60,"visit"],[185,57,224,65],[185,60,224,68],[185,95,224,103],[185,98,224,106,"Object"],[185,104,224,112],[185,105,224,113,"keys"],[185,109,224,117],[185,110,224,118,"types"],[185,115,224,123],[185,116,224,124],[185,117,224,125,"join"],[185,121,224,129],[185,122,224,130],[185,126,224,134],[185,127,224,135],[185,130,224,138],[185,133,224,141],[185,134,224,142],[186,10,225,16],[187,10,227,16,"enter"],[187,15,227,21],[187,18,227,24,"invokeForType"],[187,31,227,37],[187,32,227,38,"enter"],[187,37,227,43],[187,39,227,45,"options"],[187,46,227,52],[187,47,227,53,"visit"],[187,52,227,58],[187,53,227,59],[188,10,228,16,"leave"],[188,15,228,21],[188,18,228,24,"invokeForType"],[188,31,228,37],[188,32,228,38,"leave"],[188,37,228,43],[188,39,228,45,"options"],[188,46,228,52],[188,47,228,53,"visit"],[188,52,228,58],[188,53,228,59],[189,8,229,12],[190,6,230,8],[191,6,232,8],[191,10,232,12,"enter"],[191,15,232,17],[191,20,232,22,"noop"],[191,24,232,26],[191,28,232,30,"leave"],[191,33,232,35],[191,38,232,40,"noop"],[191,42,232,44],[191,44,232,46],[192,8,233,12],[192,14,233,18],[192,18,233,22,"Error"],[192,23,233,27],[192,24,233,28],[192,102,233,106],[192,103,233,107],[193,6,234,8],[194,6,236,8,"walkNode"],[194,14,236,16],[194,15,236,17,"root"],[194,19,236,21],[194,20,236,22],[195,4,237,4],[195,5,237,5],[196,4,239,4,"walk"],[196,8,239,8],[196,9,239,9,"break"],[196,14,239,14],[196,17,239,17,"breakWalk"],[196,26,239,26],[197,4,240,4,"walk"],[197,8,240,8],[197,9,240,9,"skip"],[197,13,240,13],[197,16,240,16,"skipNode"],[197,24,240,24],[198,4,242,4,"walk"],[198,8,242,8],[198,9,242,9,"find"],[198,13,242,13],[198,16,242,16],[198,26,242,25,"ast"],[198,29,242,28],[198,31,242,30,"fn"],[198,33,242,32],[198,35,242,34],[199,6,243,8],[199,10,243,12,"found"],[199,15,243,17],[199,18,243,20],[199,22,243,24],[200,6,245,8,"walk"],[200,10,245,12],[200,11,245,13,"ast"],[200,14,245,16],[200,16,245,18],[200,26,245,27,"node"],[200,30,245,31],[200,32,245,33,"item"],[200,36,245,37],[200,38,245,39,"list"],[200,42,245,43],[200,44,245,45],[201,8,246,12],[201,12,246,16,"fn"],[201,14,246,18],[201,15,246,19,"call"],[201,19,246,23],[201,20,246,24],[201,24,246,28],[201,26,246,30,"node"],[201,30,246,34],[201,32,246,36,"item"],[201,36,246,40],[201,38,246,42,"list"],[201,42,246,46],[201,43,246,47],[201,45,246,49],[202,10,247,16,"found"],[202,15,247,21],[202,18,247,24,"node"],[202,22,247,28],[203,10,248,16],[203,17,248,23,"breakWalk"],[203,26,248,32],[204,8,249,12],[205,6,250,8],[205,7,250,9],[205,8,250,10],[206,6,252,8],[206,13,252,15,"found"],[206,18,252,20],[207,4,253,4],[207,5,253,5],[208,4,255,4,"walk"],[208,8,255,8],[208,9,255,9,"findLast"],[208,17,255,17],[208,20,255,20],[208,30,255,29,"ast"],[208,33,255,32],[208,35,255,34,"fn"],[208,37,255,36],[208,39,255,38],[209,6,256,8],[209,10,256,12,"found"],[209,15,256,17],[209,18,256,20],[209,22,256,24],[210,6,258,8,"walk"],[210,10,258,12],[210,11,258,13,"ast"],[210,14,258,16],[210,16,258,18],[211,8,259,12,"reverse"],[211,15,259,19],[211,17,259,21],[211,21,259,25],[212,8,260,12,"enter"],[212,13,260,17],[212,15,260,19],[212,24,260,12,"enter"],[212,29,260,17,"enter"],[212,30,260,28,"node"],[212,34,260,32],[212,36,260,34,"item"],[212,40,260,38],[212,42,260,40,"list"],[212,46,260,44],[212,48,260,46],[213,10,261,16],[213,14,261,20,"fn"],[213,16,261,22],[213,17,261,23,"call"],[213,21,261,27],[213,22,261,28],[213,26,261,32],[213,28,261,34,"node"],[213,32,261,38],[213,34,261,40,"item"],[213,38,261,44],[213,40,261,46,"list"],[213,44,261,50],[213,45,261,51],[213,47,261,53],[214,12,262,20,"found"],[214,17,262,25],[214,20,262,28,"node"],[214,24,262,32],[215,12,263,20],[215,19,263,27,"breakWalk"],[215,28,263,36],[216,10,264,16],[217,8,265,12],[218,6,266,8],[218,7,266,9],[218,8,266,10],[219,6,268,8],[219,13,268,15,"found"],[219,18,268,20],[220,4,269,4],[220,5,269,5],[221,4,271,4,"walk"],[221,8,271,8],[221,9,271,9,"findAll"],[221,16,271,16],[221,19,271,19],[221,29,271,28,"ast"],[221,32,271,31],[221,34,271,33,"fn"],[221,36,271,35],[221,38,271,37],[222,6,272,8],[222,10,272,12,"found"],[222,15,272,17],[222,18,272,20],[222,20,272,22],[223,6,274,8,"walk"],[223,10,274,12],[223,11,274,13,"ast"],[223,14,274,16],[223,16,274,18],[223,26,274,27,"node"],[223,30,274,31],[223,32,274,33,"item"],[223,36,274,37],[223,38,274,39,"list"],[223,42,274,43],[223,44,274,45],[224,8,275,12],[224,12,275,16,"fn"],[224,14,275,18],[224,15,275,19,"call"],[224,19,275,23],[224,20,275,24],[224,24,275,28],[224,26,275,30,"node"],[224,30,275,34],[224,32,275,36,"item"],[224,36,275,40],[224,38,275,42,"list"],[224,42,275,46],[224,43,275,47],[224,45,275,49],[225,10,276,16,"found"],[225,15,276,21],[225,16,276,22,"push"],[225,20,276,26],[225,21,276,27,"node"],[225,25,276,31],[225,26,276,32],[226,8,277,12],[227,6,278,8],[227,7,278,9],[227,8,278,10],[228,6,280,8],[228,13,280,15,"found"],[228,18,280,20],[229,4,281,4],[229,5,281,5],[230,4,283,4],[230,11,283,11,"walk"],[230,15,283,15],[231,2,284,0],[231,3,284,1],[232,0,284,2],[232,3]],"functionMap":{"names":["<global>","noop","ensureFunction","invokeForType","<anonymous>","getWalkersFromStructure","getTypesFromConfig","createTypeIterator","createFastTraveralMap","createWalker","walk","walkNode","walkReducer","walk.find","walk$argument_1","walk.findLast","walk$argument_1.enter","walk.findAll"],"mappings":"AAA;WCC,aD;AEE;CFE;AGE;WCC;KDI;CHC;AKE;CL4C;AME;CNgB;AOE;WHS;KG8B;CPC;AQE;CRsB;iBSE;eCiB;QCC;SDuB;0BEE,4DF;KDgD;gBIK;kBCG;SDK;KJG;oBME;mBCK;aDK;KNI;mBQE;kBHG;SGI;KRG;CTG"}},"type":"js/module"}]}