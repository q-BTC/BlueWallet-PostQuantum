{"dependencies":[{"name":"bn.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}},{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}}],"key":"h/AEHknS6KAnKragIfqHUjGvuRM="}},{"name":"miller-rabin","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":18,"index":216},"end":{"line":7,"column":41,"index":239}}],"key":"JlFjwCagvLq0EqEIeqQmt6qe9mA="}},{"name":"randombytes","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":18,"index":18},"end":{"line":1,"column":40,"index":40}}],"key":"HRppB8l92kfLq10/yqHPiqGAuBY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  module.exports = findPrime;\n  findPrime.simpleSieve = simpleSieve;\n  findPrime.fermatTest = fermatTest;\n  var TWENTYFOUR = new (_$$_REQUIRE(_dependencyMap[0], \"bn.js\"))(24);\n  var millerRabin = new (_$$_REQUIRE(_dependencyMap[1], \"miller-rabin\"))();\n  var ONE = new (_$$_REQUIRE(_dependencyMap[0], \"bn.js\"))(1);\n  var TWO = new (_$$_REQUIRE(_dependencyMap[0], \"bn.js\"))(2);\n  var FIVE = new (_$$_REQUIRE(_dependencyMap[0], \"bn.js\"))(5);\n  var SIXTEEN = new (_$$_REQUIRE(_dependencyMap[0], \"bn.js\"))(16);\n  var EIGHT = new (_$$_REQUIRE(_dependencyMap[0], \"bn.js\"))(8);\n  var TEN = new (_$$_REQUIRE(_dependencyMap[0], \"bn.js\"))(10);\n  var THREE = new (_$$_REQUIRE(_dependencyMap[0], \"bn.js\"))(3);\n  var SEVEN = new (_$$_REQUIRE(_dependencyMap[0], \"bn.js\"))(7);\n  var ELEVEN = new (_$$_REQUIRE(_dependencyMap[0], \"bn.js\"))(11);\n  var FOUR = new (_$$_REQUIRE(_dependencyMap[0], \"bn.js\"))(4);\n  var TWELVE = new (_$$_REQUIRE(_dependencyMap[0], \"bn.js\"))(12);\n  var primes = null;\n  function _getPrimes() {\n    if (primes !== null) return primes;\n    var limit = 0x100000;\n    var res = [];\n    res[0] = 2;\n    for (var i = 1, k = 3; k < limit; k += 2) {\n      var sqrt = Math.ceil(Math.sqrt(k));\n      for (var j = 0; j < i && res[j] <= sqrt; j++) if (k % res[j] === 0) break;\n      if (i !== j && res[j] <= sqrt) continue;\n      res[i++] = k;\n    }\n    primes = res;\n    return res;\n  }\n  function simpleSieve(p) {\n    var primes = _getPrimes();\n    for (var i = 0; i < primes.length; i++) if (p.modn(primes[i]) === 0) {\n      if (p.cmpn(primes[i]) === 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }\n  function fermatTest(p) {\n    var red = _$$_REQUIRE(_dependencyMap[0], \"bn.js\").mont(p);\n    return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;\n  }\n  function findPrime(bits, gen) {\n    if (bits < 16) {\n      // this is what openssl does\n      if (gen === 2 || gen === 5) {\n        return new (_$$_REQUIRE(_dependencyMap[0], \"bn.js\"))([0x8c, 0x7b]);\n      } else {\n        return new (_$$_REQUIRE(_dependencyMap[0], \"bn.js\"))([0x8c, 0x27]);\n      }\n    }\n    gen = new (_$$_REQUIRE(_dependencyMap[0], \"bn.js\"))(gen);\n    var num, n2;\n    while (true) {\n      num = new (_$$_REQUIRE(_dependencyMap[0], \"bn.js\"))(_$$_REQUIRE(_dependencyMap[2], \"randombytes\")(Math.ceil(bits / 8)));\n      while (num.bitLength() > bits) {\n        num.ishrn(1);\n      }\n      if (num.isEven()) {\n        num.iadd(ONE);\n      }\n      if (!num.testn(1)) {\n        num.iadd(TWO);\n      }\n      if (!gen.cmp(TWO)) {\n        while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {\n          num.iadd(FOUR);\n        }\n      } else if (!gen.cmp(FIVE)) {\n        while (num.mod(TEN).cmp(THREE)) {\n          num.iadd(FOUR);\n        }\n      }\n      n2 = num.shrn(1);\n      if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {\n        return num;\n      }\n    }\n  }\n});","lineCount":85,"map":[[2,2,2,0,"module"],[2,8,2,6],[2,9,2,7,"exports"],[2,16,2,14],[2,19,2,17,"findPrime"],[2,28,2,26],[3,2,3,0,"findPrime"],[3,11,3,9],[3,12,3,10,"simpleSieve"],[3,23,3,21],[3,26,3,24,"simpleSieve"],[3,37,3,35],[4,2,4,0,"findPrime"],[4,11,4,9],[4,12,4,10,"fermatTest"],[4,22,4,20],[4,25,4,23,"fermatTest"],[4,35,4,33],[5,2,6,0],[5,6,6,4,"TWENTYFOUR"],[5,16,6,14],[5,19,6,17],[5,24,6,17,"_$$_REQUIRE"],[5,35,6,17],[5,36,6,17,"_dependencyMap"],[5,50,6,17],[5,65,6,24],[5,67,6,26],[5,68,6,27],[6,2,8,0],[6,6,8,4,"millerRabin"],[6,17,8,15],[6,20,8,18],[6,25,8,18,"_$$_REQUIRE"],[6,36,8,18],[6,37,8,18,"_dependencyMap"],[6,51,8,18],[6,73,8,34],[6,74,8,35],[7,2,9,0],[7,6,9,4,"ONE"],[7,9,9,7],[7,12,9,10],[7,17,9,10,"_$$_REQUIRE"],[7,28,9,10],[7,29,9,10,"_dependencyMap"],[7,43,9,10],[7,58,9,17],[7,59,9,18],[7,60,9,19],[8,2,10,0],[8,6,10,4,"TWO"],[8,9,10,7],[8,12,10,10],[8,17,10,10,"_$$_REQUIRE"],[8,28,10,10],[8,29,10,10,"_dependencyMap"],[8,43,10,10],[8,58,10,17],[8,59,10,18],[8,60,10,19],[9,2,11,0],[9,6,11,4,"FIVE"],[9,10,11,8],[9,13,11,11],[9,18,11,11,"_$$_REQUIRE"],[9,29,11,11],[9,30,11,11,"_dependencyMap"],[9,44,11,11],[9,59,11,18],[9,60,11,19],[9,61,11,20],[10,2,12,0],[10,6,12,4,"SIXTEEN"],[10,13,12,11],[10,16,12,14],[10,21,12,14,"_$$_REQUIRE"],[10,32,12,14],[10,33,12,14,"_dependencyMap"],[10,47,12,14],[10,62,12,21],[10,64,12,23],[10,65,12,24],[11,2,13,0],[11,6,13,4,"EIGHT"],[11,11,13,9],[11,14,13,12],[11,19,13,12,"_$$_REQUIRE"],[11,30,13,12],[11,31,13,12,"_dependencyMap"],[11,45,13,12],[11,60,13,19],[11,61,13,20],[11,62,13,21],[12,2,14,0],[12,6,14,4,"TEN"],[12,9,14,7],[12,12,14,10],[12,17,14,10,"_$$_REQUIRE"],[12,28,14,10],[12,29,14,10,"_dependencyMap"],[12,43,14,10],[12,58,14,17],[12,60,14,19],[12,61,14,20],[13,2,15,0],[13,6,15,4,"THREE"],[13,11,15,9],[13,14,15,12],[13,19,15,12,"_$$_REQUIRE"],[13,30,15,12],[13,31,15,12,"_dependencyMap"],[13,45,15,12],[13,60,15,19],[13,61,15,20],[13,62,15,21],[14,2,16,0],[14,6,16,4,"SEVEN"],[14,11,16,9],[14,14,16,12],[14,19,16,12,"_$$_REQUIRE"],[14,30,16,12],[14,31,16,12,"_dependencyMap"],[14,45,16,12],[14,60,16,19],[14,61,16,20],[14,62,16,21],[15,2,17,0],[15,6,17,4,"ELEVEN"],[15,12,17,10],[15,15,17,13],[15,20,17,13,"_$$_REQUIRE"],[15,31,17,13],[15,32,17,13,"_dependencyMap"],[15,46,17,13],[15,61,17,20],[15,63,17,22],[15,64,17,23],[16,2,18,0],[16,6,18,4,"FOUR"],[16,10,18,8],[16,13,18,11],[16,18,18,11,"_$$_REQUIRE"],[16,29,18,11],[16,30,18,11,"_dependencyMap"],[16,44,18,11],[16,59,18,18],[16,60,18,19],[16,61,18,20],[17,2,19,0],[17,6,19,4,"TWELVE"],[17,12,19,10],[17,15,19,13],[17,20,19,13,"_$$_REQUIRE"],[17,31,19,13],[17,32,19,13,"_dependencyMap"],[17,46,19,13],[17,61,19,20],[17,63,19,22],[17,64,19,23],[18,2,20,0],[18,6,20,4,"primes"],[18,12,20,10],[18,15,20,13],[18,19,20,17],[19,2,22,0],[19,11,22,9,"_getPrimes"],[19,21,22,19,"_getPrimes"],[19,22,22,19],[19,24,22,22],[20,4,23,2],[20,8,23,6,"primes"],[20,14,23,12],[20,19,23,17],[20,23,23,21],[20,25,24,4],[20,32,24,11,"primes"],[20,38,24,17],[21,4,26,2],[21,8,26,6,"limit"],[21,13,26,11],[21,16,26,14],[21,24,26,22],[22,4,27,2],[22,8,27,6,"res"],[22,11,27,9],[22,14,27,12],[22,16,27,14],[23,4,28,2,"res"],[23,7,28,5],[23,8,28,6],[23,9,28,7],[23,10,28,8],[23,13,28,11],[23,14,28,12],[24,4,29,2],[24,9,29,7],[24,13,29,11,"i"],[24,14,29,12],[24,17,29,15],[24,18,29,16],[24,20,29,18,"k"],[24,21,29,19],[24,24,29,22],[24,25,29,23],[24,27,29,25,"k"],[24,28,29,26],[24,31,29,29,"limit"],[24,36,29,34],[24,38,29,36,"k"],[24,39,29,37],[24,43,29,41],[24,44,29,42],[24,46,29,44],[25,6,30,4],[25,10,30,8,"sqrt"],[25,14,30,12],[25,17,30,15,"Math"],[25,21,30,19],[25,22,30,20,"ceil"],[25,26,30,24],[25,27,30,25,"Math"],[25,31,30,29],[25,32,30,30,"sqrt"],[25,36,30,34],[25,37,30,35,"k"],[25,38,30,36],[25,39,30,37],[25,40,30,38],[26,6,31,4],[26,11,31,9],[26,15,31,13,"j"],[26,16,31,14],[26,19,31,17],[26,20,31,18],[26,22,31,20,"j"],[26,23,31,21],[26,26,31,24,"i"],[26,27,31,25],[26,31,31,29,"res"],[26,34,31,32],[26,35,31,33,"j"],[26,36,31,34],[26,37,31,35],[26,41,31,39,"sqrt"],[26,45,31,43],[26,47,31,45,"j"],[26,48,31,46],[26,50,31,48],[26,52,32,6],[26,56,32,10,"k"],[26,57,32,11],[26,60,32,14,"res"],[26,63,32,17],[26,64,32,18,"j"],[26,65,32,19],[26,66,32,20],[26,71,32,25],[26,72,32,26],[26,74,33,8],[27,6,35,4],[27,10,35,8,"i"],[27,11,35,9],[27,16,35,14,"j"],[27,17,35,15],[27,21,35,19,"res"],[27,24,35,22],[27,25,35,23,"j"],[27,26,35,24],[27,27,35,25],[27,31,35,29,"sqrt"],[27,35,35,33],[27,37,36,6],[28,6,38,4,"res"],[28,9,38,7],[28,10,38,8,"i"],[28,11,38,9],[28,13,38,11],[28,14,38,12],[28,17,38,15,"k"],[28,18,38,16],[29,4,39,2],[30,4,40,2,"primes"],[30,10,40,8],[30,13,40,11,"res"],[30,16,40,14],[31,4,41,2],[31,11,41,9,"res"],[31,14,41,12],[32,2,42,0],[33,2,44,0],[33,11,44,9,"simpleSieve"],[33,22,44,20,"simpleSieve"],[33,23,44,21,"p"],[33,24,44,22],[33,26,44,24],[34,4,45,2],[34,8,45,6,"primes"],[34,14,45,12],[34,17,45,15,"_getPrimes"],[34,27,45,25],[34,28,45,26],[34,29,45,27],[35,4,47,2],[35,9,47,7],[35,13,47,11,"i"],[35,14,47,12],[35,17,47,15],[35,18,47,16],[35,20,47,18,"i"],[35,21,47,19],[35,24,47,22,"primes"],[35,30,47,28],[35,31,47,29,"length"],[35,37,47,35],[35,39,47,37,"i"],[35,40,47,38],[35,42,47,40],[35,44,48,4],[35,48,48,8,"p"],[35,49,48,9],[35,50,48,10,"modn"],[35,54,48,14],[35,55,48,15,"primes"],[35,61,48,21],[35,62,48,22,"i"],[35,63,48,23],[35,64,48,24],[35,65,48,25],[35,70,48,30],[35,71,48,31],[35,73,48,33],[36,6,49,6],[36,10,49,10,"p"],[36,11,49,11],[36,12,49,12,"cmpn"],[36,16,49,16],[36,17,49,17,"primes"],[36,23,49,23],[36,24,49,24,"i"],[36,25,49,25],[36,26,49,26],[36,27,49,27],[36,32,49,32],[36,33,49,33],[36,35,49,35],[37,8,50,8],[37,15,50,15],[37,19,50,19],[38,6,51,6],[38,7,51,7],[38,13,51,13],[39,8,52,8],[39,15,52,15],[39,20,52,20],[40,6,53,6],[41,4,54,4],[42,4,56,2],[42,11,56,9],[42,15,56,13],[43,2,57,0],[44,2,59,0],[44,11,59,9,"fermatTest"],[44,21,59,19,"fermatTest"],[44,22,59,20,"p"],[44,23,59,21],[44,25,59,23],[45,4,60,2],[45,8,60,6,"red"],[45,11,60,9],[45,14,60,12,"_$$_REQUIRE"],[45,25,60,12],[45,26,60,12,"_dependencyMap"],[45,40,60,12],[45,54,60,15,"mont"],[45,58,60,19],[45,59,60,20,"p"],[45,60,60,21],[45,61,60,22],[46,4,61,2],[46,11,61,9,"TWO"],[46,14,61,12],[46,15,61,13,"toRed"],[46,20,61,18],[46,21,61,19,"red"],[46,24,61,22],[46,25,61,23],[46,26,61,24,"redPow"],[46,32,61,30],[46,33,61,31,"p"],[46,34,61,32],[46,35,61,33,"subn"],[46,39,61,37],[46,40,61,38],[46,41,61,39],[46,42,61,40],[46,43,61,41],[46,44,61,42,"fromRed"],[46,51,61,49],[46,52,61,50],[46,53,61,51],[46,54,61,52,"cmpn"],[46,58,61,56],[46,59,61,57],[46,60,61,58],[46,61,61,59],[46,66,61,64],[46,67,61,65],[47,2,62,0],[48,2,64,0],[48,11,64,9,"findPrime"],[48,20,64,18,"findPrime"],[48,21,64,19,"bits"],[48,25,64,23],[48,27,64,25,"gen"],[48,30,64,28],[48,32,64,30],[49,4,65,2],[49,8,65,6,"bits"],[49,12,65,10],[49,15,65,13],[49,17,65,15],[49,19,65,17],[50,6,66,4],[51,6,67,4],[51,10,67,8,"gen"],[51,13,67,11],[51,18,67,16],[51,19,67,17],[51,23,67,21,"gen"],[51,26,67,24],[51,31,67,29],[51,32,67,30],[51,34,67,32],[52,8,68,6],[52,15,68,13],[52,20,68,13,"_$$_REQUIRE"],[52,31,68,13],[52,32,68,13,"_dependencyMap"],[52,46,68,13],[52,61,68,20],[52,62,68,21],[52,66,68,25],[52,68,68,27],[52,72,68,31],[52,73,68,32],[52,74,68,33],[53,6,69,4],[53,7,69,5],[53,13,69,11],[54,8,70,6],[54,15,70,13],[54,20,70,13,"_$$_REQUIRE"],[54,31,70,13],[54,32,70,13,"_dependencyMap"],[54,46,70,13],[54,61,70,20],[54,62,70,21],[54,66,70,25],[54,68,70,27],[54,72,70,31],[54,73,70,32],[54,74,70,33],[55,6,71,4],[56,4,72,2],[57,4,73,2,"gen"],[57,7,73,5],[57,10,73,8],[57,15,73,8,"_$$_REQUIRE"],[57,26,73,8],[57,27,73,8,"_dependencyMap"],[57,41,73,8],[57,56,73,15,"gen"],[57,59,73,18],[57,60,73,19],[58,4,75,2],[58,8,75,6,"num"],[58,11,75,9],[58,13,75,11,"n2"],[58,15,75,13],[59,4,77,2],[59,11,77,9],[59,15,77,13],[59,17,77,15],[60,6,78,4,"num"],[60,9,78,7],[60,12,78,10],[60,17,78,10,"_$$_REQUIRE"],[60,28,78,10],[60,29,78,10,"_dependencyMap"],[60,43,78,10],[60,58,78,17,"_$$_REQUIRE"],[60,69,78,17],[60,70,78,17,"_dependencyMap"],[60,84,78,17],[60,104,78,29,"Math"],[60,108,78,33],[60,109,78,34,"ceil"],[60,113,78,38],[60,114,78,39,"bits"],[60,118,78,43],[60,121,78,46],[60,122,78,47],[60,123,78,48],[60,124,78,49],[60,125,78,50],[61,6,79,4],[61,13,79,11,"num"],[61,16,79,14],[61,17,79,15,"bitLength"],[61,26,79,24],[61,27,79,25],[61,28,79,26],[61,31,79,29,"bits"],[61,35,79,33],[61,37,79,35],[62,8,80,6,"num"],[62,11,80,9],[62,12,80,10,"ishrn"],[62,17,80,15],[62,18,80,16],[62,19,80,17],[62,20,80,18],[63,6,81,4],[64,6,82,4],[64,10,82,8,"num"],[64,13,82,11],[64,14,82,12,"isEven"],[64,20,82,18],[64,21,82,19],[64,22,82,20],[64,24,82,22],[65,8,83,6,"num"],[65,11,83,9],[65,12,83,10,"iadd"],[65,16,83,14],[65,17,83,15,"ONE"],[65,20,83,18],[65,21,83,19],[66,6,84,4],[67,6,85,4],[67,10,85,8],[67,11,85,9,"num"],[67,14,85,12],[67,15,85,13,"testn"],[67,20,85,18],[67,21,85,19],[67,22,85,20],[67,23,85,21],[67,25,85,23],[68,8,86,6,"num"],[68,11,86,9],[68,12,86,10,"iadd"],[68,16,86,14],[68,17,86,15,"TWO"],[68,20,86,18],[68,21,86,19],[69,6,87,4],[70,6,88,4],[70,10,88,8],[70,11,88,9,"gen"],[70,14,88,12],[70,15,88,13,"cmp"],[70,18,88,16],[70,19,88,17,"TWO"],[70,22,88,20],[70,23,88,21],[70,25,88,23],[71,8,89,6],[71,15,89,13,"num"],[71,18,89,16],[71,19,89,17,"mod"],[71,22,89,20],[71,23,89,21,"TWENTYFOUR"],[71,33,89,31],[71,34,89,32],[71,35,89,33,"cmp"],[71,38,89,36],[71,39,89,37,"ELEVEN"],[71,45,89,43],[71,46,89,44],[71,48,89,46],[72,10,90,8,"num"],[72,13,90,11],[72,14,90,12,"iadd"],[72,18,90,16],[72,19,90,17,"FOUR"],[72,23,90,21],[72,24,90,22],[73,8,91,6],[74,6,92,4],[74,7,92,5],[74,13,92,11],[74,17,92,15],[74,18,92,16,"gen"],[74,21,92,19],[74,22,92,20,"cmp"],[74,25,92,23],[74,26,92,24,"FIVE"],[74,30,92,28],[74,31,92,29],[74,33,92,31],[75,8,93,6],[75,15,93,13,"num"],[75,18,93,16],[75,19,93,17,"mod"],[75,22,93,20],[75,23,93,21,"TEN"],[75,26,93,24],[75,27,93,25],[75,28,93,26,"cmp"],[75,31,93,29],[75,32,93,30,"THREE"],[75,37,93,35],[75,38,93,36],[75,40,93,38],[76,10,94,8,"num"],[76,13,94,11],[76,14,94,12,"iadd"],[76,18,94,16],[76,19,94,17,"FOUR"],[76,23,94,21],[76,24,94,22],[77,8,95,6],[78,6,96,4],[79,6,97,4,"n2"],[79,8,97,6],[79,11,97,9,"num"],[79,14,97,12],[79,15,97,13,"shrn"],[79,19,97,17],[79,20,97,18],[79,21,97,19],[79,22,97,20],[80,6,98,4],[80,10,98,8,"simpleSieve"],[80,21,98,19],[80,22,98,20,"n2"],[80,24,98,22],[80,25,98,23],[80,29,98,27,"simpleSieve"],[80,40,98,38],[80,41,98,39,"num"],[80,44,98,42],[80,45,98,43],[80,49,99,6,"fermatTest"],[80,59,99,16],[80,60,99,17,"n2"],[80,62,99,19],[80,63,99,20],[80,67,99,24,"fermatTest"],[80,77,99,34],[80,78,99,35,"num"],[80,81,99,38],[80,82,99,39],[80,86,100,6,"millerRabin"],[80,97,100,17],[80,98,100,18,"test"],[80,102,100,22],[80,103,100,23,"n2"],[80,105,100,25],[80,106,100,26],[80,110,100,30,"millerRabin"],[80,121,100,41],[80,122,100,42,"test"],[80,126,100,46],[80,127,100,47,"num"],[80,130,100,50],[80,131,100,51],[80,133,100,53],[81,8,101,6],[81,15,101,13,"num"],[81,18,101,16],[82,6,102,4],[83,4,103,2],[84,2,105,0],[85,0,105,1],[85,3]],"functionMap":{"names":["<global>","_getPrimes","simpleSieve","fermatTest","findPrime"],"mappings":"AAA;ACqB;CDoB;AEE;CFa;AGE;CHG;AIE;CJyC"}},"type":"js/module"}]}