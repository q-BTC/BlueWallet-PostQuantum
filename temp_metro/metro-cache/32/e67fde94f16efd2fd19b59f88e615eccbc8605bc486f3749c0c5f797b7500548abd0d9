{"dependencies":[{"name":"@babel/runtime/helpers/objectWithoutProperties","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":368,"column":37,"index":15810}}],"key":"fnQVLibs90KHiJ7y48fLgPWzDS0="}},{"name":"../assert","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}},{"start":{"line":21,"column":17,"index":967},"end":{"line":21,"column":37,"index":987}}],"key":"EqNBW+769mc/j/kMnDe9BBrECKc="}},{"name":"../errors","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":23,"column":17,"index":1043},"end":{"line":23,"column":37,"index":1063}},{"start":{"line":23,"column":17,"index":1043},"end":{"line":23,"column":37,"index":1063}},{"start":{"line":23,"column":17,"index":1043},"end":{"line":23,"column":37,"index":1063}},{"start":{"line":23,"column":17,"index":1043},"end":{"line":23,"column":37,"index":1063}},{"start":{"line":23,"column":17,"index":1043},"end":{"line":23,"column":37,"index":1063}},{"start":{"line":23,"column":17,"index":1043},"end":{"line":23,"column":37,"index":1063}},{"start":{"line":23,"column":17,"index":1043},"end":{"line":23,"column":37,"index":1063}}],"key":"iI2wDtrGlKjO3ksFzW75fbTNGvA="}},{"name":"../flags","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":22,"column":16,"index":1005},"end":{"line":22,"column":35,"index":1024}}],"key":"B6Is7lFtGxSvIC/Ij9cC4cOxXNw="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  ////////////////////////////////////////////////////////////////////////////\n  //\n  // Copyright 2022 Realm Inc.\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  // http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n  //\n  ////////////////////////////////////////////////////////////////////////////\n  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/objectWithoutProperties\");\n  var _excluded = [\"name\"];\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.extractGeneric = exports.normalizePropertySchema = exports.normalizeObjectSchema = exports.normalizeRealmSchema = void 0;\n  var PRIMITIVE_TYPES = new Set([\"bool\", \"int\", \"float\", \"double\", \"decimal128\", \"objectId\", \"string\", \"data\", \"date\", \"mixed\", \"uuid\"]);\n  var COLLECTION_TYPES = new Set([\"list\", \"dictionary\", \"set\"]);\n  var COLLECTION_SHORTHAND_TO_NAME = {\n    \"[]\": \"list\",\n    \"{}\": \"dictionary\",\n    \"<>\": \"set\"\n  };\n  var COLLECTION_SUFFIX_LENGTH = \"[]\".length;\n  var PRESENTATION_TYPES = new Set([\"counter\"]);\n  var PRESENTATION_TO_REALM_TYPE = {\n    counter: \"int\"\n  };\n  var OPTIONAL_MARKER = \"?\";\n  function isPrimitive(type) {\n    return PRIMITIVE_TYPES.has(type);\n  }\n  function isCollection(type) {\n    return COLLECTION_TYPES.has(type);\n  }\n  function isPresentationType(type) {\n    return PRESENTATION_TYPES.has(type);\n  }\n  function isUserDefined(type) {\n    return !!type && !(isPrimitive(type) || isCollection(type) || type === \"object\" || type === \"linkingObjects\");\n  }\n  /**\n   * Transform a validated user-provided Realm schema into its canonical form.\n   */\n  function normalizeRealmSchema(realmSchema) {\n    return realmSchema.map(normalizeObjectSchema);\n  }\n  exports.normalizeRealmSchema = normalizeRealmSchema;\n  /**\n   * Transform a validated user-provided object schema into its canonical form.\n   */\n  function normalizeObjectSchema(arg) {\n    if (typeof arg === \"function\") {\n      (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(arg.schema, function () {\n        return new (_$$_REQUIRE(_dependencyMap[2], \"../errors\").SchemaParseError)(\"A static schema must be specified on this class.\");\n      });\n      var objectSchema = normalizeObjectSchema(arg.schema);\n      objectSchema.ctor = arg;\n      return objectSchema;\n    }\n    // ---- THIS IF BLOCK HAS NOT YET BEEN REWRITTEN ----\n    // TODO: Determine if we still want to support this (should show warning to users of future deprecation)\n    if (Array.isArray(arg.properties)) {\n      if (_$$_REQUIRE(_dependencyMap[3], \"../flags\").flags.ALLOW_VALUES_ARRAYS) {\n        return normalizeObjectSchema(Object.assign({}, arg, {\n          // Build the PropertiesTypes object\n          properties: Object.fromEntries(arg.properties.map(function (_ref) {\n            var name = _ref.name,\n              rest = _objectWithoutProperties(_ref, _excluded);\n            return [name, rest];\n          }))\n        }));\n      }\n      throw new Error(\"Array of properties are no longer supported. Use an object instead.\");\n    }\n    // --------------------------------------------------\n    var name = arg.name,\n      primaryKey = arg.primaryKey,\n      asymmetric = arg.asymmetric,\n      embedded = arg.embedded,\n      properties = arg.properties;\n    (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(name.length > 0, objectError(\"\", \"'name' must be specified.\"));\n    var primaryKeyFieldIsMissing = primaryKey && !Object.prototype.hasOwnProperty.call(properties, primaryKey);\n    (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(!primaryKeyFieldIsMissing, objectError(name, `'${primaryKey}' is set as the primary key field but was not found in 'properties'.`));\n    return {\n      name: name,\n      primaryKey: primaryKey,\n      asymmetric: !!asymmetric,\n      embedded: !!embedded,\n      properties: normalizePropertySchemas(name, properties, primaryKey)\n    };\n  }\n  exports.normalizeObjectSchema = normalizeObjectSchema;\n  /**\n   * Transform user-provided property schemas into their canonical forms.\n   */\n  function normalizePropertySchemas(objectName, propertiesSchemas, primaryKey) {\n    var normalizedSchemas = {};\n    for (var propertyName in propertiesSchemas) {\n      normalizedSchemas[propertyName] = normalizePropertySchema({\n        objectName: objectName,\n        propertyName: propertyName,\n        propertySchema: propertiesSchemas[propertyName],\n        isPrimaryKey: primaryKey === propertyName\n      });\n    }\n    return normalizedSchemas;\n  }\n  /**\n   * Transform a user-provided property schema into its canonical form.\n   */\n  function normalizePropertySchema(info) {\n    var isUsingShorthand = typeof info.propertySchema === \"string\";\n    var normalizedSchema = isUsingShorthand ? normalizePropertySchemaShorthand(info) : normalizePropertySchemaObject(info);\n    return normalizedSchema;\n  }\n  exports.normalizePropertySchema = normalizePropertySchema;\n  /**\n   * Transform a validated user-provided property schema that is using\n   * the shorthand string notation into its canonical form.\n   */\n  function normalizePropertySchemaShorthand(info) {\n    var propertySchema = info.propertySchema;\n    (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(propertySchema.length > 0, propError(info, \"The type must be specified.\"));\n    var type = \"\";\n    var objectType;\n    var presentation;\n    var optional;\n    if (hasCollectionSuffix(propertySchema)) {\n      var suffix = propertySchema.substring(propertySchema.length - COLLECTION_SUFFIX_LENGTH);\n      type = COLLECTION_SHORTHAND_TO_NAME[suffix];\n      propertySchema = propertySchema.substring(0, propertySchema.length - COLLECTION_SUFFIX_LENGTH);\n      (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(propertySchema.length > 0, propError(info, `The element type must be specified (Example: 'int${suffix}')`));\n      var isNestedCollection = hasCollectionSuffix(propertySchema);\n      (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(!isNestedCollection, propError(info, \"Nested collections are not supported.\"));\n    }\n    if (propertySchema.endsWith(OPTIONAL_MARKER)) {\n      optional = true;\n      propertySchema = propertySchema.substring(0, propertySchema.length - OPTIONAL_MARKER.length);\n      (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(propertySchema.length > 0, propError(info, \"The type must be specified. (Examples: 'int?' and 'int?[]')\"));\n      var usingOptionalOnCollection = hasCollectionSuffix(propertySchema);\n      (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(!usingOptionalOnCollection, propError(info, \"Collections cannot be optional. To allow elements of the collection to be optional, use '?' after the element type. (Examples: 'int?[]', 'int?{}', and 'int?<>')\"));\n    }\n    if (isPresentationType(propertySchema)) {\n      presentation = propertySchema;\n      propertySchema = PRESENTATION_TO_REALM_TYPE[propertySchema];\n    }\n    if (isPrimitive(propertySchema)) {\n      if (isCollection(type)) {\n        objectType = propertySchema;\n      } else {\n        type = propertySchema;\n      }\n    } else if (isCollection(propertySchema)) {\n      throw new (_$$_REQUIRE(_dependencyMap[2], \"../errors\").PropertySchemaParseError)(`Cannot use the collection name ${propertySchema}. (Examples: 'int[]' (list), 'int{}' (dictionary), and 'int<>' (set))`, info);\n    } else if (propertySchema === \"object\") {\n      throw new (_$$_REQUIRE(_dependencyMap[2], \"../errors\").PropertySchemaParseError)(\"To define a relationship, use either 'MyObjectType' or { type: 'object', objectType: 'MyObjectType' }\", info);\n    } else if (propertySchema === \"linkingObjects\") {\n      throw new (_$$_REQUIRE(_dependencyMap[2], \"../errors\").PropertySchemaParseError)(\"To define an inverse relationship, use { type: 'linkingObjects', objectType: 'MyObjectType', property: 'myObjectTypesProperty' }\", info);\n    } else {\n      // User-defined types\n      objectType = propertySchema;\n      if (!isCollection(type)) {\n        type = \"object\";\n      }\n    }\n    switch (presentation) {\n      case \"counter\":\n        // If `type` is not an int at this point, a collection shorthand is used.\n        (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(type === \"int\", propError(info, \"Counters cannot be used in collections.\"));\n        break;\n      default:\n        break;\n    }\n    if (isAlwaysOptional(type, objectType)) {\n      optional = true;\n    } else if (isNeverOptional(type, objectType)) {\n      (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(!optional, propError(info, \"User-defined types in lists and sets are always non-optional and cannot be made optional. Remove '?' or change the type.\"));\n      optional = false;\n    }\n    var normalizedSchema = {\n      name: info.propertyName,\n      type: type,\n      optional: !!optional,\n      indexed: !!info.isPrimaryKey,\n      mapTo: info.propertyName\n    };\n    // Add optional properties only if defined (tests expect no 'undefined' properties)\n    if (objectType !== undefined) normalizedSchema.objectType = objectType;\n    if (presentation !== undefined) normalizedSchema.presentation = presentation;\n    return normalizedSchema;\n  }\n  /**\n   * Transform a validated user-provided property schema that is using\n   * the relaxed object notation into its canonical form.\n   */\n  function normalizePropertySchemaObject(info) {\n    var propertySchema = info.propertySchema;\n    var type = propertySchema.type,\n      objectType = propertySchema.objectType,\n      presentation = propertySchema.presentation,\n      property = propertySchema.property,\n      defaultValue = propertySchema.default;\n    var optional = propertySchema.optional,\n      indexed = propertySchema.indexed;\n    (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(type.length > 0, propError(info, \"'type' must be specified.\"));\n    assertNotUsingShorthand(type, info);\n    assertNotUsingShorthand(objectType, info);\n    if (isPrimitive(type)) {\n      (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(objectType === undefined, propError(info, `'objectType' cannot be defined when 'type' is '${type}'.`));\n    } else if (isCollection(type)) {\n      (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(isPrimitive(objectType) || isUserDefined(objectType), propError(info, `A ${type} must contain only primitive or user-defined types specified through 'objectType'.`));\n    } else if (type === \"object\") {\n      (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(isUserDefined(objectType), propError(info, \"A user-defined type must be specified through 'objectType'.\"));\n    } else if (type === \"linkingObjects\") {\n      (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(isUserDefined(objectType), propError(info, \"A user-defined type must be specified through 'objectType'.\"));\n      (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(!!property, propError(info, \"The linking object's property name must be specified through 'property'.\"));\n    } else {\n      // 'type' is a user-defined type\n      throw new (_$$_REQUIRE(_dependencyMap[2], \"../errors\").PropertySchemaParseError)(`If you meant to define a relationship, use { type: 'object', objectType: '${type}' } or { type: 'linkingObjects', objectType: '${type}', property: 'The ${type} property' }`, info);\n    }\n    if (type !== \"linkingObjects\") {\n      (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(property === undefined, propError(info, \"'property' can only be specified if 'type' is 'linkingObjects'.\"));\n    }\n    switch (presentation) {\n      case \"counter\":\n        (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(type === \"int\", propError(info, \"Counters can only be used when 'type' is 'int'.\"));\n        break;\n      default:\n        break;\n    }\n    if (isAlwaysOptional(type, objectType)) {\n      var displayed = type === \"mixed\" || objectType === \"mixed\" ? \"'mixed' types\" : \"User-defined types as standalone objects and in dictionaries\";\n      (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(optional !== false, propError(info, `${displayed} are always optional and cannot be made non-optional.`));\n      optional = true;\n    } else if (isNeverOptional(type, objectType)) {\n      (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(optional !== true, propError(info, \"User-defined types in lists and sets are always non-optional and cannot be made optional.\"));\n      optional = false;\n    }\n    if (info.isPrimaryKey) {\n      (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(indexed !== false, propError(info, \"Primary keys must always be indexed.\"));\n      (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(indexed !== \"full-text\", propError(info, \"Primary keys cannot be full-text indexed.\"));\n      (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(presentation !== \"counter\", propError(info, \"Counters cannot be primary keys.\"));\n      indexed = true;\n    }\n    var normalizedSchema = {\n      name: info.propertyName,\n      type: type,\n      optional: !!optional,\n      indexed: indexed !== undefined ? indexed : false,\n      mapTo: propertySchema.mapTo || info.propertyName\n    };\n    // Add optional properties only if defined (tests expect no 'undefined' properties)\n    if (objectType !== undefined) normalizedSchema.objectType = objectType;\n    if (presentation !== undefined) normalizedSchema.presentation = presentation;\n    if (property !== undefined) normalizedSchema.property = property;\n    if (defaultValue !== undefined) normalizedSchema.default = defaultValue;\n    return normalizedSchema;\n  }\n  /**\n   * Determine whether a property always is implicitly optional (nullable).\n   */\n  function isAlwaysOptional(type, objectType) {\n    return type === \"mixed\" || objectType === \"mixed\" || type === \"object\" || type === \"dictionary\" && isUserDefined(objectType);\n  }\n  /**\n   * Determine whether a property always is implicitly non-optional (non-nullable).\n   */\n  function isNeverOptional(type, objectType) {\n    return (type === \"list\" || type === \"set\" || type === \"linkingObjects\") && isUserDefined(objectType);\n  }\n  /**\n   * Determine whether a string ends with a shorthand collection ('[]' or '{}' or '<>').\n   */\n  function hasCollectionSuffix(input) {\n    var suffix = input.substring(input.length - COLLECTION_SUFFIX_LENGTH);\n    return !!COLLECTION_SHORTHAND_TO_NAME[suffix];\n  }\n  /**\n   * Assert that shorthand notation is not being used.\n   */\n  function assertNotUsingShorthand(input, info) {\n    if (!input) {\n      return;\n    }\n    var shorthands = extractShorthands(input);\n    var message = `Cannot use shorthand '${shorthands.all.join(\"' and '\")}' in 'type' ` + \"or 'objectType' when defining property objects.\";\n    if (shorthands.presentationType) {\n      message += ` To use presentation types such as '${shorthands.presentationType}', use the field 'presentation'.`;\n    }\n    (0, _$$_REQUIRE(_dependencyMap[1], \"../assert\").assert)(shorthands.all.length === 0, propError(info, message));\n  }\n  /**\n   * Extract the shorthand markers used in the input.\n   */\n  function extractShorthands(input) {\n    var shorthands = {\n      all: []\n    };\n    if (hasCollectionSuffix(input)) {\n      shorthands.all.push(input.substring(input.length - COLLECTION_SUFFIX_LENGTH));\n      input = input.substring(0, input.length - COLLECTION_SUFFIX_LENGTH);\n    }\n    if (input.endsWith(OPTIONAL_MARKER)) {\n      shorthands.all.push(OPTIONAL_MARKER);\n      input = input.substring(0, input.length - OPTIONAL_MARKER.length);\n    }\n    if (isPresentationType(input)) {\n      shorthands.all.push(input);\n      shorthands.presentationType = input;\n    }\n    return shorthands;\n  }\n  /**\n   * Generate an error caused by an invalid property schema.\n   * (Returning a function rather than the Error itself in order\n   * for the Error to only be created if needed.)\n   */\n  function propError(info, message) {\n    return function () {\n      return new (_$$_REQUIRE(_dependencyMap[2], \"../errors\").PropertySchemaParseError)(message, info);\n    };\n  }\n  /**\n   * Generate an error caused by an invalid object schema.\n   */\n  function objectError(objectName, message) {\n    return function () {\n      return new (_$$_REQUIRE(_dependencyMap[2], \"../errors\").ObjectSchemaParseError)(message, {\n        objectName: objectName\n      });\n    };\n  }\n  /**\n   * Extract the base type and the type argument from a generic string notation.\n   */\n  function extractGeneric(type) {\n    var bracketStart = type.indexOf(\"<\");\n    var bracketEnd = type.indexOf(\">\", bracketStart);\n    if (bracketStart === -1) {\n      return {\n        typeBase: type\n      };\n    }\n    return {\n      typeBase: type.substring(0, bracketStart),\n      typeArgument: type.substring(bracketStart + 1, bracketEnd)\n    };\n  }\n  exports.extractGeneric = extractGeneric;\n});","lineCount":361,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,2,3,0],[6,2,4,0],[7,2,5,0],[8,2,6,0],[9,2,7,0],[10,2,8,0],[11,2,9,0],[12,2,10,0],[13,2,11,0],[14,2,12,0],[15,2,13,0],[16,2,14,0],[17,2,15,0],[18,2,16,0],[19,2,17,0],[20,2,18,0],[21,2,18,0],[21,6,18,0,"_objectWithoutProperties"],[21,30,18,0],[21,33,18,0,"_$$_REQUIRE"],[21,44,18,0],[21,45,18,0,"_dependencyMap"],[21,59,18,0],[22,2,18,0],[22,6,18,0,"_excluded"],[22,15,18,0],[23,2,19,0,"Object"],[23,8,19,6],[23,9,19,7,"defineProperty"],[23,23,19,21],[23,24,19,22,"exports"],[23,31,19,29],[23,33,19,31],[23,45,19,43],[23,47,19,45],[24,4,19,47,"value"],[24,9,19,52],[24,11,19,54],[25,2,19,59],[25,3,19,60],[25,4,19,61],[26,2,20,0,"exports"],[26,9,20,7],[26,10,20,8,"extractGeneric"],[26,24,20,22],[26,27,20,25,"exports"],[26,34,20,32],[26,35,20,33,"normalizePropertySchema"],[26,58,20,56],[26,61,20,59,"exports"],[26,68,20,66],[26,69,20,67,"normalizeObjectSchema"],[26,90,20,88],[26,93,20,91,"exports"],[26,100,20,98],[26,101,20,99,"normalizeRealmSchema"],[26,121,20,119],[26,124,20,122],[26,129,20,127],[26,130,20,128],[27,2,24,0],[27,6,24,6,"PRIMITIVE_TYPES"],[27,21,24,21],[27,24,24,24],[27,28,24,28,"Set"],[27,31,24,31],[27,32,24,32],[27,33,25,4],[27,39,25,10],[27,41,26,4],[27,46,26,9],[27,48,27,4],[27,55,27,11],[27,57,28,4],[27,65,28,12],[27,67,29,4],[27,79,29,16],[27,81,30,4],[27,91,30,14],[27,93,31,4],[27,101,31,12],[27,103,32,4],[27,109,32,10],[27,111,33,4],[27,117,33,10],[27,119,34,4],[27,126,34,11],[27,128,35,4],[27,134,35,10],[27,135,36,1],[27,136,36,2],[28,2,37,0],[28,6,37,6,"COLLECTION_TYPES"],[28,22,37,22],[28,25,37,25],[28,29,37,29,"Set"],[28,32,37,32],[28,33,37,33],[28,34,37,34],[28,40,37,40],[28,42,37,42],[28,54,37,54],[28,56,37,56],[28,61,37,61],[28,62,37,62],[28,63,37,63],[29,2,38,0],[29,6,38,6,"COLLECTION_SHORTHAND_TO_NAME"],[29,34,38,34],[29,37,38,37],[30,4,39,4],[30,8,39,8],[30,10,39,10],[30,16,39,16],[31,4,40,4],[31,8,40,8],[31,10,40,10],[31,22,40,22],[32,4,41,4],[32,8,41,8],[32,10,41,10],[33,2,42,0],[33,3,42,1],[34,2,43,0],[34,6,43,6,"COLLECTION_SUFFIX_LENGTH"],[34,30,43,30],[34,33,43,33],[34,37,43,37],[34,38,43,38,"length"],[34,44,43,44],[35,2,44,0],[35,6,44,6,"PRESENTATION_TYPES"],[35,24,44,24],[35,27,44,27],[35,31,44,31,"Set"],[35,34,44,34],[35,35,44,35],[35,36,44,36],[35,45,44,45],[35,46,44,46],[35,47,44,47],[36,2,45,0],[36,6,45,6,"PRESENTATION_TO_REALM_TYPE"],[36,32,45,32],[36,35,45,35],[37,4,46,4,"counter"],[37,11,46,11],[37,13,46,13],[38,2,47,0],[38,3,47,1],[39,2,48,0],[39,6,48,6,"OPTIONAL_MARKER"],[39,21,48,21],[39,24,48,24],[39,27,48,27],[40,2,49,0],[40,11,49,9,"isPrimitive"],[40,22,49,20,"isPrimitive"],[40,23,49,21,"type"],[40,27,49,25],[40,29,49,27],[41,4,50,4],[41,11,50,11,"PRIMITIVE_TYPES"],[41,26,50,26],[41,27,50,27,"has"],[41,30,50,30],[41,31,50,31,"type"],[41,35,50,35],[41,36,50,36],[42,2,51,0],[43,2,52,0],[43,11,52,9,"isCollection"],[43,23,52,21,"isCollection"],[43,24,52,22,"type"],[43,28,52,26],[43,30,52,28],[44,4,53,4],[44,11,53,11,"COLLECTION_TYPES"],[44,27,53,27],[44,28,53,28,"has"],[44,31,53,31],[44,32,53,32,"type"],[44,36,53,36],[44,37,53,37],[45,2,54,0],[46,2,55,0],[46,11,55,9,"isPresentationType"],[46,29,55,27,"isPresentationType"],[46,30,55,28,"type"],[46,34,55,32],[46,36,55,34],[47,4,56,4],[47,11,56,11,"PRESENTATION_TYPES"],[47,29,56,29],[47,30,56,30,"has"],[47,33,56,33],[47,34,56,34,"type"],[47,38,56,38],[47,39,56,39],[48,2,57,0],[49,2,58,0],[49,11,58,9,"isUserDefined"],[49,24,58,22,"isUserDefined"],[49,25,58,23,"type"],[49,29,58,27],[49,31,58,29],[50,4,59,4],[50,11,59,11],[50,12,59,12],[50,13,59,13,"type"],[50,17,59,17],[50,21,59,21],[50,23,59,23,"isPrimitive"],[50,34,59,34],[50,35,59,35,"type"],[50,39,59,39],[50,40,59,40],[50,44,59,44,"isCollection"],[50,56,59,56],[50,57,59,57,"type"],[50,61,59,61],[50,62,59,62],[50,66,59,66,"type"],[50,70,59,70],[50,75,59,75],[50,83,59,83],[50,87,59,87,"type"],[50,91,59,91],[50,96,59,96],[50,112,59,112],[50,113,59,113],[51,2,60,0],[52,2,61,0],[53,0,62,0],[54,0,63,0],[55,2,64,0],[55,11,64,9,"normalizeRealmSchema"],[55,31,64,29,"normalizeRealmSchema"],[55,32,64,30,"realmSchema"],[55,43,64,41],[55,45,64,43],[56,4,65,4],[56,11,65,11,"realmSchema"],[56,22,65,22],[56,23,65,23,"map"],[56,26,65,26],[56,27,65,27,"normalizeObjectSchema"],[56,48,65,48],[56,49,65,49],[57,2,66,0],[58,2,67,0,"exports"],[58,9,67,7],[58,10,67,8,"normalizeRealmSchema"],[58,30,67,28],[58,33,67,31,"normalizeRealmSchema"],[58,53,67,51],[59,2,68,0],[60,0,69,0],[61,0,70,0],[62,2,71,0],[62,11,71,9,"normalizeObjectSchema"],[62,32,71,30,"normalizeObjectSchema"],[62,33,71,31,"arg"],[62,36,71,34],[62,38,71,36],[63,4,72,4],[63,8,72,8],[63,15,72,15,"arg"],[63,18,72,18],[63,23,72,23],[63,33,72,33],[63,35,72,35],[64,6,73,8],[64,7,73,9],[64,8,73,10],[64,10,73,12,"_$$_REQUIRE"],[64,21,73,12],[64,22,73,12,"_dependencyMap"],[64,36,73,12],[64,54,73,21,"assert"],[64,60,73,27],[64,62,73,29,"arg"],[64,65,73,32],[64,66,73,33,"schema"],[64,72,73,39],[64,74,73,41],[65,8,73,41],[65,15,73,47],[65,20,73,51,"_$$_REQUIRE"],[65,31,73,51],[65,32,73,51,"_dependencyMap"],[65,46,73,51],[65,64,73,60,"SchemaParseError"],[65,80,73,76],[65,82,73,77],[65,132,73,127],[65,133,73,128],[66,6,73,128],[66,8,73,129],[67,6,74,8],[67,10,74,14,"objectSchema"],[67,22,74,26],[67,25,74,29,"normalizeObjectSchema"],[67,46,74,50],[67,47,74,51,"arg"],[67,50,74,54],[67,51,74,55,"schema"],[67,57,74,61],[67,58,74,62],[68,6,75,8,"objectSchema"],[68,18,75,20],[68,19,75,21,"ctor"],[68,23,75,25],[68,26,75,28,"arg"],[68,29,75,31],[69,6,76,8],[69,13,76,15,"objectSchema"],[69,25,76,27],[70,4,77,4],[71,4,78,4],[72,4,79,4],[73,4,80,4],[73,8,80,8,"Array"],[73,13,80,13],[73,14,80,14,"isArray"],[73,21,80,21],[73,22,80,22,"arg"],[73,25,80,25],[73,26,80,26,"properties"],[73,36,80,36],[73,37,80,37],[73,39,80,39],[74,6,81,8],[74,10,81,12,"_$$_REQUIRE"],[74,21,81,12],[74,22,81,12,"_dependencyMap"],[74,36,81,12],[74,53,81,20,"flags"],[74,58,81,25],[74,59,81,26,"ALLOW_VALUES_ARRAYS"],[74,78,81,45],[74,80,81,47],[75,8,82,12],[75,15,82,19,"normalizeObjectSchema"],[75,36,82,40],[75,37,82,40,"Object"],[75,43,82,40],[75,44,82,40,"assign"],[75,50,82,40],[75,55,83,19,"arg"],[75,58,83,22],[76,10,84,16],[77,10,85,16,"properties"],[77,20,85,26],[77,22,85,28,"Object"],[77,28,85,34],[77,29,85,35,"fromEntries"],[77,40,85,46],[77,41,85,47,"arg"],[77,44,85,50],[77,45,85,51,"properties"],[77,55,85,61],[77,56,85,62,"map"],[77,59,85,65],[77,60,85,66],[77,70,85,66,"_ref"],[77,74,85,66],[78,12,85,66],[78,16,85,69,"name"],[78,20,85,73],[78,23,85,73,"_ref"],[78,27,85,73],[78,28,85,69,"name"],[78,32,85,73],[79,14,85,78,"rest"],[79,18,85,82],[79,21,85,82,"_objectWithoutProperties"],[79,45,85,82],[79,46,85,82,"_ref"],[79,50,85,82],[79,52,85,82,"_excluded"],[79,61,85,82],[80,12,85,82],[80,19,85,89],[80,20,85,90,"name"],[80,24,85,94],[80,26,85,96,"rest"],[80,30,85,100],[80,31,85,101],[81,10,85,101],[81,12,85,102],[82,8,85,103],[82,10,86,13],[82,11,86,14],[83,6,87,8],[84,6,88,8],[84,12,88,14],[84,16,88,18,"Error"],[84,21,88,23],[84,22,88,24],[84,91,88,93],[84,92,88,94],[85,4,89,4],[86,4,90,4],[87,4,91,4],[87,8,91,12,"name"],[87,12,91,16],[87,15,91,67,"arg"],[87,18,91,70],[87,19,91,12,"name"],[87,23,91,16],[88,6,91,18,"primaryKey"],[88,16,91,28],[88,19,91,67,"arg"],[88,22,91,70],[88,23,91,18,"primaryKey"],[88,33,91,28],[89,6,91,30,"asymmetric"],[89,16,91,40],[89,19,91,67,"arg"],[89,22,91,70],[89,23,91,30,"asymmetric"],[89,33,91,40],[90,6,91,42,"embedded"],[90,14,91,50],[90,17,91,67,"arg"],[90,20,91,70],[90,21,91,42,"embedded"],[90,29,91,50],[91,6,91,52,"properties"],[91,16,91,62],[91,19,91,67,"arg"],[91,22,91,70],[91,23,91,52,"properties"],[91,33,91,62],[92,4,92,4],[92,5,92,5],[92,6,92,6],[92,8,92,8,"_$$_REQUIRE"],[92,19,92,8],[92,20,92,8,"_dependencyMap"],[92,34,92,8],[92,52,92,17,"assert"],[92,58,92,23],[92,60,92,25,"name"],[92,64,92,29],[92,65,92,30,"length"],[92,71,92,36],[92,74,92,39],[92,75,92,40],[92,77,92,42,"objectError"],[92,88,92,53],[92,89,92,54],[92,91,92,56],[92,93,92,58],[92,120,92,85],[92,121,92,86],[92,122,92,87],[93,4,93,4],[93,8,93,10,"primaryKeyFieldIsMissing"],[93,32,93,34],[93,35,93,37,"primaryKey"],[93,45,93,47],[93,49,93,51],[93,50,93,52,"Object"],[93,56,93,58],[93,57,93,59,"prototype"],[93,66,93,68],[93,67,93,69,"hasOwnProperty"],[93,81,93,83],[93,82,93,84,"call"],[93,86,93,88],[93,87,93,89,"properties"],[93,97,93,99],[93,99,93,101,"primaryKey"],[93,109,93,111],[93,110,93,112],[94,4,94,4],[94,5,94,5],[94,6,94,6],[94,8,94,8,"_$$_REQUIRE"],[94,19,94,8],[94,20,94,8,"_dependencyMap"],[94,34,94,8],[94,52,94,17,"assert"],[94,58,94,23],[94,60,94,25],[94,61,94,26,"primaryKeyFieldIsMissing"],[94,85,94,50],[94,87,94,52,"objectError"],[94,98,94,63],[94,99,94,64,"name"],[94,103,94,68],[94,105,94,70],[94,109,94,74,"primaryKey"],[94,119,94,84],[94,189,94,154],[94,190,94,155],[94,191,94,156],[95,4,95,4],[95,11,95,11],[96,6,96,8,"name"],[96,10,96,12],[96,12,96,8,"name"],[96,16,96,12],[97,6,97,8,"primaryKey"],[97,16,97,18],[97,18,97,8,"primaryKey"],[97,28,97,18],[98,6,98,8,"asymmetric"],[98,16,98,18],[98,18,98,20],[98,19,98,21],[98,20,98,22,"asymmetric"],[98,30,98,32],[99,6,99,8,"embedded"],[99,14,99,16],[99,16,99,18],[99,17,99,19],[99,18,99,20,"embedded"],[99,26,99,28],[100,6,100,8,"properties"],[100,16,100,18],[100,18,100,20,"normalizePropertySchemas"],[100,42,100,44],[100,43,100,45,"name"],[100,47,100,49],[100,49,100,51,"properties"],[100,59,100,61],[100,61,100,63,"primaryKey"],[100,71,100,73],[101,4,101,4],[101,5,101,5],[102,2,102,0],[103,2,103,0,"exports"],[103,9,103,7],[103,10,103,8,"normalizeObjectSchema"],[103,31,103,29],[103,34,103,32,"normalizeObjectSchema"],[103,55,103,53],[104,2,104,0],[105,0,105,0],[106,0,106,0],[107,2,107,0],[107,11,107,9,"normalizePropertySchemas"],[107,35,107,33,"normalizePropertySchemas"],[107,36,107,34,"objectName"],[107,46,107,44],[107,48,107,46,"propertiesSchemas"],[107,65,107,63],[107,67,107,65,"primaryKey"],[107,77,107,75],[107,79,107,77],[108,4,108,4],[108,8,108,10,"normalizedSchemas"],[108,25,108,27],[108,28,108,30],[108,29,108,31],[108,30,108,32],[109,4,109,4],[109,9,109,9],[109,13,109,15,"propertyName"],[109,25,109,27],[109,29,109,31,"propertiesSchemas"],[109,46,109,48],[109,48,109,50],[110,6,110,8,"normalizedSchemas"],[110,23,110,25],[110,24,110,26,"propertyName"],[110,36,110,38],[110,37,110,39],[110,40,110,42,"normalizePropertySchema"],[110,63,110,65],[110,64,110,66],[111,8,111,12,"objectName"],[111,18,111,22],[111,20,111,12,"objectName"],[111,30,111,22],[112,8,112,12,"propertyName"],[112,20,112,24],[112,22,112,12,"propertyName"],[112,34,112,24],[113,8,113,12,"propertySchema"],[113,22,113,26],[113,24,113,28,"propertiesSchemas"],[113,41,113,45],[113,42,113,46,"propertyName"],[113,54,113,58],[113,55,113,59],[114,8,114,12,"isPrimaryKey"],[114,20,114,24],[114,22,114,26,"primaryKey"],[114,32,114,36],[114,37,114,41,"propertyName"],[115,6,115,8],[115,7,115,9],[115,8,115,10],[116,4,116,4],[117,4,117,4],[117,11,117,11,"normalizedSchemas"],[117,28,117,28],[118,2,118,0],[119,2,119,0],[120,0,120,0],[121,0,121,0],[122,2,122,0],[122,11,122,9,"normalizePropertySchema"],[122,34,122,32,"normalizePropertySchema"],[122,35,122,33,"info"],[122,39,122,37],[122,41,122,39],[123,4,123,4],[123,8,123,10,"isUsingShorthand"],[123,24,123,26],[123,27,123,29],[123,34,123,36,"info"],[123,38,123,40],[123,39,123,41,"propertySchema"],[123,53,123,55],[123,58,123,60],[123,66,123,68],[124,4,124,4],[124,8,124,10,"normalizedSchema"],[124,24,124,26],[124,27,124,29,"isUsingShorthand"],[124,43,124,45],[124,46,125,10,"normalizePropertySchemaShorthand"],[124,78,125,42],[124,79,125,43,"info"],[124,83,125,47],[124,84,125,48],[124,87,126,10,"normalizePropertySchemaObject"],[124,116,126,39],[124,117,126,40,"info"],[124,121,126,44],[124,122,126,45],[125,4,127,4],[125,11,127,11,"normalizedSchema"],[125,27,127,27],[126,2,128,0],[127,2,129,0,"exports"],[127,9,129,7],[127,10,129,8,"normalizePropertySchema"],[127,33,129,31],[127,36,129,34,"normalizePropertySchema"],[127,59,129,57],[128,2,130,0],[129,0,131,0],[130,0,132,0],[131,0,133,0],[132,2,134,0],[132,11,134,9,"normalizePropertySchemaShorthand"],[132,43,134,41,"normalizePropertySchemaShorthand"],[132,44,134,42,"info"],[132,48,134,46],[132,50,134,48],[133,4,135,4],[133,8,135,10,"propertySchema"],[133,22,135,24],[133,25,135,29,"info"],[133,29,135,33],[133,30,135,10,"propertySchema"],[133,44,135,24],[134,4,136,4],[134,5,136,5],[134,6,136,6],[134,8,136,8,"_$$_REQUIRE"],[134,19,136,8],[134,20,136,8,"_dependencyMap"],[134,34,136,8],[134,52,136,17,"assert"],[134,58,136,23],[134,60,136,25,"propertySchema"],[134,74,136,39],[134,75,136,40,"length"],[134,81,136,46],[134,84,136,49],[134,85,136,50],[134,87,136,52,"propError"],[134,96,136,61],[134,97,136,62,"info"],[134,101,136,66],[134,103,136,68],[134,132,136,97],[134,133,136,98],[134,134,136,99],[135,4,137,4],[135,8,137,8,"type"],[135,12,137,12],[135,15,137,15],[135,17,137,17],[136,4,138,4],[136,8,138,8,"objectType"],[136,18,138,18],[137,4,139,4],[137,8,139,8,"presentation"],[137,20,139,20],[138,4,140,4],[138,8,140,8,"optional"],[138,16,140,16],[139,4,141,4],[139,8,141,8,"hasCollectionSuffix"],[139,27,141,27],[139,28,141,28,"propertySchema"],[139,42,141,42],[139,43,141,43],[139,45,141,45],[140,6,142,8],[140,10,142,14,"suffix"],[140,16,142,20],[140,19,142,23,"propertySchema"],[140,33,142,37],[140,34,142,38,"substring"],[140,43,142,47],[140,44,142,48,"propertySchema"],[140,58,142,62],[140,59,142,63,"length"],[140,65,142,69],[140,68,142,72,"COLLECTION_SUFFIX_LENGTH"],[140,92,142,96],[140,93,142,97],[141,6,143,8,"type"],[141,10,143,12],[141,13,143,15,"COLLECTION_SHORTHAND_TO_NAME"],[141,41,143,43],[141,42,143,44,"suffix"],[141,48,143,50],[141,49,143,51],[142,6,144,8,"propertySchema"],[142,20,144,22],[142,23,144,25,"propertySchema"],[142,37,144,39],[142,38,144,40,"substring"],[142,47,144,49],[142,48,144,50],[142,49,144,51],[142,51,144,53,"propertySchema"],[142,65,144,67],[142,66,144,68,"length"],[142,72,144,74],[142,75,144,77,"COLLECTION_SUFFIX_LENGTH"],[142,99,144,101],[142,100,144,102],[143,6,145,8],[143,7,145,9],[143,8,145,10],[143,10,145,12,"_$$_REQUIRE"],[143,21,145,12],[143,22,145,12,"_dependencyMap"],[143,36,145,12],[143,54,145,21,"assert"],[143,60,145,27],[143,62,145,29,"propertySchema"],[143,76,145,43],[143,77,145,44,"length"],[143,83,145,50],[143,86,145,53],[143,87,145,54],[143,89,145,56,"propError"],[143,98,145,65],[143,99,145,66,"info"],[143,103,145,70],[143,105,145,72],[143,157,145,124,"suffix"],[143,163,145,130],[143,167,145,134],[143,168,145,135],[143,169,145,136],[144,6,146,8],[144,10,146,14,"isNestedCollection"],[144,28,146,32],[144,31,146,35,"hasCollectionSuffix"],[144,50,146,54],[144,51,146,55,"propertySchema"],[144,65,146,69],[144,66,146,70],[145,6,147,8],[145,7,147,9],[145,8,147,10],[145,10,147,12,"_$$_REQUIRE"],[145,21,147,12],[145,22,147,12,"_dependencyMap"],[145,36,147,12],[145,54,147,21,"assert"],[145,60,147,27],[145,62,147,29],[145,63,147,30,"isNestedCollection"],[145,81,147,48],[145,83,147,50,"propError"],[145,92,147,59],[145,93,147,60,"info"],[145,97,147,64],[145,99,147,66],[145,138,147,105],[145,139,147,106],[145,140,147,107],[146,4,148,4],[147,4,149,4],[147,8,149,8,"propertySchema"],[147,22,149,22],[147,23,149,23,"endsWith"],[147,31,149,31],[147,32,149,32,"OPTIONAL_MARKER"],[147,47,149,47],[147,48,149,48],[147,50,149,50],[148,6,150,8,"optional"],[148,14,150,16],[148,17,150,19],[148,21,150,23],[149,6,151,8,"propertySchema"],[149,20,151,22],[149,23,151,25,"propertySchema"],[149,37,151,39],[149,38,151,40,"substring"],[149,47,151,49],[149,48,151,50],[149,49,151,51],[149,51,151,53,"propertySchema"],[149,65,151,67],[149,66,151,68,"length"],[149,72,151,74],[149,75,151,77,"OPTIONAL_MARKER"],[149,90,151,92],[149,91,151,93,"length"],[149,97,151,99],[149,98,151,100],[150,6,152,8],[150,7,152,9],[150,8,152,10],[150,10,152,12,"_$$_REQUIRE"],[150,21,152,12],[150,22,152,12,"_dependencyMap"],[150,36,152,12],[150,54,152,21,"assert"],[150,60,152,27],[150,62,152,29,"propertySchema"],[150,76,152,43],[150,77,152,44,"length"],[150,83,152,50],[150,86,152,53],[150,87,152,54],[150,89,152,56,"propError"],[150,98,152,65],[150,99,152,66,"info"],[150,103,152,70],[150,105,152,72],[150,166,152,133],[150,167,152,134],[150,168,152,135],[151,6,153,8],[151,10,153,14,"usingOptionalOnCollection"],[151,35,153,39],[151,38,153,42,"hasCollectionSuffix"],[151,57,153,61],[151,58,153,62,"propertySchema"],[151,72,153,76],[151,73,153,77],[152,6,154,8],[152,7,154,9],[152,8,154,10],[152,10,154,12,"_$$_REQUIRE"],[152,21,154,12],[152,22,154,12,"_dependencyMap"],[152,36,154,12],[152,54,154,21,"assert"],[152,60,154,27],[152,62,154,29],[152,63,154,30,"usingOptionalOnCollection"],[152,88,154,55],[152,90,154,57,"propError"],[152,99,154,66],[152,100,154,67,"info"],[152,104,154,71],[152,106,154,73],[152,268,154,235],[152,269,154,236],[152,270,154,237],[153,4,155,4],[154,4,156,4],[154,8,156,8,"isPresentationType"],[154,26,156,26],[154,27,156,27,"propertySchema"],[154,41,156,41],[154,42,156,42],[154,44,156,44],[155,6,157,8,"presentation"],[155,18,157,20],[155,21,157,23,"propertySchema"],[155,35,157,37],[156,6,158,8,"propertySchema"],[156,20,158,22],[156,23,158,25,"PRESENTATION_TO_REALM_TYPE"],[156,49,158,51],[156,50,158,52,"propertySchema"],[156,64,158,66],[156,65,158,67],[157,4,159,4],[158,4,160,4],[158,8,160,8,"isPrimitive"],[158,19,160,19],[158,20,160,20,"propertySchema"],[158,34,160,34],[158,35,160,35],[158,37,160,37],[159,6,161,8],[159,10,161,12,"isCollection"],[159,22,161,24],[159,23,161,25,"type"],[159,27,161,29],[159,28,161,30],[159,30,161,32],[160,8,162,12,"objectType"],[160,18,162,22],[160,21,162,25,"propertySchema"],[160,35,162,39],[161,6,163,8],[161,7,163,9],[161,13,164,13],[162,8,165,12,"type"],[162,12,165,16],[162,15,165,19,"propertySchema"],[162,29,165,33],[163,6,166,8],[164,4,167,4],[164,5,167,5],[164,11,168,9],[164,15,168,13,"isCollection"],[164,27,168,25],[164,28,168,26,"propertySchema"],[164,42,168,40],[164,43,168,41],[164,45,168,43],[165,6,169,8],[165,12,169,14],[165,17,169,18,"_$$_REQUIRE"],[165,28,169,18],[165,29,169,18,"_dependencyMap"],[165,43,169,18],[165,61,169,27,"PropertySchemaParseError"],[165,85,169,51],[165,87,169,52],[165,121,169,86,"propertySchema"],[165,135,169,100],[165,206,169,171],[165,208,169,173,"info"],[165,212,169,177],[165,213,169,178],[166,4,170,4],[166,5,170,5],[166,11,171,9],[166,15,171,13,"propertySchema"],[166,29,171,27],[166,34,171,32],[166,42,171,40],[166,44,171,42],[167,6,172,8],[167,12,172,14],[167,17,172,18,"_$$_REQUIRE"],[167,28,172,18],[167,29,172,18,"_dependencyMap"],[167,43,172,18],[167,61,172,27,"PropertySchemaParseError"],[167,85,172,51],[167,87,172,52],[167,190,172,155],[167,192,172,157,"info"],[167,196,172,161],[167,197,172,162],[168,4,173,4],[168,5,173,5],[168,11,174,9],[168,15,174,13,"propertySchema"],[168,29,174,27],[168,34,174,32],[168,50,174,48],[168,52,174,50],[169,6,175,8],[169,12,175,14],[169,17,175,18,"_$$_REQUIRE"],[169,28,175,18],[169,29,175,18,"_dependencyMap"],[169,43,175,18],[169,61,175,27,"PropertySchemaParseError"],[169,85,175,51],[169,87,175,52],[169,217,175,182],[169,219,175,184,"info"],[169,223,175,188],[169,224,175,189],[170,4,176,4],[170,5,176,5],[170,11,177,9],[171,6,178,8],[172,6,179,8,"objectType"],[172,16,179,18],[172,19,179,21,"propertySchema"],[172,33,179,35],[173,6,180,8],[173,10,180,12],[173,11,180,13,"isCollection"],[173,23,180,25],[173,24,180,26,"type"],[173,28,180,30],[173,29,180,31],[173,31,180,33],[174,8,181,12,"type"],[174,12,181,16],[174,15,181,19],[174,23,181,27],[175,6,182,8],[176,4,183,4],[177,4,184,4],[177,12,184,12,"presentation"],[177,24,184,24],[178,6,185,8],[178,11,185,13],[178,20,185,22],[179,8,186,12],[180,8,187,12],[180,9,187,13],[180,10,187,14],[180,12,187,16,"_$$_REQUIRE"],[180,23,187,16],[180,24,187,16,"_dependencyMap"],[180,38,187,16],[180,56,187,25,"assert"],[180,62,187,31],[180,64,187,33,"type"],[180,68,187,37],[180,73,187,42],[180,78,187,47],[180,80,187,49,"propError"],[180,89,187,58],[180,90,187,59,"info"],[180,94,187,63],[180,96,187,65],[180,137,187,106],[180,138,187,107],[180,139,187,108],[181,8,188,12],[182,6,189,8],[183,8,190,12],[184,4,191,4],[185,4,192,4],[185,8,192,8,"isAlwaysOptional"],[185,24,192,24],[185,25,192,25,"type"],[185,29,192,29],[185,31,192,31,"objectType"],[185,41,192,41],[185,42,192,42],[185,44,192,44],[186,6,193,8,"optional"],[186,14,193,16],[186,17,193,19],[186,21,193,23],[187,4,194,4],[187,5,194,5],[187,11,195,9],[187,15,195,13,"isNeverOptional"],[187,30,195,28],[187,31,195,29,"type"],[187,35,195,33],[187,37,195,35,"objectType"],[187,47,195,45],[187,48,195,46],[187,50,195,48],[188,6,196,8],[188,7,196,9],[188,8,196,10],[188,10,196,12,"_$$_REQUIRE"],[188,21,196,12],[188,22,196,12,"_dependencyMap"],[188,36,196,12],[188,54,196,21,"assert"],[188,60,196,27],[188,62,196,29],[188,63,196,30,"optional"],[188,71,196,38],[188,73,196,40,"propError"],[188,82,196,49],[188,83,196,50,"info"],[188,87,196,54],[188,89,196,56],[188,211,196,178],[188,212,196,179],[188,213,196,180],[189,6,197,8,"optional"],[189,14,197,16],[189,17,197,19],[189,22,197,24],[190,4,198,4],[191,4,199,4],[191,8,199,10,"normalizedSchema"],[191,24,199,26],[191,27,199,29],[192,6,200,8,"name"],[192,10,200,12],[192,12,200,14,"info"],[192,16,200,18],[192,17,200,19,"propertyName"],[192,29,200,31],[193,6,201,8,"type"],[193,10,201,12],[193,12,201,14,"type"],[193,16,201,18],[194,6,202,8,"optional"],[194,14,202,16],[194,16,202,18],[194,17,202,19],[194,18,202,20,"optional"],[194,26,202,28],[195,6,203,8,"indexed"],[195,13,203,15],[195,15,203,17],[195,16,203,18],[195,17,203,19,"info"],[195,21,203,23],[195,22,203,24,"isPrimaryKey"],[195,34,203,36],[196,6,204,8,"mapTo"],[196,11,204,13],[196,13,204,15,"info"],[196,17,204,19],[196,18,204,20,"propertyName"],[197,4,205,4],[197,5,205,5],[198,4,206,4],[199,4,207,4],[199,8,207,8,"objectType"],[199,18,207,18],[199,23,207,23,"undefined"],[199,32,207,32],[199,34,208,8,"normalizedSchema"],[199,50,208,24],[199,51,208,25,"objectType"],[199,61,208,35],[199,64,208,38,"objectType"],[199,74,208,48],[200,4,209,4],[200,8,209,8,"presentation"],[200,20,209,20],[200,25,209,25,"undefined"],[200,34,209,34],[200,36,210,8,"normalizedSchema"],[200,52,210,24],[200,53,210,25,"presentation"],[200,65,210,37],[200,68,210,40,"presentation"],[200,80,210,52],[201,4,211,4],[201,11,211,11,"normalizedSchema"],[201,27,211,27],[202,2,212,0],[203,2,213,0],[204,0,214,0],[205,0,215,0],[206,0,216,0],[207,2,217,0],[207,11,217,9,"normalizePropertySchemaObject"],[207,40,217,38,"normalizePropertySchemaObject"],[207,41,217,39,"info"],[207,45,217,43],[207,47,217,45],[208,4,218,4],[208,8,218,12,"propertySchema"],[208,22,218,26],[208,25,218,31,"info"],[208,29,218,35],[208,30,218,12,"propertySchema"],[208,44,218,26],[209,4,219,4],[209,8,219,12,"type"],[209,12,219,16],[209,15,219,80,"propertySchema"],[209,29,219,94],[209,30,219,12,"type"],[209,34,219,16],[210,6,219,18,"objectType"],[210,16,219,28],[210,19,219,80,"propertySchema"],[210,33,219,94],[210,34,219,18,"objectType"],[210,44,219,28],[211,6,219,30,"presentation"],[211,18,219,42],[211,21,219,80,"propertySchema"],[211,35,219,94],[211,36,219,30,"presentation"],[211,48,219,42],[212,6,219,44,"property"],[212,14,219,52],[212,17,219,80,"propertySchema"],[212,31,219,94],[212,32,219,44,"property"],[212,40,219,52],[213,6,219,63,"defaultValue"],[213,18,219,75],[213,21,219,80,"propertySchema"],[213,35,219,94],[213,36,219,54,"default"],[213,43,219,61],[214,4,220,4],[214,8,220,10,"optional"],[214,16,220,18],[214,19,220,32,"propertySchema"],[214,33,220,46],[214,34,220,10,"optional"],[214,42,220,18],[215,6,220,20,"indexed"],[215,13,220,27],[215,16,220,32,"propertySchema"],[215,30,220,46],[215,31,220,20,"indexed"],[215,38,220,27],[216,4,221,4],[216,5,221,5],[216,6,221,6],[216,8,221,8,"_$$_REQUIRE"],[216,19,221,8],[216,20,221,8,"_dependencyMap"],[216,34,221,8],[216,52,221,17,"assert"],[216,58,221,23],[216,60,221,25,"type"],[216,64,221,29],[216,65,221,30,"length"],[216,71,221,36],[216,74,221,39],[216,75,221,40],[216,77,221,42,"propError"],[216,86,221,51],[216,87,221,52,"info"],[216,91,221,56],[216,93,221,58],[216,120,221,85],[216,121,221,86],[216,122,221,87],[217,4,222,4,"assertNotUsingShorthand"],[217,27,222,27],[217,28,222,28,"type"],[217,32,222,32],[217,34,222,34,"info"],[217,38,222,38],[217,39,222,39],[218,4,223,4,"assertNotUsingShorthand"],[218,27,223,27],[218,28,223,28,"objectType"],[218,38,223,38],[218,40,223,40,"info"],[218,44,223,44],[218,45,223,45],[219,4,224,4],[219,8,224,8,"isPrimitive"],[219,19,224,19],[219,20,224,20,"type"],[219,24,224,24],[219,25,224,25],[219,27,224,27],[220,6,225,8],[220,7,225,9],[220,8,225,10],[220,10,225,12,"_$$_REQUIRE"],[220,21,225,12],[220,22,225,12,"_dependencyMap"],[220,36,225,12],[220,54,225,21,"assert"],[220,60,225,27],[220,62,225,29,"objectType"],[220,72,225,39],[220,77,225,44,"undefined"],[220,86,225,53],[220,88,225,55,"propError"],[220,97,225,64],[220,98,225,65,"info"],[220,102,225,69],[220,104,225,71],[220,154,225,121,"type"],[220,158,225,125],[220,162,225,129],[220,163,225,130],[220,164,225,131],[221,4,226,4],[221,5,226,5],[221,11,227,9],[221,15,227,13,"isCollection"],[221,27,227,25],[221,28,227,26,"type"],[221,32,227,30],[221,33,227,31],[221,35,227,33],[222,6,228,8],[222,7,228,9],[222,8,228,10],[222,10,228,12,"_$$_REQUIRE"],[222,21,228,12],[222,22,228,12,"_dependencyMap"],[222,36,228,12],[222,54,228,21,"assert"],[222,60,228,27],[222,62,228,29,"isPrimitive"],[222,73,228,40],[222,74,228,41,"objectType"],[222,84,228,51],[222,85,228,52],[222,89,228,56,"isUserDefined"],[222,102,228,69],[222,103,228,70,"objectType"],[222,113,228,80],[222,114,228,81],[222,116,228,83,"propError"],[222,125,228,92],[222,126,228,93,"info"],[222,130,228,97],[222,132,228,99],[222,137,228,104,"type"],[222,141,228,108],[222,225,228,192],[222,226,228,193],[222,227,228,194],[223,4,229,4],[223,5,229,5],[223,11,230,9],[223,15,230,13,"type"],[223,19,230,17],[223,24,230,22],[223,32,230,30],[223,34,230,32],[224,6,231,8],[224,7,231,9],[224,8,231,10],[224,10,231,12,"_$$_REQUIRE"],[224,21,231,12],[224,22,231,12,"_dependencyMap"],[224,36,231,12],[224,54,231,21,"assert"],[224,60,231,27],[224,62,231,29,"isUserDefined"],[224,75,231,42],[224,76,231,43,"objectType"],[224,86,231,53],[224,87,231,54],[224,89,231,56,"propError"],[224,98,231,65],[224,99,231,66,"info"],[224,103,231,70],[224,105,231,72],[224,166,231,133],[224,167,231,134],[224,168,231,135],[225,4,232,4],[225,5,232,5],[225,11,233,9],[225,15,233,13,"type"],[225,19,233,17],[225,24,233,22],[225,40,233,38],[225,42,233,40],[226,6,234,8],[226,7,234,9],[226,8,234,10],[226,10,234,12,"_$$_REQUIRE"],[226,21,234,12],[226,22,234,12,"_dependencyMap"],[226,36,234,12],[226,54,234,21,"assert"],[226,60,234,27],[226,62,234,29,"isUserDefined"],[226,75,234,42],[226,76,234,43,"objectType"],[226,86,234,53],[226,87,234,54],[226,89,234,56,"propError"],[226,98,234,65],[226,99,234,66,"info"],[226,103,234,70],[226,105,234,72],[226,166,234,133],[226,167,234,134],[226,168,234,135],[227,6,235,8],[227,7,235,9],[227,8,235,10],[227,10,235,12,"_$$_REQUIRE"],[227,21,235,12],[227,22,235,12,"_dependencyMap"],[227,36,235,12],[227,54,235,21,"assert"],[227,60,235,27],[227,62,235,29],[227,63,235,30],[227,64,235,31,"property"],[227,72,235,39],[227,74,235,41,"propError"],[227,83,235,50],[227,84,235,51,"info"],[227,88,235,55],[227,90,235,57],[227,164,235,131],[227,165,235,132],[227,166,235,133],[228,4,236,4],[228,5,236,5],[228,11,237,9],[229,6,238,8],[230,6,239,8],[230,12,239,14],[230,17,239,18,"_$$_REQUIRE"],[230,28,239,18],[230,29,239,18,"_dependencyMap"],[230,43,239,18],[230,61,239,27,"PropertySchemaParseError"],[230,85,239,51],[230,87,239,52],[230,164,239,129,"type"],[230,168,239,133],[230,217,239,182,"type"],[230,221,239,186],[230,242,239,207,"type"],[230,246,239,211],[230,260,239,225],[230,262,239,227,"info"],[230,266,239,231],[230,267,239,232],[231,4,240,4],[232,4,241,4],[232,8,241,8,"type"],[232,12,241,12],[232,17,241,17],[232,33,241,33],[232,35,241,35],[233,6,242,8],[233,7,242,9],[233,8,242,10],[233,10,242,12,"_$$_REQUIRE"],[233,21,242,12],[233,22,242,12,"_dependencyMap"],[233,36,242,12],[233,54,242,21,"assert"],[233,60,242,27],[233,62,242,29,"property"],[233,70,242,37],[233,75,242,42,"undefined"],[233,84,242,51],[233,86,242,53,"propError"],[233,95,242,62],[233,96,242,63,"info"],[233,100,242,67],[233,102,242,69],[233,167,242,134],[233,168,242,135],[233,169,242,136],[234,4,243,4],[235,4,244,4],[235,12,244,12,"presentation"],[235,24,244,24],[236,6,245,8],[236,11,245,13],[236,20,245,22],[237,8,246,12],[237,9,246,13],[237,10,246,14],[237,12,246,16,"_$$_REQUIRE"],[237,23,246,16],[237,24,246,16,"_dependencyMap"],[237,38,246,16],[237,56,246,25,"assert"],[237,62,246,31],[237,64,246,33,"type"],[237,68,246,37],[237,73,246,42],[237,78,246,47],[237,80,246,49,"propError"],[237,89,246,58],[237,90,246,59,"info"],[237,94,246,63],[237,96,246,65],[237,145,246,114],[237,146,246,115],[237,147,246,116],[238,8,247,12],[239,6,248,8],[240,8,249,12],[241,4,250,4],[242,4,251,4],[242,8,251,8,"isAlwaysOptional"],[242,24,251,24],[242,25,251,25,"type"],[242,29,251,29],[242,31,251,31,"objectType"],[242,41,251,41],[242,42,251,42],[242,44,251,44],[243,6,252,8],[243,10,252,14,"displayed"],[243,19,252,23],[243,22,252,26,"type"],[243,26,252,30],[243,31,252,35],[243,38,252,42],[243,42,252,46,"objectType"],[243,52,252,56],[243,57,252,61],[243,64,252,68],[243,67,253,14],[243,82,253,29],[243,85,254,14],[243,147,254,76],[244,6,255,8],[244,7,255,9],[244,8,255,10],[244,10,255,12,"_$$_REQUIRE"],[244,21,255,12],[244,22,255,12,"_dependencyMap"],[244,36,255,12],[244,54,255,21,"assert"],[244,60,255,27],[244,62,255,29,"optional"],[244,70,255,37],[244,75,255,42],[244,80,255,47],[244,82,255,49,"propError"],[244,91,255,58],[244,92,255,59,"info"],[244,96,255,63],[244,98,255,65],[244,101,255,68,"displayed"],[244,110,255,77],[244,165,255,132],[244,166,255,133],[244,167,255,134],[245,6,256,8,"optional"],[245,14,256,16],[245,17,256,19],[245,21,256,23],[246,4,257,4],[246,5,257,5],[246,11,258,9],[246,15,258,13,"isNeverOptional"],[246,30,258,28],[246,31,258,29,"type"],[246,35,258,33],[246,37,258,35,"objectType"],[246,47,258,45],[246,48,258,46],[246,50,258,48],[247,6,259,8],[247,7,259,9],[247,8,259,10],[247,10,259,12,"_$$_REQUIRE"],[247,21,259,12],[247,22,259,12,"_dependencyMap"],[247,36,259,12],[247,54,259,21,"assert"],[247,60,259,27],[247,62,259,29,"optional"],[247,70,259,37],[247,75,259,42],[247,79,259,46],[247,81,259,48,"propError"],[247,90,259,57],[247,91,259,58,"info"],[247,95,259,62],[247,97,259,64],[247,188,259,155],[247,189,259,156],[247,190,259,157],[248,6,260,8,"optional"],[248,14,260,16],[248,17,260,19],[248,22,260,24],[249,4,261,4],[250,4,262,4],[250,8,262,8,"info"],[250,12,262,12],[250,13,262,13,"isPrimaryKey"],[250,25,262,25],[250,27,262,27],[251,6,263,8],[251,7,263,9],[251,8,263,10],[251,10,263,12,"_$$_REQUIRE"],[251,21,263,12],[251,22,263,12,"_dependencyMap"],[251,36,263,12],[251,54,263,21,"assert"],[251,60,263,27],[251,62,263,29,"indexed"],[251,69,263,36],[251,74,263,41],[251,79,263,46],[251,81,263,48,"propError"],[251,90,263,57],[251,91,263,58,"info"],[251,95,263,62],[251,97,263,64],[251,135,263,102],[251,136,263,103],[251,137,263,104],[252,6,264,8],[252,7,264,9],[252,8,264,10],[252,10,264,12,"_$$_REQUIRE"],[252,21,264,12],[252,22,264,12,"_dependencyMap"],[252,36,264,12],[252,54,264,21,"assert"],[252,60,264,27],[252,62,264,29,"indexed"],[252,69,264,36],[252,74,264,41],[252,85,264,52],[252,87,264,54,"propError"],[252,96,264,63],[252,97,264,64,"info"],[252,101,264,68],[252,103,264,70],[252,146,264,113],[252,147,264,114],[252,148,264,115],[253,6,265,8],[253,7,265,9],[253,8,265,10],[253,10,265,12,"_$$_REQUIRE"],[253,21,265,12],[253,22,265,12,"_dependencyMap"],[253,36,265,12],[253,54,265,21,"assert"],[253,60,265,27],[253,62,265,29,"presentation"],[253,74,265,41],[253,79,265,46],[253,88,265,55],[253,90,265,57,"propError"],[253,99,265,66],[253,100,265,67,"info"],[253,104,265,71],[253,106,265,73],[253,140,265,107],[253,141,265,108],[253,142,265,109],[254,6,266,8,"indexed"],[254,13,266,15],[254,16,266,18],[254,20,266,22],[255,4,267,4],[256,4,268,4],[256,8,268,10,"normalizedSchema"],[256,24,268,26],[256,27,268,29],[257,6,269,8,"name"],[257,10,269,12],[257,12,269,14,"info"],[257,16,269,18],[257,17,269,19,"propertyName"],[257,29,269,31],[258,6,270,8,"type"],[258,10,270,12],[258,12,270,14,"type"],[258,16,270,18],[259,6,271,8,"optional"],[259,14,271,16],[259,16,271,18],[259,17,271,19],[259,18,271,20,"optional"],[259,26,271,28],[260,6,272,8,"indexed"],[260,13,272,15],[260,15,272,17,"indexed"],[260,22,272,24],[260,27,272,29,"undefined"],[260,36,272,38],[260,39,272,41,"indexed"],[260,46,272,48],[260,49,272,51],[260,54,272,56],[261,6,273,8,"mapTo"],[261,11,273,13],[261,13,273,15,"propertySchema"],[261,27,273,29],[261,28,273,30,"mapTo"],[261,33,273,35],[261,37,273,39,"info"],[261,41,273,43],[261,42,273,44,"propertyName"],[262,4,274,4],[262,5,274,5],[263,4,275,4],[264,4,276,4],[264,8,276,8,"objectType"],[264,18,276,18],[264,23,276,23,"undefined"],[264,32,276,32],[264,34,277,8,"normalizedSchema"],[264,50,277,24],[264,51,277,25,"objectType"],[264,61,277,35],[264,64,277,38,"objectType"],[264,74,277,48],[265,4,278,4],[265,8,278,8,"presentation"],[265,20,278,20],[265,25,278,25,"undefined"],[265,34,278,34],[265,36,279,8,"normalizedSchema"],[265,52,279,24],[265,53,279,25,"presentation"],[265,65,279,37],[265,68,279,40,"presentation"],[265,80,279,52],[266,4,280,4],[266,8,280,8,"property"],[266,16,280,16],[266,21,280,21,"undefined"],[266,30,280,30],[266,32,281,8,"normalizedSchema"],[266,48,281,24],[266,49,281,25,"property"],[266,57,281,33],[266,60,281,36,"property"],[266,68,281,44],[267,4,282,4],[267,8,282,8,"defaultValue"],[267,20,282,20],[267,25,282,25,"undefined"],[267,34,282,34],[267,36,283,8,"normalizedSchema"],[267,52,283,24],[267,53,283,25,"default"],[267,60,283,32],[267,63,283,35,"defaultValue"],[267,75,283,47],[268,4,284,4],[268,11,284,11,"normalizedSchema"],[268,27,284,27],[269,2,285,0],[270,2,286,0],[271,0,287,0],[272,0,288,0],[273,2,289,0],[273,11,289,9,"isAlwaysOptional"],[273,27,289,25,"isAlwaysOptional"],[273,28,289,26,"type"],[273,32,289,30],[273,34,289,32,"objectType"],[273,44,289,42],[273,46,289,44],[274,4,290,4],[274,11,290,12,"type"],[274,15,290,16],[274,20,290,21],[274,27,290,28],[274,31,291,8,"objectType"],[274,41,291,18],[274,46,291,23],[274,53,291,30],[274,57,292,8,"type"],[274,61,292,12],[274,66,292,17],[274,74,292,25],[274,78,293,9,"type"],[274,82,293,13],[274,87,293,18],[274,99,293,30],[274,103,293,34,"isUserDefined"],[274,116,293,47],[274,117,293,48,"objectType"],[274,127,293,58],[274,128,293,60],[275,2,294,0],[276,2,295,0],[277,0,296,0],[278,0,297,0],[279,2,298,0],[279,11,298,9,"isNeverOptional"],[279,26,298,24,"isNeverOptional"],[279,27,298,25,"type"],[279,31,298,29],[279,33,298,31,"objectType"],[279,43,298,41],[279,45,298,43],[280,4,299,4],[280,11,299,11],[280,12,299,12,"type"],[280,16,299,16],[280,21,299,21],[280,27,299,27],[280,31,299,31,"type"],[280,35,299,35],[280,40,299,40],[280,45,299,45],[280,49,299,49,"type"],[280,53,299,53],[280,58,299,58],[280,74,299,74],[280,79,299,79,"isUserDefined"],[280,92,299,92],[280,93,299,93,"objectType"],[280,103,299,103],[280,104,299,104],[281,2,300,0],[282,2,301,0],[283,0,302,0],[284,0,303,0],[285,2,304,0],[285,11,304,9,"hasCollectionSuffix"],[285,30,304,28,"hasCollectionSuffix"],[285,31,304,29,"input"],[285,36,304,34],[285,38,304,36],[286,4,305,4],[286,8,305,10,"suffix"],[286,14,305,16],[286,17,305,19,"input"],[286,22,305,24],[286,23,305,25,"substring"],[286,32,305,34],[286,33,305,35,"input"],[286,38,305,40],[286,39,305,41,"length"],[286,45,305,47],[286,48,305,50,"COLLECTION_SUFFIX_LENGTH"],[286,72,305,74],[286,73,305,75],[287,4,306,4],[287,11,306,11],[287,12,306,12],[287,13,306,13,"COLLECTION_SHORTHAND_TO_NAME"],[287,41,306,41],[287,42,306,42,"suffix"],[287,48,306,48],[287,49,306,49],[288,2,307,0],[289,2,308,0],[290,0,309,0],[291,0,310,0],[292,2,311,0],[292,11,311,9,"assertNotUsingShorthand"],[292,34,311,32,"assertNotUsingShorthand"],[292,35,311,33,"input"],[292,40,311,38],[292,42,311,40,"info"],[292,46,311,44],[292,48,311,46],[293,4,312,4],[293,8,312,8],[293,9,312,9,"input"],[293,14,312,14],[293,16,312,16],[294,6,313,8],[295,4,314,4],[296,4,315,4],[296,8,315,10,"shorthands"],[296,18,315,20],[296,21,315,23,"extractShorthands"],[296,38,315,40],[296,39,315,41,"input"],[296,44,315,46],[296,45,315,47],[297,4,316,4],[297,8,316,8,"message"],[297,15,316,15],[297,18,316,18],[297,43,316,43,"shorthands"],[297,53,316,53],[297,54,316,54,"all"],[297,57,316,57],[297,58,316,58,"join"],[297,62,316,62],[297,63,316,63],[297,72,316,72],[297,73,316,73],[297,87,316,87],[297,90,317,8],[297,139,317,57],[298,4,318,4],[298,8,318,8,"shorthands"],[298,18,318,18],[298,19,318,19,"presentationType"],[298,35,318,35],[298,37,318,37],[299,6,319,8,"message"],[299,13,319,15],[299,17,319,19],[299,56,319,58,"shorthands"],[299,66,319,68],[299,67,319,69,"presentationType"],[299,83,319,85],[299,117,319,119],[300,4,320,4],[301,4,321,4],[301,5,321,5],[301,6,321,6],[301,8,321,8,"_$$_REQUIRE"],[301,19,321,8],[301,20,321,8,"_dependencyMap"],[301,34,321,8],[301,52,321,17,"assert"],[301,58,321,23],[301,60,321,25,"shorthands"],[301,70,321,35],[301,71,321,36,"all"],[301,74,321,39],[301,75,321,40,"length"],[301,81,321,46],[301,86,321,51],[301,87,321,52],[301,89,321,54,"propError"],[301,98,321,63],[301,99,321,64,"info"],[301,103,321,68],[301,105,321,70,"message"],[301,112,321,77],[301,113,321,78],[301,114,321,79],[302,2,322,0],[303,2,323,0],[304,0,324,0],[305,0,325,0],[306,2,326,0],[306,11,326,9,"extractShorthands"],[306,28,326,26,"extractShorthands"],[306,29,326,27,"input"],[306,34,326,32],[306,36,326,34],[307,4,327,4],[307,8,327,10,"shorthands"],[307,18,327,20],[307,21,327,23],[308,6,327,25,"all"],[308,9,327,28],[308,11,327,30],[309,4,327,33],[309,5,327,34],[310,4,328,4],[310,8,328,8,"hasCollectionSuffix"],[310,27,328,27],[310,28,328,28,"input"],[310,33,328,33],[310,34,328,34],[310,36,328,36],[311,6,329,8,"shorthands"],[311,16,329,18],[311,17,329,19,"all"],[311,20,329,22],[311,21,329,23,"push"],[311,25,329,27],[311,26,329,28,"input"],[311,31,329,33],[311,32,329,34,"substring"],[311,41,329,43],[311,42,329,44,"input"],[311,47,329,49],[311,48,329,50,"length"],[311,54,329,56],[311,57,329,59,"COLLECTION_SUFFIX_LENGTH"],[311,81,329,83],[311,82,329,84],[311,83,329,85],[312,6,330,8,"input"],[312,11,330,13],[312,14,330,16,"input"],[312,19,330,21],[312,20,330,22,"substring"],[312,29,330,31],[312,30,330,32],[312,31,330,33],[312,33,330,35,"input"],[312,38,330,40],[312,39,330,41,"length"],[312,45,330,47],[312,48,330,50,"COLLECTION_SUFFIX_LENGTH"],[312,72,330,74],[312,73,330,75],[313,4,331,4],[314,4,332,4],[314,8,332,8,"input"],[314,13,332,13],[314,14,332,14,"endsWith"],[314,22,332,22],[314,23,332,23,"OPTIONAL_MARKER"],[314,38,332,38],[314,39,332,39],[314,41,332,41],[315,6,333,8,"shorthands"],[315,16,333,18],[315,17,333,19,"all"],[315,20,333,22],[315,21,333,23,"push"],[315,25,333,27],[315,26,333,28,"OPTIONAL_MARKER"],[315,41,333,43],[315,42,333,44],[316,6,334,8,"input"],[316,11,334,13],[316,14,334,16,"input"],[316,19,334,21],[316,20,334,22,"substring"],[316,29,334,31],[316,30,334,32],[316,31,334,33],[316,33,334,35,"input"],[316,38,334,40],[316,39,334,41,"length"],[316,45,334,47],[316,48,334,50,"OPTIONAL_MARKER"],[316,63,334,65],[316,64,334,66,"length"],[316,70,334,72],[316,71,334,73],[317,4,335,4],[318,4,336,4],[318,8,336,8,"isPresentationType"],[318,26,336,26],[318,27,336,27,"input"],[318,32,336,32],[318,33,336,33],[318,35,336,35],[319,6,337,8,"shorthands"],[319,16,337,18],[319,17,337,19,"all"],[319,20,337,22],[319,21,337,23,"push"],[319,25,337,27],[319,26,337,28,"input"],[319,31,337,33],[319,32,337,34],[320,6,338,8,"shorthands"],[320,16,338,18],[320,17,338,19,"presentationType"],[320,33,338,35],[320,36,338,38,"input"],[320,41,338,43],[321,4,339,4],[322,4,340,4],[322,11,340,11,"shorthands"],[322,21,340,21],[323,2,341,0],[324,2,342,0],[325,0,343,0],[326,0,344,0],[327,0,345,0],[328,0,346,0],[329,2,347,0],[329,11,347,9,"propError"],[329,20,347,18,"propError"],[329,21,347,19,"info"],[329,25,347,23],[329,27,347,25,"message"],[329,34,347,32],[329,36,347,34],[330,4,348,4],[330,11,348,11],[331,6,348,11],[331,13,348,17],[331,18,348,21,"_$$_REQUIRE"],[331,29,348,21],[331,30,348,21,"_dependencyMap"],[331,44,348,21],[331,62,348,30,"PropertySchemaParseError"],[331,86,348,54],[331,88,348,55,"message"],[331,95,348,62],[331,97,348,64,"info"],[331,101,348,68],[331,102,348,69],[332,4,348,69],[333,2,349,0],[334,2,350,0],[335,0,351,0],[336,0,352,0],[337,2,353,0],[337,11,353,9,"objectError"],[337,22,353,20,"objectError"],[337,23,353,21,"objectName"],[337,33,353,31],[337,35,353,33,"message"],[337,42,353,40],[337,44,353,42],[338,4,354,4],[338,11,354,11],[339,6,354,11],[339,13,354,17],[339,18,354,21,"_$$_REQUIRE"],[339,29,354,21],[339,30,354,21,"_dependencyMap"],[339,44,354,21],[339,62,354,30,"ObjectSchemaParseError"],[339,84,354,52],[339,86,354,53,"message"],[339,93,354,60],[339,95,354,62],[340,8,354,64,"objectName"],[340,18,354,74],[340,20,354,64,"objectName"],[341,6,354,75],[341,7,354,76],[341,8,354,77],[342,4,354,77],[343,2,355,0],[344,2,356,0],[345,0,357,0],[346,0,358,0],[347,2,359,0],[347,11,359,9,"extractGeneric"],[347,25,359,23,"extractGeneric"],[347,26,359,24,"type"],[347,30,359,28],[347,32,359,30],[348,4,360,4],[348,8,360,10,"bracketStart"],[348,20,360,22],[348,23,360,25,"type"],[348,27,360,29],[348,28,360,30,"indexOf"],[348,35,360,37],[348,36,360,38],[348,39,360,41],[348,40,360,42],[349,4,361,4],[349,8,361,10,"bracketEnd"],[349,18,361,20],[349,21,361,23,"type"],[349,25,361,27],[349,26,361,28,"indexOf"],[349,33,361,35],[349,34,361,36],[349,37,361,39],[349,39,361,41,"bracketStart"],[349,51,361,53],[349,52,361,54],[350,4,362,4],[350,8,362,8,"bracketStart"],[350,20,362,20],[350,25,362,25],[350,26,362,26],[350,27,362,27],[350,29,362,29],[351,6,363,8],[351,13,363,15],[352,8,363,17,"typeBase"],[352,16,363,25],[352,18,363,27,"type"],[353,6,363,32],[353,7,363,33],[354,4,364,4],[355,4,365,4],[355,11,365,11],[356,6,365,13,"typeBase"],[356,14,365,21],[356,16,365,23,"type"],[356,20,365,27],[356,21,365,28,"substring"],[356,30,365,37],[356,31,365,38],[356,32,365,39],[356,34,365,41,"bracketStart"],[356,46,365,53],[356,47,365,54],[357,6,365,56,"typeArgument"],[357,18,365,68],[357,20,365,70,"type"],[357,24,365,74],[357,25,365,75,"substring"],[357,34,365,84],[357,35,365,85,"bracketStart"],[357,47,365,97],[357,50,365,100],[357,51,365,101],[357,53,365,103,"bracketEnd"],[357,63,365,113],[358,4,365,115],[358,5,365,116],[359,2,366,0],[360,2,367,0,"exports"],[360,9,367,7],[360,10,367,8,"extractGeneric"],[360,24,367,22],[360,27,367,25,"extractGeneric"],[360,41,367,39],[361,0,367,40],[361,3]],"functionMap":{"names":["<global>","isPrimitive","isCollection","isPresentationType","isUserDefined","normalizeRealmSchema","normalizeObjectSchema","<anonymous>","arg.properties.map$argument_0","normalizePropertySchemas","normalizePropertySchema","normalizePropertySchemaShorthand","normalizePropertySchemaObject","isAlwaysOptional","isNeverOptional","hasCollectionSuffix","assertNotUsingShorthand","extractShorthands","propError","objectError","extractGeneric"],"mappings":"AAA;ACgD;CDE;AEC;CFE;AGC;CHE;AIC;CJE;AKI;CLE;AMK;yCCE,uFD;kEEY,mCF;CNiB;ASK;CTW;AUI;CVM;AWM;CX8E;AYK;CZoE;AaI;CbK;AcI;CdE;AeI;CfG;AgBI;ChBW;AiBI;CjBe;AkBM;WXC,0DW;ClBC;AmBI;WZC,kEY;CnBC;AoBI;CpBO"}},"type":"js/module"}]}