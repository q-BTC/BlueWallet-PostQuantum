{"dependencies":[{"name":"../common/TokenStream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":18,"index":58},"end":{"line":2,"column":50,"index":90}}],"key":"vGDH+tOFOSMdeulZRr3iYmyZGhY="}},{"name":"../tokenizer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":15,"index":15},"end":{"line":1,"column":38,"index":38}}],"key":"CeLPNCNjt8y0xnwsIyTQzXoUUj0="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var tokenStream = new (_$$_REQUIRE(_dependencyMap[0], \"../common/TokenStream\"))();\n  var astToTokens = {\n    decorator: function decorator(handlers) {\n      var curNode = null;\n      var prev = {\n        len: 0,\n        node: null\n      };\n      var nodes = [prev];\n      var buffer = '';\n      return {\n        children: handlers.children,\n        node: function node(_node) {\n          var tmp = curNode;\n          curNode = _node;\n          handlers.node.call(this, _node);\n          curNode = tmp;\n        },\n        chunk: function chunk(_chunk) {\n          buffer += _chunk;\n          if (prev.node !== curNode) {\n            nodes.push({\n              len: _chunk.length,\n              node: curNode\n            });\n          } else {\n            prev.len += _chunk.length;\n          }\n        },\n        result: function result() {\n          return prepareTokens(buffer, nodes);\n        }\n      };\n    }\n  };\n  function prepareTokens(str, nodes) {\n    var tokens = [];\n    var nodesOffset = 0;\n    var nodesIndex = 0;\n    var currentNode = nodes ? nodes[nodesIndex].node : null;\n    _$$_REQUIRE(_dependencyMap[1], \"../tokenizer\")(str, tokenStream);\n    while (!tokenStream.eof) {\n      if (nodes) {\n        while (nodesIndex < nodes.length && nodesOffset + nodes[nodesIndex].len <= tokenStream.tokenStart) {\n          nodesOffset += nodes[nodesIndex++].len;\n          currentNode = nodes[nodesIndex].node;\n        }\n      }\n      tokens.push({\n        type: tokenStream.tokenType,\n        value: tokenStream.getTokenValue(),\n        index: tokenStream.tokenIndex,\n        // TODO: remove it, temporary solution\n        balance: tokenStream.balance[tokenStream.tokenIndex],\n        // TODO: remove it, temporary solution\n        node: currentNode\n      });\n      tokenStream.next();\n      // console.log({ ...tokens[tokens.length - 1], node: undefined });\n    }\n    return tokens;\n  }\n  module.exports = function (value, syntax) {\n    if (typeof value === 'string') {\n      return prepareTokens(value, null);\n    }\n    return syntax.generate(value, astToTokens);\n  };\n});","lineCount":70,"map":[[2,2,3,0],[2,6,3,4,"tokenStream"],[2,17,3,15],[2,20,3,18],[2,25,3,18,"_$$_REQUIRE"],[2,36,3,18],[2,37,3,18,"_dependencyMap"],[2,51,3,18],[2,82,3,34],[2,83,3,35],[3,2,4,0],[3,6,4,4,"astToTokens"],[3,17,4,15],[3,20,4,18],[4,4,5,4,"decorator"],[4,13,5,13],[4,15,5,15],[4,24,5,4,"decorator"],[4,33,5,13,"decorator"],[4,34,5,24,"handlers"],[4,42,5,32],[4,44,5,34],[5,6,6,8],[5,10,6,12,"curNode"],[5,17,6,19],[5,20,6,22],[5,24,6,26],[6,6,7,8],[6,10,7,12,"prev"],[6,14,7,16],[6,17,7,19],[7,8,7,21,"len"],[7,11,7,24],[7,13,7,26],[7,14,7,27],[8,8,7,29,"node"],[8,12,7,33],[8,14,7,35],[9,6,7,40],[9,7,7,41],[10,6,8,8],[10,10,8,12,"nodes"],[10,15,8,17],[10,18,8,20],[10,19,8,21,"prev"],[10,23,8,25],[10,24,8,26],[11,6,9,8],[11,10,9,12,"buffer"],[11,16,9,18],[11,19,9,21],[11,21,9,23],[12,6,11,8],[12,13,11,15],[13,8,12,12,"children"],[13,16,12,20],[13,18,12,22,"handlers"],[13,26,12,30],[13,27,12,31,"children"],[13,35,12,39],[14,8,13,12,"node"],[14,12,13,16],[14,14,13,18],[14,23,13,12,"node"],[14,27,13,16,"node"],[14,28,13,27,"node"],[14,33,13,31],[14,35,13,33],[15,10,14,16],[15,14,14,20,"tmp"],[15,17,14,23],[15,20,14,26,"curNode"],[15,27,14,33],[16,10,15,16,"curNode"],[16,17,15,23],[16,20,15,26,"node"],[16,25,15,30],[17,10,16,16,"handlers"],[17,18,16,24],[17,19,16,25,"node"],[17,23,16,29],[17,24,16,30,"call"],[17,28,16,34],[17,29,16,35],[17,33,16,39],[17,35,16,41,"node"],[17,40,16,45],[17,41,16,46],[18,10,17,16,"curNode"],[18,17,17,23],[18,20,17,26,"tmp"],[18,23,17,29],[19,8,18,12],[19,9,18,13],[20,8,19,12,"chunk"],[20,13,19,17],[20,15,19,19],[20,24,19,12,"chunk"],[20,29,19,17,"chunk"],[20,30,19,28,"chunk"],[20,36,19,33],[20,38,19,35],[21,10,20,16,"buffer"],[21,16,20,22],[21,20,20,26,"chunk"],[21,26,20,31],[22,10,21,16],[22,14,21,20,"prev"],[22,18,21,24],[22,19,21,25,"node"],[22,23,21,29],[22,28,21,34,"curNode"],[22,35,21,41],[22,37,21,43],[23,12,22,20,"nodes"],[23,17,22,25],[23,18,22,26,"push"],[23,22,22,30],[23,23,22,31],[24,14,23,24,"len"],[24,17,23,27],[24,19,23,29,"chunk"],[24,25,23,34],[24,26,23,35,"length"],[24,32,23,41],[25,14,24,24,"node"],[25,18,24,28],[25,20,24,30,"curNode"],[26,12,25,20],[26,13,25,21],[26,14,25,22],[27,10,26,16],[27,11,26,17],[27,17,26,23],[28,12,27,20,"prev"],[28,16,27,24],[28,17,27,25,"len"],[28,20,27,28],[28,24,27,32,"chunk"],[28,30,27,37],[28,31,27,38,"length"],[28,37,27,44],[29,10,28,16],[30,8,29,12],[30,9,29,13],[31,8,30,12,"result"],[31,14,30,18],[31,16,30,20],[31,25,30,12,"result"],[31,31,30,18,"result"],[31,32,30,18],[31,34,30,31],[32,10,31,16],[32,17,31,23,"prepareTokens"],[32,30,31,36],[32,31,31,37,"buffer"],[32,37,31,43],[32,39,31,45,"nodes"],[32,44,31,50],[32,45,31,51],[33,8,32,12],[34,6,33,8],[34,7,33,9],[35,4,34,4],[36,2,35,0],[36,3,35,1],[37,2,37,0],[37,11,37,9,"prepareTokens"],[37,24,37,22,"prepareTokens"],[37,25,37,23,"str"],[37,28,37,26],[37,30,37,28,"nodes"],[37,35,37,33],[37,37,37,35],[38,4,38,4],[38,8,38,8,"tokens"],[38,14,38,14],[38,17,38,17],[38,19,38,19],[39,4,39,4],[39,8,39,8,"nodesOffset"],[39,19,39,19],[39,22,39,22],[39,23,39,23],[40,4,40,4],[40,8,40,8,"nodesIndex"],[40,18,40,18],[40,21,40,21],[40,22,40,22],[41,4,41,4],[41,8,41,8,"currentNode"],[41,19,41,19],[41,22,41,22,"nodes"],[41,27,41,27],[41,30,41,30,"nodes"],[41,35,41,35],[41,36,41,36,"nodesIndex"],[41,46,41,46],[41,47,41,47],[41,48,41,48,"node"],[41,52,41,52],[41,55,41,55],[41,59,41,59],[42,4,43,4,"_$$_REQUIRE"],[42,15,43,4],[42,16,43,4,"_dependencyMap"],[42,30,43,4],[42,51,43,13,"str"],[42,54,43,16],[42,56,43,18,"tokenStream"],[42,67,43,29],[42,68,43,30],[43,4,45,4],[43,11,45,11],[43,12,45,12,"tokenStream"],[43,23,45,23],[43,24,45,24,"eof"],[43,27,45,27],[43,29,45,29],[44,6,46,8],[44,10,46,12,"nodes"],[44,15,46,17],[44,17,46,19],[45,8,47,12],[45,15,47,19,"nodesIndex"],[45,25,47,29],[45,28,47,32,"nodes"],[45,33,47,37],[45,34,47,38,"length"],[45,40,47,44],[45,44,47,48,"nodesOffset"],[45,55,47,59],[45,58,47,62,"nodes"],[45,63,47,67],[45,64,47,68,"nodesIndex"],[45,74,47,78],[45,75,47,79],[45,76,47,80,"len"],[45,79,47,83],[45,83,47,87,"tokenStream"],[45,94,47,98],[45,95,47,99,"tokenStart"],[45,105,47,109],[45,107,47,111],[46,10,48,16,"nodesOffset"],[46,21,48,27],[46,25,48,31,"nodes"],[46,30,48,36],[46,31,48,37,"nodesIndex"],[46,41,48,47],[46,43,48,49],[46,44,48,50],[46,45,48,51,"len"],[46,48,48,54],[47,10,49,16,"currentNode"],[47,21,49,27],[47,24,49,30,"nodes"],[47,29,49,35],[47,30,49,36,"nodesIndex"],[47,40,49,46],[47,41,49,47],[47,42,49,48,"node"],[47,46,49,52],[48,8,50,12],[49,6,51,8],[50,6,53,8,"tokens"],[50,12,53,14],[50,13,53,15,"push"],[50,17,53,19],[50,18,53,20],[51,8,54,12,"type"],[51,12,54,16],[51,14,54,18,"tokenStream"],[51,25,54,29],[51,26,54,30,"tokenType"],[51,35,54,39],[52,8,55,12,"value"],[52,13,55,17],[52,15,55,19,"tokenStream"],[52,26,55,30],[52,27,55,31,"getTokenValue"],[52,40,55,44],[52,41,55,45],[52,42,55,46],[53,8,56,12,"index"],[53,13,56,17],[53,15,56,19,"tokenStream"],[53,26,56,30],[53,27,56,31,"tokenIndex"],[53,37,56,41],[54,8,56,43],[55,8,57,12,"balance"],[55,15,57,19],[55,17,57,21,"tokenStream"],[55,28,57,32],[55,29,57,33,"balance"],[55,36,57,40],[55,37,57,41,"tokenStream"],[55,48,57,52],[55,49,57,53,"tokenIndex"],[55,59,57,63],[55,60,57,64],[56,8,57,66],[57,8,58,12,"node"],[57,12,58,16],[57,14,58,18,"currentNode"],[58,6,59,8],[58,7,59,9],[58,8,59,10],[59,6,60,8,"tokenStream"],[59,17,60,19],[59,18,60,20,"next"],[59,22,60,24],[59,23,60,25],[59,24,60,26],[60,6,61,8],[61,4,62,4],[62,4,64,4],[62,11,64,11,"tokens"],[62,17,64,17],[63,2,65,0],[64,2,67,0,"module"],[64,8,67,6],[64,9,67,7,"exports"],[64,16,67,14],[64,19,67,17],[64,29,67,26,"value"],[64,34,67,31],[64,36,67,33,"syntax"],[64,42,67,39],[64,44,67,41],[65,4,68,4],[65,8,68,8],[65,15,68,15,"value"],[65,20,68,20],[65,25,68,25],[65,33,68,33],[65,35,68,35],[66,6,69,8],[66,13,69,15,"prepareTokens"],[66,26,69,28],[66,27,69,29,"value"],[66,32,69,34],[66,34,69,36],[66,38,69,40],[66,39,69,41],[67,4,70,4],[68,4,72,4],[68,11,72,11,"syntax"],[68,17,72,17],[68,18,72,18,"generate"],[68,26,72,26],[68,27,72,27,"value"],[68,32,72,32],[68,34,72,34,"astToTokens"],[68,45,72,45],[68,46,72,46],[69,2,73,0],[69,3,73,1],[70,0,73,2],[70,3]],"functionMap":{"names":["<global>","astToTokens.decorator","node","chunk","result","prepareTokens","module.exports"],"mappings":"AAA;eCI;kBCQ;aDK;mBEC;aFU;oBGC;aHE;KDE;AKG;CL4B;iBME;CNM"}},"type":"js/module"}]}