{"dependencies":[{"name":"./polynomial","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":19,"index":19},"end":{"line":1,"column":42,"index":42}},{"start":{"line":1,"column":19,"index":19},"end":{"line":1,"column":42,"index":42}}],"key":"MjZY/rEGZsczUXN0UsBvSLfXv8w="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function ReedSolomonEncoder(degree) {\n    this.genPoly = undefined;\n    this.degree = degree;\n    if (this.degree) this.initialize(this.degree);\n  }\n\n  /**\n   * Initialize the encoder.\n   * The input param should correspond to the number of error correction codewords.\n   *\n   * @param  {Number} degree\n   */\n  ReedSolomonEncoder.prototype.initialize = function initialize(degree) {\n    // create an irreducible generator polynomial\n    this.degree = degree;\n    this.genPoly = _$$_REQUIRE(_dependencyMap[0], \"./polynomial\").generateECPolynomial(this.degree);\n  };\n\n  /**\n   * Encodes a chunk of data\n   *\n   * @param  {Uint8Array} data Buffer containing input data\n   * @return {Uint8Array}      Buffer containing encoded data\n   */\n  ReedSolomonEncoder.prototype.encode = function encode(data) {\n    if (!this.genPoly) {\n      throw new Error('Encoder not initialized');\n    }\n\n    // Calculate EC for this data block\n    // extends data size to data+genPoly size\n    var paddedData = new Uint8Array(data.length + this.degree);\n    paddedData.set(data);\n\n    // The error correction codewords are the remainder after dividing the data codewords\n    // by a generator polynomial\n    var remainder = _$$_REQUIRE(_dependencyMap[0], \"./polynomial\").mod(paddedData, this.genPoly);\n\n    // return EC data blocks (last n byte, where n is the degree of genPoly)\n    // If coefficients number in remainder are less than genPoly degree,\n    // pad with 0s to the left to reach the needed number of coefficients\n    var start = this.degree - remainder.length;\n    if (start > 0) {\n      var buff = new Uint8Array(this.degree);\n      buff.set(remainder, start);\n      return buff;\n    }\n    return remainder;\n  };\n  module.exports = ReedSolomonEncoder;\n});","lineCount":52,"map":[[2,2,3,0],[2,11,3,9,"ReedSolomonEncoder"],[2,29,3,27,"ReedSolomonEncoder"],[2,30,3,29,"degree"],[2,36,3,35],[2,38,3,37],[3,4,4,2],[3,8,4,6],[3,9,4,7,"genPoly"],[3,16,4,14],[3,19,4,17,"undefined"],[3,28,4,26],[4,4,5,2],[4,8,5,6],[4,9,5,7,"degree"],[4,15,5,13],[4,18,5,16,"degree"],[4,24,5,22],[5,4,7,2],[5,8,7,6],[5,12,7,10],[5,13,7,11,"degree"],[5,19,7,17],[5,21,7,19],[5,25,7,23],[5,26,7,24,"initialize"],[5,36,7,34],[5,37,7,35],[5,41,7,39],[5,42,7,40,"degree"],[5,48,7,46],[5,49,7,47],[6,2,8,0],[8,2,10,0],[9,0,11,0],[10,0,12,0],[11,0,13,0],[12,0,14,0],[13,0,15,0],[14,2,16,0,"ReedSolomonEncoder"],[14,20,16,18],[14,21,16,19,"prototype"],[14,30,16,28],[14,31,16,29,"initialize"],[14,41,16,39],[14,44,16,42],[14,53,16,51,"initialize"],[14,63,16,61,"initialize"],[14,64,16,63,"degree"],[14,70,16,69],[14,72,16,71],[15,4,17,2],[16,4,18,2],[16,8,18,6],[16,9,18,7,"degree"],[16,15,18,13],[16,18,18,16,"degree"],[16,24,18,22],[17,4,19,2],[17,8,19,6],[17,9,19,7,"genPoly"],[17,16,19,14],[17,19,19,17,"_$$_REQUIRE"],[17,30,19,17],[17,31,19,17,"_dependencyMap"],[17,45,19,17],[17,66,19,28,"generateECPolynomial"],[17,86,19,48],[17,87,19,49],[17,91,19,53],[17,92,19,54,"degree"],[17,98,19,60],[17,99,19,61],[18,2,20,0],[18,3,20,1],[20,2,22,0],[21,0,23,0],[22,0,24,0],[23,0,25,0],[24,0,26,0],[25,0,27,0],[26,2,28,0,"ReedSolomonEncoder"],[26,20,28,18],[26,21,28,19,"prototype"],[26,30,28,28],[26,31,28,29,"encode"],[26,37,28,35],[26,40,28,38],[26,49,28,47,"encode"],[26,55,28,53,"encode"],[26,56,28,55,"data"],[26,60,28,59],[26,62,28,61],[27,4,29,2],[27,8,29,6],[27,9,29,7],[27,13,29,11],[27,14,29,12,"genPoly"],[27,21,29,19],[27,23,29,21],[28,6,30,4],[28,12,30,10],[28,16,30,14,"Error"],[28,21,30,19],[28,22,30,20],[28,47,30,45],[28,48,30,46],[29,4,31,2],[31,4,33,2],[32,4,34,2],[33,4,35,2],[33,8,35,8,"paddedData"],[33,18,35,18],[33,21,35,21],[33,25,35,25,"Uint8Array"],[33,35,35,35],[33,36,35,36,"data"],[33,40,35,40],[33,41,35,41,"length"],[33,47,35,47],[33,50,35,50],[33,54,35,54],[33,55,35,55,"degree"],[33,61,35,61],[33,62,35,62],[34,4,36,2,"paddedData"],[34,14,36,12],[34,15,36,13,"set"],[34,18,36,16],[34,19,36,17,"data"],[34,23,36,21],[34,24,36,22],[36,4,38,2],[37,4,39,2],[38,4,40,2],[38,8,40,8,"remainder"],[38,17,40,17],[38,20,40,20,"_$$_REQUIRE"],[38,31,40,20],[38,32,40,20,"_dependencyMap"],[38,46,40,20],[38,67,40,31,"mod"],[38,70,40,34],[38,71,40,35,"paddedData"],[38,81,40,45],[38,83,40,47],[38,87,40,51],[38,88,40,52,"genPoly"],[38,95,40,59],[38,96,40,60],[40,4,42,2],[41,4,43,2],[42,4,44,2],[43,4,45,2],[43,8,45,8,"start"],[43,13,45,13],[43,16,45,16],[43,20,45,20],[43,21,45,21,"degree"],[43,27,45,27],[43,30,45,30,"remainder"],[43,39,45,39],[43,40,45,40,"length"],[43,46,45,46],[44,4,46,2],[44,8,46,6,"start"],[44,13,46,11],[44,16,46,14],[44,17,46,15],[44,19,46,17],[45,6,47,4],[45,10,47,10,"buff"],[45,14,47,14],[45,17,47,17],[45,21,47,21,"Uint8Array"],[45,31,47,31],[45,32,47,32],[45,36,47,36],[45,37,47,37,"degree"],[45,43,47,43],[45,44,47,44],[46,6,48,4,"buff"],[46,10,48,8],[46,11,48,9,"set"],[46,14,48,12],[46,15,48,13,"remainder"],[46,24,48,22],[46,26,48,24,"start"],[46,31,48,29],[46,32,48,30],[47,6,50,4],[47,13,50,11,"buff"],[47,17,50,15],[48,4,51,2],[49,4,53,2],[49,11,53,9,"remainder"],[49,20,53,18],[50,2,54,0],[50,3,54,1],[51,2,56,0,"module"],[51,8,56,6],[51,9,56,7,"exports"],[51,16,56,14],[51,19,56,17,"ReedSolomonEncoder"],[51,37,56,35],[52,0,56,35],[52,3]],"functionMap":{"names":["<global>","ReedSolomonEncoder","initialize","encode"],"mappings":"AAA;ACE;CDK;0CEQ;CFI;sCGQ;CH0B"}},"type":"js/module"}]}