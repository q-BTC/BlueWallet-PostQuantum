{"dependencies":[{"name":"boolbase","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":33,"index":294},"end":{"line":7,"column":52,"index":313}}],"key":"P0kvm9/ZH9zAYeh5oCkBwXUfwGk="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.generate = exports.compile = void 0;\n  var boolbase_1 = __importDefault(_$$_REQUIRE(_dependencyMap[0], \"boolbase\"));\n  /**\n   * Returns a function that checks if an elements index matches the given rule\n   * highly optimized to return the fastest solution.\n   *\n   * @param parsed A tuple [a, b], as returned by `parse`.\n   * @returns A highly optimized function that returns whether an index matches the nth-check.\n   * @example\n   *\n   * ```js\n   * const check = nthCheck.compile([2, 3]);\n   *\n   * check(0); // `false`\n   * check(1); // `false`\n   * check(2); // `true`\n   * check(3); // `false`\n   * check(4); // `true`\n   * check(5); // `false`\n   * check(6); // `true`\n   * ```\n   */\n  function compile(parsed) {\n    var a = parsed[0];\n    // Subtract 1 from `b`, to convert from one- to zero-indexed.\n    var b = parsed[1] - 1;\n    /*\n     * When `b <= 0`, `a * n` won't be lead to any matches for `a < 0`.\n     * Besides, the specification states that no elements are\n     * matched when `a` and `b` are 0.\n     *\n     * `b < 0` here as we subtracted 1 from `b` above.\n     */\n    if (b < 0 && a <= 0) return boolbase_1.default.falseFunc;\n    // When `a` is in the range -1..1, it matches any element (so only `b` is checked).\n    if (a === -1) return function (index) {\n      return index <= b;\n    };\n    if (a === 0) return function (index) {\n      return index === b;\n    };\n    // When `b <= 0` and `a === 1`, they match any element.\n    if (a === 1) return b < 0 ? boolbase_1.default.trueFunc : function (index) {\n      return index >= b;\n    };\n    /*\n     * Otherwise, modulo can be used to check if there is a match.\n     *\n     * Modulo doesn't care about the sign, so let's use `a`s absolute value.\n     */\n    var absA = Math.abs(a);\n    // Get `b mod a`, + a if this is negative.\n    var bMod = (b % absA + absA) % absA;\n    return a > 1 ? function (index) {\n      return index >= b && index % absA === bMod;\n    } : function (index) {\n      return index <= b && index % absA === bMod;\n    };\n  }\n  exports.compile = compile;\n  /**\n   * Returns a function that produces a monotonously increasing sequence of indices.\n   *\n   * If the sequence has an end, the returned function will return `null` after\n   * the last index in the sequence.\n   *\n   * @param parsed A tuple [a, b], as returned by `parse`.\n   * @returns A function that produces a sequence of indices.\n   * @example <caption>Always increasing (2n+3)</caption>\n   *\n   * ```js\n   * const gen = nthCheck.generate([2, 3])\n   *\n   * gen() // `1`\n   * gen() // `3`\n   * gen() // `5`\n   * gen() // `8`\n   * gen() // `11`\n   * ```\n   *\n   * @example <caption>With end value (-2n+10)</caption>\n   *\n   * ```js\n   *\n   * const gen = nthCheck.generate([-2, 5]);\n   *\n   * gen() // 0\n   * gen() // 2\n   * gen() // 4\n   * gen() // null\n   * ```\n   */\n  function generate(parsed) {\n    var a = parsed[0];\n    // Subtract 1 from `b`, to convert from one- to zero-indexed.\n    var b = parsed[1] - 1;\n    var n = 0;\n    // Make sure to always return an increasing sequence\n    if (a < 0) {\n      var aPos_1 = -a;\n      // Get `b mod a`\n      var minValue_1 = (b % aPos_1 + aPos_1) % aPos_1;\n      return function () {\n        var val = minValue_1 + aPos_1 * n++;\n        return val > b ? null : val;\n      };\n    }\n    if (a === 0) return b < 0 ?\n    // There are no result â€” always return `null`\n    function () {\n      return null;\n    } :\n    // Return `b` exactly once\n    function () {\n      return n++ === 0 ? b : null;\n    };\n    if (b < 0) {\n      b += a * Math.ceil(-b / a);\n    }\n    return function () {\n      return a * n++ + b;\n    };\n  }\n  exports.generate = generate;\n});","lineCount":136,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__importDefault"],[4,21,2,19],[4,24,2,23],[4,28,2,27],[4,32,2,31],[4,36,2,35],[4,37,2,36,"__importDefault"],[4,52,2,51],[4,56,2,56],[4,66,2,66,"mod"],[4,69,2,69],[4,71,2,71],[5,4,3,4],[5,11,3,12,"mod"],[5,14,3,15],[5,18,3,19,"mod"],[5,21,3,22],[5,22,3,23,"__esModule"],[5,32,3,33],[5,35,3,37,"mod"],[5,38,3,40],[5,41,3,43],[6,6,3,45],[6,15,3,54],[6,17,3,56,"mod"],[7,4,3,60],[7,5,3,61],[8,2,4,0],[8,3,4,1],[9,2,5,0,"Object"],[9,8,5,6],[9,9,5,7,"defineProperty"],[9,23,5,21],[9,24,5,22,"exports"],[9,31,5,29],[9,33,5,31],[9,45,5,43],[9,47,5,45],[10,4,5,47,"value"],[10,9,5,52],[10,11,5,54],[11,2,5,59],[11,3,5,60],[11,4,5,61],[12,2,6,0,"exports"],[12,9,6,7],[12,10,6,8,"generate"],[12,18,6,16],[12,21,6,19,"exports"],[12,28,6,26],[12,29,6,27,"compile"],[12,36,6,34],[12,39,6,37],[12,44,6,42],[12,45,6,43],[13,2,7,0],[13,6,7,4,"boolbase_1"],[13,16,7,14],[13,19,7,17,"__importDefault"],[13,34,7,32],[13,35,7,33,"require"],[13,46,7,40],[13,47,7,40,"_dependencyMap"],[13,61,7,40],[13,76,7,51],[13,77,7,52],[13,78,7,53],[14,2,8,0],[15,0,9,0],[16,0,10,0],[17,0,11,0],[18,0,12,0],[19,0,13,0],[20,0,14,0],[21,0,15,0],[22,0,16,0],[23,0,17,0],[24,0,18,0],[25,0,19,0],[26,0,20,0],[27,0,21,0],[28,0,22,0],[29,0,23,0],[30,0,24,0],[31,0,25,0],[32,0,26,0],[33,0,27,0],[34,2,28,0],[34,11,28,9,"compile"],[34,18,28,16,"compile"],[34,19,28,17,"parsed"],[34,25,28,23],[34,27,28,25],[35,4,29,4],[35,8,29,8,"a"],[35,9,29,9],[35,12,29,12,"parsed"],[35,18,29,18],[35,19,29,19],[35,20,29,20],[35,21,29,21],[36,4,30,4],[37,4,31,4],[37,8,31,8,"b"],[37,9,31,9],[37,12,31,12,"parsed"],[37,18,31,18],[37,19,31,19],[37,20,31,20],[37,21,31,21],[37,24,31,24],[37,25,31,25],[38,4,32,4],[39,0,33,0],[40,0,34,0],[41,0,35,0],[42,0,36,0],[43,0,37,0],[44,0,38,0],[45,4,39,4],[45,8,39,8,"b"],[45,9,39,9],[45,12,39,12],[45,13,39,13],[45,17,39,17,"a"],[45,18,39,18],[45,22,39,22],[45,23,39,23],[45,25,40,8],[45,32,40,15,"boolbase_1"],[45,42,40,25],[45,43,40,26,"default"],[45,50,40,33],[45,51,40,34,"falseFunc"],[45,60,40,43],[46,4,41,4],[47,4,42,4],[47,8,42,8,"a"],[47,9,42,9],[47,14,42,14],[47,15,42,15],[47,16,42,16],[47,18,43,8],[47,25,43,15],[47,35,43,25,"index"],[47,40,43,30],[47,42,43,32],[48,6,43,34],[48,13,43,41,"index"],[48,18,43,46],[48,22,43,50,"b"],[48,23,43,51],[49,4,43,53],[49,5,43,54],[50,4,44,4],[50,8,44,8,"a"],[50,9,44,9],[50,14,44,14],[50,15,44,15],[50,17,45,8],[50,24,45,15],[50,34,45,25,"index"],[50,39,45,30],[50,41,45,32],[51,6,45,34],[51,13,45,41,"index"],[51,18,45,46],[51,23,45,51,"b"],[51,24,45,52],[52,4,45,54],[52,5,45,55],[53,4,46,4],[54,4,47,4],[54,8,47,8,"a"],[54,9,47,9],[54,14,47,14],[54,15,47,15],[54,17,48,8],[54,24,48,15,"b"],[54,25,48,16],[54,28,48,19],[54,29,48,20],[54,32,48,23,"boolbase_1"],[54,42,48,33],[54,43,48,34,"default"],[54,50,48,41],[54,51,48,42,"trueFunc"],[54,59,48,50],[54,62,48,53],[54,72,48,63,"index"],[54,77,48,68],[54,79,48,70],[55,6,48,72],[55,13,48,79,"index"],[55,18,48,84],[55,22,48,88,"b"],[55,23,48,89],[56,4,48,91],[56,5,48,92],[57,4,49,4],[58,0,50,0],[59,0,51,0],[60,0,52,0],[61,0,53,0],[62,4,54,4],[62,8,54,8,"absA"],[62,12,54,12],[62,15,54,15,"Math"],[62,19,54,19],[62,20,54,20,"abs"],[62,23,54,23],[62,24,54,24,"a"],[62,25,54,25],[62,26,54,26],[63,4,55,4],[64,4,56,4],[64,8,56,8,"bMod"],[64,12,56,12],[64,15,56,15],[64,16,56,17,"b"],[64,17,56,18],[64,20,56,21,"absA"],[64,24,56,25],[64,27,56,29,"absA"],[64,31,56,33],[64,35,56,37,"absA"],[64,39,56,41],[65,4,57,4],[65,11,57,11,"a"],[65,12,57,12],[65,15,57,15],[65,16,57,16],[65,19,58,10],[65,29,58,20,"index"],[65,34,58,25],[65,36,58,27],[66,6,58,29],[66,13,58,36,"index"],[66,18,58,41],[66,22,58,45,"b"],[66,23,58,46],[66,27,58,50,"index"],[66,32,58,55],[66,35,58,58,"absA"],[66,39,58,62],[66,44,58,67,"bMod"],[66,48,58,71],[67,4,58,73],[67,5,58,74],[67,8,59,10],[67,18,59,20,"index"],[67,23,59,25],[67,25,59,27],[68,6,59,29],[68,13,59,36,"index"],[68,18,59,41],[68,22,59,45,"b"],[68,23,59,46],[68,27,59,50,"index"],[68,32,59,55],[68,35,59,58,"absA"],[68,39,59,62],[68,44,59,67,"bMod"],[68,48,59,71],[69,4,59,73],[69,5,59,74],[70,2,60,0],[71,2,61,0,"exports"],[71,9,61,7],[71,10,61,8,"compile"],[71,17,61,15],[71,20,61,18,"compile"],[71,27,61,25],[72,2,62,0],[73,0,63,0],[74,0,64,0],[75,0,65,0],[76,0,66,0],[77,0,67,0],[78,0,68,0],[79,0,69,0],[80,0,70,0],[81,0,71,0],[82,0,72,0],[83,0,73,0],[84,0,74,0],[85,0,75,0],[86,0,76,0],[87,0,77,0],[88,0,78,0],[89,0,79,0],[90,0,80,0],[91,0,81,0],[92,0,82,0],[93,0,83,0],[94,0,84,0],[95,0,85,0],[96,0,86,0],[97,0,87,0],[98,0,88,0],[99,0,89,0],[100,0,90,0],[101,0,91,0],[102,0,92,0],[103,0,93,0],[104,2,94,0],[104,11,94,9,"generate"],[104,19,94,17,"generate"],[104,20,94,18,"parsed"],[104,26,94,24],[104,28,94,26],[105,4,95,4],[105,8,95,8,"a"],[105,9,95,9],[105,12,95,12,"parsed"],[105,18,95,18],[105,19,95,19],[105,20,95,20],[105,21,95,21],[106,4,96,4],[107,4,97,4],[107,8,97,8,"b"],[107,9,97,9],[107,12,97,12,"parsed"],[107,18,97,18],[107,19,97,19],[107,20,97,20],[107,21,97,21],[107,24,97,24],[107,25,97,25],[108,4,98,4],[108,8,98,8,"n"],[108,9,98,9],[108,12,98,12],[108,13,98,13],[109,4,99,4],[110,4,100,4],[110,8,100,8,"a"],[110,9,100,9],[110,12,100,12],[110,13,100,13],[110,15,100,15],[111,6,101,8],[111,10,101,12,"aPos_1"],[111,16,101,18],[111,19,101,21],[111,20,101,22,"a"],[111,21,101,23],[112,6,102,8],[113,6,103,8],[113,10,103,12,"minValue_1"],[113,20,103,22],[113,23,103,25],[113,24,103,27,"b"],[113,25,103,28],[113,28,103,31,"aPos_1"],[113,34,103,37],[113,37,103,41,"aPos_1"],[113,43,103,47],[113,47,103,51,"aPos_1"],[113,53,103,57],[114,6,104,8],[114,13,104,15],[114,25,104,27],[115,8,105,12],[115,12,105,16,"val"],[115,15,105,19],[115,18,105,22,"minValue_1"],[115,28,105,32],[115,31,105,35,"aPos_1"],[115,37,105,41],[115,40,105,44,"n"],[115,41,105,45],[115,43,105,47],[116,8,106,12],[116,15,106,19,"val"],[116,18,106,22],[116,21,106,25,"b"],[116,22,106,26],[116,25,106,29],[116,29,106,33],[116,32,106,36,"val"],[116,35,106,39],[117,6,107,8],[117,7,107,9],[118,4,108,4],[119,4,109,4],[119,8,109,8,"a"],[119,9,109,9],[119,14,109,14],[119,15,109,15],[119,17,110,8],[119,24,110,15,"b"],[119,25,110,16],[119,28,110,19],[119,29,110,20],[120,4,111,14],[121,4,112,16],[121,16,112,28],[122,6,112,30],[122,13,112,37],[122,17,112,41],[123,4,112,43],[123,5,112,44],[124,4,113,14],[125,4,114,16],[125,16,114,28],[126,6,114,30],[126,13,114,38,"n"],[126,14,114,39],[126,16,114,41],[126,21,114,46],[126,22,114,47],[126,25,114,50,"b"],[126,26,114,51],[126,29,114,54],[126,33,114,58],[127,4,114,61],[127,5,114,62],[128,4,115,4],[128,8,115,8,"b"],[128,9,115,9],[128,12,115,12],[128,13,115,13],[128,15,115,15],[129,6,116,8,"b"],[129,7,116,9],[129,11,116,13,"a"],[129,12,116,14],[129,15,116,17,"Math"],[129,19,116,21],[129,20,116,22,"ceil"],[129,24,116,26],[129,25,116,27],[129,26,116,28,"b"],[129,27,116,29],[129,30,116,32,"a"],[129,31,116,33],[129,32,116,34],[130,4,117,4],[131,4,118,4],[131,11,118,11],[131,23,118,23],[132,6,118,25],[132,13,118,32,"a"],[132,14,118,33],[132,17,118,36,"n"],[132,18,118,37],[132,20,118,39],[132,23,118,42,"b"],[132,24,118,43],[133,4,118,45],[133,5,118,46],[134,2,119,0],[135,2,120,0,"exports"],[135,9,120,7],[135,10,120,8,"generate"],[135,18,120,16],[135,21,120,19,"generate"],[135,29,120,27],[136,0,120,28],[136,3]],"functionMap":{"names":["<global>","<anonymous>","compile","generate"],"mappings":"AAA;wDCC;CDE;AEwB;eDe,uCC;eDE,wCC;qDDG,uCC;UDU,gEC;UDC,gEC;CFC;AGkC;eFU;SEG;gBFK,4BE;gBFE,8CE;WFI,mCE;CHC"}},"type":"js/module"}]}