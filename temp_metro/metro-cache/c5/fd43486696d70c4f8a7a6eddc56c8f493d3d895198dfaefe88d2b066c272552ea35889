{"dependencies":[{"name":"./base64","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":38,"column":13,"index":1983},"end":{"line":38,"column":32,"index":2002}},{"start":{"line":38,"column":13,"index":1983},"end":{"line":38,"column":32,"index":2002}}],"key":"O6LhMdTTXj5wmqq6xzc81itukGU="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /* -*- Mode: js; js-indent-level: 2; -*- */\n  /*\n   * Copyright 2011 Mozilla Foundation and contributors\n   * Licensed under the New BSD license. See LICENSE or:\n   * http://opensource.org/licenses/BSD-3-Clause\n   *\n   * Based on the Base 64 VLQ implementation in Closure Compiler:\n   * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n   *\n   * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n   * Redistribution and use in source and binary forms, with or without\n   * modification, are permitted provided that the following conditions are\n   * met:\n   *\n   *  * Redistributions of source code must retain the above copyright\n   *    notice, this list of conditions and the following disclaimer.\n   *  * Redistributions in binary form must reproduce the above\n   *    copyright notice, this list of conditions and the following\n   *    disclaimer in the documentation and/or other materials provided\n   *    with the distribution.\n   *  * Neither the name of Google Inc. nor the names of its\n   *    contributors may be used to endorse or promote products derived\n   *    from this software without specific prior written permission.\n   *\n   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n   * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n   * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n   * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n   * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n   * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   */\n\n  // A single base 64 digit can contain 6 bits of data. For the base 64 variable\n  // length quantities we use in the source map spec, the first bit is the sign,\n  // the next four bits are the actual value, and the 6th bit is the\n  // continuation bit. The continuation bit tells us whether there are more\n  // digits in this value following this digit.\n  //\n  //   Continuation\n  //   |    Sign\n  //   |    |\n  //   V    V\n  //   101011\n\n  var VLQ_BASE_SHIFT = 5;\n\n  // binary: 100000\n  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n  // binary: 011111\n  var VLQ_BASE_MASK = VLQ_BASE - 1;\n\n  // binary: 100000\n  var VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n  /**\n   * Converts from a two-complement value to a value where the sign bit is\n   * placed in the least significant bit.  For example, as decimals:\n   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n   */\n  function toVLQSigned(aValue) {\n    return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n  }\n\n  /**\n   * Converts to a two-complement value from a value where the sign bit is\n   * placed in the least significant bit.  For example, as decimals:\n   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n   */\n  function fromVLQSigned(aValue) {\n    var isNegative = (aValue & 1) === 1;\n    var shifted = aValue >> 1;\n    return isNegative ? -shifted : shifted;\n  }\n\n  /**\n   * Returns the base 64 VLQ encoded value.\n   */\n  exports.encode = function base64VLQ_encode(aValue) {\n    var encoded = \"\";\n    var digit;\n    var vlq = toVLQSigned(aValue);\n    do {\n      digit = vlq & VLQ_BASE_MASK;\n      vlq >>>= VLQ_BASE_SHIFT;\n      if (vlq > 0) {\n        // There are still more digits in this value, so we must make sure the\n        // continuation bit is marked.\n        digit |= VLQ_CONTINUATION_BIT;\n      }\n      encoded += _$$_REQUIRE(_dependencyMap[0], \"./base64\").encode(digit);\n    } while (vlq > 0);\n    return encoded;\n  };\n\n  /**\n   * Decodes the next base 64 VLQ value from the given string and returns the\n   * value and the rest of the string via the out parameter.\n   */\n  exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n    var strLen = aStr.length;\n    var result = 0;\n    var shift = 0;\n    var continuation, digit;\n    do {\n      if (aIndex >= strLen) {\n        throw new Error(\"Expected more digits in base 64 VLQ value.\");\n      }\n      digit = _$$_REQUIRE(_dependencyMap[0], \"./base64\").decode(aStr.charCodeAt(aIndex++));\n      if (digit === -1) {\n        throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n      }\n      continuation = !!(digit & VLQ_CONTINUATION_BIT);\n      digit &= VLQ_BASE_MASK;\n      result = result + (digit << shift);\n      shift += VLQ_BASE_SHIFT;\n    } while (continuation);\n    aOutParam.value = fromVLQSigned(result);\n    aOutParam.rest = aIndex;\n  };\n});","lineCount":129,"map":[[2,2,1,0],[3,2,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,0,25,0],[27,0,26,0],[28,0,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,0,31,0],[33,0,32,0],[34,0,33,0],[35,0,34,0],[36,0,35,0],[37,0,36,0],[39,2,40,0],[40,2,41,0],[41,2,42,0],[42,2,43,0],[43,2,44,0],[44,2,45,0],[45,2,46,0],[46,2,47,0],[47,2,48,0],[48,2,49,0],[49,2,50,0],[51,2,52,0],[51,6,52,4,"VLQ_BASE_SHIFT"],[51,20,52,18],[51,23,52,21],[51,24,52,22],[53,2,54,0],[54,2,55,0],[54,6,55,4,"VLQ_BASE"],[54,14,55,12],[54,17,55,15],[54,18,55,16],[54,22,55,20,"VLQ_BASE_SHIFT"],[54,36,55,34],[56,2,57,0],[57,2,58,0],[57,6,58,4,"VLQ_BASE_MASK"],[57,19,58,17],[57,22,58,20,"VLQ_BASE"],[57,30,58,28],[57,33,58,31],[57,34,58,32],[59,2,60,0],[60,2,61,0],[60,6,61,4,"VLQ_CONTINUATION_BIT"],[60,26,61,24],[60,29,61,27,"VLQ_BASE"],[60,37,61,35],[62,2,63,0],[63,0,64,0],[64,0,65,0],[65,0,66,0],[66,0,67,0],[67,0,68,0],[68,2,69,0],[68,11,69,9,"toVLQSigned"],[68,22,69,20,"toVLQSigned"],[68,23,69,21,"aValue"],[68,29,69,27],[68,31,69,29],[69,4,70,2],[69,11,70,9,"aValue"],[69,17,70,15],[69,20,70,18],[69,21,70,19],[69,24,71,6],[69,25,71,8],[69,26,71,9,"aValue"],[69,32,71,15],[69,36,71,20],[69,37,71,21],[69,41,71,25],[69,42,71,26],[69,45,72,6],[69,46,72,7,"aValue"],[69,52,72,13],[69,56,72,17],[69,57,72,18],[69,61,72,22],[69,62,72,23],[70,2,73,0],[72,2,75,0],[73,0,76,0],[74,0,77,0],[75,0,78,0],[76,0,79,0],[77,0,80,0],[78,2,81,0],[78,11,81,9,"fromVLQSigned"],[78,24,81,22,"fromVLQSigned"],[78,25,81,23,"aValue"],[78,31,81,29],[78,33,81,31],[79,4,82,2],[79,8,82,6,"isNegative"],[79,18,82,16],[79,21,82,19],[79,22,82,20,"aValue"],[79,28,82,26],[79,31,82,29],[79,32,82,30],[79,38,82,36],[79,39,82,37],[80,4,83,2],[80,8,83,6,"shifted"],[80,15,83,13],[80,18,83,16,"aValue"],[80,24,83,22],[80,28,83,26],[80,29,83,27],[81,4,84,2],[81,11,84,9,"isNegative"],[81,21,84,19],[81,24,85,6],[81,25,85,7,"shifted"],[81,32,85,14],[81,35,86,6,"shifted"],[81,42,86,13],[82,2,87,0],[84,2,89,0],[85,0,90,0],[86,0,91,0],[87,2,92,0,"exports"],[87,9,92,7],[87,10,92,8,"encode"],[87,16,92,14],[87,19,92,17],[87,28,92,26,"base64VLQ_encode"],[87,44,92,42,"base64VLQ_encode"],[87,45,92,43,"aValue"],[87,51,92,49],[87,53,92,51],[88,4,93,2],[88,8,93,6,"encoded"],[88,15,93,13],[88,18,93,16],[88,20,93,18],[89,4,94,2],[89,8,94,6,"digit"],[89,13,94,11],[90,4,96,2],[90,8,96,6,"vlq"],[90,11,96,9],[90,14,96,12,"toVLQSigned"],[90,25,96,23],[90,26,96,24,"aValue"],[90,32,96,30],[90,33,96,31],[91,4,98,2],[91,7,98,5],[92,6,99,4,"digit"],[92,11,99,9],[92,14,99,12,"vlq"],[92,17,99,15],[92,20,99,18,"VLQ_BASE_MASK"],[92,33,99,31],[93,6,100,4,"vlq"],[93,9,100,7],[93,15,100,13,"VLQ_BASE_SHIFT"],[93,29,100,27],[94,6,101,4],[94,10,101,8,"vlq"],[94,13,101,11],[94,16,101,14],[94,17,101,15],[94,19,101,17],[95,8,102,6],[96,8,103,6],[97,8,104,6,"digit"],[97,13,104,11],[97,17,104,15,"VLQ_CONTINUATION_BIT"],[97,37,104,35],[98,6,105,4],[99,6,106,4,"encoded"],[99,13,106,11],[99,17,106,15,"_$$_REQUIRE"],[99,28,106,15],[99,29,106,15,"_dependencyMap"],[99,43,106,15],[99,60,106,22,"encode"],[99,66,106,28],[99,67,106,29,"digit"],[99,72,106,34],[99,73,106,35],[100,4,107,2],[100,5,107,3],[100,13,107,11,"vlq"],[100,16,107,14],[100,19,107,17],[100,20,107,18],[101,4,109,2],[101,11,109,9,"encoded"],[101,18,109,16],[102,2,110,0],[102,3,110,1],[104,2,112,0],[105,0,113,0],[106,0,114,0],[107,0,115,0],[108,2,116,0,"exports"],[108,9,116,7],[108,10,116,8,"decode"],[108,16,116,14],[108,19,116,17],[108,28,116,26,"base64VLQ_decode"],[108,44,116,42,"base64VLQ_decode"],[108,45,116,43,"aStr"],[108,49,116,47],[108,51,116,49,"aIndex"],[108,57,116,55],[108,59,116,57,"aOutParam"],[108,68,116,66],[108,70,116,68],[109,4,117,2],[109,8,117,6,"strLen"],[109,14,117,12],[109,17,117,15,"aStr"],[109,21,117,19],[109,22,117,20,"length"],[109,28,117,26],[110,4,118,2],[110,8,118,6,"result"],[110,14,118,12],[110,17,118,15],[110,18,118,16],[111,4,119,2],[111,8,119,6,"shift"],[111,13,119,11],[111,16,119,14],[111,17,119,15],[112,4,120,2],[112,8,120,6,"continuation"],[112,20,120,18],[112,22,120,20,"digit"],[112,27,120,25],[113,4,122,2],[113,7,122,5],[114,6,123,4],[114,10,123,8,"aIndex"],[114,16,123,14],[114,20,123,18,"strLen"],[114,26,123,24],[114,28,123,26],[115,8,124,6],[115,14,124,12],[115,18,124,16,"Error"],[115,23,124,21],[115,24,124,22],[115,68,124,66],[115,69,124,67],[116,6,125,4],[117,6,127,4,"digit"],[117,11,127,9],[117,14,127,12,"_$$_REQUIRE"],[117,25,127,12],[117,26,127,12,"_dependencyMap"],[117,40,127,12],[117,57,127,19,"decode"],[117,63,127,25],[117,64,127,26,"aStr"],[117,68,127,30],[117,69,127,31,"charCodeAt"],[117,79,127,41],[117,80,127,42,"aIndex"],[117,86,127,48],[117,88,127,50],[117,89,127,51],[117,90,127,52],[118,6,128,4],[118,10,128,8,"digit"],[118,15,128,13],[118,20,128,18],[118,21,128,19],[118,22,128,20],[118,24,128,22],[119,8,129,6],[119,14,129,12],[119,18,129,16,"Error"],[119,23,129,21],[119,24,129,22],[119,48,129,46],[119,51,129,49,"aStr"],[119,55,129,53],[119,56,129,54,"charAt"],[119,62,129,60],[119,63,129,61,"aIndex"],[119,69,129,67],[119,72,129,70],[119,73,129,71],[119,74,129,72],[119,75,129,73],[120,6,130,4],[121,6,132,4,"continuation"],[121,18,132,16],[121,21,132,19],[121,22,132,20],[121,24,132,22,"digit"],[121,29,132,27],[121,32,132,30,"VLQ_CONTINUATION_BIT"],[121,52,132,50],[121,53,132,51],[122,6,133,4,"digit"],[122,11,133,9],[122,15,133,13,"VLQ_BASE_MASK"],[122,28,133,26],[123,6,134,4,"result"],[123,12,134,10],[123,15,134,13,"result"],[123,21,134,19],[123,25,134,23,"digit"],[123,30,134,28],[123,34,134,32,"shift"],[123,39,134,37],[123,40,134,38],[124,6,135,4,"shift"],[124,11,135,9],[124,15,135,13,"VLQ_BASE_SHIFT"],[124,29,135,27],[125,4,136,2],[125,5,136,3],[125,13,136,11,"continuation"],[125,25,136,23],[126,4,138,2,"aOutParam"],[126,13,138,11],[126,14,138,12,"value"],[126,19,138,17],[126,22,138,20,"fromVLQSigned"],[126,35,138,33],[126,36,138,34,"result"],[126,42,138,40],[126,43,138,41],[127,4,139,2,"aOutParam"],[127,13,139,11],[127,14,139,12,"rest"],[127,18,139,16],[127,21,139,19,"aIndex"],[127,27,139,25],[128,2,140,0],[128,3,140,1],[129,0,140,2],[129,3]],"functionMap":{"names":["<global>","toVLQSigned","fromVLQSigned","base64VLQ_encode","base64VLQ_decode"],"mappings":"AAA;ACoE;CDI;AEQ;CFM;iBGK;CHkB;iBIM;CJwB"}},"type":"js/module"}]}