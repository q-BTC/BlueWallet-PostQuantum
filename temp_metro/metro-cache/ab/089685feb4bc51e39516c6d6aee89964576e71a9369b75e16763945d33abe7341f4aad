{"dependencies":[{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":405,"column":0,"index":14653}}],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE="}},{"name":"./psbtutils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":17,"column":20,"index":533},"end":{"line":17,"column":42,"index":555}},{"start":{"line":17,"column":20,"index":533},"end":{"line":17,"column":42,"index":555}},{"start":{"line":17,"column":20,"index":533},"end":{"line":17,"column":42,"index":555}},{"start":{"line":20,"column":20,"index":668},"end":{"line":20,"column":42,"index":690}},{"start":{"line":17,"column":20,"index":533},"end":{"line":17,"column":42,"index":555}}],"key":"KzmTqBWBJj59s2vSghhZMJ87sA4=","isOptional":false}},{"name":"../payments","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":19,"column":19,"index":624},"end":{"line":19,"column":41,"index":646}}],"key":"WSAUdGo/ePrG82HbWdGXFsBSzMA="}},{"name":"../payments/bip341","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":18,"column":17,"index":574},"end":{"line":18,"column":46,"index":603}},{"start":{"line":18,"column":17,"index":574},"end":{"line":18,"column":46,"index":603}},{"start":{"line":18,"column":17,"index":574},"end":{"line":18,"column":46,"index":603}},{"start":{"line":18,"column":17,"index":574},"end":{"line":18,"column":46,"index":603}},{"start":{"line":18,"column":17,"index":574},"end":{"line":18,"column":46,"index":603}},{"start":{"line":18,"column":17,"index":574},"end":{"line":18,"column":46,"index":603}},{"start":{"line":18,"column":17,"index":574},"end":{"line":18,"column":46,"index":603}},{"start":{"line":18,"column":17,"index":574},"end":{"line":18,"column":46,"index":603}}],"key":"2rcxSi3Lk+6JQlU4VqK5A7meWio="}},{"name":"../types","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":15,"column":16,"index":443},"end":{"line":15,"column":35,"index":462}},{"start":{"line":15,"column":16,"index":443},"end":{"line":15,"column":35,"index":462}},{"start":{"line":15,"column":16,"index":443},"end":{"line":15,"column":35,"index":462}}],"key":"2+h21LM/+NVMQKDHaRawSQRYYOQ="}},{"name":"../transaction","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":22,"index":486},"end":{"line":16,"column":47,"index":511}}],"key":"3PJ1d04jjGvYDErveZMfJokUzt8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/toConsumableArray\");\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.checkTaprootInputForSigs = exports.tapTreeFromList = exports.tapTreeToList = exports.tweakInternalPubKey = exports.checkTaprootOutputFields = exports.checkTaprootInputFields = exports.isTaprootOutput = exports.isTaprootInput = exports.serializeTaprootSignature = exports.tapScriptFinalizer = exports.toXOnly = void 0;\n  var toXOnly = function toXOnly(pubKey) {\n    return pubKey.length === 32 ? pubKey : pubKey.slice(1, 33);\n  };\n  exports.toXOnly = toXOnly;\n  /**\n   * Default tapscript finalizer. It searches for the `tapLeafHashToFinalize` if provided.\n   * Otherwise it will search for the tapleaf that has at least one signature and has the shortest path.\n   * @param inputIndex the position of the PSBT input.\n   * @param input the PSBT input.\n   * @param tapLeafHashToFinalize optional, if provided the finalizer will search for a tapleaf that has this hash\n   *                              and will try to build the finalScriptWitness.\n   * @returns the finalScriptWitness or throws an exception if no tapleaf found.\n   */\n  function tapScriptFinalizer(inputIndex, input, tapLeafHashToFinalize) {\n    var tapLeaf = findTapLeafToFinalize(input, inputIndex, tapLeafHashToFinalize);\n    try {\n      var sigs = sortSignatures(input, tapLeaf);\n      var witness = sigs.concat(tapLeaf.script).concat(tapLeaf.controlBlock);\n      return {\n        finalScriptWitness: (0, _$$_REQUIRE(_dependencyMap[1], \"./psbtutils\").witnessStackToScriptWitness)(witness)\n      };\n    } catch (err) {\n      throw new Error(`Can not finalize taproot input #${inputIndex}: ${err}`);\n    }\n  }\n  exports.tapScriptFinalizer = tapScriptFinalizer;\n  function serializeTaprootSignature(sig, sighashType) {\n    var sighashTypeByte = sighashType ? Buffer.from([sighashType]) : Buffer.from([]);\n    return Buffer.concat([sig, sighashTypeByte]);\n  }\n  exports.serializeTaprootSignature = serializeTaprootSignature;\n  function isTaprootInput(input) {\n    return input && !!(input.tapInternalKey || input.tapMerkleRoot || input.tapLeafScript && input.tapLeafScript.length || input.tapBip32Derivation && input.tapBip32Derivation.length || input.witnessUtxo && (0, _$$_REQUIRE(_dependencyMap[1], \"./psbtutils\").isP2TR)(input.witnessUtxo.script));\n  }\n  exports.isTaprootInput = isTaprootInput;\n  function isTaprootOutput(output, script) {\n    return output && !!(output.tapInternalKey || output.tapTree || output.tapBip32Derivation && output.tapBip32Derivation.length || script && (0, _$$_REQUIRE(_dependencyMap[1], \"./psbtutils\").isP2TR)(script));\n  }\n  exports.isTaprootOutput = isTaprootOutput;\n  function checkTaprootInputFields(inputData, newInputData, action) {\n    checkMixedTaprootAndNonTaprootInputFields(inputData, newInputData, action);\n    checkIfTapLeafInTree(inputData, newInputData, action);\n  }\n  exports.checkTaprootInputFields = checkTaprootInputFields;\n  function checkTaprootOutputFields(outputData, newOutputData, action) {\n    checkMixedTaprootAndNonTaprootOutputFields(outputData, newOutputData, action);\n    checkTaprootScriptPubkey(outputData, newOutputData);\n  }\n  exports.checkTaprootOutputFields = checkTaprootOutputFields;\n  function checkTaprootScriptPubkey(outputData, newOutputData) {\n    if (!newOutputData.tapTree && !newOutputData.tapInternalKey) return;\n    var tapInternalKey = newOutputData.tapInternalKey || outputData.tapInternalKey;\n    var tapTree = newOutputData.tapTree || outputData.tapTree;\n    if (tapInternalKey) {\n      var scriptPubkey = outputData.script;\n      var script = getTaprootScripPubkey(tapInternalKey, tapTree);\n      if (scriptPubkey && !scriptPubkey.equals(script)) throw new Error('Error adding output. Script or address missmatch.');\n    }\n  }\n  function getTaprootScripPubkey(tapInternalKey, tapTree) {\n    var scriptTree = tapTree && tapTreeFromList(tapTree.leaves);\n    var _ref = (0, _$$_REQUIRE(_dependencyMap[2], \"../payments\").p2tr)({\n        internalPubkey: tapInternalKey,\n        scriptTree: scriptTree\n      }),\n      output = _ref.output;\n    return output;\n  }\n  function tweakInternalPubKey(inputIndex, input) {\n    var tapInternalKey = input.tapInternalKey;\n    var outputKey = tapInternalKey && (0, _$$_REQUIRE(_dependencyMap[3], \"../payments/bip341\").tweakKey)(tapInternalKey, input.tapMerkleRoot);\n    if (!outputKey) throw new Error(`Cannot tweak tap internal key for input #${inputIndex}. Public key: ${tapInternalKey && tapInternalKey.toString('hex')}`);\n    return outputKey.x;\n  }\n  exports.tweakInternalPubKey = tweakInternalPubKey;\n  /**\n   * Convert a binary tree to a BIP371 type list. Each element of the list is (according to BIP371):\n   * One or more tuples representing the depth, leaf version, and script for a leaf in the Taproot tree,\n   * allowing the entire tree to be reconstructed. The tuples must be in depth first search order so that\n   * the tree is correctly reconstructed.\n   * @param tree the binary tap tree\n   * @returns a list of BIP 371 tapleaves\n   */\n  function tapTreeToList(tree) {\n    if (!(0, _$$_REQUIRE(_dependencyMap[4], \"../types\").isTaptree)(tree)) throw new Error('Cannot convert taptree to tapleaf list. Expecting a tapree structure.');\n    return _tapTreeToList(tree);\n  }\n  exports.tapTreeToList = tapTreeToList;\n  /**\n   * Convert a BIP371 TapLeaf list to a TapTree (binary).\n   * @param leaves a list of tapleaves where each element of the list is (according to BIP371):\n   * One or more tuples representing the depth, leaf version, and script for a leaf in the Taproot tree,\n   * allowing the entire tree to be reconstructed. The tuples must be in depth first search order so that\n   * the tree is correctly reconstructed.\n   * @returns the corresponding taptree, or throws an exception if the tree cannot be reconstructed\n   */\n  function tapTreeFromList() {\n    var leaves = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    if (leaves.length === 1 && leaves[0].depth === 0) return {\n      output: leaves[0].script,\n      version: leaves[0].leafVersion\n    };\n    return instertLeavesInTree(leaves);\n  }\n  exports.tapTreeFromList = tapTreeFromList;\n  function checkTaprootInputForSigs(input, action) {\n    var sigs = extractTaprootSigs(input);\n    return sigs.some(function (sig) {\n      return (0, _$$_REQUIRE(_dependencyMap[1], \"./psbtutils\").signatureBlocksAction)(sig, decodeSchnorrSignature, action);\n    });\n  }\n  exports.checkTaprootInputForSigs = checkTaprootInputForSigs;\n  function decodeSchnorrSignature(signature) {\n    return {\n      signature: signature.slice(0, 64),\n      hashType: signature.slice(64)[0] || _$$_REQUIRE(_dependencyMap[5], \"../transaction\").Transaction.SIGHASH_DEFAULT\n    };\n  }\n  function extractTaprootSigs(input) {\n    var sigs = [];\n    if (input.tapKeySig) sigs.push(input.tapKeySig);\n    if (input.tapScriptSig) sigs.push.apply(sigs, _toConsumableArray(input.tapScriptSig.map(function (s) {\n      return s.signature;\n    })));\n    if (!sigs.length) {\n      var finalTapKeySig = getTapKeySigFromWithness(input.finalScriptWitness);\n      if (finalTapKeySig) sigs.push(finalTapKeySig);\n    }\n    return sigs;\n  }\n  function getTapKeySigFromWithness(finalScriptWitness) {\n    if (!finalScriptWitness) return;\n    var witness = finalScriptWitness.slice(2);\n    // todo: add schnorr signature validation\n    if (witness.length === 64 || witness.length === 65) return witness;\n  }\n  function _tapTreeToList(tree) {\n    var leaves = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    if (depth > _$$_REQUIRE(_dependencyMap[3], \"../payments/bip341\").MAX_TAPTREE_DEPTH) throw new Error('Max taptree depth exceeded.');\n    if (!tree) return [];\n    if ((0, _$$_REQUIRE(_dependencyMap[4], \"../types\").isTapleaf)(tree)) {\n      leaves.push({\n        depth: depth,\n        leafVersion: tree.version || _$$_REQUIRE(_dependencyMap[3], \"../payments/bip341\").LEAF_VERSION_TAPSCRIPT,\n        script: tree.output\n      });\n      return leaves;\n    }\n    if (tree[0]) _tapTreeToList(tree[0], leaves, depth + 1);\n    if (tree[1]) _tapTreeToList(tree[1], leaves, depth + 1);\n    return leaves;\n  }\n  function instertLeavesInTree(leaves) {\n    var tree;\n    for (var leaf of leaves) {\n      tree = instertLeafInTree(leaf, tree);\n      if (!tree) throw new Error(`No room left to insert tapleaf in tree`);\n    }\n    return tree;\n  }\n  function instertLeafInTree(leaf, tree) {\n    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    if (depth > _$$_REQUIRE(_dependencyMap[3], \"../payments/bip341\").MAX_TAPTREE_DEPTH) throw new Error('Max taptree depth exceeded.');\n    if (leaf.depth === depth) {\n      if (!tree) return {\n        output: leaf.script,\n        version: leaf.leafVersion\n      };\n      return;\n    }\n    if ((0, _$$_REQUIRE(_dependencyMap[4], \"../types\").isTapleaf)(tree)) return;\n    var leftSide = instertLeafInTree(leaf, tree && tree[0], depth + 1);\n    if (leftSide) return [leftSide, tree && tree[1]];\n    var rightSide = instertLeafInTree(leaf, tree && tree[1], depth + 1);\n    if (rightSide) return [tree && tree[0], rightSide];\n  }\n  function checkMixedTaprootAndNonTaprootInputFields(inputData, newInputData, action) {\n    var isBadTaprootUpdate = isTaprootInput(inputData) && hasNonTaprootFields(newInputData);\n    var isBadNonTaprootUpdate = hasNonTaprootFields(inputData) && isTaprootInput(newInputData);\n    var hasMixedFields = inputData === newInputData && isTaprootInput(newInputData) && hasNonTaprootFields(newInputData); // todo: bad? use !===\n    if (isBadTaprootUpdate || isBadNonTaprootUpdate || hasMixedFields) throw new Error(`Invalid arguments for Psbt.${action}. ` + `Cannot use both taproot and non-taproot fields.`);\n  }\n  function checkMixedTaprootAndNonTaprootOutputFields(inputData, newInputData, action) {\n    var isBadTaprootUpdate = isTaprootOutput(inputData) && hasNonTaprootFields(newInputData);\n    var isBadNonTaprootUpdate = hasNonTaprootFields(inputData) && isTaprootOutput(newInputData);\n    var hasMixedFields = inputData === newInputData && isTaprootOutput(newInputData) && hasNonTaprootFields(newInputData);\n    if (isBadTaprootUpdate || isBadNonTaprootUpdate || hasMixedFields) throw new Error(`Invalid arguments for Psbt.${action}. ` + `Cannot use both taproot and non-taproot fields.`);\n  }\n  /**\n   * Checks if the tap leaf is part of the tap tree for the given input data.\n   * Throws an error if the tap leaf is not part of the tap tree.\n   * @param inputData - The original PsbtInput data.\n   * @param newInputData - The new PsbtInput data.\n   * @param action - The action being performed.\n   * @throws {Error} - If the tap leaf is not part of the tap tree.\n   */\n  function checkIfTapLeafInTree(inputData, newInputData, action) {\n    if (newInputData.tapMerkleRoot) {\n      var newLeafsInTree = (newInputData.tapLeafScript || []).every(function (l) {\n        return isTapLeafInTree(l, newInputData.tapMerkleRoot);\n      });\n      var oldLeafsInTree = (inputData.tapLeafScript || []).every(function (l) {\n        return isTapLeafInTree(l, newInputData.tapMerkleRoot);\n      });\n      if (!newLeafsInTree || !oldLeafsInTree) throw new Error(`Invalid arguments for Psbt.${action}. Tapleaf not part of taptree.`);\n    } else if (inputData.tapMerkleRoot) {\n      var _newLeafsInTree = (newInputData.tapLeafScript || []).every(function (l) {\n        return isTapLeafInTree(l, inputData.tapMerkleRoot);\n      });\n      if (!_newLeafsInTree) throw new Error(`Invalid arguments for Psbt.${action}. Tapleaf not part of taptree.`);\n    }\n  }\n  /**\n   * Checks if a TapLeafScript is present in a Merkle tree.\n   * @param tapLeaf The TapLeafScript to check.\n   * @param merkleRoot The Merkle root of the tree. If not provided, the function assumes the TapLeafScript is present.\n   * @returns A boolean indicating whether the TapLeafScript is present in the tree.\n   */\n  function isTapLeafInTree(tapLeaf, merkleRoot) {\n    if (!merkleRoot) return true;\n    var leafHash = (0, _$$_REQUIRE(_dependencyMap[3], \"../payments/bip341\").tapleafHash)({\n      output: tapLeaf.script,\n      version: tapLeaf.leafVersion\n    });\n    var rootHash = (0, _$$_REQUIRE(_dependencyMap[3], \"../payments/bip341\").rootHashFromPath)(tapLeaf.controlBlock, leafHash);\n    return rootHash.equals(merkleRoot);\n  }\n  /**\n   * Sorts the signatures in the input's tapScriptSig array based on their position in the tapLeaf script.\n   *\n   * @param input - The PsbtInput object.\n   * @param tapLeaf - The TapLeafScript object.\n   * @returns An array of sorted signatures as Buffers.\n   */\n  function sortSignatures(input, tapLeaf) {\n    var leafHash = (0, _$$_REQUIRE(_dependencyMap[3], \"../payments/bip341\").tapleafHash)({\n      output: tapLeaf.script,\n      version: tapLeaf.leafVersion\n    });\n    return (input.tapScriptSig || []).filter(function (tss) {\n      return tss.leafHash.equals(leafHash);\n    }).map(function (tss) {\n      return addPubkeyPositionInScript(tapLeaf.script, tss);\n    }).sort(function (t1, t2) {\n      return t2.positionInScript - t1.positionInScript;\n    }).map(function (t) {\n      return t.signature;\n    });\n  }\n  /**\n   * Adds the position of a public key in a script to a TapScriptSig object.\n   * @param script The script in which to find the position of the public key.\n   * @param tss The TapScriptSig object to add the position to.\n   * @returns A TapScriptSigWitPosition object with the added position.\n   */\n  function addPubkeyPositionInScript(script, tss) {\n    return Object.assign({\n      positionInScript: (0, _$$_REQUIRE(_dependencyMap[1], \"./psbtutils\").pubkeyPositionInScript)(tss.pubkey, script)\n    }, tss);\n  }\n  /**\n   * Find tapleaf by hash, or get the signed tapleaf with the shortest path.\n   */\n  function findTapLeafToFinalize(input, inputIndex, leafHashToFinalize) {\n    if (!input.tapScriptSig || !input.tapScriptSig.length) throw new Error(`Can not finalize taproot input #${inputIndex}. No tapleaf script signature provided.`);\n    var tapLeaf = (input.tapLeafScript || []).sort(function (a, b) {\n      return a.controlBlock.length - b.controlBlock.length;\n    }).find(function (leaf) {\n      return canFinalizeLeaf(leaf, input.tapScriptSig, leafHashToFinalize);\n    });\n    if (!tapLeaf) throw new Error(`Can not finalize taproot input #${inputIndex}. Signature for tapleaf script not found.`);\n    return tapLeaf;\n  }\n  /**\n   * Determines whether a TapLeafScript can be finalized.\n   *\n   * @param leaf - The TapLeafScript to check.\n   * @param tapScriptSig - The array of TapScriptSig objects.\n   * @param hash - The optional hash to compare with the leaf hash.\n   * @returns A boolean indicating whether the TapLeafScript can be finalized.\n   */\n  function canFinalizeLeaf(leaf, tapScriptSig, hash) {\n    var leafHash = (0, _$$_REQUIRE(_dependencyMap[3], \"../payments/bip341\").tapleafHash)({\n      output: leaf.script,\n      version: leaf.leafVersion\n    });\n    var whiteListedHash = !hash || hash.equals(leafHash);\n    return whiteListedHash && tapScriptSig.find(function (tss) {\n      return tss.leafHash.equals(leafHash);\n    }) !== undefined;\n  }\n  /**\n   * Checks if the given PsbtInput or PsbtOutput has non-taproot fields.\n   * Non-taproot fields include redeemScript, witnessScript, and bip32Derivation.\n   * @param io The PsbtInput or PsbtOutput to check.\n   * @returns A boolean indicating whether the given input or output has non-taproot fields.\n   */\n  function hasNonTaprootFields(io) {\n    return io && !!(io.redeemScript || io.witnessScript || io.bip32Derivation && io.bip32Derivation.length);\n  }\n});","lineCount":310,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_toConsumableArray"],[4,24,1,13],[4,27,1,13,"_$$_REQUIRE"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,2,0,"Object"],[5,8,2,6],[5,9,2,7,"defineProperty"],[5,23,2,21],[5,24,2,22,"exports"],[5,31,2,29],[5,33,2,31],[5,45,2,43],[5,47,2,45],[6,4,2,47,"value"],[6,9,2,52],[6,11,2,54],[7,2,2,59],[7,3,2,60],[7,4,2,61],[8,2,3,0,"exports"],[8,9,3,7],[8,10,3,8,"checkTaprootInputForSigs"],[8,34,3,32],[8,37,4,2,"exports"],[8,44,4,9],[8,45,4,10,"tapTreeFromList"],[8,60,4,25],[8,63,5,2,"exports"],[8,70,5,9],[8,71,5,10,"tapTreeToList"],[8,84,5,23],[8,87,6,2,"exports"],[8,94,6,9],[8,95,6,10,"tweakInternalPubKey"],[8,114,6,29],[8,117,7,2,"exports"],[8,124,7,9],[8,125,7,10,"checkTaprootOutputFields"],[8,149,7,34],[8,152,8,2,"exports"],[8,159,8,9],[8,160,8,10,"checkTaprootInputFields"],[8,183,8,33],[8,186,9,2,"exports"],[8,193,9,9],[8,194,9,10,"isTaprootOutput"],[8,209,9,25],[8,212,10,2,"exports"],[8,219,10,9],[8,220,10,10,"isTaprootInput"],[8,234,10,24],[8,237,11,2,"exports"],[8,244,11,9],[8,245,11,10,"serializeTaprootSignature"],[8,270,11,35],[8,273,12,2,"exports"],[8,280,12,9],[8,281,12,10,"tapScriptFinalizer"],[8,299,12,28],[8,302,13,2,"exports"],[8,309,13,9],[8,310,13,10,"toXOnly"],[8,317,13,17],[8,320,14,4],[8,325,14,9],[8,326,14,10],[9,2,21,0],[9,6,21,6,"toXOnly"],[9,13,21,13],[9,16,21,16],[9,25,21,6,"toXOnly"],[9,32,21,13,"toXOnly"],[9,33,21,16,"pubKey"],[9,39,21,22],[10,4,21,22],[10,11,21,27,"pubKey"],[10,17,21,33],[10,18,21,34,"length"],[10,24,21,40],[10,29,21,45],[10,31,21,47],[10,34,21,50,"pubKey"],[10,40,21,56],[10,43,21,59,"pubKey"],[10,49,21,65],[10,50,21,66,"slice"],[10,55,21,71],[10,56,21,72],[10,57,21,73],[10,59,21,75],[10,61,21,77],[10,62,21,78],[11,2,21,78],[11,3,21,79],[12,2,22,0,"exports"],[12,9,22,7],[12,10,22,8,"toXOnly"],[12,17,22,15],[12,20,22,18,"toXOnly"],[12,27,22,25],[13,2,23,0],[14,0,24,0],[15,0,25,0],[16,0,26,0],[17,0,27,0],[18,0,28,0],[19,0,29,0],[20,0,30,0],[21,0,31,0],[22,2,32,0],[22,11,32,9,"tapScriptFinalizer"],[22,29,32,27,"tapScriptFinalizer"],[22,30,32,28,"inputIndex"],[22,40,32,38],[22,42,32,40,"input"],[22,47,32,45],[22,49,32,47,"tapLeafHashToFinalize"],[22,70,32,68],[22,72,32,70],[23,4,33,2],[23,8,33,8,"tapLeaf"],[23,15,33,15],[23,18,33,18,"findTapLeafToFinalize"],[23,39,33,39],[23,40,34,4,"input"],[23,45,34,9],[23,47,35,4,"inputIndex"],[23,57,35,14],[23,59,36,4,"tapLeafHashToFinalize"],[23,80,37,2],[23,81,37,3],[24,4,38,2],[24,8,38,6],[25,6,39,4],[25,10,39,10,"sigs"],[25,14,39,14],[25,17,39,17,"sortSignatures"],[25,31,39,31],[25,32,39,32,"input"],[25,37,39,37],[25,39,39,39,"tapLeaf"],[25,46,39,46],[25,47,39,47],[26,6,40,4],[26,10,40,10,"witness"],[26,17,40,17],[26,20,40,20,"sigs"],[26,24,40,24],[26,25,40,25,"concat"],[26,31,40,31],[26,32,40,32,"tapLeaf"],[26,39,40,39],[26,40,40,40,"script"],[26,46,40,46],[26,47,40,47],[26,48,40,48,"concat"],[26,54,40,54],[26,55,40,55,"tapLeaf"],[26,62,40,62],[26,63,40,63,"controlBlock"],[26,75,40,75],[26,76,40,76],[27,6,41,4],[27,13,41,11],[28,8,42,6,"finalScriptWitness"],[28,26,42,24],[28,28,42,26],[28,29,42,27],[28,30,42,28],[28,32,42,30,"_$$_REQUIRE"],[28,43,42,30],[28,44,42,30,"_dependencyMap"],[28,58,42,30],[28,78,42,42,"witnessStackToScriptWitness"],[28,105,42,69],[28,107,42,71,"witness"],[28,114,42,78],[29,6,43,4],[29,7,43,5],[30,4,44,2],[30,5,44,3],[30,6,44,4],[30,13,44,11,"err"],[30,16,44,14],[30,18,44,16],[31,6,45,4],[31,12,45,10],[31,16,45,14,"Error"],[31,21,45,19],[31,22,45,20],[31,57,45,55,"inputIndex"],[31,67,45,65],[31,72,45,70,"err"],[31,75,45,73],[31,77,45,75],[31,78,45,76],[32,4,46,2],[33,2,47,0],[34,2,48,0,"exports"],[34,9,48,7],[34,10,48,8,"tapScriptFinalizer"],[34,28,48,26],[34,31,48,29,"tapScriptFinalizer"],[34,49,48,47],[35,2,49,0],[35,11,49,9,"serializeTaprootSignature"],[35,36,49,34,"serializeTaprootSignature"],[35,37,49,35,"sig"],[35,40,49,38],[35,42,49,40,"sighashType"],[35,53,49,51],[35,55,49,53],[36,4,50,2],[36,8,50,8,"sighashTypeByte"],[36,23,50,23],[36,26,50,26,"sighashType"],[36,37,50,37],[36,40,51,6,"Buffer"],[36,46,51,12],[36,47,51,13,"from"],[36,51,51,17],[36,52,51,18],[36,53,51,19,"sighashType"],[36,64,51,30],[36,65,51,31],[36,66,51,32],[36,69,52,6,"Buffer"],[36,75,52,12],[36,76,52,13,"from"],[36,80,52,17],[36,81,52,18],[36,83,52,20],[36,84,52,21],[37,4,53,2],[37,11,53,9,"Buffer"],[37,17,53,15],[37,18,53,16,"concat"],[37,24,53,22],[37,25,53,23],[37,26,53,24,"sig"],[37,29,53,27],[37,31,53,29,"sighashTypeByte"],[37,46,53,44],[37,47,53,45],[37,48,53,46],[38,2,54,0],[39,2,55,0,"exports"],[39,9,55,7],[39,10,55,8,"serializeTaprootSignature"],[39,35,55,33],[39,38,55,36,"serializeTaprootSignature"],[39,63,55,61],[40,2,56,0],[40,11,56,9,"isTaprootInput"],[40,25,56,23,"isTaprootInput"],[40,26,56,24,"input"],[40,31,56,29],[40,33,56,31],[41,4,57,2],[41,11,58,4,"input"],[41,16,58,9],[41,20,59,4],[41,21,59,5],[41,23,60,6,"input"],[41,28,60,11],[41,29,60,12,"tapInternalKey"],[41,43,60,26],[41,47,61,6,"input"],[41,52,61,11],[41,53,61,12,"tapMerkleRoot"],[41,66,61,25],[41,70,62,7,"input"],[41,75,62,12],[41,76,62,13,"tapLeafScript"],[41,89,62,26],[41,93,62,30,"input"],[41,98,62,35],[41,99,62,36,"tapLeafScript"],[41,112,62,49],[41,113,62,50,"length"],[41,119,62,57],[41,123,63,7,"input"],[41,128,63,12],[41,129,63,13,"tapBip32Derivation"],[41,147,63,31],[41,151,63,35,"input"],[41,156,63,40],[41,157,63,41,"tapBip32Derivation"],[41,175,63,59],[41,176,63,60,"length"],[41,182,63,67],[41,186,64,7,"input"],[41,191,64,12],[41,192,64,13,"witnessUtxo"],[41,203,64,24],[41,207,64,28],[41,208,64,29],[41,209,64,30],[41,211,64,32,"_$$_REQUIRE"],[41,222,64,32],[41,223,64,32,"_dependencyMap"],[41,237,64,32],[41,257,64,44,"isP2TR"],[41,263,64,50],[41,265,64,52,"input"],[41,270,64,57],[41,271,64,58,"witnessUtxo"],[41,282,64,69],[41,283,64,70,"script"],[41,289,64,76],[41,290,64,78],[41,291,65,5],[42,2,67,0],[43,2,68,0,"exports"],[43,9,68,7],[43,10,68,8,"isTaprootInput"],[43,24,68,22],[43,27,68,25,"isTaprootInput"],[43,41,68,39],[44,2,69,0],[44,11,69,9,"isTaprootOutput"],[44,26,69,24,"isTaprootOutput"],[44,27,69,25,"output"],[44,33,69,31],[44,35,69,33,"script"],[44,41,69,39],[44,43,69,41],[45,4,70,2],[45,11,71,4,"output"],[45,17,71,10],[45,21,72,4],[45,22,72,5],[45,24,73,6,"output"],[45,30,73,12],[45,31,73,13,"tapInternalKey"],[45,45,73,27],[45,49,74,6,"output"],[45,55,74,12],[45,56,74,13,"tapTree"],[45,63,74,20],[45,67,75,7,"output"],[45,73,75,13],[45,74,75,14,"tapBip32Derivation"],[45,92,75,32],[45,96,75,36,"output"],[45,102,75,42],[45,103,75,43,"tapBip32Derivation"],[45,121,75,61],[45,122,75,62,"length"],[45,128,75,69],[45,132,76,7,"script"],[45,138,76,13],[45,142,76,17],[45,143,76,18],[45,144,76,19],[45,146,76,21,"_$$_REQUIRE"],[45,157,76,21],[45,158,76,21,"_dependencyMap"],[45,172,76,21],[45,192,76,33,"isP2TR"],[45,198,76,39],[45,200,76,41,"script"],[45,206,76,47],[45,207,76,49],[45,208,77,5],[46,2,79,0],[47,2,80,0,"exports"],[47,9,80,7],[47,10,80,8,"isTaprootOutput"],[47,25,80,23],[47,28,80,26,"isTaprootOutput"],[47,43,80,41],[48,2,81,0],[48,11,81,9,"checkTaprootInputFields"],[48,34,81,32,"checkTaprootInputFields"],[48,35,81,33,"inputData"],[48,44,81,42],[48,46,81,44,"newInputData"],[48,58,81,56],[48,60,81,58,"action"],[48,66,81,64],[48,68,81,66],[49,4,82,2,"checkMixedTaprootAndNonTaprootInputFields"],[49,45,82,43],[49,46,82,44,"inputData"],[49,55,82,53],[49,57,82,55,"newInputData"],[49,69,82,67],[49,71,82,69,"action"],[49,77,82,75],[49,78,82,76],[50,4,83,2,"checkIfTapLeafInTree"],[50,24,83,22],[50,25,83,23,"inputData"],[50,34,83,32],[50,36,83,34,"newInputData"],[50,48,83,46],[50,50,83,48,"action"],[50,56,83,54],[50,57,83,55],[51,2,84,0],[52,2,85,0,"exports"],[52,9,85,7],[52,10,85,8,"checkTaprootInputFields"],[52,33,85,31],[52,36,85,34,"checkTaprootInputFields"],[52,59,85,57],[53,2,86,0],[53,11,86,9,"checkTaprootOutputFields"],[53,35,86,33,"checkTaprootOutputFields"],[53,36,86,34,"outputData"],[53,46,86,44],[53,48,86,46,"newOutputData"],[53,61,86,59],[53,63,86,61,"action"],[53,69,86,67],[53,71,86,69],[54,4,87,2,"checkMixedTaprootAndNonTaprootOutputFields"],[54,46,87,44],[54,47,87,45,"outputData"],[54,57,87,55],[54,59,87,57,"newOutputData"],[54,72,87,70],[54,74,87,72,"action"],[54,80,87,78],[54,81,87,79],[55,4,88,2,"checkTaprootScriptPubkey"],[55,28,88,26],[55,29,88,27,"outputData"],[55,39,88,37],[55,41,88,39,"newOutputData"],[55,54,88,52],[55,55,88,53],[56,2,89,0],[57,2,90,0,"exports"],[57,9,90,7],[57,10,90,8,"checkTaprootOutputFields"],[57,34,90,32],[57,37,90,35,"checkTaprootOutputFields"],[57,61,90,59],[58,2,91,0],[58,11,91,9,"checkTaprootScriptPubkey"],[58,35,91,33,"checkTaprootScriptPubkey"],[58,36,91,34,"outputData"],[58,46,91,44],[58,48,91,46,"newOutputData"],[58,61,91,59],[58,63,91,61],[59,4,92,2],[59,8,92,6],[59,9,92,7,"newOutputData"],[59,22,92,20],[59,23,92,21,"tapTree"],[59,30,92,28],[59,34,92,32],[59,35,92,33,"newOutputData"],[59,48,92,46],[59,49,92,47,"tapInternalKey"],[59,63,92,61],[59,65,92,63],[60,4,93,2],[60,8,93,8,"tapInternalKey"],[60,22,93,22],[60,25,94,4,"newOutputData"],[60,38,94,17],[60,39,94,18,"tapInternalKey"],[60,53,94,32],[60,57,94,36,"outputData"],[60,67,94,46],[60,68,94,47,"tapInternalKey"],[60,82,94,61],[61,4,95,2],[61,8,95,8,"tapTree"],[61,15,95,15],[61,18,95,18,"newOutputData"],[61,31,95,31],[61,32,95,32,"tapTree"],[61,39,95,39],[61,43,95,43,"outputData"],[61,53,95,53],[61,54,95,54,"tapTree"],[61,61,95,61],[62,4,96,2],[62,8,96,6,"tapInternalKey"],[62,22,96,20],[62,24,96,22],[63,6,97,4],[63,10,97,20,"scriptPubkey"],[63,22,97,32],[63,25,97,37,"outputData"],[63,35,97,47],[63,36,97,12,"script"],[63,42,97,18],[64,6,98,4],[64,10,98,10,"script"],[64,16,98,16],[64,19,98,19,"getTaprootScripPubkey"],[64,40,98,40],[64,41,98,41,"tapInternalKey"],[64,55,98,55],[64,57,98,57,"tapTree"],[64,64,98,64],[64,65,98,65],[65,6,99,4],[65,10,99,8,"scriptPubkey"],[65,22,99,20],[65,26,99,24],[65,27,99,25,"scriptPubkey"],[65,39,99,37],[65,40,99,38,"equals"],[65,46,99,44],[65,47,99,45,"script"],[65,53,99,51],[65,54,99,52],[65,56,100,6],[65,62,100,12],[65,66,100,16,"Error"],[65,71,100,21],[65,72,100,22],[65,123,100,73],[65,124,100,74],[66,4,101,2],[67,2,102,0],[68,2,103,0],[68,11,103,9,"getTaprootScripPubkey"],[68,32,103,30,"getTaprootScripPubkey"],[68,33,103,31,"tapInternalKey"],[68,47,103,45],[68,49,103,47,"tapTree"],[68,56,103,54],[68,58,103,56],[69,4,104,2],[69,8,104,8,"scriptTree"],[69,18,104,18],[69,21,104,21,"tapTree"],[69,28,104,28],[69,32,104,32,"tapTreeFromList"],[69,47,104,47],[69,48,104,48,"tapTree"],[69,55,104,55],[69,56,104,56,"leaves"],[69,62,104,62],[69,63,104,63],[70,4,105,2],[70,8,105,2,"_ref"],[70,12,105,2],[70,15,105,21],[70,16,105,22],[70,17,105,23],[70,19,105,25,"_$$_REQUIRE"],[70,30,105,25],[70,31,105,25,"_dependencyMap"],[70,45,105,25],[70,65,105,36,"p2tr"],[70,69,105,40],[70,71,105,42],[71,8,106,4,"internalPubkey"],[71,22,106,18],[71,24,106,20,"tapInternalKey"],[71,38,106,34],[72,8,107,4,"scriptTree"],[72,18,107,14],[72,20,107,4,"scriptTree"],[73,6,108,2],[73,7,108,3],[73,8,108,4],[74,6,105,10,"output"],[74,12,105,16],[74,15,105,16,"_ref"],[74,19,105,16],[74,20,105,10,"output"],[74,26,105,16],[75,4,109,2],[75,11,109,9,"output"],[75,17,109,15],[76,2,110,0],[77,2,111,0],[77,11,111,9,"tweakInternalPubKey"],[77,30,111,28,"tweakInternalPubKey"],[77,31,111,29,"inputIndex"],[77,41,111,39],[77,43,111,41,"input"],[77,48,111,46],[77,50,111,48],[78,4,112,2],[78,8,112,8,"tapInternalKey"],[78,22,112,22],[78,25,112,25,"input"],[78,30,112,30],[78,31,112,31,"tapInternalKey"],[78,45,112,45],[79,4,113,2],[79,8,113,8,"outputKey"],[79,17,113,17],[79,20,114,4,"tapInternalKey"],[79,34,114,18],[79,38,115,4],[79,39,115,5],[79,40,115,6],[79,42,115,8,"_$$_REQUIRE"],[79,53,115,8],[79,54,115,8,"_dependencyMap"],[79,68,115,8],[79,95,115,17,"tweakKey"],[79,103,115,25],[79,105,115,27,"tapInternalKey"],[79,119,115,41],[79,121,115,43,"input"],[79,126,115,48],[79,127,115,49,"tapMerkleRoot"],[79,140,115,62],[79,141,115,63],[80,4,116,2],[80,8,116,6],[80,9,116,7,"outputKey"],[80,18,116,16],[80,20,117,4],[80,26,117,10],[80,30,117,14,"Error"],[80,35,117,19],[80,36,118,6],[80,80,118,50,"inputIndex"],[80,90,118,60],[80,107,119,8,"tapInternalKey"],[80,121,119,22],[80,125,119,26,"tapInternalKey"],[80,139,119,40],[80,140,119,41,"toString"],[80,148,119,49],[80,149,119,50],[80,154,119,55],[80,155,119,56],[80,157,121,4],[80,158,121,5],[81,4,122,2],[81,11,122,9,"outputKey"],[81,20,122,18],[81,21,122,19,"x"],[81,22,122,20],[82,2,123,0],[83,2,124,0,"exports"],[83,9,124,7],[83,10,124,8,"tweakInternalPubKey"],[83,29,124,27],[83,32,124,30,"tweakInternalPubKey"],[83,51,124,49],[84,2,125,0],[85,0,126,0],[86,0,127,0],[87,0,128,0],[88,0,129,0],[89,0,130,0],[90,0,131,0],[91,0,132,0],[92,2,133,0],[92,11,133,9,"tapTreeToList"],[92,24,133,22,"tapTreeToList"],[92,25,133,23,"tree"],[92,29,133,27],[92,31,133,29],[93,4,134,2],[93,8,134,6],[93,9,134,7],[93,10,134,8],[93,11,134,9],[93,13,134,11,"_$$_REQUIRE"],[93,24,134,11],[93,25,134,11,"_dependencyMap"],[93,39,134,11],[93,56,134,19,"isTaptree"],[93,65,134,28],[93,67,134,30,"tree"],[93,71,134,34],[93,72,134,35],[93,74,135,4],[93,80,135,10],[93,84,135,14,"Error"],[93,89,135,19],[93,90,136,6],[93,161,137,4],[93,162,137,5],[94,4,138,2],[94,11,138,9,"_tapTreeToList"],[94,25,138,23],[94,26,138,24,"tree"],[94,30,138,28],[94,31,138,29],[95,2,139,0],[96,2,140,0,"exports"],[96,9,140,7],[96,10,140,8,"tapTreeToList"],[96,23,140,21],[96,26,140,24,"tapTreeToList"],[96,39,140,37],[97,2,141,0],[98,0,142,0],[99,0,143,0],[100,0,144,0],[101,0,145,0],[102,0,146,0],[103,0,147,0],[104,0,148,0],[105,2,149,0],[105,11,149,9,"tapTreeFromList"],[105,26,149,24,"tapTreeFromList"],[105,27,149,24],[105,29,149,38],[106,4,149,38],[106,8,149,25,"leaves"],[106,14,149,31],[106,17,149,31,"arguments"],[106,26,149,31],[106,27,149,31,"length"],[106,33,149,31],[106,41,149,31,"arguments"],[106,50,149,31],[106,58,149,31,"undefined"],[106,67,149,31],[106,70,149,31,"arguments"],[106,79,149,31],[106,85,149,34],[106,87,149,36],[107,4,150,2],[107,8,150,6,"leaves"],[107,14,150,12],[107,15,150,13,"length"],[107,21,150,19],[107,26,150,24],[107,27,150,25],[107,31,150,29,"leaves"],[107,37,150,35],[107,38,150,36],[107,39,150,37],[107,40,150,38],[107,41,150,39,"depth"],[107,46,150,44],[107,51,150,49],[107,52,150,50],[107,54,151,4],[107,61,151,11],[108,6,152,6,"output"],[108,12,152,12],[108,14,152,14,"leaves"],[108,20,152,20],[108,21,152,21],[108,22,152,22],[108,23,152,23],[108,24,152,24,"script"],[108,30,152,30],[109,6,153,6,"version"],[109,13,153,13],[109,15,153,15,"leaves"],[109,21,153,21],[109,22,153,22],[109,23,153,23],[109,24,153,24],[109,25,153,25,"leafVersion"],[110,4,154,4],[110,5,154,5],[111,4,155,2],[111,11,155,9,"instertLeavesInTree"],[111,30,155,28],[111,31,155,29,"leaves"],[111,37,155,35],[111,38,155,36],[112,2,156,0],[113,2,157,0,"exports"],[113,9,157,7],[113,10,157,8,"tapTreeFromList"],[113,25,157,23],[113,28,157,26,"tapTreeFromList"],[113,43,157,41],[114,2,158,0],[114,11,158,9,"checkTaprootInputForSigs"],[114,35,158,33,"checkTaprootInputForSigs"],[114,36,158,34,"input"],[114,41,158,39],[114,43,158,41,"action"],[114,49,158,47],[114,51,158,49],[115,4,159,2],[115,8,159,8,"sigs"],[115,12,159,12],[115,15,159,15,"extractTaprootSigs"],[115,33,159,33],[115,34,159,34,"input"],[115,39,159,39],[115,40,159,40],[116,4,160,2],[116,11,160,9,"sigs"],[116,15,160,13],[116,16,160,14,"some"],[116,20,160,18],[116,21,160,19],[116,31,160,19,"sig"],[116,34,160,22],[117,6,160,22],[117,13,161,4],[117,14,161,5],[117,15,161,6],[117,17,161,8,"_$$_REQUIRE"],[117,28,161,8],[117,29,161,8,"_dependencyMap"],[117,43,161,8],[117,63,161,20,"signatureBlocksAction"],[117,84,161,41],[117,86,161,43,"sig"],[117,89,161,46],[117,91,161,48,"decodeSchnorrSignature"],[117,113,161,70],[117,115,161,72,"action"],[117,121,161,78],[117,122,161,79],[118,4,161,79],[118,5,162,2],[118,6,162,3],[119,2,163,0],[120,2,164,0,"exports"],[120,9,164,7],[120,10,164,8,"checkTaprootInputForSigs"],[120,34,164,32],[120,37,164,35,"checkTaprootInputForSigs"],[120,61,164,59],[121,2,165,0],[121,11,165,9,"decodeSchnorrSignature"],[121,33,165,31,"decodeSchnorrSignature"],[121,34,165,32,"signature"],[121,43,165,41],[121,45,165,43],[122,4,166,2],[122,11,166,9],[123,6,167,4,"signature"],[123,15,167,13],[123,17,167,15,"signature"],[123,26,167,24],[123,27,167,25,"slice"],[123,32,167,30],[123,33,167,31],[123,34,167,32],[123,36,167,34],[123,38,167,36],[123,39,167,37],[124,6,168,4,"hashType"],[124,14,168,12],[124,16,169,6,"signature"],[124,25,169,15],[124,26,169,16,"slice"],[124,31,169,21],[124,32,169,22],[124,34,169,24],[124,35,169,25],[124,36,169,26],[124,37,169,27],[124,38,169,28],[124,42,169,32,"_$$_REQUIRE"],[124,53,169,32],[124,54,169,32,"_dependencyMap"],[124,68,169,32],[124,91,169,46,"Transaction"],[124,102,169,57],[124,103,169,58,"SIGHASH_DEFAULT"],[125,4,170,2],[125,5,170,3],[126,2,171,0],[127,2,172,0],[127,11,172,9,"extractTaprootSigs"],[127,29,172,27,"extractTaprootSigs"],[127,30,172,28,"input"],[127,35,172,33],[127,37,172,35],[128,4,173,2],[128,8,173,8,"sigs"],[128,12,173,12],[128,15,173,15],[128,17,173,17],[129,4,174,2],[129,8,174,6,"input"],[129,13,174,11],[129,14,174,12,"tapKeySig"],[129,23,174,21],[129,25,174,23,"sigs"],[129,29,174,27],[129,30,174,28,"push"],[129,34,174,32],[129,35,174,33,"input"],[129,40,174,38],[129,41,174,39,"tapKeySig"],[129,50,174,48],[129,51,174,49],[130,4,175,2],[130,8,175,6,"input"],[130,13,175,11],[130,14,175,12,"tapScriptSig"],[130,26,175,24],[130,28,176,4,"sigs"],[130,32,176,8],[130,33,176,9,"push"],[130,37,176,13],[130,38,176,13,"apply"],[130,43,176,13],[130,44,176,4,"sigs"],[130,48,176,8],[130,50,176,8,"_toConsumableArray"],[130,68,176,8],[130,69,176,17,"input"],[130,74,176,22],[130,75,176,23,"tapScriptSig"],[130,87,176,35],[130,88,176,36,"map"],[130,91,176,39],[130,92,176,40],[130,102,176,40,"s"],[130,103,176,41],[131,6,176,41],[131,13,176,45,"s"],[131,14,176,46],[131,15,176,47,"signature"],[131,24,176,56],[132,4,176,56],[132,6,176,57],[132,8,176,58],[133,4,177,2],[133,8,177,6],[133,9,177,7,"sigs"],[133,13,177,11],[133,14,177,12,"length"],[133,20,177,18],[133,22,177,20],[134,6,178,4],[134,10,178,10,"finalTapKeySig"],[134,24,178,24],[134,27,178,27,"getTapKeySigFromWithness"],[134,51,178,51],[134,52,178,52,"input"],[134,57,178,57],[134,58,178,58,"finalScriptWitness"],[134,76,178,76],[134,77,178,77],[135,6,179,4],[135,10,179,8,"finalTapKeySig"],[135,24,179,22],[135,26,179,24,"sigs"],[135,30,179,28],[135,31,179,29,"push"],[135,35,179,33],[135,36,179,34,"finalTapKeySig"],[135,50,179,48],[135,51,179,49],[136,4,180,2],[137,4,181,2],[137,11,181,9,"sigs"],[137,15,181,13],[138,2,182,0],[139,2,183,0],[139,11,183,9,"getTapKeySigFromWithness"],[139,35,183,33,"getTapKeySigFromWithness"],[139,36,183,34,"finalScriptWitness"],[139,54,183,52],[139,56,183,54],[140,4,184,2],[140,8,184,6],[140,9,184,7,"finalScriptWitness"],[140,27,184,25],[140,29,184,27],[141,4,185,2],[141,8,185,8,"witness"],[141,15,185,15],[141,18,185,18,"finalScriptWitness"],[141,36,185,36],[141,37,185,37,"slice"],[141,42,185,42],[141,43,185,43],[141,44,185,44],[141,45,185,45],[142,4,186,2],[143,4,187,2],[143,8,187,6,"witness"],[143,15,187,13],[143,16,187,14,"length"],[143,22,187,20],[143,27,187,25],[143,29,187,27],[143,33,187,31,"witness"],[143,40,187,38],[143,41,187,39,"length"],[143,47,187,45],[143,52,187,50],[143,54,187,52],[143,56,187,54],[143,63,187,61,"witness"],[143,70,187,68],[144,2,188,0],[145,2,189,0],[145,11,189,9,"_tapTreeToList"],[145,25,189,23,"_tapTreeToList"],[145,26,189,24,"tree"],[145,30,189,28],[145,32,189,54],[146,4,189,54],[146,8,189,30,"leaves"],[146,14,189,36],[146,17,189,36,"arguments"],[146,26,189,36],[146,27,189,36,"length"],[146,33,189,36],[146,41,189,36,"arguments"],[146,50,189,36],[146,58,189,36,"undefined"],[146,67,189,36],[146,70,189,36,"arguments"],[146,79,189,36],[146,85,189,39],[146,87,189,41],[147,4,189,41],[147,8,189,43,"depth"],[147,13,189,48],[147,16,189,48,"arguments"],[147,25,189,48],[147,26,189,48,"length"],[147,32,189,48],[147,40,189,48,"arguments"],[147,49,189,48],[147,57,189,48,"undefined"],[147,66,189,48],[147,69,189,48,"arguments"],[147,78,189,48],[147,84,189,51],[147,85,189,52],[148,4,190,2],[148,8,190,6,"depth"],[148,13,190,11],[148,16,190,14,"_$$_REQUIRE"],[148,27,190,14],[148,28,190,14,"_dependencyMap"],[148,42,190,14],[148,69,190,23,"MAX_TAPTREE_DEPTH"],[148,86,190,40],[148,88,191,4],[148,94,191,10],[148,98,191,14,"Error"],[148,103,191,19],[148,104,191,20],[148,133,191,49],[148,134,191,50],[149,4,192,2],[149,8,192,6],[149,9,192,7,"tree"],[149,13,192,11],[149,15,192,13],[149,22,192,20],[149,24,192,22],[150,4,193,2],[150,8,193,6],[150,9,193,7],[150,10,193,8],[150,12,193,10,"_$$_REQUIRE"],[150,23,193,10],[150,24,193,10,"_dependencyMap"],[150,38,193,10],[150,55,193,18,"isTapleaf"],[150,64,193,27],[150,66,193,29,"tree"],[150,70,193,33],[150,71,193,34],[150,73,193,36],[151,6,194,4,"leaves"],[151,12,194,10],[151,13,194,11,"push"],[151,17,194,15],[151,18,194,16],[152,8,195,6,"depth"],[152,13,195,11],[152,15,195,6,"depth"],[152,20,195,11],[153,8,196,6,"leafVersion"],[153,19,196,17],[153,21,196,19,"tree"],[153,25,196,23],[153,26,196,24,"version"],[153,33,196,31],[153,37,196,35,"_$$_REQUIRE"],[153,48,196,35],[153,49,196,35,"_dependencyMap"],[153,63,196,35],[153,90,196,44,"LEAF_VERSION_TAPSCRIPT"],[153,112,196,66],[154,8,197,6,"script"],[154,14,197,12],[154,16,197,14,"tree"],[154,20,197,18],[154,21,197,19,"output"],[155,6,198,4],[155,7,198,5],[155,8,198,6],[156,6,199,4],[156,13,199,11,"leaves"],[156,19,199,17],[157,4,200,2],[158,4,201,2],[158,8,201,6,"tree"],[158,12,201,10],[158,13,201,11],[158,14,201,12],[158,15,201,13],[158,17,201,15,"_tapTreeToList"],[158,31,201,29],[158,32,201,30,"tree"],[158,36,201,34],[158,37,201,35],[158,38,201,36],[158,39,201,37],[158,41,201,39,"leaves"],[158,47,201,45],[158,49,201,47,"depth"],[158,54,201,52],[158,57,201,55],[158,58,201,56],[158,59,201,57],[159,4,202,2],[159,8,202,6,"tree"],[159,12,202,10],[159,13,202,11],[159,14,202,12],[159,15,202,13],[159,17,202,15,"_tapTreeToList"],[159,31,202,29],[159,32,202,30,"tree"],[159,36,202,34],[159,37,202,35],[159,38,202,36],[159,39,202,37],[159,41,202,39,"leaves"],[159,47,202,45],[159,49,202,47,"depth"],[159,54,202,52],[159,57,202,55],[159,58,202,56],[159,59,202,57],[160,4,203,2],[160,11,203,9,"leaves"],[160,17,203,15],[161,2,204,0],[162,2,205,0],[162,11,205,9,"instertLeavesInTree"],[162,30,205,28,"instertLeavesInTree"],[162,31,205,29,"leaves"],[162,37,205,35],[162,39,205,37],[163,4,206,2],[163,8,206,6,"tree"],[163,12,206,10],[164,4,207,2],[164,9,207,7],[164,13,207,13,"leaf"],[164,17,207,17],[164,21,207,21,"leaves"],[164,27,207,27],[164,29,207,29],[165,6,208,4,"tree"],[165,10,208,8],[165,13,208,11,"instertLeafInTree"],[165,30,208,28],[165,31,208,29,"leaf"],[165,35,208,33],[165,37,208,35,"tree"],[165,41,208,39],[165,42,208,40],[166,6,209,4],[166,10,209,8],[166,11,209,9,"tree"],[166,15,209,13],[166,17,209,15],[166,23,209,21],[166,27,209,25,"Error"],[166,32,209,30],[166,33,209,31],[166,73,209,71],[166,74,209,72],[167,4,210,2],[168,4,211,2],[168,11,211,9,"tree"],[168,15,211,13],[169,2,212,0],[170,2,213,0],[170,11,213,9,"instertLeafInTree"],[170,28,213,26,"instertLeafInTree"],[170,29,213,27,"leaf"],[170,33,213,31],[170,35,213,33,"tree"],[170,39,213,37],[170,41,213,50],[171,4,213,50],[171,8,213,39,"depth"],[171,13,213,44],[171,16,213,44,"arguments"],[171,25,213,44],[171,26,213,44,"length"],[171,32,213,44],[171,40,213,44,"arguments"],[171,49,213,44],[171,57,213,44,"undefined"],[171,66,213,44],[171,69,213,44,"arguments"],[171,78,213,44],[171,84,213,47],[171,85,213,48],[172,4,214,2],[172,8,214,6,"depth"],[172,13,214,11],[172,16,214,14,"_$$_REQUIRE"],[172,27,214,14],[172,28,214,14,"_dependencyMap"],[172,42,214,14],[172,69,214,23,"MAX_TAPTREE_DEPTH"],[172,86,214,40],[172,88,215,4],[172,94,215,10],[172,98,215,14,"Error"],[172,103,215,19],[172,104,215,20],[172,133,215,49],[172,134,215,50],[173,4,216,2],[173,8,216,6,"leaf"],[173,12,216,10],[173,13,216,11,"depth"],[173,18,216,16],[173,23,216,21,"depth"],[173,28,216,26],[173,30,216,28],[174,6,217,4],[174,10,217,8],[174,11,217,9,"tree"],[174,15,217,13],[174,17,218,6],[174,24,218,13],[175,8,219,8,"output"],[175,14,219,14],[175,16,219,16,"leaf"],[175,20,219,20],[175,21,219,21,"script"],[175,27,219,27],[176,8,220,8,"version"],[176,15,220,15],[176,17,220,17,"leaf"],[176,21,220,21],[176,22,220,22,"leafVersion"],[177,6,221,6],[177,7,221,7],[178,6,222,4],[179,4,223,2],[180,4,224,2],[180,8,224,6],[180,9,224,7],[180,10,224,8],[180,12,224,10,"_$$_REQUIRE"],[180,23,224,10],[180,24,224,10,"_dependencyMap"],[180,38,224,10],[180,55,224,18,"isTapleaf"],[180,64,224,27],[180,66,224,29,"tree"],[180,70,224,33],[180,71,224,34],[180,73,224,36],[181,4,225,2],[181,8,225,8,"leftSide"],[181,16,225,16],[181,19,225,19,"instertLeafInTree"],[181,36,225,36],[181,37,225,37,"leaf"],[181,41,225,41],[181,43,225,43,"tree"],[181,47,225,47],[181,51,225,51,"tree"],[181,55,225,55],[181,56,225,56],[181,57,225,57],[181,58,225,58],[181,60,225,60,"depth"],[181,65,225,65],[181,68,225,68],[181,69,225,69],[181,70,225,70],[182,4,226,2],[182,8,226,6,"leftSide"],[182,16,226,14],[182,18,226,16],[182,25,226,23],[182,26,226,24,"leftSide"],[182,34,226,32],[182,36,226,34,"tree"],[182,40,226,38],[182,44,226,42,"tree"],[182,48,226,46],[182,49,226,47],[182,50,226,48],[182,51,226,49],[182,52,226,50],[183,4,227,2],[183,8,227,8,"rightSide"],[183,17,227,17],[183,20,227,20,"instertLeafInTree"],[183,37,227,37],[183,38,227,38,"leaf"],[183,42,227,42],[183,44,227,44,"tree"],[183,48,227,48],[183,52,227,52,"tree"],[183,56,227,56],[183,57,227,57],[183,58,227,58],[183,59,227,59],[183,61,227,61,"depth"],[183,66,227,66],[183,69,227,69],[183,70,227,70],[183,71,227,71],[184,4,228,2],[184,8,228,6,"rightSide"],[184,17,228,15],[184,19,228,17],[184,26,228,24],[184,27,228,25,"tree"],[184,31,228,29],[184,35,228,33,"tree"],[184,39,228,37],[184,40,228,38],[184,41,228,39],[184,42,228,40],[184,44,228,42,"rightSide"],[184,53,228,51],[184,54,228,52],[185,2,229,0],[186,2,230,0],[186,11,230,9,"checkMixedTaprootAndNonTaprootInputFields"],[186,52,230,50,"checkMixedTaprootAndNonTaprootInputFields"],[186,53,231,2,"inputData"],[186,62,231,11],[186,64,232,2,"newInputData"],[186,76,232,14],[186,78,233,2,"action"],[186,84,233,8],[186,86,234,2],[187,4,235,2],[187,8,235,8,"isBadTaprootUpdate"],[187,26,235,26],[187,29,236,4,"isTaprootInput"],[187,43,236,18],[187,44,236,19,"inputData"],[187,53,236,28],[187,54,236,29],[187,58,236,33,"hasNonTaprootFields"],[187,77,236,52],[187,78,236,53,"newInputData"],[187,90,236,65],[187,91,236,66],[188,4,237,2],[188,8,237,8,"isBadNonTaprootUpdate"],[188,29,237,29],[188,32,238,4,"hasNonTaprootFields"],[188,51,238,23],[188,52,238,24,"inputData"],[188,61,238,33],[188,62,238,34],[188,66,238,38,"isTaprootInput"],[188,80,238,52],[188,81,238,53,"newInputData"],[188,93,238,65],[188,94,238,66],[189,4,239,2],[189,8,239,8,"hasMixedFields"],[189,22,239,22],[189,25,240,4,"inputData"],[189,34,240,13],[189,39,240,18,"newInputData"],[189,51,240,30],[189,55,241,4,"isTaprootInput"],[189,69,241,18],[189,70,241,19,"newInputData"],[189,82,241,31],[189,83,241,32],[189,87,242,4,"hasNonTaprootFields"],[189,106,242,23],[189,107,242,24,"newInputData"],[189,119,242,36],[189,120,242,37],[189,121,242,38],[189,122,242,39],[190,4,243,2],[190,8,243,6,"isBadTaprootUpdate"],[190,26,243,24],[190,30,243,28,"isBadNonTaprootUpdate"],[190,51,243,49],[190,55,243,53,"hasMixedFields"],[190,69,243,67],[190,71,244,4],[190,77,244,10],[190,81,244,14,"Error"],[190,86,244,19],[190,87,245,6],[190,117,245,36,"action"],[190,123,245,42],[190,127,245,46],[190,130,246,8],[190,179,247,4],[190,180,247,5],[191,2,248,0],[192,2,249,0],[192,11,249,9,"checkMixedTaprootAndNonTaprootOutputFields"],[192,53,249,51,"checkMixedTaprootAndNonTaprootOutputFields"],[192,54,250,2,"inputData"],[192,63,250,11],[192,65,251,2,"newInputData"],[192,77,251,14],[192,79,252,2,"action"],[192,85,252,8],[192,87,253,2],[193,4,254,2],[193,8,254,8,"isBadTaprootUpdate"],[193,26,254,26],[193,29,255,4,"isTaprootOutput"],[193,44,255,19],[193,45,255,20,"inputData"],[193,54,255,29],[193,55,255,30],[193,59,255,34,"hasNonTaprootFields"],[193,78,255,53],[193,79,255,54,"newInputData"],[193,91,255,66],[193,92,255,67],[194,4,256,2],[194,8,256,8,"isBadNonTaprootUpdate"],[194,29,256,29],[194,32,257,4,"hasNonTaprootFields"],[194,51,257,23],[194,52,257,24,"inputData"],[194,61,257,33],[194,62,257,34],[194,66,257,38,"isTaprootOutput"],[194,81,257,53],[194,82,257,54,"newInputData"],[194,94,257,66],[194,95,257,67],[195,4,258,2],[195,8,258,8,"hasMixedFields"],[195,22,258,22],[195,25,259,4,"inputData"],[195,34,259,13],[195,39,259,18,"newInputData"],[195,51,259,30],[195,55,260,4,"isTaprootOutput"],[195,70,260,19],[195,71,260,20,"newInputData"],[195,83,260,32],[195,84,260,33],[195,88,261,4,"hasNonTaprootFields"],[195,107,261,23],[195,108,261,24,"newInputData"],[195,120,261,36],[195,121,261,37],[196,4,262,2],[196,8,262,6,"isBadTaprootUpdate"],[196,26,262,24],[196,30,262,28,"isBadNonTaprootUpdate"],[196,51,262,49],[196,55,262,53,"hasMixedFields"],[196,69,262,67],[196,71,263,4],[196,77,263,10],[196,81,263,14,"Error"],[196,86,263,19],[196,87,264,6],[196,117,264,36,"action"],[196,123,264,42],[196,127,264,46],[196,130,265,8],[196,179,266,4],[196,180,266,5],[197,2,267,0],[198,2,268,0],[199,0,269,0],[200,0,270,0],[201,0,271,0],[202,0,272,0],[203,0,273,0],[204,0,274,0],[205,0,275,0],[206,2,276,0],[206,11,276,9,"checkIfTapLeafInTree"],[206,31,276,29,"checkIfTapLeafInTree"],[206,32,276,30,"inputData"],[206,41,276,39],[206,43,276,41,"newInputData"],[206,55,276,53],[206,57,276,55,"action"],[206,63,276,61],[206,65,276,63],[207,4,277,2],[207,8,277,6,"newInputData"],[207,20,277,18],[207,21,277,19,"tapMerkleRoot"],[207,34,277,32],[207,36,277,34],[208,6,278,4],[208,10,278,10,"newLeafsInTree"],[208,24,278,24],[208,27,278,27],[208,28,278,28,"newInputData"],[208,40,278,40],[208,41,278,41,"tapLeafScript"],[208,54,278,54],[208,58,278,58],[208,60,278,60],[208,62,278,62,"every"],[208,67,278,67],[208,68,278,68],[208,78,278,68,"l"],[208,79,278,69],[209,8,278,69],[209,15,279,6,"isTapLeafInTree"],[209,30,279,21],[209,31,279,22,"l"],[209,32,279,23],[209,34,279,25,"newInputData"],[209,46,279,37],[209,47,279,38,"tapMerkleRoot"],[209,60,279,51],[209,61,279,52],[210,6,279,52],[210,7,280,4],[210,8,280,5],[211,6,281,4],[211,10,281,10,"oldLeafsInTree"],[211,24,281,24],[211,27,281,27],[211,28,281,28,"inputData"],[211,37,281,37],[211,38,281,38,"tapLeafScript"],[211,51,281,51],[211,55,281,55],[211,57,281,57],[211,59,281,59,"every"],[211,64,281,64],[211,65,281,65],[211,75,281,65,"l"],[211,76,281,66],[212,8,281,66],[212,15,282,6,"isTapLeafInTree"],[212,30,282,21],[212,31,282,22,"l"],[212,32,282,23],[212,34,282,25,"newInputData"],[212,46,282,37],[212,47,282,38,"tapMerkleRoot"],[212,60,282,51],[212,61,282,52],[213,6,282,52],[213,7,283,4],[213,8,283,5],[214,6,284,4],[214,10,284,8],[214,11,284,9,"newLeafsInTree"],[214,25,284,23],[214,29,284,27],[214,30,284,28,"oldLeafsInTree"],[214,44,284,42],[214,46,285,6],[214,52,285,12],[214,56,285,16,"Error"],[214,61,285,21],[214,62,286,8],[214,92,286,38,"action"],[214,98,286,44],[214,130,287,6],[214,131,287,7],[215,4,288,2],[215,5,288,3],[215,11,288,9],[215,15,288,13,"inputData"],[215,24,288,22],[215,25,288,23,"tapMerkleRoot"],[215,38,288,36],[215,40,288,38],[216,6,289,4],[216,10,289,10,"newLeafsInTree"],[216,25,289,24],[216,28,289,27],[216,29,289,28,"newInputData"],[216,41,289,40],[216,42,289,41,"tapLeafScript"],[216,55,289,54],[216,59,289,58],[216,61,289,60],[216,63,289,62,"every"],[216,68,289,67],[216,69,289,68],[216,79,289,68,"l"],[216,80,289,69],[217,8,289,69],[217,15,290,6,"isTapLeafInTree"],[217,30,290,21],[217,31,290,22,"l"],[217,32,290,23],[217,34,290,25,"inputData"],[217,43,290,34],[217,44,290,35,"tapMerkleRoot"],[217,57,290,48],[217,58,290,49],[218,6,290,49],[218,7,291,4],[218,8,291,5],[219,6,292,4],[219,10,292,8],[219,11,292,9,"newLeafsInTree"],[219,26,292,23],[219,28,293,6],[219,34,293,12],[219,38,293,16,"Error"],[219,43,293,21],[219,44,294,8],[219,74,294,38,"action"],[219,80,294,44],[219,112,295,6],[219,113,295,7],[220,4,296,2],[221,2,297,0],[222,2,298,0],[223,0,299,0],[224,0,300,0],[225,0,301,0],[226,0,302,0],[227,0,303,0],[228,2,304,0],[228,11,304,9,"isTapLeafInTree"],[228,26,304,24,"isTapLeafInTree"],[228,27,304,25,"tapLeaf"],[228,34,304,32],[228,36,304,34,"merkleRoot"],[228,46,304,44],[228,48,304,46],[229,4,305,2],[229,8,305,6],[229,9,305,7,"merkleRoot"],[229,19,305,17],[229,21,305,19],[229,28,305,26],[229,32,305,30],[230,4,306,2],[230,8,306,8,"leafHash"],[230,16,306,16],[230,19,306,19],[230,20,306,20],[230,21,306,21],[230,23,306,23,"_$$_REQUIRE"],[230,34,306,23],[230,35,306,23,"_dependencyMap"],[230,49,306,23],[230,76,306,32,"tapleafHash"],[230,87,306,43],[230,89,306,45],[231,6,307,4,"output"],[231,12,307,10],[231,14,307,12,"tapLeaf"],[231,21,307,19],[231,22,307,20,"script"],[231,28,307,26],[232,6,308,4,"version"],[232,13,308,11],[232,15,308,13,"tapLeaf"],[232,22,308,20],[232,23,308,21,"leafVersion"],[233,4,309,2],[233,5,309,3],[233,6,309,4],[234,4,310,2],[234,8,310,8,"rootHash"],[234,16,310,16],[234,19,310,19],[234,20,310,20],[234,21,310,21],[234,23,310,23,"_$$_REQUIRE"],[234,34,310,23],[234,35,310,23,"_dependencyMap"],[234,49,310,23],[234,76,310,32,"rootHashFromPath"],[234,92,310,48],[234,94,311,4,"tapLeaf"],[234,101,311,11],[234,102,311,12,"controlBlock"],[234,114,311,24],[234,116,312,4,"leafHash"],[234,124,313,2],[234,125,313,3],[235,4,314,2],[235,11,314,9,"rootHash"],[235,19,314,17],[235,20,314,18,"equals"],[235,26,314,24],[235,27,314,25,"merkleRoot"],[235,37,314,35],[235,38,314,36],[236,2,315,0],[237,2,316,0],[238,0,317,0],[239,0,318,0],[240,0,319,0],[241,0,320,0],[242,0,321,0],[243,0,322,0],[244,2,323,0],[244,11,323,9,"sortSignatures"],[244,25,323,23,"sortSignatures"],[244,26,323,24,"input"],[244,31,323,29],[244,33,323,31,"tapLeaf"],[244,40,323,38],[244,42,323,40],[245,4,324,2],[245,8,324,8,"leafHash"],[245,16,324,16],[245,19,324,19],[245,20,324,20],[245,21,324,21],[245,23,324,23,"_$$_REQUIRE"],[245,34,324,23],[245,35,324,23,"_dependencyMap"],[245,49,324,23],[245,76,324,32,"tapleafHash"],[245,87,324,43],[245,89,324,45],[246,6,325,4,"output"],[246,12,325,10],[246,14,325,12,"tapLeaf"],[246,21,325,19],[246,22,325,20,"script"],[246,28,325,26],[247,6,326,4,"version"],[247,13,326,11],[247,15,326,13,"tapLeaf"],[247,22,326,20],[247,23,326,21,"leafVersion"],[248,4,327,2],[248,5,327,3],[248,6,327,4],[249,4,328,2],[249,11,328,9],[249,12,328,10,"input"],[249,17,328,15],[249,18,328,16,"tapScriptSig"],[249,30,328,28],[249,34,328,32],[249,36,328,34],[249,38,329,5,"filter"],[249,44,329,11],[249,45,329,12],[249,55,329,12,"tss"],[249,58,329,15],[250,6,329,15],[250,13,329,19,"tss"],[250,16,329,22],[250,17,329,23,"leafHash"],[250,25,329,31],[250,26,329,32,"equals"],[250,32,329,38],[250,33,329,39,"leafHash"],[250,41,329,47],[250,42,329,48],[251,4,329,48],[251,6,329,49],[251,7,330,5,"map"],[251,10,330,8],[251,11,330,9],[251,21,330,9,"tss"],[251,24,330,12],[252,6,330,12],[252,13,330,16,"addPubkeyPositionInScript"],[252,38,330,41],[252,39,330,42,"tapLeaf"],[252,46,330,49],[252,47,330,50,"script"],[252,53,330,56],[252,55,330,58,"tss"],[252,58,330,61],[252,59,330,62],[253,4,330,62],[253,6,330,63],[253,7,331,5,"sort"],[253,11,331,9],[253,12,331,10],[253,22,331,11,"t1"],[253,24,331,13],[253,26,331,15,"t2"],[253,28,331,17],[254,6,331,17],[254,13,331,22,"t2"],[254,15,331,24],[254,16,331,25,"positionInScript"],[254,32,331,41],[254,35,331,44,"t1"],[254,37,331,46],[254,38,331,47,"positionInScript"],[254,54,331,63],[255,4,331,63],[255,6,331,64],[255,7,332,5,"map"],[255,10,332,8],[255,11,332,9],[255,21,332,9,"t"],[255,22,332,10],[256,6,332,10],[256,13,332,14,"t"],[256,14,332,15],[256,15,332,16,"signature"],[256,24,332,25],[257,4,332,25],[257,6,332,26],[258,2,333,0],[259,2,334,0],[260,0,335,0],[261,0,336,0],[262,0,337,0],[263,0,338,0],[264,0,339,0],[265,2,340,0],[265,11,340,9,"addPubkeyPositionInScript"],[265,36,340,34,"addPubkeyPositionInScript"],[265,37,340,35,"script"],[265,43,340,41],[265,45,340,43,"tss"],[265,48,340,46],[265,50,340,48],[266,4,341,2],[266,11,341,9,"Object"],[266,17,341,15],[266,18,341,16,"assign"],[266,24,341,22],[266,25,342,4],[267,6,343,6,"positionInScript"],[267,22,343,22],[267,24,343,24],[267,25,343,25],[267,26,343,26],[267,28,343,28,"_$$_REQUIRE"],[267,39,343,28],[267,40,343,28,"_dependencyMap"],[267,54,343,28],[267,74,343,40,"pubkeyPositionInScript"],[267,96,343,62],[267,98,344,8,"tss"],[267,101,344,11],[267,102,344,12,"pubkey"],[267,108,344,18],[267,110,345,8,"script"],[267,116,346,6],[268,4,347,4],[268,5,347,5],[268,7,348,4,"tss"],[268,10,349,2],[268,11,349,3],[269,2,350,0],[270,2,351,0],[271,0,352,0],[272,0,353,0],[273,2,354,0],[273,11,354,9,"findTapLeafToFinalize"],[273,32,354,30,"findTapLeafToFinalize"],[273,33,354,31,"input"],[273,38,354,36],[273,40,354,38,"inputIndex"],[273,50,354,48],[273,52,354,50,"leafHashToFinalize"],[273,70,354,68],[273,72,354,70],[274,4,355,2],[274,8,355,6],[274,9,355,7,"input"],[274,14,355,12],[274,15,355,13,"tapScriptSig"],[274,27,355,25],[274,31,355,29],[274,32,355,30,"input"],[274,37,355,35],[274,38,355,36,"tapScriptSig"],[274,50,355,48],[274,51,355,49,"length"],[274,57,355,55],[274,59,356,4],[274,65,356,10],[274,69,356,14,"Error"],[274,74,356,19],[274,75,357,6],[274,110,357,41,"inputIndex"],[274,120,357,51],[274,161,358,4],[274,162,358,5],[275,4,359,2],[275,8,359,8,"tapLeaf"],[275,15,359,15],[275,18,359,18],[275,19,359,19,"input"],[275,24,359,24],[275,25,359,25,"tapLeafScript"],[275,38,359,38],[275,42,359,42],[275,44,359,44],[275,46,360,5,"sort"],[275,50,360,9],[275,51,360,10],[275,61,360,11,"a"],[275,62,360,12],[275,64,360,14,"b"],[275,65,360,15],[276,6,360,15],[276,13,360,20,"a"],[276,14,360,21],[276,15,360,22,"controlBlock"],[276,27,360,34],[276,28,360,35,"length"],[276,34,360,41],[276,37,360,44,"b"],[276,38,360,45],[276,39,360,46,"controlBlock"],[276,51,360,58],[276,52,360,59,"length"],[276,58,360,65],[277,4,360,65],[277,6,360,66],[277,7,361,5,"find"],[277,11,361,9],[277,12,361,10],[277,22,361,10,"leaf"],[277,26,361,14],[278,6,361,14],[278,13,362,6,"canFinalizeLeaf"],[278,28,362,21],[278,29,362,22,"leaf"],[278,33,362,26],[278,35,362,28,"input"],[278,40,362,33],[278,41,362,34,"tapScriptSig"],[278,53,362,46],[278,55,362,48,"leafHashToFinalize"],[278,73,362,66],[278,74,362,67],[279,4,362,67],[279,5,363,4],[279,6,363,5],[280,4,364,2],[280,8,364,6],[280,9,364,7,"tapLeaf"],[280,16,364,14],[280,18,365,4],[280,24,365,10],[280,28,365,14,"Error"],[280,33,365,19],[280,34,366,6],[280,69,366,41,"inputIndex"],[280,79,366,51],[280,122,367,4],[280,123,367,5],[281,4,368,2],[281,11,368,9,"tapLeaf"],[281,18,368,16],[282,2,369,0],[283,2,370,0],[284,0,371,0],[285,0,372,0],[286,0,373,0],[287,0,374,0],[288,0,375,0],[289,0,376,0],[290,0,377,0],[291,2,378,0],[291,11,378,9,"canFinalizeLeaf"],[291,26,378,24,"canFinalizeLeaf"],[291,27,378,25,"leaf"],[291,31,378,29],[291,33,378,31,"tapScriptSig"],[291,45,378,43],[291,47,378,45,"hash"],[291,51,378,49],[291,53,378,51],[292,4,379,2],[292,8,379,8,"leafHash"],[292,16,379,16],[292,19,379,19],[292,20,379,20],[292,21,379,21],[292,23,379,23,"_$$_REQUIRE"],[292,34,379,23],[292,35,379,23,"_dependencyMap"],[292,49,379,23],[292,76,379,32,"tapleafHash"],[292,87,379,43],[292,89,379,45],[293,6,380,4,"output"],[293,12,380,10],[293,14,380,12,"leaf"],[293,18,380,16],[293,19,380,17,"script"],[293,25,380,23],[294,6,381,4,"version"],[294,13,381,11],[294,15,381,13,"leaf"],[294,19,381,17],[294,20,381,18,"leafVersion"],[295,4,382,2],[295,5,382,3],[295,6,382,4],[296,4,383,2],[296,8,383,8,"whiteListedHash"],[296,23,383,23],[296,26,383,26],[296,27,383,27,"hash"],[296,31,383,31],[296,35,383,35,"hash"],[296,39,383,39],[296,40,383,40,"equals"],[296,46,383,46],[296,47,383,47,"leafHash"],[296,55,383,55],[296,56,383,56],[297,4,384,2],[297,11,385,4,"whiteListedHash"],[297,26,385,19],[297,30,386,4,"tapScriptSig"],[297,42,386,16],[297,43,386,17,"find"],[297,47,386,21],[297,48,386,22],[297,58,386,22,"tss"],[297,61,386,25],[298,6,386,25],[298,13,386,29,"tss"],[298,16,386,32],[298,17,386,33,"leafHash"],[298,25,386,41],[298,26,386,42,"equals"],[298,32,386,48],[298,33,386,49,"leafHash"],[298,41,386,57],[298,42,386,58],[299,4,386,58],[299,6,386,59],[299,11,386,64,"undefined"],[299,20,386,73],[300,2,388,0],[301,2,389,0],[302,0,390,0],[303,0,391,0],[304,0,392,0],[305,0,393,0],[306,0,394,0],[307,2,395,0],[307,11,395,9,"hasNonTaprootFields"],[307,30,395,28,"hasNonTaprootFields"],[307,31,395,29,"io"],[307,33,395,31],[307,35,395,33],[308,4,396,2],[308,11,397,4,"io"],[308,13,397,6],[308,17,398,4],[308,18,398,5],[308,20,399,6,"io"],[308,22,399,8],[308,23,399,9,"redeemScript"],[308,35,399,21],[308,39,400,6,"io"],[308,41,400,8],[308,42,400,9,"witnessScript"],[308,55,400,22],[308,59,401,7,"io"],[308,61,401,9],[308,62,401,10,"bip32Derivation"],[308,77,401,25],[308,81,401,29,"io"],[308,83,401,31],[308,84,401,32,"bip32Derivation"],[308,99,401,47],[308,100,401,48,"length"],[308,106,401,55],[308,107,402,5],[309,2,404,0],[310,0,404,1],[310,3]],"functionMap":{"names":["<global>","toXOnly","tapScriptFinalizer","serializeTaprootSignature","isTaprootInput","isTaprootOutput","checkTaprootInputFields","checkTaprootOutputFields","checkTaprootScriptPubkey","getTaprootScripPubkey","tweakInternalPubKey","tapTreeToList","tapTreeFromList","checkTaprootInputForSigs","sigs.some$argument_0","decodeSchnorrSignature","extractTaprootSigs","input.tapScriptSig.map$argument_0","getTapKeySigFromWithness","_tapTreeToList","instertLeavesInTree","instertLeafInTree","checkMixedTaprootAndNonTaprootInputFields","checkMixedTaprootAndNonTaprootOutputFields","checkIfTapLeafInTree","every$argument_0","isTapLeafInTree","sortSignatures","filter$argument_0","filter.map$argument_0","filter.map.sort$argument_0","filter.map.sort.map$argument_0","addPubkeyPositionInScript","findTapLeafToFinalize","sort$argument_0","sort.find$argument_0","canFinalizeLeaf","tapScriptSig.find$argument_0","hasNonTaprootFields"],"mappings":"AAA;gBCoB,+DD;AEW;CFe;AGE;CHK;AIE;CJW;AKE;CLU;AME;CNG;AOE;CPG;AQE;CRW;ASC;CTO;AUC;CVY;AWU;CXM;AYU;CZO;AaE;mBCE;+EDC;CbE;AeE;CfM;AgBC;wCCI,gBD;ChBM;AkBC;ClBK;AmBC;CnBe;AoBC;CpBO;AqBC;CrBgB;AsBC;CtBkB;AuBC;CvBkB;AwBS;oECE;oDDC;iECE;oDDC;oECO;iDDC;CxBO;A0BO;C1BW;A2BQ;YCM,oCD;SEC,qDF;UGC,qDH;SIC,gBJ;C3BC;AgCO;ChCU;AiCI;UCM,uDD;UEC;mEFC;CjCO;AoCS;sBCQ,oCD;CpCE;AsCO;CtCS"}},"type":"js/module"}]}