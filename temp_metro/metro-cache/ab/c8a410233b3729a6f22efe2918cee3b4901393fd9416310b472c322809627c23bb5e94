{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // baseline estimates, used to improve performance\n  var TX_EMPTY_SIZE = 4 + 1 + 1 + 4;\n  var TX_INPUT_BASE = 32 + 4 + 1 + 4;\n  var TX_INPUT_PUBKEYHASH = 107;\n  var TX_OUTPUT_BASE = 8 + 1;\n  var TX_OUTPUT_PUBKEYHASH = 25;\n  function inputBytes(input) {\n    return TX_INPUT_BASE + (input.script ? input.script.length : TX_INPUT_PUBKEYHASH);\n  }\n  function outputBytes(output) {\n    return TX_OUTPUT_BASE + (output.script ? output.script.length : TX_OUTPUT_PUBKEYHASH);\n  }\n  function dustThreshold(output, feeRate) {\n    /* ... classify the output for input estimate  */\n    return inputBytes({}) * feeRate;\n  }\n  function transactionBytes(inputs, outputs) {\n    return TX_EMPTY_SIZE + inputs.reduce(function (a, x) {\n      return a + inputBytes(x);\n    }, 0) + outputs.reduce(function (a, x) {\n      return a + outputBytes(x);\n    }, 0);\n  }\n  function uintOrNaN(v) {\n    if (typeof v !== 'number') return NaN;\n    if (!isFinite(v)) return NaN;\n    if (Math.floor(v) !== v) return NaN;\n    if (v < 0) return NaN;\n    return v;\n  }\n  function positiveNumOrNaN(v) {\n    if (typeof v !== 'number') return NaN;\n    if (!isFinite(v)) return NaN;\n    if (v < 0) return NaN;\n    return v;\n  }\n  function sumForgiving(range) {\n    return range.reduce(function (a, x) {\n      return a + (isFinite(x.value) ? x.value : 0);\n    }, 0);\n  }\n  function sumOrNaN(range) {\n    return range.reduce(function (a, x) {\n      return a + uintOrNaN(x.value);\n    }, 0);\n  }\n  var BLANK_OUTPUT = outputBytes({});\n  function finalize(inputs, outputs, feeRate) {\n    var bytesAccum = transactionBytes(inputs, outputs);\n    var feeAfterExtraOutput = Math.round(feeRate * (bytesAccum + BLANK_OUTPUT));\n    var remainderAfterExtraOutput = sumOrNaN(inputs) - (sumOrNaN(outputs) + feeAfterExtraOutput);\n\n    // is it worth a change output?\n    if (remainderAfterExtraOutput > dustThreshold({}, feeRate)) {\n      outputs = outputs.concat({\n        value: remainderAfterExtraOutput\n      });\n    }\n    var fee = sumOrNaN(inputs) - sumOrNaN(outputs);\n    if (!isFinite(fee)) return {\n      fee: feeRate * bytesAccum\n    };\n    return {\n      inputs: inputs,\n      outputs: outputs,\n      fee: fee\n    };\n  }\n  module.exports = {\n    dustThreshold: dustThreshold,\n    finalize: finalize,\n    inputBytes: inputBytes,\n    outputBytes: outputBytes,\n    sumOrNaN: sumOrNaN,\n    sumForgiving: sumForgiving,\n    transactionBytes: transactionBytes,\n    uintOrNaN: uintOrNaN,\n    positiveNumOrNaN: positiveNumOrNaN\n  };\n});","lineCount":81,"map":[[2,2,1,0],[3,2,2,0],[3,6,2,4,"TX_EMPTY_SIZE"],[3,19,2,17],[3,22,2,20],[3,23,2,21],[3,26,2,24],[3,27,2,25],[3,30,2,28],[3,31,2,29],[3,34,2,32],[3,35,2,33],[4,2,3,0],[4,6,3,4,"TX_INPUT_BASE"],[4,19,3,17],[4,22,3,20],[4,24,3,22],[4,27,3,25],[4,28,3,26],[4,31,3,29],[4,32,3,30],[4,35,3,33],[4,36,3,34],[5,2,4,0],[5,6,4,4,"TX_INPUT_PUBKEYHASH"],[5,25,4,23],[5,28,4,26],[5,31,4,29],[6,2,5,0],[6,6,5,4,"TX_OUTPUT_BASE"],[6,20,5,18],[6,23,5,21],[6,24,5,22],[6,27,5,25],[6,28,5,26],[7,2,6,0],[7,6,6,4,"TX_OUTPUT_PUBKEYHASH"],[7,26,6,24],[7,29,6,27],[7,31,6,29],[8,2,8,0],[8,11,8,9,"inputBytes"],[8,21,8,19,"inputBytes"],[8,22,8,21,"input"],[8,27,8,26],[8,29,8,28],[9,4,9,2],[9,11,9,9,"TX_INPUT_BASE"],[9,24,9,22],[9,28,9,26,"input"],[9,33,9,31],[9,34,9,32,"script"],[9,40,9,38],[9,43,9,41,"input"],[9,48,9,46],[9,49,9,47,"script"],[9,55,9,53],[9,56,9,54,"length"],[9,62,9,60],[9,65,9,63,"TX_INPUT_PUBKEYHASH"],[9,84,9,82],[9,85,9,83],[10,2,10,0],[11,2,12,0],[11,11,12,9,"outputBytes"],[11,22,12,20,"outputBytes"],[11,23,12,22,"output"],[11,29,12,28],[11,31,12,30],[12,4,13,2],[12,11,13,9,"TX_OUTPUT_BASE"],[12,25,13,23],[12,29,13,27,"output"],[12,35,13,33],[12,36,13,34,"script"],[12,42,13,40],[12,45,13,43,"output"],[12,51,13,49],[12,52,13,50,"script"],[12,58,13,56],[12,59,13,57,"length"],[12,65,13,63],[12,68,13,66,"TX_OUTPUT_PUBKEYHASH"],[12,88,13,86],[12,89,13,87],[13,2,14,0],[14,2,16,0],[14,11,16,9,"dustThreshold"],[14,24,16,22,"dustThreshold"],[14,25,16,24,"output"],[14,31,16,30],[14,33,16,32,"feeRate"],[14,40,16,39],[14,42,16,41],[15,4,17,2],[16,4,18,2],[16,11,18,9,"inputBytes"],[16,21,18,19],[16,22,18,20],[16,23,18,21],[16,24,18,22],[16,25,18,23],[16,28,18,26,"feeRate"],[16,35,18,33],[17,2,19,0],[18,2,21,0],[18,11,21,9,"transactionBytes"],[18,27,21,25,"transactionBytes"],[18,28,21,27,"inputs"],[18,34,21,33],[18,36,21,35,"outputs"],[18,43,21,42],[18,45,21,44],[19,4,22,2],[19,11,22,9,"TX_EMPTY_SIZE"],[19,24,22,22],[19,27,23,4,"inputs"],[19,33,23,10],[19,34,23,11,"reduce"],[19,40,23,17],[19,41,23,18],[19,51,23,28,"a"],[19,52,23,29],[19,54,23,31,"x"],[19,55,23,32],[19,57,23,34],[20,6,23,36],[20,13,23,43,"a"],[20,14,23,44],[20,17,23,47,"inputBytes"],[20,27,23,57],[20,28,23,58,"x"],[20,29,23,59],[20,30,23,60],[21,4,23,61],[21,5,23,62],[21,7,23,64],[21,8,23,65],[21,9,23,66],[21,12,24,4,"outputs"],[21,19,24,11],[21,20,24,12,"reduce"],[21,26,24,18],[21,27,24,19],[21,37,24,29,"a"],[21,38,24,30],[21,40,24,32,"x"],[21,41,24,33],[21,43,24,35],[22,6,24,37],[22,13,24,44,"a"],[22,14,24,45],[22,17,24,48,"outputBytes"],[22,28,24,59],[22,29,24,60,"x"],[22,30,24,61],[22,31,24,62],[23,4,24,63],[23,5,24,64],[23,7,24,66],[23,8,24,67],[23,9,24,68],[24,2,25,0],[25,2,27,0],[25,11,27,9,"uintOrNaN"],[25,20,27,18,"uintOrNaN"],[25,21,27,20,"v"],[25,22,27,21],[25,24,27,23],[26,4,28,2],[26,8,28,6],[26,15,28,13,"v"],[26,16,28,14],[26,21,28,19],[26,29,28,27],[26,31,28,29],[26,38,28,36,"NaN"],[26,41,28,39],[27,4,29,2],[27,8,29,6],[27,9,29,7,"isFinite"],[27,17,29,15],[27,18,29,16,"v"],[27,19,29,17],[27,20,29,18],[27,22,29,20],[27,29,29,27,"NaN"],[27,32,29,30],[28,4,30,2],[28,8,30,6,"Math"],[28,12,30,10],[28,13,30,11,"floor"],[28,18,30,16],[28,19,30,17,"v"],[28,20,30,18],[28,21,30,19],[28,26,30,24,"v"],[28,27,30,25],[28,29,30,27],[28,36,30,34,"NaN"],[28,39,30,37],[29,4,31,2],[29,8,31,6,"v"],[29,9,31,7],[29,12,31,10],[29,13,31,11],[29,15,31,13],[29,22,31,20,"NaN"],[29,25,31,23],[30,4,32,2],[30,11,32,9,"v"],[30,12,32,10],[31,2,33,0],[32,2,35,0],[32,11,35,9,"positiveNumOrNaN"],[32,27,35,25,"positiveNumOrNaN"],[32,28,35,27,"v"],[32,29,35,28],[32,31,35,30],[33,4,36,2],[33,8,36,6],[33,15,36,13,"v"],[33,16,36,14],[33,21,36,19],[33,29,36,27],[33,31,36,29],[33,38,36,36,"NaN"],[33,41,36,39],[34,4,37,2],[34,8,37,6],[34,9,37,7,"isFinite"],[34,17,37,15],[34,18,37,16,"v"],[34,19,37,17],[34,20,37,18],[34,22,37,20],[34,29,37,27,"NaN"],[34,32,37,30],[35,4,38,2],[35,8,38,6,"v"],[35,9,38,7],[35,12,38,10],[35,13,38,11],[35,15,38,13],[35,22,38,20,"NaN"],[35,25,38,23],[36,4,39,2],[36,11,39,9,"v"],[36,12,39,10],[37,2,40,0],[38,2,42,0],[38,11,42,9,"sumForgiving"],[38,23,42,21,"sumForgiving"],[38,24,42,23,"range"],[38,29,42,28],[38,31,42,30],[39,4,43,2],[39,11,43,9,"range"],[39,16,43,14],[39,17,43,15,"reduce"],[39,23,43,21],[39,24,43,22],[39,34,43,32,"a"],[39,35,43,33],[39,37,43,35,"x"],[39,38,43,36],[39,40,43,38],[40,6,43,40],[40,13,43,47,"a"],[40,14,43,48],[40,18,43,52,"isFinite"],[40,26,43,60],[40,27,43,61,"x"],[40,28,43,62],[40,29,43,63,"value"],[40,34,43,68],[40,35,43,69],[40,38,43,72,"x"],[40,39,43,73],[40,40,43,74,"value"],[40,45,43,79],[40,48,43,82],[40,49,43,83],[40,50,43,84],[41,4,43,85],[41,5,43,86],[41,7,43,88],[41,8,43,89],[41,9,43,90],[42,2,44,0],[43,2,46,0],[43,11,46,9,"sumOrNaN"],[43,19,46,17,"sumOrNaN"],[43,20,46,19,"range"],[43,25,46,24],[43,27,46,26],[44,4,47,2],[44,11,47,9,"range"],[44,16,47,14],[44,17,47,15,"reduce"],[44,23,47,21],[44,24,47,22],[44,34,47,32,"a"],[44,35,47,33],[44,37,47,35,"x"],[44,38,47,36],[44,40,47,38],[45,6,47,40],[45,13,47,47,"a"],[45,14,47,48],[45,17,47,51,"uintOrNaN"],[45,26,47,60],[45,27,47,61,"x"],[45,28,47,62],[45,29,47,63,"value"],[45,34,47,68],[45,35,47,69],[46,4,47,70],[46,5,47,71],[46,7,47,73],[46,8,47,74],[46,9,47,75],[47,2,48,0],[48,2,50,0],[48,6,50,4,"BLANK_OUTPUT"],[48,18,50,16],[48,21,50,19,"outputBytes"],[48,32,50,30],[48,33,50,31],[48,34,50,32],[48,35,50,33],[48,36,50,34],[49,2,52,0],[49,11,52,9,"finalize"],[49,19,52,17,"finalize"],[49,20,52,19,"inputs"],[49,26,52,25],[49,28,52,27,"outputs"],[49,35,52,34],[49,37,52,36,"feeRate"],[49,44,52,43],[49,46,52,45],[50,4,53,2],[50,8,53,6,"bytesAccum"],[50,18,53,16],[50,21,53,19,"transactionBytes"],[50,37,53,35],[50,38,53,36,"inputs"],[50,44,53,42],[50,46,53,44,"outputs"],[50,53,53,51],[50,54,53,52],[51,4,54,2],[51,8,54,6,"feeAfterExtraOutput"],[51,27,54,25],[51,30,54,28,"Math"],[51,34,54,32],[51,35,54,33,"round"],[51,40,54,38],[51,41,54,39,"feeRate"],[51,48,54,46],[51,52,54,50,"bytesAccum"],[51,62,54,60],[51,65,54,63,"BLANK_OUTPUT"],[51,77,54,75],[51,78,54,76],[51,79,54,77],[52,4,55,2],[52,8,55,6,"remainderAfterExtraOutput"],[52,33,55,31],[52,36,55,34,"sumOrNaN"],[52,44,55,42],[52,45,55,43,"inputs"],[52,51,55,49],[52,52,55,50],[52,56,55,54,"sumOrNaN"],[52,64,55,62],[52,65,55,63,"outputs"],[52,72,55,70],[52,73,55,71],[52,76,55,74,"feeAfterExtraOutput"],[52,95,55,93],[52,96,55,94],[54,4,57,2],[55,4,58,2],[55,8,58,6,"remainderAfterExtraOutput"],[55,33,58,31],[55,36,58,34,"dustThreshold"],[55,49,58,47],[55,50,58,48],[55,51,58,49],[55,52,58,50],[55,54,58,52,"feeRate"],[55,61,58,59],[55,62,58,60],[55,64,58,62],[56,6,59,4,"outputs"],[56,13,59,11],[56,16,59,14,"outputs"],[56,23,59,21],[56,24,59,22,"concat"],[56,30,59,28],[56,31,59,29],[57,8,59,31,"value"],[57,13,59,36],[57,15,59,38,"remainderAfterExtraOutput"],[58,6,59,64],[58,7,59,65],[58,8,59,66],[59,4,60,2],[60,4,62,2],[60,8,62,6,"fee"],[60,11,62,9],[60,14,62,12,"sumOrNaN"],[60,22,62,20],[60,23,62,21,"inputs"],[60,29,62,27],[60,30,62,28],[60,33,62,31,"sumOrNaN"],[60,41,62,39],[60,42,62,40,"outputs"],[60,49,62,47],[60,50,62,48],[61,4,63,2],[61,8,63,6],[61,9,63,7,"isFinite"],[61,17,63,15],[61,18,63,16,"fee"],[61,21,63,19],[61,22,63,20],[61,24,63,22],[61,31,63,29],[62,6,63,31,"fee"],[62,9,63,34],[62,11,63,36,"feeRate"],[62,18,63,43],[62,21,63,46,"bytesAccum"],[63,4,63,57],[63,5,63,58],[64,4,65,2],[64,11,65,9],[65,6,66,4,"inputs"],[65,12,66,10],[65,14,66,12,"inputs"],[65,20,66,18],[66,6,67,4,"outputs"],[66,13,67,11],[66,15,67,13,"outputs"],[66,22,67,20],[67,6,68,4,"fee"],[67,9,68,7],[67,11,68,9,"fee"],[68,4,69,2],[68,5,69,3],[69,2,70,0],[70,2,72,0,"module"],[70,8,72,6],[70,9,72,7,"exports"],[70,16,72,14],[70,19,72,17],[71,4,73,2,"dustThreshold"],[71,17,73,15],[71,19,73,17,"dustThreshold"],[71,32,73,30],[72,4,74,2,"finalize"],[72,12,74,10],[72,14,74,12,"finalize"],[72,22,74,20],[73,4,75,2,"inputBytes"],[73,14,75,12],[73,16,75,14,"inputBytes"],[73,26,75,24],[74,4,76,2,"outputBytes"],[74,15,76,13],[74,17,76,15,"outputBytes"],[74,28,76,26],[75,4,77,2,"sumOrNaN"],[75,12,77,10],[75,14,77,12,"sumOrNaN"],[75,22,77,20],[76,4,78,2,"sumForgiving"],[76,16,78,14],[76,18,78,16,"sumForgiving"],[76,30,78,28],[77,4,79,2,"transactionBytes"],[77,20,79,18],[77,22,79,20,"transactionBytes"],[77,38,79,36],[78,4,80,2,"uintOrNaN"],[78,13,80,11],[78,15,80,13,"uintOrNaN"],[78,24,80,22],[79,4,81,2,"positiveNumOrNaN"],[79,20,81,18],[79,22,81,20,"positiveNumOrNaN"],[80,2,82,0],[80,3,82,1],[81,0,82,1],[81,3]],"functionMap":{"names":["<global>","inputBytes","outputBytes","dustThreshold","transactionBytes","inputs.reduce$argument_0","outputs.reduce$argument_0","uintOrNaN","positiveNumOrNaN","sumForgiving","range.reduce$argument_0","sumOrNaN","finalize"],"mappings":"AAA;ACO;CDE;AEE;CFE;AGE;CHG;AIE;kBCE,4CD;mBEC,6CF;CJC;AOE;CPM;AQE;CRK;ASE;sBCC,gED;CTC;AWE;sBDC,iDC;CXC;AYI;CZkB"}},"type":"js/module"}]}