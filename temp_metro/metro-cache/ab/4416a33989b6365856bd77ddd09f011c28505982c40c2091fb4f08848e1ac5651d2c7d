{"dependencies":[{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":221,"column":43,"index":7968}}],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":221,"column":43,"index":7968}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":221,"column":43,"index":7968}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"./fountainUtils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":24,"index":175},"end":{"line":5,"column":50,"index":201}}],"key":"MM4T9KPS6t3kff0JmAdPdrFfz+8="}},{"name":"./utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":16,"index":131},"end":{"line":4,"column":34,"index":149}},{"start":{"line":4,"column":16,"index":131},"end":{"line":4,"column":34,"index":149}},{"start":{"line":4,"column":16,"index":131},"end":{"line":4,"column":34,"index":149}},{"start":{"line":4,"column":16,"index":131},"end":{"line":4,"column":34,"index":149}},{"start":{"line":4,"column":16,"index":131},"end":{"line":4,"column":34,"index":149}},{"start":{"line":4,"column":16,"index":131},"end":{"line":4,"column":34,"index":149}}],"key":"Arg6QRuIuy5D/jfcnxX1qJiHjX8="}},{"name":"./errors","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":17,"index":220},"end":{"line":6,"column":36,"index":239}}],"key":"GlkDztMSsNRYmp31iO+V/Albin8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/toConsumableArray\");\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.FountainDecoderPart = void 0;\n  var FountainDecoderPart = /*#__PURE__*/function () {\n    function FountainDecoderPart(_indexes, _fragment) {\n      _classCallCheck(this, FountainDecoderPart);\n      this._indexes = _indexes;\n      this._fragment = _fragment;\n    }\n    return _createClass(FountainDecoderPart, [{\n      key: \"indexes\",\n      get: function get() {\n        return this._indexes;\n      }\n    }, {\n      key: \"fragment\",\n      get: function get() {\n        return this._fragment;\n      }\n    }, {\n      key: \"isSimple\",\n      value: function isSimple() {\n        return this.indexes.length === 1;\n      }\n    }], [{\n      key: \"fromEncoderPart\",\n      value: function fromEncoderPart(encoderPart) {\n        var indexes = _$$_REQUIRE(_dependencyMap[3], \"./fountainUtils\").chooseFragments(encoderPart.seqNum, encoderPart.seqLength, encoderPart.checksum);\n        var fragment = encoderPart.fragment;\n        return new FountainDecoderPart(indexes, fragment);\n      }\n    }]);\n  }();\n  exports.FountainDecoderPart = FountainDecoderPart;\n  var FountainDecoder = /*#__PURE__*/function () {\n    function FountainDecoder() {\n      _classCallCheck(this, FountainDecoder);\n      this.result = undefined;\n      this.expectedMessageLength = 0;\n      this.expectedChecksum = 0;\n      this.expectedFragmentLength = 0;\n      this.processedPartsCount = 0;\n      this.expectedPartIndexes = [];\n      this.lastPartIndexes = [];\n      this.queuedParts = [];\n      this.receivedPartIndexes = [];\n      this.mixedParts = [];\n      this.simpleParts = [];\n    }\n    return _createClass(FountainDecoder, [{\n      key: \"validatePart\",\n      value: function validatePart(part) {\n        var _this = this;\n        // If this is the first part we've seen\n        if (this.expectedPartIndexes.length === 0) {\n          // Record the things that all the other parts we see will have to match to be valid.\n          _toConsumableArray(new Array(part.seqLength)).forEach(function (_, index) {\n            return _this.expectedPartIndexes.push(index);\n          });\n          this.expectedMessageLength = part.messageLength;\n          this.expectedChecksum = part.checksum;\n          this.expectedFragmentLength = part.fragment.length;\n        } else {\n          // If this part's values don't match the first part's values, throw away the part\n          if (this.expectedPartIndexes.length !== part.seqLength) {\n            return false;\n          }\n          if (this.expectedMessageLength !== part.messageLength) {\n            return false;\n          }\n          if (this.expectedChecksum !== part.checksum) {\n            return false;\n          }\n          if (this.expectedFragmentLength !== part.fragment.length) {\n            return false;\n          }\n        }\n        // This part should be processed\n        return true;\n      }\n    }, {\n      key: \"reducePartByPart\",\n      value: function reducePartByPart(a, b) {\n        // If the fragments mixed into `b` are a strict (proper) subset of those in `a`...\n        if (_$$_REQUIRE(_dependencyMap[4], \"./utils\").arrayContains(a.indexes, b.indexes)) {\n          var newIndexes = _$$_REQUIRE(_dependencyMap[4], \"./utils\").setDifference(a.indexes, b.indexes);\n          var newFragment = _$$_REQUIRE(_dependencyMap[4], \"./utils\").bufferXOR(a.fragment, b.fragment);\n          return new FountainDecoderPart(newIndexes, newFragment);\n        } else {\n          // `a` is not reducable by `b`, so return a\n          return a;\n        }\n      }\n    }, {\n      key: \"reduceMixedBy\",\n      value: function reduceMixedBy(part) {\n        var _this2 = this;\n        var newMixed = [];\n        this.mixedParts.map(function (_ref) {\n          var mixedPart = _ref.value;\n          return _this2.reducePartByPart(mixedPart, part);\n        }).forEach(function (reducedPart) {\n          if (reducedPart.isSimple()) {\n            _this2.queuedParts.push(reducedPart);\n          } else {\n            newMixed.push({\n              key: reducedPart.indexes,\n              value: reducedPart\n            });\n          }\n        });\n        this.mixedParts = newMixed;\n      }\n    }, {\n      key: \"processSimplePart\",\n      value: function processSimplePart(part) {\n        // Don't process duplicate parts\n        var fragmentIndex = part.indexes[0];\n        if (this.receivedPartIndexes.includes(fragmentIndex)) {\n          return;\n        }\n        this.simpleParts.push({\n          key: part.indexes,\n          value: part\n        });\n        this.receivedPartIndexes.push(fragmentIndex);\n        // If we've received all the parts\n        if (_$$_REQUIRE(_dependencyMap[4], \"./utils\").arraysEqual(this.receivedPartIndexes, this.expectedPartIndexes)) {\n          // Reassemble the message from its fragments\n          var sortedParts = this.simpleParts.map(function (_ref2) {\n            var value = _ref2.value;\n            return value;\n          }).sort(function (a, b) {\n            return a.indexes[0] - b.indexes[0];\n          });\n          var message = FountainDecoder.joinFragments(sortedParts.map(function (part) {\n            return part.fragment;\n          }), this.expectedMessageLength);\n          var checksum = _$$_REQUIRE(_dependencyMap[4], \"./utils\").getCRC(message);\n          if (checksum === this.expectedChecksum) {\n            this.result = message;\n          } else {\n            this.error = new (_$$_REQUIRE(_dependencyMap[5], \"./errors\").InvalidChecksumError)();\n          }\n        } else {\n          this.reduceMixedBy(part);\n        }\n      }\n    }, {\n      key: \"processMixedPart\",\n      value: function processMixedPart(part) {\n        var _this3 = this;\n        // Don't process duplicate parts\n        if (this.mixedParts.some(function (_ref3) {\n          var indexes = _ref3.key;\n          return _$$_REQUIRE(_dependencyMap[4], \"./utils\").arraysEqual(indexes, part.indexes);\n        })) {\n          return;\n        }\n        // Reduce this part by all the others\n        var p2 = this.simpleParts.reduce(function (acc, _ref4) {\n          var p = _ref4.value;\n          return _this3.reducePartByPart(acc, p);\n        }, part);\n        p2 = this.mixedParts.reduce(function (acc, _ref5) {\n          var p = _ref5.value;\n          return _this3.reducePartByPart(acc, p);\n        }, p2);\n        // If the part is now simple\n        if (p2.isSimple()) {\n          // Add it to the queue\n          this.queuedParts.push(p2);\n        } else {\n          this.reduceMixedBy(p2);\n          this.mixedParts.push({\n            key: p2.indexes,\n            value: p2\n          });\n        }\n      }\n    }, {\n      key: \"processQueuedItem\",\n      value: function processQueuedItem() {\n        if (this.queuedParts.length === 0) {\n          return;\n        }\n        var part = this.queuedParts.shift();\n        if (part.isSimple()) {\n          this.processSimplePart(part);\n        } else {\n          this.processMixedPart(part);\n        }\n      }\n    }, {\n      key: \"receivePart\",\n      value: function receivePart(encoderPart) {\n        if (this.isComplete()) {\n          return false;\n        }\n        if (!this.validatePart(encoderPart)) {\n          return false;\n        }\n        var decoderPart = FountainDecoderPart.fromEncoderPart(encoderPart);\n        this.lastPartIndexes = decoderPart.indexes;\n        this.queuedParts.push(decoderPart);\n        while (!this.isComplete() && this.queuedParts.length > 0) {\n          this.processQueuedItem();\n        }\n        ;\n        this.processedPartsCount += 1;\n        return true;\n      }\n    }, {\n      key: \"isComplete\",\n      value: function isComplete() {\n        return Boolean(this.result !== undefined && this.result.length > 0);\n      }\n    }, {\n      key: \"isSuccess\",\n      value: function isSuccess() {\n        return Boolean(this.error === undefined && this.isComplete());\n      }\n    }, {\n      key: \"resultMessage\",\n      value: function resultMessage() {\n        return this.isSuccess() ? this.result : Buffer.from([]);\n      }\n    }, {\n      key: \"isFailure\",\n      value: function isFailure() {\n        return this.error !== undefined;\n      }\n    }, {\n      key: \"resultError\",\n      value: function resultError() {\n        return this.error ? this.error.message : '';\n      }\n    }, {\n      key: \"expectedPartCount\",\n      value: function expectedPartCount() {\n        return this.expectedPartIndexes.length;\n      }\n    }, {\n      key: \"getExpectedPartIndexes\",\n      value: function getExpectedPartIndexes() {\n        return _toConsumableArray(this.expectedPartIndexes);\n      }\n    }, {\n      key: \"getReceivedPartIndexes\",\n      value: function getReceivedPartIndexes() {\n        return _toConsumableArray(this.receivedPartIndexes);\n      }\n    }, {\n      key: \"getLastPartIndexes\",\n      value: function getLastPartIndexes() {\n        return _toConsumableArray(this.lastPartIndexes);\n      }\n    }, {\n      key: \"estimatedPercentComplete\",\n      value: function estimatedPercentComplete() {\n        if (this.isComplete()) {\n          return 1;\n        }\n        var expectedPartCount = this.expectedPartCount();\n        if (expectedPartCount === 0) {\n          return 0;\n        }\n        // We multiply the expectedPartCount by `1.75` as a way to compensate for the facet\n        // that `this.processedPartsCount` also tracks the duplicate parts that have been\n        // processeed.\n        return Math.min(0.99, this.processedPartsCount / (expectedPartCount * 1.75));\n      }\n    }, {\n      key: \"getProgress\",\n      value: function getProgress() {\n        if (this.isComplete()) {\n          return 1;\n        }\n        var expectedPartCount = this.expectedPartCount();\n        if (expectedPartCount === 0) {\n          return 0;\n        }\n        return this.receivedPartIndexes.length / expectedPartCount;\n      }\n    }]);\n  }();\n  exports.default = FountainDecoder;\n  FountainDecoder.joinFragments = function (fragments, messageLength) {\n    return Buffer.concat(fragments).slice(0, messageLength);\n  };\n});","lineCount":298,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_toConsumableArray"],[4,24,1,13],[4,27,1,13,"_$$_REQUIRE"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13],[5,6,1,13,"_classCallCheck"],[5,21,1,13],[5,24,1,13,"_$$_REQUIRE"],[5,35,1,13],[5,36,1,13,"_dependencyMap"],[5,50,1,13],[6,2,1,13],[6,6,1,13,"_createClass"],[6,18,1,13],[6,21,1,13,"_$$_REQUIRE"],[6,32,1,13],[6,33,1,13,"_dependencyMap"],[6,47,1,13],[7,2,2,0,"Object"],[7,8,2,6],[7,9,2,7,"defineProperty"],[7,23,2,21],[7,24,2,22,"exports"],[7,31,2,29],[7,33,2,31],[7,45,2,43],[7,47,2,45],[8,4,2,47,"value"],[8,9,2,52],[8,11,2,54],[9,2,2,59],[9,3,2,60],[9,4,2,61],[10,2,3,0,"exports"],[10,9,3,7],[10,10,3,8,"FountainDecoderPart"],[10,29,3,27],[10,32,3,30],[10,37,3,35],[10,38,3,36],[11,2,3,37],[11,6,7,6,"FountainDecoderPart"],[11,25,7,25],[12,4,8,4],[12,13,8,4,"FountainDecoderPart"],[12,33,8,16,"_indexes"],[12,41,8,24],[12,43,8,26,"_fragment"],[12,52,8,35],[12,54,8,37],[13,6,8,37,"_classCallCheck"],[13,21,8,37],[13,28,8,37,"FountainDecoderPart"],[13,47,8,37],[14,6,9,8],[14,10,9,12],[14,11,9,13,"_indexes"],[14,19,9,21],[14,22,9,24,"_indexes"],[14,30,9,32],[15,6,10,8],[15,10,10,12],[15,11,10,13,"_fragment"],[15,20,10,22],[15,23,10,25,"_fragment"],[15,32,10,34],[16,4,11,4],[17,4,11,5],[17,11,11,5,"_createClass"],[17,23,11,5],[17,24,11,5,"FountainDecoderPart"],[17,43,11,5],[18,6,11,5,"key"],[18,9,11,5],[19,6,11,5,"get"],[19,9,11,5],[19,11,12,4],[19,20,12,4,"get"],[19,24,12,4],[19,26,12,18],[20,8,12,20],[20,15,12,27],[20,19,12,31],[20,20,12,32,"_indexes"],[20,28,12,40],[21,6,12,42],[22,4,12,43],[23,6,12,43,"key"],[23,9,12,43],[24,6,12,43,"get"],[24,9,12,43],[24,11,13,4],[24,20,13,4,"get"],[24,24,13,4],[24,26,13,19],[25,8,13,21],[25,15,13,28],[25,19,13,32],[25,20,13,33,"_fragment"],[25,29,13,42],[26,6,13,44],[27,4,13,45],[28,6,13,45,"key"],[28,9,13,45],[29,6,13,45,"value"],[29,11,13,45],[29,13,19,4],[29,22,19,4,"isSimple"],[29,30,19,12,"isSimple"],[29,31,19,12],[29,33,19,15],[30,8,20,8],[30,15,20,15],[30,19,20,19],[30,20,20,20,"indexes"],[30,27,20,27],[30,28,20,28,"length"],[30,34,20,34],[30,39,20,39],[30,40,20,40],[31,6,21,4],[32,4,21,5],[33,6,21,5,"key"],[33,9,21,5],[34,6,21,5,"value"],[34,11,21,5],[34,13,14,4],[34,22,14,11,"fromEncoderPart"],[34,37,14,26,"fromEncoderPart"],[34,38,14,27,"encoderPart"],[34,49,14,38],[34,51,14,40],[35,8,15,8],[35,12,15,14,"indexes"],[35,19,15,21],[35,22,15,24,"_$$_REQUIRE"],[35,33,15,24],[35,34,15,24,"_dependencyMap"],[35,48,15,24],[35,72,15,40,"chooseFragments"],[35,87,15,55],[35,88,15,56,"encoderPart"],[35,99,15,67],[35,100,15,68,"seqNum"],[35,106,15,74],[35,108,15,76,"encoderPart"],[35,119,15,87],[35,120,15,88,"seqLength"],[35,129,15,97],[35,131,15,99,"encoderPart"],[35,142,15,110],[35,143,15,111,"checksum"],[35,151,15,119],[35,152,15,120],[36,8,16,8],[36,12,16,14,"fragment"],[36,20,16,22],[36,23,16,25,"encoderPart"],[36,34,16,36],[36,35,16,37,"fragment"],[36,43,16,45],[37,8,17,8],[37,15,17,15],[37,19,17,19,"FountainDecoderPart"],[37,38,17,38],[37,39,17,39,"indexes"],[37,46,17,46],[37,48,17,48,"fragment"],[37,56,17,56],[37,57,17,57],[38,6,18,4],[39,4,18,5],[40,2,18,5],[41,2,23,0,"exports"],[41,9,23,7],[41,10,23,8,"FountainDecoderPart"],[41,29,23,27],[41,32,23,30,"FountainDecoderPart"],[41,51,23,49],[42,2,23,50],[42,6,24,6,"FountainDecoder"],[42,21,24,21],[43,4,25,4],[43,13,25,4,"FountainDecoder"],[43,29,25,4],[43,31,25,18],[44,6,25,18,"_classCallCheck"],[44,21,25,18],[44,28,25,18,"FountainDecoder"],[44,43,25,18],[45,6,26,8],[45,10,26,12],[45,11,26,13,"result"],[45,17,26,19],[45,20,26,22,"undefined"],[45,29,26,31],[46,6,27,8],[46,10,27,12],[46,11,27,13,"expectedMessageLength"],[46,32,27,34],[46,35,27,37],[46,36,27,38],[47,6,28,8],[47,10,28,12],[47,11,28,13,"expectedChecksum"],[47,27,28,29],[47,30,28,32],[47,31,28,33],[48,6,29,8],[48,10,29,12],[48,11,29,13,"expectedFragmentLength"],[48,33,29,35],[48,36,29,38],[48,37,29,39],[49,6,30,8],[49,10,30,12],[49,11,30,13,"processedPartsCount"],[49,30,30,32],[49,33,30,35],[49,34,30,36],[50,6,31,8],[50,10,31,12],[50,11,31,13,"expectedPartIndexes"],[50,30,31,32],[50,33,31,35],[50,35,31,37],[51,6,32,8],[51,10,32,12],[51,11,32,13,"lastPartIndexes"],[51,26,32,28],[51,29,32,31],[51,31,32,33],[52,6,33,8],[52,10,33,12],[52,11,33,13,"queuedParts"],[52,22,33,24],[52,25,33,27],[52,27,33,29],[53,6,34,8],[53,10,34,12],[53,11,34,13,"receivedPartIndexes"],[53,30,34,32],[53,33,34,35],[53,35,34,37],[54,6,35,8],[54,10,35,12],[54,11,35,13,"mixedParts"],[54,21,35,23],[54,24,35,26],[54,26,35,28],[55,6,36,8],[55,10,36,12],[55,11,36,13,"simpleParts"],[55,22,36,24],[55,25,36,27],[55,27,36,29],[56,4,37,4],[57,4,37,5],[57,11,37,5,"_createClass"],[57,23,37,5],[57,24,37,5,"FountainDecoder"],[57,39,37,5],[58,6,37,5,"key"],[58,9,37,5],[59,6,37,5,"value"],[59,11,37,5],[59,13,38,4],[59,22,38,4,"validatePart"],[59,34,38,16,"validatePart"],[59,35,38,17,"part"],[59,39,38,21],[59,41,38,23],[60,8,38,23],[60,12,38,23,"_this"],[60,17,38,23],[61,8,39,8],[62,8,40,8],[62,12,40,12],[62,16,40,16],[62,17,40,17,"expectedPartIndexes"],[62,36,40,36],[62,37,40,37,"length"],[62,43,40,43],[62,48,40,48],[62,49,40,49],[62,51,40,51],[63,10,41,12],[64,10,42,12,"_toConsumableArray"],[64,28,42,12],[64,29,42,16],[64,33,42,20,"Array"],[64,38,42,25],[64,39,42,26,"part"],[64,43,42,30],[64,44,42,31,"seqLength"],[64,53,42,40],[64,54,42,41],[64,56,43,17,"forEach"],[64,63,43,24],[64,64,43,25],[64,74,43,26,"_"],[64,75,43,27],[64,77,43,29,"index"],[64,82,43,34],[65,12,43,34],[65,19,43,39,"_this"],[65,24,43,43],[65,25,43,44,"expectedPartIndexes"],[65,44,43,63],[65,45,43,64,"push"],[65,49,43,68],[65,50,43,69,"index"],[65,55,43,74],[65,56,43,75],[66,10,43,75],[66,12,43,76],[67,10,44,12],[67,14,44,16],[67,15,44,17,"expectedMessageLength"],[67,36,44,38],[67,39,44,41,"part"],[67,43,44,45],[67,44,44,46,"messageLength"],[67,57,44,59],[68,10,45,12],[68,14,45,16],[68,15,45,17,"expectedChecksum"],[68,31,45,33],[68,34,45,36,"part"],[68,38,45,40],[68,39,45,41,"checksum"],[68,47,45,49],[69,10,46,12],[69,14,46,16],[69,15,46,17,"expectedFragmentLength"],[69,37,46,39],[69,40,46,42,"part"],[69,44,46,46],[69,45,46,47,"fragment"],[69,53,46,55],[69,54,46,56,"length"],[69,60,46,62],[70,8,47,8],[70,9,47,9],[70,15,48,13],[71,10,49,12],[72,10,50,12],[72,14,50,16],[72,18,50,20],[72,19,50,21,"expectedPartIndexes"],[72,38,50,40],[72,39,50,41,"length"],[72,45,50,47],[72,50,50,52,"part"],[72,54,50,56],[72,55,50,57,"seqLength"],[72,64,50,66],[72,66,50,68],[73,12,51,16],[73,19,51,23],[73,24,51,28],[74,10,52,12],[75,10,53,12],[75,14,53,16],[75,18,53,20],[75,19,53,21,"expectedMessageLength"],[75,40,53,42],[75,45,53,47,"part"],[75,49,53,51],[75,50,53,52,"messageLength"],[75,63,53,65],[75,65,53,67],[76,12,54,16],[76,19,54,23],[76,24,54,28],[77,10,55,12],[78,10,56,12],[78,14,56,16],[78,18,56,20],[78,19,56,21,"expectedChecksum"],[78,35,56,37],[78,40,56,42,"part"],[78,44,56,46],[78,45,56,47,"checksum"],[78,53,56,55],[78,55,56,57],[79,12,57,16],[79,19,57,23],[79,24,57,28],[80,10,58,12],[81,10,59,12],[81,14,59,16],[81,18,59,20],[81,19,59,21,"expectedFragmentLength"],[81,41,59,43],[81,46,59,48,"part"],[81,50,59,52],[81,51,59,53,"fragment"],[81,59,59,61],[81,60,59,62,"length"],[81,66,59,68],[81,68,59,70],[82,12,60,16],[82,19,60,23],[82,24,60,28],[83,10,61,12],[84,8,62,8],[85,8,63,8],[86,8,64,8],[86,15,64,15],[86,19,64,19],[87,6,65,4],[88,4,65,5],[89,6,65,5,"key"],[89,9,65,5],[90,6,65,5,"value"],[90,11,65,5],[90,13,66,4],[90,22,66,4,"reducePartByPart"],[90,38,66,20,"reducePartByPart"],[90,39,66,21,"a"],[90,40,66,22],[90,42,66,24,"b"],[90,43,66,25],[90,45,66,27],[91,8,67,8],[92,8,68,8],[92,12,68,12,"_$$_REQUIRE"],[92,23,68,12],[92,24,68,12,"_dependencyMap"],[92,38,68,12],[92,54,68,20,"arrayContains"],[92,67,68,33],[92,68,68,34,"a"],[92,69,68,35],[92,70,68,36,"indexes"],[92,77,68,43],[92,79,68,45,"b"],[92,80,68,46],[92,81,68,47,"indexes"],[92,88,68,54],[92,89,68,55],[92,91,68,57],[93,10,69,12],[93,14,69,18,"newIndexes"],[93,24,69,28],[93,27,69,31,"_$$_REQUIRE"],[93,38,69,31],[93,39,69,31,"_dependencyMap"],[93,53,69,31],[93,69,69,39,"setDifference"],[93,82,69,52],[93,83,69,53,"a"],[93,84,69,54],[93,85,69,55,"indexes"],[93,92,69,62],[93,94,69,64,"b"],[93,95,69,65],[93,96,69,66,"indexes"],[93,103,69,73],[93,104,69,74],[94,10,70,12],[94,14,70,18,"newFragment"],[94,25,70,29],[94,28,70,32,"_$$_REQUIRE"],[94,39,70,32],[94,40,70,32,"_dependencyMap"],[94,54,70,32],[94,70,70,40,"bufferXOR"],[94,79,70,49],[94,80,70,50,"a"],[94,81,70,51],[94,82,70,52,"fragment"],[94,90,70,60],[94,92,70,62,"b"],[94,93,70,63],[94,94,70,64,"fragment"],[94,102,70,72],[94,103,70,73],[95,10,71,12],[95,17,71,19],[95,21,71,23,"FountainDecoderPart"],[95,40,71,42],[95,41,71,43,"newIndexes"],[95,51,71,53],[95,53,71,55,"newFragment"],[95,64,71,66],[95,65,71,67],[96,8,72,8],[96,9,72,9],[96,15,73,13],[97,10,74,12],[98,10,75,12],[98,17,75,19,"a"],[98,18,75,20],[99,8,76,8],[100,6,77,4],[101,4,77,5],[102,6,77,5,"key"],[102,9,77,5],[103,6,77,5,"value"],[103,11,77,5],[103,13,78,4],[103,22,78,4,"reduceMixedBy"],[103,35,78,17,"reduceMixedBy"],[103,36,78,18,"part"],[103,40,78,22],[103,42,78,24],[104,8,78,24],[104,12,78,24,"_this2"],[104,18,78,24],[105,8,79,8],[105,12,79,14,"newMixed"],[105,20,79,22],[105,23,79,25],[105,25,79,27],[106,8,80,8],[106,12,80,12],[106,13,80,13,"mixedParts"],[106,23,80,23],[106,24,81,13,"map"],[106,27,81,16],[106,28,81,17],[106,38,81,17,"_ref"],[106,42,81,17],[107,10,81,17],[107,14,81,27,"mixedPart"],[107,23,81,36],[107,26,81,36,"_ref"],[107,30,81,36],[107,31,81,20,"value"],[107,36,81,25],[108,10,81,25],[108,17,81,43,"_this2"],[108,23,81,47],[108,24,81,48,"reducePartByPart"],[108,40,81,64],[108,41,81,65,"mixedPart"],[108,50,81,74],[108,52,81,76,"part"],[108,56,81,80],[108,57,81,81],[109,8,81,81],[109,10,81,82],[109,11,82,13,"forEach"],[109,18,82,20],[109,19,82,21],[109,29,82,21,"reducedPart"],[109,40,82,32],[109,42,82,36],[110,10,83,12],[110,14,83,16,"reducedPart"],[110,25,83,27],[110,26,83,28,"isSimple"],[110,34,83,36],[110,35,83,37],[110,36,83,38],[110,38,83,40],[111,12,84,16,"_this2"],[111,18,84,20],[111,19,84,21,"queuedParts"],[111,30,84,32],[111,31,84,33,"push"],[111,35,84,37],[111,36,84,38,"reducedPart"],[111,47,84,49],[111,48,84,50],[112,10,85,12],[112,11,85,13],[112,17,86,17],[113,12,87,16,"newMixed"],[113,20,87,24],[113,21,87,25,"push"],[113,25,87,29],[113,26,87,30],[114,14,87,32,"key"],[114,17,87,35],[114,19,87,37,"reducedPart"],[114,30,87,48],[114,31,87,49,"indexes"],[114,38,87,56],[115,14,87,58,"value"],[115,19,87,63],[115,21,87,65,"reducedPart"],[116,12,87,77],[116,13,87,78],[116,14,87,79],[117,10,88,12],[118,8,89,8],[118,9,89,9],[118,10,89,10],[119,8,90,8],[119,12,90,12],[119,13,90,13,"mixedParts"],[119,23,90,23],[119,26,90,26,"newMixed"],[119,34,90,34],[120,6,91,4],[121,4,91,5],[122,6,91,5,"key"],[122,9,91,5],[123,6,91,5,"value"],[123,11,91,5],[123,13,92,4],[123,22,92,4,"processSimplePart"],[123,39,92,21,"processSimplePart"],[123,40,92,22,"part"],[123,44,92,26],[123,46,92,28],[124,8,93,8],[125,8,94,8],[125,12,94,14,"fragmentIndex"],[125,25,94,27],[125,28,94,30,"part"],[125,32,94,34],[125,33,94,35,"indexes"],[125,40,94,42],[125,41,94,43],[125,42,94,44],[125,43,94,45],[126,8,95,8],[126,12,95,12],[126,16,95,16],[126,17,95,17,"receivedPartIndexes"],[126,36,95,36],[126,37,95,37,"includes"],[126,45,95,45],[126,46,95,46,"fragmentIndex"],[126,59,95,59],[126,60,95,60],[126,62,95,62],[127,10,96,12],[128,8,97,8],[129,8,98,8],[129,12,98,12],[129,13,98,13,"simpleParts"],[129,24,98,24],[129,25,98,25,"push"],[129,29,98,29],[129,30,98,30],[130,10,98,32,"key"],[130,13,98,35],[130,15,98,37,"part"],[130,19,98,41],[130,20,98,42,"indexes"],[130,27,98,49],[131,10,98,51,"value"],[131,15,98,56],[131,17,98,58,"part"],[132,8,98,63],[132,9,98,64],[132,10,98,65],[133,8,99,8],[133,12,99,12],[133,13,99,13,"receivedPartIndexes"],[133,32,99,32],[133,33,99,33,"push"],[133,37,99,37],[133,38,99,38,"fragmentIndex"],[133,51,99,51],[133,52,99,52],[134,8,100,8],[135,8,101,8],[135,12,101,12,"_$$_REQUIRE"],[135,23,101,12],[135,24,101,12,"_dependencyMap"],[135,38,101,12],[135,54,101,20,"arraysEqual"],[135,65,101,31],[135,66,101,32],[135,70,101,36],[135,71,101,37,"receivedPartIndexes"],[135,90,101,56],[135,92,101,58],[135,96,101,62],[135,97,101,63,"expectedPartIndexes"],[135,116,101,82],[135,117,101,83],[135,119,101,85],[136,10,102,12],[137,10,103,12],[137,14,103,18,"sortedParts"],[137,25,103,29],[137,28,103,32],[137,32,103,36],[137,33,103,37,"simpleParts"],[137,44,103,48],[137,45,104,17,"map"],[137,48,104,20],[137,49,104,21],[137,59,104,21,"_ref2"],[137,64,104,21],[138,12,104,21],[138,16,104,24,"value"],[138,21,104,29],[138,24,104,29,"_ref2"],[138,29,104,29],[138,30,104,24,"value"],[138,35,104,29],[139,12,104,29],[139,19,104,36,"value"],[139,24,104,41],[140,10,104,41],[140,12,104,42],[140,13,105,17,"sort"],[140,17,105,21],[140,18,105,22],[140,28,105,23,"a"],[140,29,105,24],[140,31,105,26,"b"],[140,32,105,27],[141,12,105,27],[141,19,105,33,"a"],[141,20,105,34],[141,21,105,35,"indexes"],[141,28,105,42],[141,29,105,43],[141,30,105,44],[141,31,105,45],[141,34,105,48,"b"],[141,35,105,49],[141,36,105,50,"indexes"],[141,43,105,57],[141,44,105,58],[141,45,105,59],[141,46,105,60],[142,10,105,60],[142,11,105,61],[142,12,105,62],[143,10,106,12],[143,14,106,18,"message"],[143,21,106,25],[143,24,106,28,"FountainDecoder"],[143,39,106,43],[143,40,106,44,"joinFragments"],[143,53,106,57],[143,54,106,58,"sortedParts"],[143,65,106,69],[143,66,106,70,"map"],[143,69,106,73],[143,70,106,74],[143,80,106,74,"part"],[143,84,106,78],[144,12,106,78],[144,19,106,82,"part"],[144,23,106,86],[144,24,106,87,"fragment"],[144,32,106,95],[145,10,106,95],[145,12,106,96],[145,14,106,98],[145,18,106,102],[145,19,106,103,"expectedMessageLength"],[145,40,106,124],[145,41,106,125],[146,10,107,12],[146,14,107,18,"checksum"],[146,22,107,26],[146,25,107,29,"_$$_REQUIRE"],[146,36,107,29],[146,37,107,29,"_dependencyMap"],[146,51,107,29],[146,67,107,37,"getCRC"],[146,73,107,43],[146,74,107,44,"message"],[146,81,107,51],[146,82,107,52],[147,10,108,12],[147,14,108,16,"checksum"],[147,22,108,24],[147,27,108,29],[147,31,108,33],[147,32,108,34,"expectedChecksum"],[147,48,108,50],[147,50,108,52],[148,12,109,16],[148,16,109,20],[148,17,109,21,"result"],[148,23,109,27],[148,26,109,30,"message"],[148,33,109,37],[149,10,110,12],[149,11,110,13],[149,17,111,17],[150,12,112,16],[150,16,112,20],[150,17,112,21,"error"],[150,22,112,26],[150,25,112,29],[150,30,112,33,"_$$_REQUIRE"],[150,41,112,33],[150,42,112,33,"_dependencyMap"],[150,56,112,33],[150,73,112,42,"InvalidChecksumError"],[150,93,112,62],[150,95,112,63],[150,96,112,64],[151,10,113,12],[152,8,114,8],[152,9,114,9],[152,15,115,13],[153,10,116,12],[153,14,116,16],[153,15,116,17,"reduceMixedBy"],[153,28,116,30],[153,29,116,31,"part"],[153,33,116,35],[153,34,116,36],[154,8,117,8],[155,6,118,4],[156,4,118,5],[157,6,118,5,"key"],[157,9,118,5],[158,6,118,5,"value"],[158,11,118,5],[158,13,119,4],[158,22,119,4,"processMixedPart"],[158,38,119,20,"processMixedPart"],[158,39,119,21,"part"],[158,43,119,25],[158,45,119,27],[159,8,119,27],[159,12,119,27,"_this3"],[159,18,119,27],[160,8,120,8],[161,8,121,8],[161,12,121,12],[161,16,121,16],[161,17,121,17,"mixedParts"],[161,27,121,27],[161,28,121,28,"some"],[161,32,121,32],[161,33,121,33],[161,43,121,33,"_ref3"],[161,48,121,33],[162,10,121,33],[162,14,121,41,"indexes"],[162,21,121,48],[162,24,121,48,"_ref3"],[162,29,121,48],[162,30,121,36,"key"],[162,33,121,39],[163,10,121,39],[163,17,121,55,"_$$_REQUIRE"],[163,28,121,55],[163,29,121,55,"_dependencyMap"],[163,43,121,55],[163,59,121,63,"arraysEqual"],[163,70,121,74],[163,71,121,75,"indexes"],[163,78,121,82],[163,80,121,84,"part"],[163,84,121,88],[163,85,121,89,"indexes"],[163,92,121,96],[163,93,121,97],[164,8,121,97],[164,10,121,98],[164,12,121,100],[165,10,122,12],[166,8,123,8],[167,8,124,8],[168,8,125,8],[168,12,125,12,"p2"],[168,14,125,14],[168,17,125,17],[168,21,125,21],[168,22,125,22,"simpleParts"],[168,33,125,33],[168,34,125,34,"reduce"],[168,40,125,40],[168,41,125,41],[168,51,125,42,"acc"],[168,54,125,45],[168,56,125,45,"_ref4"],[168,61,125,45],[169,10,125,45],[169,14,125,56,"p"],[169,15,125,57],[169,18,125,57,"_ref4"],[169,23,125,57],[169,24,125,49,"value"],[169,29,125,54],[170,10,125,54],[170,17,125,64,"_this3"],[170,23,125,68],[170,24,125,69,"reducePartByPart"],[170,40,125,85],[170,41,125,86,"acc"],[170,44,125,89],[170,46,125,91,"p"],[170,47,125,92],[170,48,125,93],[171,8,125,93],[171,11,125,95,"part"],[171,15,125,99],[171,16,125,100],[172,8,126,8,"p2"],[172,10,126,10],[172,13,126,13],[172,17,126,17],[172,18,126,18,"mixedParts"],[172,28,126,28],[172,29,126,29,"reduce"],[172,35,126,35],[172,36,126,36],[172,46,126,37,"acc"],[172,49,126,40],[172,51,126,40,"_ref5"],[172,56,126,40],[173,10,126,40],[173,14,126,51,"p"],[173,15,126,52],[173,18,126,52,"_ref5"],[173,23,126,52],[173,24,126,44,"value"],[173,29,126,49],[174,10,126,49],[174,17,126,59,"_this3"],[174,23,126,63],[174,24,126,64,"reducePartByPart"],[174,40,126,80],[174,41,126,81,"acc"],[174,44,126,84],[174,46,126,86,"p"],[174,47,126,87],[174,48,126,88],[175,8,126,88],[175,11,126,90,"p2"],[175,13,126,92],[175,14,126,93],[176,8,127,8],[177,8,128,8],[177,12,128,12,"p2"],[177,14,128,14],[177,15,128,15,"isSimple"],[177,23,128,23],[177,24,128,24],[177,25,128,25],[177,27,128,27],[178,10,129,12],[179,10,130,12],[179,14,130,16],[179,15,130,17,"queuedParts"],[179,26,130,28],[179,27,130,29,"push"],[179,31,130,33],[179,32,130,34,"p2"],[179,34,130,36],[179,35,130,37],[180,8,131,8],[180,9,131,9],[180,15,132,13],[181,10,133,12],[181,14,133,16],[181,15,133,17,"reduceMixedBy"],[181,28,133,30],[181,29,133,31,"p2"],[181,31,133,33],[181,32,133,34],[182,10,134,12],[182,14,134,16],[182,15,134,17,"mixedParts"],[182,25,134,27],[182,26,134,28,"push"],[182,30,134,32],[182,31,134,33],[183,12,134,35,"key"],[183,15,134,38],[183,17,134,40,"p2"],[183,19,134,42],[183,20,134,43,"indexes"],[183,27,134,50],[184,12,134,52,"value"],[184,17,134,57],[184,19,134,59,"p2"],[185,10,134,62],[185,11,134,63],[185,12,134,64],[186,8,135,8],[187,6,136,4],[188,4,136,5],[189,6,136,5,"key"],[189,9,136,5],[190,6,136,5,"value"],[190,11,136,5],[190,13,137,4],[190,22,137,4,"processQueuedItem"],[190,39,137,21,"processQueuedItem"],[190,40,137,21],[190,42,137,24],[191,8,138,8],[191,12,138,12],[191,16,138,16],[191,17,138,17,"queuedParts"],[191,28,138,28],[191,29,138,29,"length"],[191,35,138,35],[191,40,138,40],[191,41,138,41],[191,43,138,43],[192,10,139,12],[193,8,140,8],[194,8,141,8],[194,12,141,14,"part"],[194,16,141,18],[194,19,141,21],[194,23,141,25],[194,24,141,26,"queuedParts"],[194,35,141,37],[194,36,141,38,"shift"],[194,41,141,43],[194,42,141,44],[194,43,141,45],[195,8,142,8],[195,12,142,12,"part"],[195,16,142,16],[195,17,142,17,"isSimple"],[195,25,142,25],[195,26,142,26],[195,27,142,27],[195,29,142,29],[196,10,143,12],[196,14,143,16],[196,15,143,17,"processSimplePart"],[196,32,143,34],[196,33,143,35,"part"],[196,37,143,39],[196,38,143,40],[197,8,144,8],[197,9,144,9],[197,15,145,13],[198,10,146,12],[198,14,146,16],[198,15,146,17,"processMixedPart"],[198,31,146,33],[198,32,146,34,"part"],[198,36,146,38],[198,37,146,39],[199,8,147,8],[200,6,148,4],[201,4,148,5],[202,6,148,5,"key"],[202,9,148,5],[203,6,148,5,"value"],[203,11,148,5],[203,13,149,4],[203,22,149,4,"receivePart"],[203,33,149,15,"receivePart"],[203,34,149,16,"encoderPart"],[203,45,149,27],[203,47,149,29],[204,8,150,8],[204,12,150,12],[204,16,150,16],[204,17,150,17,"isComplete"],[204,27,150,27],[204,28,150,28],[204,29,150,29],[204,31,150,31],[205,10,151,12],[205,17,151,19],[205,22,151,24],[206,8,152,8],[207,8,153,8],[207,12,153,12],[207,13,153,13],[207,17,153,17],[207,18,153,18,"validatePart"],[207,30,153,30],[207,31,153,31,"encoderPart"],[207,42,153,42],[207,43,153,43],[207,45,153,45],[208,10,154,12],[208,17,154,19],[208,22,154,24],[209,8,155,8],[210,8,156,8],[210,12,156,14,"decoderPart"],[210,23,156,25],[210,26,156,28,"FountainDecoderPart"],[210,45,156,47],[210,46,156,48,"fromEncoderPart"],[210,61,156,63],[210,62,156,64,"encoderPart"],[210,73,156,75],[210,74,156,76],[211,8,157,8],[211,12,157,12],[211,13,157,13,"lastPartIndexes"],[211,28,157,28],[211,31,157,31,"decoderPart"],[211,42,157,42],[211,43,157,43,"indexes"],[211,50,157,50],[212,8,158,8],[212,12,158,12],[212,13,158,13,"queuedParts"],[212,24,158,24],[212,25,158,25,"push"],[212,29,158,29],[212,30,158,30,"decoderPart"],[212,41,158,41],[212,42,158,42],[213,8,159,8],[213,15,159,15],[213,16,159,16],[213,20,159,20],[213,21,159,21,"isComplete"],[213,31,159,31],[213,32,159,32],[213,33,159,33],[213,37,159,37],[213,41,159,41],[213,42,159,42,"queuedParts"],[213,53,159,53],[213,54,159,54,"length"],[213,60,159,60],[213,63,159,63],[213,64,159,64],[213,66,159,66],[214,10,160,12],[214,14,160,16],[214,15,160,17,"processQueuedItem"],[214,32,160,34],[214,33,160,35],[214,34,160,36],[215,8,161,8],[216,8,162,8],[217,8,163,8],[217,12,163,12],[217,13,163,13,"processedPartsCount"],[217,32,163,32],[217,36,163,36],[217,37,163,37],[218,8,164,8],[218,15,164,15],[218,19,164,19],[219,6,165,4],[220,4,165,5],[221,6,165,5,"key"],[221,9,165,5],[222,6,165,5,"value"],[222,11,165,5],[222,13,166,4],[222,22,166,4,"isComplete"],[222,32,166,14,"isComplete"],[222,33,166,14],[222,35,166,17],[223,8,167,8],[223,15,167,15,"Boolean"],[223,22,167,22],[223,23,167,23],[223,27,167,27],[223,28,167,28,"result"],[223,34,167,34],[223,39,167,39,"undefined"],[223,48,167,48],[223,52,167,52],[223,56,167,56],[223,57,167,57,"result"],[223,63,167,63],[223,64,167,64,"length"],[223,70,167,70],[223,73,167,73],[223,74,167,74],[223,75,167,75],[224,6,168,4],[225,4,168,5],[226,6,168,5,"key"],[226,9,168,5],[227,6,168,5,"value"],[227,11,168,5],[227,13,169,4],[227,22,169,4,"isSuccess"],[227,31,169,13,"isSuccess"],[227,32,169,13],[227,34,169,16],[228,8,170,8],[228,15,170,15,"Boolean"],[228,22,170,22],[228,23,170,23],[228,27,170,27],[228,28,170,28,"error"],[228,33,170,33],[228,38,170,38,"undefined"],[228,47,170,47],[228,51,170,51],[228,55,170,55],[228,56,170,56,"isComplete"],[228,66,170,66],[228,67,170,67],[228,68,170,68],[228,69,170,69],[229,6,171,4],[230,4,171,5],[231,6,171,5,"key"],[231,9,171,5],[232,6,171,5,"value"],[232,11,171,5],[232,13,172,4],[232,22,172,4,"resultMessage"],[232,35,172,17,"resultMessage"],[232,36,172,17],[232,38,172,20],[233,8,173,8],[233,15,173,15],[233,19,173,19],[233,20,173,20,"isSuccess"],[233,29,173,29],[233,30,173,30],[233,31,173,31],[233,34,173,34],[233,38,173,38],[233,39,173,39,"result"],[233,45,173,45],[233,48,173,48,"Buffer"],[233,54,173,54],[233,55,173,55,"from"],[233,59,173,59],[233,60,173,60],[233,62,173,62],[233,63,173,63],[234,6,174,4],[235,4,174,5],[236,6,174,5,"key"],[236,9,174,5],[237,6,174,5,"value"],[237,11,174,5],[237,13,175,4],[237,22,175,4,"isFailure"],[237,31,175,13,"isFailure"],[237,32,175,13],[237,34,175,16],[238,8,176,8],[238,15,176,15],[238,19,176,19],[238,20,176,20,"error"],[238,25,176,25],[238,30,176,30,"undefined"],[238,39,176,39],[239,6,177,4],[240,4,177,5],[241,6,177,5,"key"],[241,9,177,5],[242,6,177,5,"value"],[242,11,177,5],[242,13,178,4],[242,22,178,4,"resultError"],[242,33,178,15,"resultError"],[242,34,178,15],[242,36,178,18],[243,8,179,8],[243,15,179,15],[243,19,179,19],[243,20,179,20,"error"],[243,25,179,25],[243,28,179,28],[243,32,179,32],[243,33,179,33,"error"],[243,38,179,38],[243,39,179,39,"message"],[243,46,179,46],[243,49,179,49],[243,51,179,51],[244,6,180,4],[245,4,180,5],[246,6,180,5,"key"],[246,9,180,5],[247,6,180,5,"value"],[247,11,180,5],[247,13,181,4],[247,22,181,4,"expectedPartCount"],[247,39,181,21,"expectedPartCount"],[247,40,181,21],[247,42,181,24],[248,8,182,8],[248,15,182,15],[248,19,182,19],[248,20,182,20,"expectedPartIndexes"],[248,39,182,39],[248,40,182,40,"length"],[248,46,182,46],[249,6,183,4],[250,4,183,5],[251,6,183,5,"key"],[251,9,183,5],[252,6,183,5,"value"],[252,11,183,5],[252,13,184,4],[252,22,184,4,"getExpectedPartIndexes"],[252,44,184,26,"getExpectedPartIndexes"],[252,45,184,26],[252,47,184,29],[253,8,185,8],[253,15,185,8,"_toConsumableArray"],[253,33,185,8],[253,34,185,19],[253,38,185,23],[253,39,185,24,"expectedPartIndexes"],[253,58,185,43],[254,6,186,4],[255,4,186,5],[256,6,186,5,"key"],[256,9,186,5],[257,6,186,5,"value"],[257,11,186,5],[257,13,187,4],[257,22,187,4,"getReceivedPartIndexes"],[257,44,187,26,"getReceivedPartIndexes"],[257,45,187,26],[257,47,187,29],[258,8,188,8],[258,15,188,8,"_toConsumableArray"],[258,33,188,8],[258,34,188,19],[258,38,188,23],[258,39,188,24,"receivedPartIndexes"],[258,58,188,43],[259,6,189,4],[260,4,189,5],[261,6,189,5,"key"],[261,9,189,5],[262,6,189,5,"value"],[262,11,189,5],[262,13,190,4],[262,22,190,4,"getLastPartIndexes"],[262,40,190,22,"getLastPartIndexes"],[262,41,190,22],[262,43,190,25],[263,8,191,8],[263,15,191,8,"_toConsumableArray"],[263,33,191,8],[263,34,191,19],[263,38,191,23],[263,39,191,24,"lastPartIndexes"],[263,54,191,39],[264,6,192,4],[265,4,192,5],[266,6,192,5,"key"],[266,9,192,5],[267,6,192,5,"value"],[267,11,192,5],[267,13,193,4],[267,22,193,4,"estimatedPercentComplete"],[267,46,193,28,"estimatedPercentComplete"],[267,47,193,28],[267,49,193,31],[268,8,194,8],[268,12,194,12],[268,16,194,16],[268,17,194,17,"isComplete"],[268,27,194,27],[268,28,194,28],[268,29,194,29],[268,31,194,31],[269,10,195,12],[269,17,195,19],[269,18,195,20],[270,8,196,8],[271,8,197,8],[271,12,197,14,"expectedPartCount"],[271,29,197,31],[271,32,197,34],[271,36,197,38],[271,37,197,39,"expectedPartCount"],[271,54,197,56],[271,55,197,57],[271,56,197,58],[272,8,198,8],[272,12,198,12,"expectedPartCount"],[272,29,198,29],[272,34,198,34],[272,35,198,35],[272,37,198,37],[273,10,199,12],[273,17,199,19],[273,18,199,20],[274,8,200,8],[275,8,201,8],[276,8,202,8],[277,8,203,8],[278,8,204,8],[278,15,204,15,"Math"],[278,19,204,19],[278,20,204,20,"min"],[278,23,204,23],[278,24,204,24],[278,28,204,28],[278,30,204,30],[278,34,204,34],[278,35,204,35,"processedPartsCount"],[278,54,204,54],[278,58,204,58,"expectedPartCount"],[278,75,204,75],[278,78,204,78],[278,82,204,82],[278,83,204,83],[278,84,204,84],[279,6,205,4],[280,4,205,5],[281,6,205,5,"key"],[281,9,205,5],[282,6,205,5,"value"],[282,11,205,5],[282,13,206,4],[282,22,206,4,"getProgress"],[282,33,206,15,"getProgress"],[282,34,206,15],[282,36,206,18],[283,8,207,8],[283,12,207,12],[283,16,207,16],[283,17,207,17,"isComplete"],[283,27,207,27],[283,28,207,28],[283,29,207,29],[283,31,207,31],[284,10,208,12],[284,17,208,19],[284,18,208,20],[285,8,209,8],[286,8,210,8],[286,12,210,14,"expectedPartCount"],[286,29,210,31],[286,32,210,34],[286,36,210,38],[286,37,210,39,"expectedPartCount"],[286,54,210,56],[286,55,210,57],[286,56,210,58],[287,8,211,8],[287,12,211,12,"expectedPartCount"],[287,29,211,29],[287,34,211,34],[287,35,211,35],[287,37,211,37],[288,10,212,12],[288,17,212,19],[288,18,212,20],[289,8,213,8],[290,8,214,8],[290,15,214,15],[290,19,214,19],[290,20,214,20,"receivedPartIndexes"],[290,39,214,39],[290,40,214,40,"length"],[290,46,214,46],[290,49,214,49,"expectedPartCount"],[290,66,214,66],[291,6,215,4],[292,4,215,5],[293,2,215,5],[294,2,217,0,"exports"],[294,9,217,7],[294,10,217,8,"default"],[294,17,217,15],[294,20,217,18,"FountainDecoder"],[294,35,217,33],[295,2,218,0,"FountainDecoder"],[295,17,218,15],[295,18,218,16,"joinFragments"],[295,31,218,29],[295,34,218,32],[295,44,218,33,"fragments"],[295,53,218,42],[295,55,218,44,"messageLength"],[295,68,218,57],[295,70,218,62],[296,4,219,4],[296,11,219,11,"Buffer"],[296,17,219,17],[296,18,219,18,"concat"],[296,24,219,24],[296,25,219,25,"fragments"],[296,34,219,34],[296,35,219,35],[296,36,219,36,"slice"],[296,41,219,41],[296,42,219,42],[296,43,219,43],[296,45,219,45,"messageLength"],[296,58,219,58],[296,59,219,59],[297,2,220,0],[297,3,220,1],[298,0,220,2],[298,3]],"functionMap":{"names":["<global>","FountainDecoderPart","FountainDecoderPart#constructor","FountainDecoderPart#get__indexes","FountainDecoderPart#get__fragment","FountainDecoderPart.fromEncoderPart","FountainDecoderPart#isSimple","FountainDecoder","FountainDecoder#constructor","FountainDecoder#validatePart","forEach$argument_0","FountainDecoder#reducePartByPart","FountainDecoder#reduceMixedBy","mixedParts.map$argument_0","mixedParts.map.forEach$argument_0","FountainDecoder#processSimplePart","simpleParts.map$argument_0","simpleParts.map.sort$argument_0","sortedParts.map$argument_0","FountainDecoder#processMixedPart","mixedParts.some$argument_0","simpleParts.reduce$argument_0","mixedParts.reduce$argument_0","FountainDecoder#processQueuedItem","FountainDecoder#receivePart","FountainDecoder#isComplete","FountainDecoder#isSuccess","FountainDecoder#resultMessage","FountainDecoder#isFailure","FountainDecoder#resultError","FountainDecoder#expectedPartCount","FountainDecoder#getExpectedPartIndexes","FountainDecoder#getReceivedPartIndexes","FountainDecoder#getLastPartIndexes","FountainDecoder#estimatedPercentComplete","FountainDecoder#getProgress","FountainDecoder.joinFragments"],"mappings":"AAA;ACM;ICC;KDG;IEC,uCF;IGC,yCH;IIC;KJI;IKC;KLE;CDC;AOE;ICC;KDY;IEC;yBCK,kDD;KFsB;IIC;KJW;IKC;iBCG,gED;qBEC;SFO;KLE;IQC;qBCY,oBD;sBEC,uCF;0EGC,qBH;KRY;IYC;iCCE,gED;yCEI,oDF;oCGC,oDH;KZU;IgBC;KhBW;IiBC;KjBgB;IkBC;KlBE;ImBC;KnBE;IoBC;KpBE;IqBC;KrBE;IsBC;KtBE;IuBC;KvBE;IwBC;KxBE;IyBC;KzBE;I0BC;K1BE;I2BC;K3BY;I4BC;K5BS;CPC;gCoCE;CpCE"}},"type":"js/module"}]}