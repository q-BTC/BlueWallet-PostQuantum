{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":150,"column":0,"index":5313}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk="}},{"name":"@noble/secp256k1","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":296},"end":{"line":8,"column":41,"index":337}}],"key":"ugvgZ2kZKVKf9ahqP3VTezq0lV0="}},{"name":"create-hash","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":497},"end":{"line":11,"column":37,"index":534}}],"key":"S+LTcEsr9DE4tXbLBAdDMJflQ0A="}},{"name":"crypto","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":535},"end":{"line":12,"column":36,"index":571}}],"key":"6Athyt5cKjlNulGJomFjL8BysnY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var necc = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1], \"@noble/secp256k1\"));\n  var _createHash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"create-hash\"));\n  function _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\n  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n  /**\n   * adapted from https://github.com/BitGo/BitGoJS/blob/bitcoinjs_lib_6_sync/modules/utxo-lib/src/noble_ecc.ts\n   * license: Apache License\n   *\n   * @see https://github.com/bitcoinjs/tiny-secp256k1/issues/84#issuecomment-1185682315\n   * @see https://github.com/bitcoinjs/bitcoinjs-lib/issues/1781\n   */\n\n  necc.utils.sha256Sync = function () {\n    var sha256 = (0, _createHash.default)('sha256');\n    for (var _len = arguments.length, messages = new Array(_len), _key = 0; _key < _len; _key++) {\n      messages[_key] = arguments[_key];\n    }\n    for (var message of messages) sha256.update(message);\n    return sha256.digest();\n  };\n  necc.utils.hmacSha256Sync = function (key) {\n    var hash = (0, _$$_REQUIRE(_dependencyMap[3], \"crypto\").createHmac)('sha256', Buffer.from(key));\n    for (var _len2 = arguments.length, messages = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      messages[_key2 - 1] = arguments[_key2];\n    }\n    messages.forEach(function (m) {\n      return hash.update(m);\n    });\n    return Uint8Array.from(hash.digest());\n  };\n\n  /* const normal = necc.utils._normalizePrivateKey;\n  type Hex = string | Uint8Array;\n  type PrivKey = Hex | bigint | number;\n  \n  necc.utils.privateAdd = (privateKey: PrivKey, tweak: Hex) => {\n    console.log({ privateKey, tweak });\n    const p = normal(privateKey);\n    const t = normal(tweak);\n    return necc.utils.privateAdd(necc.utils.mod(p + t, necc.CURVE.n));\n  }; */\n\n  var defaultTrue = function defaultTrue(param) {\n    return param !== false;\n  };\n  function throwToNull(fn) {\n    try {\n      return fn();\n    } catch (e) {\n      // console.log(e);\n      return null;\n    }\n  }\n  function _isPoint(p, xOnly) {\n    if (p.length === 32 !== xOnly) return false;\n    try {\n      return !!necc.Point.fromHex(p);\n    } catch (e) {\n      return false;\n    }\n  }\n  var ecc = {\n    isPoint: function isPoint(p) {\n      return _isPoint(p, false);\n    },\n    isPrivate: function isPrivate(d) {\n      /* if (\n        [\n          '0000000000000000000000000000000000000000000000000000000000000000',\n          'fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141',\n          'fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142',\n        ].includes(d.toString('hex'))\n      ) {\n        return false;\n      } */\n      return necc.utils.isValidPrivateKey(d);\n    },\n    isXOnlyPoint: function isXOnlyPoint(p) {\n      return _isPoint(p, true);\n    },\n    xOnlyPointAddTweak: function xOnlyPointAddTweak(p, tweak) {\n      return throwToNull(function () {\n        var P = necc.utils.pointAddScalar(p, tweak, true);\n        var parity = P[0] % 2 === 1 ? 1 : 0;\n        return {\n          parity: parity,\n          xOnlyPubkey: P.slice(1)\n        };\n      });\n    },\n    pointFromScalar: function pointFromScalar(sk, compressed) {\n      return throwToNull(function () {\n        return necc.getPublicKey(sk, defaultTrue(compressed));\n      });\n    },\n    pointCompress: function pointCompress(p, compressed) {\n      return necc.Point.fromHex(p).toRawBytes(defaultTrue(compressed));\n    },\n    pointMultiply: function pointMultiply(a, tweak, compressed) {\n      return throwToNull(function () {\n        return necc.utils.pointMultiply(a, tweak, defaultTrue(compressed));\n      });\n    },\n    pointAdd: function pointAdd(a, b, compressed) {\n      return throwToNull(function () {\n        var A = necc.Point.fromHex(a);\n        var B = necc.Point.fromHex(b);\n        return A.add(B).toRawBytes(defaultTrue(compressed));\n      });\n    },\n    pointAddScalar: function pointAddScalar(p, tweak, compressed) {\n      return throwToNull(function () {\n        return necc.utils.pointAddScalar(p, tweak, defaultTrue(compressed));\n      });\n    },\n    privateAdd: function privateAdd(d, tweak) {\n      return throwToNull(function () {\n        // console.log({ d, tweak });\n        if (d.join('') === '00000000000000000000000000000001' && tweak.join('') === '00000000000000000000000000000000') {\n          return Buffer.from(d); // make test_ecc happy\n        }\n        var ret = necc.utils.privateAdd(d, tweak);\n        // console.log(ret);\n        if (ret.join('') === '00000000000000000000000000000000') {\n          return null;\n        }\n        return ret;\n      });\n    },\n    privateNegate: function privateNegate(d) {\n      return necc.utils.privateNegate(d);\n    },\n    sign: function sign(h, d, e) {\n      return necc.signSync(h, d, {\n        der: false,\n        extraEntropy: e\n      });\n    },\n    signSchnorr: function signSchnorr(h, d) {\n      var e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Buffer.alloc(32, 0x00);\n      return necc.schnorr.signSync(h, d, e);\n    },\n    verify: function verify(h, Q, signature, strict) {\n      return necc.verify(signature, h, Q, {\n        strict: strict\n      });\n    },\n    verifySchnorr: function verifySchnorr(h, Q, signature) {\n      return necc.schnorr.verifySync(signature, h, Q);\n    }\n  };\n  var _default = exports.default = ecc; // module.exports.ecc = ecc;\n});","lineCount":159,"map":[[7,2,8,0],[7,6,8,0,"necc"],[7,10,8,0],[7,13,8,0,"_interopRequireWildcard"],[7,36,8,0],[7,37,8,0,"_$$_REQUIRE"],[7,48,8,0],[7,49,8,0,"_dependencyMap"],[7,63,8,0],[8,2,11,0],[8,6,11,0,"_createHash"],[8,17,11,0],[8,20,11,0,"_interopRequireDefault"],[8,42,11,0],[8,43,11,0,"_$$_REQUIRE"],[8,54,11,0],[8,55,11,0,"_dependencyMap"],[8,69,11,0],[9,2,11,37],[9,11,11,37,"_getRequireWildcardCache"],[9,36,11,37,"e"],[9,37,11,37],[9,66,11,37,"WeakMap"],[9,73,11,37],[9,92,11,37,"r"],[9,93,11,37],[9,100,11,37,"WeakMap"],[9,107,11,37],[9,111,11,37,"t"],[9,112,11,37],[9,119,11,37,"WeakMap"],[9,126,11,37],[9,138,11,37,"_getRequireWildcardCache"],[9,162,11,37],[9,174,11,37,"_getRequireWildcardCache"],[9,199,11,37,"e"],[9,200,11,37],[9,211,11,37,"e"],[9,212,11,37],[9,215,11,37,"t"],[9,216,11,37],[9,219,11,37,"r"],[9,220,11,37],[9,225,11,37,"e"],[9,226,11,37],[10,2,11,37],[10,11,11,37,"_interopRequireWildcard"],[10,35,11,37,"e"],[10,36,11,37],[10,38,11,37,"r"],[10,39,11,37],[10,48,11,37,"r"],[10,49,11,37],[10,53,11,37,"e"],[10,54,11,37],[10,58,11,37,"e"],[10,59,11,37],[10,60,11,37,"__esModule"],[10,70,11,37],[10,79,11,37,"e"],[10,80,11,37],[10,95,11,37,"e"],[10,96,11,37],[10,119,11,37,"e"],[10,120,11,37],[10,145,11,37,"e"],[10,146,11,37],[10,157,11,37,"default"],[10,164,11,37],[10,166,11,37,"e"],[10,167,11,37],[10,175,11,37,"t"],[10,176,11,37],[10,179,11,37,"_getRequireWildcardCache"],[10,203,11,37],[10,204,11,37,"r"],[10,205,11,37],[10,212,11,37,"t"],[10,213,11,37],[10,217,11,37,"t"],[10,218,11,37],[10,219,11,37,"has"],[10,222,11,37],[10,223,11,37,"e"],[10,224,11,37],[10,234,11,37,"t"],[10,235,11,37],[10,236,11,37,"get"],[10,239,11,37],[10,240,11,37,"e"],[10,241,11,37],[10,248,11,37,"n"],[10,249,11,37],[10,254,11,37,"__proto__"],[10,263,11,37],[10,273,11,37,"a"],[10,274,11,37],[10,277,11,37,"Object"],[10,283,11,37],[10,284,11,37,"defineProperty"],[10,298,11,37],[10,302,11,37,"Object"],[10,308,11,37],[10,309,11,37,"getOwnPropertyDescriptor"],[10,333,11,37],[10,344,11,37,"u"],[10,345,11,37],[10,349,11,37,"e"],[10,350,11,37],[10,370,11,37,"u"],[10,371,11,37],[10,378,11,37,"hasOwnProperty"],[10,392,11,37],[10,393,11,37,"call"],[10,397,11,37],[10,398,11,37,"e"],[10,399,11,37],[10,401,11,37,"u"],[10,402,11,37],[10,411,11,37,"i"],[10,412,11,37],[10,415,11,37,"a"],[10,416,11,37],[10,419,11,37,"Object"],[10,425,11,37],[10,426,11,37,"getOwnPropertyDescriptor"],[10,450,11,37],[10,451,11,37,"e"],[10,452,11,37],[10,454,11,37,"u"],[10,455,11,37],[10,465,11,37,"i"],[10,466,11,37],[10,471,11,37,"i"],[10,472,11,37],[10,473,11,37,"get"],[10,476,11,37],[10,480,11,37,"i"],[10,481,11,37],[10,482,11,37,"set"],[10,485,11,37],[10,489,11,37,"Object"],[10,495,11,37],[10,496,11,37,"defineProperty"],[10,510,11,37],[10,511,11,37,"n"],[10,512,11,37],[10,514,11,37,"u"],[10,515,11,37],[10,517,11,37,"i"],[10,518,11,37],[10,522,11,37,"n"],[10,523,11,37],[10,524,11,37,"u"],[10,525,11,37],[10,529,11,37,"e"],[10,530,11,37],[10,531,11,37,"u"],[10,532,11,37],[10,544,11,37,"n"],[10,545,11,37],[10,546,11,37,"default"],[10,553,11,37],[10,556,11,37,"e"],[10,557,11,37],[10,559,11,37,"t"],[10,560,11,37],[10,564,11,37,"t"],[10,565,11,37],[10,566,11,37,"set"],[10,569,11,37],[10,570,11,37,"e"],[10,571,11,37],[10,573,11,37,"n"],[10,574,11,37],[10,577,11,37,"n"],[10,578,11,37],[11,2,1,0],[12,0,2,0],[13,0,3,0],[14,0,4,0],[15,0,5,0],[16,0,6,0],[17,0,7,0],[19,2,27,0,"necc"],[19,6,27,4],[19,7,27,5,"utils"],[19,12,27,10],[19,13,27,11,"sha256Sync"],[19,23,27,21],[19,26,27,24],[19,38,27,67],[20,4,28,2],[20,8,28,8,"sha256"],[20,14,28,14],[20,17,28,17],[20,21,28,17,"createHash"],[20,40,28,27],[20,42,28,28],[20,50,28,36],[20,51,28,37],[21,4,28,38],[21,13,28,38,"_len"],[21,17,28,38],[21,20,28,38,"arguments"],[21,29,28,38],[21,30,28,38,"length"],[21,36,28,38],[21,38,27,28,"messages"],[21,46,27,36],[21,53,27,36,"Array"],[21,58,27,36],[21,59,27,36,"_len"],[21,63,27,36],[21,66,27,36,"_key"],[21,70,27,36],[21,76,27,36,"_key"],[21,80,27,36],[21,83,27,36,"_len"],[21,87,27,36],[21,89,27,36,"_key"],[21,93,27,36],[22,6,27,28,"messages"],[22,14,27,36],[22,15,27,36,"_key"],[22,19,27,36],[22,23,27,36,"arguments"],[22,32,27,36],[22,33,27,36,"_key"],[22,37,27,36],[23,4,27,36],[24,4,29,2],[24,9,29,7],[24,13,29,13,"message"],[24,20,29,20],[24,24,29,24,"messages"],[24,32,29,32],[24,34,29,34,"sha256"],[24,40,29,40],[24,41,29,41,"update"],[24,47,29,47],[24,48,29,48,"message"],[24,55,29,55],[24,56,29,56],[25,4,30,2],[25,11,30,9,"sha256"],[25,17,30,15],[25,18,30,16,"digest"],[25,24,30,22],[25,25,30,23],[25,26,30,24],[26,2,31,0],[26,3,31,1],[27,2,33,0,"necc"],[27,6,33,4],[27,7,33,5,"utils"],[27,12,33,10],[27,13,33,11,"hmacSha256Sync"],[27,27,33,25],[27,30,33,28],[27,40,33,29,"key"],[27,43,33,44],[27,45,33,88],[28,4,34,2],[28,8,34,8,"hash"],[28,12,34,12],[28,15,34,15],[28,19,34,15,"createHmac"],[28,49,34,15],[28,50,34,15,"createHmac"],[28,70,34,25],[28,72,34,26],[28,80,34,34],[28,82,34,36,"Buffer"],[28,88,34,42],[28,89,34,43,"from"],[28,93,34,47],[28,94,34,48,"key"],[28,97,34,51],[28,98,34,52],[28,99,34,53],[29,4,34,54],[29,13,34,54,"_len2"],[29,18,34,54],[29,21,34,54,"arguments"],[29,30,34,54],[29,31,34,54,"length"],[29,37,34,54],[29,39,33,49,"messages"],[29,47,33,57],[29,54,33,57,"Array"],[29,59,33,57],[29,60,33,57,"_len2"],[29,65,33,57],[29,72,33,57,"_len2"],[29,77,33,57],[29,88,33,57,"_key2"],[29,93,33,57],[29,99,33,57,"_key2"],[29,104,33,57],[29,107,33,57,"_len2"],[29,112,33,57],[29,114,33,57,"_key2"],[29,119,33,57],[30,6,33,49,"messages"],[30,14,33,57],[30,15,33,57,"_key2"],[30,20,33,57],[30,28,33,57,"arguments"],[30,37,33,57],[30,38,33,57,"_key2"],[30,43,33,57],[31,4,33,57],[32,4,35,2,"messages"],[32,12,35,10],[32,13,35,11,"forEach"],[32,20,35,18],[32,21,35,19],[32,31,35,19,"m"],[32,32,35,20],[33,6,35,20],[33,13,35,24,"hash"],[33,17,35,28],[33,18,35,29,"update"],[33,24,35,35],[33,25,35,36,"m"],[33,26,35,37],[33,27,35,38],[34,4,35,38],[34,6,35,39],[35,4,36,2],[35,11,36,9,"Uint8Array"],[35,21,36,19],[35,22,36,20,"from"],[35,26,36,24],[35,27,36,25,"hash"],[35,31,36,29],[35,32,36,30,"digest"],[35,38,36,36],[35,39,36,37],[35,40,36,38],[35,41,36,39],[36,2,37,0],[36,3,37,1],[38,2,39,0],[39,0,40,0],[40,0,41,0],[41,0,42,0],[42,0,43,0],[43,0,44,0],[44,0,45,0],[45,0,46,0],[46,0,47,0],[47,0,48,0],[49,2,50,0],[49,6,50,6,"defaultTrue"],[49,17,50,17],[49,20,50,20],[49,29,50,6,"defaultTrue"],[49,40,50,17,"defaultTrue"],[49,41,50,21,"param"],[49,46,50,36],[50,4,50,36],[50,11,50,50,"param"],[50,16,50,55],[50,21,50,60],[50,26,50,65],[51,2,50,65],[52,2,52,0],[52,11,52,9,"throwToNull"],[52,22,52,20,"throwToNull"],[52,23,52,27,"fn"],[52,25,52,41],[52,27,52,56],[53,4,53,2],[53,8,53,6],[54,6,54,4],[54,13,54,11,"fn"],[54,15,54,13],[54,16,54,14],[54,17,54,15],[55,4,55,2],[55,5,55,3],[55,6,55,4],[55,13,55,11,"e"],[55,14,55,12],[55,16,55,14],[56,6,56,4],[57,6,57,4],[57,13,57,11],[57,17,57,15],[58,4,58,2],[59,2,59,0],[60,2,61,0],[60,11,61,9,"isPoint"],[60,19,61,16,"isPoint"],[60,20,61,17,"p"],[60,21,61,30],[60,23,61,32,"xOnly"],[60,28,61,46],[60,30,61,57],[61,4,62,2],[61,8,62,7,"p"],[61,9,62,8],[61,10,62,9,"length"],[61,16,62,15],[61,21,62,20],[61,23,62,22],[61,28,62,28,"xOnly"],[61,33,62,33],[61,35,62,35],[61,42,62,42],[61,47,62,47],[62,4,63,2],[62,8,63,6],[63,6,64,4],[63,13,64,11],[63,14,64,12],[63,15,64,13,"necc"],[63,19,64,17],[63,20,64,18,"Point"],[63,25,64,23],[63,26,64,24,"fromHex"],[63,33,64,31],[63,34,64,32,"p"],[63,35,64,33],[63,36,64,34],[64,4,65,2],[64,5,65,3],[64,6,65,4],[64,13,65,11,"e"],[64,14,65,12],[64,16,65,14],[65,6,66,4],[65,13,66,11],[65,18,66,16],[66,4,67,2],[67,2,68,0],[68,2,70,0],[68,6,70,6,"ecc"],[68,9,70,96],[68,12,70,99],[69,4,71,2,"isPoint"],[69,11,71,9],[69,13,71,11],[69,22,71,2,"isPoint"],[69,29,71,9,"isPoint"],[69,30,71,12,"p"],[69,31,71,25],[70,6,71,25],[70,13,71,39,"isPoint"],[70,21,71,46],[70,22,71,47,"p"],[70,23,71,48],[70,25,71,50],[70,30,71,55],[70,31,71,56],[71,4,71,56],[72,4,72,2,"isPrivate"],[72,13,72,11],[72,15,72,13],[72,24,72,2,"isPrivate"],[72,33,72,11,"isPrivate"],[72,34,72,14,"d"],[72,35,72,27],[72,37,72,41],[73,6,73,4],[74,0,74,0],[75,0,75,0],[76,0,76,0],[77,0,77,0],[78,0,78,0],[79,0,79,0],[80,0,80,0],[81,0,81,0],[82,6,82,4],[82,13,82,11,"necc"],[82,17,82,15],[82,18,82,16,"utils"],[82,23,82,21],[82,24,82,22,"isValidPrivateKey"],[82,41,82,39],[82,42,82,40,"d"],[82,43,82,41],[82,44,82,42],[83,4,83,2],[83,5,83,3],[84,4,84,2,"isXOnlyPoint"],[84,16,84,14],[84,18,84,16],[84,27,84,2,"isXOnlyPoint"],[84,39,84,14,"isXOnlyPoint"],[84,40,84,17,"p"],[84,41,84,30],[85,6,84,30],[85,13,84,44,"isPoint"],[85,21,84,51],[85,22,84,52,"p"],[85,23,84,53],[85,25,84,55],[85,29,84,59],[85,30,84,60],[86,4,84,60],[87,4,86,2,"xOnlyPointAddTweak"],[87,22,86,20],[87,24,86,22],[87,33,86,2,"xOnlyPointAddTweak"],[87,51,86,20,"xOnlyPointAddTweak"],[87,52,86,23,"p"],[87,53,86,36],[87,55,86,38,"tweak"],[87,60,86,55],[88,6,86,55],[88,13,87,4,"throwToNull"],[88,24,87,15],[88,25,87,16],[88,37,87,22],[89,8,88,6],[89,12,88,12,"P"],[89,13,88,13],[89,16,88,16,"necc"],[89,20,88,20],[89,21,88,21,"utils"],[89,26,88,26],[89,27,88,27,"pointAddScalar"],[89,41,88,41],[89,42,88,42,"p"],[89,43,88,43],[89,45,88,45,"tweak"],[89,50,88,50],[89,52,88,52],[89,56,88,56],[89,57,88,57],[90,8,89,6],[90,12,89,12,"parity"],[90,18,89,18],[90,21,89,21,"P"],[90,22,89,22],[90,23,89,23],[90,24,89,24],[90,25,89,25],[90,28,89,28],[90,29,89,29],[90,34,89,34],[90,35,89,35],[90,38,89,38],[90,39,89,39],[90,42,89,42],[90,43,89,43],[91,8,90,6],[91,15,90,13],[92,10,90,15,"parity"],[92,16,90,21],[92,18,90,15,"parity"],[92,24,90,21],[93,10,90,23,"xOnlyPubkey"],[93,21,90,34],[93,23,90,36,"P"],[93,24,90,37],[93,25,90,38,"slice"],[93,30,90,43],[93,31,90,44],[93,32,90,45],[94,8,90,47],[94,9,90,48],[95,6,91,4],[95,7,91,5],[95,8,91,6],[96,4,91,6],[97,4,93,2,"pointFromScalar"],[97,19,93,17],[97,21,93,19],[97,30,93,2,"pointFromScalar"],[97,45,93,17,"pointFromScalar"],[97,46,93,20,"sk"],[97,48,93,34],[97,50,93,36,"compressed"],[97,60,93,56],[98,6,93,56],[98,13,94,4,"throwToNull"],[98,24,94,15],[98,25,94,16],[99,8,94,16],[99,15,94,22,"necc"],[99,19,94,26],[99,20,94,27,"getPublicKey"],[99,32,94,39],[99,33,94,40,"sk"],[99,35,94,42],[99,37,94,44,"defaultTrue"],[99,48,94,55],[99,49,94,56,"compressed"],[99,59,94,66],[99,60,94,67],[99,61,94,68],[100,6,94,68],[100,8,94,69],[101,4,94,69],[102,4,96,2,"pointCompress"],[102,17,96,15],[102,19,96,17],[102,28,96,2,"pointCompress"],[102,41,96,15,"pointCompress"],[102,42,96,18,"p"],[102,43,96,31],[102,45,96,33,"compressed"],[102,55,96,53],[102,57,96,70],[103,6,97,4],[103,13,97,11,"necc"],[103,17,97,15],[103,18,97,16,"Point"],[103,23,97,21],[103,24,97,22,"fromHex"],[103,31,97,29],[103,32,97,30,"p"],[103,33,97,31],[103,34,97,32],[103,35,97,33,"toRawBytes"],[103,45,97,43],[103,46,97,44,"defaultTrue"],[103,57,97,55],[103,58,97,56,"compressed"],[103,68,97,66],[103,69,97,67],[103,70,97,68],[104,4,98,2],[104,5,98,3],[105,4,100,2,"pointMultiply"],[105,17,100,15],[105,19,100,17],[105,28,100,2,"pointMultiply"],[105,41,100,15,"pointMultiply"],[105,42,100,18,"a"],[105,43,100,31],[105,45,100,33,"tweak"],[105,50,100,50],[105,52,100,52,"compressed"],[105,62,100,72],[106,6,100,72],[106,13,101,4,"throwToNull"],[106,24,101,15],[106,25,101,16],[107,8,101,16],[107,15,101,22,"necc"],[107,19,101,26],[107,20,101,27,"utils"],[107,25,101,32],[107,26,101,33,"pointMultiply"],[107,39,101,46],[107,40,101,47,"a"],[107,41,101,48],[107,43,101,50,"tweak"],[107,48,101,55],[107,50,101,57,"defaultTrue"],[107,61,101,68],[107,62,101,69,"compressed"],[107,72,101,79],[107,73,101,80],[107,74,101,81],[108,6,101,81],[108,8,101,82],[109,4,101,82],[110,4,103,2,"pointAdd"],[110,12,103,10],[110,14,103,12],[110,23,103,2,"pointAdd"],[110,31,103,10,"pointAdd"],[110,32,103,13,"a"],[110,33,103,26],[110,35,103,28,"b"],[110,36,103,41],[110,38,103,43,"compressed"],[110,48,103,63],[111,6,103,63],[111,13,104,4,"throwToNull"],[111,24,104,15],[111,25,104,16],[111,37,104,22],[112,8,105,6],[112,12,105,12,"A"],[112,13,105,13],[112,16,105,16,"necc"],[112,20,105,20],[112,21,105,21,"Point"],[112,26,105,26],[112,27,105,27,"fromHex"],[112,34,105,34],[112,35,105,35,"a"],[112,36,105,36],[112,37,105,37],[113,8,106,6],[113,12,106,12,"B"],[113,13,106,13],[113,16,106,16,"necc"],[113,20,106,20],[113,21,106,21,"Point"],[113,26,106,26],[113,27,106,27,"fromHex"],[113,34,106,34],[113,35,106,35,"b"],[113,36,106,36],[113,37,106,37],[114,8,107,6],[114,15,107,13,"A"],[114,16,107,14],[114,17,107,15,"add"],[114,20,107,18],[114,21,107,19,"B"],[114,22,107,20],[114,23,107,21],[114,24,107,22,"toRawBytes"],[114,34,107,32],[114,35,107,33,"defaultTrue"],[114,46,107,44],[114,47,107,45,"compressed"],[114,57,107,55],[114,58,107,56],[114,59,107,57],[115,6,108,4],[115,7,108,5],[115,8,108,6],[116,4,108,6],[117,4,110,2,"pointAddScalar"],[117,18,110,16],[117,20,110,18],[117,29,110,2,"pointAddScalar"],[117,43,110,16,"pointAddScalar"],[117,44,110,19,"p"],[117,45,110,32],[117,47,110,34,"tweak"],[117,52,110,51],[117,54,110,53,"compressed"],[117,64,110,73],[118,6,110,73],[118,13,111,4,"throwToNull"],[118,24,111,15],[118,25,111,16],[119,8,111,16],[119,15,111,22,"necc"],[119,19,111,26],[119,20,111,27,"utils"],[119,25,111,32],[119,26,111,33,"pointAddScalar"],[119,40,111,47],[119,41,111,48,"p"],[119,42,111,49],[119,44,111,51,"tweak"],[119,49,111,56],[119,51,111,58,"defaultTrue"],[119,62,111,69],[119,63,111,70,"compressed"],[119,73,111,80],[119,74,111,81],[119,75,111,82],[120,6,111,82],[120,8,111,83],[121,4,111,83],[122,4,113,2,"privateAdd"],[122,14,113,12],[122,16,113,14],[122,25,113,2,"privateAdd"],[122,35,113,12,"privateAdd"],[122,36,113,15,"d"],[122,37,113,28],[122,39,113,30,"tweak"],[122,44,113,47],[123,6,113,47],[123,13,114,4,"throwToNull"],[123,24,114,15],[123,25,114,16],[123,37,114,22],[124,8,115,6],[125,8,116,6],[125,12,116,10,"d"],[125,13,116,11],[125,14,116,12,"join"],[125,18,116,16],[125,19,116,17],[125,21,116,19],[125,22,116,20],[125,27,116,25],[125,61,116,59],[125,65,116,63,"tweak"],[125,70,116,68],[125,71,116,69,"join"],[125,75,116,73],[125,76,116,74],[125,78,116,76],[125,79,116,77],[125,84,116,82],[125,118,116,116],[125,120,116,118],[126,10,117,8],[126,17,117,15,"Buffer"],[126,23,117,21],[126,24,117,22,"from"],[126,28,117,26],[126,29,117,27,"d"],[126,30,117,28],[126,31,117,29],[126,32,117,30],[126,33,117,31],[127,8,118,6],[128,8,120,6],[128,12,120,12,"ret"],[128,15,120,15],[128,18,120,18,"necc"],[128,22,120,22],[128,23,120,23,"utils"],[128,28,120,28],[128,29,120,29,"privateAdd"],[128,39,120,39],[128,40,120,40,"d"],[128,41,120,41],[128,43,120,43,"tweak"],[128,48,120,48],[128,49,120,49],[129,8,121,6],[130,8,122,6],[130,12,122,10,"ret"],[130,15,122,13],[130,16,122,14,"join"],[130,20,122,18],[130,21,122,19],[130,23,122,21],[130,24,122,22],[130,29,122,27],[130,63,122,61],[130,65,122,63],[131,10,123,8],[131,17,123,15],[131,21,123,19],[132,8,124,6],[133,8,125,6],[133,15,125,13,"ret"],[133,18,125,16],[134,6,126,4],[134,7,126,5],[134,8,126,6],[135,4,126,6],[136,4,128,2,"privateNegate"],[136,17,128,15],[136,19,128,17],[136,28,128,2,"privateNegate"],[136,41,128,15,"privateNegate"],[136,42,128,18,"d"],[136,43,128,31],[137,6,128,31],[137,13,128,48,"necc"],[137,17,128,52],[137,18,128,53,"utils"],[137,23,128,58],[137,24,128,59,"privateNegate"],[137,37,128,72],[137,38,128,73,"d"],[137,39,128,74],[137,40,128,75],[138,4,128,75],[139,4,130,2,"sign"],[139,8,130,6],[139,10,130,8],[139,19,130,2,"sign"],[139,23,130,6,"sign"],[139,24,130,9,"h"],[139,25,130,22],[139,27,130,24,"d"],[139,28,130,37],[139,30,130,39,"e"],[139,31,130,53],[139,33,130,70],[140,6,131,4],[140,13,131,11,"necc"],[140,17,131,15],[140,18,131,16,"signSync"],[140,26,131,24],[140,27,131,25,"h"],[140,28,131,26],[140,30,131,28,"d"],[140,31,131,29],[140,33,131,31],[141,8,131,33,"der"],[141,11,131,36],[141,13,131,38],[141,18,131,43],[142,8,131,45,"extraEntropy"],[142,20,131,57],[142,22,131,59,"e"],[143,6,131,61],[143,7,131,62],[143,8,131,63],[144,4,132,2],[144,5,132,3],[145,4,134,2,"signSchnorr"],[145,15,134,13],[145,17,134,15],[145,26,134,2,"signSchnorr"],[145,37,134,13,"signSchnorr"],[145,38,134,16,"h"],[145,39,134,29],[145,41,134,31,"d"],[145,42,134,44],[145,44,134,101],[146,6,134,101],[146,10,134,46,"e"],[146,11,134,59],[146,14,134,59,"arguments"],[146,23,134,59],[146,24,134,59,"length"],[146,30,134,59],[146,38,134,59,"arguments"],[146,47,134,59],[146,55,134,59,"undefined"],[146,64,134,59],[146,67,134,59,"arguments"],[146,76,134,59],[146,82,134,62,"Buffer"],[146,88,134,68],[146,89,134,69,"alloc"],[146,94,134,74],[146,95,134,75],[146,97,134,77],[146,99,134,79],[146,103,134,83],[146,104,134,84],[147,6,135,4],[147,13,135,11,"necc"],[147,17,135,15],[147,18,135,16,"schnorr"],[147,25,135,23],[147,26,135,24,"signSync"],[147,34,135,32],[147,35,135,33,"h"],[147,36,135,34],[147,38,135,36,"d"],[147,39,135,37],[147,41,135,39,"e"],[147,42,135,40],[147,43,135,41],[148,4,136,2],[148,5,136,3],[149,4,138,2,"verify"],[149,10,138,8],[149,12,138,10],[149,21,138,2,"verify"],[149,27,138,8,"verify"],[149,28,138,11,"h"],[149,29,138,24],[149,31,138,26,"Q"],[149,32,138,39],[149,34,138,41,"signature"],[149,43,138,62],[149,45,138,64,"strict"],[149,51,138,80],[149,53,138,94],[150,6,139,4],[150,13,139,11,"necc"],[150,17,139,15],[150,18,139,16,"verify"],[150,24,139,22],[150,25,139,23,"signature"],[150,34,139,32],[150,36,139,34,"h"],[150,37,139,35],[150,39,139,37,"Q"],[150,40,139,38],[150,42,139,40],[151,8,139,42,"strict"],[151,14,139,48],[151,16,139,42,"strict"],[152,6,139,49],[152,7,139,50],[152,8,139,51],[153,4,140,2],[153,5,140,3],[154,4,142,2,"verifySchnorr"],[154,17,142,15],[154,19,142,17],[154,28,142,2,"verifySchnorr"],[154,41,142,15,"verifySchnorr"],[154,42,142,18,"h"],[154,43,142,31],[154,45,142,33,"Q"],[154,46,142,46],[154,48,142,48,"signature"],[154,57,142,69],[154,59,142,83],[155,6,143,4],[155,13,143,11,"necc"],[155,17,143,15],[155,18,143,16,"schnorr"],[155,25,143,23],[155,26,143,24,"verifySync"],[155,36,143,34],[155,37,143,35,"signature"],[155,46,143,44],[155,48,143,46,"h"],[155,49,143,47],[155,51,143,49,"Q"],[155,52,143,50],[155,53,143,51],[156,4,144,2],[157,2,145,0],[157,3,145,1],[158,2,145,2],[158,6,145,2,"_default"],[158,14,145,2],[158,17,145,2,"exports"],[158,24,145,2],[158,25,145,2,"default"],[158,32,145,2],[158,35,147,15,"ecc"],[158,38,147,18],[158,40,149,0],[159,0,149,0],[159,3]],"functionMap":{"names":["<global>","necc.utils.sha256Sync","necc.utils.hmacSha256Sync","messages.forEach$argument_0","defaultTrue","throwToNull","isPoint","ecc.isPoint","ecc.isPrivate","ecc.isXOnlyPoint","ecc.xOnlyPointAddTweak","throwToNull$argument_0","ecc.pointFromScalar","ecc.pointCompress","ecc.pointMultiply","ecc.pointAdd","ecc.pointAddScalar","ecc.privateAdd","ecc.privateNegate","ecc.sign","ecc.signSchnorr","ecc.verify","ecc.verifySchnorr"],"mappings":"AAA;wBC0B;CDI;4BEE;mBCE,mBD;CFE;oBIa,6CJ;AKE;CLO;AME;CNO;WOG,6CP;aQC;GRW;gBSC,4CT;sBUE;gBCC;KDI,CV;mBYE;gBDC,oDC,CZ;iBaE;GbE;iBcE;gBHC,iEG,Cd;YeE;gBJC;KII,Cf;kBgBE;gBLC,kEK,ChB;ciBE;gBNC;KMY,CjB;iBkBE,0DlB;QmBE;GnBE;eoBE;GpBE;UqBE;GrBE;iBsBE;GtBE"}},"type":"js/module"}]}